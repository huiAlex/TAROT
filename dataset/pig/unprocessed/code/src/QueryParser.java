// $ANTLR 3.4 /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g 2017-12-23 14:37:19

package org.apache.pig.parser;

import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.pig.parser.PigMacro;

import com.google.common.collect.ImmutableSet;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Lists;
import com.google.common.base.Joiner;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;


/**
 * Parser file for Pig Parser
 *
 * NOTE: THIS FILE IS THE BASE FOR A FEW TREE PARSER FILES, such as AstValidator.g,
 *       SO IF YOU CHANGE THIS FILE, YOU WILL PROBABLY NEED TO MAKE CORRESPONDING CHANGES TO
 *       THOSE FILES AS WELL.
 */
@SuppressWarnings({"all", "warnings", "unchecked"})
public class QueryParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ALL", "AMPERSAND", "AND", "ARROBA", "AS", "ASC", "ASSERT", "BAG", "BIGDECIMAL", "BIGDECIMALNUMBER", "BIGINTEGER", "BIGINTEGERNUMBER", "BOOLEAN", "BY", "BYTEARRAY", "CACHE", "CASE", "CHARARRAY", "COGROUP", "COLON", "COMMA", "CROSS", "CUBE", "DATETIME", "DCOLON", "DEFINE", "DENSE", "DESC", "DIGIT", "DISTINCT", "DIV", "DOLLAR", "DOLLARVAR", "DOUBLE", "DOUBLENUMBER", "DOUBLE_PERIOD", "ELSE", "END", "EQUAL", "EXECCOMMAND", "FALSE", "FAT_ARROW", "FILTER", "FLATTEN", "FLOAT", "FLOATINGPOINT", "FLOATNUMBER", "FOREACH", "FULL", "GENERATE", "GROUP", "ID", "IDENTIFIER", "IF", "IMPORT", "IN", "INNER", "INPUT", "INT", "INTEGER", "INTO", "INVOKE", "IS", "JOIN", "LEFT", "LEFT_BRACKET", "LEFT_CURLY", "LEFT_PAREN", "LETTER", "LIMIT", "LOAD", "LONG", "LONGINTEGER", "MAP", "MAPREDUCE", "MINUS", "ML_COMMENT", "MULTILINE_QUOTEDSTRING", "NOT", "NULL", "NUM_OP_EQ", "NUM_OP_GT", "NUM_OP_GTE", "NUM_OP_LT", "NUM_OP_LTE", "NUM_OP_NE", "ONSCHEMA", "OR", "ORDER", "OTHERWISE", "OUTER", "OUTPUT", "PARALLEL", "PARTITION", "PERCENT", "PERIOD", "PLUS", "POUND", "QMARK", "QUOTEDSTRING", "RANK", "REGISTER", "RETURNS", "RIGHT", "RIGHT_BRACKET", "RIGHT_CURLY", "RIGHT_PAREN", "ROLLUP", "SAMPLE", "SEMI_COLON", "SHIP", "SL_COMMENT", "SPECIALCHAR", "SPLIT", "STAR", "STDERROR", "STDIN", "STDOUT", "STORE", "STREAM", "STR_OP_EQ", "STR_OP_GT", "STR_OP_GTE", "STR_OP_LT", "STR_OP_LTE", "STR_OP_MATCHES", "STR_OP_NE", "THEN", "THROUGH", "TRUE", "TUPLE", "UNION", "USING", "VOID", "WHEN", "WS", "ANY", "BAG_TYPE", "BAG_TYPE_CAST", "BAG_VAL", "BIN_EXPR", "BOOL", "BOOL_COND", "CASE_COND", "CASE_EXPR", "CASE_EXPR_LHS", "CASE_EXPR_RHS", "CAST_EXPR", "COL_RANGE", "EXPR_IN_PAREN", "FIELD_DEF", "FIELD_DEF_WITHOUT_IDENTIFIER", "FOREACH_PLAN_COMPLEX", "FOREACH_PLAN_SIMPLE", "FUNC", "FUNC_EVAL", "FUNC_REF", "INVOKER_FUNC_EVAL", "IN_LHS", "IN_RHS", "JOIN_ITEM", "KEY_VAL_PAIR", "MACRO_BODY", "MACRO_DEF", "MACRO_INLINE", "MAP_TYPE", "MAP_VAL", "NEG", "NESTED_CMD", "NESTED_CMD_ASSI", "NESTED_PROJ", "PARAMS", "QUERY", "REALIAS", "RETURN_VAL", "SPLIT_BRANCH", "STATEMENT", "TOBAG", "TOMAP", "TOTUPLE", "TUPLE_TYPE", "TUPLE_TYPE_CAST", "TUPLE_VAL"
    };

    public static final int EOF=-1;
    public static final int ALL=4;
    public static final int AMPERSAND=5;
    public static final int AND=6;
    public static final int ARROBA=7;
    public static final int AS=8;
    public static final int ASC=9;
    public static final int ASSERT=10;
    public static final int BAG=11;
    public static final int BIGDECIMAL=12;
    public static final int BIGDECIMALNUMBER=13;
    public static final int BIGINTEGER=14;
    public static final int BIGINTEGERNUMBER=15;
    public static final int BOOLEAN=16;
    public static final int BY=17;
    public static final int BYTEARRAY=18;
    public static final int CACHE=19;
    public static final int CASE=20;
    public static final int CHARARRAY=21;
    public static final int COGROUP=22;
    public static final int COLON=23;
    public static final int COMMA=24;
    public static final int CROSS=25;
    public static final int CUBE=26;
    public static final int DATETIME=27;
    public static final int DCOLON=28;
    public static final int DEFINE=29;
    public static final int DENSE=30;
    public static final int DESC=31;
    public static final int DIGIT=32;
    public static final int DISTINCT=33;
    public static final int DIV=34;
    public static final int DOLLAR=35;
    public static final int DOLLARVAR=36;
    public static final int DOUBLE=37;
    public static final int DOUBLENUMBER=38;
    public static final int DOUBLE_PERIOD=39;
    public static final int ELSE=40;
    public static final int END=41;
    public static final int EQUAL=42;
    public static final int EXECCOMMAND=43;
    public static final int FALSE=44;
    public static final int FAT_ARROW=45;
    public static final int FILTER=46;
    public static final int FLATTEN=47;
    public static final int FLOAT=48;
    public static final int FLOATINGPOINT=49;
    public static final int FLOATNUMBER=50;
    public static final int FOREACH=51;
    public static final int FULL=52;
    public static final int GENERATE=53;
    public static final int GROUP=54;
    public static final int ID=55;
    public static final int IDENTIFIER=56;
    public static final int IF=57;
    public static final int IMPORT=58;
    public static final int IN=59;
    public static final int INNER=60;
    public static final int INPUT=61;
    public static final int INT=62;
    public static final int INTEGER=63;
    public static final int INTO=64;
    public static final int INVOKE=65;
    public static final int IS=66;
    public static final int JOIN=67;
    public static final int LEFT=68;
    public static final int LEFT_BRACKET=69;
    public static final int LEFT_CURLY=70;
    public static final int LEFT_PAREN=71;
    public static final int LETTER=72;
    public static final int LIMIT=73;
    public static final int LOAD=74;
    public static final int LONG=75;
    public static final int LONGINTEGER=76;
    public static final int MAP=77;
    public static final int MAPREDUCE=78;
    public static final int MINUS=79;
    public static final int ML_COMMENT=80;
    public static final int MULTILINE_QUOTEDSTRING=81;
    public static final int NOT=82;
    public static final int NULL=83;
    public static final int NUM_OP_EQ=84;
    public static final int NUM_OP_GT=85;
    public static final int NUM_OP_GTE=86;
    public static final int NUM_OP_LT=87;
    public static final int NUM_OP_LTE=88;
    public static final int NUM_OP_NE=89;
    public static final int ONSCHEMA=90;
    public static final int OR=91;
    public static final int ORDER=92;
    public static final int OTHERWISE=93;
    public static final int OUTER=94;
    public static final int OUTPUT=95;
    public static final int PARALLEL=96;
    public static final int PARTITION=97;
    public static final int PERCENT=98;
    public static final int PERIOD=99;
    public static final int PLUS=100;
    public static final int POUND=101;
    public static final int QMARK=102;
    public static final int QUOTEDSTRING=103;
    public static final int RANK=104;
    public static final int REGISTER=105;
    public static final int RETURNS=106;
    public static final int RIGHT=107;
    public static final int RIGHT_BRACKET=108;
    public static final int RIGHT_CURLY=109;
    public static final int RIGHT_PAREN=110;
    public static final int ROLLUP=111;
    public static final int SAMPLE=112;
    public static final int SEMI_COLON=113;
    public static final int SHIP=114;
    public static final int SL_COMMENT=115;
    public static final int SPECIALCHAR=116;
    public static final int SPLIT=117;
    public static final int STAR=118;
    public static final int STDERROR=119;
    public static final int STDIN=120;
    public static final int STDOUT=121;
    public static final int STORE=122;
    public static final int STREAM=123;
    public static final int STR_OP_EQ=124;
    public static final int STR_OP_GT=125;
    public static final int STR_OP_GTE=126;
    public static final int STR_OP_LT=127;
    public static final int STR_OP_LTE=128;
    public static final int STR_OP_MATCHES=129;
    public static final int STR_OP_NE=130;
    public static final int THEN=131;
    public static final int THROUGH=132;
    public static final int TRUE=133;
    public static final int TUPLE=134;
    public static final int UNION=135;
    public static final int USING=136;
    public static final int VOID=137;
    public static final int WHEN=138;
    public static final int WS=139;
    public static final int ANY=140;
    public static final int BAG_TYPE=141;
    public static final int BAG_TYPE_CAST=142;
    public static final int BAG_VAL=143;
    public static final int BIN_EXPR=144;
    public static final int BOOL=145;
    public static final int BOOL_COND=146;
    public static final int CASE_COND=147;
    public static final int CASE_EXPR=148;
    public static final int CASE_EXPR_LHS=149;
    public static final int CASE_EXPR_RHS=150;
    public static final int CAST_EXPR=151;
    public static final int COL_RANGE=152;
    public static final int EXPR_IN_PAREN=153;
    public static final int FIELD_DEF=154;
    public static final int FIELD_DEF_WITHOUT_IDENTIFIER=155;
    public static final int FOREACH_PLAN_COMPLEX=156;
    public static final int FOREACH_PLAN_SIMPLE=157;
    public static final int FUNC=158;
    public static final int FUNC_EVAL=159;
    public static final int FUNC_REF=160;
    public static final int INVOKER_FUNC_EVAL=161;
    public static final int IN_LHS=162;
    public static final int IN_RHS=163;
    public static final int JOIN_ITEM=164;
    public static final int KEY_VAL_PAIR=165;
    public static final int MACRO_BODY=166;
    public static final int MACRO_DEF=167;
    public static final int MACRO_INLINE=168;
    public static final int MAP_TYPE=169;
    public static final int MAP_VAL=170;
    public static final int NEG=171;
    public static final int NESTED_CMD=172;
    public static final int NESTED_CMD_ASSI=173;
    public static final int NESTED_PROJ=174;
    public static final int PARAMS=175;
    public static final int QUERY=176;
    public static final int REALIAS=177;
    public static final int RETURN_VAL=178;
    public static final int SPLIT_BRANCH=179;
    public static final int STATEMENT=180;
    public static final int TOBAG=181;
    public static final int TOMAP=182;
    public static final int TOTUPLE=183;
    public static final int TUPLE_TYPE=184;
    public static final int TUPLE_TYPE_CAST=185;
    public static final int TUPLE_VAL=186;

    // delegates
    public Parser[] getDelegates() {
        return new Parser[] {};
    }

    // delegators


    public QueryParser(TokenStream input) {
        this(input, new RecognizerSharedState());
    }
    public QueryParser(TokenStream input, RecognizerSharedState state) {
        super(input, state);
    }

protected TreeAdaptor adaptor = new CommonTreeAdaptor();

public void setTreeAdaptor(TreeAdaptor adaptor) {
    this.adaptor = adaptor;
}
public TreeAdaptor getTreeAdaptor() {
    return adaptor;
}
    public String[] getTokenNames() { return QueryParser.tokenNames; }
    public String getGrammarFileName() { return "/usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g"; }


    private static Log log = LogFactory.getLog( QueryParser.class );

    private Set<String> memory = new HashSet<String>();

    // Make a deep copy of the given node
    private static Tree deepCopy(Tree tree) {
        Tree copy = tree.dupNode();
        for (int i = 0; i < tree.getChildCount(); i++) {
            Tree child = deepCopy(tree.getChild(i));
            child.setParent(copy);
            copy.addChild(child);
        }
        return copy;
    }

    @Override
    protected Object recoverFromMismatchedToken(IntStream input, int ttype, BitSet follow)
    throws RecognitionException {
        throw new MismatchedTokenException( ttype, input );
    }

    @Override
    public Object recoverFromMismatchedSet(IntStream input, RecognitionException e, BitSet follow)
    throws RecognitionException {
        throw e;
    }

    @Override
    public String getErrorMessage(RecognitionException e, String[] tokenNames ) {
        if( !log.isDebugEnabled() ) {
            if( e instanceof NoViableAltException ) {
                return "Syntax error, unexpected symbol at or near " + getTokenErrorDisplay( e.token );
            } else {
                return super.getErrorMessage( e, tokenNames );
            }
        }

        List stack =  getRuleInvocationStack( e, this.getClass().getName() );
        String msg = null;
        if( e instanceof NoViableAltException ) {
            NoViableAltException nvae = (NoViableAltException)e;
            msg = " no viable alt; token = " + e.token + " (decision=" + nvae.decisionNumber + " state " + nvae.stateNumber + ")" +
                " decision=<<" + nvae.grammarDecisionDescription + ">>";
        } else {
            msg =  super.getErrorMessage( e, tokenNames );
        }
        return stack + " " + msg;
    }

    @Override
    public String getTokenErrorDisplay(Token t) {
        return "'" + t.getText() + "'";
    }

    @Override
    public String getErrorHeader(RecognitionException ex) {
    	return QueryParserUtils.generateErrorHeader( ex, this.getSourceName() );
    }

    private static final Map<Integer, Integer> FUNC_TO_LITERAL = ImmutableMap.of(
        TOBAG, BAG_VAL,
        TOMAP, MAP_VAL,
        TOTUPLE, TUPLE_VAL);

    private static final Set<Integer> BOOLEAN_TOKENS = ImmutableSet.of(
        STR_OP_EQ,
        STR_OP_NE,
        STR_OP_GT,
        STR_OP_LT,
        STR_OP_GTE,
        STR_OP_LTE,
        STR_OP_MATCHES,
        AND,
        OR,
        NOT,
        NULL,
        NUM_OP_EQ,
        NUM_OP_NE,
        NUM_OP_GT,
        NUM_OP_GTE,
        NUM_OP_LT,
        NUM_OP_LTE);

    private static final Set<Integer> LITERAL_TOKENS = ImmutableSet.of(
        INTEGER,
        LONGINTEGER,
        FLOATNUMBER,
        DOUBLENUMBER,
        QUOTEDSTRING,
        NULL,
        TRUE,
        FALSE,
        MAP_VAL,
        BAG_VAL,
        TUPLE_VAL,
        PERIOD,
        POUND);



    public static class query_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "query"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:212:1: query : ( statement )* EOF -> ^( QUERY ( statement )* ) ;
    public final QueryParser.query_return query() throws RecognitionException {
        QueryParser.query_return retval = new QueryParser.query_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EOF2=null;
        QueryParser.statement_return statement1 =null;


        Object EOF2_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:212:7: ( ( statement )* EOF -> ^( QUERY ( statement )* ) )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:212:9: ( statement )* EOF
            {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:212:9: ( statement )*
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==ASSERT||LA1_0==COGROUP||(LA1_0 >= CROSS && LA1_0 <= CUBE)||LA1_0==DEFINE||LA1_0==DISTINCT||(LA1_0 >= ELSE && LA1_0 <= END)||(LA1_0 >= FAT_ARROW && LA1_0 <= FILTER)||LA1_0==FOREACH||LA1_0==GROUP||LA1_0==IDENTIFIER||(LA1_0 >= IMPORT && LA1_0 <= IN)||LA1_0==JOIN||LA1_0==LEFT_PAREN||(LA1_0 >= LIMIT && LA1_0 <= LOAD)||LA1_0==MAPREDUCE||LA1_0==ORDER||(LA1_0 >= RANK && LA1_0 <= REGISTER)||(LA1_0 >= SAMPLE && LA1_0 <= SEMI_COLON)||LA1_0==SPLIT||(LA1_0 >= STORE && LA1_0 <= STREAM)||LA1_0==THEN||LA1_0==UNION||LA1_0==WHEN) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:212:9: statement
            	    {
            	    pushFollow(FOLLOW_statement_in_query426);
            	    statement1=statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_statement.add(statement1.getTree());

            	    }
            	    break;

            	default :
            	    break loop1;
                }
            } while (true);


            EOF2=(Token)match(input,EOF,FOLLOW_EOF_in_query429); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF2);


            // AST REWRITE
            // elements: statement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 212:24: -> ^( QUERY ( statement )* )
            {
                // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:212:27: ^( QUERY ( statement )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(QUERY, "QUERY")
                , root_1);

                // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:212:36: ( statement )*
                while ( stream_statement.hasNext() ) {
                    adaptor.addChild(root_1, stream_statement.nextTree());

                }
                stream_statement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "query"


    public static class schema_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "schema"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:215:1: schema : field_def_list EOF ;
    public final QueryParser.schema_return schema() throws RecognitionException {
        QueryParser.schema_return retval = new QueryParser.schema_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EOF4=null;
        QueryParser.field_def_list_return field_def_list3 =null;


        Object EOF4_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:215:7: ( field_def_list EOF )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:215:9: field_def_list EOF
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_def_list_in_schema448);
            field_def_list3=field_def_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, field_def_list3.getTree());

            EOF4=(Token)match(input,EOF,FOLLOW_EOF_in_schema450); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EOF4_tree = 
            (Object)adaptor.create(EOF4)
            ;
            adaptor.addChild(root_0, EOF4_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "schema"


    public static class statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "statement"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:220:1: statement : ( SEMI_COLON !| general_statement SEMI_COLON !| split_clause SEMI_COLON !| inline_clause SEMI_COLON !| import_clause SEMI_COLON !| realias_clause SEMI_COLON !| register_clause SEMI_COLON !| assert_clause SEMI_COLON !| foreach_statement );
    public final QueryParser.statement_return statement() throws RecognitionException {
        QueryParser.statement_return retval = new QueryParser.statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMI_COLON5=null;
        Token SEMI_COLON7=null;
        Token SEMI_COLON9=null;
        Token SEMI_COLON11=null;
        Token SEMI_COLON13=null;
        Token SEMI_COLON15=null;
        Token SEMI_COLON17=null;
        Token SEMI_COLON19=null;
        QueryParser.general_statement_return general_statement6 =null;

        QueryParser.split_clause_return split_clause8 =null;

        QueryParser.inline_clause_return inline_clause10 =null;

        QueryParser.import_clause_return import_clause12 =null;

        QueryParser.realias_clause_return realias_clause14 =null;

        QueryParser.register_clause_return register_clause16 =null;

        QueryParser.assert_clause_return assert_clause18 =null;

        QueryParser.foreach_statement_return foreach_statement20 =null;


        Object SEMI_COLON5_tree=null;
        Object SEMI_COLON7_tree=null;
        Object SEMI_COLON9_tree=null;
        Object SEMI_COLON11_tree=null;
        Object SEMI_COLON13_tree=null;
        Object SEMI_COLON15_tree=null;
        Object SEMI_COLON17_tree=null;
        Object SEMI_COLON19_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:220:11: ( SEMI_COLON !| general_statement SEMI_COLON !| split_clause SEMI_COLON !| inline_clause SEMI_COLON !| import_clause SEMI_COLON !| realias_clause SEMI_COLON !| register_clause SEMI_COLON !| assert_clause SEMI_COLON !| foreach_statement )
            int alt2=9;
            switch ( input.LA(1) ) {
            case SEMI_COLON:
                {
                alt2=1;
                }
                break;
            case FAT_ARROW:
                {
                int LA2_2 = input.LA(2);

                if ( (LA2_2==FOREACH) ) {
                    alt2=9;
                }
                else if ( (LA2_2==COGROUP||(LA2_2 >= CROSS && LA2_2 <= CUBE)||LA2_2==DEFINE||LA2_2==DISTINCT||LA2_2==FILTER||LA2_2==GROUP||LA2_2==JOIN||LA2_2==LEFT_PAREN||(LA2_2 >= LIMIT && LA2_2 <= LOAD)||LA2_2==MAPREDUCE||LA2_2==ORDER||LA2_2==RANK||LA2_2==SAMPLE||(LA2_2 >= STORE && LA2_2 <= STREAM)||LA2_2==UNION) ) {
                    alt2=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 2, 2, input);

                    throw nvae;

                }
                }
                break;
            case IDENTIFIER:
                {
                int LA2_3 = input.LA(2);

                if ( (LA2_3==EQUAL) ) {
                    switch ( input.LA(3) ) {
                    case COGROUP:
                    case CROSS:
                    case DEFINE:
                    case DISTINCT:
                    case FILTER:
                    case GROUP:
                    case JOIN:
                    case LEFT_PAREN:
                    case LIMIT:
                    case LOAD:
                    case MAPREDUCE:
                    case ORDER:
                    case SAMPLE:
                    case STORE:
                    case STREAM:
                    case UNION:
                        {
                        alt2=2;
                        }
                        break;
                    case CUBE:
                        {
                        switch ( input.LA(4) ) {
                        case ARROBA:
                        case CUBE:
                        case ELSE:
                        case END:
                        case IDENTIFIER:
                        case IN:
                        case RANK:
                        case THEN:
                        case WHEN:
                            {
                            alt2=2;
                            }
                            break;
                        case LEFT_PAREN:
                            {
                            int LA2_15 = input.LA(5);

                            if ( (LA2_15==COGROUP||(LA2_15 >= CROSS && LA2_15 <= CUBE)||LA2_15==DEFINE||LA2_15==DISTINCT||LA2_15==FILTER||LA2_15==FOREACH||LA2_15==GROUP||LA2_15==JOIN||(LA2_15 >= LIMIT && LA2_15 <= LOAD)||LA2_15==MAPREDUCE||LA2_15==ORDER||LA2_15==RANK||LA2_15==SAMPLE||(LA2_15 >= STORE && LA2_15 <= STREAM)||LA2_15==UNION) ) {
                                alt2=2;
                            }
                            else if ( (LA2_15==BIGDECIMALNUMBER||LA2_15==BIGINTEGERNUMBER||LA2_15==DOLLARVAR||LA2_15==DOUBLENUMBER||LA2_15==IDENTIFIER||LA2_15==INTEGER||LA2_15==QUOTEDSTRING||LA2_15==RIGHT_PAREN) ) {
                                alt2=4;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 2, 15, input);

                                throw nvae;

                            }
                            }
                            break;
                        case SEMI_COLON:
                            {
                            alt2=6;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 2, 17, input);

                            throw nvae;

                        }

                        }
                        break;
                    case RANK:
                        {
                        switch ( input.LA(4) ) {
                        case ARROBA:
                        case CUBE:
                        case ELSE:
                        case END:
                        case IDENTIFIER:
                        case IN:
                        case RANK:
                        case THEN:
                        case WHEN:
                            {
                            alt2=2;
                            }
                            break;
                        case LEFT_PAREN:
                            {
                            int LA2_16 = input.LA(5);

                            if ( (LA2_16==COGROUP||(LA2_16 >= CROSS && LA2_16 <= CUBE)||LA2_16==DEFINE||LA2_16==DISTINCT||LA2_16==FILTER||LA2_16==FOREACH||LA2_16==GROUP||LA2_16==JOIN||(LA2_16 >= LIMIT && LA2_16 <= LOAD)||LA2_16==MAPREDUCE||LA2_16==ORDER||LA2_16==RANK||LA2_16==SAMPLE||(LA2_16 >= STORE && LA2_16 <= STREAM)||LA2_16==UNION) ) {
                                alt2=2;
                            }
                            else if ( (LA2_16==BIGDECIMALNUMBER||LA2_16==BIGINTEGERNUMBER||LA2_16==DOLLARVAR||LA2_16==DOUBLENUMBER||LA2_16==IDENTIFIER||LA2_16==INTEGER||LA2_16==QUOTEDSTRING||LA2_16==RIGHT_PAREN) ) {
                                alt2=4;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 2, 16, input);

                                throw nvae;

                            }
                            }
                            break;
                        case SEMI_COLON:
                            {
                            alt2=6;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 2, 18, input);

                            throw nvae;

                        }

                        }
                        break;
                    case IDENTIFIER:
                        {
                        int LA2_19 = input.LA(4);

                        if ( (LA2_19==LEFT_PAREN) ) {
                            alt2=4;
                        }
                        else if ( (LA2_19==SEMI_COLON) ) {
                            alt2=6;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 2, 19, input);

                            throw nvae;

                        }
                        }
                        break;
                    case ELSE:
                    case END:
                    case IN:
                    case THEN:
                    case WHEN:
                        {
                        int LA2_20 = input.LA(4);

                        if ( (LA2_20==LEFT_PAREN) ) {
                            alt2=4;
                        }
                        else if ( (LA2_20==SEMI_COLON) ) {
                            alt2=6;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 2, 20, input);

                            throw nvae;

                        }
                        }
                        break;
                    case FOREACH:
                        {
                        alt2=9;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 2, 13, input);

                        throw nvae;

                    }

                }
                else if ( (LA2_3==COMMA||LA2_3==LEFT_PAREN) ) {
                    alt2=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 2, 3, input);

                    throw nvae;

                }
                }
                break;
            case CUBE:
                {
                switch ( input.LA(2) ) {
                case EQUAL:
                    {
                    switch ( input.LA(3) ) {
                    case COGROUP:
                    case CROSS:
                    case DEFINE:
                    case DISTINCT:
                    case FILTER:
                    case GROUP:
                    case JOIN:
                    case LEFT_PAREN:
                    case LIMIT:
                    case LOAD:
                    case MAPREDUCE:
                    case ORDER:
                    case SAMPLE:
                    case STORE:
                    case STREAM:
                    case UNION:
                        {
                        alt2=2;
                        }
                        break;
                    case CUBE:
                        {
                        switch ( input.LA(4) ) {
                        case ARROBA:
                        case CUBE:
                        case ELSE:
                        case END:
                        case IDENTIFIER:
                        case IN:
                        case RANK:
                        case THEN:
                        case WHEN:
                            {
                            alt2=2;
                            }
                            break;
                        case LEFT_PAREN:
                            {
                            int LA2_15 = input.LA(5);

                            if ( (LA2_15==COGROUP||(LA2_15 >= CROSS && LA2_15 <= CUBE)||LA2_15==DEFINE||LA2_15==DISTINCT||LA2_15==FILTER||LA2_15==FOREACH||LA2_15==GROUP||LA2_15==JOIN||(LA2_15 >= LIMIT && LA2_15 <= LOAD)||LA2_15==MAPREDUCE||LA2_15==ORDER||LA2_15==RANK||LA2_15==SAMPLE||(LA2_15 >= STORE && LA2_15 <= STREAM)||LA2_15==UNION) ) {
                                alt2=2;
                            }
                            else if ( (LA2_15==BIGDECIMALNUMBER||LA2_15==BIGINTEGERNUMBER||LA2_15==DOLLARVAR||LA2_15==DOUBLENUMBER||LA2_15==IDENTIFIER||LA2_15==INTEGER||LA2_15==QUOTEDSTRING||LA2_15==RIGHT_PAREN) ) {
                                alt2=4;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 2, 15, input);

                                throw nvae;

                            }
                            }
                            break;
                        case SEMI_COLON:
                            {
                            alt2=6;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 2, 17, input);

                            throw nvae;

                        }

                        }
                        break;
                    case RANK:
                        {
                        switch ( input.LA(4) ) {
                        case ARROBA:
                        case CUBE:
                        case ELSE:
                        case END:
                        case IDENTIFIER:
                        case IN:
                        case RANK:
                        case THEN:
                        case WHEN:
                            {
                            alt2=2;
                            }
                            break;
                        case LEFT_PAREN:
                            {
                            int LA2_16 = input.LA(5);

                            if ( (LA2_16==COGROUP||(LA2_16 >= CROSS && LA2_16 <= CUBE)||LA2_16==DEFINE||LA2_16==DISTINCT||LA2_16==FILTER||LA2_16==FOREACH||LA2_16==GROUP||LA2_16==JOIN||(LA2_16 >= LIMIT && LA2_16 <= LOAD)||LA2_16==MAPREDUCE||LA2_16==ORDER||LA2_16==RANK||LA2_16==SAMPLE||(LA2_16 >= STORE && LA2_16 <= STREAM)||LA2_16==UNION) ) {
                                alt2=2;
                            }
                            else if ( (LA2_16==BIGDECIMALNUMBER||LA2_16==BIGINTEGERNUMBER||LA2_16==DOLLARVAR||LA2_16==DOUBLENUMBER||LA2_16==IDENTIFIER||LA2_16==INTEGER||LA2_16==QUOTEDSTRING||LA2_16==RIGHT_PAREN) ) {
                                alt2=4;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 2, 16, input);

                                throw nvae;

                            }
                            }
                            break;
                        case SEMI_COLON:
                            {
                            alt2=6;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 2, 18, input);

                            throw nvae;

                        }

                        }
                        break;
                    case IDENTIFIER:
                        {
                        int LA2_19 = input.LA(4);

                        if ( (LA2_19==LEFT_PAREN) ) {
                            alt2=4;
                        }
                        else if ( (LA2_19==SEMI_COLON) ) {
                            alt2=6;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 2, 19, input);

                            throw nvae;

                        }
                        }
                        break;
                    case ELSE:
                    case END:
                    case IN:
                    case THEN:
                    case WHEN:
                        {
                        int LA2_20 = input.LA(4);

                        if ( (LA2_20==LEFT_PAREN) ) {
                            alt2=4;
                        }
                        else if ( (LA2_20==SEMI_COLON) ) {
                            alt2=6;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 2, 20, input);

                            throw nvae;

                        }
                        }
                        break;
                    case FOREACH:
                        {
                        alt2=9;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 2, 13, input);

                        throw nvae;

                    }

                    }
                    break;
                case ARROBA:
                case CUBE:
                case ELSE:
                case END:
                case IDENTIFIER:
                case IN:
                case RANK:
                case THEN:
                case WHEN:
                    {
                    alt2=2;
                    }
                    break;
                case LEFT_PAREN:
                    {
                    int LA2_15 = input.LA(3);

                    if ( (LA2_15==COGROUP||(LA2_15 >= CROSS && LA2_15 <= CUBE)||LA2_15==DEFINE||LA2_15==DISTINCT||LA2_15==FILTER||LA2_15==FOREACH||LA2_15==GROUP||LA2_15==JOIN||(LA2_15 >= LIMIT && LA2_15 <= LOAD)||LA2_15==MAPREDUCE||LA2_15==ORDER||LA2_15==RANK||LA2_15==SAMPLE||(LA2_15 >= STORE && LA2_15 <= STREAM)||LA2_15==UNION) ) {
                        alt2=2;
                    }
                    else if ( (LA2_15==BIGDECIMALNUMBER||LA2_15==BIGINTEGERNUMBER||LA2_15==DOLLARVAR||LA2_15==DOUBLENUMBER||LA2_15==IDENTIFIER||LA2_15==INTEGER||LA2_15==QUOTEDSTRING||LA2_15==RIGHT_PAREN) ) {
                        alt2=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 2, 15, input);

                        throw nvae;

                    }
                    }
                    break;
                case COMMA:
                    {
                    alt2=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 2, 4, input);

                    throw nvae;

                }

                }
                break;
            case COGROUP:
            case CROSS:
            case DEFINE:
            case DISTINCT:
            case FILTER:
            case GROUP:
            case JOIN:
            case LEFT_PAREN:
            case LIMIT:
            case LOAD:
            case MAPREDUCE:
            case ORDER:
            case SAMPLE:
            case STORE:
            case STREAM:
            case UNION:
                {
                alt2=2;
                }
                break;
            case RANK:
                {
                switch ( input.LA(2) ) {
                case EQUAL:
                    {
                    switch ( input.LA(3) ) {
                    case COGROUP:
                    case CROSS:
                    case DEFINE:
                    case DISTINCT:
                    case FILTER:
                    case GROUP:
                    case JOIN:
                    case LEFT_PAREN:
                    case LIMIT:
                    case LOAD:
                    case MAPREDUCE:
                    case ORDER:
                    case SAMPLE:
                    case STORE:
                    case STREAM:
                    case UNION:
                        {
                        alt2=2;
                        }
                        break;
                    case CUBE:
                        {
                        switch ( input.LA(4) ) {
                        case ARROBA:
                        case CUBE:
                        case ELSE:
                        case END:
                        case IDENTIFIER:
                        case IN:
                        case RANK:
                        case THEN:
                        case WHEN:
                            {
                            alt2=2;
                            }
                            break;
                        case LEFT_PAREN:
                            {
                            int LA2_15 = input.LA(5);

                            if ( (LA2_15==COGROUP||(LA2_15 >= CROSS && LA2_15 <= CUBE)||LA2_15==DEFINE||LA2_15==DISTINCT||LA2_15==FILTER||LA2_15==FOREACH||LA2_15==GROUP||LA2_15==JOIN||(LA2_15 >= LIMIT && LA2_15 <= LOAD)||LA2_15==MAPREDUCE||LA2_15==ORDER||LA2_15==RANK||LA2_15==SAMPLE||(LA2_15 >= STORE && LA2_15 <= STREAM)||LA2_15==UNION) ) {
                                alt2=2;
                            }
                            else if ( (LA2_15==BIGDECIMALNUMBER||LA2_15==BIGINTEGERNUMBER||LA2_15==DOLLARVAR||LA2_15==DOUBLENUMBER||LA2_15==IDENTIFIER||LA2_15==INTEGER||LA2_15==QUOTEDSTRING||LA2_15==RIGHT_PAREN) ) {
                                alt2=4;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 2, 15, input);

                                throw nvae;

                            }
                            }
                            break;
                        case SEMI_COLON:
                            {
                            alt2=6;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 2, 17, input);

                            throw nvae;

                        }

                        }
                        break;
                    case RANK:
                        {
                        switch ( input.LA(4) ) {
                        case ARROBA:
                        case CUBE:
                        case ELSE:
                        case END:
                        case IDENTIFIER:
                        case IN:
                        case RANK:
                        case THEN:
                        case WHEN:
                            {
                            alt2=2;
                            }
                            break;
                        case LEFT_PAREN:
                            {
                            int LA2_16 = input.LA(5);

                            if ( (LA2_16==COGROUP||(LA2_16 >= CROSS && LA2_16 <= CUBE)||LA2_16==DEFINE||LA2_16==DISTINCT||LA2_16==FILTER||LA2_16==FOREACH||LA2_16==GROUP||LA2_16==JOIN||(LA2_16 >= LIMIT && LA2_16 <= LOAD)||LA2_16==MAPREDUCE||LA2_16==ORDER||LA2_16==RANK||LA2_16==SAMPLE||(LA2_16 >= STORE && LA2_16 <= STREAM)||LA2_16==UNION) ) {
                                alt2=2;
                            }
                            else if ( (LA2_16==BIGDECIMALNUMBER||LA2_16==BIGINTEGERNUMBER||LA2_16==DOLLARVAR||LA2_16==DOUBLENUMBER||LA2_16==IDENTIFIER||LA2_16==INTEGER||LA2_16==QUOTEDSTRING||LA2_16==RIGHT_PAREN) ) {
                                alt2=4;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 2, 16, input);

                                throw nvae;

                            }
                            }
                            break;
                        case SEMI_COLON:
                            {
                            alt2=6;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 2, 18, input);

                            throw nvae;

                        }

                        }
                        break;
                    case IDENTIFIER:
                        {
                        int LA2_19 = input.LA(4);

                        if ( (LA2_19==LEFT_PAREN) ) {
                            alt2=4;
                        }
                        else if ( (LA2_19==SEMI_COLON) ) {
                            alt2=6;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 2, 19, input);

                            throw nvae;

                        }
                        }
                        break;
                    case ELSE:
                    case END:
                    case IN:
                    case THEN:
                    case WHEN:
                        {
                        int LA2_20 = input.LA(4);

                        if ( (LA2_20==LEFT_PAREN) ) {
                            alt2=4;
                        }
                        else if ( (LA2_20==SEMI_COLON) ) {
                            alt2=6;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 2, 20, input);

                            throw nvae;

                        }
                        }
                        break;
                    case FOREACH:
                        {
                        alt2=9;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 2, 13, input);

                        throw nvae;

                    }

                    }
                    break;
                case ARROBA:
                case CUBE:
                case ELSE:
                case END:
                case IDENTIFIER:
                case IN:
                case RANK:
                case THEN:
                case WHEN:
                    {
                    alt2=2;
                    }
                    break;
                case LEFT_PAREN:
                    {
                    int LA2_16 = input.LA(3);

                    if ( (LA2_16==COGROUP||(LA2_16 >= CROSS && LA2_16 <= CUBE)||LA2_16==DEFINE||LA2_16==DISTINCT||LA2_16==FILTER||LA2_16==FOREACH||LA2_16==GROUP||LA2_16==JOIN||(LA2_16 >= LIMIT && LA2_16 <= LOAD)||LA2_16==MAPREDUCE||LA2_16==ORDER||LA2_16==RANK||LA2_16==SAMPLE||(LA2_16 >= STORE && LA2_16 <= STREAM)||LA2_16==UNION) ) {
                        alt2=2;
                    }
                    else if ( (LA2_16==BIGDECIMALNUMBER||LA2_16==BIGINTEGERNUMBER||LA2_16==DOLLARVAR||LA2_16==DOUBLENUMBER||LA2_16==IDENTIFIER||LA2_16==INTEGER||LA2_16==QUOTEDSTRING||LA2_16==RIGHT_PAREN) ) {
                        alt2=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 2, 16, input);

                        throw nvae;

                    }
                    }
                    break;
                case COMMA:
                    {
                    alt2=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 2, 6, input);

                    throw nvae;

                }

                }
                break;
            case ELSE:
            case END:
            case IN:
            case THEN:
            case WHEN:
                {
                int LA2_7 = input.LA(2);

                if ( (LA2_7==EQUAL) ) {
                    switch ( input.LA(3) ) {
                    case COGROUP:
                    case CROSS:
                    case DEFINE:
                    case DISTINCT:
                    case FILTER:
                    case GROUP:
                    case JOIN:
                    case LEFT_PAREN:
                    case LIMIT:
                    case LOAD:
                    case MAPREDUCE:
                    case ORDER:
                    case SAMPLE:
                    case STORE:
                    case STREAM:
                    case UNION:
                        {
                        alt2=2;
                        }
                        break;
                    case CUBE:
                        {
                        switch ( input.LA(4) ) {
                        case ARROBA:
                        case CUBE:
                        case ELSE:
                        case END:
                        case IDENTIFIER:
                        case IN:
                        case RANK:
                        case THEN:
                        case WHEN:
                            {
                            alt2=2;
                            }
                            break;
                        case LEFT_PAREN:
                            {
                            int LA2_15 = input.LA(5);

                            if ( (LA2_15==COGROUP||(LA2_15 >= CROSS && LA2_15 <= CUBE)||LA2_15==DEFINE||LA2_15==DISTINCT||LA2_15==FILTER||LA2_15==FOREACH||LA2_15==GROUP||LA2_15==JOIN||(LA2_15 >= LIMIT && LA2_15 <= LOAD)||LA2_15==MAPREDUCE||LA2_15==ORDER||LA2_15==RANK||LA2_15==SAMPLE||(LA2_15 >= STORE && LA2_15 <= STREAM)||LA2_15==UNION) ) {
                                alt2=2;
                            }
                            else if ( (LA2_15==BIGDECIMALNUMBER||LA2_15==BIGINTEGERNUMBER||LA2_15==DOLLARVAR||LA2_15==DOUBLENUMBER||LA2_15==IDENTIFIER||LA2_15==INTEGER||LA2_15==QUOTEDSTRING||LA2_15==RIGHT_PAREN) ) {
                                alt2=4;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 2, 15, input);

                                throw nvae;

                            }
                            }
                            break;
                        case SEMI_COLON:
                            {
                            alt2=6;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 2, 17, input);

                            throw nvae;

                        }

                        }
                        break;
                    case RANK:
                        {
                        switch ( input.LA(4) ) {
                        case ARROBA:
                        case CUBE:
                        case ELSE:
                        case END:
                        case IDENTIFIER:
                        case IN:
                        case RANK:
                        case THEN:
                        case WHEN:
                            {
                            alt2=2;
                            }
                            break;
                        case LEFT_PAREN:
                            {
                            int LA2_16 = input.LA(5);

                            if ( (LA2_16==COGROUP||(LA2_16 >= CROSS && LA2_16 <= CUBE)||LA2_16==DEFINE||LA2_16==DISTINCT||LA2_16==FILTER||LA2_16==FOREACH||LA2_16==GROUP||LA2_16==JOIN||(LA2_16 >= LIMIT && LA2_16 <= LOAD)||LA2_16==MAPREDUCE||LA2_16==ORDER||LA2_16==RANK||LA2_16==SAMPLE||(LA2_16 >= STORE && LA2_16 <= STREAM)||LA2_16==UNION) ) {
                                alt2=2;
                            }
                            else if ( (LA2_16==BIGDECIMALNUMBER||LA2_16==BIGINTEGERNUMBER||LA2_16==DOLLARVAR||LA2_16==DOUBLENUMBER||LA2_16==IDENTIFIER||LA2_16==INTEGER||LA2_16==QUOTEDSTRING||LA2_16==RIGHT_PAREN) ) {
                                alt2=4;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 2, 16, input);

                                throw nvae;

                            }
                            }
                            break;
                        case SEMI_COLON:
                            {
                            alt2=6;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 2, 18, input);

                            throw nvae;

                        }

                        }
                        break;
                    case IDENTIFIER:
                        {
                        int LA2_19 = input.LA(4);

                        if ( (LA2_19==LEFT_PAREN) ) {
                            alt2=4;
                        }
                        else if ( (LA2_19==SEMI_COLON) ) {
                            alt2=6;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 2, 19, input);

                            throw nvae;

                        }
                        }
                        break;
                    case ELSE:
                    case END:
                    case IN:
                    case THEN:
                    case WHEN:
                        {
                        int LA2_20 = input.LA(4);

                        if ( (LA2_20==LEFT_PAREN) ) {
                            alt2=4;
                        }
                        else if ( (LA2_20==SEMI_COLON) ) {
                            alt2=6;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 2, 20, input);

                            throw nvae;

                        }
                        }
                        break;
                    case FOREACH:
                        {
                        alt2=9;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 2, 13, input);

                        throw nvae;

                    }

                }
                else if ( (LA2_7==COMMA||LA2_7==LEFT_PAREN) ) {
                    alt2=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 2, 7, input);

                    throw nvae;

                }
                }
                break;
            case SPLIT:
                {
                alt2=3;
                }
                break;
            case IMPORT:
                {
                alt2=5;
                }
                break;
            case REGISTER:
                {
                alt2=7;
                }
                break;
            case ASSERT:
                {
                alt2=8;
                }
                break;
            case FOREACH:
                {
                alt2=9;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 2, 0, input);

                throw nvae;

            }

            switch (alt2) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:220:13: SEMI_COLON !
                    {
                    root_0 = (Object)adaptor.nil();


                    SEMI_COLON5=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_statement461); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:221:13: general_statement SEMI_COLON !
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_general_statement_in_statement476);
                    general_statement6=general_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, general_statement6.getTree());

                    SEMI_COLON7=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_statement478); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:222:13: split_clause SEMI_COLON !
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_split_clause_in_statement493);
                    split_clause8=split_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, split_clause8.getTree());

                    SEMI_COLON9=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_statement495); if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:223:13: inline_clause SEMI_COLON !
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_inline_clause_in_statement510);
                    inline_clause10=inline_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inline_clause10.getTree());

                    SEMI_COLON11=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_statement512); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:224:13: import_clause SEMI_COLON !
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_import_clause_in_statement527);
                    import_clause12=import_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, import_clause12.getTree());

                    SEMI_COLON13=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_statement529); if (state.failed) return retval;

                    }
                    break;
                case 6 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:225:13: realias_clause SEMI_COLON !
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_realias_clause_in_statement544);
                    realias_clause14=realias_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, realias_clause14.getTree());

                    SEMI_COLON15=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_statement546); if (state.failed) return retval;

                    }
                    break;
                case 7 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:226:13: register_clause SEMI_COLON !
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_register_clause_in_statement561);
                    register_clause16=register_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, register_clause16.getTree());

                    SEMI_COLON17=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_statement563); if (state.failed) return retval;

                    }
                    break;
                case 8 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:227:13: assert_clause SEMI_COLON !
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_assert_clause_in_statement578);
                    assert_clause18=assert_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, assert_clause18.getTree());

                    SEMI_COLON19=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_statement580); if (state.failed) return retval;

                    }
                    break;
                case 9 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:231:13: foreach_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_foreach_statement_in_statement628);
                    foreach_statement20=foreach_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, foreach_statement20.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "statement"


    public static class nested_op_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_op_clause"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:234:1: nested_op_clause : ( LEFT_PAREN ! op_clause ( parallel_clause )? RIGHT_PAREN !| LEFT_PAREN FOREACH rel ( foreach_plan_complex | ( foreach_plan_simple ( parallel_clause )? ) ) RIGHT_PAREN -> ^( FOREACH rel ( foreach_plan_complex )? ( foreach_plan_simple )? ) ( parallel_clause )? );
    public final QueryParser.nested_op_clause_return nested_op_clause() throws RecognitionException {
        QueryParser.nested_op_clause_return retval = new QueryParser.nested_op_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN21=null;
        Token RIGHT_PAREN24=null;
        Token LEFT_PAREN25=null;
        Token FOREACH26=null;
        Token RIGHT_PAREN31=null;
        QueryParser.op_clause_return op_clause22 =null;

        QueryParser.parallel_clause_return parallel_clause23 =null;

        QueryParser.rel_return rel27 =null;

        QueryParser.foreach_plan_complex_return foreach_plan_complex28 =null;

        QueryParser.foreach_plan_simple_return foreach_plan_simple29 =null;

        QueryParser.parallel_clause_return parallel_clause30 =null;


        Object LEFT_PAREN21_tree=null;
        Object RIGHT_PAREN24_tree=null;
        Object LEFT_PAREN25_tree=null;
        Object FOREACH26_tree=null;
        Object RIGHT_PAREN31_tree=null;
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_FOREACH=new RewriteRuleTokenStream(adaptor,"token FOREACH");
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleSubtreeStream stream_parallel_clause=new RewriteRuleSubtreeStream(adaptor,"rule parallel_clause");
        RewriteRuleSubtreeStream stream_foreach_plan_simple=new RewriteRuleSubtreeStream(adaptor,"rule foreach_plan_simple");
        RewriteRuleSubtreeStream stream_rel=new RewriteRuleSubtreeStream(adaptor,"rule rel");
        RewriteRuleSubtreeStream stream_foreach_plan_complex=new RewriteRuleSubtreeStream(adaptor,"rule foreach_plan_complex");
        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:234:18: ( LEFT_PAREN ! op_clause ( parallel_clause )? RIGHT_PAREN !| LEFT_PAREN FOREACH rel ( foreach_plan_complex | ( foreach_plan_simple ( parallel_clause )? ) ) RIGHT_PAREN -> ^( FOREACH rel ( foreach_plan_complex )? ( foreach_plan_simple )? ) ( parallel_clause )? )
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==LEFT_PAREN) ) {
                int LA6_1 = input.LA(2);

                if ( (LA6_1==FOREACH) ) {
                    alt6=2;
                }
                else if ( (LA6_1==COGROUP||(LA6_1 >= CROSS && LA6_1 <= CUBE)||LA6_1==DEFINE||LA6_1==DISTINCT||LA6_1==FILTER||LA6_1==GROUP||LA6_1==JOIN||(LA6_1 >= LIMIT && LA6_1 <= LOAD)||LA6_1==MAPREDUCE||LA6_1==ORDER||LA6_1==RANK||LA6_1==SAMPLE||(LA6_1 >= STORE && LA6_1 <= STREAM)||LA6_1==UNION) ) {
                    alt6=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 6, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 6, 0, input);

                throw nvae;

            }
            switch (alt6) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:234:20: LEFT_PAREN ! op_clause ( parallel_clause )? RIGHT_PAREN !
                    {
                    root_0 = (Object)adaptor.nil();


                    LEFT_PAREN21=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_nested_op_clause637); if (state.failed) return retval;

                    pushFollow(FOLLOW_op_clause_in_nested_op_clause640);
                    op_clause22=op_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, op_clause22.getTree());

                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:234:42: ( parallel_clause )?
                    int alt3=2;
                    int LA3_0 = input.LA(1);

                    if ( (LA3_0==PARALLEL) ) {
                        alt3=1;
                    }
                    switch (alt3) {
                        case 1 :
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:234:42: parallel_clause
                            {
                            pushFollow(FOLLOW_parallel_clause_in_nested_op_clause642);
                            parallel_clause23=parallel_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, parallel_clause23.getTree());

                            }
                            break;

                    }


                    RIGHT_PAREN24=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_nested_op_clause645); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:235:20: LEFT_PAREN FOREACH rel ( foreach_plan_complex | ( foreach_plan_simple ( parallel_clause )? ) ) RIGHT_PAREN
                    {
                    LEFT_PAREN25=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_nested_op_clause667); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN25);


                    FOREACH26=(Token)match(input,FOREACH,FOLLOW_FOREACH_in_nested_op_clause669); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOREACH.add(FOREACH26);


                    pushFollow(FOLLOW_rel_in_nested_op_clause671);
                    rel27=rel();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rel.add(rel27.getTree());

                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:235:43: ( foreach_plan_complex | ( foreach_plan_simple ( parallel_clause )? ) )
                    int alt5=2;
                    int LA5_0 = input.LA(1);

                    if ( (LA5_0==LEFT_CURLY) ) {
                        alt5=1;
                    }
                    else if ( (LA5_0==GENERATE) ) {
                        alt5=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 5, 0, input);

                        throw nvae;

                    }
                    switch (alt5) {
                        case 1 :
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:235:45: foreach_plan_complex
                            {
                            pushFollow(FOLLOW_foreach_plan_complex_in_nested_op_clause675);
                            foreach_plan_complex28=foreach_plan_complex();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_foreach_plan_complex.add(foreach_plan_complex28.getTree());

                            }
                            break;
                        case 2 :
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:235:68: ( foreach_plan_simple ( parallel_clause )? )
                            {
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:235:68: ( foreach_plan_simple ( parallel_clause )? )
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:235:70: foreach_plan_simple ( parallel_clause )?
                            {
                            pushFollow(FOLLOW_foreach_plan_simple_in_nested_op_clause681);
                            foreach_plan_simple29=foreach_plan_simple();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_foreach_plan_simple.add(foreach_plan_simple29.getTree());

                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:235:90: ( parallel_clause )?
                            int alt4=2;
                            int LA4_0 = input.LA(1);

                            if ( (LA4_0==PARALLEL) ) {
                                alt4=1;
                            }
                            switch (alt4) {
                                case 1 :
                                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:235:90: parallel_clause
                                    {
                                    pushFollow(FOLLOW_parallel_clause_in_nested_op_clause683);
                                    parallel_clause30=parallel_clause();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_parallel_clause.add(parallel_clause30.getTree());

                                    }
                                    break;

                            }


                            }


                            }
                            break;

                    }


                    RIGHT_PAREN31=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_nested_op_clause690); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN31);


                    // AST REWRITE
                    // elements: foreach_plan_simple, rel, FOREACH, foreach_plan_complex, parallel_clause
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 236:21: -> ^( FOREACH rel ( foreach_plan_complex )? ( foreach_plan_simple )? ) ( parallel_clause )?
                    {
                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:236:24: ^( FOREACH rel ( foreach_plan_complex )? ( foreach_plan_simple )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        stream_FOREACH.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_rel.nextTree());

                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:236:39: ( foreach_plan_complex )?
                        if ( stream_foreach_plan_complex.hasNext() ) {
                            adaptor.addChild(root_1, stream_foreach_plan_complex.nextTree());

                        }
                        stream_foreach_plan_complex.reset();

                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:236:61: ( foreach_plan_simple )?
                        if ( stream_foreach_plan_simple.hasNext() ) {
                            adaptor.addChild(root_1, stream_foreach_plan_simple.nextTree());

                        }
                        stream_foreach_plan_simple.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:236:84: ( parallel_clause )?
                        if ( stream_parallel_clause.hasNext() ) {
                            adaptor.addChild(root_0, stream_parallel_clause.nextTree());

                        }
                        stream_parallel_clause.reset();

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_op_clause"


    public static class general_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "general_statement"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:239:1: general_statement : ( FAT_ARROW ( ( op_clause ( parallel_clause )? ) | nested_op_clause ) -> ^( STATEMENT IDENTIFIER[\"____RESERVED____\"] ( op_clause )? ( parallel_clause )? ( nested_op_clause )? ) | ( identifier_plus EQUAL )? ( ( op_clause ( parallel_clause )? ) | nested_op_clause ) -> ^( STATEMENT ( identifier_plus )? ( op_clause )? ( parallel_clause )? ( nested_op_clause )? ) );
    public final QueryParser.general_statement_return general_statement() throws RecognitionException {
        QueryParser.general_statement_return retval = new QueryParser.general_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token FAT_ARROW32=null;
        Token EQUAL37=null;
        QueryParser.op_clause_return op_clause33 =null;

        QueryParser.parallel_clause_return parallel_clause34 =null;

        QueryParser.nested_op_clause_return nested_op_clause35 =null;

        QueryParser.identifier_plus_return identifier_plus36 =null;

        QueryParser.op_clause_return op_clause38 =null;

        QueryParser.parallel_clause_return parallel_clause39 =null;

        QueryParser.nested_op_clause_return nested_op_clause40 =null;


        Object FAT_ARROW32_tree=null;
        Object EQUAL37_tree=null;
        RewriteRuleTokenStream stream_FAT_ARROW=new RewriteRuleTokenStream(adaptor,"token FAT_ARROW");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleSubtreeStream stream_op_clause=new RewriteRuleSubtreeStream(adaptor,"rule op_clause");
        RewriteRuleSubtreeStream stream_parallel_clause=new RewriteRuleSubtreeStream(adaptor,"rule parallel_clause");
        RewriteRuleSubtreeStream stream_identifier_plus=new RewriteRuleSubtreeStream(adaptor,"rule identifier_plus");
        RewriteRuleSubtreeStream stream_nested_op_clause=new RewriteRuleSubtreeStream(adaptor,"rule nested_op_clause");
        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:239:19: ( FAT_ARROW ( ( op_clause ( parallel_clause )? ) | nested_op_clause ) -> ^( STATEMENT IDENTIFIER[\"____RESERVED____\"] ( op_clause )? ( parallel_clause )? ( nested_op_clause )? ) | ( identifier_plus EQUAL )? ( ( op_clause ( parallel_clause )? ) | nested_op_clause ) -> ^( STATEMENT ( identifier_plus )? ( op_clause )? ( parallel_clause )? ( nested_op_clause )? ) )
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==FAT_ARROW) ) {
                alt12=1;
            }
            else if ( (LA12_0==COGROUP||(LA12_0 >= CROSS && LA12_0 <= CUBE)||LA12_0==DEFINE||LA12_0==DISTINCT||(LA12_0 >= ELSE && LA12_0 <= END)||LA12_0==FILTER||LA12_0==GROUP||LA12_0==IDENTIFIER||LA12_0==IN||LA12_0==JOIN||LA12_0==LEFT_PAREN||(LA12_0 >= LIMIT && LA12_0 <= LOAD)||LA12_0==MAPREDUCE||LA12_0==ORDER||LA12_0==RANK||LA12_0==SAMPLE||(LA12_0 >= STORE && LA12_0 <= STREAM)||LA12_0==THEN||LA12_0==UNION||LA12_0==WHEN) ) {
                alt12=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 12, 0, input);

                throw nvae;

            }
            switch (alt12) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:239:21: FAT_ARROW ( ( op_clause ( parallel_clause )? ) | nested_op_clause )
                    {
                    FAT_ARROW32=(Token)match(input,FAT_ARROW,FOLLOW_FAT_ARROW_in_general_statement738); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FAT_ARROW.add(FAT_ARROW32);


                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:239:31: ( ( op_clause ( parallel_clause )? ) | nested_op_clause )
                    int alt8=2;
                    int LA8_0 = input.LA(1);

                    if ( (LA8_0==COGROUP||(LA8_0 >= CROSS && LA8_0 <= CUBE)||LA8_0==DEFINE||LA8_0==DISTINCT||LA8_0==FILTER||LA8_0==GROUP||LA8_0==JOIN||(LA8_0 >= LIMIT && LA8_0 <= LOAD)||LA8_0==MAPREDUCE||LA8_0==ORDER||LA8_0==RANK||LA8_0==SAMPLE||(LA8_0 >= STORE && LA8_0 <= STREAM)||LA8_0==UNION) ) {
                        alt8=1;
                    }
                    else if ( (LA8_0==LEFT_PAREN) ) {
                        alt8=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 8, 0, input);

                        throw nvae;

                    }
                    switch (alt8) {
                        case 1 :
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:239:33: ( op_clause ( parallel_clause )? )
                            {
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:239:33: ( op_clause ( parallel_clause )? )
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:239:35: op_clause ( parallel_clause )?
                            {
                            pushFollow(FOLLOW_op_clause_in_general_statement744);
                            op_clause33=op_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_op_clause.add(op_clause33.getTree());

                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:239:45: ( parallel_clause )?
                            int alt7=2;
                            int LA7_0 = input.LA(1);

                            if ( (LA7_0==PARALLEL) ) {
                                alt7=1;
                            }
                            switch (alt7) {
                                case 1 :
                                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:239:45: parallel_clause
                                    {
                                    pushFollow(FOLLOW_parallel_clause_in_general_statement746);
                                    parallel_clause34=parallel_clause();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_parallel_clause.add(parallel_clause34.getTree());

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:239:66: nested_op_clause
                            {
                            pushFollow(FOLLOW_nested_op_clause_in_general_statement753);
                            nested_op_clause35=nested_op_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_nested_op_clause.add(nested_op_clause35.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: parallel_clause, nested_op_clause, op_clause
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 239:85: -> ^( STATEMENT IDENTIFIER[\"____RESERVED____\"] ( op_clause )? ( parallel_clause )? ( nested_op_clause )? )
                    {
                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:239:88: ^( STATEMENT IDENTIFIER[\"____RESERVED____\"] ( op_clause )? ( parallel_clause )? ( nested_op_clause )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(STATEMENT, "STATEMENT")
                        , root_1);

                        adaptor.addChild(root_1, 
                        (Object)adaptor.create(IDENTIFIER, "____RESERVED____")
                        );

                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:239:132: ( op_clause )?
                        if ( stream_op_clause.hasNext() ) {
                            adaptor.addChild(root_1, stream_op_clause.nextTree());

                        }
                        stream_op_clause.reset();

                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:239:143: ( parallel_clause )?
                        if ( stream_parallel_clause.hasNext() ) {
                            adaptor.addChild(root_1, stream_parallel_clause.nextTree());

                        }
                        stream_parallel_clause.reset();

                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:239:160: ( nested_op_clause )?
                        if ( stream_nested_op_clause.hasNext() ) {
                            adaptor.addChild(root_1, stream_nested_op_clause.nextTree());

                        }
                        stream_nested_op_clause.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:240:21: ( identifier_plus EQUAL )? ( ( op_clause ( parallel_clause )? ) | nested_op_clause )
                    {
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:240:21: ( identifier_plus EQUAL )?
                    int alt9=2;
                    switch ( input.LA(1) ) {
                        case ELSE:
                        case END:
                        case IDENTIFIER:
                        case IN:
                        case THEN:
                        case WHEN:
                            {
                            alt9=1;
                            }
                            break;
                        case CUBE:
                            {
                            int LA9_2 = input.LA(2);

                            if ( (LA9_2==EQUAL) ) {
                                alt9=1;
                            }
                            }
                            break;
                        case RANK:
                            {
                            int LA9_4 = input.LA(2);

                            if ( (LA9_4==EQUAL) ) {
                                alt9=1;
                            }
                            }
                            break;
                    }

                    switch (alt9) {
                        case 1 :
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:240:23: identifier_plus EQUAL
                            {
                            pushFollow(FOLLOW_identifier_plus_in_general_statement799);
                            identifier_plus36=identifier_plus();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus36.getTree());

                            EQUAL37=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_general_statement801); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL37);


                            }
                            break;

                    }


                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:240:48: ( ( op_clause ( parallel_clause )? ) | nested_op_clause )
                    int alt11=2;
                    int LA11_0 = input.LA(1);

                    if ( (LA11_0==COGROUP||(LA11_0 >= CROSS && LA11_0 <= CUBE)||LA11_0==DEFINE||LA11_0==DISTINCT||LA11_0==FILTER||LA11_0==GROUP||LA11_0==JOIN||(LA11_0 >= LIMIT && LA11_0 <= LOAD)||LA11_0==MAPREDUCE||LA11_0==ORDER||LA11_0==RANK||LA11_0==SAMPLE||(LA11_0 >= STORE && LA11_0 <= STREAM)||LA11_0==UNION) ) {
                        alt11=1;
                    }
                    else if ( (LA11_0==LEFT_PAREN) ) {
                        alt11=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 11, 0, input);

                        throw nvae;

                    }
                    switch (alt11) {
                        case 1 :
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:240:50: ( op_clause ( parallel_clause )? )
                            {
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:240:50: ( op_clause ( parallel_clause )? )
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:240:52: op_clause ( parallel_clause )?
                            {
                            pushFollow(FOLLOW_op_clause_in_general_statement810);
                            op_clause38=op_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_op_clause.add(op_clause38.getTree());

                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:240:62: ( parallel_clause )?
                            int alt10=2;
                            int LA10_0 = input.LA(1);

                            if ( (LA10_0==PARALLEL) ) {
                                alt10=1;
                            }
                            switch (alt10) {
                                case 1 :
                                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:240:62: parallel_clause
                                    {
                                    pushFollow(FOLLOW_parallel_clause_in_general_statement812);
                                    parallel_clause39=parallel_clause();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_parallel_clause.add(parallel_clause39.getTree());

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:240:83: nested_op_clause
                            {
                            pushFollow(FOLLOW_nested_op_clause_in_general_statement819);
                            nested_op_clause40=nested_op_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_nested_op_clause.add(nested_op_clause40.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: nested_op_clause, parallel_clause, op_clause, identifier_plus
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 240:102: -> ^( STATEMENT ( identifier_plus )? ( op_clause )? ( parallel_clause )? ( nested_op_clause )? )
                    {
                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:240:105: ^( STATEMENT ( identifier_plus )? ( op_clause )? ( parallel_clause )? ( nested_op_clause )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(STATEMENT, "STATEMENT")
                        , root_1);

                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:240:118: ( identifier_plus )?
                        if ( stream_identifier_plus.hasNext() ) {
                            adaptor.addChild(root_1, stream_identifier_plus.nextTree());

                        }
                        stream_identifier_plus.reset();

                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:240:135: ( op_clause )?
                        if ( stream_op_clause.hasNext() ) {
                            adaptor.addChild(root_1, stream_op_clause.nextTree());

                        }
                        stream_op_clause.reset();

                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:240:146: ( parallel_clause )?
                        if ( stream_parallel_clause.hasNext() ) {
                            adaptor.addChild(root_1, stream_parallel_clause.nextTree());

                        }
                        stream_parallel_clause.reset();

                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:240:163: ( nested_op_clause )?
                        if ( stream_nested_op_clause.hasNext() ) {
                            adaptor.addChild(root_1, stream_nested_op_clause.nextTree());

                        }
                        stream_nested_op_clause.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "general_statement"


    public static class foreach_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "foreach_statement"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:247:1: foreach_statement : ( FAT_ARROW FOREACH rel ( foreach_plan_complex | ( foreach_plan_simple ( parallel_clause )? SEMI_COLON ) ) -> ^( STATEMENT IDENTIFIER[\"____RESERVED____\"] ^( FOREACH rel ( foreach_plan_complex )? ( foreach_plan_simple )? ) ( parallel_clause )? ) | ( identifier_plus EQUAL )? FOREACH rel ( foreach_plan_complex | ( foreach_plan_simple ( parallel_clause )? SEMI_COLON ) ) -> ^( STATEMENT ( identifier_plus )? ^( FOREACH rel ( foreach_plan_complex )? ( foreach_plan_simple )? ) ( parallel_clause )? ) );
    public final QueryParser.foreach_statement_return foreach_statement() throws RecognitionException {
        QueryParser.foreach_statement_return retval = new QueryParser.foreach_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token FAT_ARROW41=null;
        Token FOREACH42=null;
        Token SEMI_COLON47=null;
        Token EQUAL49=null;
        Token FOREACH50=null;
        Token SEMI_COLON55=null;
        QueryParser.rel_return rel43 =null;

        QueryParser.foreach_plan_complex_return foreach_plan_complex44 =null;

        QueryParser.foreach_plan_simple_return foreach_plan_simple45 =null;

        QueryParser.parallel_clause_return parallel_clause46 =null;

        QueryParser.identifier_plus_return identifier_plus48 =null;

        QueryParser.rel_return rel51 =null;

        QueryParser.foreach_plan_complex_return foreach_plan_complex52 =null;

        QueryParser.foreach_plan_simple_return foreach_plan_simple53 =null;

        QueryParser.parallel_clause_return parallel_clause54 =null;


        Object FAT_ARROW41_tree=null;
        Object FOREACH42_tree=null;
        Object SEMI_COLON47_tree=null;
        Object EQUAL49_tree=null;
        Object FOREACH50_tree=null;
        Object SEMI_COLON55_tree=null;
        RewriteRuleTokenStream stream_FAT_ARROW=new RewriteRuleTokenStream(adaptor,"token FAT_ARROW");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleTokenStream stream_SEMI_COLON=new RewriteRuleTokenStream(adaptor,"token SEMI_COLON");
        RewriteRuleTokenStream stream_FOREACH=new RewriteRuleTokenStream(adaptor,"token FOREACH");
        RewriteRuleSubtreeStream stream_parallel_clause=new RewriteRuleSubtreeStream(adaptor,"rule parallel_clause");
        RewriteRuleSubtreeStream stream_foreach_plan_simple=new RewriteRuleSubtreeStream(adaptor,"rule foreach_plan_simple");
        RewriteRuleSubtreeStream stream_identifier_plus=new RewriteRuleSubtreeStream(adaptor,"rule identifier_plus");
        RewriteRuleSubtreeStream stream_rel=new RewriteRuleSubtreeStream(adaptor,"rule rel");
        RewriteRuleSubtreeStream stream_foreach_plan_complex=new RewriteRuleSubtreeStream(adaptor,"rule foreach_plan_complex");
        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:247:19: ( FAT_ARROW FOREACH rel ( foreach_plan_complex | ( foreach_plan_simple ( parallel_clause )? SEMI_COLON ) ) -> ^( STATEMENT IDENTIFIER[\"____RESERVED____\"] ^( FOREACH rel ( foreach_plan_complex )? ( foreach_plan_simple )? ) ( parallel_clause )? ) | ( identifier_plus EQUAL )? FOREACH rel ( foreach_plan_complex | ( foreach_plan_simple ( parallel_clause )? SEMI_COLON ) ) -> ^( STATEMENT ( identifier_plus )? ^( FOREACH rel ( foreach_plan_complex )? ( foreach_plan_simple )? ) ( parallel_clause )? ) )
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==FAT_ARROW) ) {
                alt18=1;
            }
            else if ( (LA18_0==CUBE||(LA18_0 >= ELSE && LA18_0 <= END)||LA18_0==FOREACH||LA18_0==IDENTIFIER||LA18_0==IN||LA18_0==RANK||LA18_0==THEN||LA18_0==WHEN) ) {
                alt18=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 18, 0, input);

                throw nvae;

            }
            switch (alt18) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:247:21: FAT_ARROW FOREACH rel ( foreach_plan_complex | ( foreach_plan_simple ( parallel_clause )? SEMI_COLON ) )
                    {
                    FAT_ARROW41=(Token)match(input,FAT_ARROW,FOLLOW_FAT_ARROW_in_foreach_statement854); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FAT_ARROW.add(FAT_ARROW41);


                    FOREACH42=(Token)match(input,FOREACH,FOLLOW_FOREACH_in_foreach_statement856); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOREACH.add(FOREACH42);


                    pushFollow(FOLLOW_rel_in_foreach_statement858);
                    rel43=rel();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rel.add(rel43.getTree());

                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:247:43: ( foreach_plan_complex | ( foreach_plan_simple ( parallel_clause )? SEMI_COLON ) )
                    int alt14=2;
                    int LA14_0 = input.LA(1);

                    if ( (LA14_0==LEFT_CURLY) ) {
                        alt14=1;
                    }
                    else if ( (LA14_0==GENERATE) ) {
                        alt14=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 14, 0, input);

                        throw nvae;

                    }
                    switch (alt14) {
                        case 1 :
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:247:45: foreach_plan_complex
                            {
                            pushFollow(FOLLOW_foreach_plan_complex_in_foreach_statement862);
                            foreach_plan_complex44=foreach_plan_complex();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_foreach_plan_complex.add(foreach_plan_complex44.getTree());

                            }
                            break;
                        case 2 :
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:247:68: ( foreach_plan_simple ( parallel_clause )? SEMI_COLON )
                            {
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:247:68: ( foreach_plan_simple ( parallel_clause )? SEMI_COLON )
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:247:70: foreach_plan_simple ( parallel_clause )? SEMI_COLON
                            {
                            pushFollow(FOLLOW_foreach_plan_simple_in_foreach_statement868);
                            foreach_plan_simple45=foreach_plan_simple();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_foreach_plan_simple.add(foreach_plan_simple45.getTree());

                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:247:90: ( parallel_clause )?
                            int alt13=2;
                            int LA13_0 = input.LA(1);

                            if ( (LA13_0==PARALLEL) ) {
                                alt13=1;
                            }
                            switch (alt13) {
                                case 1 :
                                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:247:90: parallel_clause
                                    {
                                    pushFollow(FOLLOW_parallel_clause_in_foreach_statement870);
                                    parallel_clause46=parallel_clause();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_parallel_clause.add(parallel_clause46.getTree());

                                    }
                                    break;

                            }


                            SEMI_COLON47=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_foreach_statement873); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMI_COLON.add(SEMI_COLON47);


                            }


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: rel, foreach_plan_simple, foreach_plan_complex, FOREACH, parallel_clause
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 248:5: -> ^( STATEMENT IDENTIFIER[\"____RESERVED____\"] ^( FOREACH rel ( foreach_plan_complex )? ( foreach_plan_simple )? ) ( parallel_clause )? )
                    {
                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:248:8: ^( STATEMENT IDENTIFIER[\"____RESERVED____\"] ^( FOREACH rel ( foreach_plan_complex )? ( foreach_plan_simple )? ) ( parallel_clause )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(STATEMENT, "STATEMENT")
                        , root_1);

                        adaptor.addChild(root_1, 
                        (Object)adaptor.create(IDENTIFIER, "____RESERVED____")
                        );

                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:248:52: ^( FOREACH rel ( foreach_plan_complex )? ( foreach_plan_simple )? )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot(
                        stream_FOREACH.nextNode()
                        , root_2);

                        adaptor.addChild(root_2, stream_rel.nextTree());

                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:248:67: ( foreach_plan_complex )?
                        if ( stream_foreach_plan_complex.hasNext() ) {
                            adaptor.addChild(root_2, stream_foreach_plan_complex.nextTree());

                        }
                        stream_foreach_plan_complex.reset();

                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:248:89: ( foreach_plan_simple )?
                        if ( stream_foreach_plan_simple.hasNext() ) {
                            adaptor.addChild(root_2, stream_foreach_plan_simple.nextTree());

                        }
                        stream_foreach_plan_simple.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:248:112: ( parallel_clause )?
                        if ( stream_parallel_clause.hasNext() ) {
                            adaptor.addChild(root_1, stream_parallel_clause.nextTree());

                        }
                        stream_parallel_clause.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:249:21: ( identifier_plus EQUAL )? FOREACH rel ( foreach_plan_complex | ( foreach_plan_simple ( parallel_clause )? SEMI_COLON ) )
                    {
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:249:21: ( identifier_plus EQUAL )?
                    int alt15=2;
                    int LA15_0 = input.LA(1);

                    if ( (LA15_0==CUBE||(LA15_0 >= ELSE && LA15_0 <= END)||LA15_0==IDENTIFIER||LA15_0==IN||LA15_0==RANK||LA15_0==THEN||LA15_0==WHEN) ) {
                        alt15=1;
                    }
                    switch (alt15) {
                        case 1 :
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:249:23: identifier_plus EQUAL
                            {
                            pushFollow(FOLLOW_identifier_plus_in_foreach_statement933);
                            identifier_plus48=identifier_plus();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus48.getTree());

                            EQUAL49=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_foreach_statement935); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL49);


                            }
                            break;

                    }


                    FOREACH50=(Token)match(input,FOREACH,FOLLOW_FOREACH_in_foreach_statement940); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOREACH.add(FOREACH50);


                    pushFollow(FOLLOW_rel_in_foreach_statement942);
                    rel51=rel();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rel.add(rel51.getTree());

                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:249:60: ( foreach_plan_complex | ( foreach_plan_simple ( parallel_clause )? SEMI_COLON ) )
                    int alt17=2;
                    int LA17_0 = input.LA(1);

                    if ( (LA17_0==LEFT_CURLY) ) {
                        alt17=1;
                    }
                    else if ( (LA17_0==GENERATE) ) {
                        alt17=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 17, 0, input);

                        throw nvae;

                    }
                    switch (alt17) {
                        case 1 :
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:249:62: foreach_plan_complex
                            {
                            pushFollow(FOLLOW_foreach_plan_complex_in_foreach_statement946);
                            foreach_plan_complex52=foreach_plan_complex();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_foreach_plan_complex.add(foreach_plan_complex52.getTree());

                            }
                            break;
                        case 2 :
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:249:85: ( foreach_plan_simple ( parallel_clause )? SEMI_COLON )
                            {
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:249:85: ( foreach_plan_simple ( parallel_clause )? SEMI_COLON )
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:249:87: foreach_plan_simple ( parallel_clause )? SEMI_COLON
                            {
                            pushFollow(FOLLOW_foreach_plan_simple_in_foreach_statement952);
                            foreach_plan_simple53=foreach_plan_simple();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_foreach_plan_simple.add(foreach_plan_simple53.getTree());

                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:249:107: ( parallel_clause )?
                            int alt16=2;
                            int LA16_0 = input.LA(1);

                            if ( (LA16_0==PARALLEL) ) {
                                alt16=1;
                            }
                            switch (alt16) {
                                case 1 :
                                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:249:107: parallel_clause
                                    {
                                    pushFollow(FOLLOW_parallel_clause_in_foreach_statement954);
                                    parallel_clause54=parallel_clause();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_parallel_clause.add(parallel_clause54.getTree());

                                    }
                                    break;

                            }


                            SEMI_COLON55=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_foreach_statement957); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMI_COLON.add(SEMI_COLON55);


                            }


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: identifier_plus, foreach_plan_simple, rel, parallel_clause, FOREACH, foreach_plan_complex
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 250:5: -> ^( STATEMENT ( identifier_plus )? ^( FOREACH rel ( foreach_plan_complex )? ( foreach_plan_simple )? ) ( parallel_clause )? )
                    {
                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:250:8: ^( STATEMENT ( identifier_plus )? ^( FOREACH rel ( foreach_plan_complex )? ( foreach_plan_simple )? ) ( parallel_clause )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(STATEMENT, "STATEMENT")
                        , root_1);

                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:250:21: ( identifier_plus )?
                        if ( stream_identifier_plus.hasNext() ) {
                            adaptor.addChild(root_1, stream_identifier_plus.nextTree());

                        }
                        stream_identifier_plus.reset();

                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:250:38: ^( FOREACH rel ( foreach_plan_complex )? ( foreach_plan_simple )? )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot(
                        stream_FOREACH.nextNode()
                        , root_2);

                        adaptor.addChild(root_2, stream_rel.nextTree());

                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:250:53: ( foreach_plan_complex )?
                        if ( stream_foreach_plan_complex.hasNext() ) {
                            adaptor.addChild(root_2, stream_foreach_plan_complex.nextTree());

                        }
                        stream_foreach_plan_complex.reset();

                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:250:75: ( foreach_plan_simple )?
                        if ( stream_foreach_plan_simple.hasNext() ) {
                            adaptor.addChild(root_2, stream_foreach_plan_simple.nextTree());

                        }
                        stream_foreach_plan_simple.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:250:98: ( parallel_clause )?
                        if ( stream_parallel_clause.hasNext() ) {
                            adaptor.addChild(root_1, stream_parallel_clause.nextTree());

                        }
                        stream_parallel_clause.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "foreach_statement"


    public static class foreach_plan_complex_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "foreach_plan_complex"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:253:1: foreach_plan_complex : LEFT_CURLY nested_blk RIGHT_CURLY -> ^( FOREACH_PLAN_COMPLEX nested_blk ) ;
    public final QueryParser.foreach_plan_complex_return foreach_plan_complex() throws RecognitionException {
        QueryParser.foreach_plan_complex_return retval = new QueryParser.foreach_plan_complex_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_CURLY56=null;
        Token RIGHT_CURLY58=null;
        QueryParser.nested_blk_return nested_blk57 =null;


        Object LEFT_CURLY56_tree=null;
        Object RIGHT_CURLY58_tree=null;
        RewriteRuleTokenStream stream_LEFT_CURLY=new RewriteRuleTokenStream(adaptor,"token LEFT_CURLY");
        RewriteRuleTokenStream stream_RIGHT_CURLY=new RewriteRuleTokenStream(adaptor,"token RIGHT_CURLY");
        RewriteRuleSubtreeStream stream_nested_blk=new RewriteRuleSubtreeStream(adaptor,"rule nested_blk");
        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:253:22: ( LEFT_CURLY nested_blk RIGHT_CURLY -> ^( FOREACH_PLAN_COMPLEX nested_blk ) )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:253:24: LEFT_CURLY nested_blk RIGHT_CURLY
            {
            LEFT_CURLY56=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_foreach_plan_complex1002); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_CURLY.add(LEFT_CURLY56);


            pushFollow(FOLLOW_nested_blk_in_foreach_plan_complex1004);
            nested_blk57=nested_blk();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nested_blk.add(nested_blk57.getTree());

            RIGHT_CURLY58=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_foreach_plan_complex1006); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_CURLY.add(RIGHT_CURLY58);


            // AST REWRITE
            // elements: nested_blk
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 253:58: -> ^( FOREACH_PLAN_COMPLEX nested_blk )
            {
                // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:253:61: ^( FOREACH_PLAN_COMPLEX nested_blk )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOREACH_PLAN_COMPLEX, "FOREACH_PLAN_COMPLEX")
                , root_1);

                adaptor.addChild(root_1, stream_nested_blk.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "foreach_plan_complex"


    public static class foreach_plan_simple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "foreach_plan_simple"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:256:1: foreach_plan_simple : GENERATE flatten_generated_item ( COMMA flatten_generated_item )* -> ^( FOREACH_PLAN_SIMPLE ^( GENERATE ( flatten_generated_item )+ ) ) ;
    public final QueryParser.foreach_plan_simple_return foreach_plan_simple() throws RecognitionException {
        QueryParser.foreach_plan_simple_return retval = new QueryParser.foreach_plan_simple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token GENERATE59=null;
        Token COMMA61=null;
        QueryParser.flatten_generated_item_return flatten_generated_item60 =null;

        QueryParser.flatten_generated_item_return flatten_generated_item62 =null;


        Object GENERATE59_tree=null;
        Object COMMA61_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_GENERATE=new RewriteRuleTokenStream(adaptor,"token GENERATE");
        RewriteRuleSubtreeStream stream_flatten_generated_item=new RewriteRuleSubtreeStream(adaptor,"rule flatten_generated_item");
        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:256:21: ( GENERATE flatten_generated_item ( COMMA flatten_generated_item )* -> ^( FOREACH_PLAN_SIMPLE ^( GENERATE ( flatten_generated_item )+ ) ) )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:256:23: GENERATE flatten_generated_item ( COMMA flatten_generated_item )*
            {
            GENERATE59=(Token)match(input,GENERATE,FOLLOW_GENERATE_in_foreach_plan_simple1025); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GENERATE.add(GENERATE59);


            pushFollow(FOLLOW_flatten_generated_item_in_foreach_plan_simple1027);
            flatten_generated_item60=flatten_generated_item();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_flatten_generated_item.add(flatten_generated_item60.getTree());

            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:256:55: ( COMMA flatten_generated_item )*
            loop19:
            do {
                int alt19=2;
                int LA19_0 = input.LA(1);

                if ( (LA19_0==COMMA) ) {
                    alt19=1;
                }


                switch (alt19) {
            	case 1 :
            	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:256:57: COMMA flatten_generated_item
            	    {
            	    COMMA61=(Token)match(input,COMMA,FOLLOW_COMMA_in_foreach_plan_simple1031); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA61);


            	    pushFollow(FOLLOW_flatten_generated_item_in_foreach_plan_simple1033);
            	    flatten_generated_item62=flatten_generated_item();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_flatten_generated_item.add(flatten_generated_item62.getTree());

            	    }
            	    break;

            	default :
            	    break loop19;
                }
            } while (true);


            // AST REWRITE
            // elements: GENERATE, flatten_generated_item
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 256:89: -> ^( FOREACH_PLAN_SIMPLE ^( GENERATE ( flatten_generated_item )+ ) )
            {
                // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:256:92: ^( FOREACH_PLAN_SIMPLE ^( GENERATE ( flatten_generated_item )+ ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOREACH_PLAN_SIMPLE, "FOREACH_PLAN_SIMPLE")
                , root_1);

                // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:256:115: ^( GENERATE ( flatten_generated_item )+ )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                stream_GENERATE.nextNode()
                , root_2);

                if ( !(stream_flatten_generated_item.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_flatten_generated_item.hasNext() ) {
                    adaptor.addChild(root_2, stream_flatten_generated_item.nextTree());

                }
                stream_flatten_generated_item.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "foreach_plan_simple"


    public static class macro_content_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "macro_content"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:261:1: macro_content : LEFT_CURLY ( macro_content |~ ( LEFT_CURLY | RIGHT_CURLY ) )* RIGHT_CURLY ;
    public final QueryParser.macro_content_return macro_content() throws RecognitionException {
        QueryParser.macro_content_return retval = new QueryParser.macro_content_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_CURLY63=null;
        Token set65=null;
        Token RIGHT_CURLY66=null;
        QueryParser.macro_content_return macro_content64 =null;


        Object LEFT_CURLY63_tree=null;
        Object set65_tree=null;
        Object RIGHT_CURLY66_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:261:15: ( LEFT_CURLY ( macro_content |~ ( LEFT_CURLY | RIGHT_CURLY ) )* RIGHT_CURLY )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:261:17: LEFT_CURLY ( macro_content |~ ( LEFT_CURLY | RIGHT_CURLY ) )* RIGHT_CURLY
            {
            root_0 = (Object)adaptor.nil();


            LEFT_CURLY63=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_macro_content1064); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_CURLY63_tree = 
            (Object)adaptor.create(LEFT_CURLY63)
            ;
            adaptor.addChild(root_0, LEFT_CURLY63_tree);
            }

            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:261:28: ( macro_content |~ ( LEFT_CURLY | RIGHT_CURLY ) )*
            loop20:
            do {
                int alt20=3;
                int LA20_0 = input.LA(1);

                if ( (LA20_0==LEFT_CURLY) ) {
                    alt20=1;
                }
                else if ( ((LA20_0 >= ALL && LA20_0 <= LEFT_BRACKET)||(LA20_0 >= LEFT_PAREN && LA20_0 <= RIGHT_BRACKET)||(LA20_0 >= RIGHT_PAREN && LA20_0 <= TUPLE_VAL)) ) {
                    alt20=2;
                }


                switch (alt20) {
            	case 1 :
            	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:261:30: macro_content
            	    {
            	    pushFollow(FOLLOW_macro_content_in_macro_content1068);
            	    macro_content64=macro_content();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, macro_content64.getTree());

            	    }
            	    break;
            	case 2 :
            	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:261:46: ~ ( LEFT_CURLY | RIGHT_CURLY )
            	    {
            	    set65=(Token)input.LT(1);

            	    if ( (input.LA(1) >= ALL && input.LA(1) <= LEFT_BRACKET)||(input.LA(1) >= LEFT_PAREN && input.LA(1) <= RIGHT_BRACKET)||(input.LA(1) >= RIGHT_PAREN && input.LA(1) <= TUPLE_VAL) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set65)
            	        );
            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    break loop20;
                }
            } while (true);


            RIGHT_CURLY66=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_macro_content1084); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_CURLY66_tree = 
            (Object)adaptor.create(RIGHT_CURLY66)
            ;
            adaptor.addChild(root_0, RIGHT_CURLY66_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "macro_content"


    public static class macro_param_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "macro_param_clause"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:264:1: macro_param_clause : LEFT_PAREN ( identifier_plus ( COMMA identifier_plus )* )? RIGHT_PAREN -> ^( PARAMS ( identifier_plus )* ) ;
    public final QueryParser.macro_param_clause_return macro_param_clause() throws RecognitionException {
        QueryParser.macro_param_clause_return retval = new QueryParser.macro_param_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN67=null;
        Token COMMA69=null;
        Token RIGHT_PAREN71=null;
        QueryParser.identifier_plus_return identifier_plus68 =null;

        QueryParser.identifier_plus_return identifier_plus70 =null;


        Object LEFT_PAREN67_tree=null;
        Object COMMA69_tree=null;
        Object RIGHT_PAREN71_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleSubtreeStream stream_identifier_plus=new RewriteRuleSubtreeStream(adaptor,"rule identifier_plus");
        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:264:20: ( LEFT_PAREN ( identifier_plus ( COMMA identifier_plus )* )? RIGHT_PAREN -> ^( PARAMS ( identifier_plus )* ) )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:264:22: LEFT_PAREN ( identifier_plus ( COMMA identifier_plus )* )? RIGHT_PAREN
            {
            LEFT_PAREN67=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_macro_param_clause1093); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN67);


            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:264:33: ( identifier_plus ( COMMA identifier_plus )* )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==CUBE||(LA22_0 >= ELSE && LA22_0 <= END)||LA22_0==IDENTIFIER||LA22_0==IN||LA22_0==RANK||LA22_0==THEN||LA22_0==WHEN) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:264:35: identifier_plus ( COMMA identifier_plus )*
                    {
                    pushFollow(FOLLOW_identifier_plus_in_macro_param_clause1097);
                    identifier_plus68=identifier_plus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus68.getTree());

                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:264:51: ( COMMA identifier_plus )*
                    loop21:
                    do {
                        int alt21=2;
                        int LA21_0 = input.LA(1);

                        if ( (LA21_0==COMMA) ) {
                            alt21=1;
                        }


                        switch (alt21) {
                    	case 1 :
                    	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:264:52: COMMA identifier_plus
                    	    {
                    	    COMMA69=(Token)match(input,COMMA,FOLLOW_COMMA_in_macro_param_clause1100); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA69);


                    	    pushFollow(FOLLOW_identifier_plus_in_macro_param_clause1102);
                    	    identifier_plus70=identifier_plus();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus70.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop21;
                        }
                    } while (true);


                    }
                    break;

            }


            RIGHT_PAREN71=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_macro_param_clause1109); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN71);


            // AST REWRITE
            // elements: identifier_plus
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 265:5: -> ^( PARAMS ( identifier_plus )* )
            {
                // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:265:8: ^( PARAMS ( identifier_plus )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMS, "PARAMS")
                , root_1);

                // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:265:17: ( identifier_plus )*
                while ( stream_identifier_plus.hasNext() ) {
                    adaptor.addChild(root_1, stream_identifier_plus.nextTree());

                }
                stream_identifier_plus.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "macro_param_clause"


    public static class macro_return_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "macro_return_clause"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:268:1: macro_return_clause : RETURNS ( ( identifier_plus ( COMMA identifier_plus )* ) | VOID ) -> ^( RETURN_VAL ( identifier_plus )* ) ;
    public final QueryParser.macro_return_clause_return macro_return_clause() throws RecognitionException {
        QueryParser.macro_return_clause_return retval = new QueryParser.macro_return_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token RETURNS72=null;
        Token COMMA74=null;
        Token VOID76=null;
        QueryParser.identifier_plus_return identifier_plus73 =null;

        QueryParser.identifier_plus_return identifier_plus75 =null;


        Object RETURNS72_tree=null;
        Object COMMA74_tree=null;
        Object VOID76_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RETURNS=new RewriteRuleTokenStream(adaptor,"token RETURNS");
        RewriteRuleTokenStream stream_VOID=new RewriteRuleTokenStream(adaptor,"token VOID");
        RewriteRuleSubtreeStream stream_identifier_plus=new RewriteRuleSubtreeStream(adaptor,"rule identifier_plus");
        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:269:5: ( RETURNS ( ( identifier_plus ( COMMA identifier_plus )* ) | VOID ) -> ^( RETURN_VAL ( identifier_plus )* ) )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:269:7: RETURNS ( ( identifier_plus ( COMMA identifier_plus )* ) | VOID )
            {
            RETURNS72=(Token)match(input,RETURNS,FOLLOW_RETURNS_in_macro_return_clause1135); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RETURNS.add(RETURNS72);


            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:269:15: ( ( identifier_plus ( COMMA identifier_plus )* ) | VOID )
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==CUBE||(LA24_0 >= ELSE && LA24_0 <= END)||LA24_0==IDENTIFIER||LA24_0==IN||LA24_0==RANK||LA24_0==THEN||LA24_0==WHEN) ) {
                alt24=1;
            }
            else if ( (LA24_0==VOID) ) {
                alt24=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 24, 0, input);

                throw nvae;

            }
            switch (alt24) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:269:16: ( identifier_plus ( COMMA identifier_plus )* )
                    {
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:269:16: ( identifier_plus ( COMMA identifier_plus )* )
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:269:17: identifier_plus ( COMMA identifier_plus )*
                    {
                    pushFollow(FOLLOW_identifier_plus_in_macro_return_clause1139);
                    identifier_plus73=identifier_plus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus73.getTree());

                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:269:33: ( COMMA identifier_plus )*
                    loop23:
                    do {
                        int alt23=2;
                        int LA23_0 = input.LA(1);

                        if ( (LA23_0==COMMA) ) {
                            alt23=1;
                        }


                        switch (alt23) {
                    	case 1 :
                    	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:269:34: COMMA identifier_plus
                    	    {
                    	    COMMA74=(Token)match(input,COMMA,FOLLOW_COMMA_in_macro_return_clause1142); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA74);


                    	    pushFollow(FOLLOW_identifier_plus_in_macro_return_clause1144);
                    	    identifier_plus75=identifier_plus();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus75.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop23;
                        }
                    } while (true);


                    }


                    }
                    break;
                case 2 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:269:61: VOID
                    {
                    VOID76=(Token)match(input,VOID,FOLLOW_VOID_in_macro_return_clause1151); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VOID.add(VOID76);


                    }
                    break;

            }


            // AST REWRITE
            // elements: identifier_plus
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 270:9: -> ^( RETURN_VAL ( identifier_plus )* )
            {
                // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:270:12: ^( RETURN_VAL ( identifier_plus )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(RETURN_VAL, "RETURN_VAL")
                , root_1);

                // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:270:25: ( identifier_plus )*
                while ( stream_identifier_plus.hasNext() ) {
                    adaptor.addChild(root_1, stream_identifier_plus.nextTree());

                }
                stream_identifier_plus.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "macro_return_clause"


    public static class macro_body_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "macro_body_clause"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:273:1: macro_body_clause : macro_content -> ^( MACRO_BODY ) ;
    public final QueryParser.macro_body_clause_return macro_body_clause() throws RecognitionException {
        QueryParser.macro_body_clause_return retval = new QueryParser.macro_body_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.macro_content_return macro_content77 =null;


        RewriteRuleSubtreeStream stream_macro_content=new RewriteRuleSubtreeStream(adaptor,"rule macro_content");
        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:273:19: ( macro_content -> ^( MACRO_BODY ) )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:273:21: macro_content
            {
            pushFollow(FOLLOW_macro_content_in_macro_body_clause1178);
            macro_content77=macro_content();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_macro_content.add(macro_content77.getTree());

            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 273:35: -> ^( MACRO_BODY )
            {
                // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:273:38: ^( MACRO_BODY )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MACRO_BODY, "MACRO_BODY")
                , root_1);

                adaptor.addChild(root_1,  new PigParserNode(new CommonToken(1, (macro_content77!=null?input.toString(macro_content77.start,macro_content77.stop):null)), this.getSourceName(), (macro_content77!=null?((Token)macro_content77.start):null)) );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "macro_body_clause"


    public static class macro_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "macro_clause"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:276:1: macro_clause : macro_param_clause macro_return_clause macro_body_clause -> ^( MACRO_DEF macro_param_clause macro_return_clause macro_body_clause ) ;
    public final QueryParser.macro_clause_return macro_clause() throws RecognitionException {
        QueryParser.macro_clause_return retval = new QueryParser.macro_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.macro_param_clause_return macro_param_clause78 =null;

        QueryParser.macro_return_clause_return macro_return_clause79 =null;

        QueryParser.macro_body_clause_return macro_body_clause80 =null;


        RewriteRuleSubtreeStream stream_macro_param_clause=new RewriteRuleSubtreeStream(adaptor,"rule macro_param_clause");
        RewriteRuleSubtreeStream stream_macro_return_clause=new RewriteRuleSubtreeStream(adaptor,"rule macro_return_clause");
        RewriteRuleSubtreeStream stream_macro_body_clause=new RewriteRuleSubtreeStream(adaptor,"rule macro_body_clause");
        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:276:14: ( macro_param_clause macro_return_clause macro_body_clause -> ^( MACRO_DEF macro_param_clause macro_return_clause macro_body_clause ) )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:276:16: macro_param_clause macro_return_clause macro_body_clause
            {
            pushFollow(FOLLOW_macro_param_clause_in_macro_clause1196);
            macro_param_clause78=macro_param_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_macro_param_clause.add(macro_param_clause78.getTree());

            pushFollow(FOLLOW_macro_return_clause_in_macro_clause1198);
            macro_return_clause79=macro_return_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_macro_return_clause.add(macro_return_clause79.getTree());

            pushFollow(FOLLOW_macro_body_clause_in_macro_clause1200);
            macro_body_clause80=macro_body_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_macro_body_clause.add(macro_body_clause80.getTree());

            // AST REWRITE
            // elements: macro_body_clause, macro_param_clause, macro_return_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 277:5: -> ^( MACRO_DEF macro_param_clause macro_return_clause macro_body_clause )
            {
                // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:277:8: ^( MACRO_DEF macro_param_clause macro_return_clause macro_body_clause )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MACRO_DEF, "MACRO_DEF")
                , root_1);

                adaptor.addChild(root_1, stream_macro_param_clause.nextTree());

                adaptor.addChild(root_1, stream_macro_return_clause.nextTree());

                adaptor.addChild(root_1, stream_macro_body_clause.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "macro_clause"


    public static class inline_return_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "inline_return_clause"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:280:1: inline_return_clause : ( identifier_plus EQUAL -> ^( RETURN_VAL identifier_plus ) | identifier_plus ( COMMA identifier_plus )+ EQUAL -> ^( RETURN_VAL ( identifier_plus )+ ) | -> ^( RETURN_VAL ) );
    public final QueryParser.inline_return_clause_return inline_return_clause() throws RecognitionException {
        QueryParser.inline_return_clause_return retval = new QueryParser.inline_return_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EQUAL82=null;
        Token COMMA84=null;
        Token EQUAL86=null;
        QueryParser.identifier_plus_return identifier_plus81 =null;

        QueryParser.identifier_plus_return identifier_plus83 =null;

        QueryParser.identifier_plus_return identifier_plus85 =null;


        Object EQUAL82_tree=null;
        Object COMMA84_tree=null;
        Object EQUAL86_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleSubtreeStream stream_identifier_plus=new RewriteRuleSubtreeStream(adaptor,"rule identifier_plus");
        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:281:5: ( identifier_plus EQUAL -> ^( RETURN_VAL identifier_plus ) | identifier_plus ( COMMA identifier_plus )+ EQUAL -> ^( RETURN_VAL ( identifier_plus )+ ) | -> ^( RETURN_VAL ) )
            int alt26=3;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==IDENTIFIER) ) {
                switch ( input.LA(2) ) {
                case EQUAL:
                    {
                    alt26=1;
                    }
                    break;
                case COMMA:
                    {
                    alt26=2;
                    }
                    break;
                case LEFT_PAREN:
                    {
                    alt26=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 26, 1, input);

                    throw nvae;

                }

            }
            else if ( (LA26_0==CUBE||(LA26_0 >= ELSE && LA26_0 <= END)||LA26_0==IN||LA26_0==RANK||LA26_0==THEN||LA26_0==WHEN) ) {
                switch ( input.LA(2) ) {
                case EQUAL:
                    {
                    alt26=1;
                    }
                    break;
                case COMMA:
                    {
                    alt26=2;
                    }
                    break;
                case LEFT_PAREN:
                    {
                    alt26=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 26, 2, input);

                    throw nvae;

                }

            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 26, 0, input);

                throw nvae;

            }
            switch (alt26) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:281:7: identifier_plus EQUAL
                    {
                    pushFollow(FOLLOW_identifier_plus_in_inline_return_clause1229);
                    identifier_plus81=identifier_plus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus81.getTree());

                    EQUAL82=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_inline_return_clause1231); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL82);


                    // AST REWRITE
                    // elements: identifier_plus
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 281:29: -> ^( RETURN_VAL identifier_plus )
                    {
                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:281:32: ^( RETURN_VAL identifier_plus )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(RETURN_VAL, "RETURN_VAL")
                        , root_1);

                        adaptor.addChild(root_1, stream_identifier_plus.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:282:4: identifier_plus ( COMMA identifier_plus )+ EQUAL
                    {
                    pushFollow(FOLLOW_identifier_plus_in_inline_return_clause1244);
                    identifier_plus83=identifier_plus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus83.getTree());

                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:282:20: ( COMMA identifier_plus )+
                    int cnt25=0;
                    loop25:
                    do {
                        int alt25=2;
                        int LA25_0 = input.LA(1);

                        if ( (LA25_0==COMMA) ) {
                            alt25=1;
                        }


                        switch (alt25) {
                    	case 1 :
                    	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:282:21: COMMA identifier_plus
                    	    {
                    	    COMMA84=(Token)match(input,COMMA,FOLLOW_COMMA_in_inline_return_clause1247); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA84);


                    	    pushFollow(FOLLOW_identifier_plus_in_inline_return_clause1249);
                    	    identifier_plus85=identifier_plus();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus85.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt25 >= 1 ) break loop25;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(25, input);
                                throw eee;
                        }
                        cnt25++;
                    } while (true);


                    EQUAL86=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_inline_return_clause1253); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL86);


                    // AST REWRITE
                    // elements: identifier_plus
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 282:51: -> ^( RETURN_VAL ( identifier_plus )+ )
                    {
                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:282:54: ^( RETURN_VAL ( identifier_plus )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(RETURN_VAL, "RETURN_VAL")
                        , root_1);

                        if ( !(stream_identifier_plus.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_identifier_plus.hasNext() ) {
                            adaptor.addChild(root_1, stream_identifier_plus.nextTree());

                        }
                        stream_identifier_plus.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:283:4: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 283:4: -> ^( RETURN_VAL )
                    {
                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:283:7: ^( RETURN_VAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(RETURN_VAL, "RETURN_VAL")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "inline_return_clause"


    public static class parameter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "parameter"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:286:1: parameter : ( IDENTIFIER | INTEGER | DOUBLENUMBER | BIGDECIMALNUMBER | BIGINTEGERNUMBER | QUOTEDSTRING | DOLLARVAR );
    public final QueryParser.parameter_return parameter() throws RecognitionException {
        QueryParser.parameter_return retval = new QueryParser.parameter_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set87=null;

        Object set87_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:287:5: ( IDENTIFIER | INTEGER | DOUBLENUMBER | BIGDECIMALNUMBER | BIGINTEGERNUMBER | QUOTEDSTRING | DOLLARVAR )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:
            {
            root_0 = (Object)adaptor.nil();


            set87=(Token)input.LT(1);

            if ( input.LA(1)==BIGDECIMALNUMBER||input.LA(1)==BIGINTEGERNUMBER||input.LA(1)==DOLLARVAR||input.LA(1)==DOUBLENUMBER||input.LA(1)==IDENTIFIER||input.LA(1)==INTEGER||input.LA(1)==QUOTEDSTRING ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set87)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "parameter"


    public static class inline_param_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "inline_param_clause"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:296:1: inline_param_clause : LEFT_PAREN ( parameter ( COMMA parameter )* )? RIGHT_PAREN -> ^( PARAMS ( parameter )* ) ;
    public final QueryParser.inline_param_clause_return inline_param_clause() throws RecognitionException {
        QueryParser.inline_param_clause_return retval = new QueryParser.inline_param_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN88=null;
        Token COMMA90=null;
        Token RIGHT_PAREN92=null;
        QueryParser.parameter_return parameter89 =null;

        QueryParser.parameter_return parameter91 =null;


        Object LEFT_PAREN88_tree=null;
        Object COMMA90_tree=null;
        Object RIGHT_PAREN92_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleSubtreeStream stream_parameter=new RewriteRuleSubtreeStream(adaptor,"rule parameter");
        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:296:21: ( LEFT_PAREN ( parameter ( COMMA parameter )* )? RIGHT_PAREN -> ^( PARAMS ( parameter )* ) )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:296:23: LEFT_PAREN ( parameter ( COMMA parameter )* )? RIGHT_PAREN
            {
            LEFT_PAREN88=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_inline_param_clause1341); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN88);


            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:296:34: ( parameter ( COMMA parameter )* )?
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==BIGDECIMALNUMBER||LA28_0==BIGINTEGERNUMBER||LA28_0==DOLLARVAR||LA28_0==DOUBLENUMBER||LA28_0==IDENTIFIER||LA28_0==INTEGER||LA28_0==QUOTEDSTRING) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:296:36: parameter ( COMMA parameter )*
                    {
                    pushFollow(FOLLOW_parameter_in_inline_param_clause1345);
                    parameter89=parameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parameter.add(parameter89.getTree());

                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:296:46: ( COMMA parameter )*
                    loop27:
                    do {
                        int alt27=2;
                        int LA27_0 = input.LA(1);

                        if ( (LA27_0==COMMA) ) {
                            alt27=1;
                        }


                        switch (alt27) {
                    	case 1 :
                    	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:296:47: COMMA parameter
                    	    {
                    	    COMMA90=(Token)match(input,COMMA,FOLLOW_COMMA_in_inline_param_clause1348); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA90);


                    	    pushFollow(FOLLOW_parameter_in_inline_param_clause1350);
                    	    parameter91=parameter();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_parameter.add(parameter91.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop27;
                        }
                    } while (true);


                    }
                    break;

            }


            RIGHT_PAREN92=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_inline_param_clause1357); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN92);


            // AST REWRITE
            // elements: parameter
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 297:5: -> ^( PARAMS ( parameter )* )
            {
                // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:297:8: ^( PARAMS ( parameter )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMS, "PARAMS")
                , root_1);

                // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:297:17: ( parameter )*
                while ( stream_parameter.hasNext() ) {
                    adaptor.addChild(root_1, stream_parameter.nextTree());

                }
                stream_parameter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "inline_param_clause"


    public static class inline_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "inline_clause"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:300:1: inline_clause : inline_return_clause identifier_plus inline_param_clause -> ^( MACRO_INLINE identifier_plus inline_return_clause inline_param_clause ) ;
    public final QueryParser.inline_clause_return inline_clause() throws RecognitionException {
        QueryParser.inline_clause_return retval = new QueryParser.inline_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.inline_return_clause_return inline_return_clause93 =null;

        QueryParser.identifier_plus_return identifier_plus94 =null;

        QueryParser.inline_param_clause_return inline_param_clause95 =null;


        RewriteRuleSubtreeStream stream_identifier_plus=new RewriteRuleSubtreeStream(adaptor,"rule identifier_plus");
        RewriteRuleSubtreeStream stream_inline_return_clause=new RewriteRuleSubtreeStream(adaptor,"rule inline_return_clause");
        RewriteRuleSubtreeStream stream_inline_param_clause=new RewriteRuleSubtreeStream(adaptor,"rule inline_param_clause");
        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:300:15: ( inline_return_clause identifier_plus inline_param_clause -> ^( MACRO_INLINE identifier_plus inline_return_clause inline_param_clause ) )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:300:17: inline_return_clause identifier_plus inline_param_clause
            {
            pushFollow(FOLLOW_inline_return_clause_in_inline_clause1379);
            inline_return_clause93=inline_return_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inline_return_clause.add(inline_return_clause93.getTree());

            pushFollow(FOLLOW_identifier_plus_in_inline_clause1381);
            identifier_plus94=identifier_plus();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus94.getTree());

            pushFollow(FOLLOW_inline_param_clause_in_inline_clause1383);
            inline_param_clause95=inline_param_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inline_param_clause.add(inline_param_clause95.getTree());

            // AST REWRITE
            // elements: inline_return_clause, inline_param_clause, identifier_plus
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 301:5: -> ^( MACRO_INLINE identifier_plus inline_return_clause inline_param_clause )
            {
                // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:301:8: ^( MACRO_INLINE identifier_plus inline_return_clause inline_param_clause )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MACRO_INLINE, "MACRO_INLINE")
                , root_1);

                adaptor.addChild(root_1, stream_identifier_plus.nextTree());

                adaptor.addChild(root_1, stream_inline_return_clause.nextTree());

                adaptor.addChild(root_1, stream_inline_param_clause.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "inline_clause"


    public static class simple_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_type"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:306:1: simple_type : ( BOOLEAN | INT | LONG | FLOAT | DOUBLE | DATETIME | BIGINTEGER | BIGDECIMAL | CHARARRAY | BYTEARRAY );
    public final QueryParser.simple_type_return simple_type() throws RecognitionException {
        QueryParser.simple_type_return retval = new QueryParser.simple_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set96=null;

        Object set96_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:306:13: ( BOOLEAN | INT | LONG | FLOAT | DOUBLE | DATETIME | BIGINTEGER | BIGDECIMAL | CHARARRAY | BYTEARRAY )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:
            {
            root_0 = (Object)adaptor.nil();


            set96=(Token)input.LT(1);

            if ( input.LA(1)==BIGDECIMAL||input.LA(1)==BIGINTEGER||input.LA(1)==BOOLEAN||input.LA(1)==BYTEARRAY||input.LA(1)==CHARARRAY||input.LA(1)==DATETIME||input.LA(1)==DOUBLE||input.LA(1)==FLOAT||input.LA(1)==INT||input.LA(1)==LONG ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set96)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_type"


    public static class implicit_tuple_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implicit_tuple_type"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:309:1: implicit_tuple_type : LEFT_PAREN ( field_def_list )? RIGHT_PAREN -> ^( TUPLE_TYPE ( field_def_list )? ) ;
    public final QueryParser.implicit_tuple_type_return implicit_tuple_type() throws RecognitionException {
        QueryParser.implicit_tuple_type_return retval = new QueryParser.implicit_tuple_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN97=null;
        Token RIGHT_PAREN99=null;
        QueryParser.field_def_list_return field_def_list98 =null;


        Object LEFT_PAREN97_tree=null;
        Object RIGHT_PAREN99_tree=null;
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleSubtreeStream stream_field_def_list=new RewriteRuleSubtreeStream(adaptor,"rule field_def_list");
        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:309:21: ( LEFT_PAREN ( field_def_list )? RIGHT_PAREN -> ^( TUPLE_TYPE ( field_def_list )? ) )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:309:23: LEFT_PAREN ( field_def_list )? RIGHT_PAREN
            {
            LEFT_PAREN97=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_implicit_tuple_type1455); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN97);


            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:309:34: ( field_def_list )?
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( ((LA29_0 >= BAG && LA29_0 <= BIGDECIMAL)||LA29_0==BIGINTEGER||LA29_0==BOOLEAN||LA29_0==BYTEARRAY||LA29_0==CHARARRAY||(LA29_0 >= CUBE && LA29_0 <= DATETIME)||LA29_0==DOUBLE||(LA29_0 >= ELSE && LA29_0 <= END)||LA29_0==FLOAT||LA29_0==IDENTIFIER||LA29_0==IN||LA29_0==INT||(LA29_0 >= LEFT_BRACKET && LA29_0 <= LEFT_PAREN)||LA29_0==LONG||LA29_0==MAP||LA29_0==RANK||LA29_0==THEN||LA29_0==TUPLE||LA29_0==WHEN) ) {
                alt29=1;
            }
            switch (alt29) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:309:34: field_def_list
                    {
                    pushFollow(FOLLOW_field_def_list_in_implicit_tuple_type1457);
                    field_def_list98=field_def_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_field_def_list.add(field_def_list98.getTree());

                    }
                    break;

            }


            RIGHT_PAREN99=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_implicit_tuple_type1460); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN99);


            // AST REWRITE
            // elements: field_def_list
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 309:62: -> ^( TUPLE_TYPE ( field_def_list )? )
            {
                // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:309:65: ^( TUPLE_TYPE ( field_def_list )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TUPLE_TYPE, "TUPLE_TYPE")
                , root_1);

                // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:309:79: ( field_def_list )?
                if ( stream_field_def_list.hasNext() ) {
                    adaptor.addChild(root_1, stream_field_def_list.nextTree());

                }
                stream_field_def_list.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implicit_tuple_type"


    public static class explicit_tuple_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "explicit_tuple_type"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:312:1: explicit_tuple_type : TUPLE ! implicit_tuple_type ;
    public final QueryParser.explicit_tuple_type_return explicit_tuple_type() throws RecognitionException {
        QueryParser.explicit_tuple_type_return retval = new QueryParser.explicit_tuple_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token TUPLE100=null;
        QueryParser.implicit_tuple_type_return implicit_tuple_type101 =null;


        Object TUPLE100_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:312:21: ( TUPLE ! implicit_tuple_type )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:312:23: TUPLE ! implicit_tuple_type
            {
            root_0 = (Object)adaptor.nil();


            TUPLE100=(Token)match(input,TUPLE,FOLLOW_TUPLE_in_explicit_tuple_type1480); if (state.failed) return retval;

            pushFollow(FOLLOW_implicit_tuple_type_in_explicit_tuple_type1483);
            implicit_tuple_type101=implicit_tuple_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, implicit_tuple_type101.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "explicit_tuple_type"


    public static class explicit_tuple_type_cast_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "explicit_tuple_type_cast"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:315:1: explicit_tuple_type_cast : TUPLE LEFT_PAREN ( explicit_type_cast ( COMMA explicit_type_cast )* )? RIGHT_PAREN -> ^( TUPLE_TYPE_CAST ( explicit_type_cast )* ) ;
    public final QueryParser.explicit_tuple_type_cast_return explicit_tuple_type_cast() throws RecognitionException {
        QueryParser.explicit_tuple_type_cast_return retval = new QueryParser.explicit_tuple_type_cast_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token TUPLE102=null;
        Token LEFT_PAREN103=null;
        Token COMMA105=null;
        Token RIGHT_PAREN107=null;
        QueryParser.explicit_type_cast_return explicit_type_cast104 =null;

        QueryParser.explicit_type_cast_return explicit_type_cast106 =null;


        Object TUPLE102_tree=null;
        Object LEFT_PAREN103_tree=null;
        Object COMMA105_tree=null;
        Object RIGHT_PAREN107_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_TUPLE=new RewriteRuleTokenStream(adaptor,"token TUPLE");
        RewriteRuleSubtreeStream stream_explicit_type_cast=new RewriteRuleSubtreeStream(adaptor,"rule explicit_type_cast");
        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:315:26: ( TUPLE LEFT_PAREN ( explicit_type_cast ( COMMA explicit_type_cast )* )? RIGHT_PAREN -> ^( TUPLE_TYPE_CAST ( explicit_type_cast )* ) )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:315:28: TUPLE LEFT_PAREN ( explicit_type_cast ( COMMA explicit_type_cast )* )? RIGHT_PAREN
            {
            TUPLE102=(Token)match(input,TUPLE,FOLLOW_TUPLE_in_explicit_tuple_type_cast1492); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TUPLE.add(TUPLE102);


            LEFT_PAREN103=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_explicit_tuple_type_cast1494); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN103);


            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:315:45: ( explicit_type_cast ( COMMA explicit_type_cast )* )?
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( ((LA31_0 >= BAG && LA31_0 <= BIGDECIMAL)||LA31_0==BIGINTEGER||LA31_0==BOOLEAN||LA31_0==BYTEARRAY||LA31_0==CHARARRAY||LA31_0==DATETIME||LA31_0==DOUBLE||LA31_0==FLOAT||LA31_0==INT||LA31_0==LONG||LA31_0==MAP||LA31_0==TUPLE) ) {
                alt31=1;
            }
            switch (alt31) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:315:47: explicit_type_cast ( COMMA explicit_type_cast )*
                    {
                    pushFollow(FOLLOW_explicit_type_cast_in_explicit_tuple_type_cast1498);
                    explicit_type_cast104=explicit_type_cast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_explicit_type_cast.add(explicit_type_cast104.getTree());

                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:315:66: ( COMMA explicit_type_cast )*
                    loop30:
                    do {
                        int alt30=2;
                        int LA30_0 = input.LA(1);

                        if ( (LA30_0==COMMA) ) {
                            alt30=1;
                        }


                        switch (alt30) {
                    	case 1 :
                    	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:315:68: COMMA explicit_type_cast
                    	    {
                    	    COMMA105=(Token)match(input,COMMA,FOLLOW_COMMA_in_explicit_tuple_type_cast1502); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA105);


                    	    pushFollow(FOLLOW_explicit_type_cast_in_explicit_tuple_type_cast1504);
                    	    explicit_type_cast106=explicit_type_cast();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_explicit_type_cast.add(explicit_type_cast106.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop30;
                        }
                    } while (true);


                    }
                    break;

            }


            RIGHT_PAREN107=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_explicit_tuple_type_cast1512); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN107);


            // AST REWRITE
            // elements: explicit_type_cast
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 316:5: -> ^( TUPLE_TYPE_CAST ( explicit_type_cast )* )
            {
                // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:316:8: ^( TUPLE_TYPE_CAST ( explicit_type_cast )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TUPLE_TYPE_CAST, "TUPLE_TYPE_CAST")
                , root_1);

                // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:316:27: ( explicit_type_cast )*
                while ( stream_explicit_type_cast.hasNext() ) {
                    adaptor.addChild(root_1, stream_explicit_type_cast.nextTree());

                }
                stream_explicit_type_cast.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "explicit_tuple_type_cast"


    public static class tuple_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tuple_type"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:319:1: tuple_type : ( implicit_tuple_type | explicit_tuple_type );
    public final QueryParser.tuple_type_return tuple_type() throws RecognitionException {
        QueryParser.tuple_type_return retval = new QueryParser.tuple_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.implicit_tuple_type_return implicit_tuple_type108 =null;

        QueryParser.explicit_tuple_type_return explicit_tuple_type109 =null;



        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:319:12: ( implicit_tuple_type | explicit_tuple_type )
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==LEFT_PAREN) ) {
                alt32=1;
            }
            else if ( (LA32_0==TUPLE) ) {
                alt32=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 32, 0, input);

                throw nvae;

            }
            switch (alt32) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:319:14: implicit_tuple_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implicit_tuple_type_in_tuple_type1536);
                    implicit_tuple_type108=implicit_tuple_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, implicit_tuple_type108.getTree());

                    }
                    break;
                case 2 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:319:36: explicit_tuple_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_explicit_tuple_type_in_tuple_type1540);
                    explicit_tuple_type109=explicit_tuple_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, explicit_tuple_type109.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tuple_type"


    public static class implicit_bag_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implicit_bag_type"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:322:1: implicit_bag_type : ( LEFT_CURLY NULL COLON ( tuple_type )? RIGHT_CURLY -> ^( BAG_TYPE ( tuple_type )? ) | LEFT_CURLY ( ( identifier_plus COLON )? tuple_type )? RIGHT_CURLY -> ^( BAG_TYPE ( identifier_plus )? ( tuple_type )? ) );
    public final QueryParser.implicit_bag_type_return implicit_bag_type() throws RecognitionException {
        QueryParser.implicit_bag_type_return retval = new QueryParser.implicit_bag_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_CURLY110=null;
        Token NULL111=null;
        Token COLON112=null;
        Token RIGHT_CURLY114=null;
        Token LEFT_CURLY115=null;
        Token COLON117=null;
        Token RIGHT_CURLY119=null;
        QueryParser.tuple_type_return tuple_type113 =null;

        QueryParser.identifier_plus_return identifier_plus116 =null;

        QueryParser.tuple_type_return tuple_type118 =null;


        Object LEFT_CURLY110_tree=null;
        Object NULL111_tree=null;
        Object COLON112_tree=null;
        Object RIGHT_CURLY114_tree=null;
        Object LEFT_CURLY115_tree=null;
        Object COLON117_tree=null;
        Object RIGHT_CURLY119_tree=null;
        RewriteRuleTokenStream stream_NULL=new RewriteRuleTokenStream(adaptor,"token NULL");
        RewriteRuleTokenStream stream_LEFT_CURLY=new RewriteRuleTokenStream(adaptor,"token LEFT_CURLY");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RIGHT_CURLY=new RewriteRuleTokenStream(adaptor,"token RIGHT_CURLY");
        RewriteRuleSubtreeStream stream_identifier_plus=new RewriteRuleSubtreeStream(adaptor,"rule identifier_plus");
        RewriteRuleSubtreeStream stream_tuple_type=new RewriteRuleSubtreeStream(adaptor,"rule tuple_type");
        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:322:19: ( LEFT_CURLY NULL COLON ( tuple_type )? RIGHT_CURLY -> ^( BAG_TYPE ( tuple_type )? ) | LEFT_CURLY ( ( identifier_plus COLON )? tuple_type )? RIGHT_CURLY -> ^( BAG_TYPE ( identifier_plus )? ( tuple_type )? ) )
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==LEFT_CURLY) ) {
                int LA36_1 = input.LA(2);

                if ( (LA36_1==NULL) ) {
                    alt36=1;
                }
                else if ( (LA36_1==CUBE||(LA36_1 >= ELSE && LA36_1 <= END)||LA36_1==IDENTIFIER||LA36_1==IN||LA36_1==LEFT_PAREN||LA36_1==RANK||LA36_1==RIGHT_CURLY||LA36_1==THEN||LA36_1==TUPLE||LA36_1==WHEN) ) {
                    alt36=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 36, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 36, 0, input);

                throw nvae;

            }
            switch (alt36) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:322:21: LEFT_CURLY NULL COLON ( tuple_type )? RIGHT_CURLY
                    {
                    LEFT_CURLY110=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_implicit_bag_type1549); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_CURLY.add(LEFT_CURLY110);


                    NULL111=(Token)match(input,NULL,FOLLOW_NULL_in_implicit_bag_type1551); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NULL.add(NULL111);


                    COLON112=(Token)match(input,COLON,FOLLOW_COLON_in_implicit_bag_type1553); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(COLON112);


                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:322:43: ( tuple_type )?
                    int alt33=2;
                    int LA33_0 = input.LA(1);

                    if ( (LA33_0==LEFT_PAREN||LA33_0==TUPLE) ) {
                        alt33=1;
                    }
                    switch (alt33) {
                        case 1 :
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:322:43: tuple_type
                            {
                            pushFollow(FOLLOW_tuple_type_in_implicit_bag_type1555);
                            tuple_type113=tuple_type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_tuple_type.add(tuple_type113.getTree());

                            }
                            break;

                    }


                    RIGHT_CURLY114=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_implicit_bag_type1558); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_CURLY.add(RIGHT_CURLY114);


                    // AST REWRITE
                    // elements: tuple_type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 322:67: -> ^( BAG_TYPE ( tuple_type )? )
                    {
                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:322:70: ^( BAG_TYPE ( tuple_type )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BAG_TYPE, "BAG_TYPE")
                        , root_1);

                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:322:82: ( tuple_type )?
                        if ( stream_tuple_type.hasNext() ) {
                            adaptor.addChild(root_1, stream_tuple_type.nextTree());

                        }
                        stream_tuple_type.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:323:21: LEFT_CURLY ( ( identifier_plus COLON )? tuple_type )? RIGHT_CURLY
                    {
                    LEFT_CURLY115=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_implicit_bag_type1591); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_CURLY.add(LEFT_CURLY115);


                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:323:32: ( ( identifier_plus COLON )? tuple_type )?
                    int alt35=2;
                    int LA35_0 = input.LA(1);

                    if ( (LA35_0==CUBE||(LA35_0 >= ELSE && LA35_0 <= END)||LA35_0==IDENTIFIER||LA35_0==IN||LA35_0==LEFT_PAREN||LA35_0==RANK||LA35_0==THEN||LA35_0==TUPLE||LA35_0==WHEN) ) {
                        alt35=1;
                    }
                    switch (alt35) {
                        case 1 :
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:323:34: ( identifier_plus COLON )? tuple_type
                            {
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:323:34: ( identifier_plus COLON )?
                            int alt34=2;
                            int LA34_0 = input.LA(1);

                            if ( (LA34_0==CUBE||(LA34_0 >= ELSE && LA34_0 <= END)||LA34_0==IDENTIFIER||LA34_0==IN||LA34_0==RANK||LA34_0==THEN||LA34_0==WHEN) ) {
                                alt34=1;
                            }
                            switch (alt34) {
                                case 1 :
                                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:323:36: identifier_plus COLON
                                    {
                                    pushFollow(FOLLOW_identifier_plus_in_implicit_bag_type1597);
                                    identifier_plus116=identifier_plus();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus116.getTree());

                                    COLON117=(Token)match(input,COLON,FOLLOW_COLON_in_implicit_bag_type1599); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_COLON.add(COLON117);


                                    }
                                    break;

                            }


                            pushFollow(FOLLOW_tuple_type_in_implicit_bag_type1604);
                            tuple_type118=tuple_type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_tuple_type.add(tuple_type118.getTree());

                            }
                            break;

                    }


                    RIGHT_CURLY119=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_implicit_bag_type1609); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_CURLY.add(RIGHT_CURLY119);


                    // AST REWRITE
                    // elements: identifier_plus, tuple_type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 323:87: -> ^( BAG_TYPE ( identifier_plus )? ( tuple_type )? )
                    {
                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:323:90: ^( BAG_TYPE ( identifier_plus )? ( tuple_type )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BAG_TYPE, "BAG_TYPE")
                        , root_1);

                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:323:102: ( identifier_plus )?
                        if ( stream_identifier_plus.hasNext() ) {
                            adaptor.addChild(root_1, stream_identifier_plus.nextTree());

                        }
                        stream_identifier_plus.reset();

                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:323:119: ( tuple_type )?
                        if ( stream_tuple_type.hasNext() ) {
                            adaptor.addChild(root_1, stream_tuple_type.nextTree());

                        }
                        stream_tuple_type.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implicit_bag_type"


    public static class explicit_bag_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "explicit_bag_type"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:326:1: explicit_bag_type : BAG ! implicit_bag_type ;
    public final QueryParser.explicit_bag_type_return explicit_bag_type() throws RecognitionException {
        QueryParser.explicit_bag_type_return retval = new QueryParser.explicit_bag_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token BAG120=null;
        QueryParser.implicit_bag_type_return implicit_bag_type121 =null;


        Object BAG120_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:326:19: ( BAG ! implicit_bag_type )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:326:21: BAG ! implicit_bag_type
            {
            root_0 = (Object)adaptor.nil();


            BAG120=(Token)match(input,BAG,FOLLOW_BAG_in_explicit_bag_type1632); if (state.failed) return retval;

            pushFollow(FOLLOW_implicit_bag_type_in_explicit_bag_type1635);
            implicit_bag_type121=implicit_bag_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, implicit_bag_type121.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "explicit_bag_type"


    public static class explicit_bag_type_cast_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "explicit_bag_type_cast"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:329:1: explicit_bag_type_cast : BAG LEFT_CURLY ( explicit_tuple_type_cast )? RIGHT_CURLY -> ^( BAG_TYPE_CAST ( explicit_tuple_type_cast )? ) ;
    public final QueryParser.explicit_bag_type_cast_return explicit_bag_type_cast() throws RecognitionException {
        QueryParser.explicit_bag_type_cast_return retval = new QueryParser.explicit_bag_type_cast_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token BAG122=null;
        Token LEFT_CURLY123=null;
        Token RIGHT_CURLY125=null;
        QueryParser.explicit_tuple_type_cast_return explicit_tuple_type_cast124 =null;


        Object BAG122_tree=null;
        Object LEFT_CURLY123_tree=null;
        Object RIGHT_CURLY125_tree=null;
        RewriteRuleTokenStream stream_LEFT_CURLY=new RewriteRuleTokenStream(adaptor,"token LEFT_CURLY");
        RewriteRuleTokenStream stream_BAG=new RewriteRuleTokenStream(adaptor,"token BAG");
        RewriteRuleTokenStream stream_RIGHT_CURLY=new RewriteRuleTokenStream(adaptor,"token RIGHT_CURLY");
        RewriteRuleSubtreeStream stream_explicit_tuple_type_cast=new RewriteRuleSubtreeStream(adaptor,"rule explicit_tuple_type_cast");
        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:329:24: ( BAG LEFT_CURLY ( explicit_tuple_type_cast )? RIGHT_CURLY -> ^( BAG_TYPE_CAST ( explicit_tuple_type_cast )? ) )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:329:26: BAG LEFT_CURLY ( explicit_tuple_type_cast )? RIGHT_CURLY
            {
            BAG122=(Token)match(input,BAG,FOLLOW_BAG_in_explicit_bag_type_cast1644); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BAG.add(BAG122);


            LEFT_CURLY123=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_explicit_bag_type_cast1646); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_CURLY.add(LEFT_CURLY123);


            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:329:41: ( explicit_tuple_type_cast )?
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==TUPLE) ) {
                alt37=1;
            }
            switch (alt37) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:329:41: explicit_tuple_type_cast
                    {
                    pushFollow(FOLLOW_explicit_tuple_type_cast_in_explicit_bag_type_cast1648);
                    explicit_tuple_type_cast124=explicit_tuple_type_cast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_explicit_tuple_type_cast.add(explicit_tuple_type_cast124.getTree());

                    }
                    break;

            }


            RIGHT_CURLY125=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_explicit_bag_type_cast1651); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_CURLY.add(RIGHT_CURLY125);


            // AST REWRITE
            // elements: explicit_tuple_type_cast
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 329:79: -> ^( BAG_TYPE_CAST ( explicit_tuple_type_cast )? )
            {
                // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:329:82: ^( BAG_TYPE_CAST ( explicit_tuple_type_cast )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BAG_TYPE_CAST, "BAG_TYPE_CAST")
                , root_1);

                // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:329:99: ( explicit_tuple_type_cast )?
                if ( stream_explicit_tuple_type_cast.hasNext() ) {
                    adaptor.addChild(root_1, stream_explicit_tuple_type_cast.nextTree());

                }
                stream_explicit_tuple_type_cast.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "explicit_bag_type_cast"


    public static class implicit_map_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implicit_map_type"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:332:1: implicit_map_type : LEFT_BRACKET ( ( identifier_plus COLON )? type )? RIGHT_BRACKET -> ^( MAP_TYPE ( identifier_plus )? ( type )? ) ;
    public final QueryParser.implicit_map_type_return implicit_map_type() throws RecognitionException {
        QueryParser.implicit_map_type_return retval = new QueryParser.implicit_map_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_BRACKET126=null;
        Token COLON128=null;
        Token RIGHT_BRACKET130=null;
        QueryParser.identifier_plus_return identifier_plus127 =null;

        QueryParser.type_return type129 =null;


        Object LEFT_BRACKET126_tree=null;
        Object COLON128_tree=null;
        Object RIGHT_BRACKET130_tree=null;
        RewriteRuleTokenStream stream_RIGHT_BRACKET=new RewriteRuleTokenStream(adaptor,"token RIGHT_BRACKET");
        RewriteRuleTokenStream stream_LEFT_BRACKET=new RewriteRuleTokenStream(adaptor,"token LEFT_BRACKET");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleSubtreeStream stream_identifier_plus=new RewriteRuleSubtreeStream(adaptor,"rule identifier_plus");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:332:19: ( LEFT_BRACKET ( ( identifier_plus COLON )? type )? RIGHT_BRACKET -> ^( MAP_TYPE ( identifier_plus )? ( type )? ) )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:332:21: LEFT_BRACKET ( ( identifier_plus COLON )? type )? RIGHT_BRACKET
            {
            LEFT_BRACKET126=(Token)match(input,LEFT_BRACKET,FOLLOW_LEFT_BRACKET_in_implicit_map_type1671); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_BRACKET.add(LEFT_BRACKET126);


            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:332:34: ( ( identifier_plus COLON )? type )?
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( ((LA39_0 >= BAG && LA39_0 <= BIGDECIMAL)||LA39_0==BIGINTEGER||LA39_0==BOOLEAN||LA39_0==BYTEARRAY||LA39_0==CHARARRAY||(LA39_0 >= CUBE && LA39_0 <= DATETIME)||LA39_0==DOUBLE||(LA39_0 >= ELSE && LA39_0 <= END)||LA39_0==FLOAT||LA39_0==IDENTIFIER||LA39_0==IN||LA39_0==INT||(LA39_0 >= LEFT_BRACKET && LA39_0 <= LEFT_PAREN)||LA39_0==LONG||LA39_0==MAP||LA39_0==RANK||LA39_0==THEN||LA39_0==TUPLE||LA39_0==WHEN) ) {
                alt39=1;
            }
            switch (alt39) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:332:36: ( identifier_plus COLON )? type
                    {
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:332:36: ( identifier_plus COLON )?
                    int alt38=2;
                    int LA38_0 = input.LA(1);

                    if ( (LA38_0==CUBE||(LA38_0 >= ELSE && LA38_0 <= END)||LA38_0==IDENTIFIER||LA38_0==IN||LA38_0==RANK||LA38_0==THEN||LA38_0==WHEN) ) {
                        alt38=1;
                    }
                    switch (alt38) {
                        case 1 :
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:332:38: identifier_plus COLON
                            {
                            pushFollow(FOLLOW_identifier_plus_in_implicit_map_type1677);
                            identifier_plus127=identifier_plus();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus127.getTree());

                            COLON128=(Token)match(input,COLON,FOLLOW_COLON_in_implicit_map_type1679); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(COLON128);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_type_in_implicit_map_type1684);
                    type129=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type129.getTree());

                    }
                    break;

            }


            RIGHT_BRACKET130=(Token)match(input,RIGHT_BRACKET,FOLLOW_RIGHT_BRACKET_in_implicit_map_type1689); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_BRACKET.add(RIGHT_BRACKET130);


            // AST REWRITE
            // elements: type, identifier_plus
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 332:85: -> ^( MAP_TYPE ( identifier_plus )? ( type )? )
            {
                // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:332:88: ^( MAP_TYPE ( identifier_plus )? ( type )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MAP_TYPE, "MAP_TYPE")
                , root_1);

                // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:332:100: ( identifier_plus )?
                if ( stream_identifier_plus.hasNext() ) {
                    adaptor.addChild(root_1, stream_identifier_plus.nextTree());

                }
                stream_identifier_plus.reset();

                // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:332:117: ( type )?
                if ( stream_type.hasNext() ) {
                    adaptor.addChild(root_1, stream_type.nextTree());

                }
                stream_type.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implicit_map_type"


    public static class explicit_map_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "explicit_map_type"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:335:1: explicit_map_type : MAP ! implicit_map_type ;
    public final QueryParser.explicit_map_type_return explicit_map_type() throws RecognitionException {
        QueryParser.explicit_map_type_return retval = new QueryParser.explicit_map_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token MAP131=null;
        QueryParser.implicit_map_type_return implicit_map_type132 =null;


        Object MAP131_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:335:19: ( MAP ! implicit_map_type )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:335:21: MAP ! implicit_map_type
            {
            root_0 = (Object)adaptor.nil();


            MAP131=(Token)match(input,MAP,FOLLOW_MAP_in_explicit_map_type1712); if (state.failed) return retval;

            pushFollow(FOLLOW_implicit_map_type_in_explicit_map_type1715);
            implicit_map_type132=implicit_map_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, implicit_map_type132.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "explicit_map_type"


    public static class map_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "map_type"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:338:1: map_type : ( implicit_map_type | explicit_map_type );
    public final QueryParser.map_type_return map_type() throws RecognitionException {
        QueryParser.map_type_return retval = new QueryParser.map_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.implicit_map_type_return implicit_map_type133 =null;

        QueryParser.explicit_map_type_return explicit_map_type134 =null;



        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:338:10: ( implicit_map_type | explicit_map_type )
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==LEFT_BRACKET) ) {
                alt40=1;
            }
            else if ( (LA40_0==MAP) ) {
                alt40=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);

                throw nvae;

            }
            switch (alt40) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:338:12: implicit_map_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implicit_map_type_in_map_type1724);
                    implicit_map_type133=implicit_map_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, implicit_map_type133.getTree());

                    }
                    break;
                case 2 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:338:32: explicit_map_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_explicit_map_type_in_map_type1728);
                    explicit_map_type134=explicit_map_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, explicit_map_type134.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "map_type"


    public static class explicit_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "explicit_type"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:341:1: explicit_type : ( simple_type | explicit_tuple_type | explicit_bag_type | explicit_map_type );
    public final QueryParser.explicit_type_return explicit_type() throws RecognitionException {
        QueryParser.explicit_type_return retval = new QueryParser.explicit_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.simple_type_return simple_type135 =null;

        QueryParser.explicit_tuple_type_return explicit_tuple_type136 =null;

        QueryParser.explicit_bag_type_return explicit_bag_type137 =null;

        QueryParser.explicit_map_type_return explicit_map_type138 =null;



        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:341:15: ( simple_type | explicit_tuple_type | explicit_bag_type | explicit_map_type )
            int alt41=4;
            switch ( input.LA(1) ) {
            case BIGDECIMAL:
            case BIGINTEGER:
            case BOOLEAN:
            case BYTEARRAY:
            case CHARARRAY:
            case DATETIME:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
                {
                alt41=1;
                }
                break;
            case TUPLE:
                {
                alt41=2;
                }
                break;
            case BAG:
                {
                alt41=3;
                }
                break;
            case MAP:
                {
                alt41=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 41, 0, input);

                throw nvae;

            }

            switch (alt41) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:341:17: simple_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_type_in_explicit_type1737);
                    simple_type135=simple_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_type135.getTree());

                    }
                    break;
                case 2 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:341:31: explicit_tuple_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_explicit_tuple_type_in_explicit_type1741);
                    explicit_tuple_type136=explicit_tuple_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, explicit_tuple_type136.getTree());

                    }
                    break;
                case 3 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:341:53: explicit_bag_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_explicit_bag_type_in_explicit_type1745);
                    explicit_bag_type137=explicit_bag_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, explicit_bag_type137.getTree());

                    }
                    break;
                case 4 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:341:73: explicit_map_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_explicit_map_type_in_explicit_type1749);
                    explicit_map_type138=explicit_map_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, explicit_map_type138.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "explicit_type"


    public static class implicit_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implicit_type"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:344:1: implicit_type : ( implicit_tuple_type | implicit_bag_type | implicit_map_type );
    public final QueryParser.implicit_type_return implicit_type() throws RecognitionException {
        QueryParser.implicit_type_return retval = new QueryParser.implicit_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.implicit_tuple_type_return implicit_tuple_type139 =null;

        QueryParser.implicit_bag_type_return implicit_bag_type140 =null;

        QueryParser.implicit_map_type_return implicit_map_type141 =null;



        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:344:15: ( implicit_tuple_type | implicit_bag_type | implicit_map_type )
            int alt42=3;
            switch ( input.LA(1) ) {
            case LEFT_PAREN:
                {
                alt42=1;
                }
                break;
            case LEFT_CURLY:
                {
                alt42=2;
                }
                break;
            case LEFT_BRACKET:
                {
                alt42=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 42, 0, input);

                throw nvae;

            }

            switch (alt42) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:344:17: implicit_tuple_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implicit_tuple_type_in_implicit_type1758);
                    implicit_tuple_type139=implicit_tuple_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, implicit_tuple_type139.getTree());

                    }
                    break;
                case 2 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:344:39: implicit_bag_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implicit_bag_type_in_implicit_type1762);
                    implicit_bag_type140=implicit_bag_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, implicit_bag_type140.getTree());

                    }
                    break;
                case 3 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:344:59: implicit_map_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implicit_map_type_in_implicit_type1766);
                    implicit_map_type141=implicit_map_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, implicit_map_type141.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implicit_type"


    public static class type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:347:1: type : ( explicit_type | implicit_type );
    public final QueryParser.type_return type() throws RecognitionException {
        QueryParser.type_return retval = new QueryParser.type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.explicit_type_return explicit_type142 =null;

        QueryParser.implicit_type_return implicit_type143 =null;



        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:347:6: ( explicit_type | implicit_type )
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( ((LA43_0 >= BAG && LA43_0 <= BIGDECIMAL)||LA43_0==BIGINTEGER||LA43_0==BOOLEAN||LA43_0==BYTEARRAY||LA43_0==CHARARRAY||LA43_0==DATETIME||LA43_0==DOUBLE||LA43_0==FLOAT||LA43_0==INT||LA43_0==LONG||LA43_0==MAP||LA43_0==TUPLE) ) {
                alt43=1;
            }
            else if ( ((LA43_0 >= LEFT_BRACKET && LA43_0 <= LEFT_PAREN)) ) {
                alt43=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 43, 0, input);

                throw nvae;

            }
            switch (alt43) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:347:8: explicit_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_explicit_type_in_type1775);
                    explicit_type142=explicit_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, explicit_type142.getTree());

                    }
                    break;
                case 2 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:347:24: implicit_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implicit_type_in_type1779);
                    implicit_type143=implicit_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, implicit_type143.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type"


    public static class explicit_type_cast_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "explicit_type_cast"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:350:1: explicit_type_cast : ( simple_type | explicit_map_type | explicit_tuple_type_cast | explicit_bag_type_cast );
    public final QueryParser.explicit_type_cast_return explicit_type_cast() throws RecognitionException {
        QueryParser.explicit_type_cast_return retval = new QueryParser.explicit_type_cast_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.simple_type_return simple_type144 =null;

        QueryParser.explicit_map_type_return explicit_map_type145 =null;

        QueryParser.explicit_tuple_type_cast_return explicit_tuple_type_cast146 =null;

        QueryParser.explicit_bag_type_cast_return explicit_bag_type_cast147 =null;



        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:350:20: ( simple_type | explicit_map_type | explicit_tuple_type_cast | explicit_bag_type_cast )
            int alt44=4;
            switch ( input.LA(1) ) {
            case BIGDECIMAL:
            case BIGINTEGER:
            case BOOLEAN:
            case BYTEARRAY:
            case CHARARRAY:
            case DATETIME:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
                {
                alt44=1;
                }
                break;
            case MAP:
                {
                alt44=2;
                }
                break;
            case TUPLE:
                {
                alt44=3;
                }
                break;
            case BAG:
                {
                alt44=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 44, 0, input);

                throw nvae;

            }

            switch (alt44) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:350:22: simple_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_type_in_explicit_type_cast1788);
                    simple_type144=simple_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_type144.getTree());

                    }
                    break;
                case 2 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:350:36: explicit_map_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_explicit_map_type_in_explicit_type_cast1792);
                    explicit_map_type145=explicit_map_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, explicit_map_type145.getTree());

                    }
                    break;
                case 3 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:350:56: explicit_tuple_type_cast
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_explicit_tuple_type_cast_in_explicit_type_cast1796);
                    explicit_tuple_type_cast146=explicit_tuple_type_cast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, explicit_tuple_type_cast146.getTree());

                    }
                    break;
                case 4 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:350:83: explicit_bag_type_cast
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_explicit_bag_type_cast_in_explicit_type_cast1800);
                    explicit_bag_type_cast147=explicit_bag_type_cast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, explicit_bag_type_cast147.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "explicit_type_cast"


    public static class import_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "import_clause"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:355:1: import_clause : IMPORT ^ QUOTEDSTRING ;
    public final QueryParser.import_clause_return import_clause() throws RecognitionException {
        QueryParser.import_clause_return retval = new QueryParser.import_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token IMPORT148=null;
        Token QUOTEDSTRING149=null;

        Object IMPORT148_tree=null;
        Object QUOTEDSTRING149_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:355:15: ( IMPORT ^ QUOTEDSTRING )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:355:17: IMPORT ^ QUOTEDSTRING
            {
            root_0 = (Object)adaptor.nil();


            IMPORT148=(Token)match(input,IMPORT,FOLLOW_IMPORT_in_import_clause1811); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IMPORT148_tree = 
            (Object)adaptor.create(IMPORT148)
            ;
            root_0 = (Object)adaptor.becomeRoot(IMPORT148_tree, root_0);
            }

            QUOTEDSTRING149=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_import_clause1814); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTEDSTRING149_tree = 
            (Object)adaptor.create(QUOTEDSTRING149)
            ;
            adaptor.addChild(root_0, QUOTEDSTRING149_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "import_clause"


    public static class register_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "register_clause"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:358:1: register_clause : REGISTER ^ QUOTEDSTRING ( USING identifier_plus AS identifier_plus )? ;
    public final QueryParser.register_clause_return register_clause() throws RecognitionException {
        QueryParser.register_clause_return retval = new QueryParser.register_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGISTER150=null;
        Token QUOTEDSTRING151=null;
        Token USING152=null;
        Token AS154=null;
        QueryParser.identifier_plus_return identifier_plus153 =null;

        QueryParser.identifier_plus_return identifier_plus155 =null;


        Object REGISTER150_tree=null;
        Object QUOTEDSTRING151_tree=null;
        Object USING152_tree=null;
        Object AS154_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:358:17: ( REGISTER ^ QUOTEDSTRING ( USING identifier_plus AS identifier_plus )? )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:358:19: REGISTER ^ QUOTEDSTRING ( USING identifier_plus AS identifier_plus )?
            {
            root_0 = (Object)adaptor.nil();


            REGISTER150=(Token)match(input,REGISTER,FOLLOW_REGISTER_in_register_clause1823); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGISTER150_tree = 
            (Object)adaptor.create(REGISTER150)
            ;
            root_0 = (Object)adaptor.becomeRoot(REGISTER150_tree, root_0);
            }

            QUOTEDSTRING151=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_register_clause1826); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTEDSTRING151_tree = 
            (Object)adaptor.create(QUOTEDSTRING151)
            ;
            adaptor.addChild(root_0, QUOTEDSTRING151_tree);
            }

            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:358:42: ( USING identifier_plus AS identifier_plus )?
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==USING) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:358:43: USING identifier_plus AS identifier_plus
                    {
                    USING152=(Token)match(input,USING,FOLLOW_USING_in_register_clause1829); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    USING152_tree = 
                    (Object)adaptor.create(USING152)
                    ;
                    adaptor.addChild(root_0, USING152_tree);
                    }

                    pushFollow(FOLLOW_identifier_plus_in_register_clause1831);
                    identifier_plus153=identifier_plus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier_plus153.getTree());

                    AS154=(Token)match(input,AS,FOLLOW_AS_in_register_clause1833); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AS154_tree = 
                    (Object)adaptor.create(AS154)
                    ;
                    adaptor.addChild(root_0, AS154_tree);
                    }

                    pushFollow(FOLLOW_identifier_plus_in_register_clause1835);
                    identifier_plus155=identifier_plus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier_plus155.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "register_clause"


    public static class define_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "define_clause"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:361:1: define_clause : DEFINE ^ IDENTIFIER ( cmd | func_clause | macro_clause ) ;
    public final QueryParser.define_clause_return define_clause() throws RecognitionException {
        QueryParser.define_clause_return retval = new QueryParser.define_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DEFINE156=null;
        Token IDENTIFIER157=null;
        QueryParser.cmd_return cmd158 =null;

        QueryParser.func_clause_return func_clause159 =null;

        QueryParser.macro_clause_return macro_clause160 =null;


        Object DEFINE156_tree=null;
        Object IDENTIFIER157_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:361:15: ( DEFINE ^ IDENTIFIER ( cmd | func_clause | macro_clause ) )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:361:17: DEFINE ^ IDENTIFIER ( cmd | func_clause | macro_clause )
            {
            root_0 = (Object)adaptor.nil();


            DEFINE156=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_define_clause1846); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DEFINE156_tree = 
            (Object)adaptor.create(DEFINE156)
            ;
            root_0 = (Object)adaptor.becomeRoot(DEFINE156_tree, root_0);
            }

            IDENTIFIER157=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_define_clause1849); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENTIFIER157_tree = 
            (Object)adaptor.create(IDENTIFIER157)
            ;
            adaptor.addChild(root_0, IDENTIFIER157_tree);
            }

            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:361:36: ( cmd | func_clause | macro_clause )
            int alt46=3;
            switch ( input.LA(1) ) {
            case EXECCOMMAND:
                {
                alt46=1;
                }
                break;
            case ALL:
            case AND:
            case AS:
            case ASC:
            case ASSERT:
            case BAG:
            case BIGDECIMAL:
            case BIGINTEGER:
            case BY:
            case BYTEARRAY:
            case CACHE:
            case CHARARRAY:
            case COGROUP:
            case CROSS:
            case CUBE:
            case DATETIME:
            case DEFINE:
            case DESC:
            case DISTINCT:
            case DOUBLE:
            case FALSE:
            case FILTER:
            case FLATTEN:
            case FLOAT:
            case FOREACH:
            case FULL:
            case GENERATE:
            case GROUP:
            case IDENTIFIER:
            case IF:
            case IMPORT:
            case INNER:
            case INPUT:
            case INT:
            case INTO:
            case IS:
            case JOIN:
            case LEFT:
            case LIMIT:
            case LOAD:
            case LONG:
            case MAP:
            case MAPREDUCE:
            case NOT:
            case NULL:
            case OR:
            case ORDER:
            case OUTER:
            case OUTPUT:
            case PARALLEL:
            case PARTITION:
            case REGISTER:
            case RETURNS:
            case RIGHT:
            case ROLLUP:
            case SAMPLE:
            case SHIP:
            case SPLIT:
            case STDERROR:
            case STDIN:
            case STDOUT:
            case STORE:
            case STREAM:
            case STR_OP_EQ:
            case STR_OP_GT:
            case STR_OP_GTE:
            case STR_OP_LT:
            case STR_OP_LTE:
            case STR_OP_MATCHES:
            case STR_OP_NE:
            case THROUGH:
            case TRUE:
            case TUPLE:
            case UNION:
            case USING:
            case BOOL:
            case BOOL_COND:
            case REALIAS:
                {
                alt46=2;
                }
                break;
            case LEFT_PAREN:
                {
                alt46=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 46, 0, input);

                throw nvae;

            }

            switch (alt46) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:361:38: cmd
                    {
                    pushFollow(FOLLOW_cmd_in_define_clause1853);
                    cmd158=cmd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cmd158.getTree());

                    }
                    break;
                case 2 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:361:44: func_clause
                    {
                    pushFollow(FOLLOW_func_clause_in_define_clause1857);
                    func_clause159=func_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_clause159.getTree());

                    }
                    break;
                case 3 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:361:58: macro_clause
                    {
                    pushFollow(FOLLOW_macro_clause_in_define_clause1861);
                    macro_clause160=macro_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, macro_clause160.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "define_clause"


    public static class realias_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "realias_clause"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:364:1: realias_clause : identifier_plus EQUAL identifier_plus -> ^( REALIAS identifier_plus identifier_plus ) ;
    public final QueryParser.realias_clause_return realias_clause() throws RecognitionException {
        QueryParser.realias_clause_return retval = new QueryParser.realias_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EQUAL162=null;
        QueryParser.identifier_plus_return identifier_plus161 =null;

        QueryParser.identifier_plus_return identifier_plus163 =null;


        Object EQUAL162_tree=null;
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleSubtreeStream stream_identifier_plus=new RewriteRuleSubtreeStream(adaptor,"rule identifier_plus");
        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:364:16: ( identifier_plus EQUAL identifier_plus -> ^( REALIAS identifier_plus identifier_plus ) )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:364:18: identifier_plus EQUAL identifier_plus
            {
            pushFollow(FOLLOW_identifier_plus_in_realias_clause1871);
            identifier_plus161=identifier_plus();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus161.getTree());

            EQUAL162=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_realias_clause1873); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL162);


            pushFollow(FOLLOW_identifier_plus_in_realias_clause1875);
            identifier_plus163=identifier_plus();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus163.getTree());

            // AST REWRITE
            // elements: identifier_plus, identifier_plus
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 364:56: -> ^( REALIAS identifier_plus identifier_plus )
            {
                // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:364:59: ^( REALIAS identifier_plus identifier_plus )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(REALIAS, "REALIAS")
                , root_1);

                adaptor.addChild(root_1, stream_identifier_plus.nextTree());

                adaptor.addChild(root_1, stream_identifier_plus.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "realias_clause"


    public static class parallel_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "parallel_clause"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:367:1: parallel_clause : PARALLEL ^ INTEGER ;
    public final QueryParser.parallel_clause_return parallel_clause() throws RecognitionException {
        QueryParser.parallel_clause_return retval = new QueryParser.parallel_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token PARALLEL164=null;
        Token INTEGER165=null;

        Object PARALLEL164_tree=null;
        Object INTEGER165_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:367:17: ( PARALLEL ^ INTEGER )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:367:19: PARALLEL ^ INTEGER
            {
            root_0 = (Object)adaptor.nil();


            PARALLEL164=(Token)match(input,PARALLEL,FOLLOW_PARALLEL_in_parallel_clause1894); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PARALLEL164_tree = 
            (Object)adaptor.create(PARALLEL164)
            ;
            root_0 = (Object)adaptor.becomeRoot(PARALLEL164_tree, root_0);
            }

            INTEGER165=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_parallel_clause1897); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INTEGER165_tree = 
            (Object)adaptor.create(INTEGER165)
            ;
            adaptor.addChild(root_0, INTEGER165_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "parallel_clause"


    public static class op_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op_clause"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:370:1: op_clause : ( define_clause | load_clause | group_clause | cube_clause | store_clause | filter_clause | distinct_clause | limit_clause | sample_clause | order_clause | rank_clause | cross_clause | join_clause | union_clause | stream_clause | mr_clause );
    public final QueryParser.op_clause_return op_clause() throws RecognitionException {
        QueryParser.op_clause_return retval = new QueryParser.op_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.define_clause_return define_clause166 =null;

        QueryParser.load_clause_return load_clause167 =null;

        QueryParser.group_clause_return group_clause168 =null;

        QueryParser.cube_clause_return cube_clause169 =null;

        QueryParser.store_clause_return store_clause170 =null;

        QueryParser.filter_clause_return filter_clause171 =null;

        QueryParser.distinct_clause_return distinct_clause172 =null;

        QueryParser.limit_clause_return limit_clause173 =null;

        QueryParser.sample_clause_return sample_clause174 =null;

        QueryParser.order_clause_return order_clause175 =null;

        QueryParser.rank_clause_return rank_clause176 =null;

        QueryParser.cross_clause_return cross_clause177 =null;

        QueryParser.join_clause_return join_clause178 =null;

        QueryParser.union_clause_return union_clause179 =null;

        QueryParser.stream_clause_return stream_clause180 =null;

        QueryParser.mr_clause_return mr_clause181 =null;



        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:370:11: ( define_clause | load_clause | group_clause | cube_clause | store_clause | filter_clause | distinct_clause | limit_clause | sample_clause | order_clause | rank_clause | cross_clause | join_clause | union_clause | stream_clause | mr_clause )
            int alt47=16;
            switch ( input.LA(1) ) {
            case DEFINE:
                {
                alt47=1;
                }
                break;
            case LOAD:
                {
                alt47=2;
                }
                break;
            case COGROUP:
            case GROUP:
                {
                alt47=3;
                }
                break;
            case CUBE:
                {
                alt47=4;
                }
                break;
            case STORE:
                {
                alt47=5;
                }
                break;
            case FILTER:
                {
                alt47=6;
                }
                break;
            case DISTINCT:
                {
                alt47=7;
                }
                break;
            case LIMIT:
                {
                alt47=8;
                }
                break;
            case SAMPLE:
                {
                alt47=9;
                }
                break;
            case ORDER:
                {
                alt47=10;
                }
                break;
            case RANK:
                {
                alt47=11;
                }
                break;
            case CROSS:
                {
                alt47=12;
                }
                break;
            case JOIN:
                {
                alt47=13;
                }
                break;
            case UNION:
                {
                alt47=14;
                }
                break;
            case STREAM:
                {
                alt47=15;
                }
                break;
            case MAPREDUCE:
                {
                alt47=16;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 47, 0, input);

                throw nvae;

            }

            switch (alt47) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:370:13: define_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_define_clause_in_op_clause1906);
                    define_clause166=define_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, define_clause166.getTree());

                    }
                    break;
                case 2 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:371:13: load_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_load_clause_in_op_clause1920);
                    load_clause167=load_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, load_clause167.getTree());

                    }
                    break;
                case 3 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:372:13: group_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_group_clause_in_op_clause1934);
                    group_clause168=group_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, group_clause168.getTree());

                    }
                    break;
                case 4 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:373:13: cube_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_cube_clause_in_op_clause1948);
                    cube_clause169=cube_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cube_clause169.getTree());

                    }
                    break;
                case 5 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:374:13: store_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_store_clause_in_op_clause1962);
                    store_clause170=store_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, store_clause170.getTree());

                    }
                    break;
                case 6 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:375:13: filter_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_filter_clause_in_op_clause1976);
                    filter_clause171=filter_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, filter_clause171.getTree());

                    }
                    break;
                case 7 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:376:13: distinct_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_distinct_clause_in_op_clause1990);
                    distinct_clause172=distinct_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, distinct_clause172.getTree());

                    }
                    break;
                case 8 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:377:13: limit_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_limit_clause_in_op_clause2004);
                    limit_clause173=limit_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, limit_clause173.getTree());

                    }
                    break;
                case 9 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:378:13: sample_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_sample_clause_in_op_clause2018);
                    sample_clause174=sample_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sample_clause174.getTree());

                    }
                    break;
                case 10 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:379:13: order_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_order_clause_in_op_clause2032);
                    order_clause175=order_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, order_clause175.getTree());

                    }
                    break;
                case 11 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:380:13: rank_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_rank_clause_in_op_clause2046);
                    rank_clause176=rank_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rank_clause176.getTree());

                    }
                    break;
                case 12 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:381:13: cross_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_cross_clause_in_op_clause2060);
                    cross_clause177=cross_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cross_clause177.getTree());

                    }
                    break;
                case 13 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:382:13: join_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_join_clause_in_op_clause2074);
                    join_clause178=join_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, join_clause178.getTree());

                    }
                    break;
                case 14 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:383:13: union_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_union_clause_in_op_clause2088);
                    union_clause179=union_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, union_clause179.getTree());

                    }
                    break;
                case 15 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:384:13: stream_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_stream_clause_in_op_clause2102);
                    stream_clause180=stream_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stream_clause180.getTree());

                    }
                    break;
                case 16 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:385:13: mr_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_mr_clause_in_op_clause2116);
                    mr_clause181=mr_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mr_clause181.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op_clause"


    public static class ship_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "ship_clause"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:388:1: ship_clause : SHIP ^ LEFT_PAREN ! ( path_list )? RIGHT_PAREN !;
    public final QueryParser.ship_clause_return ship_clause() throws RecognitionException {
        QueryParser.ship_clause_return retval = new QueryParser.ship_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SHIP182=null;
        Token LEFT_PAREN183=null;
        Token RIGHT_PAREN185=null;
        QueryParser.path_list_return path_list184 =null;


        Object SHIP182_tree=null;
        Object LEFT_PAREN183_tree=null;
        Object RIGHT_PAREN185_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:388:13: ( SHIP ^ LEFT_PAREN ! ( path_list )? RIGHT_PAREN !)
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:388:15: SHIP ^ LEFT_PAREN ! ( path_list )? RIGHT_PAREN !
            {
            root_0 = (Object)adaptor.nil();


            SHIP182=(Token)match(input,SHIP,FOLLOW_SHIP_in_ship_clause2125); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SHIP182_tree = 
            (Object)adaptor.create(SHIP182)
            ;
            root_0 = (Object)adaptor.becomeRoot(SHIP182_tree, root_0);
            }

            LEFT_PAREN183=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_ship_clause2128); if (state.failed) return retval;

            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:388:33: ( path_list )?
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==QUOTEDSTRING) ) {
                alt48=1;
            }
            switch (alt48) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:388:33: path_list
                    {
                    pushFollow(FOLLOW_path_list_in_ship_clause2131);
                    path_list184=path_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, path_list184.getTree());

                    }
                    break;

            }


            RIGHT_PAREN185=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_ship_clause2134); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ship_clause"


    public static class path_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "path_list"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:391:1: path_list : QUOTEDSTRING ( COMMA QUOTEDSTRING )* -> ( QUOTEDSTRING )+ ;
    public final QueryParser.path_list_return path_list() throws RecognitionException {
        QueryParser.path_list_return retval = new QueryParser.path_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token QUOTEDSTRING186=null;
        Token COMMA187=null;
        Token QUOTEDSTRING188=null;

        Object QUOTEDSTRING186_tree=null;
        Object COMMA187_tree=null;
        Object QUOTEDSTRING188_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_QUOTEDSTRING=new RewriteRuleTokenStream(adaptor,"token QUOTEDSTRING");

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:391:11: ( QUOTEDSTRING ( COMMA QUOTEDSTRING )* -> ( QUOTEDSTRING )+ )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:391:13: QUOTEDSTRING ( COMMA QUOTEDSTRING )*
            {
            QUOTEDSTRING186=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_path_list2144); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_QUOTEDSTRING.add(QUOTEDSTRING186);


            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:391:26: ( COMMA QUOTEDSTRING )*
            loop49:
            do {
                int alt49=2;
                int LA49_0 = input.LA(1);

                if ( (LA49_0==COMMA) ) {
                    alt49=1;
                }


                switch (alt49) {
            	case 1 :
            	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:391:28: COMMA QUOTEDSTRING
            	    {
            	    COMMA187=(Token)match(input,COMMA,FOLLOW_COMMA_in_path_list2148); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA187);


            	    QUOTEDSTRING188=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_path_list2150); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_QUOTEDSTRING.add(QUOTEDSTRING188);


            	    }
            	    break;

            	default :
            	    break loop49;
                }
            } while (true);


            // AST REWRITE
            // elements: QUOTEDSTRING
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 391:50: -> ( QUOTEDSTRING )+
            {
                if ( !(stream_QUOTEDSTRING.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_QUOTEDSTRING.hasNext() ) {
                    adaptor.addChild(root_0, 
                    stream_QUOTEDSTRING.nextNode()
                    );

                }
                stream_QUOTEDSTRING.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "path_list"


    public static class cache_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cache_clause"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:394:1: cache_clause : CACHE ^ LEFT_PAREN ! path_list RIGHT_PAREN !;
    public final QueryParser.cache_clause_return cache_clause() throws RecognitionException {
        QueryParser.cache_clause_return retval = new QueryParser.cache_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CACHE189=null;
        Token LEFT_PAREN190=null;
        Token RIGHT_PAREN192=null;
        QueryParser.path_list_return path_list191 =null;


        Object CACHE189_tree=null;
        Object LEFT_PAREN190_tree=null;
        Object RIGHT_PAREN192_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:394:14: ( CACHE ^ LEFT_PAREN ! path_list RIGHT_PAREN !)
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:394:16: CACHE ^ LEFT_PAREN ! path_list RIGHT_PAREN !
            {
            root_0 = (Object)adaptor.nil();


            CACHE189=(Token)match(input,CACHE,FOLLOW_CACHE_in_cache_clause2167); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CACHE189_tree = 
            (Object)adaptor.create(CACHE189)
            ;
            root_0 = (Object)adaptor.becomeRoot(CACHE189_tree, root_0);
            }

            LEFT_PAREN190=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_cache_clause2170); if (state.failed) return retval;

            pushFollow(FOLLOW_path_list_in_cache_clause2173);
            path_list191=path_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, path_list191.getTree());

            RIGHT_PAREN192=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_cache_clause2175); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cache_clause"


    public static class input_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "input_clause"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:397:1: input_clause : INPUT ^ LEFT_PAREN ! stream_cmd_list RIGHT_PAREN !;
    public final QueryParser.input_clause_return input_clause() throws RecognitionException {
        QueryParser.input_clause_return retval = new QueryParser.input_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token INPUT193=null;
        Token LEFT_PAREN194=null;
        Token RIGHT_PAREN196=null;
        QueryParser.stream_cmd_list_return stream_cmd_list195 =null;


        Object INPUT193_tree=null;
        Object LEFT_PAREN194_tree=null;
        Object RIGHT_PAREN196_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:397:14: ( INPUT ^ LEFT_PAREN ! stream_cmd_list RIGHT_PAREN !)
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:397:16: INPUT ^ LEFT_PAREN ! stream_cmd_list RIGHT_PAREN !
            {
            root_0 = (Object)adaptor.nil();


            INPUT193=(Token)match(input,INPUT,FOLLOW_INPUT_in_input_clause2185); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INPUT193_tree = 
            (Object)adaptor.create(INPUT193)
            ;
            root_0 = (Object)adaptor.becomeRoot(INPUT193_tree, root_0);
            }

            LEFT_PAREN194=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_input_clause2188); if (state.failed) return retval;

            pushFollow(FOLLOW_stream_cmd_list_in_input_clause2191);
            stream_cmd_list195=stream_cmd_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, stream_cmd_list195.getTree());

            RIGHT_PAREN196=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_input_clause2193); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "input_clause"


    public static class output_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "output_clause"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:400:1: output_clause : OUTPUT ^ LEFT_PAREN ! stream_cmd_list RIGHT_PAREN !;
    public final QueryParser.output_clause_return output_clause() throws RecognitionException {
        QueryParser.output_clause_return retval = new QueryParser.output_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token OUTPUT197=null;
        Token LEFT_PAREN198=null;
        Token RIGHT_PAREN200=null;
        QueryParser.stream_cmd_list_return stream_cmd_list199 =null;


        Object OUTPUT197_tree=null;
        Object LEFT_PAREN198_tree=null;
        Object RIGHT_PAREN200_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:400:15: ( OUTPUT ^ LEFT_PAREN ! stream_cmd_list RIGHT_PAREN !)
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:400:17: OUTPUT ^ LEFT_PAREN ! stream_cmd_list RIGHT_PAREN !
            {
            root_0 = (Object)adaptor.nil();


            OUTPUT197=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_output_clause2203); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OUTPUT197_tree = 
            (Object)adaptor.create(OUTPUT197)
            ;
            root_0 = (Object)adaptor.becomeRoot(OUTPUT197_tree, root_0);
            }

            LEFT_PAREN198=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_output_clause2206); if (state.failed) return retval;

            pushFollow(FOLLOW_stream_cmd_list_in_output_clause2209);
            stream_cmd_list199=stream_cmd_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, stream_cmd_list199.getTree());

            RIGHT_PAREN200=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_output_clause2211); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "output_clause"


    public static class error_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "error_clause"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:403:1: error_clause : STDERROR ^ LEFT_PAREN ! ( QUOTEDSTRING ( LIMIT ! INTEGER )? )? RIGHT_PAREN !;
    public final QueryParser.error_clause_return error_clause() throws RecognitionException {
        QueryParser.error_clause_return retval = new QueryParser.error_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STDERROR201=null;
        Token LEFT_PAREN202=null;
        Token QUOTEDSTRING203=null;
        Token LIMIT204=null;
        Token INTEGER205=null;
        Token RIGHT_PAREN206=null;

        Object STDERROR201_tree=null;
        Object LEFT_PAREN202_tree=null;
        Object QUOTEDSTRING203_tree=null;
        Object LIMIT204_tree=null;
        Object INTEGER205_tree=null;
        Object RIGHT_PAREN206_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:403:14: ( STDERROR ^ LEFT_PAREN ! ( QUOTEDSTRING ( LIMIT ! INTEGER )? )? RIGHT_PAREN !)
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:403:16: STDERROR ^ LEFT_PAREN ! ( QUOTEDSTRING ( LIMIT ! INTEGER )? )? RIGHT_PAREN !
            {
            root_0 = (Object)adaptor.nil();


            STDERROR201=(Token)match(input,STDERROR,FOLLOW_STDERROR_in_error_clause2221); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STDERROR201_tree = 
            (Object)adaptor.create(STDERROR201)
            ;
            root_0 = (Object)adaptor.becomeRoot(STDERROR201_tree, root_0);
            }

            LEFT_PAREN202=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_error_clause2224); if (state.failed) return retval;

            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:403:38: ( QUOTEDSTRING ( LIMIT ! INTEGER )? )?
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==QUOTEDSTRING) ) {
                alt51=1;
            }
            switch (alt51) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:403:40: QUOTEDSTRING ( LIMIT ! INTEGER )?
                    {
                    QUOTEDSTRING203=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_error_clause2229); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUOTEDSTRING203_tree = 
                    (Object)adaptor.create(QUOTEDSTRING203)
                    ;
                    adaptor.addChild(root_0, QUOTEDSTRING203_tree);
                    }

                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:403:53: ( LIMIT ! INTEGER )?
                    int alt50=2;
                    int LA50_0 = input.LA(1);

                    if ( (LA50_0==LIMIT) ) {
                        alt50=1;
                    }
                    switch (alt50) {
                        case 1 :
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:403:55: LIMIT ! INTEGER
                            {
                            LIMIT204=(Token)match(input,LIMIT,FOLLOW_LIMIT_in_error_clause2233); if (state.failed) return retval;

                            INTEGER205=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_error_clause2236); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            INTEGER205_tree = 
                            (Object)adaptor.create(INTEGER205)
                            ;
                            adaptor.addChild(root_0, INTEGER205_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }


            RIGHT_PAREN206=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_error_clause2244); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "error_clause"


    public static class load_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "load_clause"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:406:1: load_clause : LOAD ^ QUOTEDSTRING ( USING ! func_clause )? ( as_clause )? ;
    public final QueryParser.load_clause_return load_clause() throws RecognitionException {
        QueryParser.load_clause_return retval = new QueryParser.load_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LOAD207=null;
        Token QUOTEDSTRING208=null;
        Token USING209=null;
        QueryParser.func_clause_return func_clause210 =null;

        QueryParser.as_clause_return as_clause211 =null;


        Object LOAD207_tree=null;
        Object QUOTEDSTRING208_tree=null;
        Object USING209_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:406:13: ( LOAD ^ QUOTEDSTRING ( USING ! func_clause )? ( as_clause )? )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:406:15: LOAD ^ QUOTEDSTRING ( USING ! func_clause )? ( as_clause )?
            {
            root_0 = (Object)adaptor.nil();


            LOAD207=(Token)match(input,LOAD,FOLLOW_LOAD_in_load_clause2254); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LOAD207_tree = 
            (Object)adaptor.create(LOAD207)
            ;
            root_0 = (Object)adaptor.becomeRoot(LOAD207_tree, root_0);
            }

            QUOTEDSTRING208=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_load_clause2257); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTEDSTRING208_tree = 
            (Object)adaptor.create(QUOTEDSTRING208)
            ;
            adaptor.addChild(root_0, QUOTEDSTRING208_tree);
            }

            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:406:34: ( USING ! func_clause )?
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==USING) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:406:36: USING ! func_clause
                    {
                    USING209=(Token)match(input,USING,FOLLOW_USING_in_load_clause2261); if (state.failed) return retval;

                    pushFollow(FOLLOW_func_clause_in_load_clause2264);
                    func_clause210=func_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_clause210.getTree());

                    }
                    break;

            }


            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:406:58: ( as_clause )?
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==AS) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:406:58: as_clause
                    {
                    pushFollow(FOLLOW_as_clause_in_load_clause2269);
                    as_clause211=as_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, as_clause211.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "load_clause"


    public static class func_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_clause"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:409:1: func_clause : ( func_name -> ^( FUNC_REF func_name ) | func_name LEFT_PAREN ( func_args )? RIGHT_PAREN -> ^( FUNC func_name ( func_args )? ) );
    public final QueryParser.func_clause_return func_clause() throws RecognitionException {
        QueryParser.func_clause_return retval = new QueryParser.func_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN214=null;
        Token RIGHT_PAREN216=null;
        QueryParser.func_name_return func_name212 =null;

        QueryParser.func_name_return func_name213 =null;

        QueryParser.func_args_return func_args215 =null;


        Object LEFT_PAREN214_tree=null;
        Object RIGHT_PAREN216_tree=null;
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
        RewriteRuleSubtreeStream stream_func_name=new RewriteRuleSubtreeStream(adaptor,"rule func_name");
        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:409:13: ( func_name -> ^( FUNC_REF func_name ) | func_name LEFT_PAREN ( func_args )? RIGHT_PAREN -> ^( FUNC func_name ( func_args )? ) )
            int alt55=2;
            alt55 = dfa55.predict(input);
            switch (alt55) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:409:15: func_name
                    {
                    pushFollow(FOLLOW_func_name_in_func_clause2279);
                    func_name212=func_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_func_name.add(func_name212.getTree());

                    // AST REWRITE
                    // elements: func_name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 410:12: -> ^( FUNC_REF func_name )
                    {
                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:410:15: ^( FUNC_REF func_name )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FUNC_REF, "FUNC_REF")
                        , root_1);

                        adaptor.addChild(root_1, stream_func_name.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:411:15: func_name LEFT_PAREN ( func_args )? RIGHT_PAREN
                    {
                    pushFollow(FOLLOW_func_name_in_func_clause2316);
                    func_name213=func_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_func_name.add(func_name213.getTree());

                    LEFT_PAREN214=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_func_clause2318); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN214);


                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:411:36: ( func_args )?
                    int alt54=2;
                    int LA54_0 = input.LA(1);

                    if ( (LA54_0==MULTILINE_QUOTEDSTRING||LA54_0==QUOTEDSTRING) ) {
                        alt54=1;
                    }
                    switch (alt54) {
                        case 1 :
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:411:36: func_args
                            {
                            pushFollow(FOLLOW_func_args_in_func_clause2320);
                            func_args215=func_args();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_func_args.add(func_args215.getTree());

                            }
                            break;

                    }


                    RIGHT_PAREN216=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_func_clause2323); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN216);


                    // AST REWRITE
                    // elements: func_args, func_name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 412:12: -> ^( FUNC func_name ( func_args )? )
                    {
                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:412:15: ^( FUNC func_name ( func_args )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FUNC, "FUNC")
                        , root_1);

                        adaptor.addChild(root_1, stream_func_name.nextTree());

                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:412:33: ( func_args )?
                        if ( stream_func_args.hasNext() ) {
                            adaptor.addChild(root_1, stream_func_args.nextTree());

                        }
                        stream_func_args.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_clause"


    public static class func_name_without_columns_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_name_without_columns"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:416:1: func_name_without_columns : eid_without_columns ( ( PERIOD | DOLLAR ) eid )* ;
    public final QueryParser.func_name_without_columns_return func_name_without_columns() throws RecognitionException {
        QueryParser.func_name_without_columns_return retval = new QueryParser.func_name_without_columns_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set218=null;
        QueryParser.eid_without_columns_return eid_without_columns217 =null;

        QueryParser.eid_return eid219 =null;


        Object set218_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:416:27: ( eid_without_columns ( ( PERIOD | DOLLAR ) eid )* )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:416:29: eid_without_columns ( ( PERIOD | DOLLAR ) eid )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_eid_without_columns_in_func_name_without_columns2357);
            eid_without_columns217=eid_without_columns();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eid_without_columns217.getTree());

            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:416:49: ( ( PERIOD | DOLLAR ) eid )*
            loop56:
            do {
                int alt56=2;
                int LA56_0 = input.LA(1);

                if ( (LA56_0==DOLLAR||LA56_0==PERIOD) ) {
                    alt56=1;
                }


                switch (alt56) {
            	case 1 :
            	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:416:51: ( PERIOD | DOLLAR ) eid
            	    {
            	    set218=(Token)input.LT(1);

            	    if ( input.LA(1)==DOLLAR||input.LA(1)==PERIOD ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set218)
            	        );
            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_eid_in_func_name_without_columns2371);
            	    eid219=eid();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, eid219.getTree());

            	    }
            	    break;

            	default :
            	    break loop56;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_name_without_columns"


    public static class func_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_name"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:419:1: func_name : eid ( ( PERIOD | DOLLAR ) eid )* ;
    public final QueryParser.func_name_return func_name() throws RecognitionException {
        QueryParser.func_name_return retval = new QueryParser.func_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set221=null;
        QueryParser.eid_return eid220 =null;

        QueryParser.eid_return eid222 =null;


        Object set221_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:419:11: ( eid ( ( PERIOD | DOLLAR ) eid )* )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:419:13: eid ( ( PERIOD | DOLLAR ) eid )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_eid_in_func_name2383);
            eid220=eid();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eid220.getTree());

            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:419:17: ( ( PERIOD | DOLLAR ) eid )*
            loop57:
            do {
                int alt57=2;
                int LA57_0 = input.LA(1);

                if ( (LA57_0==DOLLAR||LA57_0==PERIOD) ) {
                    alt57=1;
                }


                switch (alt57) {
            	case 1 :
            	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:419:19: ( PERIOD | DOLLAR ) eid
            	    {
            	    set221=(Token)input.LT(1);

            	    if ( input.LA(1)==DOLLAR||input.LA(1)==PERIOD ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set221)
            	        );
            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_eid_in_func_name2397);
            	    eid222=eid();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, eid222.getTree());

            	    }
            	    break;

            	default :
            	    break loop57;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_name"


    public static class func_args_string_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_args_string"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:422:1: func_args_string : ( QUOTEDSTRING | MULTILINE_QUOTEDSTRING );
    public final QueryParser.func_args_string_return func_args_string() throws RecognitionException {
        QueryParser.func_args_string_return retval = new QueryParser.func_args_string_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set223=null;

        Object set223_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:422:18: ( QUOTEDSTRING | MULTILINE_QUOTEDSTRING )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:
            {
            root_0 = (Object)adaptor.nil();


            set223=(Token)input.LT(1);

            if ( input.LA(1)==MULTILINE_QUOTEDSTRING||input.LA(1)==QUOTEDSTRING ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set223)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_args_string"


    public static class func_args_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_args"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:425:1: func_args : func_args_string ( COMMA func_args_string )* -> ( func_args_string )+ ;
    public final QueryParser.func_args_return func_args() throws RecognitionException {
        QueryParser.func_args_return retval = new QueryParser.func_args_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA225=null;
        QueryParser.func_args_string_return func_args_string224 =null;

        QueryParser.func_args_string_return func_args_string226 =null;


        Object COMMA225_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_func_args_string=new RewriteRuleSubtreeStream(adaptor,"rule func_args_string");
        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:425:11: ( func_args_string ( COMMA func_args_string )* -> ( func_args_string )+ )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:425:13: func_args_string ( COMMA func_args_string )*
            {
            pushFollow(FOLLOW_func_args_string_in_func_args2422);
            func_args_string224=func_args_string();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_func_args_string.add(func_args_string224.getTree());

            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:425:30: ( COMMA func_args_string )*
            loop58:
            do {
                int alt58=2;
                int LA58_0 = input.LA(1);

                if ( (LA58_0==COMMA) ) {
                    alt58=1;
                }


                switch (alt58) {
            	case 1 :
            	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:425:32: COMMA func_args_string
            	    {
            	    COMMA225=(Token)match(input,COMMA,FOLLOW_COMMA_in_func_args2426); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA225);


            	    pushFollow(FOLLOW_func_args_string_in_func_args2428);
            	    func_args_string226=func_args_string();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_func_args_string.add(func_args_string226.getTree());

            	    }
            	    break;

            	default :
            	    break loop58;
                }
            } while (true);


            // AST REWRITE
            // elements: func_args_string
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 426:10: -> ( func_args_string )+
            {
                if ( !(stream_func_args_string.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_func_args_string.hasNext() ) {
                    adaptor.addChild(root_0, stream_func_args_string.nextTree());

                }
                stream_func_args_string.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_args"


    public static class group_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_clause"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:429:1: group_clause : ( GROUP | COGROUP ) ^ group_item_list ( USING ! QUOTEDSTRING )? ( partition_clause )? ;
    public final QueryParser.group_clause_return group_clause() throws RecognitionException {
        QueryParser.group_clause_return retval = new QueryParser.group_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set227=null;
        Token USING229=null;
        Token QUOTEDSTRING230=null;
        QueryParser.group_item_list_return group_item_list228 =null;

        QueryParser.partition_clause_return partition_clause231 =null;


        Object set227_tree=null;
        Object USING229_tree=null;
        Object QUOTEDSTRING230_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:429:14: ( ( GROUP | COGROUP ) ^ group_item_list ( USING ! QUOTEDSTRING )? ( partition_clause )? )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:429:16: ( GROUP | COGROUP ) ^ group_item_list ( USING ! QUOTEDSTRING )? ( partition_clause )?
            {
            root_0 = (Object)adaptor.nil();


            set227=(Token)input.LT(1);

            set227=(Token)input.LT(1);

            if ( input.LA(1)==COGROUP||input.LA(1)==GROUP ) {
                input.consume();
                if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(set227)
                , root_0);
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            pushFollow(FOLLOW_group_item_list_in_group_clause2465);
            group_item_list228=group_item_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, group_item_list228.getTree());

            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:429:53: ( USING ! QUOTEDSTRING )?
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==USING) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:429:55: USING ! QUOTEDSTRING
                    {
                    USING229=(Token)match(input,USING,FOLLOW_USING_in_group_clause2469); if (state.failed) return retval;

                    QUOTEDSTRING230=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_group_clause2472); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUOTEDSTRING230_tree = 
                    (Object)adaptor.create(QUOTEDSTRING230)
                    ;
                    adaptor.addChild(root_0, QUOTEDSTRING230_tree);
                    }

                    }
                    break;

            }


            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:429:78: ( partition_clause )?
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==PARTITION) ) {
                alt60=1;
            }
            switch (alt60) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:429:78: partition_clause
                    {
                    pushFollow(FOLLOW_partition_clause_in_group_clause2477);
                    partition_clause231=partition_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_clause231.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_clause"


    public static class group_item_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_item_list"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:432:1: group_item_list : group_item ( COMMA group_item )* -> ( group_item )+ ;
    public final QueryParser.group_item_list_return group_item_list() throws RecognitionException {
        QueryParser.group_item_list_return retval = new QueryParser.group_item_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA233=null;
        QueryParser.group_item_return group_item232 =null;

        QueryParser.group_item_return group_item234 =null;


        Object COMMA233_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_group_item=new RewriteRuleSubtreeStream(adaptor,"rule group_item");
        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:432:17: ( group_item ( COMMA group_item )* -> ( group_item )+ )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:432:19: group_item ( COMMA group_item )*
            {
            pushFollow(FOLLOW_group_item_in_group_item_list2487);
            group_item232=group_item();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_group_item.add(group_item232.getTree());

            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:432:30: ( COMMA group_item )*
            loop61:
            do {
                int alt61=2;
                int LA61_0 = input.LA(1);

                if ( (LA61_0==COMMA) ) {
                    alt61=1;
                }


                switch (alt61) {
            	case 1 :
            	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:432:32: COMMA group_item
            	    {
            	    COMMA233=(Token)match(input,COMMA,FOLLOW_COMMA_in_group_item_list2491); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA233);


            	    pushFollow(FOLLOW_group_item_in_group_item_list2493);
            	    group_item234=group_item();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_group_item.add(group_item234.getTree());

            	    }
            	    break;

            	default :
            	    break loop61;
                }
            } while (true);


            // AST REWRITE
            // elements: group_item
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 433:16: -> ( group_item )+
            {
                if ( !(stream_group_item.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_group_item.hasNext() ) {
                    adaptor.addChild(root_0, stream_group_item.nextTree());

                }
                stream_group_item.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_item_list"


    public static class group_item_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_item"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:436:1: group_item : rel ( join_group_by_clause | ALL | ANY ) ( INNER | OUTER )? ;
    public final QueryParser.group_item_return group_item() throws RecognitionException {
        QueryParser.group_item_return retval = new QueryParser.group_item_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ALL237=null;
        Token ANY238=null;
        Token set239=null;
        QueryParser.rel_return rel235 =null;

        QueryParser.join_group_by_clause_return join_group_by_clause236 =null;


        Object ALL237_tree=null;
        Object ANY238_tree=null;
        Object set239_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:436:12: ( rel ( join_group_by_clause | ALL | ANY ) ( INNER | OUTER )? )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:436:14: rel ( join_group_by_clause | ALL | ANY ) ( INNER | OUTER )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_rel_in_group_item2525);
            rel235=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel235.getTree());

            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:436:18: ( join_group_by_clause | ALL | ANY )
            int alt62=3;
            switch ( input.LA(1) ) {
            case BY:
                {
                alt62=1;
                }
                break;
            case ALL:
                {
                alt62=2;
                }
                break;
            case ANY:
                {
                alt62=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 62, 0, input);

                throw nvae;

            }

            switch (alt62) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:436:20: join_group_by_clause
                    {
                    pushFollow(FOLLOW_join_group_by_clause_in_group_item2529);
                    join_group_by_clause236=join_group_by_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, join_group_by_clause236.getTree());

                    }
                    break;
                case 2 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:436:43: ALL
                    {
                    ALL237=(Token)match(input,ALL,FOLLOW_ALL_in_group_item2533); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALL237_tree = 
                    (Object)adaptor.create(ALL237)
                    ;
                    adaptor.addChild(root_0, ALL237_tree);
                    }

                    }
                    break;
                case 3 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:436:49: ANY
                    {
                    ANY238=(Token)match(input,ANY,FOLLOW_ANY_in_group_item2537); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ANY238_tree = 
                    (Object)adaptor.create(ANY238)
                    ;
                    adaptor.addChild(root_0, ANY238_tree);
                    }

                    }
                    break;

            }


            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:436:55: ( INNER | OUTER )?
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==INNER||LA63_0==OUTER) ) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:
                    {
                    set239=(Token)input.LT(1);

                    if ( input.LA(1)==INNER||input.LA(1)==OUTER ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set239)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_item"


    public static class identifier_plus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "identifier_plus"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:441:1: identifier_plus : ( IDENTIFIER | reserved_identifier_whitelist -> IDENTIFIER[$reserved_identifier_whitelist.text] );
    public final QueryParser.identifier_plus_return identifier_plus() throws RecognitionException {
        QueryParser.identifier_plus_return retval = new QueryParser.identifier_plus_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token IDENTIFIER240=null;
        QueryParser.reserved_identifier_whitelist_return reserved_identifier_whitelist241 =null;


        Object IDENTIFIER240_tree=null;
        RewriteRuleSubtreeStream stream_reserved_identifier_whitelist=new RewriteRuleSubtreeStream(adaptor,"rule reserved_identifier_whitelist");
        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:441:17: ( IDENTIFIER | reserved_identifier_whitelist -> IDENTIFIER[$reserved_identifier_whitelist.text] )
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==IDENTIFIER) ) {
                alt64=1;
            }
            else if ( (LA64_0==CUBE||(LA64_0 >= ELSE && LA64_0 <= END)||LA64_0==IN||LA64_0==RANK||LA64_0==THEN||LA64_0==WHEN) ) {
                alt64=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 64, 0, input);

                throw nvae;

            }
            switch (alt64) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:441:19: IDENTIFIER
                    {
                    root_0 = (Object)adaptor.nil();


                    IDENTIFIER240=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_identifier_plus2561); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENTIFIER240_tree = 
                    (Object)adaptor.create(IDENTIFIER240)
                    ;
                    adaptor.addChild(root_0, IDENTIFIER240_tree);
                    }

                    }
                    break;
                case 2 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:441:32: reserved_identifier_whitelist
                    {
                    pushFollow(FOLLOW_reserved_identifier_whitelist_in_identifier_plus2565);
                    reserved_identifier_whitelist241=reserved_identifier_whitelist();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_reserved_identifier_whitelist.add(reserved_identifier_whitelist241.getTree());

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 441:62: -> IDENTIFIER[$reserved_identifier_whitelist.text]
                    {
                        adaptor.addChild(root_0, 
                        (Object)adaptor.create(IDENTIFIER, (reserved_identifier_whitelist241!=null?input.toString(reserved_identifier_whitelist241.start,reserved_identifier_whitelist241.stop):null))
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "identifier_plus"


    public static class explicit_field_def_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "explicit_field_def"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:444:1: explicit_field_def : ( identifier_plus ( COLON type )? -> ^( FIELD_DEF identifier_plus ( type )? ) | explicit_type -> ^( FIELD_DEF_WITHOUT_IDENTIFIER explicit_type ) );
    public final QueryParser.explicit_field_def_return explicit_field_def() throws RecognitionException {
        QueryParser.explicit_field_def_return retval = new QueryParser.explicit_field_def_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COLON243=null;
        QueryParser.identifier_plus_return identifier_plus242 =null;

        QueryParser.type_return type244 =null;

        QueryParser.explicit_type_return explicit_type245 =null;


        Object COLON243_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleSubtreeStream stream_identifier_plus=new RewriteRuleSubtreeStream(adaptor,"rule identifier_plus");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_explicit_type=new RewriteRuleSubtreeStream(adaptor,"rule explicit_type");
        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:444:20: ( identifier_plus ( COLON type )? -> ^( FIELD_DEF identifier_plus ( type )? ) | explicit_type -> ^( FIELD_DEF_WITHOUT_IDENTIFIER explicit_type ) )
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==CUBE||(LA66_0 >= ELSE && LA66_0 <= END)||LA66_0==IDENTIFIER||LA66_0==IN||LA66_0==RANK||LA66_0==THEN||LA66_0==WHEN) ) {
                alt66=1;
            }
            else if ( ((LA66_0 >= BAG && LA66_0 <= BIGDECIMAL)||LA66_0==BIGINTEGER||LA66_0==BOOLEAN||LA66_0==BYTEARRAY||LA66_0==CHARARRAY||LA66_0==DATETIME||LA66_0==DOUBLE||LA66_0==FLOAT||LA66_0==INT||LA66_0==LONG||LA66_0==MAP||LA66_0==TUPLE) ) {
                alt66=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 66, 0, input);

                throw nvae;

            }
            switch (alt66) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:444:22: identifier_plus ( COLON type )?
                    {
                    pushFollow(FOLLOW_identifier_plus_in_explicit_field_def2579);
                    identifier_plus242=identifier_plus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus242.getTree());

                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:444:38: ( COLON type )?
                    int alt65=2;
                    int LA65_0 = input.LA(1);

                    if ( (LA65_0==COLON) ) {
                        alt65=1;
                    }
                    switch (alt65) {
                        case 1 :
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:444:40: COLON type
                            {
                            COLON243=(Token)match(input,COLON,FOLLOW_COLON_in_explicit_field_def2583); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(COLON243);


                            pushFollow(FOLLOW_type_in_explicit_field_def2585);
                            type244=type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_type.add(type244.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: identifier_plus, type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 444:54: -> ^( FIELD_DEF identifier_plus ( type )? )
                    {
                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:444:57: ^( FIELD_DEF identifier_plus ( type )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FIELD_DEF, "FIELD_DEF")
                        , root_1);

                        adaptor.addChild(root_1, stream_identifier_plus.nextTree());

                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:444:86: ( type )?
                        if ( stream_type.hasNext() ) {
                            adaptor.addChild(root_1, stream_type.nextTree());

                        }
                        stream_type.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:445:22: explicit_type
                    {
                    pushFollow(FOLLOW_explicit_type_in_explicit_field_def2624);
                    explicit_type245=explicit_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_explicit_type.add(explicit_type245.getTree());

                    // AST REWRITE
                    // elements: explicit_type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 445:36: -> ^( FIELD_DEF_WITHOUT_IDENTIFIER explicit_type )
                    {
                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:445:39: ^( FIELD_DEF_WITHOUT_IDENTIFIER explicit_type )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FIELD_DEF_WITHOUT_IDENTIFIER, "FIELD_DEF_WITHOUT_IDENTIFIER")
                        , root_1);

                        adaptor.addChild(root_1, stream_explicit_type.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "explicit_field_def"


    public static class field_def_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_def"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:448:1: field_def : ( explicit_field_def | implicit_type -> ^( FIELD_DEF_WITHOUT_IDENTIFIER implicit_type ) );
    public final QueryParser.field_def_return field_def() throws RecognitionException {
        QueryParser.field_def_return retval = new QueryParser.field_def_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.explicit_field_def_return explicit_field_def246 =null;

        QueryParser.implicit_type_return implicit_type247 =null;


        RewriteRuleSubtreeStream stream_implicit_type=new RewriteRuleSubtreeStream(adaptor,"rule implicit_type");
        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:448:11: ( explicit_field_def | implicit_type -> ^( FIELD_DEF_WITHOUT_IDENTIFIER implicit_type ) )
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( ((LA67_0 >= BAG && LA67_0 <= BIGDECIMAL)||LA67_0==BIGINTEGER||LA67_0==BOOLEAN||LA67_0==BYTEARRAY||LA67_0==CHARARRAY||(LA67_0 >= CUBE && LA67_0 <= DATETIME)||LA67_0==DOUBLE||(LA67_0 >= ELSE && LA67_0 <= END)||LA67_0==FLOAT||LA67_0==IDENTIFIER||LA67_0==IN||LA67_0==INT||LA67_0==LONG||LA67_0==MAP||LA67_0==RANK||LA67_0==THEN||LA67_0==TUPLE||LA67_0==WHEN) ) {
                alt67=1;
            }
            else if ( ((LA67_0 >= LEFT_BRACKET && LA67_0 <= LEFT_PAREN)) ) {
                alt67=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 67, 0, input);

                throw nvae;

            }
            switch (alt67) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:448:13: explicit_field_def
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_explicit_field_def_in_field_def2643);
                    explicit_field_def246=explicit_field_def();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, explicit_field_def246.getTree());

                    }
                    break;
                case 2 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:449:13: implicit_type
                    {
                    pushFollow(FOLLOW_implicit_type_in_field_def2657);
                    implicit_type247=implicit_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_implicit_type.add(implicit_type247.getTree());

                    // AST REWRITE
                    // elements: implicit_type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 449:27: -> ^( FIELD_DEF_WITHOUT_IDENTIFIER implicit_type )
                    {
                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:449:30: ^( FIELD_DEF_WITHOUT_IDENTIFIER implicit_type )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FIELD_DEF_WITHOUT_IDENTIFIER, "FIELD_DEF_WITHOUT_IDENTIFIER")
                        , root_1);

                        adaptor.addChild(root_1, stream_implicit_type.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_def"


    public static class field_def_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_def_list"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:452:1: field_def_list : field_def ( COMMA ! field_def )* ;
    public final QueryParser.field_def_list_return field_def_list() throws RecognitionException {
        QueryParser.field_def_list_return retval = new QueryParser.field_def_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA249=null;
        QueryParser.field_def_return field_def248 =null;

        QueryParser.field_def_return field_def250 =null;


        Object COMMA249_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:452:16: ( field_def ( COMMA ! field_def )* )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:452:18: field_def ( COMMA ! field_def )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_def_in_field_def_list2676);
            field_def248=field_def();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, field_def248.getTree());

            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:452:28: ( COMMA ! field_def )*
            loop68:
            do {
                int alt68=2;
                int LA68_0 = input.LA(1);

                if ( (LA68_0==COMMA) ) {
                    alt68=1;
                }


                switch (alt68) {
            	case 1 :
            	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:452:30: COMMA ! field_def
            	    {
            	    COMMA249=(Token)match(input,COMMA,FOLLOW_COMMA_in_field_def_list2680); if (state.failed) return retval;

            	    pushFollow(FOLLOW_field_def_in_field_def_list2683);
            	    field_def250=field_def();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_def250.getTree());

            	    }
            	    break;

            	default :
            	    break loop68;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_def_list"


    public static class as_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "as_clause"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:458:1: as_clause : AS ^ ( explicit_field_def | ( LEFT_PAREN ! ( field_def_list )? RIGHT_PAREN !) ) ;
    public final QueryParser.as_clause_return as_clause() throws RecognitionException {
        QueryParser.as_clause_return retval = new QueryParser.as_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token AS251=null;
        Token LEFT_PAREN253=null;
        Token RIGHT_PAREN255=null;
        QueryParser.explicit_field_def_return explicit_field_def252 =null;

        QueryParser.field_def_list_return field_def_list254 =null;


        Object AS251_tree=null;
        Object LEFT_PAREN253_tree=null;
        Object RIGHT_PAREN255_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:458:11: ( AS ^ ( explicit_field_def | ( LEFT_PAREN ! ( field_def_list )? RIGHT_PAREN !) ) )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:458:13: AS ^ ( explicit_field_def | ( LEFT_PAREN ! ( field_def_list )? RIGHT_PAREN !) )
            {
            root_0 = (Object)adaptor.nil();


            AS251=(Token)match(input,AS,FOLLOW_AS_in_as_clause2698); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            AS251_tree = 
            (Object)adaptor.create(AS251)
            ;
            root_0 = (Object)adaptor.becomeRoot(AS251_tree, root_0);
            }

            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:458:17: ( explicit_field_def | ( LEFT_PAREN ! ( field_def_list )? RIGHT_PAREN !) )
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( ((LA70_0 >= BAG && LA70_0 <= BIGDECIMAL)||LA70_0==BIGINTEGER||LA70_0==BOOLEAN||LA70_0==BYTEARRAY||LA70_0==CHARARRAY||(LA70_0 >= CUBE && LA70_0 <= DATETIME)||LA70_0==DOUBLE||(LA70_0 >= ELSE && LA70_0 <= END)||LA70_0==FLOAT||LA70_0==IDENTIFIER||LA70_0==IN||LA70_0==INT||LA70_0==LONG||LA70_0==MAP||LA70_0==RANK||LA70_0==THEN||LA70_0==TUPLE||LA70_0==WHEN) ) {
                alt70=1;
            }
            else if ( (LA70_0==LEFT_PAREN) ) {
                alt70=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 70, 0, input);

                throw nvae;

            }
            switch (alt70) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:458:19: explicit_field_def
                    {
                    pushFollow(FOLLOW_explicit_field_def_in_as_clause2703);
                    explicit_field_def252=explicit_field_def();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, explicit_field_def252.getTree());

                    }
                    break;
                case 2 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:458:40: ( LEFT_PAREN ! ( field_def_list )? RIGHT_PAREN !)
                    {
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:458:40: ( LEFT_PAREN ! ( field_def_list )? RIGHT_PAREN !)
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:458:42: LEFT_PAREN ! ( field_def_list )? RIGHT_PAREN !
                    {
                    LEFT_PAREN253=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_as_clause2709); if (state.failed) return retval;

                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:458:54: ( field_def_list )?
                    int alt69=2;
                    int LA69_0 = input.LA(1);

                    if ( ((LA69_0 >= BAG && LA69_0 <= BIGDECIMAL)||LA69_0==BIGINTEGER||LA69_0==BOOLEAN||LA69_0==BYTEARRAY||LA69_0==CHARARRAY||(LA69_0 >= CUBE && LA69_0 <= DATETIME)||LA69_0==DOUBLE||(LA69_0 >= ELSE && LA69_0 <= END)||LA69_0==FLOAT||LA69_0==IDENTIFIER||LA69_0==IN||LA69_0==INT||(LA69_0 >= LEFT_BRACKET && LA69_0 <= LEFT_PAREN)||LA69_0==LONG||LA69_0==MAP||LA69_0==RANK||LA69_0==THEN||LA69_0==TUPLE||LA69_0==WHEN) ) {
                        alt69=1;
                    }
                    switch (alt69) {
                        case 1 :
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:458:54: field_def_list
                            {
                            pushFollow(FOLLOW_field_def_list_in_as_clause2712);
                            field_def_list254=field_def_list();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, field_def_list254.getTree());

                            }
                            break;

                    }


                    RIGHT_PAREN255=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_as_clause2715); if (state.failed) return retval;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "as_clause"


    public static class stream_cmd_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stream_cmd_list"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:463:1: stream_cmd_list : stream_cmd ( COMMA stream_cmd )* -> ( stream_cmd )+ ;
    public final QueryParser.stream_cmd_list_return stream_cmd_list() throws RecognitionException {
        QueryParser.stream_cmd_list_return retval = new QueryParser.stream_cmd_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA257=null;
        QueryParser.stream_cmd_return stream_cmd256 =null;

        QueryParser.stream_cmd_return stream_cmd258 =null;


        Object COMMA257_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_stream_cmd=new RewriteRuleSubtreeStream(adaptor,"rule stream_cmd");
        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:463:17: ( stream_cmd ( COMMA stream_cmd )* -> ( stream_cmd )+ )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:463:19: stream_cmd ( COMMA stream_cmd )*
            {
            pushFollow(FOLLOW_stream_cmd_in_stream_cmd_list2731);
            stream_cmd256=stream_cmd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stream_cmd.add(stream_cmd256.getTree());

            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:463:30: ( COMMA stream_cmd )*
            loop71:
            do {
                int alt71=2;
                int LA71_0 = input.LA(1);

                if ( (LA71_0==COMMA) ) {
                    alt71=1;
                }


                switch (alt71) {
            	case 1 :
            	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:463:32: COMMA stream_cmd
            	    {
            	    COMMA257=(Token)match(input,COMMA,FOLLOW_COMMA_in_stream_cmd_list2735); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA257);


            	    pushFollow(FOLLOW_stream_cmd_in_stream_cmd_list2737);
            	    stream_cmd258=stream_cmd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_stream_cmd.add(stream_cmd258.getTree());

            	    }
            	    break;

            	default :
            	    break loop71;
                }
            } while (true);


            // AST REWRITE
            // elements: stream_cmd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 463:52: -> ( stream_cmd )+
            {
                if ( !(stream_stream_cmd.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_stream_cmd.hasNext() ) {
                    adaptor.addChild(root_0, stream_stream_cmd.nextTree());

                }
                stream_stream_cmd.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stream_cmd_list"


    public static class stream_cmd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stream_cmd"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:466:1: stream_cmd : ( STDIN | STDOUT | QUOTEDSTRING ) ^ ( USING ! func_clause )? ;
    public final QueryParser.stream_cmd_return stream_cmd() throws RecognitionException {
        QueryParser.stream_cmd_return retval = new QueryParser.stream_cmd_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set259=null;
        Token USING260=null;
        QueryParser.func_clause_return func_clause261 =null;


        Object set259_tree=null;
        Object USING260_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:466:12: ( ( STDIN | STDOUT | QUOTEDSTRING ) ^ ( USING ! func_clause )? )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:466:14: ( STDIN | STDOUT | QUOTEDSTRING ) ^ ( USING ! func_clause )?
            {
            root_0 = (Object)adaptor.nil();


            set259=(Token)input.LT(1);

            set259=(Token)input.LT(1);

            if ( input.LA(1)==QUOTEDSTRING||(input.LA(1) >= STDIN && input.LA(1) <= STDOUT) ) {
                input.consume();
                if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(set259)
                , root_0);
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:466:49: ( USING ! func_clause )?
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==USING) ) {
                alt72=1;
            }
            switch (alt72) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:466:51: USING ! func_clause
                    {
                    USING260=(Token)match(input,USING,FOLLOW_USING_in_stream_cmd2771); if (state.failed) return retval;

                    pushFollow(FOLLOW_func_clause_in_stream_cmd2774);
                    func_clause261=func_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_clause261.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stream_cmd"


    public static class cmd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cmd"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:469:1: cmd : EXECCOMMAND ^ ( ship_clause | cache_clause | input_clause | output_clause | error_clause )* ;
    public final QueryParser.cmd_return cmd() throws RecognitionException {
        QueryParser.cmd_return retval = new QueryParser.cmd_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EXECCOMMAND262=null;
        QueryParser.ship_clause_return ship_clause263 =null;

        QueryParser.cache_clause_return cache_clause264 =null;

        QueryParser.input_clause_return input_clause265 =null;

        QueryParser.output_clause_return output_clause266 =null;

        QueryParser.error_clause_return error_clause267 =null;


        Object EXECCOMMAND262_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:469:5: ( EXECCOMMAND ^ ( ship_clause | cache_clause | input_clause | output_clause | error_clause )* )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:469:7: EXECCOMMAND ^ ( ship_clause | cache_clause | input_clause | output_clause | error_clause )*
            {
            root_0 = (Object)adaptor.nil();


            EXECCOMMAND262=(Token)match(input,EXECCOMMAND,FOLLOW_EXECCOMMAND_in_cmd2786); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EXECCOMMAND262_tree = 
            (Object)adaptor.create(EXECCOMMAND262)
            ;
            root_0 = (Object)adaptor.becomeRoot(EXECCOMMAND262_tree, root_0);
            }

            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:469:20: ( ship_clause | cache_clause | input_clause | output_clause | error_clause )*
            loop73:
            do {
                int alt73=6;
                switch ( input.LA(1) ) {
                case SHIP:
                    {
                    alt73=1;
                    }
                    break;
                case CACHE:
                    {
                    alt73=2;
                    }
                    break;
                case INPUT:
                    {
                    alt73=3;
                    }
                    break;
                case OUTPUT:
                    {
                    alt73=4;
                    }
                    break;
                case STDERROR:
                    {
                    alt73=5;
                    }
                    break;

                }

                switch (alt73) {
            	case 1 :
            	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:469:22: ship_clause
            	    {
            	    pushFollow(FOLLOW_ship_clause_in_cmd2791);
            	    ship_clause263=ship_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ship_clause263.getTree());

            	    }
            	    break;
            	case 2 :
            	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:469:36: cache_clause
            	    {
            	    pushFollow(FOLLOW_cache_clause_in_cmd2795);
            	    cache_clause264=cache_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cache_clause264.getTree());

            	    }
            	    break;
            	case 3 :
            	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:469:51: input_clause
            	    {
            	    pushFollow(FOLLOW_input_clause_in_cmd2799);
            	    input_clause265=input_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, input_clause265.getTree());

            	    }
            	    break;
            	case 4 :
            	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:469:66: output_clause
            	    {
            	    pushFollow(FOLLOW_output_clause_in_cmd2803);
            	    output_clause266=output_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, output_clause266.getTree());

            	    }
            	    break;
            	case 5 :
            	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:469:82: error_clause
            	    {
            	    pushFollow(FOLLOW_error_clause_in_cmd2807);
            	    error_clause267=error_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, error_clause267.getTree());

            	    }
            	    break;

            	default :
            	    break loop73;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cmd"


    public static class rel_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:472:1: rel : ( identifier_plus | previous_rel | nested_op_clause );
    public final QueryParser.rel_return rel() throws RecognitionException {
        QueryParser.rel_return retval = new QueryParser.rel_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.identifier_plus_return identifier_plus268 =null;

        QueryParser.previous_rel_return previous_rel269 =null;

        QueryParser.nested_op_clause_return nested_op_clause270 =null;



        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:472:5: ( identifier_plus | previous_rel | nested_op_clause )
            int alt74=3;
            switch ( input.LA(1) ) {
            case CUBE:
            case ELSE:
            case END:
            case IDENTIFIER:
            case IN:
            case RANK:
            case THEN:
            case WHEN:
                {
                alt74=1;
                }
                break;
            case ARROBA:
                {
                alt74=2;
                }
                break;
            case LEFT_PAREN:
                {
                alt74=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 74, 0, input);

                throw nvae;

            }

            switch (alt74) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:472:7: identifier_plus
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_identifier_plus_in_rel2819);
                    identifier_plus268=identifier_plus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier_plus268.getTree());

                    }
                    break;
                case 2 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:472:25: previous_rel
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_previous_rel_in_rel2823);
                    previous_rel269=previous_rel();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, previous_rel269.getTree());

                    }
                    break;
                case 3 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:472:40: nested_op_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_nested_op_clause_in_rel2827);
                    nested_op_clause270=nested_op_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_op_clause270.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel"


    public static class previous_rel_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "previous_rel"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:475:1: previous_rel : ARROBA ;
    public final QueryParser.previous_rel_return previous_rel() throws RecognitionException {
        QueryParser.previous_rel_return retval = new QueryParser.previous_rel_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ARROBA271=null;

        Object ARROBA271_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:475:14: ( ARROBA )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:475:16: ARROBA
            {
            root_0 = (Object)adaptor.nil();


            ARROBA271=(Token)match(input,ARROBA,FOLLOW_ARROBA_in_previous_rel2836); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ARROBA271_tree = 
            (Object)adaptor.create(ARROBA271)
            ;
            adaptor.addChild(root_0, ARROBA271_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "previous_rel"


    public static class store_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "store_clause"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:478:1: store_clause : STORE ^ rel INTO ! QUOTEDSTRING ( USING ! func_clause )? ;
    public final QueryParser.store_clause_return store_clause() throws RecognitionException {
        QueryParser.store_clause_return retval = new QueryParser.store_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STORE272=null;
        Token INTO274=null;
        Token QUOTEDSTRING275=null;
        Token USING276=null;
        QueryParser.rel_return rel273 =null;

        QueryParser.func_clause_return func_clause277 =null;


        Object STORE272_tree=null;
        Object INTO274_tree=null;
        Object QUOTEDSTRING275_tree=null;
        Object USING276_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:478:14: ( STORE ^ rel INTO ! QUOTEDSTRING ( USING ! func_clause )? )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:478:16: STORE ^ rel INTO ! QUOTEDSTRING ( USING ! func_clause )?
            {
            root_0 = (Object)adaptor.nil();


            STORE272=(Token)match(input,STORE,FOLLOW_STORE_in_store_clause2845); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STORE272_tree = 
            (Object)adaptor.create(STORE272)
            ;
            root_0 = (Object)adaptor.becomeRoot(STORE272_tree, root_0);
            }

            pushFollow(FOLLOW_rel_in_store_clause2848);
            rel273=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel273.getTree());

            INTO274=(Token)match(input,INTO,FOLLOW_INTO_in_store_clause2850); if (state.failed) return retval;

            QUOTEDSTRING275=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_store_clause2853); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTEDSTRING275_tree = 
            (Object)adaptor.create(QUOTEDSTRING275)
            ;
            adaptor.addChild(root_0, QUOTEDSTRING275_tree);
            }

            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:478:46: ( USING ! func_clause )?
            int alt75=2;
            int LA75_0 = input.LA(1);

            if ( (LA75_0==USING) ) {
                alt75=1;
            }
            switch (alt75) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:478:48: USING ! func_clause
                    {
                    USING276=(Token)match(input,USING,FOLLOW_USING_in_store_clause2857); if (state.failed) return retval;

                    pushFollow(FOLLOW_func_clause_in_store_clause2860);
                    func_clause277=func_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_clause277.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "store_clause"


    public static class assert_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "assert_clause"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:481:1: assert_clause : ASSERT ^ rel BY ! cond ( COMMA ! QUOTEDSTRING )? ;
    public final QueryParser.assert_clause_return assert_clause() throws RecognitionException {
        QueryParser.assert_clause_return retval = new QueryParser.assert_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASSERT278=null;
        Token BY280=null;
        Token COMMA282=null;
        Token QUOTEDSTRING283=null;
        QueryParser.rel_return rel279 =null;

        QueryParser.cond_return cond281 =null;


        Object ASSERT278_tree=null;
        Object BY280_tree=null;
        Object COMMA282_tree=null;
        Object QUOTEDSTRING283_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:481:15: ( ASSERT ^ rel BY ! cond ( COMMA ! QUOTEDSTRING )? )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:481:17: ASSERT ^ rel BY ! cond ( COMMA ! QUOTEDSTRING )?
            {
            root_0 = (Object)adaptor.nil();


            ASSERT278=(Token)match(input,ASSERT,FOLLOW_ASSERT_in_assert_clause2872); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ASSERT278_tree = 
            (Object)adaptor.create(ASSERT278)
            ;
            root_0 = (Object)adaptor.becomeRoot(ASSERT278_tree, root_0);
            }

            pushFollow(FOLLOW_rel_in_assert_clause2875);
            rel279=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel279.getTree());

            BY280=(Token)match(input,BY,FOLLOW_BY_in_assert_clause2877); if (state.failed) return retval;

            pushFollow(FOLLOW_cond_in_assert_clause2880);
            cond281=cond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cond281.getTree());

            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:481:38: ( COMMA ! QUOTEDSTRING )?
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==COMMA) ) {
                alt76=1;
            }
            switch (alt76) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:481:40: COMMA ! QUOTEDSTRING
                    {
                    COMMA282=(Token)match(input,COMMA,FOLLOW_COMMA_in_assert_clause2884); if (state.failed) return retval;

                    QUOTEDSTRING283=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_assert_clause2887); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUOTEDSTRING283_tree = 
                    (Object)adaptor.create(QUOTEDSTRING283)
                    ;
                    adaptor.addChild(root_0, QUOTEDSTRING283_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "assert_clause"


    public static class filter_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "filter_clause"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:484:1: filter_clause : FILTER ^ rel BY ! cond ;
    public final QueryParser.filter_clause_return filter_clause() throws RecognitionException {
        QueryParser.filter_clause_return retval = new QueryParser.filter_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token FILTER284=null;
        Token BY286=null;
        QueryParser.rel_return rel285 =null;

        QueryParser.cond_return cond287 =null;


        Object FILTER284_tree=null;
        Object BY286_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:484:15: ( FILTER ^ rel BY ! cond )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:484:17: FILTER ^ rel BY ! cond
            {
            root_0 = (Object)adaptor.nil();


            FILTER284=(Token)match(input,FILTER,FOLLOW_FILTER_in_filter_clause2899); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FILTER284_tree = 
            (Object)adaptor.create(FILTER284)
            ;
            root_0 = (Object)adaptor.becomeRoot(FILTER284_tree, root_0);
            }

            pushFollow(FOLLOW_rel_in_filter_clause2902);
            rel285=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel285.getTree());

            BY286=(Token)match(input,BY,FOLLOW_BY_in_filter_clause2904); if (state.failed) return retval;

            pushFollow(FOLLOW_cond_in_filter_clause2907);
            cond287=cond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cond287.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "filter_clause"


    public static class stream_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stream_clause"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:487:1: stream_clause : STREAM ^ rel THROUGH ! ( EXECCOMMAND | identifier_plus ) ( as_clause )? ;
    public final QueryParser.stream_clause_return stream_clause() throws RecognitionException {
        QueryParser.stream_clause_return retval = new QueryParser.stream_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STREAM288=null;
        Token THROUGH290=null;
        Token EXECCOMMAND291=null;
        QueryParser.rel_return rel289 =null;

        QueryParser.identifier_plus_return identifier_plus292 =null;

        QueryParser.as_clause_return as_clause293 =null;


        Object STREAM288_tree=null;
        Object THROUGH290_tree=null;
        Object EXECCOMMAND291_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:487:15: ( STREAM ^ rel THROUGH ! ( EXECCOMMAND | identifier_plus ) ( as_clause )? )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:487:17: STREAM ^ rel THROUGH ! ( EXECCOMMAND | identifier_plus ) ( as_clause )?
            {
            root_0 = (Object)adaptor.nil();


            STREAM288=(Token)match(input,STREAM,FOLLOW_STREAM_in_stream_clause2916); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STREAM288_tree = 
            (Object)adaptor.create(STREAM288)
            ;
            root_0 = (Object)adaptor.becomeRoot(STREAM288_tree, root_0);
            }

            pushFollow(FOLLOW_rel_in_stream_clause2919);
            rel289=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel289.getTree());

            THROUGH290=(Token)match(input,THROUGH,FOLLOW_THROUGH_in_stream_clause2921); if (state.failed) return retval;

            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:487:38: ( EXECCOMMAND | identifier_plus )
            int alt77=2;
            int LA77_0 = input.LA(1);

            if ( (LA77_0==EXECCOMMAND) ) {
                alt77=1;
            }
            else if ( (LA77_0==CUBE||(LA77_0 >= ELSE && LA77_0 <= END)||LA77_0==IDENTIFIER||LA77_0==IN||LA77_0==RANK||LA77_0==THEN||LA77_0==WHEN) ) {
                alt77=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 77, 0, input);

                throw nvae;

            }
            switch (alt77) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:487:40: EXECCOMMAND
                    {
                    EXECCOMMAND291=(Token)match(input,EXECCOMMAND,FOLLOW_EXECCOMMAND_in_stream_clause2926); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXECCOMMAND291_tree = 
                    (Object)adaptor.create(EXECCOMMAND291)
                    ;
                    adaptor.addChild(root_0, EXECCOMMAND291_tree);
                    }

                    }
                    break;
                case 2 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:487:54: identifier_plus
                    {
                    pushFollow(FOLLOW_identifier_plus_in_stream_clause2930);
                    identifier_plus292=identifier_plus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier_plus292.getTree());

                    }
                    break;

            }


            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:487:72: ( as_clause )?
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==AS) ) {
                alt78=1;
            }
            switch (alt78) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:487:72: as_clause
                    {
                    pushFollow(FOLLOW_as_clause_in_stream_clause2934);
                    as_clause293=as_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, as_clause293.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stream_clause"


    public static class mr_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "mr_clause"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:490:1: mr_clause : MAPREDUCE ^ QUOTEDSTRING ( LEFT_PAREN ! path_list RIGHT_PAREN !)? store_clause load_clause ( EXECCOMMAND )? ;
    public final QueryParser.mr_clause_return mr_clause() throws RecognitionException {
        QueryParser.mr_clause_return retval = new QueryParser.mr_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token MAPREDUCE294=null;
        Token QUOTEDSTRING295=null;
        Token LEFT_PAREN296=null;
        Token RIGHT_PAREN298=null;
        Token EXECCOMMAND301=null;
        QueryParser.path_list_return path_list297 =null;

        QueryParser.store_clause_return store_clause299 =null;

        QueryParser.load_clause_return load_clause300 =null;


        Object MAPREDUCE294_tree=null;
        Object QUOTEDSTRING295_tree=null;
        Object LEFT_PAREN296_tree=null;
        Object RIGHT_PAREN298_tree=null;
        Object EXECCOMMAND301_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:490:11: ( MAPREDUCE ^ QUOTEDSTRING ( LEFT_PAREN ! path_list RIGHT_PAREN !)? store_clause load_clause ( EXECCOMMAND )? )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:490:13: MAPREDUCE ^ QUOTEDSTRING ( LEFT_PAREN ! path_list RIGHT_PAREN !)? store_clause load_clause ( EXECCOMMAND )?
            {
            root_0 = (Object)adaptor.nil();


            MAPREDUCE294=(Token)match(input,MAPREDUCE,FOLLOW_MAPREDUCE_in_mr_clause2944); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            MAPREDUCE294_tree = 
            (Object)adaptor.create(MAPREDUCE294)
            ;
            root_0 = (Object)adaptor.becomeRoot(MAPREDUCE294_tree, root_0);
            }

            QUOTEDSTRING295=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_mr_clause2947); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTEDSTRING295_tree = 
            (Object)adaptor.create(QUOTEDSTRING295)
            ;
            adaptor.addChild(root_0, QUOTEDSTRING295_tree);
            }

            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:490:37: ( LEFT_PAREN ! path_list RIGHT_PAREN !)?
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==LEFT_PAREN) ) {
                alt79=1;
            }
            switch (alt79) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:490:39: LEFT_PAREN ! path_list RIGHT_PAREN !
                    {
                    LEFT_PAREN296=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_mr_clause2951); if (state.failed) return retval;

                    pushFollow(FOLLOW_path_list_in_mr_clause2954);
                    path_list297=path_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, path_list297.getTree());

                    RIGHT_PAREN298=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_mr_clause2956); if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_store_clause_in_mr_clause2962);
            store_clause299=store_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, store_clause299.getTree());

            pushFollow(FOLLOW_load_clause_in_mr_clause2964);
            load_clause300=load_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, load_clause300.getTree());

            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:490:102: ( EXECCOMMAND )?
            int alt80=2;
            int LA80_0 = input.LA(1);

            if ( (LA80_0==EXECCOMMAND) ) {
                alt80=1;
            }
            switch (alt80) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:490:102: EXECCOMMAND
                    {
                    EXECCOMMAND301=(Token)match(input,EXECCOMMAND,FOLLOW_EXECCOMMAND_in_mr_clause2966); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXECCOMMAND301_tree = 
                    (Object)adaptor.create(EXECCOMMAND301)
                    ;
                    adaptor.addChild(root_0, EXECCOMMAND301_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "mr_clause"


    public static class split_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "split_clause"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:493:1: split_clause : SPLIT ^ rel INTO ! split_branch split_branches ;
    public final QueryParser.split_clause_return split_clause() throws RecognitionException {
        QueryParser.split_clause_return retval = new QueryParser.split_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SPLIT302=null;
        Token INTO304=null;
        QueryParser.rel_return rel303 =null;

        QueryParser.split_branch_return split_branch305 =null;

        QueryParser.split_branches_return split_branches306 =null;


        Object SPLIT302_tree=null;
        Object INTO304_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:493:14: ( SPLIT ^ rel INTO ! split_branch split_branches )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:493:16: SPLIT ^ rel INTO ! split_branch split_branches
            {
            root_0 = (Object)adaptor.nil();


            SPLIT302=(Token)match(input,SPLIT,FOLLOW_SPLIT_in_split_clause2976); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SPLIT302_tree = 
            (Object)adaptor.create(SPLIT302)
            ;
            root_0 = (Object)adaptor.becomeRoot(SPLIT302_tree, root_0);
            }

            pushFollow(FOLLOW_rel_in_split_clause2979);
            rel303=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel303.getTree());

            INTO304=(Token)match(input,INTO,FOLLOW_INTO_in_split_clause2981); if (state.failed) return retval;

            pushFollow(FOLLOW_split_branch_in_split_clause2984);
            split_branch305=split_branch();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, split_branch305.getTree());

            pushFollow(FOLLOW_split_branches_in_split_clause2986);
            split_branches306=split_branches();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, split_branches306.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "split_clause"


    public static class split_branch_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "split_branch"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:496:1: split_branch : identifier_plus IF cond -> ^( SPLIT_BRANCH identifier_plus cond ) ;
    public final QueryParser.split_branch_return split_branch() throws RecognitionException {
        QueryParser.split_branch_return retval = new QueryParser.split_branch_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token IF308=null;
        QueryParser.identifier_plus_return identifier_plus307 =null;

        QueryParser.cond_return cond309 =null;


        Object IF308_tree=null;
        RewriteRuleTokenStream stream_IF=new RewriteRuleTokenStream(adaptor,"token IF");
        RewriteRuleSubtreeStream stream_identifier_plus=new RewriteRuleSubtreeStream(adaptor,"rule identifier_plus");
        RewriteRuleSubtreeStream stream_cond=new RewriteRuleSubtreeStream(adaptor,"rule cond");
        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:496:14: ( identifier_plus IF cond -> ^( SPLIT_BRANCH identifier_plus cond ) )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:496:16: identifier_plus IF cond
            {
            pushFollow(FOLLOW_identifier_plus_in_split_branch2995);
            identifier_plus307=identifier_plus();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus307.getTree());

            IF308=(Token)match(input,IF,FOLLOW_IF_in_split_branch2997); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IF.add(IF308);


            pushFollow(FOLLOW_cond_in_split_branch2999);
            cond309=cond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cond.add(cond309.getTree());

            // AST REWRITE
            // elements: identifier_plus, cond
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 496:40: -> ^( SPLIT_BRANCH identifier_plus cond )
            {
                // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:496:43: ^( SPLIT_BRANCH identifier_plus cond )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SPLIT_BRANCH, "SPLIT_BRANCH")
                , root_1);

                adaptor.addChild(root_1, stream_identifier_plus.nextTree());

                adaptor.addChild(root_1, stream_cond.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "split_branch"


    public static class split_otherwise_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "split_otherwise"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:499:1: split_otherwise : identifier_plus OTHERWISE ( ALL )? -> ^( OTHERWISE identifier_plus ( ALL )? ) ;
    public final QueryParser.split_otherwise_return split_otherwise() throws RecognitionException {
        QueryParser.split_otherwise_return retval = new QueryParser.split_otherwise_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token OTHERWISE311=null;
        Token ALL312=null;
        QueryParser.identifier_plus_return identifier_plus310 =null;


        Object OTHERWISE311_tree=null;
        Object ALL312_tree=null;
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_OTHERWISE=new RewriteRuleTokenStream(adaptor,"token OTHERWISE");
        RewriteRuleSubtreeStream stream_identifier_plus=new RewriteRuleSubtreeStream(adaptor,"rule identifier_plus");
        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:499:17: ( identifier_plus OTHERWISE ( ALL )? -> ^( OTHERWISE identifier_plus ( ALL )? ) )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:499:19: identifier_plus OTHERWISE ( ALL )?
            {
            pushFollow(FOLLOW_identifier_plus_in_split_otherwise3020);
            identifier_plus310=identifier_plus();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus310.getTree());

            OTHERWISE311=(Token)match(input,OTHERWISE,FOLLOW_OTHERWISE_in_split_otherwise3022); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OTHERWISE.add(OTHERWISE311);


            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:499:45: ( ALL )?
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==ALL) ) {
                alt81=1;
            }
            switch (alt81) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:499:45: ALL
                    {
                    ALL312=(Token)match(input,ALL,FOLLOW_ALL_in_split_otherwise3024); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(ALL312);


                    }
                    break;

            }


            // AST REWRITE
            // elements: identifier_plus, ALL, OTHERWISE
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 499:50: -> ^( OTHERWISE identifier_plus ( ALL )? )
            {
                // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:499:53: ^( OTHERWISE identifier_plus ( ALL )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                stream_OTHERWISE.nextNode()
                , root_1);

                adaptor.addChild(root_1, stream_identifier_plus.nextTree());

                // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:499:82: ( ALL )?
                if ( stream_ALL.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_ALL.nextNode()
                    );

                }
                stream_ALL.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "split_otherwise"


    public static class split_branches_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "split_branches"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:502:1: split_branches : ( COMMA ! split_branch ( split_branches )? | COMMA ! split_otherwise );
    public final QueryParser.split_branches_return split_branches() throws RecognitionException {
        QueryParser.split_branches_return retval = new QueryParser.split_branches_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA313=null;
        Token COMMA316=null;
        QueryParser.split_branch_return split_branch314 =null;

        QueryParser.split_branches_return split_branches315 =null;

        QueryParser.split_otherwise_return split_otherwise317 =null;


        Object COMMA313_tree=null;
        Object COMMA316_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:502:16: ( COMMA ! split_branch ( split_branches )? | COMMA ! split_otherwise )
            int alt83=2;
            int LA83_0 = input.LA(1);

            if ( (LA83_0==COMMA) ) {
                int LA83_1 = input.LA(2);

                if ( (LA83_1==IDENTIFIER) ) {
                    int LA83_2 = input.LA(3);

                    if ( (LA83_2==IF) ) {
                        alt83=1;
                    }
                    else if ( (LA83_2==OTHERWISE) ) {
                        alt83=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 83, 2, input);

                        throw nvae;

                    }
                }
                else if ( (LA83_1==CUBE||(LA83_1 >= ELSE && LA83_1 <= END)||LA83_1==IN||LA83_1==RANK||LA83_1==THEN||LA83_1==WHEN) ) {
                    int LA83_3 = input.LA(3);

                    if ( (LA83_3==IF) ) {
                        alt83=1;
                    }
                    else if ( (LA83_3==OTHERWISE) ) {
                        alt83=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 83, 3, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 83, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 83, 0, input);

                throw nvae;

            }
            switch (alt83) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:502:18: COMMA ! split_branch ( split_branches )?
                    {
                    root_0 = (Object)adaptor.nil();


                    COMMA313=(Token)match(input,COMMA,FOLLOW_COMMA_in_split_branches3047); if (state.failed) return retval;

                    pushFollow(FOLLOW_split_branch_in_split_branches3050);
                    split_branch314=split_branch();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, split_branch314.getTree());

                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:502:38: ( split_branches )?
                    int alt82=2;
                    int LA82_0 = input.LA(1);

                    if ( (LA82_0==COMMA) ) {
                        alt82=1;
                    }
                    switch (alt82) {
                        case 1 :
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:502:38: split_branches
                            {
                            pushFollow(FOLLOW_split_branches_in_split_branches3052);
                            split_branches315=split_branches();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, split_branches315.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:503:18: COMMA ! split_otherwise
                    {
                    root_0 = (Object)adaptor.nil();


                    COMMA316=(Token)match(input,COMMA,FOLLOW_COMMA_in_split_branches3072); if (state.failed) return retval;

                    pushFollow(FOLLOW_split_otherwise_in_split_branches3075);
                    split_otherwise317=split_otherwise();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, split_otherwise317.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "split_branches"


    public static class limit_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "limit_clause"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:506:1: limit_clause : LIMIT ^ rel expr ;
    public final QueryParser.limit_clause_return limit_clause() throws RecognitionException {
        QueryParser.limit_clause_return retval = new QueryParser.limit_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LIMIT318=null;
        QueryParser.rel_return rel319 =null;

        QueryParser.expr_return expr320 =null;


        Object LIMIT318_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:506:14: ( LIMIT ^ rel expr )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:506:16: LIMIT ^ rel expr
            {
            root_0 = (Object)adaptor.nil();


            LIMIT318=(Token)match(input,LIMIT,FOLLOW_LIMIT_in_limit_clause3084); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LIMIT318_tree = 
            (Object)adaptor.create(LIMIT318)
            ;
            root_0 = (Object)adaptor.becomeRoot(LIMIT318_tree, root_0);
            }

            pushFollow(FOLLOW_rel_in_limit_clause3087);
            rel319=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel319.getTree());

            pushFollow(FOLLOW_expr_in_limit_clause3089);
            expr320=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr320.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "limit_clause"


    public static class sample_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sample_clause"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:509:1: sample_clause : SAMPLE ^ rel expr ;
    public final QueryParser.sample_clause_return sample_clause() throws RecognitionException {
        QueryParser.sample_clause_return retval = new QueryParser.sample_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SAMPLE321=null;
        QueryParser.rel_return rel322 =null;

        QueryParser.expr_return expr323 =null;


        Object SAMPLE321_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:509:15: ( SAMPLE ^ rel expr )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:509:17: SAMPLE ^ rel expr
            {
            root_0 = (Object)adaptor.nil();


            SAMPLE321=(Token)match(input,SAMPLE,FOLLOW_SAMPLE_in_sample_clause3098); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SAMPLE321_tree = 
            (Object)adaptor.create(SAMPLE321)
            ;
            root_0 = (Object)adaptor.becomeRoot(SAMPLE321_tree, root_0);
            }

            pushFollow(FOLLOW_rel_in_sample_clause3101);
            rel322=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel322.getTree());

            pushFollow(FOLLOW_expr_in_sample_clause3103);
            expr323=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr323.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "sample_clause"


    public static class rank_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rank_clause"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:512:1: rank_clause : RANK ^ rel ( rank_by_statement )? ;
    public final QueryParser.rank_clause_return rank_clause() throws RecognitionException {
        QueryParser.rank_clause_return retval = new QueryParser.rank_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token RANK324=null;
        QueryParser.rel_return rel325 =null;

        QueryParser.rank_by_statement_return rank_by_statement326 =null;


        Object RANK324_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:512:13: ( RANK ^ rel ( rank_by_statement )? )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:512:15: RANK ^ rel ( rank_by_statement )?
            {
            root_0 = (Object)adaptor.nil();


            RANK324=(Token)match(input,RANK,FOLLOW_RANK_in_rank_clause3112); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RANK324_tree = 
            (Object)adaptor.create(RANK324)
            ;
            root_0 = (Object)adaptor.becomeRoot(RANK324_tree, root_0);
            }

            pushFollow(FOLLOW_rel_in_rank_clause3115);
            rel325=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel325.getTree());

            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:512:25: ( rank_by_statement )?
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==BY) ) {
                alt84=1;
            }
            switch (alt84) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:512:27: rank_by_statement
                    {
                    pushFollow(FOLLOW_rank_by_statement_in_rank_clause3119);
                    rank_by_statement326=rank_by_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rank_by_statement326.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rank_clause"


    public static class rank_by_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rank_by_statement"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:515:1: rank_by_statement : BY ^ rank_by_clause ( DENSE )? ;
    public final QueryParser.rank_by_statement_return rank_by_statement() throws RecognitionException {
        QueryParser.rank_by_statement_return retval = new QueryParser.rank_by_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token BY327=null;
        Token DENSE329=null;
        QueryParser.rank_by_clause_return rank_by_clause328 =null;


        Object BY327_tree=null;
        Object DENSE329_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:515:19: ( BY ^ rank_by_clause ( DENSE )? )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:515:21: BY ^ rank_by_clause ( DENSE )?
            {
            root_0 = (Object)adaptor.nil();


            BY327=(Token)match(input,BY,FOLLOW_BY_in_rank_by_statement3131); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BY327_tree = 
            (Object)adaptor.create(BY327)
            ;
            root_0 = (Object)adaptor.becomeRoot(BY327_tree, root_0);
            }

            pushFollow(FOLLOW_rank_by_clause_in_rank_by_statement3134);
            rank_by_clause328=rank_by_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rank_by_clause328.getTree());

            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:515:40: ( DENSE )?
            int alt85=2;
            int LA85_0 = input.LA(1);

            if ( (LA85_0==DENSE) ) {
                alt85=1;
            }
            switch (alt85) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:515:40: DENSE
                    {
                    DENSE329=(Token)match(input,DENSE,FOLLOW_DENSE_in_rank_by_statement3136); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DENSE329_tree = 
                    (Object)adaptor.create(DENSE329)
                    ;
                    adaptor.addChild(root_0, DENSE329_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rank_by_statement"


    public static class rank_by_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rank_by_clause"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:518:1: rank_by_clause : ( STAR ( ASC | DESC )? | rank_list );
    public final QueryParser.rank_by_clause_return rank_by_clause() throws RecognitionException {
        QueryParser.rank_by_clause_return retval = new QueryParser.rank_by_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STAR330=null;
        Token set331=null;
        QueryParser.rank_list_return rank_list332 =null;


        Object STAR330_tree=null;
        Object set331_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:518:16: ( STAR ( ASC | DESC )? | rank_list )
            int alt87=2;
            int LA87_0 = input.LA(1);

            if ( (LA87_0==STAR) ) {
                alt87=1;
            }
            else if ( (LA87_0==CUBE||LA87_0==DOLLARVAR||(LA87_0 >= DOUBLE_PERIOD && LA87_0 <= END)||LA87_0==GROUP||LA87_0==IDENTIFIER||LA87_0==IN||LA87_0==RANK||LA87_0==THEN||LA87_0==WHEN) ) {
                alt87=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 87, 0, input);

                throw nvae;

            }
            switch (alt87) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:518:18: STAR ( ASC | DESC )?
                    {
                    root_0 = (Object)adaptor.nil();


                    STAR330=(Token)match(input,STAR,FOLLOW_STAR_in_rank_by_clause3146); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR330_tree = 
                    (Object)adaptor.create(STAR330)
                    ;
                    adaptor.addChild(root_0, STAR330_tree);
                    }

                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:518:23: ( ASC | DESC )?
                    int alt86=2;
                    int LA86_0 = input.LA(1);

                    if ( (LA86_0==ASC||LA86_0==DESC) ) {
                        alt86=1;
                    }
                    switch (alt86) {
                        case 1 :
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:
                            {
                            set331=(Token)input.LT(1);

                            if ( input.LA(1)==ASC||input.LA(1)==DESC ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                                (Object)adaptor.create(set331)
                                );
                                state.errorRecovery=false;
                                state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:519:18: rank_list
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_rank_list_in_rank_by_clause3176);
                    rank_list332=rank_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rank_list332.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rank_by_clause"


    public static class rank_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rank_list"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:522:1: rank_list : rank_col ( COMMA rank_col )* -> ( rank_col )+ ;
    public final QueryParser.rank_list_return rank_list() throws RecognitionException {
        QueryParser.rank_list_return retval = new QueryParser.rank_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA334=null;
        QueryParser.rank_col_return rank_col333 =null;

        QueryParser.rank_col_return rank_col335 =null;


        Object COMMA334_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_rank_col=new RewriteRuleSubtreeStream(adaptor,"rule rank_col");
        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:522:11: ( rank_col ( COMMA rank_col )* -> ( rank_col )+ )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:522:13: rank_col ( COMMA rank_col )*
            {
            pushFollow(FOLLOW_rank_col_in_rank_list3185);
            rank_col333=rank_col();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rank_col.add(rank_col333.getTree());

            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:522:22: ( COMMA rank_col )*
            loop88:
            do {
                int alt88=2;
                int LA88_0 = input.LA(1);

                if ( (LA88_0==COMMA) ) {
                    alt88=1;
                }


                switch (alt88) {
            	case 1 :
            	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:522:24: COMMA rank_col
            	    {
            	    COMMA334=(Token)match(input,COMMA,FOLLOW_COMMA_in_rank_list3189); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA334);


            	    pushFollow(FOLLOW_rank_col_in_rank_list3191);
            	    rank_col335=rank_col();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_rank_col.add(rank_col335.getTree());

            	    }
            	    break;

            	default :
            	    break loop88;
                }
            } while (true);


            // AST REWRITE
            // elements: rank_col
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 523:10: -> ( rank_col )+
            {
                if ( !(stream_rank_col.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_rank_col.hasNext() ) {
                    adaptor.addChild(root_0, stream_rank_col.nextTree());

                }
                stream_rank_col.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rank_list"


    public static class rank_col_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rank_col"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:526:1: rank_col : ( col_range ( ASC | DESC )? | col_ref ( ASC | DESC )? );
    public final QueryParser.rank_col_return rank_col() throws RecognitionException {
        QueryParser.rank_col_return retval = new QueryParser.rank_col_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set337=null;
        Token set339=null;
        QueryParser.col_range_return col_range336 =null;

        QueryParser.col_ref_return col_ref338 =null;


        Object set337_tree=null;
        Object set339_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:526:10: ( col_range ( ASC | DESC )? | col_ref ( ASC | DESC )? )
            int alt91=2;
            switch ( input.LA(1) ) {
            case DOLLARVAR:
            case GROUP:
                {
                int LA91_1 = input.LA(2);

                if ( (LA91_1==DOUBLE_PERIOD) ) {
                    alt91=1;
                }
                else if ( (LA91_1==ASC||LA91_1==COMMA||(LA91_1 >= DENSE && LA91_1 <= DESC)||LA91_1==PARALLEL||LA91_1==RIGHT_PAREN||LA91_1==SEMI_COLON) ) {
                    alt91=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 91, 1, input);

                    throw nvae;

                }
                }
                break;
            case IDENTIFIER:
                {
                int LA91_2 = input.LA(2);

                if ( (LA91_2==DOUBLE_PERIOD) ) {
                    alt91=1;
                }
                else if ( (LA91_2==ASC||LA91_2==COMMA||(LA91_2 >= DENSE && LA91_2 <= DESC)||LA91_2==PARALLEL||LA91_2==RIGHT_PAREN||LA91_2==SEMI_COLON) ) {
                    alt91=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 91, 2, input);

                    throw nvae;

                }
                }
                break;
            case CUBE:
            case ELSE:
            case END:
            case IN:
            case RANK:
            case THEN:
            case WHEN:
                {
                int LA91_3 = input.LA(2);

                if ( (LA91_3==DOUBLE_PERIOD) ) {
                    alt91=1;
                }
                else if ( (LA91_3==ASC||LA91_3==COMMA||(LA91_3 >= DENSE && LA91_3 <= DESC)||LA91_3==PARALLEL||LA91_3==RIGHT_PAREN||LA91_3==SEMI_COLON) ) {
                    alt91=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 91, 3, input);

                    throw nvae;

                }
                }
                break;
            case DOUBLE_PERIOD:
                {
                alt91=1;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 91, 0, input);

                throw nvae;

            }

            switch (alt91) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:526:12: col_range ( ASC | DESC )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_col_range_in_rank_col3217);
                    col_range336=col_range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_range336.getTree());

                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:526:22: ( ASC | DESC )?
                    int alt89=2;
                    int LA89_0 = input.LA(1);

                    if ( (LA89_0==ASC||LA89_0==DESC) ) {
                        alt89=1;
                    }
                    switch (alt89) {
                        case 1 :
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:
                            {
                            set337=(Token)input.LT(1);

                            if ( input.LA(1)==ASC||input.LA(1)==DESC ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                                (Object)adaptor.create(set337)
                                );
                                state.errorRecovery=false;
                                state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:527:12: col_ref ( ASC | DESC )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_col_ref_in_rank_col3241);
                    col_ref338=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_ref338.getTree());

                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:527:20: ( ASC | DESC )?
                    int alt90=2;
                    int LA90_0 = input.LA(1);

                    if ( (LA90_0==ASC||LA90_0==DESC) ) {
                        alt90=1;
                    }
                    switch (alt90) {
                        case 1 :
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:
                            {
                            set339=(Token)input.LT(1);

                            if ( input.LA(1)==ASC||input.LA(1)==DESC ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                                (Object)adaptor.create(set339)
                                );
                                state.errorRecovery=false;
                                state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rank_col"


    public static class order_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "order_clause"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:530:1: order_clause : ORDER ^ rel BY ! order_by_clause ( USING ! func_clause )? ;
    public final QueryParser.order_clause_return order_clause() throws RecognitionException {
        QueryParser.order_clause_return retval = new QueryParser.order_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ORDER340=null;
        Token BY342=null;
        Token USING344=null;
        QueryParser.rel_return rel341 =null;

        QueryParser.order_by_clause_return order_by_clause343 =null;

        QueryParser.func_clause_return func_clause345 =null;


        Object ORDER340_tree=null;
        Object BY342_tree=null;
        Object USING344_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:530:14: ( ORDER ^ rel BY ! order_by_clause ( USING ! func_clause )? )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:530:16: ORDER ^ rel BY ! order_by_clause ( USING ! func_clause )?
            {
            root_0 = (Object)adaptor.nil();


            ORDER340=(Token)match(input,ORDER,FOLLOW_ORDER_in_order_clause3261); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ORDER340_tree = 
            (Object)adaptor.create(ORDER340)
            ;
            root_0 = (Object)adaptor.becomeRoot(ORDER340_tree, root_0);
            }

            pushFollow(FOLLOW_rel_in_order_clause3264);
            rel341=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel341.getTree());

            BY342=(Token)match(input,BY,FOLLOW_BY_in_order_clause3266); if (state.failed) return retval;

            pushFollow(FOLLOW_order_by_clause_in_order_clause3269);
            order_by_clause343=order_by_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, order_by_clause343.getTree());

            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:530:47: ( USING ! func_clause )?
            int alt92=2;
            int LA92_0 = input.LA(1);

            if ( (LA92_0==USING) ) {
                alt92=1;
            }
            switch (alt92) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:530:49: USING ! func_clause
                    {
                    USING344=(Token)match(input,USING,FOLLOW_USING_in_order_clause3273); if (state.failed) return retval;

                    pushFollow(FOLLOW_func_clause_in_order_clause3276);
                    func_clause345=func_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_clause345.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "order_clause"


    public static class order_by_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "order_by_clause"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:533:1: order_by_clause : ( STAR ( ASC | DESC )? | order_col_list );
    public final QueryParser.order_by_clause_return order_by_clause() throws RecognitionException {
        QueryParser.order_by_clause_return retval = new QueryParser.order_by_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STAR346=null;
        Token set347=null;
        QueryParser.order_col_list_return order_col_list348 =null;


        Object STAR346_tree=null;
        Object set347_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:533:17: ( STAR ( ASC | DESC )? | order_col_list )
            int alt94=2;
            int LA94_0 = input.LA(1);

            if ( (LA94_0==STAR) ) {
                alt94=1;
            }
            else if ( (LA94_0==CUBE||LA94_0==DOLLARVAR||(LA94_0 >= DOUBLE_PERIOD && LA94_0 <= END)||LA94_0==GROUP||LA94_0==IDENTIFIER||LA94_0==IN||LA94_0==LEFT_PAREN||LA94_0==RANK||LA94_0==THEN||LA94_0==WHEN) ) {
                alt94=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 94, 0, input);

                throw nvae;

            }
            switch (alt94) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:533:19: STAR ( ASC | DESC )?
                    {
                    root_0 = (Object)adaptor.nil();


                    STAR346=(Token)match(input,STAR,FOLLOW_STAR_in_order_by_clause3288); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR346_tree = 
                    (Object)adaptor.create(STAR346)
                    ;
                    adaptor.addChild(root_0, STAR346_tree);
                    }

                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:533:24: ( ASC | DESC )?
                    int alt93=2;
                    int LA93_0 = input.LA(1);

                    if ( (LA93_0==ASC||LA93_0==DESC) ) {
                        alt93=1;
                    }
                    switch (alt93) {
                        case 1 :
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:
                            {
                            set347=(Token)input.LT(1);

                            if ( input.LA(1)==ASC||input.LA(1)==DESC ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                                (Object)adaptor.create(set347)
                                );
                                state.errorRecovery=false;
                                state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:534:19: order_col_list
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_order_col_list_in_order_by_clause3319);
                    order_col_list348=order_col_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, order_col_list348.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "order_by_clause"


    public static class order_col_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "order_col_list"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:537:1: order_col_list : order_col ( COMMA order_col )* -> ( order_col )+ ;
    public final QueryParser.order_col_list_return order_col_list() throws RecognitionException {
        QueryParser.order_col_list_return retval = new QueryParser.order_col_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA350=null;
        QueryParser.order_col_return order_col349 =null;

        QueryParser.order_col_return order_col351 =null;


        Object COMMA350_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_order_col=new RewriteRuleSubtreeStream(adaptor,"rule order_col");
        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:537:16: ( order_col ( COMMA order_col )* -> ( order_col )+ )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:537:18: order_col ( COMMA order_col )*
            {
            pushFollow(FOLLOW_order_col_in_order_col_list3328);
            order_col349=order_col();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_order_col.add(order_col349.getTree());

            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:537:28: ( COMMA order_col )*
            loop95:
            do {
                int alt95=2;
                int LA95_0 = input.LA(1);

                if ( (LA95_0==COMMA) ) {
                    alt95=1;
                }


                switch (alt95) {
            	case 1 :
            	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:537:30: COMMA order_col
            	    {
            	    COMMA350=(Token)match(input,COMMA,FOLLOW_COMMA_in_order_col_list3332); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA350);


            	    pushFollow(FOLLOW_order_col_in_order_col_list3334);
            	    order_col351=order_col();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_order_col.add(order_col351.getTree());

            	    }
            	    break;

            	default :
            	    break loop95;
                }
            } while (true);


            // AST REWRITE
            // elements: order_col
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 538:15: -> ( order_col )+
            {
                if ( !(stream_order_col.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_order_col.hasNext() ) {
                    adaptor.addChild(root_0, stream_order_col.nextTree());

                }
                stream_order_col.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "order_col_list"


    public static class order_col_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "order_col"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:541:1: order_col : ( col_range ( ASC | DESC )? | col_ref ( ASC | DESC )? | LEFT_PAREN ! col_ref ( ASC | DESC )? RIGHT_PAREN !);
    public final QueryParser.order_col_return order_col() throws RecognitionException {
        QueryParser.order_col_return retval = new QueryParser.order_col_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set353=null;
        Token set355=null;
        Token LEFT_PAREN356=null;
        Token set358=null;
        Token RIGHT_PAREN359=null;
        QueryParser.col_range_return col_range352 =null;

        QueryParser.col_ref_return col_ref354 =null;

        QueryParser.col_ref_return col_ref357 =null;


        Object set353_tree=null;
        Object set355_tree=null;
        Object LEFT_PAREN356_tree=null;
        Object set358_tree=null;
        Object RIGHT_PAREN359_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:541:11: ( col_range ( ASC | DESC )? | col_ref ( ASC | DESC )? | LEFT_PAREN ! col_ref ( ASC | DESC )? RIGHT_PAREN !)
            int alt99=3;
            switch ( input.LA(1) ) {
            case DOLLARVAR:
            case GROUP:
                {
                int LA99_1 = input.LA(2);

                if ( (LA99_1==DOUBLE_PERIOD) ) {
                    alt99=1;
                }
                else if ( (LA99_1==ASC||LA99_1==COMMA||LA99_1==DESC||LA99_1==PARALLEL||LA99_1==RIGHT_PAREN||LA99_1==SEMI_COLON||LA99_1==USING) ) {
                    alt99=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 99, 1, input);

                    throw nvae;

                }
                }
                break;
            case IDENTIFIER:
                {
                int LA99_2 = input.LA(2);

                if ( (LA99_2==DOUBLE_PERIOD) ) {
                    alt99=1;
                }
                else if ( (LA99_2==ASC||LA99_2==COMMA||LA99_2==DESC||LA99_2==PARALLEL||LA99_2==RIGHT_PAREN||LA99_2==SEMI_COLON||LA99_2==USING) ) {
                    alt99=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 99, 2, input);

                    throw nvae;

                }
                }
                break;
            case CUBE:
            case ELSE:
            case END:
            case IN:
            case RANK:
            case THEN:
            case WHEN:
                {
                int LA99_3 = input.LA(2);

                if ( (LA99_3==DOUBLE_PERIOD) ) {
                    alt99=1;
                }
                else if ( (LA99_3==ASC||LA99_3==COMMA||LA99_3==DESC||LA99_3==PARALLEL||LA99_3==RIGHT_PAREN||LA99_3==SEMI_COLON||LA99_3==USING) ) {
                    alt99=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 99, 3, input);

                    throw nvae;

                }
                }
                break;
            case DOUBLE_PERIOD:
                {
                alt99=1;
                }
                break;
            case LEFT_PAREN:
                {
                alt99=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 99, 0, input);

                throw nvae;

            }

            switch (alt99) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:541:13: col_range ( ASC | DESC )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_col_range_in_order_col3365);
                    col_range352=col_range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_range352.getTree());

                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:541:23: ( ASC | DESC )?
                    int alt96=2;
                    int LA96_0 = input.LA(1);

                    if ( (LA96_0==ASC||LA96_0==DESC) ) {
                        alt96=1;
                    }
                    switch (alt96) {
                        case 1 :
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:
                            {
                            set353=(Token)input.LT(1);

                            if ( input.LA(1)==ASC||input.LA(1)==DESC ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                                (Object)adaptor.create(set353)
                                );
                                state.errorRecovery=false;
                                state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:542:13: col_ref ( ASC | DESC )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_col_ref_in_order_col3388);
                    col_ref354=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_ref354.getTree());

                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:542:21: ( ASC | DESC )?
                    int alt97=2;
                    int LA97_0 = input.LA(1);

                    if ( (LA97_0==ASC||LA97_0==DESC) ) {
                        alt97=1;
                    }
                    switch (alt97) {
                        case 1 :
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:
                            {
                            set355=(Token)input.LT(1);

                            if ( input.LA(1)==ASC||input.LA(1)==DESC ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                                (Object)adaptor.create(set355)
                                );
                                state.errorRecovery=false;
                                state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:543:13: LEFT_PAREN ! col_ref ( ASC | DESC )? RIGHT_PAREN !
                    {
                    root_0 = (Object)adaptor.nil();


                    LEFT_PAREN356=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_order_col3413); if (state.failed) return retval;

                    pushFollow(FOLLOW_col_ref_in_order_col3416);
                    col_ref357=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_ref357.getTree());

                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:543:33: ( ASC | DESC )?
                    int alt98=2;
                    int LA98_0 = input.LA(1);

                    if ( (LA98_0==ASC||LA98_0==DESC) ) {
                        alt98=1;
                    }
                    switch (alt98) {
                        case 1 :
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:
                            {
                            set358=(Token)input.LT(1);

                            if ( input.LA(1)==ASC||input.LA(1)==DESC ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                                (Object)adaptor.create(set358)
                                );
                                state.errorRecovery=false;
                                state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    RIGHT_PAREN359=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_order_col3429); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "order_col"


    public static class distinct_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "distinct_clause"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:546:1: distinct_clause : DISTINCT ^ rel ( partition_clause )? ;
    public final QueryParser.distinct_clause_return distinct_clause() throws RecognitionException {
        QueryParser.distinct_clause_return retval = new QueryParser.distinct_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DISTINCT360=null;
        QueryParser.rel_return rel361 =null;

        QueryParser.partition_clause_return partition_clause362 =null;


        Object DISTINCT360_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:546:17: ( DISTINCT ^ rel ( partition_clause )? )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:546:19: DISTINCT ^ rel ( partition_clause )?
            {
            root_0 = (Object)adaptor.nil();


            DISTINCT360=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_distinct_clause3439); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DISTINCT360_tree = 
            (Object)adaptor.create(DISTINCT360)
            ;
            root_0 = (Object)adaptor.becomeRoot(DISTINCT360_tree, root_0);
            }

            pushFollow(FOLLOW_rel_in_distinct_clause3442);
            rel361=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel361.getTree());

            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:546:33: ( partition_clause )?
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==PARTITION) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:546:33: partition_clause
                    {
                    pushFollow(FOLLOW_partition_clause_in_distinct_clause3444);
                    partition_clause362=partition_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_clause362.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "distinct_clause"


    public static class partition_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "partition_clause"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:549:1: partition_clause : PARTITION ^ BY ! func_name ;
    public final QueryParser.partition_clause_return partition_clause() throws RecognitionException {
        QueryParser.partition_clause_return retval = new QueryParser.partition_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token PARTITION363=null;
        Token BY364=null;
        QueryParser.func_name_return func_name365 =null;


        Object PARTITION363_tree=null;
        Object BY364_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:549:18: ( PARTITION ^ BY ! func_name )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:549:20: PARTITION ^ BY ! func_name
            {
            root_0 = (Object)adaptor.nil();


            PARTITION363=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_partition_clause3454); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PARTITION363_tree = 
            (Object)adaptor.create(PARTITION363)
            ;
            root_0 = (Object)adaptor.becomeRoot(PARTITION363_tree, root_0);
            }

            BY364=(Token)match(input,BY,FOLLOW_BY_in_partition_clause3457); if (state.failed) return retval;

            pushFollow(FOLLOW_func_name_in_partition_clause3460);
            func_name365=func_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, func_name365.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "partition_clause"


    public static class rel_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_list"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:552:1: rel_list : rel ( COMMA rel )* -> ( rel )+ ;
    public final QueryParser.rel_list_return rel_list() throws RecognitionException {
        QueryParser.rel_list_return retval = new QueryParser.rel_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA367=null;
        QueryParser.rel_return rel366 =null;

        QueryParser.rel_return rel368 =null;


        Object COMMA367_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_rel=new RewriteRuleSubtreeStream(adaptor,"rule rel");
        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:552:10: ( rel ( COMMA rel )* -> ( rel )+ )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:552:12: rel ( COMMA rel )*
            {
            pushFollow(FOLLOW_rel_in_rel_list3469);
            rel366=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rel.add(rel366.getTree());

            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:552:16: ( COMMA rel )*
            loop101:
            do {
                int alt101=2;
                int LA101_0 = input.LA(1);

                if ( (LA101_0==COMMA) ) {
                    alt101=1;
                }


                switch (alt101) {
            	case 1 :
            	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:552:18: COMMA rel
            	    {
            	    COMMA367=(Token)match(input,COMMA,FOLLOW_COMMA_in_rel_list3473); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA367);


            	    pushFollow(FOLLOW_rel_in_rel_list3475);
            	    rel368=rel();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_rel.add(rel368.getTree());

            	    }
            	    break;

            	default :
            	    break loop101;
                }
            } while (true);


            // AST REWRITE
            // elements: rel
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 552:31: -> ( rel )+
            {
                if ( !(stream_rel.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_rel.hasNext() ) {
                    adaptor.addChild(root_0, stream_rel.nextTree());

                }
                stream_rel.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_list"


    public static class cross_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cross_clause"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:555:1: cross_clause : CROSS ^ rel_list ( partition_clause )? ;
    public final QueryParser.cross_clause_return cross_clause() throws RecognitionException {
        QueryParser.cross_clause_return retval = new QueryParser.cross_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CROSS369=null;
        QueryParser.rel_list_return rel_list370 =null;

        QueryParser.partition_clause_return partition_clause371 =null;


        Object CROSS369_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:555:14: ( CROSS ^ rel_list ( partition_clause )? )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:555:16: CROSS ^ rel_list ( partition_clause )?
            {
            root_0 = (Object)adaptor.nil();


            CROSS369=(Token)match(input,CROSS,FOLLOW_CROSS_in_cross_clause3492); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CROSS369_tree = 
            (Object)adaptor.create(CROSS369)
            ;
            root_0 = (Object)adaptor.becomeRoot(CROSS369_tree, root_0);
            }

            pushFollow(FOLLOW_rel_list_in_cross_clause3495);
            rel_list370=rel_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel_list370.getTree());

            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:555:32: ( partition_clause )?
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==PARTITION) ) {
                alt102=1;
            }
            switch (alt102) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:555:32: partition_clause
                    {
                    pushFollow(FOLLOW_partition_clause_in_cross_clause3497);
                    partition_clause371=partition_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_clause371.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cross_clause"


    public static class join_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_clause"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:559:1: join_clause : JOIN ^ join_sub_clause ( USING ! join_type )? ( partition_clause )? ;
    public final QueryParser.join_clause_return join_clause() throws RecognitionException {
        QueryParser.join_clause_return retval = new QueryParser.join_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token JOIN372=null;
        Token USING374=null;
        QueryParser.join_sub_clause_return join_sub_clause373 =null;

        QueryParser.join_type_return join_type375 =null;

        QueryParser.partition_clause_return partition_clause376 =null;


        Object JOIN372_tree=null;
        Object USING374_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:559:13: ( JOIN ^ join_sub_clause ( USING ! join_type )? ( partition_clause )? )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:559:15: JOIN ^ join_sub_clause ( USING ! join_type )? ( partition_clause )?
            {
            root_0 = (Object)adaptor.nil();


            JOIN372=(Token)match(input,JOIN,FOLLOW_JOIN_in_join_clause3508); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            JOIN372_tree = 
            (Object)adaptor.create(JOIN372)
            ;
            root_0 = (Object)adaptor.becomeRoot(JOIN372_tree, root_0);
            }

            pushFollow(FOLLOW_join_sub_clause_in_join_clause3511);
            join_sub_clause373=join_sub_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, join_sub_clause373.getTree());

            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:559:37: ( USING ! join_type )?
            int alt103=2;
            int LA103_0 = input.LA(1);

            if ( (LA103_0==USING) ) {
                alt103=1;
            }
            switch (alt103) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:559:39: USING ! join_type
                    {
                    USING374=(Token)match(input,USING,FOLLOW_USING_in_join_clause3515); if (state.failed) return retval;

                    pushFollow(FOLLOW_join_type_in_join_clause3518);
                    join_type375=join_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, join_type375.getTree());

                    }
                    break;

            }


            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:559:59: ( partition_clause )?
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==PARTITION) ) {
                alt104=1;
            }
            switch (alt104) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:559:59: partition_clause
                    {
                    pushFollow(FOLLOW_partition_clause_in_join_clause3523);
                    partition_clause376=partition_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_clause376.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_clause"


    public static class join_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_type"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:562:1: join_type : QUOTEDSTRING ;
    public final QueryParser.join_type_return join_type() throws RecognitionException {
        QueryParser.join_type_return retval = new QueryParser.join_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token QUOTEDSTRING377=null;

        Object QUOTEDSTRING377_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:562:11: ( QUOTEDSTRING )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:562:13: QUOTEDSTRING
            {
            root_0 = (Object)adaptor.nil();


            QUOTEDSTRING377=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_join_type3533); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTEDSTRING377_tree = 
            (Object)adaptor.create(QUOTEDSTRING377)
            ;
            adaptor.addChild(root_0, QUOTEDSTRING377_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_type"


    public static class join_sub_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_sub_clause"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:565:1: join_sub_clause : join_item ( ( ( LEFT | RIGHT | FULL ) ( OUTER )? COMMA ! join_item ) | ( ( COMMA ! join_item )+ ) ) ;
    public final QueryParser.join_sub_clause_return join_sub_clause() throws RecognitionException {
        QueryParser.join_sub_clause_return retval = new QueryParser.join_sub_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set379=null;
        Token OUTER380=null;
        Token COMMA381=null;
        Token COMMA383=null;
        QueryParser.join_item_return join_item378 =null;

        QueryParser.join_item_return join_item382 =null;

        QueryParser.join_item_return join_item384 =null;


        Object set379_tree=null;
        Object OUTER380_tree=null;
        Object COMMA381_tree=null;
        Object COMMA383_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:565:17: ( join_item ( ( ( LEFT | RIGHT | FULL ) ( OUTER )? COMMA ! join_item ) | ( ( COMMA ! join_item )+ ) ) )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:565:19: join_item ( ( ( LEFT | RIGHT | FULL ) ( OUTER )? COMMA ! join_item ) | ( ( COMMA ! join_item )+ ) )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_join_item_in_join_sub_clause3542);
            join_item378=join_item();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, join_item378.getTree());

            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:565:29: ( ( ( LEFT | RIGHT | FULL ) ( OUTER )? COMMA ! join_item ) | ( ( COMMA ! join_item )+ ) )
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==FULL||LA107_0==LEFT||LA107_0==RIGHT) ) {
                alt107=1;
            }
            else if ( (LA107_0==COMMA) ) {
                alt107=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 107, 0, input);

                throw nvae;

            }
            switch (alt107) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:565:31: ( ( LEFT | RIGHT | FULL ) ( OUTER )? COMMA ! join_item )
                    {
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:565:31: ( ( LEFT | RIGHT | FULL ) ( OUTER )? COMMA ! join_item )
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:565:33: ( LEFT | RIGHT | FULL ) ( OUTER )? COMMA ! join_item
                    {
                    set379=(Token)input.LT(1);

                    if ( input.LA(1)==FULL||input.LA(1)==LEFT||input.LA(1)==RIGHT ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set379)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:565:57: ( OUTER )?
                    int alt105=2;
                    int LA105_0 = input.LA(1);

                    if ( (LA105_0==OUTER) ) {
                        alt105=1;
                    }
                    switch (alt105) {
                        case 1 :
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:565:57: OUTER
                            {
                            OUTER380=(Token)match(input,OUTER,FOLLOW_OUTER_in_join_sub_clause3562); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            OUTER380_tree = 
                            (Object)adaptor.create(OUTER380)
                            ;
                            adaptor.addChild(root_0, OUTER380_tree);
                            }

                            }
                            break;

                    }


                    COMMA381=(Token)match(input,COMMA,FOLLOW_COMMA_in_join_sub_clause3565); if (state.failed) return retval;

                    pushFollow(FOLLOW_join_item_in_join_sub_clause3568);
                    join_item382=join_item();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, join_item382.getTree());

                    }


                    }
                    break;
                case 2 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:565:85: ( ( COMMA ! join_item )+ )
                    {
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:565:85: ( ( COMMA ! join_item )+ )
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:565:87: ( COMMA ! join_item )+
                    {
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:565:87: ( COMMA ! join_item )+
                    int cnt106=0;
                    loop106:
                    do {
                        int alt106=2;
                        int LA106_0 = input.LA(1);

                        if ( (LA106_0==COMMA) ) {
                            alt106=1;
                        }


                        switch (alt106) {
                    	case 1 :
                    	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:565:89: COMMA ! join_item
                    	    {
                    	    COMMA383=(Token)match(input,COMMA,FOLLOW_COMMA_in_join_sub_clause3578); if (state.failed) return retval;

                    	    pushFollow(FOLLOW_join_item_in_join_sub_clause3581);
                    	    join_item384=join_item();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, join_item384.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt106 >= 1 ) break loop106;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(106, input);
                                throw eee;
                        }
                        cnt106++;
                    } while (true);


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_sub_clause"


    public static class join_item_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_item"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:568:1: join_item : rel join_group_by_clause -> ^( JOIN_ITEM rel join_group_by_clause ) ;
    public final QueryParser.join_item_return join_item() throws RecognitionException {
        QueryParser.join_item_return retval = new QueryParser.join_item_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.rel_return rel385 =null;

        QueryParser.join_group_by_clause_return join_group_by_clause386 =null;


        RewriteRuleSubtreeStream stream_join_group_by_clause=new RewriteRuleSubtreeStream(adaptor,"rule join_group_by_clause");
        RewriteRuleSubtreeStream stream_rel=new RewriteRuleSubtreeStream(adaptor,"rule rel");
        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:568:11: ( rel join_group_by_clause -> ^( JOIN_ITEM rel join_group_by_clause ) )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:568:13: rel join_group_by_clause
            {
            pushFollow(FOLLOW_rel_in_join_item3597);
            rel385=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rel.add(rel385.getTree());

            pushFollow(FOLLOW_join_group_by_clause_in_join_item3599);
            join_group_by_clause386=join_group_by_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_join_group_by_clause.add(join_group_by_clause386.getTree());

            // AST REWRITE
            // elements: join_group_by_clause, rel
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 568:38: -> ^( JOIN_ITEM rel join_group_by_clause )
            {
                // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:568:41: ^( JOIN_ITEM rel join_group_by_clause )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(JOIN_ITEM, "JOIN_ITEM")
                , root_1);

                adaptor.addChild(root_1, stream_rel.nextTree());

                adaptor.addChild(root_1, stream_join_group_by_clause.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_item"


    public static class join_group_by_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_group_by_clause"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:574:1: join_group_by_clause : BY ^ real_arg ;
    public final QueryParser.join_group_by_clause_return join_group_by_clause() throws RecognitionException {
        QueryParser.join_group_by_clause_return retval = new QueryParser.join_group_by_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token BY387=null;
        QueryParser.real_arg_return real_arg388 =null;


        Object BY387_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:589:22: ( BY ^ real_arg )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:589:24: BY ^ real_arg
            {
            root_0 = (Object)adaptor.nil();


            BY387=(Token)match(input,BY,FOLLOW_BY_in_join_group_by_clause3658); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BY387_tree = 
            (Object)adaptor.create(BY387)
            ;
            root_0 = (Object)adaptor.becomeRoot(BY387_tree, root_0);
            }

            pushFollow(FOLLOW_real_arg_in_join_group_by_clause3661);
            real_arg388=real_arg();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, real_arg388.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
                    Tree by = (Tree) retval.getTree();
                    Tree realArg = by.getChild(0);
                    if(realArg.getType() == TUPLE_VAL
                    || (realArg.getType() == FUNC_EVAL && realArg.getChild(0).getType() == TOTUPLE)) {
                        retval.tree = adaptor.create(by.getType(), by.getText());
                        for(int i = 0; i < realArg.getChildCount(); ++i) {
                            if(realArg.getChild(i).getType()!=TOTUPLE)
                            ((Tree)retval.tree).addChild(realArg.getChild(i));
                        }
                        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
                    }
                }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_group_by_clause"


    public static class union_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "union_clause"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:592:1: union_clause : UNION ^ ( ONSCHEMA )? rel_list ;
    public final QueryParser.union_clause_return union_clause() throws RecognitionException {
        QueryParser.union_clause_return retval = new QueryParser.union_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token UNION389=null;
        Token ONSCHEMA390=null;
        QueryParser.rel_list_return rel_list391 =null;


        Object UNION389_tree=null;
        Object ONSCHEMA390_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:592:14: ( UNION ^ ( ONSCHEMA )? rel_list )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:592:16: UNION ^ ( ONSCHEMA )? rel_list
            {
            root_0 = (Object)adaptor.nil();


            UNION389=(Token)match(input,UNION,FOLLOW_UNION_in_union_clause3670); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            UNION389_tree = 
            (Object)adaptor.create(UNION389)
            ;
            root_0 = (Object)adaptor.becomeRoot(UNION389_tree, root_0);
            }

            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:592:23: ( ONSCHEMA )?
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==ONSCHEMA) ) {
                alt108=1;
            }
            switch (alt108) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:592:23: ONSCHEMA
                    {
                    ONSCHEMA390=(Token)match(input,ONSCHEMA,FOLLOW_ONSCHEMA_in_union_clause3673); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ONSCHEMA390_tree = 
                    (Object)adaptor.create(ONSCHEMA390)
                    ;
                    adaptor.addChild(root_0, ONSCHEMA390_tree);
                    }

                    }
                    break;

            }


            pushFollow(FOLLOW_rel_list_in_union_clause3676);
            rel_list391=rel_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel_list391.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "union_clause"


    public static class cube_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cube_clause"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:595:1: cube_clause : CUBE rel BY cube_rollup_list ( COMMA cube_rollup_list )* -> ^( CUBE rel ^( BY ( cube_rollup_list )+ ) ) ;
    public final QueryParser.cube_clause_return cube_clause() throws RecognitionException {
        QueryParser.cube_clause_return retval = new QueryParser.cube_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CUBE392=null;
        Token BY394=null;
        Token COMMA396=null;
        QueryParser.rel_return rel393 =null;

        QueryParser.cube_rollup_list_return cube_rollup_list395 =null;

        QueryParser.cube_rollup_list_return cube_rollup_list397 =null;


        Object CUBE392_tree=null;
        Object BY394_tree=null;
        Object COMMA396_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_CUBE=new RewriteRuleTokenStream(adaptor,"token CUBE");
        RewriteRuleSubtreeStream stream_cube_rollup_list=new RewriteRuleSubtreeStream(adaptor,"rule cube_rollup_list");
        RewriteRuleSubtreeStream stream_rel=new RewriteRuleSubtreeStream(adaptor,"rule rel");
        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:595:13: ( CUBE rel BY cube_rollup_list ( COMMA cube_rollup_list )* -> ^( CUBE rel ^( BY ( cube_rollup_list )+ ) ) )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:595:15: CUBE rel BY cube_rollup_list ( COMMA cube_rollup_list )*
            {
            CUBE392=(Token)match(input,CUBE,FOLLOW_CUBE_in_cube_clause3685); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CUBE.add(CUBE392);


            pushFollow(FOLLOW_rel_in_cube_clause3687);
            rel393=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rel.add(rel393.getTree());

            BY394=(Token)match(input,BY,FOLLOW_BY_in_cube_clause3689); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BY.add(BY394);


            pushFollow(FOLLOW_cube_rollup_list_in_cube_clause3691);
            cube_rollup_list395=cube_rollup_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cube_rollup_list.add(cube_rollup_list395.getTree());

            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:595:44: ( COMMA cube_rollup_list )*
            loop109:
            do {
                int alt109=2;
                int LA109_0 = input.LA(1);

                if ( (LA109_0==COMMA) ) {
                    alt109=1;
                }


                switch (alt109) {
            	case 1 :
            	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:595:46: COMMA cube_rollup_list
            	    {
            	    COMMA396=(Token)match(input,COMMA,FOLLOW_COMMA_in_cube_clause3695); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA396);


            	    pushFollow(FOLLOW_cube_rollup_list_in_cube_clause3697);
            	    cube_rollup_list397=cube_rollup_list();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cube_rollup_list.add(cube_rollup_list397.getTree());

            	    }
            	    break;

            	default :
            	    break loop109;
                }
            } while (true);


            // AST REWRITE
            // elements: BY, CUBE, rel, cube_rollup_list
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 595:72: -> ^( CUBE rel ^( BY ( cube_rollup_list )+ ) )
            {
                // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:595:75: ^( CUBE rel ^( BY ( cube_rollup_list )+ ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                stream_CUBE.nextNode()
                , root_1);

                adaptor.addChild(root_1, stream_rel.nextTree());

                // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:595:87: ^( BY ( cube_rollup_list )+ )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                stream_BY.nextNode()
                , root_2);

                if ( !(stream_cube_rollup_list.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_cube_rollup_list.hasNext() ) {
                    adaptor.addChild(root_2, stream_cube_rollup_list.nextTree());

                }
                stream_cube_rollup_list.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cube_clause"


    public static class cube_rollup_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cube_rollup_list"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:598:1: cube_rollup_list : ( CUBE | ROLLUP ) ^ LEFT_PAREN ! real_arg ( COMMA ! real_arg )* RIGHT_PAREN !;
    public final QueryParser.cube_rollup_list_return cube_rollup_list() throws RecognitionException {
        QueryParser.cube_rollup_list_return retval = new QueryParser.cube_rollup_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set398=null;
        Token LEFT_PAREN399=null;
        Token COMMA401=null;
        Token RIGHT_PAREN403=null;
        QueryParser.real_arg_return real_arg400 =null;

        QueryParser.real_arg_return real_arg402 =null;


        Object set398_tree=null;
        Object LEFT_PAREN399_tree=null;
        Object COMMA401_tree=null;
        Object RIGHT_PAREN403_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:598:18: ( ( CUBE | ROLLUP ) ^ LEFT_PAREN ! real_arg ( COMMA ! real_arg )* RIGHT_PAREN !)
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:598:20: ( CUBE | ROLLUP ) ^ LEFT_PAREN ! real_arg ( COMMA ! real_arg )* RIGHT_PAREN !
            {
            root_0 = (Object)adaptor.nil();


            set398=(Token)input.LT(1);

            set398=(Token)input.LT(1);

            if ( input.LA(1)==CUBE||input.LA(1)==ROLLUP ) {
                input.consume();
                if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(set398)
                , root_0);
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            LEFT_PAREN399=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_cube_rollup_list3739); if (state.failed) return retval;

            pushFollow(FOLLOW_real_arg_in_cube_rollup_list3742);
            real_arg400=real_arg();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, real_arg400.getTree());

            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:598:60: ( COMMA ! real_arg )*
            loop110:
            do {
                int alt110=2;
                int LA110_0 = input.LA(1);

                if ( (LA110_0==COMMA) ) {
                    alt110=1;
                }


                switch (alt110) {
            	case 1 :
            	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:598:62: COMMA ! real_arg
            	    {
            	    COMMA401=(Token)match(input,COMMA,FOLLOW_COMMA_in_cube_rollup_list3746); if (state.failed) return retval;

            	    pushFollow(FOLLOW_real_arg_in_cube_rollup_list3749);
            	    real_arg402=real_arg();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, real_arg402.getTree());

            	    }
            	    break;

            	default :
            	    break loop110;
                }
            } while (true);


            RIGHT_PAREN403=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_cube_rollup_list3754); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cube_rollup_list"


    public static class flatten_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "flatten_clause"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:601:1: flatten_clause : FLATTEN ^ LEFT_PAREN ! expr RIGHT_PAREN !;
    public final QueryParser.flatten_clause_return flatten_clause() throws RecognitionException {
        QueryParser.flatten_clause_return retval = new QueryParser.flatten_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token FLATTEN404=null;
        Token LEFT_PAREN405=null;
        Token RIGHT_PAREN407=null;
        QueryParser.expr_return expr406 =null;


        Object FLATTEN404_tree=null;
        Object LEFT_PAREN405_tree=null;
        Object RIGHT_PAREN407_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:601:16: ( FLATTEN ^ LEFT_PAREN ! expr RIGHT_PAREN !)
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:601:18: FLATTEN ^ LEFT_PAREN ! expr RIGHT_PAREN !
            {
            root_0 = (Object)adaptor.nil();


            FLATTEN404=(Token)match(input,FLATTEN,FOLLOW_FLATTEN_in_flatten_clause3764); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FLATTEN404_tree = 
            (Object)adaptor.create(FLATTEN404)
            ;
            root_0 = (Object)adaptor.becomeRoot(FLATTEN404_tree, root_0);
            }

            LEFT_PAREN405=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_flatten_clause3767); if (state.failed) return retval;

            pushFollow(FOLLOW_expr_in_flatten_clause3770);
            expr406=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr406.getTree());

            RIGHT_PAREN407=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_flatten_clause3772); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "flatten_clause"


    public static class generate_as_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "generate_as_clause"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:606:1: generate_as_clause : AS ! ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | explicit_field_def ) ;
    public final QueryParser.generate_as_clause_return generate_as_clause() throws RecognitionException {
        QueryParser.generate_as_clause_return retval = new QueryParser.generate_as_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token AS408=null;
        Token LEFT_PAREN409=null;
        Token RIGHT_PAREN411=null;
        QueryParser.field_def_list_return field_def_list410 =null;

        QueryParser.explicit_field_def_return explicit_field_def412 =null;


        Object AS408_tree=null;
        Object LEFT_PAREN409_tree=null;
        Object RIGHT_PAREN411_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:606:20: ( AS ! ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | explicit_field_def ) )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:606:23: AS ! ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | explicit_field_def )
            {
            root_0 = (Object)adaptor.nil();


            AS408=(Token)match(input,AS,FOLLOW_AS_in_generate_as_clause3785); if (state.failed) return retval;

            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:606:27: ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | explicit_field_def )
            int alt111=2;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==LEFT_PAREN) ) {
                alt111=1;
            }
            else if ( ((LA111_0 >= BAG && LA111_0 <= BIGDECIMAL)||LA111_0==BIGINTEGER||LA111_0==BOOLEAN||LA111_0==BYTEARRAY||LA111_0==CHARARRAY||(LA111_0 >= CUBE && LA111_0 <= DATETIME)||LA111_0==DOUBLE||(LA111_0 >= ELSE && LA111_0 <= END)||LA111_0==FLOAT||LA111_0==IDENTIFIER||LA111_0==IN||LA111_0==INT||LA111_0==LONG||LA111_0==MAP||LA111_0==RANK||LA111_0==THEN||LA111_0==TUPLE||LA111_0==WHEN) ) {
                alt111=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 111, 0, input);

                throw nvae;

            }
            switch (alt111) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:606:29: ( LEFT_PAREN ! field_def_list RIGHT_PAREN !)
                    {
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:606:29: ( LEFT_PAREN ! field_def_list RIGHT_PAREN !)
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:606:31: LEFT_PAREN ! field_def_list RIGHT_PAREN !
                    {
                    LEFT_PAREN409=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_generate_as_clause3792); if (state.failed) return retval;

                    pushFollow(FOLLOW_field_def_list_in_generate_as_clause3795);
                    field_def_list410=field_def_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_def_list410.getTree());

                    RIGHT_PAREN411=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_generate_as_clause3797); if (state.failed) return retval;

                    }


                    }
                    break;
                case 2 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:606:75: explicit_field_def
                    {
                    pushFollow(FOLLOW_explicit_field_def_in_generate_as_clause3804);
                    explicit_field_def412=explicit_field_def();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, explicit_field_def412.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "generate_as_clause"


    public static class flatten_generated_item_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "flatten_generated_item"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:609:1: flatten_generated_item : ( flatten_clause ( generate_as_clause )? | real_arg ( generate_as_clause )? );
    public final QueryParser.flatten_generated_item_return flatten_generated_item() throws RecognitionException {
        QueryParser.flatten_generated_item_return retval = new QueryParser.flatten_generated_item_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.flatten_clause_return flatten_clause413 =null;

        QueryParser.generate_as_clause_return generate_as_clause414 =null;

        QueryParser.real_arg_return real_arg415 =null;

        QueryParser.generate_as_clause_return generate_as_clause416 =null;



        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:609:24: ( flatten_clause ( generate_as_clause )? | real_arg ( generate_as_clause )? )
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==FLATTEN) ) {
                alt114=1;
            }
            else if ( (LA114_0==ALL||LA114_0==AND||(LA114_0 >= AS && LA114_0 <= ASSERT)||(LA114_0 >= BIGDECIMAL && LA114_0 <= BIGINTEGERNUMBER)||(LA114_0 >= BY && LA114_0 <= COGROUP)||(LA114_0 >= CROSS && LA114_0 <= DATETIME)||LA114_0==DEFINE||LA114_0==DESC||LA114_0==DISTINCT||LA114_0==DOLLARVAR||(LA114_0 >= DOUBLENUMBER && LA114_0 <= END)||LA114_0==FALSE||LA114_0==FILTER||(LA114_0 >= FLOATNUMBER && LA114_0 <= GROUP)||(LA114_0 >= IDENTIFIER && LA114_0 <= INPUT)||(LA114_0 >= INTEGER && LA114_0 <= LEFT_PAREN)||(LA114_0 >= LIMIT && LA114_0 <= LOAD)||LA114_0==LONGINTEGER||(LA114_0 >= MAPREDUCE && LA114_0 <= MINUS)||LA114_0==NULL||(LA114_0 >= OR && LA114_0 <= ORDER)||(LA114_0 >= OUTER && LA114_0 <= PARTITION)||(LA114_0 >= QUOTEDSTRING && LA114_0 <= RIGHT)||(LA114_0 >= ROLLUP && LA114_0 <= SAMPLE)||LA114_0==SHIP||(LA114_0 >= SPLIT && LA114_0 <= TRUE)||(LA114_0 >= UNION && LA114_0 <= USING)||LA114_0==WHEN||(LA114_0 >= BOOL && LA114_0 <= BOOL_COND)||LA114_0==REALIAS) ) {
                alt114=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 114, 0, input);

                throw nvae;

            }
            switch (alt114) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:609:26: flatten_clause ( generate_as_clause )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_flatten_clause_in_flatten_generated_item3815);
                    flatten_clause413=flatten_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, flatten_clause413.getTree());

                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:609:41: ( generate_as_clause )?
                    int alt112=2;
                    int LA112_0 = input.LA(1);

                    if ( (LA112_0==AS) ) {
                        alt112=1;
                    }
                    switch (alt112) {
                        case 1 :
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:609:41: generate_as_clause
                            {
                            pushFollow(FOLLOW_generate_as_clause_in_flatten_generated_item3817);
                            generate_as_clause414=generate_as_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, generate_as_clause414.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:610:26: real_arg ( generate_as_clause )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_real_arg_in_flatten_generated_item3845);
                    real_arg415=real_arg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, real_arg415.getTree());

                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:610:35: ( generate_as_clause )?
                    int alt113=2;
                    int LA113_0 = input.LA(1);

                    if ( (LA113_0==AS) ) {
                        alt113=1;
                    }
                    switch (alt113) {
                        case 1 :
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:610:35: generate_as_clause
                            {
                            pushFollow(FOLLOW_generate_as_clause_in_flatten_generated_item3847);
                            generate_as_clause416=generate_as_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, generate_as_clause416.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "flatten_generated_item"


    public static class real_arg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "real_arg"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:618:1: real_arg : ( expr | STAR | col_range );
    public final QueryParser.real_arg_return real_arg() throws RecognitionException {
        QueryParser.real_arg_return retval = new QueryParser.real_arg_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STAR418=null;
        QueryParser.expr_return expr417 =null;

        QueryParser.col_range_return col_range419 =null;


        Object STAR418_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:618:10: ( expr | STAR | col_range )
            int alt115=3;
            switch ( input.LA(1) ) {
            case ALL:
            case AND:
            case AS:
            case ASC:
            case ASSERT:
            case BIGDECIMAL:
            case BIGDECIMALNUMBER:
            case BIGINTEGER:
            case BIGINTEGERNUMBER:
            case BY:
            case BYTEARRAY:
            case CACHE:
            case CASE:
            case CHARARRAY:
            case COGROUP:
            case CROSS:
            case DATETIME:
            case DEFINE:
            case DESC:
            case DISTINCT:
            case DOUBLENUMBER:
            case FALSE:
            case FILTER:
            case FLOATNUMBER:
            case FOREACH:
            case FULL:
            case GENERATE:
            case IF:
            case IMPORT:
            case INNER:
            case INPUT:
            case INTEGER:
            case INTO:
            case INVOKE:
            case IS:
            case JOIN:
            case LEFT:
            case LEFT_BRACKET:
            case LEFT_CURLY:
            case LEFT_PAREN:
            case LIMIT:
            case LOAD:
            case LONGINTEGER:
            case MAPREDUCE:
            case MINUS:
            case NULL:
            case OR:
            case ORDER:
            case OUTER:
            case OUTPUT:
            case PARALLEL:
            case PARTITION:
            case QUOTEDSTRING:
            case REGISTER:
            case RETURNS:
            case RIGHT:
            case ROLLUP:
            case SAMPLE:
            case SHIP:
            case SPLIT:
            case STDERROR:
            case STDIN:
            case STDOUT:
            case STORE:
            case STREAM:
            case STR_OP_EQ:
            case STR_OP_GT:
            case STR_OP_GTE:
            case STR_OP_LT:
            case STR_OP_LTE:
            case STR_OP_MATCHES:
            case STR_OP_NE:
            case THROUGH:
            case TRUE:
            case UNION:
            case USING:
            case BOOL:
            case BOOL_COND:
            case REALIAS:
                {
                alt115=1;
                }
                break;
            case DOLLARVAR:
            case GROUP:
                {
                int LA115_2 = input.LA(2);

                if ( (LA115_2==AS||LA115_2==COMMA||LA115_2==DIV||LA115_2==FULL||LA115_2==INNER||LA115_2==LEFT||LA115_2==MINUS||LA115_2==OUTER||(LA115_2 >= PARALLEL && LA115_2 <= POUND)||(LA115_2 >= RIGHT && LA115_2 <= RIGHT_PAREN)||LA115_2==SEMI_COLON||LA115_2==STAR||LA115_2==USING) ) {
                    alt115=1;
                }
                else if ( (LA115_2==DOUBLE_PERIOD) ) {
                    alt115=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 115, 2, input);

                    throw nvae;

                }
                }
                break;
            case IDENTIFIER:
                {
                int LA115_3 = input.LA(2);

                if ( (LA115_3==AS||LA115_3==COMMA||(LA115_3 >= DIV && LA115_3 <= DOLLAR)||LA115_3==FULL||LA115_3==INNER||LA115_3==LEFT||LA115_3==LEFT_PAREN||LA115_3==MINUS||LA115_3==OUTER||(LA115_3 >= PARALLEL && LA115_3 <= POUND)||(LA115_3 >= RIGHT && LA115_3 <= RIGHT_PAREN)||LA115_3==SEMI_COLON||LA115_3==STAR||LA115_3==USING) ) {
                    alt115=1;
                }
                else if ( (LA115_3==DOUBLE_PERIOD) ) {
                    alt115=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 115, 3, input);

                    throw nvae;

                }
                }
                break;
            case CUBE:
            case ELSE:
            case END:
            case IN:
            case RANK:
            case THEN:
            case WHEN:
                {
                int LA115_4 = input.LA(2);

                if ( (LA115_4==AS||LA115_4==COMMA||(LA115_4 >= DIV && LA115_4 <= DOLLAR)||LA115_4==FULL||LA115_4==INNER||LA115_4==LEFT||LA115_4==LEFT_PAREN||LA115_4==MINUS||LA115_4==OUTER||(LA115_4 >= PARALLEL && LA115_4 <= POUND)||(LA115_4 >= RIGHT && LA115_4 <= RIGHT_PAREN)||LA115_4==SEMI_COLON||LA115_4==STAR||LA115_4==USING) ) {
                    alt115=1;
                }
                else if ( (LA115_4==DOUBLE_PERIOD) ) {
                    alt115=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 115, 4, input);

                    throw nvae;

                }
                }
                break;
            case STAR:
                {
                alt115=2;
                }
                break;
            case DOUBLE_PERIOD:
                {
                alt115=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 115, 0, input);

                throw nvae;

            }

            switch (alt115) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:618:12: expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_expr_in_real_arg3862);
                    expr417=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr417.getTree());

                    }
                    break;
                case 2 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:619:12: STAR
                    {
                    root_0 = (Object)adaptor.nil();


                    STAR418=(Token)match(input,STAR,FOLLOW_STAR_in_real_arg3875); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR418_tree = 
                    (Object)adaptor.create(STAR418)
                    ;
                    adaptor.addChild(root_0, STAR418_tree);
                    }

                    }
                    break;
                case 3 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:620:12: col_range
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_col_range_in_real_arg3888);
                    col_range419=col_range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_range419.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "real_arg"


    public static class cond_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cond"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:623:1: cond : and_cond ( OR ^ and_cond )* ;
    public final QueryParser.cond_return cond() throws RecognitionException {
        QueryParser.cond_return retval = new QueryParser.cond_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token OR421=null;
        QueryParser.and_cond_return and_cond420 =null;

        QueryParser.and_cond_return and_cond422 =null;


        Object OR421_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:623:6: ( and_cond ( OR ^ and_cond )* )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:623:8: and_cond ( OR ^ and_cond )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_and_cond_in_cond3897);
            and_cond420=and_cond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, and_cond420.getTree());

            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:623:18: ( OR ^ and_cond )*
            loop116:
            do {
                int alt116=2;
                int LA116_0 = input.LA(1);

                if ( (LA116_0==OR) ) {
                    alt116=1;
                }


                switch (alt116) {
            	case 1 :
            	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:623:20: OR ^ and_cond
            	    {
            	    OR421=(Token)match(input,OR,FOLLOW_OR_in_cond3902); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    OR421_tree = 
            	    (Object)adaptor.create(OR421)
            	    ;
            	    root_0 = (Object)adaptor.becomeRoot(OR421_tree, root_0);
            	    }

            	    pushFollow(FOLLOW_and_cond_in_cond3905);
            	    and_cond422=and_cond();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, and_cond422.getTree());

            	    }
            	    break;

            	default :
            	    break loop116;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cond"


    public static class and_cond_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "and_cond"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:626:1: and_cond : not_cond ( AND ^ not_cond )* ;
    public final QueryParser.and_cond_return and_cond() throws RecognitionException {
        QueryParser.and_cond_return retval = new QueryParser.and_cond_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token AND424=null;
        QueryParser.not_cond_return not_cond423 =null;

        QueryParser.not_cond_return not_cond425 =null;


        Object AND424_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:626:10: ( not_cond ( AND ^ not_cond )* )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:626:12: not_cond ( AND ^ not_cond )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_not_cond_in_and_cond3917);
            not_cond423=not_cond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, not_cond423.getTree());

            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:626:21: ( AND ^ not_cond )*
            loop117:
            do {
                int alt117=2;
                int LA117_0 = input.LA(1);

                if ( (LA117_0==AND) ) {
                    alt117=1;
                }


                switch (alt117) {
            	case 1 :
            	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:626:23: AND ^ not_cond
            	    {
            	    AND424=(Token)match(input,AND,FOLLOW_AND_in_and_cond3921); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    AND424_tree = 
            	    (Object)adaptor.create(AND424)
            	    ;
            	    root_0 = (Object)adaptor.becomeRoot(AND424_tree, root_0);
            	    }

            	    pushFollow(FOLLOW_not_cond_in_and_cond3924);
            	    not_cond425=not_cond();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, not_cond425.getTree());

            	    }
            	    break;

            	default :
            	    break loop117;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "and_cond"


    public static class not_cond_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "not_cond"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:629:1: not_cond : ( NOT ^)? unary_cond ;
    public final QueryParser.not_cond_return not_cond() throws RecognitionException {
        QueryParser.not_cond_return retval = new QueryParser.not_cond_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token NOT426=null;
        QueryParser.unary_cond_return unary_cond427 =null;


        Object NOT426_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:629:10: ( ( NOT ^)? unary_cond )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:629:12: ( NOT ^)? unary_cond
            {
            root_0 = (Object)adaptor.nil();


            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:629:15: ( NOT ^)?
            int alt118=2;
            int LA118_0 = input.LA(1);

            if ( (LA118_0==NOT) ) {
                alt118=1;
            }
            switch (alt118) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:629:15: NOT ^
                    {
                    NOT426=(Token)match(input,NOT,FOLLOW_NOT_in_not_cond3936); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT426_tree = 
                    (Object)adaptor.create(NOT426)
                    ;
                    root_0 = (Object)adaptor.becomeRoot(NOT426_tree, root_0);
                    }

                    }
                    break;

            }


            pushFollow(FOLLOW_unary_cond_in_not_cond3940);
            unary_cond427=unary_cond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_cond427.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "not_cond"


    public static class unary_cond_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unary_cond"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:632:1: unary_cond : exp1= expr ( ( IS ( NOT )? NULL -> ^( NULL $exp1 ( NOT )? ) ) | ( IN LEFT_PAREN ( rhs_operand ( COMMA rhs_operand )* ) RIGHT_PAREN -> ^( IN ^( IN_LHS expr ) ( ^( IN_RHS rhs_operand ) )+ ) ) | ( rel_op exp2= expr -> ^( rel_op $exp1 $exp2) ) | ( -> ^( BOOL_COND expr ) ) ) ;
    public final QueryParser.unary_cond_return unary_cond() throws RecognitionException {
        QueryParser.unary_cond_return retval = new QueryParser.unary_cond_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token IS428=null;
        Token NOT429=null;
        Token NULL430=null;
        Token IN431=null;
        Token LEFT_PAREN432=null;
        Token COMMA434=null;
        Token RIGHT_PAREN436=null;
        QueryParser.expr_return exp1 =null;

        QueryParser.expr_return exp2 =null;

        QueryParser.rhs_operand_return rhs_operand433 =null;

        QueryParser.rhs_operand_return rhs_operand435 =null;

        QueryParser.rel_op_return rel_op437 =null;


        Object IS428_tree=null;
        Object NOT429_tree=null;
        Object NULL430_tree=null;
        Object IN431_tree=null;
        Object LEFT_PAREN432_tree=null;
        Object COMMA434_tree=null;
        Object RIGHT_PAREN436_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_NOT=new RewriteRuleTokenStream(adaptor,"token NOT");
        RewriteRuleTokenStream stream_NULL=new RewriteRuleTokenStream(adaptor,"token NULL");
        RewriteRuleTokenStream stream_IN=new RewriteRuleTokenStream(adaptor,"token IN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_IS=new RewriteRuleTokenStream(adaptor,"token IS");
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleSubtreeStream stream_rhs_operand=new RewriteRuleSubtreeStream(adaptor,"rule rhs_operand");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_rel_op=new RewriteRuleSubtreeStream(adaptor,"rule rel_op");
        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:672:5: (exp1= expr ( ( IS ( NOT )? NULL -> ^( NULL $exp1 ( NOT )? ) ) | ( IN LEFT_PAREN ( rhs_operand ( COMMA rhs_operand )* ) RIGHT_PAREN -> ^( IN ^( IN_LHS expr ) ( ^( IN_RHS rhs_operand ) )+ ) ) | ( rel_op exp2= expr -> ^( rel_op $exp1 $exp2) ) | ( -> ^( BOOL_COND expr ) ) ) )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:672:7: exp1= expr ( ( IS ( NOT )? NULL -> ^( NULL $exp1 ( NOT )? ) ) | ( IN LEFT_PAREN ( rhs_operand ( COMMA rhs_operand )* ) RIGHT_PAREN -> ^( IN ^( IN_LHS expr ) ( ^( IN_RHS rhs_operand ) )+ ) ) | ( rel_op exp2= expr -> ^( rel_op $exp1 $exp2) ) | ( -> ^( BOOL_COND expr ) ) )
            {
            pushFollow(FOLLOW_expr_in_unary_cond3970);
            exp1=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(exp1.getTree());

            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:673:9: ( ( IS ( NOT )? NULL -> ^( NULL $exp1 ( NOT )? ) ) | ( IN LEFT_PAREN ( rhs_operand ( COMMA rhs_operand )* ) RIGHT_PAREN -> ^( IN ^( IN_LHS expr ) ( ^( IN_RHS rhs_operand ) )+ ) ) | ( rel_op exp2= expr -> ^( rel_op $exp1 $exp2) ) | ( -> ^( BOOL_COND expr ) ) )
            int alt121=4;
            switch ( input.LA(1) ) {
            case IS:
                {
                alt121=1;
                }
                break;
            case IN:
                {
                alt121=2;
                }
                break;
            case NUM_OP_EQ:
            case NUM_OP_GT:
            case NUM_OP_GTE:
            case NUM_OP_LT:
            case NUM_OP_LTE:
            case NUM_OP_NE:
            case STR_OP_EQ:
            case STR_OP_GT:
            case STR_OP_GTE:
            case STR_OP_LT:
            case STR_OP_LTE:
            case STR_OP_MATCHES:
            case STR_OP_NE:
                {
                alt121=3;
                }
                break;
            case AND:
            case COMMA:
            case OR:
            case PARALLEL:
            case QMARK:
            case RIGHT_PAREN:
            case SEMI_COLON:
            case THEN:
                {
                alt121=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 121, 0, input);

                throw nvae;

            }

            switch (alt121) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:673:11: ( IS ( NOT )? NULL -> ^( NULL $exp1 ( NOT )? ) )
                    {
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:673:11: ( IS ( NOT )? NULL -> ^( NULL $exp1 ( NOT )? ) )
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:673:13: IS ( NOT )? NULL
                    {
                    IS428=(Token)match(input,IS,FOLLOW_IS_in_unary_cond3984); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IS.add(IS428);


                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:673:16: ( NOT )?
                    int alt119=2;
                    int LA119_0 = input.LA(1);

                    if ( (LA119_0==NOT) ) {
                        alt119=1;
                    }
                    switch (alt119) {
                        case 1 :
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:673:16: NOT
                            {
                            NOT429=(Token)match(input,NOT,FOLLOW_NOT_in_unary_cond3986); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT.add(NOT429);


                            }
                            break;

                    }


                    NULL430=(Token)match(input,NULL,FOLLOW_NULL_in_unary_cond3989); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NULL.add(NULL430);


                    // AST REWRITE
                    // elements: exp1, NOT, NULL
                    // token labels: 
                    // rule labels: exp1, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_exp1=new RewriteRuleSubtreeStream(adaptor,"rule exp1",exp1!=null?exp1.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 673:26: -> ^( NULL $exp1 ( NOT )? )
                    {
                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:673:29: ^( NULL $exp1 ( NOT )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        stream_NULL.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_exp1.nextTree());

                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:673:43: ( NOT )?
                        if ( stream_NOT.hasNext() ) {
                            adaptor.addChild(root_1, 
                            stream_NOT.nextNode()
                            );

                        }
                        stream_NOT.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }


                    }
                    break;
                case 2 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:674:11: ( IN LEFT_PAREN ( rhs_operand ( COMMA rhs_operand )* ) RIGHT_PAREN -> ^( IN ^( IN_LHS expr ) ( ^( IN_RHS rhs_operand ) )+ ) )
                    {
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:674:11: ( IN LEFT_PAREN ( rhs_operand ( COMMA rhs_operand )* ) RIGHT_PAREN -> ^( IN ^( IN_LHS expr ) ( ^( IN_RHS rhs_operand ) )+ ) )
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:674:13: IN LEFT_PAREN ( rhs_operand ( COMMA rhs_operand )* ) RIGHT_PAREN
                    {
                    IN431=(Token)match(input,IN,FOLLOW_IN_in_unary_cond4019); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IN.add(IN431);


                    LEFT_PAREN432=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_unary_cond4021); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN432);


                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:674:27: ( rhs_operand ( COMMA rhs_operand )* )
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:674:29: rhs_operand ( COMMA rhs_operand )*
                    {
                    pushFollow(FOLLOW_rhs_operand_in_unary_cond4025);
                    rhs_operand433=rhs_operand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rhs_operand.add(rhs_operand433.getTree());

                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:674:41: ( COMMA rhs_operand )*
                    loop120:
                    do {
                        int alt120=2;
                        int LA120_0 = input.LA(1);

                        if ( (LA120_0==COMMA) ) {
                            alt120=1;
                        }


                        switch (alt120) {
                    	case 1 :
                    	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:674:43: COMMA rhs_operand
                    	    {
                    	    COMMA434=(Token)match(input,COMMA,FOLLOW_COMMA_in_unary_cond4029); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA434);


                    	    pushFollow(FOLLOW_rhs_operand_in_unary_cond4031);
                    	    rhs_operand435=rhs_operand();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_rhs_operand.add(rhs_operand435.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop120;
                        }
                    } while (true);


                    }


                    RIGHT_PAREN436=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_unary_cond4038); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN436);


                    // AST REWRITE
                    // elements: expr, rhs_operand, IN
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 674:78: -> ^( IN ^( IN_LHS expr ) ( ^( IN_RHS rhs_operand ) )+ )
                    {
                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:674:81: ^( IN ^( IN_LHS expr ) ( ^( IN_RHS rhs_operand ) )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        stream_IN.nextNode()
                        , root_1);

                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:674:87: ^( IN_LHS expr )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(IN_LHS, "IN_LHS")
                        , root_2);

                        adaptor.addChild(root_2, stream_expr.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        if ( !(stream_rhs_operand.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_rhs_operand.hasNext() ) {
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:674:104: ^( IN_RHS rhs_operand )
                            {
                            Object root_2 = (Object)adaptor.nil();
                            root_2 = (Object)adaptor.becomeRoot(
                            (Object)adaptor.create(IN_RHS, "IN_RHS")
                            , root_2);

                            adaptor.addChild(root_2, stream_rhs_operand.nextTree());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_rhs_operand.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }


                    }
                    break;
                case 3 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:675:11: ( rel_op exp2= expr -> ^( rel_op $exp1 $exp2) )
                    {
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:675:11: ( rel_op exp2= expr -> ^( rel_op $exp1 $exp2) )
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:675:13: rel_op exp2= expr
                    {
                    pushFollow(FOLLOW_rel_op_in_unary_cond4079);
                    rel_op437=rel_op();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rel_op.add(rel_op437.getTree());

                    pushFollow(FOLLOW_expr_in_unary_cond4085);
                    exp2=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(exp2.getTree());

                    // AST REWRITE
                    // elements: exp1, rel_op, exp2
                    // token labels: 
                    // rule labels: exp2, exp1, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_exp2=new RewriteRuleSubtreeStream(adaptor,"rule exp2",exp2!=null?exp2.tree:null);
                    RewriteRuleSubtreeStream stream_exp1=new RewriteRuleSubtreeStream(adaptor,"rule exp1",exp1!=null?exp1.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 675:32: -> ^( rel_op $exp1 $exp2)
                    {
                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:675:35: ^( rel_op $exp1 $exp2)
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_rel_op.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_exp1.nextTree());

                        adaptor.addChild(root_1, stream_exp2.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }


                    }
                    break;
                case 4 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:676:11: ( -> ^( BOOL_COND expr ) )
                    {
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:676:11: ( -> ^( BOOL_COND expr ) )
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:676:13: 
                    {
                    // AST REWRITE
                    // elements: expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 676:13: -> ^( BOOL_COND expr )
                    {
                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:676:16: ^( BOOL_COND expr )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BOOL_COND, "BOOL_COND")
                        , root_1);

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
                    // Expressions in parentheses are a little tricky to match as
                    // they could contain either "cond" rules or "expr" rules. If
                    // they are "expr" rules then they're put under a BOOL_COND node
                    // in the tree, but "cond" rules put no extra tokens in the tree.
                    // As we're matching non-recursively we'll parse whatever's in the
                    // brackets, and if the AST has a boolean expression at its root
                    // then we'll assume we've just got a "cond" expression in
                    // brackets, and otherwise we'll assume its an "expr" (and so
                    // we'll have to strip off the BOOL_COND token the "cast_expr"
                    // rule added)
                    BaseTree tree = (BaseTree) retval.getTree();
                    if(tree.getType() == BOOL_COND
                    && tree.getChild(0).getType() == EXPR_IN_PAREN
                    && BOOLEAN_TOKENS.contains(tree.getChild(0).getChild(0).getType())) {
                        retval.tree = tree.getChild(0).getChild(0);
                        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
                    }

                    // For IN expression, we clone the lhs expression (1st child of the
                    // returned tree) and insert it before every rhs expression. For example,
                    //
                    //   lhs IN (rhs1, rhs2, rhs3)
                    // =>
                    //   ^( IN lhs, rhs1, lhs, rhs2, lhs, rhs3 )
                    //
                    // Note that lhs appears three times at index 0, 2 and 4.
                    //
                    // This is needed because in LogicalPlanGenerator.g, we translate this
                    // tree to nested or expressions, and we need to construct a new
                    // LogicalExpression object per rhs expression.
                    if(tree.getType() == IN) {
                        Tree lhs = tree.getChild(0);
                        for(int i = 2; i < tree.getChildCount(); i = i + 2) {
                            tree.insertChild(i, deepCopy(lhs));
                        }
                    }
                }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "unary_cond"


    public static class rhs_operand_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rhs_operand"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:679:1: rhs_operand : expr ;
    public final QueryParser.rhs_operand_return rhs_operand() throws RecognitionException {
        QueryParser.rhs_operand_return retval = new QueryParser.rhs_operand_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.expr_return expr438 =null;



        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:679:13: ( expr )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:679:15: expr
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_in_rhs_operand4134);
            expr438=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr438.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rhs_operand"


    public static class expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:682:1: expr : multi_expr ( ( PLUS | MINUS ) ^ multi_expr )* ;
    public final QueryParser.expr_return expr() throws RecognitionException {
        QueryParser.expr_return retval = new QueryParser.expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set440=null;
        QueryParser.multi_expr_return multi_expr439 =null;

        QueryParser.multi_expr_return multi_expr441 =null;


        Object set440_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:682:6: ( multi_expr ( ( PLUS | MINUS ) ^ multi_expr )* )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:682:8: multi_expr ( ( PLUS | MINUS ) ^ multi_expr )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_multi_expr_in_expr4143);
            multi_expr439=multi_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multi_expr439.getTree());

            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:682:19: ( ( PLUS | MINUS ) ^ multi_expr )*
            loop122:
            do {
                int alt122=2;
                int LA122_0 = input.LA(1);

                if ( (LA122_0==MINUS||LA122_0==PLUS) ) {
                    alt122=1;
                }


                switch (alt122) {
            	case 1 :
            	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:682:21: ( PLUS | MINUS ) ^ multi_expr
            	    {
            	    set440=(Token)input.LT(1);

            	    set440=(Token)input.LT(1);

            	    if ( input.LA(1)==MINUS||input.LA(1)==PLUS ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(
            	        (Object)adaptor.create(set440)
            	        , root_0);
            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_multi_expr_in_expr4158);
            	    multi_expr441=multi_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multi_expr441.getTree());

            	    }
            	    break;

            	default :
            	    break loop122;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr"


    public static class multi_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "multi_expr"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:685:1: multi_expr : cast_expr ( ( STAR | DIV | PERCENT ) ^ cast_expr )* ;
    public final QueryParser.multi_expr_return multi_expr() throws RecognitionException {
        QueryParser.multi_expr_return retval = new QueryParser.multi_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set443=null;
        QueryParser.cast_expr_return cast_expr442 =null;

        QueryParser.cast_expr_return cast_expr444 =null;


        Object set443_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:685:12: ( cast_expr ( ( STAR | DIV | PERCENT ) ^ cast_expr )* )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:685:14: cast_expr ( ( STAR | DIV | PERCENT ) ^ cast_expr )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_cast_expr_in_multi_expr4170);
            cast_expr442=cast_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_expr442.getTree());

            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:685:24: ( ( STAR | DIV | PERCENT ) ^ cast_expr )*
            loop123:
            do {
                int alt123=2;
                int LA123_0 = input.LA(1);

                if ( (LA123_0==DIV||LA123_0==PERCENT||LA123_0==STAR) ) {
                    alt123=1;
                }


                switch (alt123) {
            	case 1 :
            	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:685:26: ( STAR | DIV | PERCENT ) ^ cast_expr
            	    {
            	    set443=(Token)input.LT(1);

            	    set443=(Token)input.LT(1);

            	    if ( input.LA(1)==DIV||input.LA(1)==PERCENT||input.LA(1)==STAR ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(
            	        (Object)adaptor.create(set443)
            	        , root_0);
            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_cast_expr_in_multi_expr4189);
            	    cast_expr444=cast_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_expr444.getTree());

            	    }
            	    break;

            	default :
            	    break loop123;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "multi_expr"


    public static class func_name_suffix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_name_suffix"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:688:1: func_name_suffix : ( ( DOLLAR | PERIOD ) eid )+ ;
    public final QueryParser.func_name_suffix_return func_name_suffix() throws RecognitionException {
        QueryParser.func_name_suffix_return retval = new QueryParser.func_name_suffix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set445=null;
        QueryParser.eid_return eid446 =null;


        Object set445_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:688:18: ( ( ( DOLLAR | PERIOD ) eid )+ )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:688:20: ( ( DOLLAR | PERIOD ) eid )+
            {
            root_0 = (Object)adaptor.nil();


            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:688:20: ( ( DOLLAR | PERIOD ) eid )+
            int cnt124=0;
            loop124:
            do {
                int alt124=2;
                int LA124_0 = input.LA(1);

                if ( (LA124_0==DOLLAR||LA124_0==PERIOD) ) {
                    alt124=1;
                }


                switch (alt124) {
            	case 1 :
            	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:688:22: ( DOLLAR | PERIOD ) eid
            	    {
            	    set445=(Token)input.LT(1);

            	    if ( input.LA(1)==DOLLAR||input.LA(1)==PERIOD ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set445)
            	        );
            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_eid_in_func_name_suffix4213);
            	    eid446=eid();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, eid446.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt124 >= 1 ) break loop124;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(124, input);
                        throw eee;
                }
                cnt124++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_name_suffix"


    public static class cast_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cast_expr"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:691:1: cast_expr : ( scalar | MINUS cast_expr -> ^( NEG cast_expr ) | col_ref_without_identifier ( projection )* | invoker_func ( projection )* | identifier_plus ( projection )* | identifier_plus ( func_name_suffix )? LEFT_PAREN ( real_arg ( COMMA real_arg )* )? RIGHT_PAREN ( projection )* -> ^( FUNC_EVAL identifier_plus ( func_name_suffix )? ( real_arg )* ) ( projection )* | func_name_without_columns LEFT_PAREN ( real_arg ( COMMA real_arg )* )? RIGHT_PAREN ( projection )* -> ^( FUNC_EVAL func_name_without_columns ( real_arg )* ) ( projection )* | CASE ( ( WHEN )=> WHEN cond THEN expr ( WHEN cond THEN expr )* ( ELSE expr )? END ( projection )* -> ^( CASE_COND ^( WHEN ( cond )+ ) ^( THEN ( expr )+ ) ) ( projection )* | expr WHEN rhs_operand THEN rhs_operand ( WHEN rhs_operand THEN rhs_operand )* ( ELSE rhs_operand )? END ( projection )* -> ^( CASE_EXPR ^( CASE_EXPR_LHS expr ) ( ^( CASE_EXPR_RHS rhs_operand ) )+ ) ( projection )* ) | paren_expr | curly_expr | bracket_expr );
    public final QueryParser.cast_expr_return cast_expr() throws RecognitionException {
        QueryParser.cast_expr_return retval = new QueryParser.cast_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token MINUS448=null;
        Token LEFT_PAREN458=null;
        Token COMMA460=null;
        Token RIGHT_PAREN462=null;
        Token LEFT_PAREN465=null;
        Token COMMA467=null;
        Token RIGHT_PAREN469=null;
        Token CASE471=null;
        Token WHEN472=null;
        Token THEN474=null;
        Token WHEN476=null;
        Token THEN478=null;
        Token ELSE480=null;
        Token END482=null;
        Token WHEN485=null;
        Token THEN487=null;
        Token WHEN489=null;
        Token THEN491=null;
        Token ELSE493=null;
        Token END495=null;
        QueryParser.scalar_return scalar447 =null;

        QueryParser.cast_expr_return cast_expr449 =null;

        QueryParser.col_ref_without_identifier_return col_ref_without_identifier450 =null;

        QueryParser.projection_return projection451 =null;

        QueryParser.invoker_func_return invoker_func452 =null;

        QueryParser.projection_return projection453 =null;

        QueryParser.identifier_plus_return identifier_plus454 =null;

        QueryParser.projection_return projection455 =null;

        QueryParser.identifier_plus_return identifier_plus456 =null;

        QueryParser.func_name_suffix_return func_name_suffix457 =null;

        QueryParser.real_arg_return real_arg459 =null;

        QueryParser.real_arg_return real_arg461 =null;

        QueryParser.projection_return projection463 =null;

        QueryParser.func_name_without_columns_return func_name_without_columns464 =null;

        QueryParser.real_arg_return real_arg466 =null;

        QueryParser.real_arg_return real_arg468 =null;

        QueryParser.projection_return projection470 =null;

        QueryParser.cond_return cond473 =null;

        QueryParser.expr_return expr475 =null;

        QueryParser.cond_return cond477 =null;

        QueryParser.expr_return expr479 =null;

        QueryParser.expr_return expr481 =null;

        QueryParser.projection_return projection483 =null;

        QueryParser.expr_return expr484 =null;

        QueryParser.rhs_operand_return rhs_operand486 =null;

        QueryParser.rhs_operand_return rhs_operand488 =null;

        QueryParser.rhs_operand_return rhs_operand490 =null;

        QueryParser.rhs_operand_return rhs_operand492 =null;

        QueryParser.rhs_operand_return rhs_operand494 =null;

        QueryParser.projection_return projection496 =null;

        QueryParser.paren_expr_return paren_expr497 =null;

        QueryParser.curly_expr_return curly_expr498 =null;

        QueryParser.bracket_expr_return bracket_expr499 =null;


        Object MINUS448_tree=null;
        Object LEFT_PAREN458_tree=null;
        Object COMMA460_tree=null;
        Object RIGHT_PAREN462_tree=null;
        Object LEFT_PAREN465_tree=null;
        Object COMMA467_tree=null;
        Object RIGHT_PAREN469_tree=null;
        Object CASE471_tree=null;
        Object WHEN472_tree=null;
        Object THEN474_tree=null;
        Object WHEN476_tree=null;
        Object THEN478_tree=null;
        Object ELSE480_tree=null;
        Object END482_tree=null;
        Object WHEN485_tree=null;
        Object THEN487_tree=null;
        Object WHEN489_tree=null;
        Object THEN491_tree=null;
        Object ELSE493_tree=null;
        Object END495_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_ELSE=new RewriteRuleTokenStream(adaptor,"token ELSE");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_CASE=new RewriteRuleTokenStream(adaptor,"token CASE");
        RewriteRuleSubtreeStream stream_func_name_suffix=new RewriteRuleSubtreeStream(adaptor,"rule func_name_suffix");
        RewriteRuleSubtreeStream stream_identifier_plus=new RewriteRuleSubtreeStream(adaptor,"rule identifier_plus");
        RewriteRuleSubtreeStream stream_real_arg=new RewriteRuleSubtreeStream(adaptor,"rule real_arg");
        RewriteRuleSubtreeStream stream_rhs_operand=new RewriteRuleSubtreeStream(adaptor,"rule rhs_operand");
        RewriteRuleSubtreeStream stream_cast_expr=new RewriteRuleSubtreeStream(adaptor,"rule cast_expr");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_projection=new RewriteRuleSubtreeStream(adaptor,"rule projection");
        RewriteRuleSubtreeStream stream_cond=new RewriteRuleSubtreeStream(adaptor,"rule cond");
        RewriteRuleSubtreeStream stream_func_name_without_columns=new RewriteRuleSubtreeStream(adaptor,"rule func_name_without_columns");
        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:757:11: ( scalar | MINUS cast_expr -> ^( NEG cast_expr ) | col_ref_without_identifier ( projection )* | invoker_func ( projection )* | identifier_plus ( projection )* | identifier_plus ( func_name_suffix )? LEFT_PAREN ( real_arg ( COMMA real_arg )* )? RIGHT_PAREN ( projection )* -> ^( FUNC_EVAL identifier_plus ( func_name_suffix )? ( real_arg )* ) ( projection )* | func_name_without_columns LEFT_PAREN ( real_arg ( COMMA real_arg )* )? RIGHT_PAREN ( projection )* -> ^( FUNC_EVAL func_name_without_columns ( real_arg )* ) ( projection )* | CASE ( ( WHEN )=> WHEN cond THEN expr ( WHEN cond THEN expr )* ( ELSE expr )? END ( projection )* -> ^( CASE_COND ^( WHEN ( cond )+ ) ^( THEN ( expr )+ ) ) ( projection )* | expr WHEN rhs_operand THEN rhs_operand ( WHEN rhs_operand THEN rhs_operand )* ( ELSE rhs_operand )? END ( projection )* -> ^( CASE_EXPR ^( CASE_EXPR_LHS expr ) ( ^( CASE_EXPR_RHS rhs_operand ) )+ ) ( projection )* ) | paren_expr | curly_expr | bracket_expr )
            int alt142=11;
            alt142 = dfa142.predict(input);
            switch (alt142) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:757:13: scalar
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_scalar_in_cast_expr4248);
                    scalar447=scalar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, scalar447.getTree());

                    }
                    break;
                case 2 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:758:13: MINUS cast_expr
                    {
                    MINUS448=(Token)match(input,MINUS,FOLLOW_MINUS_in_cast_expr4262); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS448);


                    pushFollow(FOLLOW_cast_expr_in_cast_expr4264);
                    cast_expr449=cast_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cast_expr.add(cast_expr449.getTree());

                    // AST REWRITE
                    // elements: cast_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 758:29: -> ^( NEG cast_expr )
                    {
                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:758:32: ^( NEG cast_expr )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(NEG, "NEG")
                        , root_1);

                        adaptor.addChild(root_1, stream_cast_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:762:13: col_ref_without_identifier ( projection )*
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_col_ref_without_identifier_in_cast_expr4321);
                    col_ref_without_identifier450=col_ref_without_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_ref_without_identifier450.getTree());

                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:762:40: ( projection )*
                    loop125:
                    do {
                        int alt125=2;
                        int LA125_0 = input.LA(1);

                        if ( (LA125_0==PERIOD||LA125_0==POUND) ) {
                            alt125=1;
                        }


                        switch (alt125) {
                    	case 1 :
                    	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:762:40: projection
                    	    {
                    	    pushFollow(FOLLOW_projection_in_cast_expr4323);
                    	    projection451=projection();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, projection451.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop125;
                        }
                    } while (true);


                    }
                    break;
                case 4 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:763:13: invoker_func ( projection )*
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_invoker_func_in_cast_expr4338);
                    invoker_func452=invoker_func();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invoker_func452.getTree());

                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:763:26: ( projection )*
                    loop126:
                    do {
                        int alt126=2;
                        int LA126_0 = input.LA(1);

                        if ( (LA126_0==PERIOD||LA126_0==POUND) ) {
                            alt126=1;
                        }


                        switch (alt126) {
                    	case 1 :
                    	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:763:26: projection
                    	    {
                    	    pushFollow(FOLLOW_projection_in_cast_expr4340);
                    	    projection453=projection();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, projection453.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop126;
                        }
                    } while (true);


                    }
                    break;
                case 5 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:764:13: identifier_plus ( projection )*
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_identifier_plus_in_cast_expr4355);
                    identifier_plus454=identifier_plus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier_plus454.getTree());

                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:764:29: ( projection )*
                    loop127:
                    do {
                        int alt127=2;
                        int LA127_0 = input.LA(1);

                        if ( (LA127_0==PERIOD||LA127_0==POUND) ) {
                            alt127=1;
                        }


                        switch (alt127) {
                    	case 1 :
                    	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:764:29: projection
                    	    {
                    	    pushFollow(FOLLOW_projection_in_cast_expr4357);
                    	    projection455=projection();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, projection455.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop127;
                        }
                    } while (true);


                    }
                    break;
                case 6 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:765:13: identifier_plus ( func_name_suffix )? LEFT_PAREN ( real_arg ( COMMA real_arg )* )? RIGHT_PAREN ( projection )*
                    {
                    pushFollow(FOLLOW_identifier_plus_in_cast_expr4372);
                    identifier_plus456=identifier_plus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus456.getTree());

                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:765:29: ( func_name_suffix )?
                    int alt128=2;
                    int LA128_0 = input.LA(1);

                    if ( (LA128_0==DOLLAR||LA128_0==PERIOD) ) {
                        alt128=1;
                    }
                    switch (alt128) {
                        case 1 :
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:765:29: func_name_suffix
                            {
                            pushFollow(FOLLOW_func_name_suffix_in_cast_expr4374);
                            func_name_suffix457=func_name_suffix();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_func_name_suffix.add(func_name_suffix457.getTree());

                            }
                            break;

                    }


                    LEFT_PAREN458=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_cast_expr4377); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN458);


                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:765:58: ( real_arg ( COMMA real_arg )* )?
                    int alt130=2;
                    int LA130_0 = input.LA(1);

                    if ( (LA130_0==ALL||LA130_0==AND||(LA130_0 >= AS && LA130_0 <= ASSERT)||(LA130_0 >= BIGDECIMAL && LA130_0 <= BIGINTEGERNUMBER)||(LA130_0 >= BY && LA130_0 <= COGROUP)||(LA130_0 >= CROSS && LA130_0 <= DATETIME)||LA130_0==DEFINE||LA130_0==DESC||LA130_0==DISTINCT||LA130_0==DOLLARVAR||(LA130_0 >= DOUBLENUMBER && LA130_0 <= END)||LA130_0==FALSE||LA130_0==FILTER||(LA130_0 >= FLOATNUMBER && LA130_0 <= GROUP)||(LA130_0 >= IDENTIFIER && LA130_0 <= INPUT)||(LA130_0 >= INTEGER && LA130_0 <= LEFT_PAREN)||(LA130_0 >= LIMIT && LA130_0 <= LOAD)||LA130_0==LONGINTEGER||(LA130_0 >= MAPREDUCE && LA130_0 <= MINUS)||LA130_0==NULL||(LA130_0 >= OR && LA130_0 <= ORDER)||(LA130_0 >= OUTER && LA130_0 <= PARTITION)||(LA130_0 >= QUOTEDSTRING && LA130_0 <= RIGHT)||(LA130_0 >= ROLLUP && LA130_0 <= SAMPLE)||LA130_0==SHIP||(LA130_0 >= SPLIT && LA130_0 <= TRUE)||(LA130_0 >= UNION && LA130_0 <= USING)||LA130_0==WHEN||(LA130_0 >= BOOL && LA130_0 <= BOOL_COND)||LA130_0==REALIAS) ) {
                        alt130=1;
                    }
                    switch (alt130) {
                        case 1 :
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:765:60: real_arg ( COMMA real_arg )*
                            {
                            pushFollow(FOLLOW_real_arg_in_cast_expr4381);
                            real_arg459=real_arg();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_real_arg.add(real_arg459.getTree());

                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:765:69: ( COMMA real_arg )*
                            loop129:
                            do {
                                int alt129=2;
                                int LA129_0 = input.LA(1);

                                if ( (LA129_0==COMMA) ) {
                                    alt129=1;
                                }


                                switch (alt129) {
                            	case 1 :
                            	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:765:71: COMMA real_arg
                            	    {
                            	    COMMA460=(Token)match(input,COMMA,FOLLOW_COMMA_in_cast_expr4385); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA460);


                            	    pushFollow(FOLLOW_real_arg_in_cast_expr4387);
                            	    real_arg461=real_arg();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_real_arg.add(real_arg461.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop129;
                                }
                            } while (true);


                            }
                            break;

                    }


                    RIGHT_PAREN462=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_cast_expr4395); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN462);


                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:765:104: ( projection )*
                    loop131:
                    do {
                        int alt131=2;
                        int LA131_0 = input.LA(1);

                        if ( (LA131_0==PERIOD||LA131_0==POUND) ) {
                            alt131=1;
                        }


                        switch (alt131) {
                    	case 1 :
                    	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:765:104: projection
                    	    {
                    	    pushFollow(FOLLOW_projection_in_cast_expr4397);
                    	    projection463=projection();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_projection.add(projection463.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop131;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: identifier_plus, func_name_suffix, projection, real_arg
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 765:116: -> ^( FUNC_EVAL identifier_plus ( func_name_suffix )? ( real_arg )* ) ( projection )*
                    {
                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:765:119: ^( FUNC_EVAL identifier_plus ( func_name_suffix )? ( real_arg )* )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FUNC_EVAL, "FUNC_EVAL")
                        , root_1);

                        adaptor.addChild(root_1, stream_identifier_plus.nextTree());

                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:765:148: ( func_name_suffix )?
                        if ( stream_func_name_suffix.hasNext() ) {
                            adaptor.addChild(root_1, stream_func_name_suffix.nextTree());

                        }
                        stream_func_name_suffix.reset();

                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:765:166: ( real_arg )*
                        while ( stream_real_arg.hasNext() ) {
                            adaptor.addChild(root_1, stream_real_arg.nextTree());

                        }
                        stream_real_arg.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:765:178: ( projection )*
                        while ( stream_projection.hasNext() ) {
                            adaptor.addChild(root_0, stream_projection.nextTree());

                        }
                        stream_projection.reset();

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 7 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:766:13: func_name_without_columns LEFT_PAREN ( real_arg ( COMMA real_arg )* )? RIGHT_PAREN ( projection )*
                    {
                    pushFollow(FOLLOW_func_name_without_columns_in_cast_expr4431);
                    func_name_without_columns464=func_name_without_columns();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_func_name_without_columns.add(func_name_without_columns464.getTree());

                    LEFT_PAREN465=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_cast_expr4433); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN465);


                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:766:50: ( real_arg ( COMMA real_arg )* )?
                    int alt133=2;
                    int LA133_0 = input.LA(1);

                    if ( (LA133_0==ALL||LA133_0==AND||(LA133_0 >= AS && LA133_0 <= ASSERT)||(LA133_0 >= BIGDECIMAL && LA133_0 <= BIGINTEGERNUMBER)||(LA133_0 >= BY && LA133_0 <= COGROUP)||(LA133_0 >= CROSS && LA133_0 <= DATETIME)||LA133_0==DEFINE||LA133_0==DESC||LA133_0==DISTINCT||LA133_0==DOLLARVAR||(LA133_0 >= DOUBLENUMBER && LA133_0 <= END)||LA133_0==FALSE||LA133_0==FILTER||(LA133_0 >= FLOATNUMBER && LA133_0 <= GROUP)||(LA133_0 >= IDENTIFIER && LA133_0 <= INPUT)||(LA133_0 >= INTEGER && LA133_0 <= LEFT_PAREN)||(LA133_0 >= LIMIT && LA133_0 <= LOAD)||LA133_0==LONGINTEGER||(LA133_0 >= MAPREDUCE && LA133_0 <= MINUS)||LA133_0==NULL||(LA133_0 >= OR && LA133_0 <= ORDER)||(LA133_0 >= OUTER && LA133_0 <= PARTITION)||(LA133_0 >= QUOTEDSTRING && LA133_0 <= RIGHT)||(LA133_0 >= ROLLUP && LA133_0 <= SAMPLE)||LA133_0==SHIP||(LA133_0 >= SPLIT && LA133_0 <= TRUE)||(LA133_0 >= UNION && LA133_0 <= USING)||LA133_0==WHEN||(LA133_0 >= BOOL && LA133_0 <= BOOL_COND)||LA133_0==REALIAS) ) {
                        alt133=1;
                    }
                    switch (alt133) {
                        case 1 :
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:766:52: real_arg ( COMMA real_arg )*
                            {
                            pushFollow(FOLLOW_real_arg_in_cast_expr4437);
                            real_arg466=real_arg();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_real_arg.add(real_arg466.getTree());

                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:766:61: ( COMMA real_arg )*
                            loop132:
                            do {
                                int alt132=2;
                                int LA132_0 = input.LA(1);

                                if ( (LA132_0==COMMA) ) {
                                    alt132=1;
                                }


                                switch (alt132) {
                            	case 1 :
                            	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:766:63: COMMA real_arg
                            	    {
                            	    COMMA467=(Token)match(input,COMMA,FOLLOW_COMMA_in_cast_expr4441); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA467);


                            	    pushFollow(FOLLOW_real_arg_in_cast_expr4443);
                            	    real_arg468=real_arg();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_real_arg.add(real_arg468.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop132;
                                }
                            } while (true);


                            }
                            break;

                    }


                    RIGHT_PAREN469=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_cast_expr4451); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN469);


                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:766:96: ( projection )*
                    loop134:
                    do {
                        int alt134=2;
                        int LA134_0 = input.LA(1);

                        if ( (LA134_0==PERIOD||LA134_0==POUND) ) {
                            alt134=1;
                        }


                        switch (alt134) {
                    	case 1 :
                    	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:766:96: projection
                    	    {
                    	    pushFollow(FOLLOW_projection_in_cast_expr4453);
                    	    projection470=projection();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_projection.add(projection470.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop134;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: real_arg, projection, func_name_without_columns
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 766:108: -> ^( FUNC_EVAL func_name_without_columns ( real_arg )* ) ( projection )*
                    {
                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:766:111: ^( FUNC_EVAL func_name_without_columns ( real_arg )* )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FUNC_EVAL, "FUNC_EVAL")
                        , root_1);

                        adaptor.addChild(root_1, stream_func_name_without_columns.nextTree());

                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:766:150: ( real_arg )*
                        while ( stream_real_arg.hasNext() ) {
                            adaptor.addChild(root_1, stream_real_arg.nextTree());

                        }
                        stream_real_arg.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:766:162: ( projection )*
                        while ( stream_projection.hasNext() ) {
                            adaptor.addChild(root_0, stream_projection.nextTree());

                        }
                        stream_projection.reset();

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 8 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:767:13: CASE ( ( WHEN )=> WHEN cond THEN expr ( WHEN cond THEN expr )* ( ELSE expr )? END ( projection )* -> ^( CASE_COND ^( WHEN ( cond )+ ) ^( THEN ( expr )+ ) ) ( projection )* | expr WHEN rhs_operand THEN rhs_operand ( WHEN rhs_operand THEN rhs_operand )* ( ELSE rhs_operand )? END ( projection )* -> ^( CASE_EXPR ^( CASE_EXPR_LHS expr ) ( ^( CASE_EXPR_RHS rhs_operand ) )+ ) ( projection )* )
                    {
                    CASE471=(Token)match(input,CASE,FOLLOW_CASE_in_cast_expr4484); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CASE.add(CASE471);


                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:767:18: ( ( WHEN )=> WHEN cond THEN expr ( WHEN cond THEN expr )* ( ELSE expr )? END ( projection )* -> ^( CASE_COND ^( WHEN ( cond )+ ) ^( THEN ( expr )+ ) ) ( projection )* | expr WHEN rhs_operand THEN rhs_operand ( WHEN rhs_operand THEN rhs_operand )* ( ELSE rhs_operand )? END ( projection )* -> ^( CASE_EXPR ^( CASE_EXPR_LHS expr ) ( ^( CASE_EXPR_RHS rhs_operand ) )+ ) ( projection )* )
                    int alt141=2;
                    alt141 = dfa141.predict(input);
                    switch (alt141) {
                        case 1 :
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:767:20: ( WHEN )=> WHEN cond THEN expr ( WHEN cond THEN expr )* ( ELSE expr )? END ( projection )*
                            {
                            WHEN472=(Token)match(input,WHEN,FOLLOW_WHEN_in_cast_expr4493); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHEN.add(WHEN472);


                            pushFollow(FOLLOW_cond_in_cast_expr4495);
                            cond473=cond();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_cond.add(cond473.getTree());

                            THEN474=(Token)match(input,THEN,FOLLOW_THEN_in_cast_expr4497); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THEN.add(THEN474);


                            pushFollow(FOLLOW_expr_in_cast_expr4499);
                            expr475=expr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expr.add(expr475.getTree());

                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:767:49: ( WHEN cond THEN expr )*
                            loop135:
                            do {
                                int alt135=2;
                                int LA135_0 = input.LA(1);

                                if ( (LA135_0==WHEN) ) {
                                    alt135=1;
                                }


                                switch (alt135) {
                            	case 1 :
                            	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:767:51: WHEN cond THEN expr
                            	    {
                            	    WHEN476=(Token)match(input,WHEN,FOLLOW_WHEN_in_cast_expr4503); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_WHEN.add(WHEN476);


                            	    pushFollow(FOLLOW_cond_in_cast_expr4505);
                            	    cond477=cond();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_cond.add(cond477.getTree());

                            	    THEN478=(Token)match(input,THEN,FOLLOW_THEN_in_cast_expr4507); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_THEN.add(THEN478);


                            	    pushFollow(FOLLOW_expr_in_cast_expr4509);
                            	    expr479=expr();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_expr.add(expr479.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop135;
                                }
                            } while (true);


                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:767:74: ( ELSE expr )?
                            int alt136=2;
                            int LA136_0 = input.LA(1);

                            if ( (LA136_0==ELSE) ) {
                                alt136=1;
                            }
                            switch (alt136) {
                                case 1 :
                                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:767:76: ELSE expr
                                    {
                                    ELSE480=(Token)match(input,ELSE,FOLLOW_ELSE_in_cast_expr4516); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_ELSE.add(ELSE480);


                                    pushFollow(FOLLOW_expr_in_cast_expr4518);
                                    expr481=expr();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expr.add(expr481.getTree());

                                    }
                                    break;

                            }


                            END482=(Token)match(input,END,FOLLOW_END_in_cast_expr4523); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_END.add(END482);


                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:767:93: ( projection )*
                            loop137:
                            do {
                                int alt137=2;
                                int LA137_0 = input.LA(1);

                                if ( (LA137_0==PERIOD||LA137_0==POUND) ) {
                                    alt137=1;
                                }


                                switch (alt137) {
                            	case 1 :
                            	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:767:93: projection
                            	    {
                            	    pushFollow(FOLLOW_projection_in_cast_expr4525);
                            	    projection483=projection();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_projection.add(projection483.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop137;
                                }
                            } while (true);


                            // AST REWRITE
                            // elements: cond, THEN, expr, WHEN, projection
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {

                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 767:105: -> ^( CASE_COND ^( WHEN ( cond )+ ) ^( THEN ( expr )+ ) ) ( projection )*
                            {
                                // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:767:108: ^( CASE_COND ^( WHEN ( cond )+ ) ^( THEN ( expr )+ ) )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot(
                                (Object)adaptor.create(CASE_COND, "CASE_COND")
                                , root_1);

                                // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:767:121: ^( WHEN ( cond )+ )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot(
                                stream_WHEN.nextNode()
                                , root_2);

                                if ( !(stream_cond.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_cond.hasNext() ) {
                                    adaptor.addChild(root_2, stream_cond.nextTree());

                                }
                                stream_cond.reset();

                                adaptor.addChild(root_1, root_2);
                                }

                                // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:767:135: ^( THEN ( expr )+ )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot(
                                stream_THEN.nextNode()
                                , root_2);

                                if ( !(stream_expr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expr.hasNext() ) {
                                    adaptor.addChild(root_2, stream_expr.nextTree());

                                }
                                stream_expr.reset();

                                adaptor.addChild(root_1, root_2);
                                }

                                adaptor.addChild(root_0, root_1);
                                }

                                // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:767:151: ( projection )*
                                while ( stream_projection.hasNext() ) {
                                    adaptor.addChild(root_0, stream_projection.nextTree());

                                }
                                stream_projection.reset();

                            }


                            retval.tree = root_0;
                            }

                            }
                            break;
                        case 2 :
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:768:20: expr WHEN rhs_operand THEN rhs_operand ( WHEN rhs_operand THEN rhs_operand )* ( ELSE rhs_operand )? END ( projection )*
                            {
                            pushFollow(FOLLOW_expr_in_cast_expr4572);
                            expr484=expr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expr.add(expr484.getTree());

                            WHEN485=(Token)match(input,WHEN,FOLLOW_WHEN_in_cast_expr4574); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHEN.add(WHEN485);


                            pushFollow(FOLLOW_rhs_operand_in_cast_expr4576);
                            rhs_operand486=rhs_operand();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_rhs_operand.add(rhs_operand486.getTree());

                            THEN487=(Token)match(input,THEN,FOLLOW_THEN_in_cast_expr4578); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THEN.add(THEN487);


                            pushFollow(FOLLOW_rhs_operand_in_cast_expr4580);
                            rhs_operand488=rhs_operand();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_rhs_operand.add(rhs_operand488.getTree());

                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:768:59: ( WHEN rhs_operand THEN rhs_operand )*
                            loop138:
                            do {
                                int alt138=2;
                                int LA138_0 = input.LA(1);

                                if ( (LA138_0==WHEN) ) {
                                    alt138=1;
                                }


                                switch (alt138) {
                            	case 1 :
                            	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:768:61: WHEN rhs_operand THEN rhs_operand
                            	    {
                            	    WHEN489=(Token)match(input,WHEN,FOLLOW_WHEN_in_cast_expr4584); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_WHEN.add(WHEN489);


                            	    pushFollow(FOLLOW_rhs_operand_in_cast_expr4586);
                            	    rhs_operand490=rhs_operand();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_rhs_operand.add(rhs_operand490.getTree());

                            	    THEN491=(Token)match(input,THEN,FOLLOW_THEN_in_cast_expr4588); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_THEN.add(THEN491);


                            	    pushFollow(FOLLOW_rhs_operand_in_cast_expr4590);
                            	    rhs_operand492=rhs_operand();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_rhs_operand.add(rhs_operand492.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop138;
                                }
                            } while (true);


                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:768:98: ( ELSE rhs_operand )?
                            int alt139=2;
                            int LA139_0 = input.LA(1);

                            if ( (LA139_0==ELSE) ) {
                                alt139=1;
                            }
                            switch (alt139) {
                                case 1 :
                                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:768:100: ELSE rhs_operand
                                    {
                                    ELSE493=(Token)match(input,ELSE,FOLLOW_ELSE_in_cast_expr4597); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_ELSE.add(ELSE493);


                                    pushFollow(FOLLOW_rhs_operand_in_cast_expr4599);
                                    rhs_operand494=rhs_operand();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_rhs_operand.add(rhs_operand494.getTree());

                                    }
                                    break;

                            }


                            END495=(Token)match(input,END,FOLLOW_END_in_cast_expr4604); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_END.add(END495);


                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:768:124: ( projection )*
                            loop140:
                            do {
                                int alt140=2;
                                int LA140_0 = input.LA(1);

                                if ( (LA140_0==PERIOD||LA140_0==POUND) ) {
                                    alt140=1;
                                }


                                switch (alt140) {
                            	case 1 :
                            	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:768:124: projection
                            	    {
                            	    pushFollow(FOLLOW_projection_in_cast_expr4606);
                            	    projection496=projection();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_projection.add(projection496.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop140;
                                }
                            } while (true);


                            // AST REWRITE
                            // elements: projection, expr, rhs_operand
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {

                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 769:18: -> ^( CASE_EXPR ^( CASE_EXPR_LHS expr ) ( ^( CASE_EXPR_RHS rhs_operand ) )+ ) ( projection )*
                            {
                                // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:769:21: ^( CASE_EXPR ^( CASE_EXPR_LHS expr ) ( ^( CASE_EXPR_RHS rhs_operand ) )+ )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot(
                                (Object)adaptor.create(CASE_EXPR, "CASE_EXPR")
                                , root_1);

                                // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:769:34: ^( CASE_EXPR_LHS expr )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot(
                                (Object)adaptor.create(CASE_EXPR_LHS, "CASE_EXPR_LHS")
                                , root_2);

                                adaptor.addChild(root_2, stream_expr.nextTree());

                                adaptor.addChild(root_1, root_2);
                                }

                                if ( !(stream_rhs_operand.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_rhs_operand.hasNext() ) {
                                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:769:56: ^( CASE_EXPR_RHS rhs_operand )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot(
                                    (Object)adaptor.create(CASE_EXPR_RHS, "CASE_EXPR_RHS")
                                    , root_2);

                                    adaptor.addChild(root_2, stream_rhs_operand.nextTree());

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_rhs_operand.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                                // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:769:88: ( projection )*
                                while ( stream_projection.hasNext() ) {
                                    adaptor.addChild(root_0, stream_projection.nextTree());

                                }
                                stream_projection.reset();

                            }


                            retval.tree = root_0;
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 9 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:771:13: paren_expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_paren_expr_in_cast_expr4681);
                    paren_expr497=paren_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, paren_expr497.getTree());

                    }
                    break;
                case 10 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:772:13: curly_expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_curly_expr_in_cast_expr4695);
                    curly_expr498=curly_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, curly_expr498.getTree());

                    }
                    break;
                case 11 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:773:13: bracket_expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_bracket_expr_in_cast_expr4709);
                    bracket_expr499=bracket_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracket_expr499.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
                    BaseTree tree = (BaseTree) retval.getTree();

                    // the parser does an initial optimisation step: it removes TOTUPLE / TOMAP / TOBAG
                    // function calls if it knows they'll just return the input (i.e. because the function's
                    // argument is a literal). We'll do this here by post-processing the result:
                    if(tree.getType() == FUNC_EVAL) {
                        Integer func = FUNC_TO_LITERAL.get(tree.getChild(0).getType());
                        if(func != null) {
                            boolean canBeOptimised = true;
                            for(int arg = 1; arg < tree.getChildCount() && canBeOptimised; ++arg) {
                                canBeOptimised &= LITERAL_TOKENS.contains(tree.getChild(arg).getType());
                            }
                            if(canBeOptimised) {
                                retval.tree = adaptor.create(func, func.toString());
                                ((BaseTree)retval.tree).addChildren(tree.getChildren());
                                ((BaseTree)retval.tree).deleteChild(0); // the (e.g.) TOBAG token
                                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
                            }
                        }
                    }

                    // a minor correction to the token text for formatting -
                    // we want NEG's text to be the same as MINUSes
                    if(tree.getType() == NEG) {
                        ((CommonTree)tree).token.setText("-");
                    }

                    // As noted below, brackets around a single literal mean a tuple
                    // of that literal, not a nested expression which evaluates to
                    // that literal. Remember that a NULL with children is a boolean
                    // expression, not a literal!
                    if(tree.getType() == EXPR_IN_PAREN
                    && LITERAL_TOKENS.contains(tree.getChild(0).getType())
                    && (tree.getChild(0).getType() != NULL || tree.getChild(0).getChildCount() == 0)) {
                        ((CommonTree)tree).token.setType(TUPLE_VAL);
                    }

                    // For CASE statement, we clone the case expression (1st child of the
                    // returned tree) and insert it before every when expression. For example,
                    //
                    //   CASE e1
                    //     WHEN e2 THEN e3
                    //     WHEN e4 THEN e5
                    //     ELSE e6
                    //   END
                    // =>
                    //   ^( CASE e1, e2, e3, e1, e4, e5, e6 )
                    //
                    // Note that e1 appears twice at index 0 and 3.
                    //
                    // This is needed because in LogicalPlanGenerator.g, we translate this
                    // tree to nested bincond expressions, and we need to construct a new
                    // LogicalExpression object per when branch.
                    if(tree.getType() == CASE_EXPR) {
                        Tree caseExpr = tree.getChild(0);
                        int childCount = tree.getChildCount();
                        boolean hasElse = childCount % 2 == 0;
                        int whenBranchCount = ( childCount - (hasElse ? 2 : 1) ) / 2;
                        for(int i = 1; i < whenBranchCount; i++) {
                            tree.insertChild(3*i, deepCopy(caseExpr));
                        }
                    }
                }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cast_expr"


    public static class invoker_func_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "invoker_func"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:776:1: invoker_func : INVOKE ( AMPERSAND | LEFT_PAREN real_arg RIGHT_PAREN ) (packageName= identifier_plus PERIOD )* methodName= identifier_plus LEFT_PAREN ( real_arg ( COMMA real_arg )* )? RIGHT_PAREN -> ^( INVOKER_FUNC_EVAL IDENTIFIER[Joiner.on(\".\").join(packageStr)] IDENTIFIER[methodStr] IDENTIFIER[staticStr] ( real_arg )* ) ;
    public final QueryParser.invoker_func_return invoker_func() throws RecognitionException {
        QueryParser.invoker_func_return retval = new QueryParser.invoker_func_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token INVOKE500=null;
        Token AMPERSAND501=null;
        Token LEFT_PAREN502=null;
        Token RIGHT_PAREN504=null;
        Token PERIOD505=null;
        Token LEFT_PAREN506=null;
        Token COMMA508=null;
        Token RIGHT_PAREN510=null;
        QueryParser.identifier_plus_return packageName =null;

        QueryParser.identifier_plus_return methodName =null;

        QueryParser.real_arg_return real_arg503 =null;

        QueryParser.real_arg_return real_arg507 =null;

        QueryParser.real_arg_return real_arg509 =null;


        Object INVOKE500_tree=null;
        Object AMPERSAND501_tree=null;
        Object LEFT_PAREN502_tree=null;
        Object RIGHT_PAREN504_tree=null;
        Object PERIOD505_tree=null;
        Object LEFT_PAREN506_tree=null;
        Object COMMA508_tree=null;
        Object RIGHT_PAREN510_tree=null;
        RewriteRuleTokenStream stream_AMPERSAND=new RewriteRuleTokenStream(adaptor,"token AMPERSAND");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,"token PERIOD");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_INVOKE=new RewriteRuleTokenStream(adaptor,"token INVOKE");
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleSubtreeStream stream_real_arg=new RewriteRuleSubtreeStream(adaptor,"rule real_arg");
        RewriteRuleSubtreeStream stream_identifier_plus=new RewriteRuleSubtreeStream(adaptor,"rule identifier_plus");

            String staticStr = "true";
            List<String> packageStr = Lists.newArrayList();
            String methodStr = null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:782:3: ( INVOKE ( AMPERSAND | LEFT_PAREN real_arg RIGHT_PAREN ) (packageName= identifier_plus PERIOD )* methodName= identifier_plus LEFT_PAREN ( real_arg ( COMMA real_arg )* )? RIGHT_PAREN -> ^( INVOKER_FUNC_EVAL IDENTIFIER[Joiner.on(\".\").join(packageStr)] IDENTIFIER[methodStr] IDENTIFIER[staticStr] ( real_arg )* ) )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:782:3: INVOKE ( AMPERSAND | LEFT_PAREN real_arg RIGHT_PAREN ) (packageName= identifier_plus PERIOD )* methodName= identifier_plus LEFT_PAREN ( real_arg ( COMMA real_arg )* )? RIGHT_PAREN
            {
            INVOKE500=(Token)match(input,INVOKE,FOLLOW_INVOKE_in_invoker_func4723); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INVOKE.add(INVOKE500);


            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:782:10: ( AMPERSAND | LEFT_PAREN real_arg RIGHT_PAREN )
            int alt143=2;
            int LA143_0 = input.LA(1);

            if ( (LA143_0==AMPERSAND) ) {
                alt143=1;
            }
            else if ( (LA143_0==LEFT_PAREN) ) {
                alt143=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 143, 0, input);

                throw nvae;

            }
            switch (alt143) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:782:12: AMPERSAND
                    {
                    AMPERSAND501=(Token)match(input,AMPERSAND,FOLLOW_AMPERSAND_in_invoker_func4727); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AMPERSAND.add(AMPERSAND501);


                    }
                    break;
                case 2 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:782:24: LEFT_PAREN real_arg RIGHT_PAREN
                    {
                    LEFT_PAREN502=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_invoker_func4731); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN502);


                    pushFollow(FOLLOW_real_arg_in_invoker_func4733);
                    real_arg503=real_arg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_real_arg.add(real_arg503.getTree());

                    if ( state.backtracking==0 ) { staticStr = "false"; }

                    RIGHT_PAREN504=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_invoker_func4737); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN504);


                    }
                    break;

            }


            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:782:83: (packageName= identifier_plus PERIOD )*
            loop144:
            do {
                int alt144=2;
                int LA144_0 = input.LA(1);

                if ( (LA144_0==IDENTIFIER) ) {
                    int LA144_1 = input.LA(2);

                    if ( (LA144_1==PERIOD) ) {
                        alt144=1;
                    }


                }
                else if ( (LA144_0==CUBE||(LA144_0 >= ELSE && LA144_0 <= END)||LA144_0==IN||LA144_0==RANK||LA144_0==THEN||LA144_0==WHEN) ) {
                    int LA144_2 = input.LA(2);

                    if ( (LA144_2==PERIOD) ) {
                        alt144=1;
                    }


                }


                switch (alt144) {
            	case 1 :
            	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:782:85: packageName= identifier_plus PERIOD
            	    {
            	    pushFollow(FOLLOW_identifier_plus_in_invoker_func4745);
            	    packageName=identifier_plus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_identifier_plus.add(packageName.getTree());

            	    PERIOD505=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_invoker_func4747); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD505);


            	    if ( state.backtracking==0 ) { packageStr.add((packageName!=null?input.toString(packageName.start,packageName.stop):null)); }

            	    }
            	    break;

            	default :
            	    break loop144;
                }
            } while (true);


            pushFollow(FOLLOW_identifier_plus_in_invoker_func4756);
            methodName=identifier_plus();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier_plus.add(methodName.getTree());

            if ( state.backtracking==0 ) { methodStr=(methodName!=null?input.toString(methodName.start,methodName.stop):null); }

            LEFT_PAREN506=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_invoker_func4760); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN506);


            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:782:232: ( real_arg ( COMMA real_arg )* )?
            int alt146=2;
            int LA146_0 = input.LA(1);

            if ( (LA146_0==ALL||LA146_0==AND||(LA146_0 >= AS && LA146_0 <= ASSERT)||(LA146_0 >= BIGDECIMAL && LA146_0 <= BIGINTEGERNUMBER)||(LA146_0 >= BY && LA146_0 <= COGROUP)||(LA146_0 >= CROSS && LA146_0 <= DATETIME)||LA146_0==DEFINE||LA146_0==DESC||LA146_0==DISTINCT||LA146_0==DOLLARVAR||(LA146_0 >= DOUBLENUMBER && LA146_0 <= END)||LA146_0==FALSE||LA146_0==FILTER||(LA146_0 >= FLOATNUMBER && LA146_0 <= GROUP)||(LA146_0 >= IDENTIFIER && LA146_0 <= INPUT)||(LA146_0 >= INTEGER && LA146_0 <= LEFT_PAREN)||(LA146_0 >= LIMIT && LA146_0 <= LOAD)||LA146_0==LONGINTEGER||(LA146_0 >= MAPREDUCE && LA146_0 <= MINUS)||LA146_0==NULL||(LA146_0 >= OR && LA146_0 <= ORDER)||(LA146_0 >= OUTER && LA146_0 <= PARTITION)||(LA146_0 >= QUOTEDSTRING && LA146_0 <= RIGHT)||(LA146_0 >= ROLLUP && LA146_0 <= SAMPLE)||LA146_0==SHIP||(LA146_0 >= SPLIT && LA146_0 <= TRUE)||(LA146_0 >= UNION && LA146_0 <= USING)||LA146_0==WHEN||(LA146_0 >= BOOL && LA146_0 <= BOOL_COND)||LA146_0==REALIAS) ) {
                alt146=1;
            }
            switch (alt146) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:782:234: real_arg ( COMMA real_arg )*
                    {
                    pushFollow(FOLLOW_real_arg_in_invoker_func4764);
                    real_arg507=real_arg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_real_arg.add(real_arg507.getTree());

                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:782:243: ( COMMA real_arg )*
                    loop145:
                    do {
                        int alt145=2;
                        int LA145_0 = input.LA(1);

                        if ( (LA145_0==COMMA) ) {
                            alt145=1;
                        }


                        switch (alt145) {
                    	case 1 :
                    	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:782:245: COMMA real_arg
                    	    {
                    	    COMMA508=(Token)match(input,COMMA,FOLLOW_COMMA_in_invoker_func4768); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA508);


                    	    pushFollow(FOLLOW_real_arg_in_invoker_func4770);
                    	    real_arg509=real_arg();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_real_arg.add(real_arg509.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop145;
                        }
                    } while (true);


                    }
                    break;

            }


            RIGHT_PAREN510=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_invoker_func4778); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN510);


            // AST REWRITE
            // elements: real_arg
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 783:15: -> ^( INVOKER_FUNC_EVAL IDENTIFIER[Joiner.on(\".\").join(packageStr)] IDENTIFIER[methodStr] IDENTIFIER[staticStr] ( real_arg )* )
            {
                // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:783:18: ^( INVOKER_FUNC_EVAL IDENTIFIER[Joiner.on(\".\").join(packageStr)] IDENTIFIER[methodStr] IDENTIFIER[staticStr] ( real_arg )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INVOKER_FUNC_EVAL, "INVOKER_FUNC_EVAL")
                , root_1);

                adaptor.addChild(root_1, 
                (Object)adaptor.create(IDENTIFIER, Joiner.on(".").join(packageStr))
                );

                adaptor.addChild(root_1, 
                (Object)adaptor.create(IDENTIFIER, methodStr)
                );

                adaptor.addChild(root_1, 
                (Object)adaptor.create(IDENTIFIER, staticStr)
                );

                // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:783:127: ( real_arg )*
                while ( stream_real_arg.hasNext() ) {
                    adaptor.addChild(root_1, stream_real_arg.nextTree());

                }
                stream_real_arg.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "invoker_func"


    public static class paren_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "paren_expr"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:793:1: paren_expr : LEFT_PAREN ! try_implicit_map_cast ;
    public final QueryParser.paren_expr_return paren_expr() throws RecognitionException {
        QueryParser.paren_expr_return retval = new QueryParser.paren_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN511=null;
        QueryParser.try_implicit_map_cast_return try_implicit_map_cast512 =null;


        Object LEFT_PAREN511_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:833:5: ( LEFT_PAREN ! try_implicit_map_cast )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:833:7: LEFT_PAREN ! try_implicit_map_cast
            {
            root_0 = (Object)adaptor.nil();


            LEFT_PAREN511=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_paren_expr4845); if (state.failed) return retval;

            pushFollow(FOLLOW_try_implicit_map_cast_in_paren_expr4848);
            try_implicit_map_cast512=try_implicit_map_cast();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, try_implicit_map_cast512.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
                    BaseTree tree = (BaseTree)retval.getTree();

                    // the other side of the @after block in unary_cond: if we've
                    // matched an EXPR_IN_PAREN we expect the nested expression to
                    // be an "expr", not a "cond", so we should strip off the
                    // BOOL_COND token.
                    if(tree.getType() == EXPR_IN_PAREN
                    && tree.getChild(0).getType() == BOOL_COND) {
                        int type = tree.getChild(0).getChild(0).getType();
                        // NULL is a special case - if it has children it's a boolean
                        // expression, and if not it's a literal NULL. Note that we
                        // replace *all* children
                        if(!BOOLEAN_TOKENS.contains(type)
                        || (type == NULL && tree.getChild(0).getChild(0).getChildCount() == 0)) {
                            Tree addChildrenOf = tree.getChild(0);
                            for(int i = 0; i < tree.getChildCount(); ++i)
                                tree.deleteChild(i);
                            for(int i = 0; i < addChildrenOf.getChildCount(); ++i)
                                tree.addChild(addChildrenOf.getChild(i));
                        }
                    }

                    // A function call to TOTUPLE is inserted into the AST for
                    // some tuple literals - but as we assume the first expression
                    // after an open bracket is a "cond" rule, and as "cond" rules
                    // nest "expr" rules under a BOOL_COND token we get an invalid
                    // AST. We'll remove this BOOL_COND here:
                    if(tree.getType() == FUNC_EVAL
                    && tree.getChild(0).getType() == TOTUPLE
                    && tree.getChildCount() > 1
                    && tree.getChild(1).getType() == BOOL_COND) {
                        Tree insertChildrenOf = tree.getChild(1);
                        tree.deleteChild(1);
                        for(int i = insertChildrenOf.getChildCount() - 1; i >= 0; --i)
                            tree.insertChild(1, insertChildrenOf.getChild(i));
                    }
                }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "paren_expr"


    public static class try_implicit_map_cast_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "try_implicit_map_cast"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:836:1: try_implicit_map_cast : ( ( implicit_map_type RIGHT_PAREN cast_expr )=> implicit_map_type RIGHT_PAREN cast_expr -> ^( CAST_EXPR implicit_map_type cast_expr ) | after_left_paren );
    public final QueryParser.try_implicit_map_cast_return try_implicit_map_cast() throws RecognitionException {
        QueryParser.try_implicit_map_cast_return retval = new QueryParser.try_implicit_map_cast_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token RIGHT_PAREN514=null;
        QueryParser.implicit_map_type_return implicit_map_type513 =null;

        QueryParser.cast_expr_return cast_expr515 =null;

        QueryParser.after_left_paren_return after_left_paren516 =null;


        Object RIGHT_PAREN514_tree=null;
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_cast_expr=new RewriteRuleSubtreeStream(adaptor,"rule cast_expr");
        RewriteRuleSubtreeStream stream_implicit_map_type=new RewriteRuleSubtreeStream(adaptor,"rule implicit_map_type");
        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:843:12: ( ( implicit_map_type RIGHT_PAREN cast_expr )=> implicit_map_type RIGHT_PAREN cast_expr -> ^( CAST_EXPR implicit_map_type cast_expr ) | after_left_paren )
            int alt147=2;
            alt147 = dfa147.predict(input);
            switch (alt147) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:843:14: ( implicit_map_type RIGHT_PAREN cast_expr )=> implicit_map_type RIGHT_PAREN cast_expr
                    {
                    pushFollow(FOLLOW_implicit_map_type_in_try_implicit_map_cast4951);
                    implicit_map_type513=implicit_map_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_implicit_map_type.add(implicit_map_type513.getTree());

                    RIGHT_PAREN514=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_try_implicit_map_cast4953); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN514);


                    pushFollow(FOLLOW_cast_expr_in_try_implicit_map_cast4955);
                    cast_expr515=cast_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cast_expr.add(cast_expr515.getTree());

                    // AST REWRITE
                    // elements: cast_expr, implicit_map_type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 843:100: -> ^( CAST_EXPR implicit_map_type cast_expr )
                    {
                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:843:103: ^( CAST_EXPR implicit_map_type cast_expr )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(CAST_EXPR, "CAST_EXPR")
                        , root_1);

                        adaptor.addChild(root_1, stream_implicit_map_type.nextTree());

                        adaptor.addChild(root_1, stream_cast_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:844:14: after_left_paren
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_after_left_paren_in_try_implicit_map_cast4982);
                    after_left_paren516=after_left_paren();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, after_left_paren516.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "try_implicit_map_cast"


    public static class after_left_paren_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "after_left_paren"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:847:1: after_left_paren : ( explicit_type_cast RIGHT_PAREN cast_expr -> ^( CAST_EXPR explicit_type_cast cast_expr ) | RIGHT_PAREN ( projection )* -> ^( TUPLE_VAL ) ( projection )* | STAR ( COMMA real_arg )* RIGHT_PAREN ( projection )* -> ^( FUNC_EVAL TOTUPLE STAR ( real_arg )* ) ( projection )* | col_range ( COMMA real_arg )* RIGHT_PAREN ( projection )* -> ^( FUNC_EVAL TOTUPLE col_range ( real_arg )* ) ( projection )* | cond ( ( ( COMMA real_arg )+ RIGHT_PAREN ( projection )* -> ^( FUNC_EVAL TOTUPLE cond ( real_arg )+ ) ( projection )* ) | ( RIGHT_PAREN -> ^( EXPR_IN_PAREN cond ) ) | ( QMARK exp1= expr COLON exp2= expr RIGHT_PAREN -> ^( BIN_EXPR cond $exp1 $exp2) ) ) );
    public final QueryParser.after_left_paren_return after_left_paren() throws RecognitionException {
        QueryParser.after_left_paren_return retval = new QueryParser.after_left_paren_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token RIGHT_PAREN518=null;
        Token RIGHT_PAREN520=null;
        Token STAR522=null;
        Token COMMA523=null;
        Token RIGHT_PAREN525=null;
        Token COMMA528=null;
        Token RIGHT_PAREN530=null;
        Token COMMA533=null;
        Token RIGHT_PAREN535=null;
        Token RIGHT_PAREN537=null;
        Token QMARK538=null;
        Token COLON539=null;
        Token RIGHT_PAREN540=null;
        QueryParser.expr_return exp1 =null;

        QueryParser.expr_return exp2 =null;

        QueryParser.explicit_type_cast_return explicit_type_cast517 =null;

        QueryParser.cast_expr_return cast_expr519 =null;

        QueryParser.projection_return projection521 =null;

        QueryParser.real_arg_return real_arg524 =null;

        QueryParser.projection_return projection526 =null;

        QueryParser.col_range_return col_range527 =null;

        QueryParser.real_arg_return real_arg529 =null;

        QueryParser.projection_return projection531 =null;

        QueryParser.cond_return cond532 =null;

        QueryParser.real_arg_return real_arg534 =null;

        QueryParser.projection_return projection536 =null;


        Object RIGHT_PAREN518_tree=null;
        Object RIGHT_PAREN520_tree=null;
        Object STAR522_tree=null;
        Object COMMA523_tree=null;
        Object RIGHT_PAREN525_tree=null;
        Object COMMA528_tree=null;
        Object RIGHT_PAREN530_tree=null;
        Object COMMA533_tree=null;
        Object RIGHT_PAREN535_tree=null;
        Object RIGHT_PAREN537_tree=null;
        Object QMARK538_tree=null;
        Object COLON539_tree=null;
        Object RIGHT_PAREN540_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_QMARK=new RewriteRuleTokenStream(adaptor,"token QMARK");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleSubtreeStream stream_col_range=new RewriteRuleSubtreeStream(adaptor,"rule col_range");
        RewriteRuleSubtreeStream stream_real_arg=new RewriteRuleSubtreeStream(adaptor,"rule real_arg");
        RewriteRuleSubtreeStream stream_explicit_type_cast=new RewriteRuleSubtreeStream(adaptor,"rule explicit_type_cast");
        RewriteRuleSubtreeStream stream_cast_expr=new RewriteRuleSubtreeStream(adaptor,"rule cast_expr");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_projection=new RewriteRuleSubtreeStream(adaptor,"rule projection");
        RewriteRuleSubtreeStream stream_cond=new RewriteRuleSubtreeStream(adaptor,"rule cond");
        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:847:18: ( explicit_type_cast RIGHT_PAREN cast_expr -> ^( CAST_EXPR explicit_type_cast cast_expr ) | RIGHT_PAREN ( projection )* -> ^( TUPLE_VAL ) ( projection )* | STAR ( COMMA real_arg )* RIGHT_PAREN ( projection )* -> ^( FUNC_EVAL TOTUPLE STAR ( real_arg )* ) ( projection )* | col_range ( COMMA real_arg )* RIGHT_PAREN ( projection )* -> ^( FUNC_EVAL TOTUPLE col_range ( real_arg )* ) ( projection )* | cond ( ( ( COMMA real_arg )+ RIGHT_PAREN ( projection )* -> ^( FUNC_EVAL TOTUPLE cond ( real_arg )+ ) ( projection )* ) | ( RIGHT_PAREN -> ^( EXPR_IN_PAREN cond ) ) | ( QMARK exp1= expr COLON exp2= expr RIGHT_PAREN -> ^( BIN_EXPR cond $exp1 $exp2) ) ) )
            int alt156=5;
            switch ( input.LA(1) ) {
            case BIGINTEGER:
                {
                int LA156_1 = input.LA(2);

                if ( (LA156_1==RIGHT_PAREN) ) {
                    alt156=1;
                }
                else if ( (LA156_1==DOLLAR||LA156_1==LEFT_PAREN||LA156_1==PERIOD) ) {
                    alt156=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 156, 1, input);

                    throw nvae;

                }
                }
                break;
            case BAG:
            case BOOLEAN:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case MAP:
            case TUPLE:
                {
                alt156=1;
                }
                break;
            case RIGHT_PAREN:
                {
                alt156=2;
                }
                break;
            case STAR:
                {
                alt156=3;
                }
                break;
            case DOLLARVAR:
            case GROUP:
                {
                int LA156_5 = input.LA(2);

                if ( (LA156_5==DOUBLE_PERIOD) ) {
                    alt156=4;
                }
                else if ( (LA156_5==AND||LA156_5==COMMA||LA156_5==DIV||LA156_5==IN||LA156_5==IS||LA156_5==MINUS||(LA156_5 >= NUM_OP_EQ && LA156_5 <= NUM_OP_NE)||LA156_5==OR||(LA156_5 >= PERCENT && LA156_5 <= QMARK)||LA156_5==RIGHT_PAREN||LA156_5==STAR||(LA156_5 >= STR_OP_EQ && LA156_5 <= STR_OP_NE)) ) {
                    alt156=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 156, 5, input);

                    throw nvae;

                }
                }
                break;
            case IDENTIFIER:
                {
                int LA156_6 = input.LA(2);

                if ( (LA156_6==DOUBLE_PERIOD) ) {
                    alt156=4;
                }
                else if ( (LA156_6==AND||LA156_6==COMMA||(LA156_6 >= DIV && LA156_6 <= DOLLAR)||LA156_6==IN||LA156_6==IS||LA156_6==LEFT_PAREN||LA156_6==MINUS||(LA156_6 >= NUM_OP_EQ && LA156_6 <= NUM_OP_NE)||LA156_6==OR||(LA156_6 >= PERCENT && LA156_6 <= QMARK)||LA156_6==RIGHT_PAREN||LA156_6==STAR||(LA156_6 >= STR_OP_EQ && LA156_6 <= STR_OP_NE)) ) {
                    alt156=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 156, 6, input);

                    throw nvae;

                }
                }
                break;
            case CUBE:
            case ELSE:
            case END:
            case IN:
            case RANK:
            case THEN:
            case WHEN:
                {
                int LA156_7 = input.LA(2);

                if ( (LA156_7==DOUBLE_PERIOD) ) {
                    alt156=4;
                }
                else if ( (LA156_7==AND||LA156_7==COMMA||(LA156_7 >= DIV && LA156_7 <= DOLLAR)||LA156_7==IN||LA156_7==IS||LA156_7==LEFT_PAREN||LA156_7==MINUS||(LA156_7 >= NUM_OP_EQ && LA156_7 <= NUM_OP_NE)||LA156_7==OR||(LA156_7 >= PERCENT && LA156_7 <= QMARK)||LA156_7==RIGHT_PAREN||LA156_7==STAR||(LA156_7 >= STR_OP_EQ && LA156_7 <= STR_OP_NE)) ) {
                    alt156=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 156, 7, input);

                    throw nvae;

                }
                }
                break;
            case DOUBLE_PERIOD:
                {
                alt156=4;
                }
                break;
            case ALL:
            case AND:
            case AS:
            case ASC:
            case ASSERT:
            case BIGDECIMALNUMBER:
            case BIGINTEGERNUMBER:
            case BY:
            case CACHE:
            case CASE:
            case COGROUP:
            case CROSS:
            case DEFINE:
            case DESC:
            case DISTINCT:
            case DOUBLENUMBER:
            case FALSE:
            case FILTER:
            case FLOATNUMBER:
            case FOREACH:
            case FULL:
            case GENERATE:
            case IF:
            case IMPORT:
            case INNER:
            case INPUT:
            case INTEGER:
            case INTO:
            case INVOKE:
            case IS:
            case JOIN:
            case LEFT:
            case LEFT_BRACKET:
            case LEFT_CURLY:
            case LEFT_PAREN:
            case LIMIT:
            case LOAD:
            case LONGINTEGER:
            case MAPREDUCE:
            case MINUS:
            case NOT:
            case NULL:
            case OR:
            case ORDER:
            case OUTER:
            case OUTPUT:
            case PARALLEL:
            case PARTITION:
            case QUOTEDSTRING:
            case REGISTER:
            case RETURNS:
            case RIGHT:
            case ROLLUP:
            case SAMPLE:
            case SHIP:
            case SPLIT:
            case STDERROR:
            case STDIN:
            case STDOUT:
            case STORE:
            case STREAM:
            case STR_OP_EQ:
            case STR_OP_GT:
            case STR_OP_GTE:
            case STR_OP_LT:
            case STR_OP_LTE:
            case STR_OP_MATCHES:
            case STR_OP_NE:
            case THROUGH:
            case TRUE:
            case UNION:
            case USING:
            case BOOL:
            case BOOL_COND:
            case REALIAS:
                {
                alt156=5;
                }
                break;
            case BIGDECIMAL:
                {
                int LA156_10 = input.LA(2);

                if ( (LA156_10==RIGHT_PAREN) ) {
                    alt156=1;
                }
                else if ( (LA156_10==DOLLAR||LA156_10==LEFT_PAREN||LA156_10==PERIOD) ) {
                    alt156=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 156, 10, input);

                    throw nvae;

                }
                }
                break;
            case DATETIME:
                {
                int LA156_11 = input.LA(2);

                if ( (LA156_11==RIGHT_PAREN) ) {
                    alt156=1;
                }
                else if ( (LA156_11==DOLLAR||LA156_11==LEFT_PAREN||LA156_11==PERIOD) ) {
                    alt156=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 156, 11, input);

                    throw nvae;

                }
                }
                break;
            case CHARARRAY:
                {
                int LA156_12 = input.LA(2);

                if ( (LA156_12==RIGHT_PAREN) ) {
                    alt156=1;
                }
                else if ( (LA156_12==DOLLAR||LA156_12==LEFT_PAREN||LA156_12==PERIOD) ) {
                    alt156=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 156, 12, input);

                    throw nvae;

                }
                }
                break;
            case BYTEARRAY:
                {
                int LA156_13 = input.LA(2);

                if ( (LA156_13==RIGHT_PAREN) ) {
                    alt156=1;
                }
                else if ( (LA156_13==DOLLAR||LA156_13==LEFT_PAREN||LA156_13==PERIOD) ) {
                    alt156=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 156, 13, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 156, 0, input);

                throw nvae;

            }

            switch (alt156) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:847:20: explicit_type_cast RIGHT_PAREN cast_expr
                    {
                    pushFollow(FOLLOW_explicit_type_cast_in_after_left_paren4991);
                    explicit_type_cast517=explicit_type_cast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_explicit_type_cast.add(explicit_type_cast517.getTree());

                    RIGHT_PAREN518=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_after_left_paren4993); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN518);


                    pushFollow(FOLLOW_cast_expr_in_after_left_paren4995);
                    cast_expr519=cast_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cast_expr.add(cast_expr519.getTree());

                    // AST REWRITE
                    // elements: cast_expr, explicit_type_cast
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 847:61: -> ^( CAST_EXPR explicit_type_cast cast_expr )
                    {
                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:847:64: ^( CAST_EXPR explicit_type_cast cast_expr )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(CAST_EXPR, "CAST_EXPR")
                        , root_1);

                        adaptor.addChild(root_1, stream_explicit_type_cast.nextTree());

                        adaptor.addChild(root_1, stream_cast_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:849:20: RIGHT_PAREN ( projection )*
                    {
                    RIGHT_PAREN520=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_after_left_paren5046); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN520);


                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:849:32: ( projection )*
                    loop148:
                    do {
                        int alt148=2;
                        int LA148_0 = input.LA(1);

                        if ( (LA148_0==PERIOD||LA148_0==POUND) ) {
                            alt148=1;
                        }


                        switch (alt148) {
                    	case 1 :
                    	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:849:32: projection
                    	    {
                    	    pushFollow(FOLLOW_projection_in_after_left_paren5048);
                    	    projection521=projection();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_projection.add(projection521.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop148;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: projection
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 849:44: -> ^( TUPLE_VAL ) ( projection )*
                    {
                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:849:47: ^( TUPLE_VAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(TUPLE_VAL, "TUPLE_VAL")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:849:62: ( projection )*
                        while ( stream_projection.hasNext() ) {
                            adaptor.addChild(root_0, stream_projection.nextTree());

                        }
                        stream_projection.reset();

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:850:20: STAR ( COMMA real_arg )* RIGHT_PAREN ( projection )*
                    {
                    STAR522=(Token)match(input,STAR,FOLLOW_STAR_in_after_left_paren5081); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(STAR522);


                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:850:25: ( COMMA real_arg )*
                    loop149:
                    do {
                        int alt149=2;
                        int LA149_0 = input.LA(1);

                        if ( (LA149_0==COMMA) ) {
                            alt149=1;
                        }


                        switch (alt149) {
                    	case 1 :
                    	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:850:27: COMMA real_arg
                    	    {
                    	    COMMA523=(Token)match(input,COMMA,FOLLOW_COMMA_in_after_left_paren5085); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA523);


                    	    pushFollow(FOLLOW_real_arg_in_after_left_paren5087);
                    	    real_arg524=real_arg();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_real_arg.add(real_arg524.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop149;
                        }
                    } while (true);


                    RIGHT_PAREN525=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_after_left_paren5092); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN525);


                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:850:57: ( projection )*
                    loop150:
                    do {
                        int alt150=2;
                        int LA150_0 = input.LA(1);

                        if ( (LA150_0==PERIOD||LA150_0==POUND) ) {
                            alt150=1;
                        }


                        switch (alt150) {
                    	case 1 :
                    	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:850:57: projection
                    	    {
                    	    pushFollow(FOLLOW_projection_in_after_left_paren5094);
                    	    projection526=projection();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_projection.add(projection526.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop150;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: real_arg, projection, STAR
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 850:69: -> ^( FUNC_EVAL TOTUPLE STAR ( real_arg )* ) ( projection )*
                    {
                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:850:72: ^( FUNC_EVAL TOTUPLE STAR ( real_arg )* )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FUNC_EVAL, "FUNC_EVAL")
                        , root_1);

                        adaptor.addChild(root_1, 
                        (Object)adaptor.create(TOTUPLE, "TOTUPLE")
                        );

                        adaptor.addChild(root_1, 
                        stream_STAR.nextNode()
                        );

                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:850:98: ( real_arg )*
                        while ( stream_real_arg.hasNext() ) {
                            adaptor.addChild(root_1, stream_real_arg.nextTree());

                        }
                        stream_real_arg.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:850:110: ( projection )*
                        while ( stream_projection.hasNext() ) {
                            adaptor.addChild(root_0, stream_projection.nextTree());

                        }
                        stream_projection.reset();

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:851:20: col_range ( COMMA real_arg )* RIGHT_PAREN ( projection )*
                    {
                    pushFollow(FOLLOW_col_range_in_after_left_paren5134);
                    col_range527=col_range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_col_range.add(col_range527.getTree());

                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:851:30: ( COMMA real_arg )*
                    loop151:
                    do {
                        int alt151=2;
                        int LA151_0 = input.LA(1);

                        if ( (LA151_0==COMMA) ) {
                            alt151=1;
                        }


                        switch (alt151) {
                    	case 1 :
                    	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:851:32: COMMA real_arg
                    	    {
                    	    COMMA528=(Token)match(input,COMMA,FOLLOW_COMMA_in_after_left_paren5138); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA528);


                    	    pushFollow(FOLLOW_real_arg_in_after_left_paren5140);
                    	    real_arg529=real_arg();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_real_arg.add(real_arg529.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop151;
                        }
                    } while (true);


                    RIGHT_PAREN530=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_after_left_paren5145); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN530);


                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:851:62: ( projection )*
                    loop152:
                    do {
                        int alt152=2;
                        int LA152_0 = input.LA(1);

                        if ( (LA152_0==PERIOD||LA152_0==POUND) ) {
                            alt152=1;
                        }


                        switch (alt152) {
                    	case 1 :
                    	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:851:62: projection
                    	    {
                    	    pushFollow(FOLLOW_projection_in_after_left_paren5147);
                    	    projection531=projection();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_projection.add(projection531.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop152;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: col_range, projection, real_arg
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 851:74: -> ^( FUNC_EVAL TOTUPLE col_range ( real_arg )* ) ( projection )*
                    {
                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:851:77: ^( FUNC_EVAL TOTUPLE col_range ( real_arg )* )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FUNC_EVAL, "FUNC_EVAL")
                        , root_1);

                        adaptor.addChild(root_1, 
                        (Object)adaptor.create(TOTUPLE, "TOTUPLE")
                        );

                        adaptor.addChild(root_1, stream_col_range.nextTree());

                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:851:108: ( real_arg )*
                        while ( stream_real_arg.hasNext() ) {
                            adaptor.addChild(root_1, stream_real_arg.nextTree());

                        }
                        stream_real_arg.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:851:120: ( projection )*
                        while ( stream_projection.hasNext() ) {
                            adaptor.addChild(root_0, stream_projection.nextTree());

                        }
                        stream_projection.reset();

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:856:20: cond ( ( ( COMMA real_arg )+ RIGHT_PAREN ( projection )* -> ^( FUNC_EVAL TOTUPLE cond ( real_arg )+ ) ( projection )* ) | ( RIGHT_PAREN -> ^( EXPR_IN_PAREN cond ) ) | ( QMARK exp1= expr COLON exp2= expr RIGHT_PAREN -> ^( BIN_EXPR cond $exp1 $exp2) ) )
                    {
                    pushFollow(FOLLOW_cond_in_after_left_paren5259);
                    cond532=cond();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cond.add(cond532.getTree());

                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:857:20: ( ( ( COMMA real_arg )+ RIGHT_PAREN ( projection )* -> ^( FUNC_EVAL TOTUPLE cond ( real_arg )+ ) ( projection )* ) | ( RIGHT_PAREN -> ^( EXPR_IN_PAREN cond ) ) | ( QMARK exp1= expr COLON exp2= expr RIGHT_PAREN -> ^( BIN_EXPR cond $exp1 $exp2) ) )
                    int alt155=3;
                    switch ( input.LA(1) ) {
                    case COMMA:
                        {
                        alt155=1;
                        }
                        break;
                    case RIGHT_PAREN:
                        {
                        alt155=2;
                        }
                        break;
                    case QMARK:
                        {
                        alt155=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 155, 0, input);

                        throw nvae;

                    }

                    switch (alt155) {
                        case 1 :
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:857:22: ( ( COMMA real_arg )+ RIGHT_PAREN ( projection )* -> ^( FUNC_EVAL TOTUPLE cond ( real_arg )+ ) ( projection )* )
                            {
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:857:22: ( ( COMMA real_arg )+ RIGHT_PAREN ( projection )* -> ^( FUNC_EVAL TOTUPLE cond ( real_arg )+ ) ( projection )* )
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:857:24: ( COMMA real_arg )+ RIGHT_PAREN ( projection )*
                            {
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:857:24: ( COMMA real_arg )+
                            int cnt153=0;
                            loop153:
                            do {
                                int alt153=2;
                                int LA153_0 = input.LA(1);

                                if ( (LA153_0==COMMA) ) {
                                    alt153=1;
                                }


                                switch (alt153) {
                            	case 1 :
                            	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:857:26: COMMA real_arg
                            	    {
                            	    COMMA533=(Token)match(input,COMMA,FOLLOW_COMMA_in_after_left_paren5286); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA533);


                            	    pushFollow(FOLLOW_real_arg_in_after_left_paren5288);
                            	    real_arg534=real_arg();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_real_arg.add(real_arg534.getTree());

                            	    }
                            	    break;

                            	default :
                            	    if ( cnt153 >= 1 ) break loop153;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(153, input);
                                        throw eee;
                                }
                                cnt153++;
                            } while (true);


                            RIGHT_PAREN535=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_after_left_paren5293); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN535);


                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:857:56: ( projection )*
                            loop154:
                            do {
                                int alt154=2;
                                int LA154_0 = input.LA(1);

                                if ( (LA154_0==PERIOD||LA154_0==POUND) ) {
                                    alt154=1;
                                }


                                switch (alt154) {
                            	case 1 :
                            	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:857:56: projection
                            	    {
                            	    pushFollow(FOLLOW_projection_in_after_left_paren5295);
                            	    projection536=projection();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_projection.add(projection536.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop154;
                                }
                            } while (true);


                            // AST REWRITE
                            // elements: cond, projection, real_arg
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {

                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 857:68: -> ^( FUNC_EVAL TOTUPLE cond ( real_arg )+ ) ( projection )*
                            {
                                // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:857:71: ^( FUNC_EVAL TOTUPLE cond ( real_arg )+ )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot(
                                (Object)adaptor.create(FUNC_EVAL, "FUNC_EVAL")
                                , root_1);

                                adaptor.addChild(root_1, 
                                (Object)adaptor.create(TOTUPLE, "TOTUPLE")
                                );

                                adaptor.addChild(root_1, stream_cond.nextTree());

                                if ( !(stream_real_arg.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_real_arg.hasNext() ) {
                                    adaptor.addChild(root_1, stream_real_arg.nextTree());

                                }
                                stream_real_arg.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                                // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:857:109: ( projection )*
                                while ( stream_projection.hasNext() ) {
                                    adaptor.addChild(root_0, stream_projection.nextTree());

                                }
                                stream_projection.reset();

                            }


                            retval.tree = root_0;
                            }

                            }


                            }
                            break;
                        case 2 :
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:858:22: ( RIGHT_PAREN -> ^( EXPR_IN_PAREN cond ) )
                            {
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:858:22: ( RIGHT_PAREN -> ^( EXPR_IN_PAREN cond ) )
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:858:24: RIGHT_PAREN
                            {
                            RIGHT_PAREN537=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_after_left_paren5341); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN537);


                            // AST REWRITE
                            // elements: cond
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {

                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 858:36: -> ^( EXPR_IN_PAREN cond )
                            {
                                // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:858:39: ^( EXPR_IN_PAREN cond )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot(
                                (Object)adaptor.create(EXPR_IN_PAREN, "EXPR_IN_PAREN")
                                , root_1);

                                adaptor.addChild(root_1, stream_cond.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }


                            retval.tree = root_0;
                            }

                            }


                            }
                            break;
                        case 3 :
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:859:22: ( QMARK exp1= expr COLON exp2= expr RIGHT_PAREN -> ^( BIN_EXPR cond $exp1 $exp2) )
                            {
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:859:22: ( QMARK exp1= expr COLON exp2= expr RIGHT_PAREN -> ^( BIN_EXPR cond $exp1 $exp2) )
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:859:24: QMARK exp1= expr COLON exp2= expr RIGHT_PAREN
                            {
                            QMARK538=(Token)match(input,QMARK,FOLLOW_QMARK_in_after_left_paren5378); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QMARK.add(QMARK538);


                            pushFollow(FOLLOW_expr_in_after_left_paren5384);
                            exp1=expr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expr.add(exp1.getTree());

                            COLON539=(Token)match(input,COLON,FOLLOW_COLON_in_after_left_paren5386); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(COLON539);


                            pushFollow(FOLLOW_expr_in_after_left_paren5392);
                            exp2=expr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expr.add(exp2.getTree());

                            RIGHT_PAREN540=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_after_left_paren5394); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN540);


                            // AST REWRITE
                            // elements: exp1, exp2, cond
                            // token labels: 
                            // rule labels: exp2, exp1, retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {

                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_exp2=new RewriteRuleSubtreeStream(adaptor,"rule exp2",exp2!=null?exp2.tree:null);
                            RewriteRuleSubtreeStream stream_exp1=new RewriteRuleSubtreeStream(adaptor,"rule exp1",exp1!=null?exp1.tree:null);
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 859:72: -> ^( BIN_EXPR cond $exp1 $exp2)
                            {
                                // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:859:75: ^( BIN_EXPR cond $exp1 $exp2)
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot(
                                (Object)adaptor.create(BIN_EXPR, "BIN_EXPR")
                                , root_1);

                                adaptor.addChild(root_1, stream_cond.nextTree());

                                adaptor.addChild(root_1, stream_exp1.nextTree());

                                adaptor.addChild(root_1, stream_exp2.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }


                            retval.tree = root_0;
                            }

                            }


                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "after_left_paren"


    public static class curly_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "curly_expr"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:862:1: curly_expr : ( LEFT_CURLY real_arg ( COMMA real_arg )* RIGHT_CURLY ( projection )* -> ^( FUNC_EVAL TOBAG ( real_arg )+ ) ( projection )* | LEFT_CURLY RIGHT_CURLY ( projection )* -> ^( BAG_VAL ) ( projection )* );
    public final QueryParser.curly_expr_return curly_expr() throws RecognitionException {
        QueryParser.curly_expr_return retval = new QueryParser.curly_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_CURLY541=null;
        Token COMMA543=null;
        Token RIGHT_CURLY545=null;
        Token LEFT_CURLY547=null;
        Token RIGHT_CURLY548=null;
        QueryParser.real_arg_return real_arg542 =null;

        QueryParser.real_arg_return real_arg544 =null;

        QueryParser.projection_return projection546 =null;

        QueryParser.projection_return projection549 =null;


        Object LEFT_CURLY541_tree=null;
        Object COMMA543_tree=null;
        Object RIGHT_CURLY545_tree=null;
        Object LEFT_CURLY547_tree=null;
        Object RIGHT_CURLY548_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LEFT_CURLY=new RewriteRuleTokenStream(adaptor,"token LEFT_CURLY");
        RewriteRuleTokenStream stream_RIGHT_CURLY=new RewriteRuleTokenStream(adaptor,"token RIGHT_CURLY");
        RewriteRuleSubtreeStream stream_real_arg=new RewriteRuleSubtreeStream(adaptor,"rule real_arg");
        RewriteRuleSubtreeStream stream_projection=new RewriteRuleSubtreeStream(adaptor,"rule projection");
        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:862:12: ( LEFT_CURLY real_arg ( COMMA real_arg )* RIGHT_CURLY ( projection )* -> ^( FUNC_EVAL TOBAG ( real_arg )+ ) ( projection )* | LEFT_CURLY RIGHT_CURLY ( projection )* -> ^( BAG_VAL ) ( projection )* )
            int alt160=2;
            int LA160_0 = input.LA(1);

            if ( (LA160_0==LEFT_CURLY) ) {
                int LA160_1 = input.LA(2);

                if ( (LA160_1==RIGHT_CURLY) ) {
                    alt160=2;
                }
                else if ( (LA160_1==ALL||LA160_1==AND||(LA160_1 >= AS && LA160_1 <= ASSERT)||(LA160_1 >= BIGDECIMAL && LA160_1 <= BIGINTEGERNUMBER)||(LA160_1 >= BY && LA160_1 <= COGROUP)||(LA160_1 >= CROSS && LA160_1 <= DATETIME)||LA160_1==DEFINE||LA160_1==DESC||LA160_1==DISTINCT||LA160_1==DOLLARVAR||(LA160_1 >= DOUBLENUMBER && LA160_1 <= END)||LA160_1==FALSE||LA160_1==FILTER||(LA160_1 >= FLOATNUMBER && LA160_1 <= GROUP)||(LA160_1 >= IDENTIFIER && LA160_1 <= INPUT)||(LA160_1 >= INTEGER && LA160_1 <= LEFT_PAREN)||(LA160_1 >= LIMIT && LA160_1 <= LOAD)||LA160_1==LONGINTEGER||(LA160_1 >= MAPREDUCE && LA160_1 <= MINUS)||LA160_1==NULL||(LA160_1 >= OR && LA160_1 <= ORDER)||(LA160_1 >= OUTER && LA160_1 <= PARTITION)||(LA160_1 >= QUOTEDSTRING && LA160_1 <= RIGHT)||(LA160_1 >= ROLLUP && LA160_1 <= SAMPLE)||LA160_1==SHIP||(LA160_1 >= SPLIT && LA160_1 <= TRUE)||(LA160_1 >= UNION && LA160_1 <= USING)||LA160_1==WHEN||(LA160_1 >= BOOL && LA160_1 <= BOOL_COND)||LA160_1==REALIAS) ) {
                    alt160=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 160, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 160, 0, input);

                throw nvae;

            }
            switch (alt160) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:862:14: LEFT_CURLY real_arg ( COMMA real_arg )* RIGHT_CURLY ( projection )*
                    {
                    LEFT_CURLY541=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_curly_expr5423); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_CURLY.add(LEFT_CURLY541);


                    pushFollow(FOLLOW_real_arg_in_curly_expr5425);
                    real_arg542=real_arg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_real_arg.add(real_arg542.getTree());

                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:862:34: ( COMMA real_arg )*
                    loop157:
                    do {
                        int alt157=2;
                        int LA157_0 = input.LA(1);

                        if ( (LA157_0==COMMA) ) {
                            alt157=1;
                        }


                        switch (alt157) {
                    	case 1 :
                    	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:862:36: COMMA real_arg
                    	    {
                    	    COMMA543=(Token)match(input,COMMA,FOLLOW_COMMA_in_curly_expr5429); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA543);


                    	    pushFollow(FOLLOW_real_arg_in_curly_expr5431);
                    	    real_arg544=real_arg();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_real_arg.add(real_arg544.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop157;
                        }
                    } while (true);


                    RIGHT_CURLY545=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_curly_expr5436); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_CURLY.add(RIGHT_CURLY545);


                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:862:66: ( projection )*
                    loop158:
                    do {
                        int alt158=2;
                        int LA158_0 = input.LA(1);

                        if ( (LA158_0==PERIOD||LA158_0==POUND) ) {
                            alt158=1;
                        }


                        switch (alt158) {
                    	case 1 :
                    	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:862:66: projection
                    	    {
                    	    pushFollow(FOLLOW_projection_in_curly_expr5438);
                    	    projection546=projection();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_projection.add(projection546.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop158;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: real_arg, projection
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 862:78: -> ^( FUNC_EVAL TOBAG ( real_arg )+ ) ( projection )*
                    {
                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:862:81: ^( FUNC_EVAL TOBAG ( real_arg )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FUNC_EVAL, "FUNC_EVAL")
                        , root_1);

                        adaptor.addChild(root_1, 
                        (Object)adaptor.create(TOBAG, "TOBAG")
                        );

                        if ( !(stream_real_arg.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_real_arg.hasNext() ) {
                            adaptor.addChild(root_1, stream_real_arg.nextTree());

                        }
                        stream_real_arg.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:862:112: ( projection )*
                        while ( stream_projection.hasNext() ) {
                            adaptor.addChild(root_0, stream_projection.nextTree());

                        }
                        stream_projection.reset();

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:863:14: LEFT_CURLY RIGHT_CURLY ( projection )*
                    {
                    LEFT_CURLY547=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_curly_expr5470); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_CURLY.add(LEFT_CURLY547);


                    RIGHT_CURLY548=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_curly_expr5472); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_CURLY.add(RIGHT_CURLY548);


                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:863:37: ( projection )*
                    loop159:
                    do {
                        int alt159=2;
                        int LA159_0 = input.LA(1);

                        if ( (LA159_0==PERIOD||LA159_0==POUND) ) {
                            alt159=1;
                        }


                        switch (alt159) {
                    	case 1 :
                    	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:863:37: projection
                    	    {
                    	    pushFollow(FOLLOW_projection_in_curly_expr5474);
                    	    projection549=projection();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_projection.add(projection549.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop159;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: projection
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 863:49: -> ^( BAG_VAL ) ( projection )*
                    {
                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:863:52: ^( BAG_VAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BAG_VAL, "BAG_VAL")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:863:65: ( projection )*
                        while ( stream_projection.hasNext() ) {
                            adaptor.addChild(root_0, stream_projection.nextTree());

                        }
                        stream_projection.reset();

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "curly_expr"


    public static class bracket_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bracket_expr"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:866:1: bracket_expr : ( LEFT_BRACKET real_arg ( COMMA real_arg )* RIGHT_BRACKET ( projection )* -> ^( FUNC_EVAL TOMAP ( real_arg )+ ) ( projection )* | LEFT_BRACKET keyvalue ( COMMA keyvalue )* RIGHT_BRACKET ( projection )* -> ^( MAP_VAL ( keyvalue )+ ) ( projection )* | LEFT_BRACKET RIGHT_BRACKET ( projection )* -> ^( MAP_VAL ) ( projection )* );
    public final QueryParser.bracket_expr_return bracket_expr() throws RecognitionException {
        QueryParser.bracket_expr_return retval = new QueryParser.bracket_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_BRACKET550=null;
        Token COMMA552=null;
        Token RIGHT_BRACKET554=null;
        Token LEFT_BRACKET556=null;
        Token COMMA558=null;
        Token RIGHT_BRACKET560=null;
        Token LEFT_BRACKET562=null;
        Token RIGHT_BRACKET563=null;
        QueryParser.real_arg_return real_arg551 =null;

        QueryParser.real_arg_return real_arg553 =null;

        QueryParser.projection_return projection555 =null;

        QueryParser.keyvalue_return keyvalue557 =null;

        QueryParser.keyvalue_return keyvalue559 =null;

        QueryParser.projection_return projection561 =null;

        QueryParser.projection_return projection564 =null;


        Object LEFT_BRACKET550_tree=null;
        Object COMMA552_tree=null;
        Object RIGHT_BRACKET554_tree=null;
        Object LEFT_BRACKET556_tree=null;
        Object COMMA558_tree=null;
        Object RIGHT_BRACKET560_tree=null;
        Object LEFT_BRACKET562_tree=null;
        Object RIGHT_BRACKET563_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RIGHT_BRACKET=new RewriteRuleTokenStream(adaptor,"token RIGHT_BRACKET");
        RewriteRuleTokenStream stream_LEFT_BRACKET=new RewriteRuleTokenStream(adaptor,"token LEFT_BRACKET");
        RewriteRuleSubtreeStream stream_real_arg=new RewriteRuleSubtreeStream(adaptor,"rule real_arg");
        RewriteRuleSubtreeStream stream_keyvalue=new RewriteRuleSubtreeStream(adaptor,"rule keyvalue");
        RewriteRuleSubtreeStream stream_projection=new RewriteRuleSubtreeStream(adaptor,"rule projection");
        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:866:14: ( LEFT_BRACKET real_arg ( COMMA real_arg )* RIGHT_BRACKET ( projection )* -> ^( FUNC_EVAL TOMAP ( real_arg )+ ) ( projection )* | LEFT_BRACKET keyvalue ( COMMA keyvalue )* RIGHT_BRACKET ( projection )* -> ^( MAP_VAL ( keyvalue )+ ) ( projection )* | LEFT_BRACKET RIGHT_BRACKET ( projection )* -> ^( MAP_VAL ) ( projection )* )
            int alt166=3;
            int LA166_0 = input.LA(1);

            if ( (LA166_0==LEFT_BRACKET) ) {
                switch ( input.LA(2) ) {
                case RIGHT_BRACKET:
                    {
                    alt166=3;
                    }
                    break;
                case QUOTEDSTRING:
                    {
                    int LA166_3 = input.LA(3);

                    if ( (LA166_3==POUND) ) {
                        alt166=2;
                    }
                    else if ( (LA166_3==COMMA||LA166_3==DIV||LA166_3==MINUS||LA166_3==PERCENT||LA166_3==PLUS||LA166_3==RIGHT_BRACKET||LA166_3==STAR) ) {
                        alt166=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 166, 3, input);

                        throw nvae;

                    }
                    }
                    break;
                case ALL:
                case AND:
                case AS:
                case ASC:
                case ASSERT:
                case BIGDECIMAL:
                case BIGDECIMALNUMBER:
                case BIGINTEGER:
                case BIGINTEGERNUMBER:
                case BY:
                case BYTEARRAY:
                case CACHE:
                case CASE:
                case CHARARRAY:
                case COGROUP:
                case CROSS:
                case CUBE:
                case DATETIME:
                case DEFINE:
                case DESC:
                case DISTINCT:
                case DOLLARVAR:
                case DOUBLENUMBER:
                case DOUBLE_PERIOD:
                case ELSE:
                case END:
                case FALSE:
                case FILTER:
                case FLOATNUMBER:
                case FOREACH:
                case FULL:
                case GENERATE:
                case GROUP:
                case IDENTIFIER:
                case IF:
                case IMPORT:
                case IN:
                case INNER:
                case INPUT:
                case INTEGER:
                case INTO:
                case INVOKE:
                case IS:
                case JOIN:
                case LEFT:
                case LEFT_BRACKET:
                case LEFT_CURLY:
                case LEFT_PAREN:
                case LIMIT:
                case LOAD:
                case LONGINTEGER:
                case MAPREDUCE:
                case MINUS:
                case NULL:
                case OR:
                case ORDER:
                case OUTER:
                case OUTPUT:
                case PARALLEL:
                case PARTITION:
                case RANK:
                case REGISTER:
                case RETURNS:
                case RIGHT:
                case ROLLUP:
                case SAMPLE:
                case SHIP:
                case SPLIT:
                case STAR:
                case STDERROR:
                case STDIN:
                case STDOUT:
                case STORE:
                case STREAM:
                case STR_OP_EQ:
                case STR_OP_GT:
                case STR_OP_GTE:
                case STR_OP_LT:
                case STR_OP_LTE:
                case STR_OP_MATCHES:
                case STR_OP_NE:
                case THEN:
                case THROUGH:
                case TRUE:
                case UNION:
                case USING:
                case WHEN:
                case BOOL:
                case BOOL_COND:
                case REALIAS:
                    {
                    alt166=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 166, 1, input);

                    throw nvae;

                }

            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 166, 0, input);

                throw nvae;

            }
            switch (alt166) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:866:16: LEFT_BRACKET real_arg ( COMMA real_arg )* RIGHT_BRACKET ( projection )*
                    {
                    LEFT_BRACKET550=(Token)match(input,LEFT_BRACKET,FOLLOW_LEFT_BRACKET_in_bracket_expr5495); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_BRACKET.add(LEFT_BRACKET550);


                    pushFollow(FOLLOW_real_arg_in_bracket_expr5497);
                    real_arg551=real_arg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_real_arg.add(real_arg551.getTree());

                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:866:38: ( COMMA real_arg )*
                    loop161:
                    do {
                        int alt161=2;
                        int LA161_0 = input.LA(1);

                        if ( (LA161_0==COMMA) ) {
                            alt161=1;
                        }


                        switch (alt161) {
                    	case 1 :
                    	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:866:40: COMMA real_arg
                    	    {
                    	    COMMA552=(Token)match(input,COMMA,FOLLOW_COMMA_in_bracket_expr5501); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA552);


                    	    pushFollow(FOLLOW_real_arg_in_bracket_expr5503);
                    	    real_arg553=real_arg();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_real_arg.add(real_arg553.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop161;
                        }
                    } while (true);


                    RIGHT_BRACKET554=(Token)match(input,RIGHT_BRACKET,FOLLOW_RIGHT_BRACKET_in_bracket_expr5508); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_BRACKET.add(RIGHT_BRACKET554);


                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:866:72: ( projection )*
                    loop162:
                    do {
                        int alt162=2;
                        int LA162_0 = input.LA(1);

                        if ( (LA162_0==PERIOD||LA162_0==POUND) ) {
                            alt162=1;
                        }


                        switch (alt162) {
                    	case 1 :
                    	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:866:72: projection
                    	    {
                    	    pushFollow(FOLLOW_projection_in_bracket_expr5510);
                    	    projection555=projection();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_projection.add(projection555.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop162;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: projection, real_arg
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 866:84: -> ^( FUNC_EVAL TOMAP ( real_arg )+ ) ( projection )*
                    {
                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:866:87: ^( FUNC_EVAL TOMAP ( real_arg )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FUNC_EVAL, "FUNC_EVAL")
                        , root_1);

                        adaptor.addChild(root_1, 
                        (Object)adaptor.create(TOMAP, "TOMAP")
                        );

                        if ( !(stream_real_arg.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_real_arg.hasNext() ) {
                            adaptor.addChild(root_1, stream_real_arg.nextTree());

                        }
                        stream_real_arg.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:866:118: ( projection )*
                        while ( stream_projection.hasNext() ) {
                            adaptor.addChild(root_0, stream_projection.nextTree());

                        }
                        stream_projection.reset();

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:867:16: LEFT_BRACKET keyvalue ( COMMA keyvalue )* RIGHT_BRACKET ( projection )*
                    {
                    LEFT_BRACKET556=(Token)match(input,LEFT_BRACKET,FOLLOW_LEFT_BRACKET_in_bracket_expr5544); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_BRACKET.add(LEFT_BRACKET556);


                    pushFollow(FOLLOW_keyvalue_in_bracket_expr5546);
                    keyvalue557=keyvalue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_keyvalue.add(keyvalue557.getTree());

                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:867:38: ( COMMA keyvalue )*
                    loop163:
                    do {
                        int alt163=2;
                        int LA163_0 = input.LA(1);

                        if ( (LA163_0==COMMA) ) {
                            alt163=1;
                        }


                        switch (alt163) {
                    	case 1 :
                    	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:867:40: COMMA keyvalue
                    	    {
                    	    COMMA558=(Token)match(input,COMMA,FOLLOW_COMMA_in_bracket_expr5550); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA558);


                    	    pushFollow(FOLLOW_keyvalue_in_bracket_expr5552);
                    	    keyvalue559=keyvalue();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_keyvalue.add(keyvalue559.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop163;
                        }
                    } while (true);


                    RIGHT_BRACKET560=(Token)match(input,RIGHT_BRACKET,FOLLOW_RIGHT_BRACKET_in_bracket_expr5557); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_BRACKET.add(RIGHT_BRACKET560);


                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:867:72: ( projection )*
                    loop164:
                    do {
                        int alt164=2;
                        int LA164_0 = input.LA(1);

                        if ( (LA164_0==PERIOD||LA164_0==POUND) ) {
                            alt164=1;
                        }


                        switch (alt164) {
                    	case 1 :
                    	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:867:72: projection
                    	    {
                    	    pushFollow(FOLLOW_projection_in_bracket_expr5559);
                    	    projection561=projection();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_projection.add(projection561.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop164;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: keyvalue, projection
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 867:84: -> ^( MAP_VAL ( keyvalue )+ ) ( projection )*
                    {
                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:867:87: ^( MAP_VAL ( keyvalue )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(MAP_VAL, "MAP_VAL")
                        , root_1);

                        if ( !(stream_keyvalue.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_keyvalue.hasNext() ) {
                            adaptor.addChild(root_1, stream_keyvalue.nextTree());

                        }
                        stream_keyvalue.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:867:110: ( projection )*
                        while ( stream_projection.hasNext() ) {
                            adaptor.addChild(root_0, stream_projection.nextTree());

                        }
                        stream_projection.reset();

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:868:16: LEFT_BRACKET RIGHT_BRACKET ( projection )*
                    {
                    LEFT_BRACKET562=(Token)match(input,LEFT_BRACKET,FOLLOW_LEFT_BRACKET_in_bracket_expr5591); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_BRACKET.add(LEFT_BRACKET562);


                    RIGHT_BRACKET563=(Token)match(input,RIGHT_BRACKET,FOLLOW_RIGHT_BRACKET_in_bracket_expr5593); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_BRACKET.add(RIGHT_BRACKET563);


                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:868:43: ( projection )*
                    loop165:
                    do {
                        int alt165=2;
                        int LA165_0 = input.LA(1);

                        if ( (LA165_0==PERIOD||LA165_0==POUND) ) {
                            alt165=1;
                        }


                        switch (alt165) {
                    	case 1 :
                    	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:868:43: projection
                    	    {
                    	    pushFollow(FOLLOW_projection_in_bracket_expr5595);
                    	    projection564=projection();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_projection.add(projection564.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop165;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: projection
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 868:55: -> ^( MAP_VAL ) ( projection )*
                    {
                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:868:58: ^( MAP_VAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(MAP_VAL, "MAP_VAL")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:868:71: ( projection )*
                        while ( stream_projection.hasNext() ) {
                            adaptor.addChild(root_0, stream_projection.nextTree());

                        }
                        stream_projection.reset();

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "bracket_expr"


    public static class projection_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "projection"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:871:1: projection : ( PERIOD ( col_ref | LEFT_PAREN col_ref ( COMMA col_ref )* RIGHT_PAREN ) -> ^( PERIOD ( col_ref )+ ) | POUND ^ ( QUOTEDSTRING | NULL ) );
    public final QueryParser.projection_return projection() throws RecognitionException {
        QueryParser.projection_return retval = new QueryParser.projection_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token PERIOD565=null;
        Token LEFT_PAREN567=null;
        Token COMMA569=null;
        Token RIGHT_PAREN571=null;
        Token POUND572=null;
        Token set573=null;
        QueryParser.col_ref_return col_ref566 =null;

        QueryParser.col_ref_return col_ref568 =null;

        QueryParser.col_ref_return col_ref570 =null;


        Object PERIOD565_tree=null;
        Object LEFT_PAREN567_tree=null;
        Object COMMA569_tree=null;
        Object RIGHT_PAREN571_tree=null;
        Object POUND572_tree=null;
        Object set573_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,"token PERIOD");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleSubtreeStream stream_col_ref=new RewriteRuleSubtreeStream(adaptor,"rule col_ref");
        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:871:12: ( PERIOD ( col_ref | LEFT_PAREN col_ref ( COMMA col_ref )* RIGHT_PAREN ) -> ^( PERIOD ( col_ref )+ ) | POUND ^ ( QUOTEDSTRING | NULL ) )
            int alt169=2;
            int LA169_0 = input.LA(1);

            if ( (LA169_0==PERIOD) ) {
                alt169=1;
            }
            else if ( (LA169_0==POUND) ) {
                alt169=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 169, 0, input);

                throw nvae;

            }
            switch (alt169) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:871:14: PERIOD ( col_ref | LEFT_PAREN col_ref ( COMMA col_ref )* RIGHT_PAREN )
                    {
                    PERIOD565=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_projection5616); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD565);


                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:871:21: ( col_ref | LEFT_PAREN col_ref ( COMMA col_ref )* RIGHT_PAREN )
                    int alt168=2;
                    int LA168_0 = input.LA(1);

                    if ( (LA168_0==CUBE||LA168_0==DOLLARVAR||(LA168_0 >= ELSE && LA168_0 <= END)||LA168_0==GROUP||LA168_0==IDENTIFIER||LA168_0==IN||LA168_0==RANK||LA168_0==THEN||LA168_0==WHEN) ) {
                        alt168=1;
                    }
                    else if ( (LA168_0==LEFT_PAREN) ) {
                        alt168=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 168, 0, input);

                        throw nvae;

                    }
                    switch (alt168) {
                        case 1 :
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:871:23: col_ref
                            {
                            pushFollow(FOLLOW_col_ref_in_projection5620);
                            col_ref566=col_ref();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_col_ref.add(col_ref566.getTree());

                            }
                            break;
                        case 2 :
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:871:33: LEFT_PAREN col_ref ( COMMA col_ref )* RIGHT_PAREN
                            {
                            LEFT_PAREN567=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_projection5624); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN567);


                            pushFollow(FOLLOW_col_ref_in_projection5626);
                            col_ref568=col_ref();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_col_ref.add(col_ref568.getTree());

                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:871:52: ( COMMA col_ref )*
                            loop167:
                            do {
                                int alt167=2;
                                int LA167_0 = input.LA(1);

                                if ( (LA167_0==COMMA) ) {
                                    alt167=1;
                                }


                                switch (alt167) {
                            	case 1 :
                            	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:871:54: COMMA col_ref
                            	    {
                            	    COMMA569=(Token)match(input,COMMA,FOLLOW_COMMA_in_projection5630); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA569);


                            	    pushFollow(FOLLOW_col_ref_in_projection5632);
                            	    col_ref570=col_ref();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_col_ref.add(col_ref570.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop167;
                                }
                            } while (true);


                            RIGHT_PAREN571=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_projection5637); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN571);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: col_ref, PERIOD
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 871:85: -> ^( PERIOD ( col_ref )+ )
                    {
                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:871:88: ^( PERIOD ( col_ref )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        stream_PERIOD.nextNode()
                        , root_1);

                        if ( !(stream_col_ref.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_col_ref.hasNext() ) {
                            adaptor.addChild(root_1, stream_col_ref.nextTree());

                        }
                        stream_col_ref.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:872:14: POUND ^ ( QUOTEDSTRING | NULL )
                    {
                    root_0 = (Object)adaptor.nil();


                    POUND572=(Token)match(input,POUND,FOLLOW_POUND_in_projection5665); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    POUND572_tree = 
                    (Object)adaptor.create(POUND572)
                    ;
                    root_0 = (Object)adaptor.becomeRoot(POUND572_tree, root_0);
                    }

                    set573=(Token)input.LT(1);

                    if ( input.LA(1)==NULL||input.LA(1)==QUOTEDSTRING ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set573)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "projection"


    public static class col_ref_without_identifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "col_ref_without_identifier"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:878:1: col_ref_without_identifier : ( GROUP | DOLLARVAR );
    public final QueryParser.col_ref_without_identifier_return col_ref_without_identifier() throws RecognitionException {
        QueryParser.col_ref_without_identifier_return retval = new QueryParser.col_ref_without_identifier_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set574=null;

        Object set574_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:878:28: ( GROUP | DOLLARVAR )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:
            {
            root_0 = (Object)adaptor.nil();


            set574=(Token)input.LT(1);

            if ( input.LA(1)==DOLLARVAR||input.LA(1)==GROUP ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set574)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "col_ref_without_identifier"


    public static class col_ref_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "col_ref"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:881:1: col_ref : ( col_ref_without_identifier | identifier_plus );
    public final QueryParser.col_ref_return col_ref() throws RecognitionException {
        QueryParser.col_ref_return retval = new QueryParser.col_ref_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.col_ref_without_identifier_return col_ref_without_identifier575 =null;

        QueryParser.identifier_plus_return identifier_plus576 =null;



        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:881:9: ( col_ref_without_identifier | identifier_plus )
            int alt170=2;
            int LA170_0 = input.LA(1);

            if ( (LA170_0==DOLLARVAR||LA170_0==GROUP) ) {
                alt170=1;
            }
            else if ( (LA170_0==CUBE||(LA170_0 >= ELSE && LA170_0 <= END)||LA170_0==IDENTIFIER||LA170_0==IN||LA170_0==RANK||LA170_0==THEN||LA170_0==WHEN) ) {
                alt170=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 170, 0, input);

                throw nvae;

            }
            switch (alt170) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:881:11: col_ref_without_identifier
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_col_ref_without_identifier_in_col_ref5701);
                    col_ref_without_identifier575=col_ref_without_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_ref_without_identifier575.getTree());

                    }
                    break;
                case 2 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:881:40: identifier_plus
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_identifier_plus_in_col_ref5705);
                    identifier_plus576=identifier_plus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier_plus576.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "col_ref"


    public static class col_range_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "col_range"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:884:1: col_range : (c1= col_ref DOUBLE_PERIOD (c2= col_ref )? -> ^( COL_RANGE $c1 DOUBLE_PERIOD ( $c2)? ) | DOUBLE_PERIOD col_ref -> ^( COL_RANGE DOUBLE_PERIOD col_ref ) );
    public final QueryParser.col_range_return col_range() throws RecognitionException {
        QueryParser.col_range_return retval = new QueryParser.col_range_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DOUBLE_PERIOD577=null;
        Token DOUBLE_PERIOD578=null;
        QueryParser.col_ref_return c1 =null;

        QueryParser.col_ref_return c2 =null;

        QueryParser.col_ref_return col_ref579 =null;


        Object DOUBLE_PERIOD577_tree=null;
        Object DOUBLE_PERIOD578_tree=null;
        RewriteRuleTokenStream stream_DOUBLE_PERIOD=new RewriteRuleTokenStream(adaptor,"token DOUBLE_PERIOD");
        RewriteRuleSubtreeStream stream_col_ref=new RewriteRuleSubtreeStream(adaptor,"rule col_ref");
        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:884:11: (c1= col_ref DOUBLE_PERIOD (c2= col_ref )? -> ^( COL_RANGE $c1 DOUBLE_PERIOD ( $c2)? ) | DOUBLE_PERIOD col_ref -> ^( COL_RANGE DOUBLE_PERIOD col_ref ) )
            int alt172=2;
            int LA172_0 = input.LA(1);

            if ( (LA172_0==CUBE||LA172_0==DOLLARVAR||(LA172_0 >= ELSE && LA172_0 <= END)||LA172_0==GROUP||LA172_0==IDENTIFIER||LA172_0==IN||LA172_0==RANK||LA172_0==THEN||LA172_0==WHEN) ) {
                alt172=1;
            }
            else if ( (LA172_0==DOUBLE_PERIOD) ) {
                alt172=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 172, 0, input);

                throw nvae;

            }
            switch (alt172) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:884:13: c1= col_ref DOUBLE_PERIOD (c2= col_ref )?
                    {
                    pushFollow(FOLLOW_col_ref_in_col_range5718);
                    c1=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_col_ref.add(c1.getTree());

                    DOUBLE_PERIOD577=(Token)match(input,DOUBLE_PERIOD,FOLLOW_DOUBLE_PERIOD_in_col_range5720); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOUBLE_PERIOD.add(DOUBLE_PERIOD577);


                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:884:43: (c2= col_ref )?
                    int alt171=2;
                    int LA171_0 = input.LA(1);

                    if ( (LA171_0==CUBE||LA171_0==DOLLARVAR||(LA171_0 >= ELSE && LA171_0 <= END)||LA171_0==GROUP||LA171_0==IDENTIFIER||LA171_0==IN||LA171_0==RANK||LA171_0==THEN||LA171_0==WHEN) ) {
                        alt171=1;
                    }
                    switch (alt171) {
                        case 1 :
                            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:884:43: c2= col_ref
                            {
                            pushFollow(FOLLOW_col_ref_in_col_range5726);
                            c2=col_ref();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_col_ref.add(c2.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: c2, c1, DOUBLE_PERIOD
                    // token labels: 
                    // rule labels: c1, retval, c2
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_c1=new RewriteRuleSubtreeStream(adaptor,"rule c1",c1!=null?c1.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_c2=new RewriteRuleSubtreeStream(adaptor,"rule c2",c2!=null?c2.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 884:54: -> ^( COL_RANGE $c1 DOUBLE_PERIOD ( $c2)? )
                    {
                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:884:57: ^( COL_RANGE $c1 DOUBLE_PERIOD ( $c2)? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(COL_RANGE, "COL_RANGE")
                        , root_1);

                        adaptor.addChild(root_1, stream_c1.nextTree());

                        adaptor.addChild(root_1, 
                        stream_DOUBLE_PERIOD.nextNode()
                        );

                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:884:88: ( $c2)?
                        if ( stream_c2.hasNext() ) {
                            adaptor.addChild(root_1, stream_c2.nextTree());

                        }
                        stream_c2.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:885:14: DOUBLE_PERIOD col_ref
                    {
                    DOUBLE_PERIOD578=(Token)match(input,DOUBLE_PERIOD,FOLLOW_DOUBLE_PERIOD_in_col_range5757); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOUBLE_PERIOD.add(DOUBLE_PERIOD578);


                    pushFollow(FOLLOW_col_ref_in_col_range5759);
                    col_ref579=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_col_ref.add(col_ref579.getTree());

                    // AST REWRITE
                    // elements: col_ref, DOUBLE_PERIOD
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 885:36: -> ^( COL_RANGE DOUBLE_PERIOD col_ref )
                    {
                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:885:39: ^( COL_RANGE DOUBLE_PERIOD col_ref )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(COL_RANGE, "COL_RANGE")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_DOUBLE_PERIOD.nextNode()
                        );

                        adaptor.addChild(root_1, stream_col_ref.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "col_range"


    public static class scalar_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "scalar"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:888:1: scalar : ( INTEGER | LONGINTEGER | FLOATNUMBER | DOUBLENUMBER | BIGINTEGERNUMBER | BIGDECIMALNUMBER | QUOTEDSTRING | NULL | TRUE | FALSE );
    public final QueryParser.scalar_return scalar() throws RecognitionException {
        QueryParser.scalar_return retval = new QueryParser.scalar_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set580=null;

        Object set580_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:888:8: ( INTEGER | LONGINTEGER | FLOATNUMBER | DOUBLENUMBER | BIGINTEGERNUMBER | BIGDECIMALNUMBER | QUOTEDSTRING | NULL | TRUE | FALSE )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:
            {
            root_0 = (Object)adaptor.nil();


            set580=(Token)input.LT(1);

            if ( input.LA(1)==BIGDECIMALNUMBER||input.LA(1)==BIGINTEGERNUMBER||input.LA(1)==DOUBLENUMBER||input.LA(1)==FALSE||input.LA(1)==FLOATNUMBER||input.LA(1)==INTEGER||input.LA(1)==LONGINTEGER||input.LA(1)==NULL||input.LA(1)==QUOTEDSTRING||input.LA(1)==TRUE ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set580)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "scalar"


    public static class keyvalue_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyvalue"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:900:1: keyvalue : QUOTEDSTRING POUND literal -> ^( KEY_VAL_PAIR QUOTEDSTRING literal ) ;
    public final QueryParser.keyvalue_return keyvalue() throws RecognitionException {
        QueryParser.keyvalue_return retval = new QueryParser.keyvalue_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token QUOTEDSTRING581=null;
        Token POUND582=null;
        QueryParser.literal_return literal583 =null;


        Object QUOTEDSTRING581_tree=null;
        Object POUND582_tree=null;
        RewriteRuleTokenStream stream_POUND=new RewriteRuleTokenStream(adaptor,"token POUND");
        RewriteRuleTokenStream stream_QUOTEDSTRING=new RewriteRuleTokenStream(adaptor,"token QUOTEDSTRING");
        RewriteRuleSubtreeStream stream_literal=new RewriteRuleSubtreeStream(adaptor,"rule literal");
        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:900:10: ( QUOTEDSTRING POUND literal -> ^( KEY_VAL_PAIR QUOTEDSTRING literal ) )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:900:12: QUOTEDSTRING POUND literal
            {
            QUOTEDSTRING581=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_keyvalue5886); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_QUOTEDSTRING.add(QUOTEDSTRING581);


            POUND582=(Token)match(input,POUND,FOLLOW_POUND_in_keyvalue5888); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_POUND.add(POUND582);


            pushFollow(FOLLOW_literal_in_keyvalue5890);
            literal583=literal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_literal.add(literal583.getTree());

            // AST REWRITE
            // elements: literal, QUOTEDSTRING
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 900:39: -> ^( KEY_VAL_PAIR QUOTEDSTRING literal )
            {
                // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:900:42: ^( KEY_VAL_PAIR QUOTEDSTRING literal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(KEY_VAL_PAIR, "KEY_VAL_PAIR")
                , root_1);

                adaptor.addChild(root_1, 
                stream_QUOTEDSTRING.nextNode()
                );

                adaptor.addChild(root_1, stream_literal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "keyvalue"


    public static class literal_map_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "literal_map"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:903:1: literal_map : ( LEFT_BRACKET keyvalue ( COMMA keyvalue )* RIGHT_BRACKET -> ^( MAP_VAL ( keyvalue )+ ) | LEFT_BRACKET RIGHT_BRACKET -> ^( MAP_VAL ) );
    public final QueryParser.literal_map_return literal_map() throws RecognitionException {
        QueryParser.literal_map_return retval = new QueryParser.literal_map_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_BRACKET584=null;
        Token COMMA586=null;
        Token RIGHT_BRACKET588=null;
        Token LEFT_BRACKET589=null;
        Token RIGHT_BRACKET590=null;
        QueryParser.keyvalue_return keyvalue585 =null;

        QueryParser.keyvalue_return keyvalue587 =null;


        Object LEFT_BRACKET584_tree=null;
        Object COMMA586_tree=null;
        Object RIGHT_BRACKET588_tree=null;
        Object LEFT_BRACKET589_tree=null;
        Object RIGHT_BRACKET590_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RIGHT_BRACKET=new RewriteRuleTokenStream(adaptor,"token RIGHT_BRACKET");
        RewriteRuleTokenStream stream_LEFT_BRACKET=new RewriteRuleTokenStream(adaptor,"token LEFT_BRACKET");
        RewriteRuleSubtreeStream stream_keyvalue=new RewriteRuleSubtreeStream(adaptor,"rule keyvalue");
        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:903:13: ( LEFT_BRACKET keyvalue ( COMMA keyvalue )* RIGHT_BRACKET -> ^( MAP_VAL ( keyvalue )+ ) | LEFT_BRACKET RIGHT_BRACKET -> ^( MAP_VAL ) )
            int alt174=2;
            int LA174_0 = input.LA(1);

            if ( (LA174_0==LEFT_BRACKET) ) {
                int LA174_1 = input.LA(2);

                if ( (LA174_1==RIGHT_BRACKET) ) {
                    alt174=2;
                }
                else if ( (LA174_1==QUOTEDSTRING) ) {
                    alt174=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 174, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 174, 0, input);

                throw nvae;

            }
            switch (alt174) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:903:15: LEFT_BRACKET keyvalue ( COMMA keyvalue )* RIGHT_BRACKET
                    {
                    LEFT_BRACKET584=(Token)match(input,LEFT_BRACKET,FOLLOW_LEFT_BRACKET_in_literal_map5911); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_BRACKET.add(LEFT_BRACKET584);


                    pushFollow(FOLLOW_keyvalue_in_literal_map5913);
                    keyvalue585=keyvalue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_keyvalue.add(keyvalue585.getTree());

                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:903:37: ( COMMA keyvalue )*
                    loop173:
                    do {
                        int alt173=2;
                        int LA173_0 = input.LA(1);

                        if ( (LA173_0==COMMA) ) {
                            alt173=1;
                        }


                        switch (alt173) {
                    	case 1 :
                    	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:903:39: COMMA keyvalue
                    	    {
                    	    COMMA586=(Token)match(input,COMMA,FOLLOW_COMMA_in_literal_map5917); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA586);


                    	    pushFollow(FOLLOW_keyvalue_in_literal_map5919);
                    	    keyvalue587=keyvalue();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_keyvalue.add(keyvalue587.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop173;
                        }
                    } while (true);


                    RIGHT_BRACKET588=(Token)match(input,RIGHT_BRACKET,FOLLOW_RIGHT_BRACKET_in_literal_map5924); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_BRACKET.add(RIGHT_BRACKET588);


                    // AST REWRITE
                    // elements: keyvalue
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 903:71: -> ^( MAP_VAL ( keyvalue )+ )
                    {
                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:903:74: ^( MAP_VAL ( keyvalue )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(MAP_VAL, "MAP_VAL")
                        , root_1);

                        if ( !(stream_keyvalue.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_keyvalue.hasNext() ) {
                            adaptor.addChild(root_1, stream_keyvalue.nextTree());

                        }
                        stream_keyvalue.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:904:15: LEFT_BRACKET RIGHT_BRACKET
                    {
                    LEFT_BRACKET589=(Token)match(input,LEFT_BRACKET,FOLLOW_LEFT_BRACKET_in_literal_map5951); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_BRACKET.add(LEFT_BRACKET589);


                    RIGHT_BRACKET590=(Token)match(input,RIGHT_BRACKET,FOLLOW_RIGHT_BRACKET_in_literal_map5953); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_BRACKET.add(RIGHT_BRACKET590);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 904:42: -> ^( MAP_VAL )
                    {
                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:904:45: ^( MAP_VAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(MAP_VAL, "MAP_VAL")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "literal_map"


    public static class literal_bag_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "literal_bag"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:908:1: literal_bag : ( LEFT_CURLY literal_tuple ( COMMA literal_tuple )* RIGHT_CURLY -> ^( BAG_VAL ( literal_tuple )+ ) | LEFT_CURLY RIGHT_CURLY -> ^( BAG_VAL ) );
    public final QueryParser.literal_bag_return literal_bag() throws RecognitionException {
        QueryParser.literal_bag_return retval = new QueryParser.literal_bag_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_CURLY591=null;
        Token COMMA593=null;
        Token RIGHT_CURLY595=null;
        Token LEFT_CURLY596=null;
        Token RIGHT_CURLY597=null;
        QueryParser.literal_tuple_return literal_tuple592 =null;

        QueryParser.literal_tuple_return literal_tuple594 =null;


        Object LEFT_CURLY591_tree=null;
        Object COMMA593_tree=null;
        Object RIGHT_CURLY595_tree=null;
        Object LEFT_CURLY596_tree=null;
        Object RIGHT_CURLY597_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LEFT_CURLY=new RewriteRuleTokenStream(adaptor,"token LEFT_CURLY");
        RewriteRuleTokenStream stream_RIGHT_CURLY=new RewriteRuleTokenStream(adaptor,"token RIGHT_CURLY");
        RewriteRuleSubtreeStream stream_literal_tuple=new RewriteRuleSubtreeStream(adaptor,"rule literal_tuple");
        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:908:13: ( LEFT_CURLY literal_tuple ( COMMA literal_tuple )* RIGHT_CURLY -> ^( BAG_VAL ( literal_tuple )+ ) | LEFT_CURLY RIGHT_CURLY -> ^( BAG_VAL ) )
            int alt176=2;
            int LA176_0 = input.LA(1);

            if ( (LA176_0==LEFT_CURLY) ) {
                int LA176_1 = input.LA(2);

                if ( (LA176_1==RIGHT_CURLY) ) {
                    alt176=2;
                }
                else if ( (LA176_1==LEFT_PAREN) ) {
                    alt176=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 176, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 176, 0, input);

                throw nvae;

            }
            switch (alt176) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:908:15: LEFT_CURLY literal_tuple ( COMMA literal_tuple )* RIGHT_CURLY
                    {
                    LEFT_CURLY591=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_literal_bag5971); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_CURLY.add(LEFT_CURLY591);


                    pushFollow(FOLLOW_literal_tuple_in_literal_bag5973);
                    literal_tuple592=literal_tuple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_literal_tuple.add(literal_tuple592.getTree());

                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:908:40: ( COMMA literal_tuple )*
                    loop175:
                    do {
                        int alt175=2;
                        int LA175_0 = input.LA(1);

                        if ( (LA175_0==COMMA) ) {
                            alt175=1;
                        }


                        switch (alt175) {
                    	case 1 :
                    	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:908:42: COMMA literal_tuple
                    	    {
                    	    COMMA593=(Token)match(input,COMMA,FOLLOW_COMMA_in_literal_bag5977); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA593);


                    	    pushFollow(FOLLOW_literal_tuple_in_literal_bag5979);
                    	    literal_tuple594=literal_tuple();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_literal_tuple.add(literal_tuple594.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop175;
                        }
                    } while (true);


                    RIGHT_CURLY595=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_literal_bag5984); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_CURLY.add(RIGHT_CURLY595);


                    // AST REWRITE
                    // elements: literal_tuple
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 908:77: -> ^( BAG_VAL ( literal_tuple )+ )
                    {
                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:908:80: ^( BAG_VAL ( literal_tuple )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BAG_VAL, "BAG_VAL")
                        , root_1);

                        if ( !(stream_literal_tuple.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_literal_tuple.hasNext() ) {
                            adaptor.addChild(root_1, stream_literal_tuple.nextTree());

                        }
                        stream_literal_tuple.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:909:15: LEFT_CURLY RIGHT_CURLY
                    {
                    LEFT_CURLY596=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_literal_bag6011); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_CURLY.add(LEFT_CURLY596);


                    RIGHT_CURLY597=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_literal_bag6013); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_CURLY.add(RIGHT_CURLY597);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 909:38: -> ^( BAG_VAL )
                    {
                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:909:41: ^( BAG_VAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BAG_VAL, "BAG_VAL")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "literal_bag"


    public static class literal_tuple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "literal_tuple"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:912:1: literal_tuple : ( LEFT_PAREN literal ( COMMA literal )* RIGHT_PAREN -> ^( TUPLE_VAL ( literal )+ ) | LEFT_PAREN RIGHT_PAREN -> ^( TUPLE_VAL ) );
    public final QueryParser.literal_tuple_return literal_tuple() throws RecognitionException {
        QueryParser.literal_tuple_return retval = new QueryParser.literal_tuple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN598=null;
        Token COMMA600=null;
        Token RIGHT_PAREN602=null;
        Token LEFT_PAREN603=null;
        Token RIGHT_PAREN604=null;
        QueryParser.literal_return literal599 =null;

        QueryParser.literal_return literal601 =null;


        Object LEFT_PAREN598_tree=null;
        Object COMMA600_tree=null;
        Object RIGHT_PAREN602_tree=null;
        Object LEFT_PAREN603_tree=null;
        Object RIGHT_PAREN604_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleSubtreeStream stream_literal=new RewriteRuleSubtreeStream(adaptor,"rule literal");
        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:912:15: ( LEFT_PAREN literal ( COMMA literal )* RIGHT_PAREN -> ^( TUPLE_VAL ( literal )+ ) | LEFT_PAREN RIGHT_PAREN -> ^( TUPLE_VAL ) )
            int alt178=2;
            int LA178_0 = input.LA(1);

            if ( (LA178_0==LEFT_PAREN) ) {
                int LA178_1 = input.LA(2);

                if ( (LA178_1==RIGHT_PAREN) ) {
                    alt178=2;
                }
                else if ( (LA178_1==BIGDECIMALNUMBER||LA178_1==BIGINTEGERNUMBER||LA178_1==DOUBLENUMBER||LA178_1==FALSE||LA178_1==FLOATNUMBER||LA178_1==INTEGER||(LA178_1 >= LEFT_BRACKET && LA178_1 <= LEFT_PAREN)||LA178_1==LONGINTEGER||LA178_1==NULL||LA178_1==QUOTEDSTRING||LA178_1==TRUE) ) {
                    alt178=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 178, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 178, 0, input);

                throw nvae;

            }
            switch (alt178) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:912:17: LEFT_PAREN literal ( COMMA literal )* RIGHT_PAREN
                    {
                    LEFT_PAREN598=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_literal_tuple6030); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN598);


                    pushFollow(FOLLOW_literal_in_literal_tuple6032);
                    literal599=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_literal.add(literal599.getTree());

                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:912:36: ( COMMA literal )*
                    loop177:
                    do {
                        int alt177=2;
                        int LA177_0 = input.LA(1);

                        if ( (LA177_0==COMMA) ) {
                            alt177=1;
                        }


                        switch (alt177) {
                    	case 1 :
                    	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:912:38: COMMA literal
                    	    {
                    	    COMMA600=(Token)match(input,COMMA,FOLLOW_COMMA_in_literal_tuple6036); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA600);


                    	    pushFollow(FOLLOW_literal_in_literal_tuple6038);
                    	    literal601=literal();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_literal.add(literal601.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop177;
                        }
                    } while (true);


                    RIGHT_PAREN602=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_literal_tuple6043); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN602);


                    // AST REWRITE
                    // elements: literal
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 912:67: -> ^( TUPLE_VAL ( literal )+ )
                    {
                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:912:70: ^( TUPLE_VAL ( literal )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(TUPLE_VAL, "TUPLE_VAL")
                        , root_1);

                        if ( !(stream_literal.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_literal.hasNext() ) {
                            adaptor.addChild(root_1, stream_literal.nextTree());

                        }
                        stream_literal.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:913:17: LEFT_PAREN RIGHT_PAREN
                    {
                    LEFT_PAREN603=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_literal_tuple6072); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN603);


                    RIGHT_PAREN604=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_literal_tuple6074); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN604);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 913:40: -> ^( TUPLE_VAL )
                    {
                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:913:43: ^( TUPLE_VAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(TUPLE_VAL, "TUPLE_VAL")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "literal_tuple"


    public static class literal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "literal"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:916:1: literal : ( scalar | literal_map | literal_bag | literal_tuple );
    public final QueryParser.literal_return literal() throws RecognitionException {
        QueryParser.literal_return retval = new QueryParser.literal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.scalar_return scalar605 =null;

        QueryParser.literal_map_return literal_map606 =null;

        QueryParser.literal_bag_return literal_bag607 =null;

        QueryParser.literal_tuple_return literal_tuple608 =null;



        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:916:9: ( scalar | literal_map | literal_bag | literal_tuple )
            int alt179=4;
            switch ( input.LA(1) ) {
            case BIGDECIMALNUMBER:
            case BIGINTEGERNUMBER:
            case DOUBLENUMBER:
            case FALSE:
            case FLOATNUMBER:
            case INTEGER:
            case LONGINTEGER:
            case NULL:
            case QUOTEDSTRING:
            case TRUE:
                {
                alt179=1;
                }
                break;
            case LEFT_BRACKET:
                {
                alt179=2;
                }
                break;
            case LEFT_CURLY:
                {
                alt179=3;
                }
                break;
            case LEFT_PAREN:
                {
                alt179=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 179, 0, input);

                throw nvae;

            }

            switch (alt179) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:916:11: scalar
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_scalar_in_literal6091);
                    scalar605=scalar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, scalar605.getTree());

                    }
                    break;
                case 2 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:916:20: literal_map
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_literal_map_in_literal6095);
                    literal_map606=literal_map();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal_map606.getTree());

                    }
                    break;
                case 3 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:916:34: literal_bag
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_literal_bag_in_literal6099);
                    literal_bag607=literal_bag();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal_bag607.getTree());

                    }
                    break;
                case 4 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:916:48: literal_tuple
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_literal_tuple_in_literal6103);
                    literal_tuple608=literal_tuple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal_tuple608.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "literal"


    public static class nested_blk_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_blk"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:921:1: nested_blk : ( nested_command SEMI_COLON )* GENERATE flatten_generated_item ( COMMA flatten_generated_item )* SEMI_COLON -> ( nested_command )* ^( GENERATE ( flatten_generated_item )+ ) ;
    public final QueryParser.nested_blk_return nested_blk() throws RecognitionException {
        QueryParser.nested_blk_return retval = new QueryParser.nested_blk_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMI_COLON610=null;
        Token GENERATE611=null;
        Token COMMA613=null;
        Token SEMI_COLON615=null;
        QueryParser.nested_command_return nested_command609 =null;

        QueryParser.flatten_generated_item_return flatten_generated_item612 =null;

        QueryParser.flatten_generated_item_return flatten_generated_item614 =null;


        Object SEMI_COLON610_tree=null;
        Object GENERATE611_tree=null;
        Object COMMA613_tree=null;
        Object SEMI_COLON615_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_SEMI_COLON=new RewriteRuleTokenStream(adaptor,"token SEMI_COLON");
        RewriteRuleTokenStream stream_GENERATE=new RewriteRuleTokenStream(adaptor,"token GENERATE");
        RewriteRuleSubtreeStream stream_flatten_generated_item=new RewriteRuleSubtreeStream(adaptor,"rule flatten_generated_item");
        RewriteRuleSubtreeStream stream_nested_command=new RewriteRuleSubtreeStream(adaptor,"rule nested_command");
        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:921:12: ( ( nested_command SEMI_COLON )* GENERATE flatten_generated_item ( COMMA flatten_generated_item )* SEMI_COLON -> ( nested_command )* ^( GENERATE ( flatten_generated_item )+ ) )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:921:14: ( nested_command SEMI_COLON )* GENERATE flatten_generated_item ( COMMA flatten_generated_item )* SEMI_COLON
            {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:921:14: ( nested_command SEMI_COLON )*
            loop180:
            do {
                int alt180=2;
                int LA180_0 = input.LA(1);

                if ( (LA180_0==CUBE||(LA180_0 >= ELSE && LA180_0 <= END)||LA180_0==IDENTIFIER||LA180_0==IN||LA180_0==RANK||LA180_0==THEN||LA180_0==WHEN) ) {
                    alt180=1;
                }


                switch (alt180) {
            	case 1 :
            	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:921:16: nested_command SEMI_COLON
            	    {
            	    pushFollow(FOLLOW_nested_command_in_nested_blk6116);
            	    nested_command609=nested_command();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_nested_command.add(nested_command609.getTree());

            	    SEMI_COLON610=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_nested_blk6118); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_SEMI_COLON.add(SEMI_COLON610);


            	    }
            	    break;

            	default :
            	    break loop180;
                }
            } while (true);


            GENERATE611=(Token)match(input,GENERATE,FOLLOW_GENERATE_in_nested_blk6123); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GENERATE.add(GENERATE611);


            pushFollow(FOLLOW_flatten_generated_item_in_nested_blk6125);
            flatten_generated_item612=flatten_generated_item();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_flatten_generated_item.add(flatten_generated_item612.getTree());

            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:921:77: ( COMMA flatten_generated_item )*
            loop181:
            do {
                int alt181=2;
                int LA181_0 = input.LA(1);

                if ( (LA181_0==COMMA) ) {
                    alt181=1;
                }


                switch (alt181) {
            	case 1 :
            	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:921:79: COMMA flatten_generated_item
            	    {
            	    COMMA613=(Token)match(input,COMMA,FOLLOW_COMMA_in_nested_blk6129); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA613);


            	    pushFollow(FOLLOW_flatten_generated_item_in_nested_blk6131);
            	    flatten_generated_item614=flatten_generated_item();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_flatten_generated_item.add(flatten_generated_item614.getTree());

            	    }
            	    break;

            	default :
            	    break loop181;
                }
            } while (true);


            SEMI_COLON615=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_nested_blk6136); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI_COLON.add(SEMI_COLON615);


            // AST REWRITE
            // elements: flatten_generated_item, nested_command, GENERATE
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 922:5: -> ( nested_command )* ^( GENERATE ( flatten_generated_item )+ )
            {
                // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:922:8: ( nested_command )*
                while ( stream_nested_command.hasNext() ) {
                    adaptor.addChild(root_0, stream_nested_command.nextTree());

                }
                stream_nested_command.reset();

                // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:922:24: ^( GENERATE ( flatten_generated_item )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                stream_GENERATE.nextNode()
                , root_1);

                if ( !(stream_flatten_generated_item.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_flatten_generated_item.hasNext() ) {
                    adaptor.addChild(root_1, stream_flatten_generated_item.nextTree());

                }
                stream_flatten_generated_item.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_blk"


    public static class nested_command_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_command"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:925:1: nested_command : ( ( identifier_plus EQUAL col_ref PERIOD col_ref_list {...}?)=> ( identifier_plus EQUAL nested_proj ) -> ^( NESTED_CMD identifier_plus nested_proj ) | identifier_plus EQUAL expr -> ^( NESTED_CMD_ASSI identifier_plus expr ) | identifier_plus EQUAL nested_op -> ^( NESTED_CMD identifier_plus nested_op ) );
    public final QueryParser.nested_command_return nested_command() throws RecognitionException {
        QueryParser.nested_command_return retval = new QueryParser.nested_command_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EQUAL617=null;
        Token EQUAL620=null;
        Token EQUAL623=null;
        QueryParser.identifier_plus_return identifier_plus616 =null;

        QueryParser.nested_proj_return nested_proj618 =null;

        QueryParser.identifier_plus_return identifier_plus619 =null;

        QueryParser.expr_return expr621 =null;

        QueryParser.identifier_plus_return identifier_plus622 =null;

        QueryParser.nested_op_return nested_op624 =null;


        Object EQUAL617_tree=null;
        Object EQUAL620_tree=null;
        Object EQUAL623_tree=null;
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleSubtreeStream stream_nested_op=new RewriteRuleSubtreeStream(adaptor,"rule nested_op");
        RewriteRuleSubtreeStream stream_identifier_plus=new RewriteRuleSubtreeStream(adaptor,"rule identifier_plus");
        RewriteRuleSubtreeStream stream_nested_proj=new RewriteRuleSubtreeStream(adaptor,"rule nested_proj");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:925:16: ( ( identifier_plus EQUAL col_ref PERIOD col_ref_list {...}?)=> ( identifier_plus EQUAL nested_proj ) -> ^( NESTED_CMD identifier_plus nested_proj ) | identifier_plus EQUAL expr -> ^( NESTED_CMD_ASSI identifier_plus expr ) | identifier_plus EQUAL nested_op -> ^( NESTED_CMD identifier_plus nested_op ) )
            int alt182=3;
            alt182 = dfa182.predict(input);
            switch (alt182) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:925:18: ( identifier_plus EQUAL col_ref PERIOD col_ref_list {...}?)=> ( identifier_plus EQUAL nested_proj )
                    {
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:925:108: ( identifier_plus EQUAL nested_proj )
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:925:110: identifier_plus EQUAL nested_proj
                    {
                    pushFollow(FOLLOW_identifier_plus_in_nested_command6183);
                    identifier_plus616=identifier_plus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus616.getTree());

                    EQUAL617=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_nested_command6185); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL617);


                    pushFollow(FOLLOW_nested_proj_in_nested_command6187);
                    nested_proj618=nested_proj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nested_proj.add(nested_proj618.getTree());

                    }


                    // AST REWRITE
                    // elements: nested_proj, identifier_plus
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 926:15: -> ^( NESTED_CMD identifier_plus nested_proj )
                    {
                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:926:18: ^( NESTED_CMD identifier_plus nested_proj )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(NESTED_CMD, "NESTED_CMD")
                        , root_1);

                        adaptor.addChild(root_1, stream_identifier_plus.nextTree());

                        adaptor.addChild(root_1, stream_nested_proj.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:927:18: identifier_plus EQUAL expr
                    {
                    pushFollow(FOLLOW_identifier_plus_in_nested_command6234);
                    identifier_plus619=identifier_plus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus619.getTree());

                    EQUAL620=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_nested_command6236); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL620);


                    pushFollow(FOLLOW_expr_in_nested_command6238);
                    expr621=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr621.getTree());

                    // AST REWRITE
                    // elements: expr, identifier_plus
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 928:15: -> ^( NESTED_CMD_ASSI identifier_plus expr )
                    {
                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:928:18: ^( NESTED_CMD_ASSI identifier_plus expr )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(NESTED_CMD_ASSI, "NESTED_CMD_ASSI")
                        , root_1);

                        adaptor.addChild(root_1, stream_identifier_plus.nextTree());

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:929:18: identifier_plus EQUAL nested_op
                    {
                    pushFollow(FOLLOW_identifier_plus_in_nested_command6283);
                    identifier_plus622=identifier_plus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus622.getTree());

                    EQUAL623=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_nested_command6285); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL623);


                    pushFollow(FOLLOW_nested_op_in_nested_command6287);
                    nested_op624=nested_op();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nested_op.add(nested_op624.getTree());

                    // AST REWRITE
                    // elements: identifier_plus, nested_op
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 930:15: -> ^( NESTED_CMD identifier_plus nested_op )
                    {
                        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:930:18: ^( NESTED_CMD identifier_plus nested_op )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(NESTED_CMD, "NESTED_CMD")
                        , root_1);

                        adaptor.addChild(root_1, stream_identifier_plus.nextTree());

                        adaptor.addChild(root_1, stream_nested_op.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_command"


    public static class nested_op_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_op"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:933:1: nested_op : ( nested_filter | nested_sort | nested_distinct | nested_limit | nested_cross | nested_foreach );
    public final QueryParser.nested_op_return nested_op() throws RecognitionException {
        QueryParser.nested_op_return retval = new QueryParser.nested_op_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.nested_filter_return nested_filter625 =null;

        QueryParser.nested_sort_return nested_sort626 =null;

        QueryParser.nested_distinct_return nested_distinct627 =null;

        QueryParser.nested_limit_return nested_limit628 =null;

        QueryParser.nested_cross_return nested_cross629 =null;

        QueryParser.nested_foreach_return nested_foreach630 =null;



        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:933:11: ( nested_filter | nested_sort | nested_distinct | nested_limit | nested_cross | nested_foreach )
            int alt183=6;
            switch ( input.LA(1) ) {
            case FILTER:
                {
                alt183=1;
                }
                break;
            case ORDER:
                {
                alt183=2;
                }
                break;
            case DISTINCT:
                {
                alt183=3;
                }
                break;
            case LIMIT:
                {
                alt183=4;
                }
                break;
            case CROSS:
                {
                alt183=5;
                }
                break;
            case FOREACH:
                {
                alt183=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 183, 0, input);

                throw nvae;

            }

            switch (alt183) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:933:13: nested_filter
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_nested_filter_in_nested_op6322);
                    nested_filter625=nested_filter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_filter625.getTree());

                    }
                    break;
                case 2 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:934:13: nested_sort
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_nested_sort_in_nested_op6336);
                    nested_sort626=nested_sort();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_sort626.getTree());

                    }
                    break;
                case 3 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:935:13: nested_distinct
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_nested_distinct_in_nested_op6350);
                    nested_distinct627=nested_distinct();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_distinct627.getTree());

                    }
                    break;
                case 4 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:936:13: nested_limit
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_nested_limit_in_nested_op6364);
                    nested_limit628=nested_limit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_limit628.getTree());

                    }
                    break;
                case 5 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:937:13: nested_cross
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_nested_cross_in_nested_op6378);
                    nested_cross629=nested_cross();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_cross629.getTree());

                    }
                    break;
                case 6 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:938:13: nested_foreach
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_nested_foreach_in_nested_op6392);
                    nested_foreach630=nested_foreach();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_foreach630.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_op"


    public static class nested_proj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_proj"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:941:1: nested_proj : col_ref PERIOD col_ref_list -> ^( NESTED_PROJ col_ref col_ref_list ) ;
    public final QueryParser.nested_proj_return nested_proj() throws RecognitionException {
        QueryParser.nested_proj_return retval = new QueryParser.nested_proj_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token PERIOD632=null;
        QueryParser.col_ref_return col_ref631 =null;

        QueryParser.col_ref_list_return col_ref_list633 =null;


        Object PERIOD632_tree=null;
        RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,"token PERIOD");
        RewriteRuleSubtreeStream stream_col_ref=new RewriteRuleSubtreeStream(adaptor,"rule col_ref");
        RewriteRuleSubtreeStream stream_col_ref_list=new RewriteRuleSubtreeStream(adaptor,"rule col_ref_list");
        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:941:13: ( col_ref PERIOD col_ref_list -> ^( NESTED_PROJ col_ref col_ref_list ) )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:941:15: col_ref PERIOD col_ref_list
            {
            pushFollow(FOLLOW_col_ref_in_nested_proj6401);
            col_ref631=col_ref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_col_ref.add(col_ref631.getTree());

            PERIOD632=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_nested_proj6403); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD632);


            pushFollow(FOLLOW_col_ref_list_in_nested_proj6405);
            col_ref_list633=col_ref_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_col_ref_list.add(col_ref_list633.getTree());

            // AST REWRITE
            // elements: col_ref, col_ref_list
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 942:12: -> ^( NESTED_PROJ col_ref col_ref_list )
            {
                // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:942:15: ^( NESTED_PROJ col_ref col_ref_list )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(NESTED_PROJ, "NESTED_PROJ")
                , root_1);

                adaptor.addChild(root_1, stream_col_ref.nextTree());

                adaptor.addChild(root_1, stream_col_ref_list.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_proj"


    public static class col_ref_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "col_ref_list"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:945:1: col_ref_list : ( col_ref | ( LEFT_PAREN col_ref ( COMMA col_ref )* RIGHT_PAREN ) ) -> ( col_ref )+ ;
    public final QueryParser.col_ref_list_return col_ref_list() throws RecognitionException {
        QueryParser.col_ref_list_return retval = new QueryParser.col_ref_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN635=null;
        Token COMMA637=null;
        Token RIGHT_PAREN639=null;
        QueryParser.col_ref_return col_ref634 =null;

        QueryParser.col_ref_return col_ref636 =null;

        QueryParser.col_ref_return col_ref638 =null;


        Object LEFT_PAREN635_tree=null;
        Object COMMA637_tree=null;
        Object RIGHT_PAREN639_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleSubtreeStream stream_col_ref=new RewriteRuleSubtreeStream(adaptor,"rule col_ref");
        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:945:14: ( ( col_ref | ( LEFT_PAREN col_ref ( COMMA col_ref )* RIGHT_PAREN ) ) -> ( col_ref )+ )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:945:16: ( col_ref | ( LEFT_PAREN col_ref ( COMMA col_ref )* RIGHT_PAREN ) )
            {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:945:16: ( col_ref | ( LEFT_PAREN col_ref ( COMMA col_ref )* RIGHT_PAREN ) )
            int alt185=2;
            int LA185_0 = input.LA(1);

            if ( (LA185_0==CUBE||LA185_0==DOLLARVAR||(LA185_0 >= ELSE && LA185_0 <= END)||LA185_0==GROUP||LA185_0==IDENTIFIER||LA185_0==IN||LA185_0==RANK||LA185_0==THEN||LA185_0==WHEN) ) {
                alt185=1;
            }
            else if ( (LA185_0==LEFT_PAREN) ) {
                alt185=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 185, 0, input);

                throw nvae;

            }
            switch (alt185) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:945:18: col_ref
                    {
                    pushFollow(FOLLOW_col_ref_in_col_ref_list6439);
                    col_ref634=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_col_ref.add(col_ref634.getTree());

                    }
                    break;
                case 2 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:945:28: ( LEFT_PAREN col_ref ( COMMA col_ref )* RIGHT_PAREN )
                    {
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:945:28: ( LEFT_PAREN col_ref ( COMMA col_ref )* RIGHT_PAREN )
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:945:30: LEFT_PAREN col_ref ( COMMA col_ref )* RIGHT_PAREN
                    {
                    LEFT_PAREN635=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_col_ref_list6445); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN635);


                    pushFollow(FOLLOW_col_ref_in_col_ref_list6447);
                    col_ref636=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_col_ref.add(col_ref636.getTree());

                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:945:49: ( COMMA col_ref )*
                    loop184:
                    do {
                        int alt184=2;
                        int LA184_0 = input.LA(1);

                        if ( (LA184_0==COMMA) ) {
                            alt184=1;
                        }


                        switch (alt184) {
                    	case 1 :
                    	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:945:51: COMMA col_ref
                    	    {
                    	    COMMA637=(Token)match(input,COMMA,FOLLOW_COMMA_in_col_ref_list6451); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA637);


                    	    pushFollow(FOLLOW_col_ref_in_col_ref_list6453);
                    	    col_ref638=col_ref();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_col_ref.add(col_ref638.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop184;
                        }
                    } while (true);


                    RIGHT_PAREN639=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_col_ref_list6458); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN639);


                    }


                    }
                    break;

            }


            // AST REWRITE
            // elements: col_ref
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 946:13: -> ( col_ref )+
            {
                if ( !(stream_col_ref.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_col_ref.hasNext() ) {
                    adaptor.addChild(root_0, stream_col_ref.nextTree());

                }
                stream_col_ref.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "col_ref_list"


    public static class nested_filter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_filter"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:949:1: nested_filter : FILTER ^ nested_op_input BY ! cond ;
    public final QueryParser.nested_filter_return nested_filter() throws RecognitionException {
        QueryParser.nested_filter_return retval = new QueryParser.nested_filter_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token FILTER640=null;
        Token BY642=null;
        QueryParser.nested_op_input_return nested_op_input641 =null;

        QueryParser.cond_return cond643 =null;


        Object FILTER640_tree=null;
        Object BY642_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:949:15: ( FILTER ^ nested_op_input BY ! cond )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:949:17: FILTER ^ nested_op_input BY ! cond
            {
            root_0 = (Object)adaptor.nil();


            FILTER640=(Token)match(input,FILTER,FOLLOW_FILTER_in_nested_filter6488); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FILTER640_tree = 
            (Object)adaptor.create(FILTER640)
            ;
            root_0 = (Object)adaptor.becomeRoot(FILTER640_tree, root_0);
            }

            pushFollow(FOLLOW_nested_op_input_in_nested_filter6491);
            nested_op_input641=nested_op_input();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_op_input641.getTree());

            BY642=(Token)match(input,BY,FOLLOW_BY_in_nested_filter6493); if (state.failed) return retval;

            pushFollow(FOLLOW_cond_in_nested_filter6496);
            cond643=cond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cond643.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_filter"


    public static class nested_sort_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_sort"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:952:1: nested_sort : ORDER ^ nested_op_input BY ! order_by_clause ( USING ! func_clause )? ;
    public final QueryParser.nested_sort_return nested_sort() throws RecognitionException {
        QueryParser.nested_sort_return retval = new QueryParser.nested_sort_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ORDER644=null;
        Token BY646=null;
        Token USING648=null;
        QueryParser.nested_op_input_return nested_op_input645 =null;

        QueryParser.order_by_clause_return order_by_clause647 =null;

        QueryParser.func_clause_return func_clause649 =null;


        Object ORDER644_tree=null;
        Object BY646_tree=null;
        Object USING648_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:952:13: ( ORDER ^ nested_op_input BY ! order_by_clause ( USING ! func_clause )? )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:952:15: ORDER ^ nested_op_input BY ! order_by_clause ( USING ! func_clause )?
            {
            root_0 = (Object)adaptor.nil();


            ORDER644=(Token)match(input,ORDER,FOLLOW_ORDER_in_nested_sort6505); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ORDER644_tree = 
            (Object)adaptor.create(ORDER644)
            ;
            root_0 = (Object)adaptor.becomeRoot(ORDER644_tree, root_0);
            }

            pushFollow(FOLLOW_nested_op_input_in_nested_sort6508);
            nested_op_input645=nested_op_input();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_op_input645.getTree());

            BY646=(Token)match(input,BY,FOLLOW_BY_in_nested_sort6510); if (state.failed) return retval;

            pushFollow(FOLLOW_order_by_clause_in_nested_sort6514);
            order_by_clause647=order_by_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, order_by_clause647.getTree());

            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:952:59: ( USING ! func_clause )?
            int alt186=2;
            int LA186_0 = input.LA(1);

            if ( (LA186_0==USING) ) {
                alt186=1;
            }
            switch (alt186) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:952:61: USING ! func_clause
                    {
                    USING648=(Token)match(input,USING,FOLLOW_USING_in_nested_sort6518); if (state.failed) return retval;

                    pushFollow(FOLLOW_func_clause_in_nested_sort6521);
                    func_clause649=func_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_clause649.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_sort"


    public static class nested_distinct_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_distinct"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:955:1: nested_distinct : DISTINCT ^ nested_op_input ;
    public final QueryParser.nested_distinct_return nested_distinct() throws RecognitionException {
        QueryParser.nested_distinct_return retval = new QueryParser.nested_distinct_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DISTINCT650=null;
        QueryParser.nested_op_input_return nested_op_input651 =null;


        Object DISTINCT650_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:955:17: ( DISTINCT ^ nested_op_input )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:955:19: DISTINCT ^ nested_op_input
            {
            root_0 = (Object)adaptor.nil();


            DISTINCT650=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_nested_distinct6533); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DISTINCT650_tree = 
            (Object)adaptor.create(DISTINCT650)
            ;
            root_0 = (Object)adaptor.becomeRoot(DISTINCT650_tree, root_0);
            }

            pushFollow(FOLLOW_nested_op_input_in_nested_distinct6536);
            nested_op_input651=nested_op_input();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_op_input651.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_distinct"


    public static class nested_limit_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_limit"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:958:1: nested_limit : LIMIT ^ nested_op_input ( ( INTEGER SEMI_COLON )=> INTEGER | expr ) ;
    public final QueryParser.nested_limit_return nested_limit() throws RecognitionException {
        QueryParser.nested_limit_return retval = new QueryParser.nested_limit_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LIMIT652=null;
        Token INTEGER654=null;
        QueryParser.nested_op_input_return nested_op_input653 =null;

        QueryParser.expr_return expr655 =null;


        Object LIMIT652_tree=null;
        Object INTEGER654_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:958:14: ( LIMIT ^ nested_op_input ( ( INTEGER SEMI_COLON )=> INTEGER | expr ) )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:958:16: LIMIT ^ nested_op_input ( ( INTEGER SEMI_COLON )=> INTEGER | expr )
            {
            root_0 = (Object)adaptor.nil();


            LIMIT652=(Token)match(input,LIMIT,FOLLOW_LIMIT_in_nested_limit6545); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LIMIT652_tree = 
            (Object)adaptor.create(LIMIT652)
            ;
            root_0 = (Object)adaptor.becomeRoot(LIMIT652_tree, root_0);
            }

            pushFollow(FOLLOW_nested_op_input_in_nested_limit6548);
            nested_op_input653=nested_op_input();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_op_input653.getTree());

            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:958:39: ( ( INTEGER SEMI_COLON )=> INTEGER | expr )
            int alt187=2;
            int LA187_0 = input.LA(1);

            if ( (LA187_0==INTEGER) ) {
                int LA187_1 = input.LA(2);

                if ( (synpred4_QueryParser()) ) {
                    alt187=1;
                }
                else if ( (true) ) {
                    alt187=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 187, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA187_0==ALL||LA187_0==AND||(LA187_0 >= AS && LA187_0 <= ASSERT)||(LA187_0 >= BIGDECIMAL && LA187_0 <= BIGINTEGERNUMBER)||(LA187_0 >= BY && LA187_0 <= COGROUP)||(LA187_0 >= CROSS && LA187_0 <= DATETIME)||LA187_0==DEFINE||LA187_0==DESC||LA187_0==DISTINCT||LA187_0==DOLLARVAR||LA187_0==DOUBLENUMBER||(LA187_0 >= ELSE && LA187_0 <= END)||LA187_0==FALSE||LA187_0==FILTER||(LA187_0 >= FLOATNUMBER && LA187_0 <= GROUP)||(LA187_0 >= IDENTIFIER && LA187_0 <= INPUT)||(LA187_0 >= INTO && LA187_0 <= LEFT_PAREN)||(LA187_0 >= LIMIT && LA187_0 <= LOAD)||LA187_0==LONGINTEGER||(LA187_0 >= MAPREDUCE && LA187_0 <= MINUS)||LA187_0==NULL||(LA187_0 >= OR && LA187_0 <= ORDER)||(LA187_0 >= OUTER && LA187_0 <= PARTITION)||(LA187_0 >= QUOTEDSTRING && LA187_0 <= RIGHT)||(LA187_0 >= ROLLUP && LA187_0 <= SAMPLE)||LA187_0==SHIP||LA187_0==SPLIT||(LA187_0 >= STDERROR && LA187_0 <= TRUE)||(LA187_0 >= UNION && LA187_0 <= USING)||LA187_0==WHEN||(LA187_0 >= BOOL && LA187_0 <= BOOL_COND)||LA187_0==REALIAS) ) {
                alt187=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 187, 0, input);

                throw nvae;

            }
            switch (alt187) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:958:41: ( INTEGER SEMI_COLON )=> INTEGER
                    {
                    INTEGER654=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_nested_limit6560); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTEGER654_tree = 
                    (Object)adaptor.create(INTEGER654)
                    ;
                    adaptor.addChild(root_0, INTEGER654_tree);
                    }

                    }
                    break;
                case 2 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:958:75: expr
                    {
                    pushFollow(FOLLOW_expr_in_nested_limit6564);
                    expr655=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr655.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_limit"


    public static class nested_cross_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_cross"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:961:1: nested_cross : CROSS ^ nested_op_input_list ;
    public final QueryParser.nested_cross_return nested_cross() throws RecognitionException {
        QueryParser.nested_cross_return retval = new QueryParser.nested_cross_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CROSS656=null;
        QueryParser.nested_op_input_list_return nested_op_input_list657 =null;


        Object CROSS656_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:961:14: ( CROSS ^ nested_op_input_list )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:961:16: CROSS ^ nested_op_input_list
            {
            root_0 = (Object)adaptor.nil();


            CROSS656=(Token)match(input,CROSS,FOLLOW_CROSS_in_nested_cross6575); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CROSS656_tree = 
            (Object)adaptor.create(CROSS656)
            ;
            root_0 = (Object)adaptor.becomeRoot(CROSS656_tree, root_0);
            }

            pushFollow(FOLLOW_nested_op_input_list_in_nested_cross6578);
            nested_op_input_list657=nested_op_input_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_op_input_list657.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_cross"


    public static class nested_foreach_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_foreach"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:964:1: nested_foreach : FOREACH nested_op_input GENERATE flatten_generated_item ( COMMA flatten_generated_item )* -> ^( FOREACH nested_op_input ^( GENERATE ( flatten_generated_item )+ ) ) ;
    public final QueryParser.nested_foreach_return nested_foreach() throws RecognitionException {
        QueryParser.nested_foreach_return retval = new QueryParser.nested_foreach_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token FOREACH658=null;
        Token GENERATE660=null;
        Token COMMA662=null;
        QueryParser.nested_op_input_return nested_op_input659 =null;

        QueryParser.flatten_generated_item_return flatten_generated_item661 =null;

        QueryParser.flatten_generated_item_return flatten_generated_item663 =null;


        Object FOREACH658_tree=null;
        Object GENERATE660_tree=null;
        Object COMMA662_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_GENERATE=new RewriteRuleTokenStream(adaptor,"token GENERATE");
        RewriteRuleTokenStream stream_FOREACH=new RewriteRuleTokenStream(adaptor,"token FOREACH");
        RewriteRuleSubtreeStream stream_nested_op_input=new RewriteRuleSubtreeStream(adaptor,"rule nested_op_input");
        RewriteRuleSubtreeStream stream_flatten_generated_item=new RewriteRuleSubtreeStream(adaptor,"rule flatten_generated_item");
        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:964:15: ( FOREACH nested_op_input GENERATE flatten_generated_item ( COMMA flatten_generated_item )* -> ^( FOREACH nested_op_input ^( GENERATE ( flatten_generated_item )+ ) ) )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:964:17: FOREACH nested_op_input GENERATE flatten_generated_item ( COMMA flatten_generated_item )*
            {
            FOREACH658=(Token)match(input,FOREACH,FOLLOW_FOREACH_in_nested_foreach6586); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FOREACH.add(FOREACH658);


            pushFollow(FOLLOW_nested_op_input_in_nested_foreach6588);
            nested_op_input659=nested_op_input();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nested_op_input.add(nested_op_input659.getTree());

            GENERATE660=(Token)match(input,GENERATE,FOLLOW_GENERATE_in_nested_foreach6590); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GENERATE.add(GENERATE660);


            pushFollow(FOLLOW_flatten_generated_item_in_nested_foreach6592);
            flatten_generated_item661=flatten_generated_item();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_flatten_generated_item.add(flatten_generated_item661.getTree());

            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:964:73: ( COMMA flatten_generated_item )*
            loop188:
            do {
                int alt188=2;
                int LA188_0 = input.LA(1);

                if ( (LA188_0==COMMA) ) {
                    alt188=1;
                }


                switch (alt188) {
            	case 1 :
            	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:964:75: COMMA flatten_generated_item
            	    {
            	    COMMA662=(Token)match(input,COMMA,FOLLOW_COMMA_in_nested_foreach6596); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA662);


            	    pushFollow(FOLLOW_flatten_generated_item_in_nested_foreach6598);
            	    flatten_generated_item663=flatten_generated_item();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_flatten_generated_item.add(flatten_generated_item663.getTree());

            	    }
            	    break;

            	default :
            	    break loop188;
                }
            } while (true);


            // AST REWRITE
            // elements: nested_op_input, GENERATE, FOREACH, flatten_generated_item
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 965:5: -> ^( FOREACH nested_op_input ^( GENERATE ( flatten_generated_item )+ ) )
            {
                // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:965:8: ^( FOREACH nested_op_input ^( GENERATE ( flatten_generated_item )+ ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                stream_FOREACH.nextNode()
                , root_1);

                adaptor.addChild(root_1, stream_nested_op_input.nextTree());

                // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:965:35: ^( GENERATE ( flatten_generated_item )+ )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                stream_GENERATE.nextNode()
                , root_2);

                if ( !(stream_flatten_generated_item.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_flatten_generated_item.hasNext() ) {
                    adaptor.addChild(root_2, stream_flatten_generated_item.nextTree());

                }
                stream_flatten_generated_item.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_foreach"


    public static class nested_op_input_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_op_input"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:968:1: nested_op_input : ( col_ref | nested_proj );
    public final QueryParser.nested_op_input_return nested_op_input() throws RecognitionException {
        QueryParser.nested_op_input_return retval = new QueryParser.nested_op_input_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.col_ref_return col_ref664 =null;

        QueryParser.nested_proj_return nested_proj665 =null;



        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:968:17: ( col_ref | nested_proj )
            int alt189=2;
            switch ( input.LA(1) ) {
            case DOLLARVAR:
            case GROUP:
                {
                int LA189_1 = input.LA(2);

                if ( (LA189_1==ALL||LA189_1==AND||(LA189_1 >= AS && LA189_1 <= ASSERT)||(LA189_1 >= BIGDECIMAL && LA189_1 <= BIGINTEGERNUMBER)||(LA189_1 >= BY && LA189_1 <= COGROUP)||(LA189_1 >= COMMA && LA189_1 <= DATETIME)||LA189_1==DEFINE||LA189_1==DESC||LA189_1==DISTINCT||LA189_1==DOLLARVAR||LA189_1==DOUBLENUMBER||(LA189_1 >= ELSE && LA189_1 <= END)||LA189_1==FALSE||LA189_1==FILTER||(LA189_1 >= FLOATNUMBER && LA189_1 <= GROUP)||(LA189_1 >= IDENTIFIER && LA189_1 <= INPUT)||(LA189_1 >= INTEGER && LA189_1 <= LEFT_PAREN)||(LA189_1 >= LIMIT && LA189_1 <= LOAD)||LA189_1==LONGINTEGER||(LA189_1 >= MAPREDUCE && LA189_1 <= MINUS)||LA189_1==NULL||(LA189_1 >= OR && LA189_1 <= ORDER)||(LA189_1 >= OUTER && LA189_1 <= PARTITION)||(LA189_1 >= QUOTEDSTRING && LA189_1 <= RIGHT)||(LA189_1 >= ROLLUP && LA189_1 <= SHIP)||LA189_1==SPLIT||(LA189_1 >= STDERROR && LA189_1 <= TRUE)||(LA189_1 >= UNION && LA189_1 <= USING)||LA189_1==WHEN||(LA189_1 >= BOOL && LA189_1 <= BOOL_COND)||LA189_1==REALIAS) ) {
                    alt189=1;
                }
                else if ( (LA189_1==PERIOD) ) {
                    alt189=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 189, 1, input);

                    throw nvae;

                }
                }
                break;
            case IDENTIFIER:
                {
                int LA189_2 = input.LA(2);

                if ( (LA189_2==ALL||LA189_2==AND||(LA189_2 >= AS && LA189_2 <= ASSERT)||(LA189_2 >= BIGDECIMAL && LA189_2 <= BIGINTEGERNUMBER)||(LA189_2 >= BY && LA189_2 <= COGROUP)||(LA189_2 >= COMMA && LA189_2 <= DATETIME)||LA189_2==DEFINE||LA189_2==DESC||LA189_2==DISTINCT||LA189_2==DOLLARVAR||LA189_2==DOUBLENUMBER||(LA189_2 >= ELSE && LA189_2 <= END)||LA189_2==FALSE||LA189_2==FILTER||(LA189_2 >= FLOATNUMBER && LA189_2 <= GROUP)||(LA189_2 >= IDENTIFIER && LA189_2 <= INPUT)||(LA189_2 >= INTEGER && LA189_2 <= LEFT_PAREN)||(LA189_2 >= LIMIT && LA189_2 <= LOAD)||LA189_2==LONGINTEGER||(LA189_2 >= MAPREDUCE && LA189_2 <= MINUS)||LA189_2==NULL||(LA189_2 >= OR && LA189_2 <= ORDER)||(LA189_2 >= OUTER && LA189_2 <= PARTITION)||(LA189_2 >= QUOTEDSTRING && LA189_2 <= RIGHT)||(LA189_2 >= ROLLUP && LA189_2 <= SHIP)||LA189_2==SPLIT||(LA189_2 >= STDERROR && LA189_2 <= TRUE)||(LA189_2 >= UNION && LA189_2 <= USING)||LA189_2==WHEN||(LA189_2 >= BOOL && LA189_2 <= BOOL_COND)||LA189_2==REALIAS) ) {
                    alt189=1;
                }
                else if ( (LA189_2==PERIOD) ) {
                    alt189=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 189, 2, input);

                    throw nvae;

                }
                }
                break;
            case CUBE:
            case ELSE:
            case END:
            case IN:
            case RANK:
            case THEN:
            case WHEN:
                {
                int LA189_3 = input.LA(2);

                if ( (LA189_3==ALL||LA189_3==AND||(LA189_3 >= AS && LA189_3 <= ASSERT)||(LA189_3 >= BIGDECIMAL && LA189_3 <= BIGINTEGERNUMBER)||(LA189_3 >= BY && LA189_3 <= COGROUP)||(LA189_3 >= COMMA && LA189_3 <= DATETIME)||LA189_3==DEFINE||LA189_3==DESC||LA189_3==DISTINCT||LA189_3==DOLLARVAR||LA189_3==DOUBLENUMBER||(LA189_3 >= ELSE && LA189_3 <= END)||LA189_3==FALSE||LA189_3==FILTER||(LA189_3 >= FLOATNUMBER && LA189_3 <= GROUP)||(LA189_3 >= IDENTIFIER && LA189_3 <= INPUT)||(LA189_3 >= INTEGER && LA189_3 <= LEFT_PAREN)||(LA189_3 >= LIMIT && LA189_3 <= LOAD)||LA189_3==LONGINTEGER||(LA189_3 >= MAPREDUCE && LA189_3 <= MINUS)||LA189_3==NULL||(LA189_3 >= OR && LA189_3 <= ORDER)||(LA189_3 >= OUTER && LA189_3 <= PARTITION)||(LA189_3 >= QUOTEDSTRING && LA189_3 <= RIGHT)||(LA189_3 >= ROLLUP && LA189_3 <= SHIP)||LA189_3==SPLIT||(LA189_3 >= STDERROR && LA189_3 <= TRUE)||(LA189_3 >= UNION && LA189_3 <= USING)||LA189_3==WHEN||(LA189_3 >= BOOL && LA189_3 <= BOOL_COND)||LA189_3==REALIAS) ) {
                    alt189=1;
                }
                else if ( (LA189_3==PERIOD) ) {
                    alt189=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 189, 3, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 189, 0, input);

                throw nvae;

            }

            switch (alt189) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:968:19: col_ref
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_col_ref_in_nested_op_input6633);
                    col_ref664=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_ref664.getTree());

                    }
                    break;
                case 2 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:968:29: nested_proj
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_nested_proj_in_nested_op_input6637);
                    nested_proj665=nested_proj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_proj665.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_op_input"


    public static class nested_op_input_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_op_input_list"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:971:1: nested_op_input_list : nested_op_input ( COMMA nested_op_input )* -> ( nested_op_input )+ ;
    public final QueryParser.nested_op_input_list_return nested_op_input_list() throws RecognitionException {
        QueryParser.nested_op_input_list_return retval = new QueryParser.nested_op_input_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA667=null;
        QueryParser.nested_op_input_return nested_op_input666 =null;

        QueryParser.nested_op_input_return nested_op_input668 =null;


        Object COMMA667_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_nested_op_input=new RewriteRuleSubtreeStream(adaptor,"rule nested_op_input");
        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:971:22: ( nested_op_input ( COMMA nested_op_input )* -> ( nested_op_input )+ )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:971:24: nested_op_input ( COMMA nested_op_input )*
            {
            pushFollow(FOLLOW_nested_op_input_in_nested_op_input_list6646);
            nested_op_input666=nested_op_input();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nested_op_input.add(nested_op_input666.getTree());

            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:971:40: ( COMMA nested_op_input )*
            loop190:
            do {
                int alt190=2;
                int LA190_0 = input.LA(1);

                if ( (LA190_0==COMMA) ) {
                    alt190=1;
                }


                switch (alt190) {
            	case 1 :
            	    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:971:42: COMMA nested_op_input
            	    {
            	    COMMA667=(Token)match(input,COMMA,FOLLOW_COMMA_in_nested_op_input_list6650); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA667);


            	    pushFollow(FOLLOW_nested_op_input_in_nested_op_input_list6652);
            	    nested_op_input668=nested_op_input();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_nested_op_input.add(nested_op_input668.getTree());

            	    }
            	    break;

            	default :
            	    break loop190;
                }
            } while (true);


            // AST REWRITE
            // elements: nested_op_input
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 972:9: -> ( nested_op_input )+
            {
                if ( !(stream_nested_op_input.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_nested_op_input.hasNext() ) {
                    adaptor.addChild(root_0, stream_nested_op_input.nextTree());

                }
                stream_nested_op_input.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_op_input_list"


    public static class eid_without_columns_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "eid_without_columns"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:978:1: eid_without_columns : ( rel_str_op | IMPORT | REGISTER | RETURNS | DEFINE | LOAD | FILTER | FOREACH | ROLLUP | ORDER | DISTINCT | COGROUP | JOIN | CROSS | UNION | SPLIT | INTO | IF | ALL | AS | BY | USING | INNER | OUTER | PARALLEL | PARTITION | AND | OR | GENERATE | ASC | DESC | BOOL | BIGINTEGER | BIGDECIMAL | DATETIME | CHARARRAY | BYTEARRAY | IS | STREAM | THROUGH | STORE | MAPREDUCE | SHIP | CACHE | INPUT | OUTPUT | STDERROR | STDIN | STDOUT | LIMIT | SAMPLE | LEFT | RIGHT | FULL | REALIAS | BOOL_COND | ASSERT );
    public final QueryParser.eid_without_columns_return eid_without_columns() throws RecognitionException {
        QueryParser.eid_without_columns_return retval = new QueryParser.eid_without_columns_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token IMPORT670=null;
        Token REGISTER671=null;
        Token RETURNS672=null;
        Token DEFINE673=null;
        Token LOAD674=null;
        Token FILTER675=null;
        Token FOREACH676=null;
        Token ROLLUP677=null;
        Token ORDER678=null;
        Token DISTINCT679=null;
        Token COGROUP680=null;
        Token JOIN681=null;
        Token CROSS682=null;
        Token UNION683=null;
        Token SPLIT684=null;
        Token INTO685=null;
        Token IF686=null;
        Token ALL687=null;
        Token AS688=null;
        Token BY689=null;
        Token USING690=null;
        Token INNER691=null;
        Token OUTER692=null;
        Token PARALLEL693=null;
        Token PARTITION694=null;
        Token AND695=null;
        Token OR696=null;
        Token GENERATE697=null;
        Token ASC698=null;
        Token DESC699=null;
        Token BOOL700=null;
        Token BIGINTEGER701=null;
        Token BIGDECIMAL702=null;
        Token DATETIME703=null;
        Token CHARARRAY704=null;
        Token BYTEARRAY705=null;
        Token IS706=null;
        Token STREAM707=null;
        Token THROUGH708=null;
        Token STORE709=null;
        Token MAPREDUCE710=null;
        Token SHIP711=null;
        Token CACHE712=null;
        Token INPUT713=null;
        Token OUTPUT714=null;
        Token STDERROR715=null;
        Token STDIN716=null;
        Token STDOUT717=null;
        Token LIMIT718=null;
        Token SAMPLE719=null;
        Token LEFT720=null;
        Token RIGHT721=null;
        Token FULL722=null;
        Token REALIAS723=null;
        Token BOOL_COND724=null;
        Token ASSERT725=null;
        QueryParser.rel_str_op_return rel_str_op669 =null;


        Object IMPORT670_tree=null;
        Object REGISTER671_tree=null;
        Object RETURNS672_tree=null;
        Object DEFINE673_tree=null;
        Object LOAD674_tree=null;
        Object FILTER675_tree=null;
        Object FOREACH676_tree=null;
        Object ROLLUP677_tree=null;
        Object ORDER678_tree=null;
        Object DISTINCT679_tree=null;
        Object COGROUP680_tree=null;
        Object JOIN681_tree=null;
        Object CROSS682_tree=null;
        Object UNION683_tree=null;
        Object SPLIT684_tree=null;
        Object INTO685_tree=null;
        Object IF686_tree=null;
        Object ALL687_tree=null;
        Object AS688_tree=null;
        Object BY689_tree=null;
        Object USING690_tree=null;
        Object INNER691_tree=null;
        Object OUTER692_tree=null;
        Object PARALLEL693_tree=null;
        Object PARTITION694_tree=null;
        Object AND695_tree=null;
        Object OR696_tree=null;
        Object GENERATE697_tree=null;
        Object ASC698_tree=null;
        Object DESC699_tree=null;
        Object BOOL700_tree=null;
        Object BIGINTEGER701_tree=null;
        Object BIGDECIMAL702_tree=null;
        Object DATETIME703_tree=null;
        Object CHARARRAY704_tree=null;
        Object BYTEARRAY705_tree=null;
        Object IS706_tree=null;
        Object STREAM707_tree=null;
        Object THROUGH708_tree=null;
        Object STORE709_tree=null;
        Object MAPREDUCE710_tree=null;
        Object SHIP711_tree=null;
        Object CACHE712_tree=null;
        Object INPUT713_tree=null;
        Object OUTPUT714_tree=null;
        Object STDERROR715_tree=null;
        Object STDIN716_tree=null;
        Object STDOUT717_tree=null;
        Object LIMIT718_tree=null;
        Object SAMPLE719_tree=null;
        Object LEFT720_tree=null;
        Object RIGHT721_tree=null;
        Object FULL722_tree=null;
        Object REALIAS723_tree=null;
        Object BOOL_COND724_tree=null;
        Object ASSERT725_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:978:21: ( rel_str_op | IMPORT | REGISTER | RETURNS | DEFINE | LOAD | FILTER | FOREACH | ROLLUP | ORDER | DISTINCT | COGROUP | JOIN | CROSS | UNION | SPLIT | INTO | IF | ALL | AS | BY | USING | INNER | OUTER | PARALLEL | PARTITION | AND | OR | GENERATE | ASC | DESC | BOOL | BIGINTEGER | BIGDECIMAL | DATETIME | CHARARRAY | BYTEARRAY | IS | STREAM | THROUGH | STORE | MAPREDUCE | SHIP | CACHE | INPUT | OUTPUT | STDERROR | STDIN | STDOUT | LIMIT | SAMPLE | LEFT | RIGHT | FULL | REALIAS | BOOL_COND | ASSERT )
            int alt191=57;
            switch ( input.LA(1) ) {
            case STR_OP_EQ:
            case STR_OP_GT:
            case STR_OP_GTE:
            case STR_OP_LT:
            case STR_OP_LTE:
            case STR_OP_MATCHES:
            case STR_OP_NE:
                {
                alt191=1;
                }
                break;
            case IMPORT:
                {
                alt191=2;
                }
                break;
            case REGISTER:
                {
                alt191=3;
                }
                break;
            case RETURNS:
                {
                alt191=4;
                }
                break;
            case DEFINE:
                {
                alt191=5;
                }
                break;
            case LOAD:
                {
                alt191=6;
                }
                break;
            case FILTER:
                {
                alt191=7;
                }
                break;
            case FOREACH:
                {
                alt191=8;
                }
                break;
            case ROLLUP:
                {
                alt191=9;
                }
                break;
            case ORDER:
                {
                alt191=10;
                }
                break;
            case DISTINCT:
                {
                alt191=11;
                }
                break;
            case COGROUP:
                {
                alt191=12;
                }
                break;
            case JOIN:
                {
                alt191=13;
                }
                break;
            case CROSS:
                {
                alt191=14;
                }
                break;
            case UNION:
                {
                alt191=15;
                }
                break;
            case SPLIT:
                {
                alt191=16;
                }
                break;
            case INTO:
                {
                alt191=17;
                }
                break;
            case IF:
                {
                alt191=18;
                }
                break;
            case ALL:
                {
                alt191=19;
                }
                break;
            case AS:
                {
                alt191=20;
                }
                break;
            case BY:
                {
                alt191=21;
                }
                break;
            case USING:
                {
                alt191=22;
                }
                break;
            case INNER:
                {
                alt191=23;
                }
                break;
            case OUTER:
                {
                alt191=24;
                }
                break;
            case PARALLEL:
                {
                alt191=25;
                }
                break;
            case PARTITION:
                {
                alt191=26;
                }
                break;
            case AND:
                {
                alt191=27;
                }
                break;
            case OR:
                {
                alt191=28;
                }
                break;
            case GENERATE:
                {
                alt191=29;
                }
                break;
            case ASC:
                {
                alt191=30;
                }
                break;
            case DESC:
                {
                alt191=31;
                }
                break;
            case BOOL:
                {
                alt191=32;
                }
                break;
            case BIGINTEGER:
                {
                alt191=33;
                }
                break;
            case BIGDECIMAL:
                {
                alt191=34;
                }
                break;
            case DATETIME:
                {
                alt191=35;
                }
                break;
            case CHARARRAY:
                {
                alt191=36;
                }
                break;
            case BYTEARRAY:
                {
                alt191=37;
                }
                break;
            case IS:
                {
                alt191=38;
                }
                break;
            case STREAM:
                {
                alt191=39;
                }
                break;
            case THROUGH:
                {
                alt191=40;
                }
                break;
            case STORE:
                {
                alt191=41;
                }
                break;
            case MAPREDUCE:
                {
                alt191=42;
                }
                break;
            case SHIP:
                {
                alt191=43;
                }
                break;
            case CACHE:
                {
                alt191=44;
                }
                break;
            case INPUT:
                {
                alt191=45;
                }
                break;
            case OUTPUT:
                {
                alt191=46;
                }
                break;
            case STDERROR:
                {
                alt191=47;
                }
                break;
            case STDIN:
                {
                alt191=48;
                }
                break;
            case STDOUT:
                {
                alt191=49;
                }
                break;
            case LIMIT:
                {
                alt191=50;
                }
                break;
            case SAMPLE:
                {
                alt191=51;
                }
                break;
            case LEFT:
                {
                alt191=52;
                }
                break;
            case RIGHT:
                {
                alt191=53;
                }
                break;
            case FULL:
                {
                alt191=54;
                }
                break;
            case REALIAS:
                {
                alt191=55;
                }
                break;
            case BOOL_COND:
                {
                alt191=56;
                }
                break;
            case ASSERT:
                {
                alt191=57;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 191, 0, input);

                throw nvae;

            }

            switch (alt191) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:978:23: rel_str_op
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_rel_str_op_in_eid_without_columns6680);
                    rel_str_op669=rel_str_op();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rel_str_op669.getTree());

                    }
                    break;
                case 2 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:979:7: IMPORT
                    {
                    root_0 = (Object)adaptor.nil();


                    IMPORT670=(Token)match(input,IMPORT,FOLLOW_IMPORT_in_eid_without_columns6688); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IMPORT670_tree = 
                    (Object)adaptor.create(IMPORT670)
                    ;
                    adaptor.addChild(root_0, IMPORT670_tree);
                    }

                    }
                    break;
                case 3 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:980:7: REGISTER
                    {
                    root_0 = (Object)adaptor.nil();


                    REGISTER671=(Token)match(input,REGISTER,FOLLOW_REGISTER_in_eid_without_columns6696); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    REGISTER671_tree = 
                    (Object)adaptor.create(REGISTER671)
                    ;
                    adaptor.addChild(root_0, REGISTER671_tree);
                    }

                    }
                    break;
                case 4 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:981:7: RETURNS
                    {
                    root_0 = (Object)adaptor.nil();


                    RETURNS672=(Token)match(input,RETURNS,FOLLOW_RETURNS_in_eid_without_columns6704); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETURNS672_tree = 
                    (Object)adaptor.create(RETURNS672)
                    ;
                    adaptor.addChild(root_0, RETURNS672_tree);
                    }

                    }
                    break;
                case 5 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:982:7: DEFINE
                    {
                    root_0 = (Object)adaptor.nil();


                    DEFINE673=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_eid_without_columns6712); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEFINE673_tree = 
                    (Object)adaptor.create(DEFINE673)
                    ;
                    adaptor.addChild(root_0, DEFINE673_tree);
                    }

                    }
                    break;
                case 6 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:983:7: LOAD
                    {
                    root_0 = (Object)adaptor.nil();


                    LOAD674=(Token)match(input,LOAD,FOLLOW_LOAD_in_eid_without_columns6720); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LOAD674_tree = 
                    (Object)adaptor.create(LOAD674)
                    ;
                    adaptor.addChild(root_0, LOAD674_tree);
                    }

                    }
                    break;
                case 7 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:984:7: FILTER
                    {
                    root_0 = (Object)adaptor.nil();


                    FILTER675=(Token)match(input,FILTER,FOLLOW_FILTER_in_eid_without_columns6728); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FILTER675_tree = 
                    (Object)adaptor.create(FILTER675)
                    ;
                    adaptor.addChild(root_0, FILTER675_tree);
                    }

                    }
                    break;
                case 8 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:985:7: FOREACH
                    {
                    root_0 = (Object)adaptor.nil();


                    FOREACH676=(Token)match(input,FOREACH,FOLLOW_FOREACH_in_eid_without_columns6736); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FOREACH676_tree = 
                    (Object)adaptor.create(FOREACH676)
                    ;
                    adaptor.addChild(root_0, FOREACH676_tree);
                    }

                    }
                    break;
                case 9 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:986:7: ROLLUP
                    {
                    root_0 = (Object)adaptor.nil();


                    ROLLUP677=(Token)match(input,ROLLUP,FOLLOW_ROLLUP_in_eid_without_columns6744); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ROLLUP677_tree = 
                    (Object)adaptor.create(ROLLUP677)
                    ;
                    adaptor.addChild(root_0, ROLLUP677_tree);
                    }

                    }
                    break;
                case 10 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:987:7: ORDER
                    {
                    root_0 = (Object)adaptor.nil();


                    ORDER678=(Token)match(input,ORDER,FOLLOW_ORDER_in_eid_without_columns6752); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ORDER678_tree = 
                    (Object)adaptor.create(ORDER678)
                    ;
                    adaptor.addChild(root_0, ORDER678_tree);
                    }

                    }
                    break;
                case 11 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:988:7: DISTINCT
                    {
                    root_0 = (Object)adaptor.nil();


                    DISTINCT679=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_eid_without_columns6760); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT679_tree = 
                    (Object)adaptor.create(DISTINCT679)
                    ;
                    adaptor.addChild(root_0, DISTINCT679_tree);
                    }

                    }
                    break;
                case 12 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:989:7: COGROUP
                    {
                    root_0 = (Object)adaptor.nil();


                    COGROUP680=(Token)match(input,COGROUP,FOLLOW_COGROUP_in_eid_without_columns6768); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COGROUP680_tree = 
                    (Object)adaptor.create(COGROUP680)
                    ;
                    adaptor.addChild(root_0, COGROUP680_tree);
                    }

                    }
                    break;
                case 13 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:990:7: JOIN
                    {
                    root_0 = (Object)adaptor.nil();


                    JOIN681=(Token)match(input,JOIN,FOLLOW_JOIN_in_eid_without_columns6776); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    JOIN681_tree = 
                    (Object)adaptor.create(JOIN681)
                    ;
                    adaptor.addChild(root_0, JOIN681_tree);
                    }

                    }
                    break;
                case 14 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:991:7: CROSS
                    {
                    root_0 = (Object)adaptor.nil();


                    CROSS682=(Token)match(input,CROSS,FOLLOW_CROSS_in_eid_without_columns6784); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CROSS682_tree = 
                    (Object)adaptor.create(CROSS682)
                    ;
                    adaptor.addChild(root_0, CROSS682_tree);
                    }

                    }
                    break;
                case 15 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:992:7: UNION
                    {
                    root_0 = (Object)adaptor.nil();


                    UNION683=(Token)match(input,UNION,FOLLOW_UNION_in_eid_without_columns6792); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNION683_tree = 
                    (Object)adaptor.create(UNION683)
                    ;
                    adaptor.addChild(root_0, UNION683_tree);
                    }

                    }
                    break;
                case 16 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:993:7: SPLIT
                    {
                    root_0 = (Object)adaptor.nil();


                    SPLIT684=(Token)match(input,SPLIT,FOLLOW_SPLIT_in_eid_without_columns6800); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SPLIT684_tree = 
                    (Object)adaptor.create(SPLIT684)
                    ;
                    adaptor.addChild(root_0, SPLIT684_tree);
                    }

                    }
                    break;
                case 17 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:994:7: INTO
                    {
                    root_0 = (Object)adaptor.nil();


                    INTO685=(Token)match(input,INTO,FOLLOW_INTO_in_eid_without_columns6808); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTO685_tree = 
                    (Object)adaptor.create(INTO685)
                    ;
                    adaptor.addChild(root_0, INTO685_tree);
                    }

                    }
                    break;
                case 18 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:995:7: IF
                    {
                    root_0 = (Object)adaptor.nil();


                    IF686=(Token)match(input,IF,FOLLOW_IF_in_eid_without_columns6816); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IF686_tree = 
                    (Object)adaptor.create(IF686)
                    ;
                    adaptor.addChild(root_0, IF686_tree);
                    }

                    }
                    break;
                case 19 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:996:7: ALL
                    {
                    root_0 = (Object)adaptor.nil();


                    ALL687=(Token)match(input,ALL,FOLLOW_ALL_in_eid_without_columns6824); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALL687_tree = 
                    (Object)adaptor.create(ALL687)
                    ;
                    adaptor.addChild(root_0, ALL687_tree);
                    }

                    }
                    break;
                case 20 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:997:7: AS
                    {
                    root_0 = (Object)adaptor.nil();


                    AS688=(Token)match(input,AS,FOLLOW_AS_in_eid_without_columns6832); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AS688_tree = 
                    (Object)adaptor.create(AS688)
                    ;
                    adaptor.addChild(root_0, AS688_tree);
                    }

                    }
                    break;
                case 21 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:998:7: BY
                    {
                    root_0 = (Object)adaptor.nil();


                    BY689=(Token)match(input,BY,FOLLOW_BY_in_eid_without_columns6840); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BY689_tree = 
                    (Object)adaptor.create(BY689)
                    ;
                    adaptor.addChild(root_0, BY689_tree);
                    }

                    }
                    break;
                case 22 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:999:7: USING
                    {
                    root_0 = (Object)adaptor.nil();


                    USING690=(Token)match(input,USING,FOLLOW_USING_in_eid_without_columns6848); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    USING690_tree = 
                    (Object)adaptor.create(USING690)
                    ;
                    adaptor.addChild(root_0, USING690_tree);
                    }

                    }
                    break;
                case 23 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1000:7: INNER
                    {
                    root_0 = (Object)adaptor.nil();


                    INNER691=(Token)match(input,INNER,FOLLOW_INNER_in_eid_without_columns6856); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INNER691_tree = 
                    (Object)adaptor.create(INNER691)
                    ;
                    adaptor.addChild(root_0, INNER691_tree);
                    }

                    }
                    break;
                case 24 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1001:7: OUTER
                    {
                    root_0 = (Object)adaptor.nil();


                    OUTER692=(Token)match(input,OUTER,FOLLOW_OUTER_in_eid_without_columns6864); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUTER692_tree = 
                    (Object)adaptor.create(OUTER692)
                    ;
                    adaptor.addChild(root_0, OUTER692_tree);
                    }

                    }
                    break;
                case 25 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1002:7: PARALLEL
                    {
                    root_0 = (Object)adaptor.nil();


                    PARALLEL693=(Token)match(input,PARALLEL,FOLLOW_PARALLEL_in_eid_without_columns6872); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARALLEL693_tree = 
                    (Object)adaptor.create(PARALLEL693)
                    ;
                    adaptor.addChild(root_0, PARALLEL693_tree);
                    }

                    }
                    break;
                case 26 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1003:7: PARTITION
                    {
                    root_0 = (Object)adaptor.nil();


                    PARTITION694=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_eid_without_columns6880); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARTITION694_tree = 
                    (Object)adaptor.create(PARTITION694)
                    ;
                    adaptor.addChild(root_0, PARTITION694_tree);
                    }

                    }
                    break;
                case 27 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1004:7: AND
                    {
                    root_0 = (Object)adaptor.nil();


                    AND695=(Token)match(input,AND,FOLLOW_AND_in_eid_without_columns6888); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AND695_tree = 
                    (Object)adaptor.create(AND695)
                    ;
                    adaptor.addChild(root_0, AND695_tree);
                    }

                    }
                    break;
                case 28 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1005:7: OR
                    {
                    root_0 = (Object)adaptor.nil();


                    OR696=(Token)match(input,OR,FOLLOW_OR_in_eid_without_columns6896); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OR696_tree = 
                    (Object)adaptor.create(OR696)
                    ;
                    adaptor.addChild(root_0, OR696_tree);
                    }

                    }
                    break;
                case 29 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1006:7: GENERATE
                    {
                    root_0 = (Object)adaptor.nil();


                    GENERATE697=(Token)match(input,GENERATE,FOLLOW_GENERATE_in_eid_without_columns6904); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GENERATE697_tree = 
                    (Object)adaptor.create(GENERATE697)
                    ;
                    adaptor.addChild(root_0, GENERATE697_tree);
                    }

                    }
                    break;
                case 30 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1007:7: ASC
                    {
                    root_0 = (Object)adaptor.nil();


                    ASC698=(Token)match(input,ASC,FOLLOW_ASC_in_eid_without_columns6912); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ASC698_tree = 
                    (Object)adaptor.create(ASC698)
                    ;
                    adaptor.addChild(root_0, ASC698_tree);
                    }

                    }
                    break;
                case 31 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1008:7: DESC
                    {
                    root_0 = (Object)adaptor.nil();


                    DESC699=(Token)match(input,DESC,FOLLOW_DESC_in_eid_without_columns6920); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DESC699_tree = 
                    (Object)adaptor.create(DESC699)
                    ;
                    adaptor.addChild(root_0, DESC699_tree);
                    }

                    }
                    break;
                case 32 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1009:7: BOOL
                    {
                    root_0 = (Object)adaptor.nil();


                    BOOL700=(Token)match(input,BOOL,FOLLOW_BOOL_in_eid_without_columns6928); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOL700_tree = 
                    (Object)adaptor.create(BOOL700)
                    ;
                    adaptor.addChild(root_0, BOOL700_tree);
                    }

                    }
                    break;
                case 33 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1010:7: BIGINTEGER
                    {
                    root_0 = (Object)adaptor.nil();


                    BIGINTEGER701=(Token)match(input,BIGINTEGER,FOLLOW_BIGINTEGER_in_eid_without_columns6936); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BIGINTEGER701_tree = 
                    (Object)adaptor.create(BIGINTEGER701)
                    ;
                    adaptor.addChild(root_0, BIGINTEGER701_tree);
                    }

                    }
                    break;
                case 34 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1011:7: BIGDECIMAL
                    {
                    root_0 = (Object)adaptor.nil();


                    BIGDECIMAL702=(Token)match(input,BIGDECIMAL,FOLLOW_BIGDECIMAL_in_eid_without_columns6944); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BIGDECIMAL702_tree = 
                    (Object)adaptor.create(BIGDECIMAL702)
                    ;
                    adaptor.addChild(root_0, BIGDECIMAL702_tree);
                    }

                    }
                    break;
                case 35 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1012:7: DATETIME
                    {
                    root_0 = (Object)adaptor.nil();


                    DATETIME703=(Token)match(input,DATETIME,FOLLOW_DATETIME_in_eid_without_columns6952); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DATETIME703_tree = 
                    (Object)adaptor.create(DATETIME703)
                    ;
                    adaptor.addChild(root_0, DATETIME703_tree);
                    }

                    }
                    break;
                case 36 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1013:7: CHARARRAY
                    {
                    root_0 = (Object)adaptor.nil();


                    CHARARRAY704=(Token)match(input,CHARARRAY,FOLLOW_CHARARRAY_in_eid_without_columns6960); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CHARARRAY704_tree = 
                    (Object)adaptor.create(CHARARRAY704)
                    ;
                    adaptor.addChild(root_0, CHARARRAY704_tree);
                    }

                    }
                    break;
                case 37 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1014:7: BYTEARRAY
                    {
                    root_0 = (Object)adaptor.nil();


                    BYTEARRAY705=(Token)match(input,BYTEARRAY,FOLLOW_BYTEARRAY_in_eid_without_columns6968); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BYTEARRAY705_tree = 
                    (Object)adaptor.create(BYTEARRAY705)
                    ;
                    adaptor.addChild(root_0, BYTEARRAY705_tree);
                    }

                    }
                    break;
                case 38 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1015:7: IS
                    {
                    root_0 = (Object)adaptor.nil();


                    IS706=(Token)match(input,IS,FOLLOW_IS_in_eid_without_columns6976); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IS706_tree = 
                    (Object)adaptor.create(IS706)
                    ;
                    adaptor.addChild(root_0, IS706_tree);
                    }

                    }
                    break;
                case 39 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1016:7: STREAM
                    {
                    root_0 = (Object)adaptor.nil();


                    STREAM707=(Token)match(input,STREAM,FOLLOW_STREAM_in_eid_without_columns6984); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STREAM707_tree = 
                    (Object)adaptor.create(STREAM707)
                    ;
                    adaptor.addChild(root_0, STREAM707_tree);
                    }

                    }
                    break;
                case 40 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1017:7: THROUGH
                    {
                    root_0 = (Object)adaptor.nil();


                    THROUGH708=(Token)match(input,THROUGH,FOLLOW_THROUGH_in_eid_without_columns6992); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    THROUGH708_tree = 
                    (Object)adaptor.create(THROUGH708)
                    ;
                    adaptor.addChild(root_0, THROUGH708_tree);
                    }

                    }
                    break;
                case 41 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1018:7: STORE
                    {
                    root_0 = (Object)adaptor.nil();


                    STORE709=(Token)match(input,STORE,FOLLOW_STORE_in_eid_without_columns7000); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STORE709_tree = 
                    (Object)adaptor.create(STORE709)
                    ;
                    adaptor.addChild(root_0, STORE709_tree);
                    }

                    }
                    break;
                case 42 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1019:7: MAPREDUCE
                    {
                    root_0 = (Object)adaptor.nil();


                    MAPREDUCE710=(Token)match(input,MAPREDUCE,FOLLOW_MAPREDUCE_in_eid_without_columns7008); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAPREDUCE710_tree = 
                    (Object)adaptor.create(MAPREDUCE710)
                    ;
                    adaptor.addChild(root_0, MAPREDUCE710_tree);
                    }

                    }
                    break;
                case 43 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1020:7: SHIP
                    {
                    root_0 = (Object)adaptor.nil();


                    SHIP711=(Token)match(input,SHIP,FOLLOW_SHIP_in_eid_without_columns7016); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SHIP711_tree = 
                    (Object)adaptor.create(SHIP711)
                    ;
                    adaptor.addChild(root_0, SHIP711_tree);
                    }

                    }
                    break;
                case 44 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1021:7: CACHE
                    {
                    root_0 = (Object)adaptor.nil();


                    CACHE712=(Token)match(input,CACHE,FOLLOW_CACHE_in_eid_without_columns7024); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CACHE712_tree = 
                    (Object)adaptor.create(CACHE712)
                    ;
                    adaptor.addChild(root_0, CACHE712_tree);
                    }

                    }
                    break;
                case 45 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1022:7: INPUT
                    {
                    root_0 = (Object)adaptor.nil();


                    INPUT713=(Token)match(input,INPUT,FOLLOW_INPUT_in_eid_without_columns7032); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INPUT713_tree = 
                    (Object)adaptor.create(INPUT713)
                    ;
                    adaptor.addChild(root_0, INPUT713_tree);
                    }

                    }
                    break;
                case 46 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1023:7: OUTPUT
                    {
                    root_0 = (Object)adaptor.nil();


                    OUTPUT714=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_eid_without_columns7040); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUTPUT714_tree = 
                    (Object)adaptor.create(OUTPUT714)
                    ;
                    adaptor.addChild(root_0, OUTPUT714_tree);
                    }

                    }
                    break;
                case 47 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1024:7: STDERROR
                    {
                    root_0 = (Object)adaptor.nil();


                    STDERROR715=(Token)match(input,STDERROR,FOLLOW_STDERROR_in_eid_without_columns7048); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDERROR715_tree = 
                    (Object)adaptor.create(STDERROR715)
                    ;
                    adaptor.addChild(root_0, STDERROR715_tree);
                    }

                    }
                    break;
                case 48 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1025:7: STDIN
                    {
                    root_0 = (Object)adaptor.nil();


                    STDIN716=(Token)match(input,STDIN,FOLLOW_STDIN_in_eid_without_columns7056); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDIN716_tree = 
                    (Object)adaptor.create(STDIN716)
                    ;
                    adaptor.addChild(root_0, STDIN716_tree);
                    }

                    }
                    break;
                case 49 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1026:7: STDOUT
                    {
                    root_0 = (Object)adaptor.nil();


                    STDOUT717=(Token)match(input,STDOUT,FOLLOW_STDOUT_in_eid_without_columns7064); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDOUT717_tree = 
                    (Object)adaptor.create(STDOUT717)
                    ;
                    adaptor.addChild(root_0, STDOUT717_tree);
                    }

                    }
                    break;
                case 50 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1027:7: LIMIT
                    {
                    root_0 = (Object)adaptor.nil();


                    LIMIT718=(Token)match(input,LIMIT,FOLLOW_LIMIT_in_eid_without_columns7072); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LIMIT718_tree = 
                    (Object)adaptor.create(LIMIT718)
                    ;
                    adaptor.addChild(root_0, LIMIT718_tree);
                    }

                    }
                    break;
                case 51 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1028:7: SAMPLE
                    {
                    root_0 = (Object)adaptor.nil();


                    SAMPLE719=(Token)match(input,SAMPLE,FOLLOW_SAMPLE_in_eid_without_columns7080); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SAMPLE719_tree = 
                    (Object)adaptor.create(SAMPLE719)
                    ;
                    adaptor.addChild(root_0, SAMPLE719_tree);
                    }

                    }
                    break;
                case 52 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1029:7: LEFT
                    {
                    root_0 = (Object)adaptor.nil();


                    LEFT720=(Token)match(input,LEFT,FOLLOW_LEFT_in_eid_without_columns7088); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT720_tree = 
                    (Object)adaptor.create(LEFT720)
                    ;
                    adaptor.addChild(root_0, LEFT720_tree);
                    }

                    }
                    break;
                case 53 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1030:7: RIGHT
                    {
                    root_0 = (Object)adaptor.nil();


                    RIGHT721=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_eid_without_columns7096); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT721_tree = 
                    (Object)adaptor.create(RIGHT721)
                    ;
                    adaptor.addChild(root_0, RIGHT721_tree);
                    }

                    }
                    break;
                case 54 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1031:7: FULL
                    {
                    root_0 = (Object)adaptor.nil();


                    FULL722=(Token)match(input,FULL,FOLLOW_FULL_in_eid_without_columns7104); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FULL722_tree = 
                    (Object)adaptor.create(FULL722)
                    ;
                    adaptor.addChild(root_0, FULL722_tree);
                    }

                    }
                    break;
                case 55 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1032:7: REALIAS
                    {
                    root_0 = (Object)adaptor.nil();


                    REALIAS723=(Token)match(input,REALIAS,FOLLOW_REALIAS_in_eid_without_columns7112); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    REALIAS723_tree = 
                    (Object)adaptor.create(REALIAS723)
                    ;
                    adaptor.addChild(root_0, REALIAS723_tree);
                    }

                    }
                    break;
                case 56 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1033:7: BOOL_COND
                    {
                    root_0 = (Object)adaptor.nil();


                    BOOL_COND724=(Token)match(input,BOOL_COND,FOLLOW_BOOL_COND_in_eid_without_columns7120); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOL_COND724_tree = 
                    (Object)adaptor.create(BOOL_COND724)
                    ;
                    adaptor.addChild(root_0, BOOL_COND724_tree);
                    }

                    }
                    break;
                case 57 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1034:7: ASSERT
                    {
                    root_0 = (Object)adaptor.nil();


                    ASSERT725=(Token)match(input,ASSERT,FOLLOW_ASSERT_in_eid_without_columns7128); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ASSERT725_tree = 
                    (Object)adaptor.create(ASSERT725)
                    ;
                    adaptor.addChild(root_0, ASSERT725_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "eid_without_columns"


    public static class eid_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "eid"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1037:1: eid : ( eid_without_columns | IDENTIFIER | GROUP | CUBE | TRUE | FALSE | INT | LONG | FLOAT | DOUBLE | NULL | NOT | FLATTEN | BAG | TUPLE | MAP );
    public final QueryParser.eid_return eid() throws RecognitionException {
        QueryParser.eid_return retval = new QueryParser.eid_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token IDENTIFIER727=null;
        Token GROUP728=null;
        Token CUBE729=null;
        Token TRUE730=null;
        Token FALSE731=null;
        Token INT732=null;
        Token LONG733=null;
        Token FLOAT734=null;
        Token DOUBLE735=null;
        Token NULL736=null;
        Token NOT737=null;
        Token FLATTEN738=null;
        Token BAG739=null;
        Token TUPLE740=null;
        Token MAP741=null;
        QueryParser.eid_without_columns_return eid_without_columns726 =null;


        Object IDENTIFIER727_tree=null;
        Object GROUP728_tree=null;
        Object CUBE729_tree=null;
        Object TRUE730_tree=null;
        Object FALSE731_tree=null;
        Object INT732_tree=null;
        Object LONG733_tree=null;
        Object FLOAT734_tree=null;
        Object DOUBLE735_tree=null;
        Object NULL736_tree=null;
        Object NOT737_tree=null;
        Object FLATTEN738_tree=null;
        Object BAG739_tree=null;
        Object TUPLE740_tree=null;
        Object MAP741_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1037:5: ( eid_without_columns | IDENTIFIER | GROUP | CUBE | TRUE | FALSE | INT | LONG | FLOAT | DOUBLE | NULL | NOT | FLATTEN | BAG | TUPLE | MAP )
            int alt192=16;
            switch ( input.LA(1) ) {
            case ALL:
            case AND:
            case AS:
            case ASC:
            case ASSERT:
            case BIGDECIMAL:
            case BIGINTEGER:
            case BY:
            case BYTEARRAY:
            case CACHE:
            case CHARARRAY:
            case COGROUP:
            case CROSS:
            case DATETIME:
            case DEFINE:
            case DESC:
            case DISTINCT:
            case FILTER:
            case FOREACH:
            case FULL:
            case GENERATE:
            case IF:
            case IMPORT:
            case INNER:
            case INPUT:
            case INTO:
            case IS:
            case JOIN:
            case LEFT:
            case LIMIT:
            case LOAD:
            case MAPREDUCE:
            case OR:
            case ORDER:
            case OUTER:
            case OUTPUT:
            case PARALLEL:
            case PARTITION:
            case REGISTER:
            case RETURNS:
            case RIGHT:
            case ROLLUP:
            case SAMPLE:
            case SHIP:
            case SPLIT:
            case STDERROR:
            case STDIN:
            case STDOUT:
            case STORE:
            case STREAM:
            case STR_OP_EQ:
            case STR_OP_GT:
            case STR_OP_GTE:
            case STR_OP_LT:
            case STR_OP_LTE:
            case STR_OP_MATCHES:
            case STR_OP_NE:
            case THROUGH:
            case UNION:
            case USING:
            case BOOL:
            case BOOL_COND:
            case REALIAS:
                {
                alt192=1;
                }
                break;
            case IDENTIFIER:
                {
                alt192=2;
                }
                break;
            case GROUP:
                {
                alt192=3;
                }
                break;
            case CUBE:
                {
                alt192=4;
                }
                break;
            case TRUE:
                {
                alt192=5;
                }
                break;
            case FALSE:
                {
                alt192=6;
                }
                break;
            case INT:
                {
                alt192=7;
                }
                break;
            case LONG:
                {
                alt192=8;
                }
                break;
            case FLOAT:
                {
                alt192=9;
                }
                break;
            case DOUBLE:
                {
                alt192=10;
                }
                break;
            case NULL:
                {
                alt192=11;
                }
                break;
            case NOT:
                {
                alt192=12;
                }
                break;
            case FLATTEN:
                {
                alt192=13;
                }
                break;
            case BAG:
                {
                alt192=14;
                }
                break;
            case TUPLE:
                {
                alt192=15;
                }
                break;
            case MAP:
                {
                alt192=16;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 192, 0, input);

                throw nvae;

            }

            switch (alt192) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1037:7: eid_without_columns
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_eid_without_columns_in_eid7137);
                    eid_without_columns726=eid_without_columns();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eid_without_columns726.getTree());

                    }
                    break;
                case 2 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1038:7: IDENTIFIER
                    {
                    root_0 = (Object)adaptor.nil();


                    IDENTIFIER727=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_eid7145); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENTIFIER727_tree = 
                    (Object)adaptor.create(IDENTIFIER727)
                    ;
                    adaptor.addChild(root_0, IDENTIFIER727_tree);
                    }

                    }
                    break;
                case 3 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1039:7: GROUP
                    {
                    root_0 = (Object)adaptor.nil();


                    GROUP728=(Token)match(input,GROUP,FOLLOW_GROUP_in_eid7153); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GROUP728_tree = 
                    (Object)adaptor.create(GROUP728)
                    ;
                    adaptor.addChild(root_0, GROUP728_tree);
                    }

                    }
                    break;
                case 4 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1040:7: CUBE
                    {
                    root_0 = (Object)adaptor.nil();


                    CUBE729=(Token)match(input,CUBE,FOLLOW_CUBE_in_eid7161); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CUBE729_tree = 
                    (Object)adaptor.create(CUBE729)
                    ;
                    adaptor.addChild(root_0, CUBE729_tree);
                    }

                    }
                    break;
                case 5 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1041:7: TRUE
                    {
                    root_0 = (Object)adaptor.nil();


                    TRUE730=(Token)match(input,TRUE,FOLLOW_TRUE_in_eid7169); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TRUE730_tree = 
                    (Object)adaptor.create(TRUE730)
                    ;
                    adaptor.addChild(root_0, TRUE730_tree);
                    }

                    }
                    break;
                case 6 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1042:7: FALSE
                    {
                    root_0 = (Object)adaptor.nil();


                    FALSE731=(Token)match(input,FALSE,FOLLOW_FALSE_in_eid7177); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FALSE731_tree = 
                    (Object)adaptor.create(FALSE731)
                    ;
                    adaptor.addChild(root_0, FALSE731_tree);
                    }

                    }
                    break;
                case 7 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1043:7: INT
                    {
                    root_0 = (Object)adaptor.nil();


                    INT732=(Token)match(input,INT,FOLLOW_INT_in_eid7185); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INT732_tree = 
                    (Object)adaptor.create(INT732)
                    ;
                    adaptor.addChild(root_0, INT732_tree);
                    }

                    }
                    break;
                case 8 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1044:7: LONG
                    {
                    root_0 = (Object)adaptor.nil();


                    LONG733=(Token)match(input,LONG,FOLLOW_LONG_in_eid7193); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LONG733_tree = 
                    (Object)adaptor.create(LONG733)
                    ;
                    adaptor.addChild(root_0, LONG733_tree);
                    }

                    }
                    break;
                case 9 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1045:7: FLOAT
                    {
                    root_0 = (Object)adaptor.nil();


                    FLOAT734=(Token)match(input,FLOAT,FOLLOW_FLOAT_in_eid7201); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FLOAT734_tree = 
                    (Object)adaptor.create(FLOAT734)
                    ;
                    adaptor.addChild(root_0, FLOAT734_tree);
                    }

                    }
                    break;
                case 10 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1046:7: DOUBLE
                    {
                    root_0 = (Object)adaptor.nil();


                    DOUBLE735=(Token)match(input,DOUBLE,FOLLOW_DOUBLE_in_eid7209); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOUBLE735_tree = 
                    (Object)adaptor.create(DOUBLE735)
                    ;
                    adaptor.addChild(root_0, DOUBLE735_tree);
                    }

                    }
                    break;
                case 11 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1047:7: NULL
                    {
                    root_0 = (Object)adaptor.nil();


                    NULL736=(Token)match(input,NULL,FOLLOW_NULL_in_eid7217); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL736_tree = 
                    (Object)adaptor.create(NULL736)
                    ;
                    adaptor.addChild(root_0, NULL736_tree);
                    }

                    }
                    break;
                case 12 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1048:7: NOT
                    {
                    root_0 = (Object)adaptor.nil();


                    NOT737=(Token)match(input,NOT,FOLLOW_NOT_in_eid7225); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT737_tree = 
                    (Object)adaptor.create(NOT737)
                    ;
                    adaptor.addChild(root_0, NOT737_tree);
                    }

                    }
                    break;
                case 13 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1049:7: FLATTEN
                    {
                    root_0 = (Object)adaptor.nil();


                    FLATTEN738=(Token)match(input,FLATTEN,FOLLOW_FLATTEN_in_eid7233); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FLATTEN738_tree = 
                    (Object)adaptor.create(FLATTEN738)
                    ;
                    adaptor.addChild(root_0, FLATTEN738_tree);
                    }

                    }
                    break;
                case 14 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1050:7: BAG
                    {
                    root_0 = (Object)adaptor.nil();


                    BAG739=(Token)match(input,BAG,FOLLOW_BAG_in_eid7241); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BAG739_tree = 
                    (Object)adaptor.create(BAG739)
                    ;
                    adaptor.addChild(root_0, BAG739_tree);
                    }

                    }
                    break;
                case 15 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1051:7: TUPLE
                    {
                    root_0 = (Object)adaptor.nil();


                    TUPLE740=(Token)match(input,TUPLE,FOLLOW_TUPLE_in_eid7249); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TUPLE740_tree = 
                    (Object)adaptor.create(TUPLE740)
                    ;
                    adaptor.addChild(root_0, TUPLE740_tree);
                    }

                    }
                    break;
                case 16 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1052:7: MAP
                    {
                    root_0 = (Object)adaptor.nil();


                    MAP741=(Token)match(input,MAP,FOLLOW_MAP_in_eid7257); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAP741_tree = 
                    (Object)adaptor.create(MAP741)
                    ;
                    adaptor.addChild(root_0, MAP741_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "eid"


    public static class rel_op_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_op"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1056:1: rel_op : ( rel_str_op | NUM_OP_EQ | NUM_OP_NE | NUM_OP_GT | NUM_OP_GTE | NUM_OP_LT | NUM_OP_LTE );
    public final QueryParser.rel_op_return rel_op() throws RecognitionException {
        QueryParser.rel_op_return retval = new QueryParser.rel_op_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token NUM_OP_EQ743=null;
        Token NUM_OP_NE744=null;
        Token NUM_OP_GT745=null;
        Token NUM_OP_GTE746=null;
        Token NUM_OP_LT747=null;
        Token NUM_OP_LTE748=null;
        QueryParser.rel_str_op_return rel_str_op742 =null;


        Object NUM_OP_EQ743_tree=null;
        Object NUM_OP_NE744_tree=null;
        Object NUM_OP_GT745_tree=null;
        Object NUM_OP_GTE746_tree=null;
        Object NUM_OP_LT747_tree=null;
        Object NUM_OP_LTE748_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1056:8: ( rel_str_op | NUM_OP_EQ | NUM_OP_NE | NUM_OP_GT | NUM_OP_GTE | NUM_OP_LT | NUM_OP_LTE )
            int alt193=7;
            switch ( input.LA(1) ) {
            case STR_OP_EQ:
            case STR_OP_GT:
            case STR_OP_GTE:
            case STR_OP_LT:
            case STR_OP_LTE:
            case STR_OP_MATCHES:
            case STR_OP_NE:
                {
                alt193=1;
                }
                break;
            case NUM_OP_EQ:
                {
                alt193=2;
                }
                break;
            case NUM_OP_NE:
                {
                alt193=3;
                }
                break;
            case NUM_OP_GT:
                {
                alt193=4;
                }
                break;
            case NUM_OP_GTE:
                {
                alt193=5;
                }
                break;
            case NUM_OP_LT:
                {
                alt193=6;
                }
                break;
            case NUM_OP_LTE:
                {
                alt193=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 193, 0, input);

                throw nvae;

            }

            switch (alt193) {
                case 1 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1056:10: rel_str_op
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_rel_str_op_in_rel_op7267);
                    rel_str_op742=rel_str_op();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rel_str_op742.getTree());

                    }
                    break;
                case 2 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1057:10: NUM_OP_EQ
                    {
                    root_0 = (Object)adaptor.nil();


                    NUM_OP_EQ743=(Token)match(input,NUM_OP_EQ,FOLLOW_NUM_OP_EQ_in_rel_op7278); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUM_OP_EQ743_tree = 
                    (Object)adaptor.create(NUM_OP_EQ743)
                    ;
                    adaptor.addChild(root_0, NUM_OP_EQ743_tree);
                    }

                    }
                    break;
                case 3 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1058:10: NUM_OP_NE
                    {
                    root_0 = (Object)adaptor.nil();


                    NUM_OP_NE744=(Token)match(input,NUM_OP_NE,FOLLOW_NUM_OP_NE_in_rel_op7289); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUM_OP_NE744_tree = 
                    (Object)adaptor.create(NUM_OP_NE744)
                    ;
                    adaptor.addChild(root_0, NUM_OP_NE744_tree);
                    }

                    }
                    break;
                case 4 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1059:10: NUM_OP_GT
                    {
                    root_0 = (Object)adaptor.nil();


                    NUM_OP_GT745=(Token)match(input,NUM_OP_GT,FOLLOW_NUM_OP_GT_in_rel_op7300); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUM_OP_GT745_tree = 
                    (Object)adaptor.create(NUM_OP_GT745)
                    ;
                    adaptor.addChild(root_0, NUM_OP_GT745_tree);
                    }

                    }
                    break;
                case 5 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1060:10: NUM_OP_GTE
                    {
                    root_0 = (Object)adaptor.nil();


                    NUM_OP_GTE746=(Token)match(input,NUM_OP_GTE,FOLLOW_NUM_OP_GTE_in_rel_op7311); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUM_OP_GTE746_tree = 
                    (Object)adaptor.create(NUM_OP_GTE746)
                    ;
                    adaptor.addChild(root_0, NUM_OP_GTE746_tree);
                    }

                    }
                    break;
                case 6 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1061:10: NUM_OP_LT
                    {
                    root_0 = (Object)adaptor.nil();


                    NUM_OP_LT747=(Token)match(input,NUM_OP_LT,FOLLOW_NUM_OP_LT_in_rel_op7322); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUM_OP_LT747_tree = 
                    (Object)adaptor.create(NUM_OP_LT747)
                    ;
                    adaptor.addChild(root_0, NUM_OP_LT747_tree);
                    }

                    }
                    break;
                case 7 :
                    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1062:10: NUM_OP_LTE
                    {
                    root_0 = (Object)adaptor.nil();


                    NUM_OP_LTE748=(Token)match(input,NUM_OP_LTE,FOLLOW_NUM_OP_LTE_in_rel_op7333); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUM_OP_LTE748_tree = 
                    (Object)adaptor.create(NUM_OP_LTE748)
                    ;
                    adaptor.addChild(root_0, NUM_OP_LTE748_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_op"


    public static class rel_str_op_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_str_op"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1065:1: rel_str_op : ( STR_OP_EQ | STR_OP_NE | STR_OP_GT | STR_OP_LT | STR_OP_GTE | STR_OP_LTE | STR_OP_MATCHES );
    public final QueryParser.rel_str_op_return rel_str_op() throws RecognitionException {
        QueryParser.rel_str_op_return retval = new QueryParser.rel_str_op_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set749=null;

        Object set749_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1065:12: ( STR_OP_EQ | STR_OP_NE | STR_OP_GT | STR_OP_LT | STR_OP_GTE | STR_OP_LTE | STR_OP_MATCHES )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:
            {
            root_0 = (Object)adaptor.nil();


            set749=(Token)input.LT(1);

            if ( (input.LA(1) >= STR_OP_EQ && input.LA(1) <= STR_OP_NE) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set749)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_str_op"


    public static class reserved_identifier_whitelist_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "reserved_identifier_whitelist"
    // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1074:1: reserved_identifier_whitelist : ( RANK | CUBE | IN | WHEN | THEN | ELSE | END );
    public final QueryParser.reserved_identifier_whitelist_return reserved_identifier_whitelist() throws RecognitionException {
        QueryParser.reserved_identifier_whitelist_return retval = new QueryParser.reserved_identifier_whitelist_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set750=null;

        Object set750_tree=null;

        try {
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:1074:31: ( RANK | CUBE | IN | WHEN | THEN | ELSE | END )
            // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:
            {
            root_0 = (Object)adaptor.nil();


            set750=(Token)input.LT(1);

            if ( input.LA(1)==CUBE||(input.LA(1) >= ELSE && input.LA(1) <= END)||input.LA(1)==IN||input.LA(1)==RANK||input.LA(1)==THEN||input.LA(1)==WHEN ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set750)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "reserved_identifier_whitelist"

    // $ANTLR start synpred1_QueryParser
    public final void synpred1_QueryParser_fragment() throws RecognitionException {
        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:767:20: ( WHEN )
        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:767:21: WHEN
        {
        match(input,WHEN,FOLLOW_WHEN_in_synpred1_QueryParser4489); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred1_QueryParser

    // $ANTLR start synpred2_QueryParser
    public final void synpred2_QueryParser_fragment() throws RecognitionException {
        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:843:14: ( implicit_map_type RIGHT_PAREN cast_expr )
        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:843:16: implicit_map_type RIGHT_PAREN cast_expr
        {
        pushFollow(FOLLOW_implicit_map_type_in_synpred2_QueryParser4942);
        implicit_map_type();

        state._fsp--;
        if (state.failed) return ;

        match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred2_QueryParser4944); if (state.failed) return ;

        pushFollow(FOLLOW_cast_expr_in_synpred2_QueryParser4946);
        cast_expr();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred2_QueryParser

    // $ANTLR start synpred3_QueryParser
    public final void synpred3_QueryParser_fragment() throws RecognitionException {
        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:925:18: ( identifier_plus EQUAL col_ref PERIOD col_ref_list {...}?)
        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:925:20: identifier_plus EQUAL col_ref PERIOD col_ref_list {...}?
        {
        pushFollow(FOLLOW_identifier_plus_in_synpred3_QueryParser6165);
        identifier_plus();

        state._fsp--;
        if (state.failed) return ;

        match(input,EQUAL,FOLLOW_EQUAL_in_synpred3_QueryParser6167); if (state.failed) return ;

        pushFollow(FOLLOW_col_ref_in_synpred3_QueryParser6169);
        col_ref();

        state._fsp--;
        if (state.failed) return ;

        match(input,PERIOD,FOLLOW_PERIOD_in_synpred3_QueryParser6171); if (state.failed) return ;

        pushFollow(FOLLOW_col_ref_list_in_synpred3_QueryParser6173);
        col_ref_list();

        state._fsp--;
        if (state.failed) return ;

        if ( !(( input.LA( 1 ) == SEMI_COLON )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred3_QueryParser", " input.LA( 1 ) == SEMI_COLON ");
        }

        }

    }
    // $ANTLR end synpred3_QueryParser

    // $ANTLR start synpred4_QueryParser
    public final void synpred4_QueryParser_fragment() throws RecognitionException {
        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:958:41: ( INTEGER SEMI_COLON )
        // /usr/local/pig-0.17.0/src/org/apache/pig/parser/QueryParser.g:958:42: INTEGER SEMI_COLON
        {
        match(input,INTEGER,FOLLOW_INTEGER_in_synpred4_QueryParser6553); if (state.failed) return ;

        match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_synpred4_QueryParser6555); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred4_QueryParser

    // Delegated rules

    public final boolean synpred4_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA55 dfa55 = new DFA55(this);
    protected DFA142 dfa142 = new DFA142(this);
    protected DFA141 dfa141 = new DFA141(this);
    protected DFA147 dfa147 = new DFA147(this);
    protected DFA182 dfa182 = new DFA182(this);
    static final String DFA55_eotS =
        "\u0094\uffff";
    static final String DFA55_eofS =
        "\u0094\uffff";
    static final String DFA55_minS =
        "\1\4\110\10\1\4\2\uffff\110\10";
    static final String DFA55_maxS =
        "\1\u00b1\110\161\1\u00b1\2\uffff\110\161";
    static final String DFA55_acceptS =
        "\112\uffff\1\1\1\2\110\uffff";
    static final String DFA55_specialS =
        "\u0094\uffff}>";
    static final String[] DFA55_transitionS = {
            "\1\23\1\uffff\1\33\1\uffff\1\24\1\36\1\71\1\106\1\42\1\uffff"+
            "\1\41\2\uffff\1\25\1\45\1\54\1\uffff\1\44\1\14\2\uffff\1\16"+
            "\1\74\1\43\1\uffff\1\5\1\uffff\1\37\1\uffff\1\13\3\uffff\1\102"+
            "\6\uffff\1\76\1\uffff\1\7\1\105\1\101\2\uffff\1\10\1\66\1\35"+
            "\1\73\1\uffff\1\72\1\22\1\2\1\uffff\1\27\1\55\1\77\1\uffff\1"+
            "\21\1\uffff\1\46\1\15\1\64\4\uffff\1\62\1\6\1\100\1\uffff\1"+
            "\110\1\52\3\uffff\1\104\1\103\7\uffff\1\34\1\12\1\uffff\1\30"+
            "\1\56\1\31\1\32\7\uffff\1\3\1\4\1\65\3\uffff\1\11\1\63\1\uffff"+
            "\1\53\2\uffff\1\20\1\uffff\1\57\1\60\1\61\1\51\1\47\7\1\1\uffff"+
            "\1\50\1\75\1\107\1\17\1\26\10\uffff\1\40\1\70\36\uffff\1\67",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\136\1\uffff\1\146\1\uffff\1\137\1\151\1\u0084\1\u0091\1"+
            "\155\1\uffff\1\154\2\uffff\1\140\1\160\1\167\1\uffff\1\157\1"+
            "\127\2\uffff\1\131\1\u0087\1\156\1\uffff\1\120\1\uffff\1\152"+
            "\1\uffff\1\126\3\uffff\1\u008d\6\uffff\1\u0089\1\uffff\1\122"+
            "\1\u0090\1\u008c\2\uffff\1\123\1\u0081\1\150\1\u0086\1\uffff"+
            "\1\u0085\1\135\1\115\1\uffff\1\142\1\170\1\u008a\1\uffff\1\134"+
            "\1\uffff\1\161\1\130\1\177\4\uffff\1\175\1\121\1\u008b\1\uffff"+
            "\1\u0093\1\165\3\uffff\1\u008f\1\u008e\7\uffff\1\147\1\125\1"+
            "\uffff\1\143\1\171\1\144\1\145\7\uffff\1\116\1\117\1\u0080\3"+
            "\uffff\1\124\1\176\1\uffff\1\166\2\uffff\1\133\1\uffff\1\172"+
            "\1\173\1\174\1\164\1\162\7\114\1\uffff\1\163\1\u0088\1\u0092"+
            "\1\132\1\141\10\uffff\1\153\1\u0083\36\uffff\1\u0082",
            "",
            "",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\17\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\12\uffff\1"+
            "\112\2\uffff\1\112"
    };

    static final short[] DFA55_eot = DFA.unpackEncodedString(DFA55_eotS);
    static final short[] DFA55_eof = DFA.unpackEncodedString(DFA55_eofS);
    static final char[] DFA55_min = DFA.unpackEncodedStringToUnsignedChars(DFA55_minS);
    static final char[] DFA55_max = DFA.unpackEncodedStringToUnsignedChars(DFA55_maxS);
    static final short[] DFA55_accept = DFA.unpackEncodedString(DFA55_acceptS);
    static final short[] DFA55_special = DFA.unpackEncodedString(DFA55_specialS);
    static final short[][] DFA55_transition;

    static {
        int numStates = DFA55_transitionS.length;
        DFA55_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA55_transition[i] = DFA.unpackEncodedString(DFA55_transitionS[i]);
        }
    }

    class DFA55 extends DFA {

        public DFA55(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 55;
            this.eot = DFA55_eot;
            this.eof = DFA55_eof;
            this.min = DFA55_min;
            this.max = DFA55_max;
            this.accept = DFA55_accept;
            this.special = DFA55_special;
            this.transition = DFA55_transition;
        }
        public String getDescription() {
            return "409:1: func_clause : ( func_name -> ^( FUNC_REF func_name ) | func_name LEFT_PAREN ( func_args )? RIGHT_PAREN -> ^( FUNC func_name ( func_args )? ) );";
        }
    }
    static final String DFA142_eotS =
        "\22\uffff";
    static final String DFA142_eofS =
        "\5\uffff\2\15\10\uffff\3\15";
    static final String DFA142_minS =
        "\1\4\4\uffff\2\6\5\uffff\1\4\2\uffff\3\6";
    static final String DFA142_maxS =
        "\1\u00b1\4\uffff\2\u008a\5\uffff\1\u00b1\2\uffff\3\u008a";
    static final String DFA142_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\2\uffff\1\7\1\10\1\11\1\12\1\13\1\uffff"+
        "\1\5\1\6\3\uffff";
    static final String DFA142_specialS =
        "\22\uffff}>";
    static final String[] DFA142_transitionS = {
            "\1\7\1\uffff\1\7\1\uffff\3\7\1\uffff\1\7\1\1\1\7\1\1\1\uffff"+
            "\3\7\1\10\2\7\2\uffff\1\7\1\6\1\7\1\uffff\1\7\1\uffff\1\7\1"+
            "\uffff\1\7\2\uffff\1\3\1\uffff\1\1\1\uffff\2\6\2\uffff\1\1\1"+
            "\uffff\1\7\3\uffff\1\1\3\7\1\3\1\uffff\1\5\2\7\1\6\2\7\1\uffff"+
            "\1\1\1\7\1\4\3\7\1\13\1\12\1\11\1\uffff\2\7\1\uffff\1\1\1\uffff"+
            "\1\7\1\2\3\uffff\1\1\7\uffff\2\7\1\uffff\4\7\5\uffff\1\1\1\6"+
            "\3\7\3\uffff\2\7\1\uffff\1\7\2\uffff\1\7\1\uffff\14\7\1\6\1"+
            "\7\1\1\1\uffff\2\7\1\uffff\1\6\6\uffff\2\7\36\uffff\1\7",
            "",
            "",
            "",
            "",
            "\1\15\1\uffff\1\15\16\uffff\2\15\11\uffff\1\15\1\16\4\uffff"+
            "\2\15\12\uffff\1\15\6\uffff\2\15\5\uffff\1\15\1\uffff\1\15\2"+
            "\uffff\1\16\7\uffff\1\15\4\uffff\6\15\1\uffff\1\15\2\uffff\1"+
            "\15\1\uffff\3\15\1\14\3\15\4\uffff\4\15\2\uffff\1\15\4\uffff"+
            "\1\15\5\uffff\10\15\4\uffff\1\15\1\uffff\1\15",
            "\1\15\1\uffff\1\15\16\uffff\2\15\11\uffff\1\15\1\16\4\uffff"+
            "\2\15\12\uffff\1\15\6\uffff\2\15\5\uffff\1\15\1\uffff\1\15\2"+
            "\uffff\1\16\7\uffff\1\15\4\uffff\6\15\1\uffff\1\15\2\uffff\1"+
            "\15\1\uffff\3\15\1\14\3\15\4\uffff\4\15\2\uffff\1\15\4\uffff"+
            "\1\15\5\uffff\10\15\4\uffff\1\15\1\uffff\1\15",
            "",
            "",
            "",
            "",
            "",
            "\1\16\1\uffff\1\16\1\uffff\5\16\1\uffff\1\16\2\uffff\3\16\1"+
            "\uffff\2\16\2\uffff\1\16\1\21\1\16\1\uffff\1\16\1\uffff\1\16"+
            "\1\uffff\1\16\2\uffff\1\15\1\16\2\uffff\2\15\2\uffff\1\16\1"+
            "\uffff\3\16\2\uffff\3\16\1\17\1\uffff\1\20\2\16\1\15\3\16\1"+
            "\uffff\1\16\1\uffff\3\16\2\uffff\1\15\1\uffff\3\16\1\uffff\2"+
            "\16\3\uffff\2\16\7\uffff\2\16\1\uffff\4\16\6\uffff\1\15\3\16"+
            "\3\uffff\2\16\1\uffff\1\16\2\uffff\1\16\1\uffff\14\16\1\15\5"+
            "\16\1\uffff\1\15\6\uffff\2\16\36\uffff\1\16",
            "",
            "",
            "\1\15\1\uffff\1\15\16\uffff\2\15\11\uffff\1\15\1\16\4\uffff"+
            "\2\15\12\uffff\1\15\6\uffff\2\15\5\uffff\1\15\1\uffff\1\15\2"+
            "\uffff\1\16\7\uffff\1\15\4\uffff\6\15\1\uffff\1\15\2\uffff\1"+
            "\15\1\uffff\3\15\1\14\3\15\4\uffff\4\15\2\uffff\1\15\4\uffff"+
            "\1\15\5\uffff\10\15\4\uffff\1\15\1\uffff\1\15",
            "\1\15\1\uffff\1\15\16\uffff\2\15\11\uffff\1\15\1\16\4\uffff"+
            "\2\15\12\uffff\1\15\6\uffff\2\15\5\uffff\1\15\1\uffff\1\15\2"+
            "\uffff\1\16\7\uffff\1\15\4\uffff\6\15\1\uffff\1\15\2\uffff\1"+
            "\15\1\uffff\3\15\1\14\3\15\4\uffff\4\15\2\uffff\1\15\4\uffff"+
            "\1\15\5\uffff\10\15\4\uffff\1\15\1\uffff\1\15",
            "\1\15\1\uffff\1\15\16\uffff\2\15\11\uffff\1\15\1\16\4\uffff"+
            "\2\15\12\uffff\1\15\6\uffff\2\15\5\uffff\1\15\1\uffff\1\15\2"+
            "\uffff\1\16\7\uffff\1\15\4\uffff\6\15\1\uffff\1\15\2\uffff\1"+
            "\15\1\uffff\3\15\1\14\3\15\4\uffff\4\15\2\uffff\1\15\4\uffff"+
            "\1\15\5\uffff\10\15\4\uffff\1\15\1\uffff\1\15"
    };

    static final short[] DFA142_eot = DFA.unpackEncodedString(DFA142_eotS);
    static final short[] DFA142_eof = DFA.unpackEncodedString(DFA142_eofS);
    static final char[] DFA142_min = DFA.unpackEncodedStringToUnsignedChars(DFA142_minS);
    static final char[] DFA142_max = DFA.unpackEncodedStringToUnsignedChars(DFA142_maxS);
    static final short[] DFA142_accept = DFA.unpackEncodedString(DFA142_acceptS);
    static final short[] DFA142_special = DFA.unpackEncodedString(DFA142_specialS);
    static final short[][] DFA142_transition;

    static {
        int numStates = DFA142_transitionS.length;
        DFA142_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA142_transition[i] = DFA.unpackEncodedString(DFA142_transitionS[i]);
        }
    }

    class DFA142 extends DFA {

        public DFA142(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 142;
            this.eot = DFA142_eot;
            this.eof = DFA142_eof;
            this.min = DFA142_min;
            this.max = DFA142_max;
            this.accept = DFA142_accept;
            this.special = DFA142_special;
            this.transition = DFA142_transition;
        }
        public String getDescription() {
            return "691:1: cast_expr : ( scalar | MINUS cast_expr -> ^( NEG cast_expr ) | col_ref_without_identifier ( projection )* | invoker_func ( projection )* | identifier_plus ( projection )* | identifier_plus ( func_name_suffix )? LEFT_PAREN ( real_arg ( COMMA real_arg )* )? RIGHT_PAREN ( projection )* -> ^( FUNC_EVAL identifier_plus ( func_name_suffix )? ( real_arg )* ) ( projection )* | func_name_without_columns LEFT_PAREN ( real_arg ( COMMA real_arg )* )? RIGHT_PAREN ( projection )* -> ^( FUNC_EVAL func_name_without_columns ( real_arg )* ) ( projection )* | CASE ( ( WHEN )=> WHEN cond THEN expr ( WHEN cond THEN expr )* ( ELSE expr )? END ( projection )* -> ^( CASE_COND ^( WHEN ( cond )+ ) ^( THEN ( expr )+ ) ) ( projection )* | expr WHEN rhs_operand THEN rhs_operand ( WHEN rhs_operand THEN rhs_operand )* ( ELSE rhs_operand )? END ( projection )* -> ^( CASE_EXPR ^( CASE_EXPR_LHS expr ) ( ^( CASE_EXPR_RHS rhs_operand ) )+ ) ( projection )* ) | paren_expr | curly_expr | bracket_expr );";
        }
    }
    static final String DFA141_eotS =
        "\106\uffff";
    static final String DFA141_eofS =
        "\106\uffff";
    static final String DFA141_minS =
        "\1\4\1\0\104\uffff";
    static final String DFA141_maxS =
        "\1\u00b1\1\0\104\uffff";
    static final String DFA141_acceptS =
        "\2\uffff\1\2\102\uffff\1\1";
    static final String DFA141_specialS =
        "\1\uffff\1\0\104\uffff}>";
    static final String[] DFA141_transitionS = {
            "\1\2\1\uffff\1\2\1\uffff\3\2\1\uffff\4\2\1\uffff\6\2\2\uffff"+
            "\3\2\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff"+
            "\1\2\1\uffff\2\2\2\uffff\1\2\1\uffff\1\2\3\uffff\5\2\1\uffff"+
            "\6\2\1\uffff\11\2\1\uffff\2\2\1\uffff\1\2\1\uffff\2\2\3\uffff"+
            "\1\2\7\uffff\2\2\1\uffff\4\2\5\uffff\5\2\3\uffff\2\2\1\uffff"+
            "\1\2\2\uffff\1\2\1\uffff\17\2\1\uffff\2\2\1\uffff\1\1\6\uffff"+
            "\2\2\36\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA141_eot = DFA.unpackEncodedString(DFA141_eotS);
    static final short[] DFA141_eof = DFA.unpackEncodedString(DFA141_eofS);
    static final char[] DFA141_min = DFA.unpackEncodedStringToUnsignedChars(DFA141_minS);
    static final char[] DFA141_max = DFA.unpackEncodedStringToUnsignedChars(DFA141_maxS);
    static final short[] DFA141_accept = DFA.unpackEncodedString(DFA141_acceptS);
    static final short[] DFA141_special = DFA.unpackEncodedString(DFA141_specialS);
    static final short[][] DFA141_transition;

    static {
        int numStates = DFA141_transitionS.length;
        DFA141_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA141_transition[i] = DFA.unpackEncodedString(DFA141_transitionS[i]);
        }
    }

    class DFA141 extends DFA {

        public DFA141(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 141;
            this.eot = DFA141_eot;
            this.eof = DFA141_eof;
            this.min = DFA141_min;
            this.max = DFA141_max;
            this.accept = DFA141_accept;
            this.special = DFA141_special;
            this.transition = DFA141_transition;
        }
        public String getDescription() {
            return "767:18: ( ( WHEN )=> WHEN cond THEN expr ( WHEN cond THEN expr )* ( ELSE expr )? END ( projection )* -> ^( CASE_COND ^( WHEN ( cond )+ ) ^( THEN ( expr )+ ) ) ( projection )* | expr WHEN rhs_operand THEN rhs_operand ( WHEN rhs_operand THEN rhs_operand )* ( ELSE rhs_operand )? END ( projection )* -> ^( CASE_EXPR ^( CASE_EXPR_LHS expr ) ( ^( CASE_EXPR_RHS rhs_operand ) )+ ) ( projection )* )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA141_1 = input.LA(1);

                         
                        int index141_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_QueryParser()) ) {s = 69;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index141_1);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 141, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA147_eotS =
        "\115\uffff";
    static final String DFA147_eofS =
        "\115\uffff";
    static final String DFA147_minS =
        "\1\4\1\0\113\uffff";
    static final String DFA147_maxS =
        "\1\u00b1\1\0\113\uffff";
    static final String DFA147_acceptS =
        "\2\uffff\1\2\111\uffff\1\1";
    static final String DFA147_specialS =
        "\1\uffff\1\0\113\uffff}>";
    static final String[] DFA147_transitionS = {
            "\1\2\1\uffff\1\2\1\uffff\17\2\2\uffff\3\2\1\uffff\1\2\1\uffff"+
            "\1\2\1\uffff\1\2\2\uffff\6\2\2\uffff\1\2\1\uffff\1\2\1\uffff"+
            "\1\2\1\uffff\5\2\1\uffff\15\2\1\1\2\2\1\uffff\7\2\2\uffff\2"+
            "\2\7\uffff\2\2\1\uffff\4\2\5\uffff\5\2\2\uffff\3\2\1\uffff\1"+
            "\2\2\uffff\24\2\1\uffff\1\2\6\uffff\2\2\36\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA147_eot = DFA.unpackEncodedString(DFA147_eotS);
    static final short[] DFA147_eof = DFA.unpackEncodedString(DFA147_eofS);
    static final char[] DFA147_min = DFA.unpackEncodedStringToUnsignedChars(DFA147_minS);
    static final char[] DFA147_max = DFA.unpackEncodedStringToUnsignedChars(DFA147_maxS);
    static final short[] DFA147_accept = DFA.unpackEncodedString(DFA147_acceptS);
    static final short[] DFA147_special = DFA.unpackEncodedString(DFA147_specialS);
    static final short[][] DFA147_transition;

    static {
        int numStates = DFA147_transitionS.length;
        DFA147_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA147_transition[i] = DFA.unpackEncodedString(DFA147_transitionS[i]);
        }
    }

    class DFA147 extends DFA {

        public DFA147(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 147;
            this.eot = DFA147_eot;
            this.eof = DFA147_eof;
            this.min = DFA147_min;
            this.max = DFA147_max;
            this.accept = DFA147_accept;
            this.special = DFA147_special;
            this.transition = DFA147_transition;
        }
        public String getDescription() {
            return "836:1: try_implicit_map_cast : ( ( implicit_map_type RIGHT_PAREN cast_expr )=> implicit_map_type RIGHT_PAREN cast_expr -> ^( CAST_EXPR implicit_map_type cast_expr ) | after_left_paren );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA147_1 = input.LA(1);

                         
                        int index147_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred2_QueryParser()) ) {s = 76;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index147_1);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 147, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA182_eotS =
        "\66\uffff";
    static final String DFA182_eofS =
        "\66\uffff";
    static final String DFA182_minS =
        "\1\32\2\52\1\4\3\42\1\uffff\7\32\1\4\1\uffff\3\0\1\32\3\0\1\32\2"+
        "\0\1\uffff\6\30\1\32\3\0\1\32\3\0\6\30\6\0";
    static final String DFA182_maxS =
        "\1\u008a\2\52\1\u00b1\3\166\1\uffff\7\u008a\1\u00b1\1\uffff\3\0"+
        "\1\u008a\3\0\1\u008a\2\0\1\uffff\6\156\1\u008a\3\0\1\u008a\3\0\6"+
        "\156\6\0";
    static final String DFA182_acceptS =
        "\7\uffff\1\2\10\uffff\1\3\12\uffff\1\1\32\uffff";
    static final String DFA182_specialS =
        "\21\uffff\1\21\1\10\1\22\1\uffff\1\20\1\7\1\23\1\uffff\1\6\1\11"+
        "\10\uffff\1\12\1\13\1\14\1\uffff\1\0\1\1\1\2\6\uffff\1\15\1\16\1"+
        "\17\1\3\1\4\1\5}>";
    static final String[] DFA182_transitionS = {
            "\1\2\15\uffff\2\2\16\uffff\1\1\2\uffff\1\2\54\uffff\1\2\32\uffff"+
            "\1\2\6\uffff\1\2",
            "\1\3",
            "\1\3",
            "\1\7\1\uffff\1\7\1\uffff\3\7\1\uffff\4\7\1\uffff\6\7\2\uffff"+
            "\1\14\1\6\1\7\1\uffff\1\7\1\uffff\1\7\1\uffff\1\13\2\uffff\1"+
            "\4\1\uffff\1\7\1\uffff\2\6\2\uffff\1\7\1\uffff\1\10\3\uffff"+
            "\1\7\1\11\2\7\1\4\1\uffff\1\5\2\7\1\6\2\7\1\uffff\11\7\1\uffff"+
            "\1\15\1\7\1\uffff\1\7\1\uffff\2\7\3\uffff\1\7\7\uffff\1\7\1"+
            "\12\1\uffff\4\7\5\uffff\1\7\1\6\3\7\3\uffff\2\7\1\uffff\1\7"+
            "\2\uffff\1\7\1\uffff\14\7\1\6\2\7\1\uffff\2\7\1\uffff\1\6\6"+
            "\uffff\2\7\36\uffff\1\7",
            "\1\7\54\uffff\1\7\22\uffff\1\7\1\16\2\7\13\uffff\1\7\4\uffff"+
            "\1\7",
            "\2\7\43\uffff\1\7\7\uffff\1\7\22\uffff\1\7\1\17\2\7\13\uffff"+
            "\1\7\4\uffff\1\7",
            "\2\7\43\uffff\1\7\7\uffff\1\7\22\uffff\1\7\1\17\2\7\13\uffff"+
            "\1\7\4\uffff\1\7",
            "",
            "\1\20\10\uffff\1\7\1\20\3\uffff\2\20\14\uffff\1\20\1\uffff"+
            "\1\20\2\uffff\1\20\13\uffff\1\7\33\uffff\1\7\4\uffff\1\20\32"+
            "\uffff\1\20\6\uffff\1\20",
            "\1\20\10\uffff\1\7\1\20\3\uffff\2\20\14\uffff\1\20\1\uffff"+
            "\1\20\2\uffff\1\20\13\uffff\1\7\33\uffff\1\7\4\uffff\1\20\32"+
            "\uffff\1\20\6\uffff\1\20",
            "\1\20\10\uffff\1\7\1\20\3\uffff\2\20\14\uffff\1\20\1\uffff"+
            "\1\20\2\uffff\1\20\13\uffff\1\7\33\uffff\1\7\4\uffff\1\20\32"+
            "\uffff\1\20\6\uffff\1\20",
            "\1\20\10\uffff\1\7\1\20\3\uffff\2\20\14\uffff\1\20\1\uffff"+
            "\1\20\2\uffff\1\20\13\uffff\1\7\33\uffff\1\7\4\uffff\1\20\32"+
            "\uffff\1\20\6\uffff\1\20",
            "\1\20\10\uffff\1\7\1\20\3\uffff\2\20\14\uffff\1\20\1\uffff"+
            "\1\20\2\uffff\1\20\13\uffff\1\7\33\uffff\1\7\4\uffff\1\20\32"+
            "\uffff\1\20\6\uffff\1\20",
            "\1\20\10\uffff\1\7\1\20\3\uffff\2\20\14\uffff\1\20\1\uffff"+
            "\1\20\2\uffff\1\20\13\uffff\1\7\33\uffff\1\7\4\uffff\1\20\32"+
            "\uffff\1\20\6\uffff\1\20",
            "\1\23\11\uffff\1\21\3\uffff\2\23\14\uffff\1\21\1\uffff\1\22"+
            "\2\uffff\1\23\13\uffff\1\24\40\uffff\1\23\32\uffff\1\23\6\uffff"+
            "\1\23",
            "\1\7\1\uffff\1\7\1\uffff\5\7\1\uffff\1\7\2\uffff\3\7\1\uffff"+
            "\2\7\2\uffff\1\7\1\27\1\7\1\uffff\1\7\1\uffff\1\7\1\uffff\1"+
            "\7\2\uffff\1\31\1\7\2\uffff\2\32\2\uffff\1\7\1\uffff\3\7\2\uffff"+
            "\3\7\1\25\1\uffff\1\26\2\7\1\32\3\7\1\uffff\1\7\1\uffff\3\7"+
            "\2\uffff\1\30\1\uffff\3\7\1\uffff\2\7\3\uffff\2\7\7\uffff\2"+
            "\7\1\uffff\4\7\6\uffff\1\32\3\7\3\uffff\2\7\1\uffff\1\7\2\uffff"+
            "\1\7\1\uffff\14\7\1\32\5\7\1\uffff\1\32\6\uffff\2\7\36\uffff"+
            "\1\7",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\36\11\uffff\1\34\3\uffff\2\36\14\uffff\1\34\1\uffff\1\35"+
            "\2\uffff\1\36\54\uffff\1\36\32\uffff\1\36\6\uffff\1\36",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\41\11\uffff\1\37\3\uffff\2\41\14\uffff\1\37\1\uffff\1\40"+
            "\2\uffff\1\41\54\uffff\1\41\32\uffff\1\41\6\uffff\1\41",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\42\125\uffff\1\43",
            "\1\42\125\uffff\1\44",
            "\1\42\125\uffff\1\45",
            "\1\46\125\uffff\1\47",
            "\1\46\125\uffff\1\50",
            "\1\46\125\uffff\1\51",
            "\1\54\11\uffff\1\52\3\uffff\2\54\14\uffff\1\52\1\uffff\1\53"+
            "\2\uffff\1\54\54\uffff\1\54\32\uffff\1\54\6\uffff\1\54",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\57\11\uffff\1\55\3\uffff\2\57\14\uffff\1\55\1\uffff\1\56"+
            "\2\uffff\1\57\54\uffff\1\57\32\uffff\1\57\6\uffff\1\57",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\42\125\uffff\1\60",
            "\1\42\125\uffff\1\61",
            "\1\42\125\uffff\1\62",
            "\1\46\125\uffff\1\63",
            "\1\46\125\uffff\1\64",
            "\1\46\125\uffff\1\65",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA182_eot = DFA.unpackEncodedString(DFA182_eotS);
    static final short[] DFA182_eof = DFA.unpackEncodedString(DFA182_eofS);
    static final char[] DFA182_min = DFA.unpackEncodedStringToUnsignedChars(DFA182_minS);
    static final char[] DFA182_max = DFA.unpackEncodedStringToUnsignedChars(DFA182_maxS);
    static final short[] DFA182_accept = DFA.unpackEncodedString(DFA182_acceptS);
    static final short[] DFA182_special = DFA.unpackEncodedString(DFA182_specialS);
    static final short[][] DFA182_transition;

    static {
        int numStates = DFA182_transitionS.length;
        DFA182_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA182_transition[i] = DFA.unpackEncodedString(DFA182_transitionS[i]);
        }
    }

    class DFA182 extends DFA {

        public DFA182(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 182;
            this.eot = DFA182_eot;
            this.eof = DFA182_eof;
            this.min = DFA182_min;
            this.max = DFA182_max;
            this.accept = DFA182_accept;
            this.special = DFA182_special;
            this.transition = DFA182_transition;
        }
        public String getDescription() {
            return "925:1: nested_command : ( ( identifier_plus EQUAL col_ref PERIOD col_ref_list {...}?)=> ( identifier_plus EQUAL nested_proj ) -> ^( NESTED_CMD identifier_plus nested_proj ) | identifier_plus EQUAL expr -> ^( NESTED_CMD_ASSI identifier_plus expr ) | identifier_plus EQUAL nested_op -> ^( NESTED_CMD identifier_plus nested_op ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA182_39 = input.LA(1);

                         
                        int index182_39 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index182_39);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA182_40 = input.LA(1);

                         
                        int index182_40 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index182_40);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA182_41 = input.LA(1);

                         
                        int index182_41 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index182_41);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA182_51 = input.LA(1);

                         
                        int index182_51 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index182_51);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA182_52 = input.LA(1);

                         
                        int index182_52 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index182_52);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA182_53 = input.LA(1);

                         
                        int index182_53 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index182_53);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA182_25 = input.LA(1);

                         
                        int index182_25 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index182_25);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA182_22 = input.LA(1);

                         
                        int index182_22 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index182_22);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA182_18 = input.LA(1);

                         
                        int index182_18 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index182_18);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA182_26 = input.LA(1);

                         
                        int index182_26 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index182_26);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA182_35 = input.LA(1);

                         
                        int index182_35 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index182_35);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA182_36 = input.LA(1);

                         
                        int index182_36 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index182_36);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA182_37 = input.LA(1);

                         
                        int index182_37 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index182_37);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA182_48 = input.LA(1);

                         
                        int index182_48 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index182_48);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA182_49 = input.LA(1);

                         
                        int index182_49 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index182_49);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA182_50 = input.LA(1);

                         
                        int index182_50 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index182_50);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA182_21 = input.LA(1);

                         
                        int index182_21 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index182_21);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA182_17 = input.LA(1);

                         
                        int index182_17 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index182_17);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA182_19 = input.LA(1);

                         
                        int index182_19 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index182_19);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA182_23 = input.LA(1);

                         
                        int index182_23 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index182_23);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 182, _s, input);
            error(nvae);
            throw nvae;
        }

    }
 

    public static final BitSet FOLLOW_statement_in_query426 = new BitSet(new long[]{0x0D48630226400400L,0x0C23030010004688L,0x0000000000000488L});
    public static final BitSet FOLLOW_EOF_in_query429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_def_list_in_schema448 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_schema450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_COLON_in_statement461 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_general_statement_in_statement476 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_statement478 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_split_clause_in_statement493 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_statement495 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inline_clause_in_statement510 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_statement512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_import_clause_in_statement527 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_statement529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_realias_clause_in_statement544 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_statement546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_register_clause_in_statement561 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_statement563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assert_clause_in_statement578 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_statement580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_foreach_statement_in_statement628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_nested_op_clause637 = new BitSet(new long[]{0x0040400226400000L,0x0C01010010004608L,0x0000000000000080L});
    public static final BitSet FOLLOW_op_clause_in_nested_op_clause640 = new BitSet(new long[]{0x0000000000000000L,0x0000400100000000L});
    public static final BitSet FOLLOW_parallel_clause_in_nested_op_clause642 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_nested_op_clause645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_nested_op_clause667 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_FOREACH_in_nested_op_clause669 = new BitSet(new long[]{0x0900030004000080L,0x0000010000000080L,0x0000000000000408L});
    public static final BitSet FOLLOW_rel_in_nested_op_clause671 = new BitSet(new long[]{0x0020000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_foreach_plan_complex_in_nested_op_clause675 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_foreach_plan_simple_in_nested_op_clause681 = new BitSet(new long[]{0x0000000000000000L,0x0000400100000000L});
    public static final BitSet FOLLOW_parallel_clause_in_nested_op_clause683 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_nested_op_clause690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FAT_ARROW_in_general_statement738 = new BitSet(new long[]{0x0040400226400000L,0x0C01010010004688L,0x0000000000000080L});
    public static final BitSet FOLLOW_op_clause_in_general_statement744 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_parallel_clause_in_general_statement746 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_op_clause_in_general_statement753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_plus_in_general_statement799 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_EQUAL_in_general_statement801 = new BitSet(new long[]{0x0040400226400000L,0x0C01010010004688L,0x0000000000000080L});
    public static final BitSet FOLLOW_op_clause_in_general_statement810 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_parallel_clause_in_general_statement812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_op_clause_in_general_statement819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FAT_ARROW_in_foreach_statement854 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_FOREACH_in_foreach_statement856 = new BitSet(new long[]{0x0900030004000080L,0x0000010000000080L,0x0000000000000408L});
    public static final BitSet FOLLOW_rel_in_foreach_statement858 = new BitSet(new long[]{0x0020000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_foreach_plan_complex_in_foreach_statement862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_foreach_plan_simple_in_foreach_statement868 = new BitSet(new long[]{0x0000000000000000L,0x0002000100000000L});
    public static final BitSet FOLLOW_parallel_clause_in_foreach_statement870 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_foreach_statement873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_plus_in_foreach_statement933 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_EQUAL_in_foreach_statement935 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_FOREACH_in_foreach_statement940 = new BitSet(new long[]{0x0900030004000080L,0x0000010000000080L,0x0000000000000408L});
    public static final BitSet FOLLOW_rel_in_foreach_statement942 = new BitSet(new long[]{0x0020000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_foreach_plan_complex_in_foreach_statement946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_foreach_plan_simple_in_foreach_statement952 = new BitSet(new long[]{0x0000000000000000L,0x0002000100000000L});
    public static final BitSet FOLLOW_parallel_clause_in_foreach_statement954 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_foreach_statement957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_foreach_plan_complex1002 = new BitSet(new long[]{0x0920030004000000L,0x0000010000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_nested_blk_in_foreach_plan_complex1004 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_foreach_plan_complex1006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GENERATE_in_foreach_plan_simple1025 = new BitSet(new long[]{0xBF7CD3D2AE7EF750L,0xFFE58F83D808D6FFL,0x00020000000605BFL});
    public static final BitSet FOLLOW_flatten_generated_item_in_foreach_plan_simple1027 = new BitSet(new long[]{0x0000000001000002L});
    public static final BitSet FOLLOW_COMMA_in_foreach_plan_simple1031 = new BitSet(new long[]{0xBF7CD3D2AE7EF750L,0xFFE58F83D808D6FFL,0x00020000000605BFL});
    public static final BitSet FOLLOW_flatten_generated_item_in_foreach_plan_simple1033 = new BitSet(new long[]{0x0000000001000002L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_macro_content1064 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x07FFFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_macro_content_in_macro_content1068 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x07FFFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_set_in_macro_content1072 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x07FFFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_macro_content1084 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_macro_param_clause1093 = new BitSet(new long[]{0x0900030004000000L,0x0000410000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_identifier_plus_in_macro_param_clause1097 = new BitSet(new long[]{0x0000000001000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_COMMA_in_macro_param_clause1100 = new BitSet(new long[]{0x0900030004000000L,0x0000010000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_identifier_plus_in_macro_param_clause1102 = new BitSet(new long[]{0x0000000001000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_macro_param_clause1109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETURNS_in_macro_return_clause1135 = new BitSet(new long[]{0x0900030004000000L,0x0000010000000000L,0x0000000000000608L});
    public static final BitSet FOLLOW_identifier_plus_in_macro_return_clause1139 = new BitSet(new long[]{0x0000000001000002L});
    public static final BitSet FOLLOW_COMMA_in_macro_return_clause1142 = new BitSet(new long[]{0x0900030004000000L,0x0000010000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_identifier_plus_in_macro_return_clause1144 = new BitSet(new long[]{0x0000000001000002L});
    public static final BitSet FOLLOW_VOID_in_macro_return_clause1151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_macro_content_in_macro_body_clause1178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_macro_param_clause_in_macro_clause1196 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_macro_return_clause_in_macro_clause1198 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_macro_body_clause_in_macro_clause1200 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_plus_in_inline_return_clause1229 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_EQUAL_in_inline_return_clause1231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_plus_in_inline_return_clause1244 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_COMMA_in_inline_return_clause1247 = new BitSet(new long[]{0x0900030004000000L,0x0000010000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_identifier_plus_in_inline_return_clause1249 = new BitSet(new long[]{0x0000040001000000L});
    public static final BitSet FOLLOW_EQUAL_in_inline_return_clause1253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_inline_param_clause1341 = new BitSet(new long[]{0x810000500000A000L,0x0000408000000000L});
    public static final BitSet FOLLOW_parameter_in_inline_param_clause1345 = new BitSet(new long[]{0x0000000001000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_COMMA_in_inline_param_clause1348 = new BitSet(new long[]{0x810000500000A000L,0x0000008000000000L});
    public static final BitSet FOLLOW_parameter_in_inline_param_clause1350 = new BitSet(new long[]{0x0000000001000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_inline_param_clause1357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inline_return_clause_in_inline_clause1379 = new BitSet(new long[]{0x0900030004000000L,0x0000010000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_identifier_plus_in_inline_clause1381 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_inline_param_clause_in_inline_clause1383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_implicit_tuple_type1455 = new BitSet(new long[]{0x490103200C255800L,0x00004100000028E0L,0x0000000000000448L});
    public static final BitSet FOLLOW_field_def_list_in_implicit_tuple_type1457 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_implicit_tuple_type1460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TUPLE_in_explicit_tuple_type1480 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_implicit_tuple_type_in_explicit_tuple_type1483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TUPLE_in_explicit_tuple_type_cast1492 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_explicit_tuple_type_cast1494 = new BitSet(new long[]{0x4001002008255800L,0x0000400000002800L,0x0000000000000040L});
    public static final BitSet FOLLOW_explicit_type_cast_in_explicit_tuple_type_cast1498 = new BitSet(new long[]{0x0000000001000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_COMMA_in_explicit_tuple_type_cast1502 = new BitSet(new long[]{0x4001002008255800L,0x0000000000002800L,0x0000000000000040L});
    public static final BitSet FOLLOW_explicit_type_cast_in_explicit_tuple_type_cast1504 = new BitSet(new long[]{0x0000000001000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_explicit_tuple_type_cast1512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implicit_tuple_type_in_tuple_type1536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_tuple_type_in_tuple_type1540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_implicit_bag_type1549 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_NULL_in_implicit_bag_type1551 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_COLON_in_implicit_bag_type1553 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000080L,0x0000000000000040L});
    public static final BitSet FOLLOW_tuple_type_in_implicit_bag_type1555 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_implicit_bag_type1558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_implicit_bag_type1591 = new BitSet(new long[]{0x0900030004000000L,0x0000210000000080L,0x0000000000000448L});
    public static final BitSet FOLLOW_identifier_plus_in_implicit_bag_type1597 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_COLON_in_implicit_bag_type1599 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L,0x0000000000000040L});
    public static final BitSet FOLLOW_tuple_type_in_implicit_bag_type1604 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_implicit_bag_type1609 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BAG_in_explicit_bag_type1632 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_implicit_bag_type_in_explicit_bag_type1635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BAG_in_explicit_bag_type_cast1644 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_explicit_bag_type_cast1646 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_explicit_tuple_type_cast_in_explicit_bag_type_cast1648 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_explicit_bag_type_cast1651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_BRACKET_in_implicit_map_type1671 = new BitSet(new long[]{0x490103200C255800L,0x00001100000028E0L,0x0000000000000448L});
    public static final BitSet FOLLOW_identifier_plus_in_implicit_map_type1677 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_COLON_in_implicit_map_type1679 = new BitSet(new long[]{0x4001002008255800L,0x00000000000028E0L,0x0000000000000040L});
    public static final BitSet FOLLOW_type_in_implicit_map_type1684 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RIGHT_BRACKET_in_implicit_map_type1689 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAP_in_explicit_map_type1712 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_implicit_map_type_in_explicit_map_type1715 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implicit_map_type_in_map_type1724 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_map_type_in_map_type1728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_type_in_explicit_type1737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_tuple_type_in_explicit_type1741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_bag_type_in_explicit_type1745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_map_type_in_explicit_type1749 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implicit_tuple_type_in_implicit_type1758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implicit_bag_type_in_implicit_type1762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implicit_map_type_in_implicit_type1766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_type_in_type1775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implicit_type_in_type1779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_type_in_explicit_type_cast1788 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_map_type_in_explicit_type_cast1792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_tuple_type_cast_in_explicit_type_cast1796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_bag_type_cast_in_explicit_type_cast1800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_in_import_clause1811 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_import_clause1814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGISTER_in_register_clause1823 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_register_clause1826 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_USING_in_register_clause1829 = new BitSet(new long[]{0x0900030004000000L,0x0000010000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_identifier_plus_in_register_clause1831 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_AS_in_register_clause1833 = new BitSet(new long[]{0x0900030004000000L,0x0000010000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_identifier_plus_in_register_clause1835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_define_clause1846 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_define_clause1849 = new BitSet(new long[]{0x7779D822AE6E5F50L,0xFFA58E03D80C6E9DL,0x00020000000601F7L});
    public static final BitSet FOLLOW_cmd_in_define_clause1853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_clause_in_define_clause1857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_macro_clause_in_define_clause1861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_plus_in_realias_clause1871 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_EQUAL_in_realias_clause1873 = new BitSet(new long[]{0x0900030004000000L,0x0000010000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_identifier_plus_in_realias_clause1875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARALLEL_in_parallel_clause1894 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_INTEGER_in_parallel_clause1897 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_define_clause_in_op_clause1906 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_load_clause_in_op_clause1920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_clause_in_op_clause1934 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cube_clause_in_op_clause1948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_store_clause_in_op_clause1962 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_filter_clause_in_op_clause1976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_distinct_clause_in_op_clause1990 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_limit_clause_in_op_clause2004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sample_clause_in_op_clause2018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_order_clause_in_op_clause2032 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rank_clause_in_op_clause2046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cross_clause_in_op_clause2060 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_clause_in_op_clause2074 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_union_clause_in_op_clause2088 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stream_clause_in_op_clause2102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mr_clause_in_op_clause2116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHIP_in_ship_clause2125 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_ship_clause2128 = new BitSet(new long[]{0x0000000000000000L,0x0000408000000000L});
    public static final BitSet FOLLOW_path_list_in_ship_clause2131 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_ship_clause2134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_path_list2144 = new BitSet(new long[]{0x0000000001000002L});
    public static final BitSet FOLLOW_COMMA_in_path_list2148 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_path_list2150 = new BitSet(new long[]{0x0000000001000002L});
    public static final BitSet FOLLOW_CACHE_in_cache_clause2167 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_cache_clause2170 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_path_list_in_cache_clause2173 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_cache_clause2175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INPUT_in_input_clause2185 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_input_clause2188 = new BitSet(new long[]{0x0000000000000000L,0x0300008000000000L});
    public static final BitSet FOLLOW_stream_cmd_list_in_input_clause2191 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_input_clause2193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTPUT_in_output_clause2203 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_output_clause2206 = new BitSet(new long[]{0x0000000000000000L,0x0300008000000000L});
    public static final BitSet FOLLOW_stream_cmd_list_in_output_clause2209 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_output_clause2211 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDERROR_in_error_clause2221 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_error_clause2224 = new BitSet(new long[]{0x0000000000000000L,0x0000408000000000L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_error_clause2229 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000200L});
    public static final BitSet FOLLOW_LIMIT_in_error_clause2233 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_INTEGER_in_error_clause2236 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_error_clause2244 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOAD_in_load_clause2254 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_load_clause2257 = new BitSet(new long[]{0x0000000000000102L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_USING_in_load_clause2261 = new BitSet(new long[]{0x7779D022AE6E5F50L,0xFFA58E03D80C6E1DL,0x00020000000601F7L});
    public static final BitSet FOLLOW_func_clause_in_load_clause2264 = new BitSet(new long[]{0x0000000000000102L});
    public static final BitSet FOLLOW_as_clause_in_load_clause2269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_name_in_func_clause2279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_name_in_func_clause2316 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_func_clause2318 = new BitSet(new long[]{0x0000000000000000L,0x0000408000020000L});
    public static final BitSet FOLLOW_func_args_in_func_clause2320 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_func_clause2323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eid_without_columns_in_func_name_without_columns2357 = new BitSet(new long[]{0x0000000800000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_set_in_func_name_without_columns2361 = new BitSet(new long[]{0x7779D022AE6E5F50L,0xFFA58E03D80C6E1DL,0x00020000000601F7L});
    public static final BitSet FOLLOW_eid_in_func_name_without_columns2371 = new BitSet(new long[]{0x0000000800000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_eid_in_func_name2383 = new BitSet(new long[]{0x0000000800000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_set_in_func_name2387 = new BitSet(new long[]{0x7779D022AE6E5F50L,0xFFA58E03D80C6E1DL,0x00020000000601F7L});
    public static final BitSet FOLLOW_eid_in_func_name2397 = new BitSet(new long[]{0x0000000800000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_func_args_string_in_func_args2422 = new BitSet(new long[]{0x0000000001000002L});
    public static final BitSet FOLLOW_COMMA_in_func_args2426 = new BitSet(new long[]{0x0000000000000000L,0x0000008000020000L});
    public static final BitSet FOLLOW_func_args_string_in_func_args2428 = new BitSet(new long[]{0x0000000001000002L});
    public static final BitSet FOLLOW_set_in_group_clause2454 = new BitSet(new long[]{0x0900030004000080L,0x0000010000000080L,0x0000000000000408L});
    public static final BitSet FOLLOW_group_item_list_in_group_clause2465 = new BitSet(new long[]{0x0000000000000002L,0x0000000200000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_USING_in_group_clause2469 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_group_clause2472 = new BitSet(new long[]{0x0000000000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_partition_clause_in_group_clause2477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_item_in_group_item_list2487 = new BitSet(new long[]{0x0000000001000002L});
    public static final BitSet FOLLOW_COMMA_in_group_item_list2491 = new BitSet(new long[]{0x0900030004000080L,0x0000010000000080L,0x0000000000000408L});
    public static final BitSet FOLLOW_group_item_in_group_item_list2493 = new BitSet(new long[]{0x0000000001000002L});
    public static final BitSet FOLLOW_rel_in_group_item2525 = new BitSet(new long[]{0x0000000000020010L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_join_group_by_clause_in_group_item2529 = new BitSet(new long[]{0x1000000000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_ALL_in_group_item2533 = new BitSet(new long[]{0x1000000000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_ANY_in_group_item2537 = new BitSet(new long[]{0x1000000000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_identifier_plus2561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_reserved_identifier_whitelist_in_identifier_plus2565 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_plus_in_explicit_field_def2579 = new BitSet(new long[]{0x0000000000800002L});
    public static final BitSet FOLLOW_COLON_in_explicit_field_def2583 = new BitSet(new long[]{0x4001002008255800L,0x00000000000028E0L,0x0000000000000040L});
    public static final BitSet FOLLOW_type_in_explicit_field_def2585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_type_in_explicit_field_def2624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_field_def_in_field_def2643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implicit_type_in_field_def2657 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_def_in_field_def_list2676 = new BitSet(new long[]{0x0000000001000002L});
    public static final BitSet FOLLOW_COMMA_in_field_def_list2680 = new BitSet(new long[]{0x490103200C255800L,0x00000100000028E0L,0x0000000000000448L});
    public static final BitSet FOLLOW_field_def_in_field_def_list2683 = new BitSet(new long[]{0x0000000001000002L});
    public static final BitSet FOLLOW_AS_in_as_clause2698 = new BitSet(new long[]{0x490103200C255800L,0x0000010000002880L,0x0000000000000448L});
    public static final BitSet FOLLOW_explicit_field_def_in_as_clause2703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_as_clause2709 = new BitSet(new long[]{0x490103200C255800L,0x00004100000028E0L,0x0000000000000448L});
    public static final BitSet FOLLOW_field_def_list_in_as_clause2712 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_as_clause2715 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stream_cmd_in_stream_cmd_list2731 = new BitSet(new long[]{0x0000000001000002L});
    public static final BitSet FOLLOW_COMMA_in_stream_cmd_list2735 = new BitSet(new long[]{0x0000000000000000L,0x0300008000000000L});
    public static final BitSet FOLLOW_stream_cmd_in_stream_cmd_list2737 = new BitSet(new long[]{0x0000000001000002L});
    public static final BitSet FOLLOW_set_in_stream_cmd2754 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_USING_in_stream_cmd2771 = new BitSet(new long[]{0x7779D022AE6E5F50L,0xFFA58E03D80C6E1DL,0x00020000000601F7L});
    public static final BitSet FOLLOW_func_clause_in_stream_cmd2774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXECCOMMAND_in_cmd2786 = new BitSet(new long[]{0x2000000000080002L,0x0084000080000000L});
    public static final BitSet FOLLOW_ship_clause_in_cmd2791 = new BitSet(new long[]{0x2000000000080002L,0x0084000080000000L});
    public static final BitSet FOLLOW_cache_clause_in_cmd2795 = new BitSet(new long[]{0x2000000000080002L,0x0084000080000000L});
    public static final BitSet FOLLOW_input_clause_in_cmd2799 = new BitSet(new long[]{0x2000000000080002L,0x0084000080000000L});
    public static final BitSet FOLLOW_output_clause_in_cmd2803 = new BitSet(new long[]{0x2000000000080002L,0x0084000080000000L});
    public static final BitSet FOLLOW_error_clause_in_cmd2807 = new BitSet(new long[]{0x2000000000080002L,0x0084000080000000L});
    public static final BitSet FOLLOW_identifier_plus_in_rel2819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_previous_rel_in_rel2823 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_op_clause_in_rel2827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ARROBA_in_previous_rel2836 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STORE_in_store_clause2845 = new BitSet(new long[]{0x0900030004000080L,0x0000010000000080L,0x0000000000000408L});
    public static final BitSet FOLLOW_rel_in_store_clause2848 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_INTO_in_store_clause2850 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_store_clause2853 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_USING_in_store_clause2857 = new BitSet(new long[]{0x7779D022AE6E5F50L,0xFFA58E03D80C6E1DL,0x00020000000601F7L});
    public static final BitSet FOLLOW_func_clause_in_store_clause2860 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSERT_in_assert_clause2872 = new BitSet(new long[]{0x0900030004000080L,0x0000010000000080L,0x0000000000000408L});
    public static final BitSet FOLLOW_rel_in_assert_clause2875 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_BY_in_assert_clause2877 = new BitSet(new long[]{0xBF7C5352AE7EF750L,0xFFA58F83D80CD6FFL,0x00020000000605BFL});
    public static final BitSet FOLLOW_cond_in_assert_clause2880 = new BitSet(new long[]{0x0000000001000002L});
    public static final BitSet FOLLOW_COMMA_in_assert_clause2884 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_assert_clause2887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FILTER_in_filter_clause2899 = new BitSet(new long[]{0x0900030004000080L,0x0000010000000080L,0x0000000000000408L});
    public static final BitSet FOLLOW_rel_in_filter_clause2902 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_BY_in_filter_clause2904 = new BitSet(new long[]{0xBF7C5352AE7EF750L,0xFFA58F83D80CD6FFL,0x00020000000605BFL});
    public static final BitSet FOLLOW_cond_in_filter_clause2907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STREAM_in_stream_clause2916 = new BitSet(new long[]{0x0900030004000080L,0x0000010000000080L,0x0000000000000408L});
    public static final BitSet FOLLOW_rel_in_stream_clause2919 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_THROUGH_in_stream_clause2921 = new BitSet(new long[]{0x09000B0004000000L,0x0000010000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_EXECCOMMAND_in_stream_clause2926 = new BitSet(new long[]{0x0000000000000102L});
    public static final BitSet FOLLOW_identifier_plus_in_stream_clause2930 = new BitSet(new long[]{0x0000000000000102L});
    public static final BitSet FOLLOW_as_clause_in_stream_clause2934 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAPREDUCE_in_mr_clause2944 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_mr_clause2947 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000080L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_mr_clause2951 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_path_list_in_mr_clause2954 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_mr_clause2956 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_store_clause_in_mr_clause2962 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_load_clause_in_mr_clause2964 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_EXECCOMMAND_in_mr_clause2966 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SPLIT_in_split_clause2976 = new BitSet(new long[]{0x0900030004000080L,0x0000010000000080L,0x0000000000000408L});
    public static final BitSet FOLLOW_rel_in_split_clause2979 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_INTO_in_split_clause2981 = new BitSet(new long[]{0x0900030004000000L,0x0000010000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_split_branch_in_split_clause2984 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_split_branches_in_split_clause2986 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_plus_in_split_branch2995 = new BitSet(new long[]{0x0200000000000000L});
    public static final BitSet FOLLOW_IF_in_split_branch2997 = new BitSet(new long[]{0xBF7C5352AE7EF750L,0xFFA58F83D80CD6FFL,0x00020000000605BFL});
    public static final BitSet FOLLOW_cond_in_split_branch2999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_plus_in_split_otherwise3020 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_OTHERWISE_in_split_otherwise3022 = new BitSet(new long[]{0x0000000000000012L});
    public static final BitSet FOLLOW_ALL_in_split_otherwise3024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_split_branches3047 = new BitSet(new long[]{0x0900030004000000L,0x0000010000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_split_branch_in_split_branches3050 = new BitSet(new long[]{0x0000000001000002L});
    public static final BitSet FOLLOW_split_branches_in_split_branches3052 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_split_branches3072 = new BitSet(new long[]{0x0900030004000000L,0x0000010000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_split_otherwise_in_split_branches3075 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIMIT_in_limit_clause3084 = new BitSet(new long[]{0x0900030004000080L,0x0000010000000080L,0x0000000000000408L});
    public static final BitSet FOLLOW_rel_in_limit_clause3087 = new BitSet(new long[]{0xBF7C5352AE7EF750L,0xFFA58F83D808D6FFL,0x00020000000605BFL});
    public static final BitSet FOLLOW_expr_in_limit_clause3089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SAMPLE_in_sample_clause3098 = new BitSet(new long[]{0x0900030004000080L,0x0000010000000080L,0x0000000000000408L});
    public static final BitSet FOLLOW_rel_in_sample_clause3101 = new BitSet(new long[]{0xBF7C5352AE7EF750L,0xFFA58F83D808D6FFL,0x00020000000605BFL});
    public static final BitSet FOLLOW_expr_in_sample_clause3103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RANK_in_rank_clause3112 = new BitSet(new long[]{0x0900030004000080L,0x0000010000000080L,0x0000000000000408L});
    public static final BitSet FOLLOW_rel_in_rank_clause3115 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_rank_by_statement_in_rank_clause3119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BY_in_rank_by_statement3131 = new BitSet(new long[]{0x0940039004000000L,0x0040010000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_rank_by_clause_in_rank_by_statement3134 = new BitSet(new long[]{0x0000000040000002L});
    public static final BitSet FOLLOW_DENSE_in_rank_by_statement3136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_rank_by_clause3146 = new BitSet(new long[]{0x0000000080000202L});
    public static final BitSet FOLLOW_rank_list_in_rank_by_clause3176 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rank_col_in_rank_list3185 = new BitSet(new long[]{0x0000000001000002L});
    public static final BitSet FOLLOW_COMMA_in_rank_list3189 = new BitSet(new long[]{0x0940039004000000L,0x0000010000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_rank_col_in_rank_list3191 = new BitSet(new long[]{0x0000000001000002L});
    public static final BitSet FOLLOW_col_range_in_rank_col3217 = new BitSet(new long[]{0x0000000080000202L});
    public static final BitSet FOLLOW_col_ref_in_rank_col3241 = new BitSet(new long[]{0x0000000080000202L});
    public static final BitSet FOLLOW_ORDER_in_order_clause3261 = new BitSet(new long[]{0x0900030004000080L,0x0000010000000080L,0x0000000000000408L});
    public static final BitSet FOLLOW_rel_in_order_clause3264 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_BY_in_order_clause3266 = new BitSet(new long[]{0x0940039004000000L,0x0040010000000080L,0x0000000000000408L});
    public static final BitSet FOLLOW_order_by_clause_in_order_clause3269 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_USING_in_order_clause3273 = new BitSet(new long[]{0x7779D022AE6E5F50L,0xFFA58E03D80C6E1DL,0x00020000000601F7L});
    public static final BitSet FOLLOW_func_clause_in_order_clause3276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_order_by_clause3288 = new BitSet(new long[]{0x0000000080000202L});
    public static final BitSet FOLLOW_order_col_list_in_order_by_clause3319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_order_col_in_order_col_list3328 = new BitSet(new long[]{0x0000000001000002L});
    public static final BitSet FOLLOW_COMMA_in_order_col_list3332 = new BitSet(new long[]{0x0940039004000000L,0x0000010000000080L,0x0000000000000408L});
    public static final BitSet FOLLOW_order_col_in_order_col_list3334 = new BitSet(new long[]{0x0000000001000002L});
    public static final BitSet FOLLOW_col_range_in_order_col3365 = new BitSet(new long[]{0x0000000080000202L});
    public static final BitSet FOLLOW_col_ref_in_order_col3388 = new BitSet(new long[]{0x0000000080000202L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_order_col3413 = new BitSet(new long[]{0x0940031004000000L,0x0000010000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_col_ref_in_order_col3416 = new BitSet(new long[]{0x0000000080000200L,0x0000400000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_order_col3429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DISTINCT_in_distinct_clause3439 = new BitSet(new long[]{0x0900030004000080L,0x0000010000000080L,0x0000000000000408L});
    public static final BitSet FOLLOW_rel_in_distinct_clause3442 = new BitSet(new long[]{0x0000000000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_partition_clause_in_distinct_clause3444 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_partition_clause3454 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_BY_in_partition_clause3457 = new BitSet(new long[]{0x7779D022AE6E5F50L,0xFFA58E03D80C6E1DL,0x00020000000601F7L});
    public static final BitSet FOLLOW_func_name_in_partition_clause3460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_in_rel_list3469 = new BitSet(new long[]{0x0000000001000002L});
    public static final BitSet FOLLOW_COMMA_in_rel_list3473 = new BitSet(new long[]{0x0900030004000080L,0x0000010000000080L,0x0000000000000408L});
    public static final BitSet FOLLOW_rel_in_rel_list3475 = new BitSet(new long[]{0x0000000001000002L});
    public static final BitSet FOLLOW_CROSS_in_cross_clause3492 = new BitSet(new long[]{0x0900030004000080L,0x0000010000000080L,0x0000000000000408L});
    public static final BitSet FOLLOW_rel_list_in_cross_clause3495 = new BitSet(new long[]{0x0000000000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_partition_clause_in_cross_clause3497 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_JOIN_in_join_clause3508 = new BitSet(new long[]{0x0900030004000080L,0x0000010000000080L,0x0000000000000408L});
    public static final BitSet FOLLOW_join_sub_clause_in_join_clause3511 = new BitSet(new long[]{0x0000000000000002L,0x0000000200000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_USING_in_join_clause3515 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_join_type_in_join_clause3518 = new BitSet(new long[]{0x0000000000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_partition_clause_in_join_clause3523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_join_type3533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_item_in_join_sub_clause3542 = new BitSet(new long[]{0x0010000001000000L,0x0000080000000010L});
    public static final BitSet FOLLOW_set_in_join_sub_clause3548 = new BitSet(new long[]{0x0000000001000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_OUTER_in_join_sub_clause3562 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_COMMA_in_join_sub_clause3565 = new BitSet(new long[]{0x0900030004000080L,0x0000010000000080L,0x0000000000000408L});
    public static final BitSet FOLLOW_join_item_in_join_sub_clause3568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_join_sub_clause3578 = new BitSet(new long[]{0x0900030004000080L,0x0000010000000080L,0x0000000000000408L});
    public static final BitSet FOLLOW_join_item_in_join_sub_clause3581 = new BitSet(new long[]{0x0000000001000002L});
    public static final BitSet FOLLOW_rel_in_join_item3597 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_join_group_by_clause_in_join_item3599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BY_in_join_group_by_clause3658 = new BitSet(new long[]{0xBF7C53D2AE7EF750L,0xFFE58F83D808D6FFL,0x00020000000605BFL});
    public static final BitSet FOLLOW_real_arg_in_join_group_by_clause3661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNION_in_union_clause3670 = new BitSet(new long[]{0x0900030004000080L,0x0000010004000080L,0x0000000000000408L});
    public static final BitSet FOLLOW_ONSCHEMA_in_union_clause3673 = new BitSet(new long[]{0x0900030004000080L,0x0000010000000080L,0x0000000000000408L});
    public static final BitSet FOLLOW_rel_list_in_union_clause3676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CUBE_in_cube_clause3685 = new BitSet(new long[]{0x0900030004000080L,0x0000010000000080L,0x0000000000000408L});
    public static final BitSet FOLLOW_rel_in_cube_clause3687 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_BY_in_cube_clause3689 = new BitSet(new long[]{0x0000000004000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_cube_rollup_list_in_cube_clause3691 = new BitSet(new long[]{0x0000000001000002L});
    public static final BitSet FOLLOW_COMMA_in_cube_clause3695 = new BitSet(new long[]{0x0000000004000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_cube_rollup_list_in_cube_clause3697 = new BitSet(new long[]{0x0000000001000002L});
    public static final BitSet FOLLOW_set_in_cube_rollup_list3728 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_cube_rollup_list3739 = new BitSet(new long[]{0xBF7C53D2AE7EF750L,0xFFE58F83D808D6FFL,0x00020000000605BFL});
    public static final BitSet FOLLOW_real_arg_in_cube_rollup_list3742 = new BitSet(new long[]{0x0000000001000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_COMMA_in_cube_rollup_list3746 = new BitSet(new long[]{0xBF7C53D2AE7EF750L,0xFFE58F83D808D6FFL,0x00020000000605BFL});
    public static final BitSet FOLLOW_real_arg_in_cube_rollup_list3749 = new BitSet(new long[]{0x0000000001000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_cube_rollup_list3754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLATTEN_in_flatten_clause3764 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_flatten_clause3767 = new BitSet(new long[]{0xBF7C5352AE7EF750L,0xFFA58F83D808D6FFL,0x00020000000605BFL});
    public static final BitSet FOLLOW_expr_in_flatten_clause3770 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_flatten_clause3772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_generate_as_clause3785 = new BitSet(new long[]{0x490103200C255800L,0x0000010000002880L,0x0000000000000448L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_generate_as_clause3792 = new BitSet(new long[]{0x490103200C255800L,0x00000100000028E0L,0x0000000000000448L});
    public static final BitSet FOLLOW_field_def_list_in_generate_as_clause3795 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_generate_as_clause3797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_field_def_in_generate_as_clause3804 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_flatten_clause_in_flatten_generated_item3815 = new BitSet(new long[]{0x0000000000000102L});
    public static final BitSet FOLLOW_generate_as_clause_in_flatten_generated_item3817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_real_arg_in_flatten_generated_item3845 = new BitSet(new long[]{0x0000000000000102L});
    public static final BitSet FOLLOW_generate_as_clause_in_flatten_generated_item3847 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_real_arg3862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_real_arg3875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_range_in_real_arg3888 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_and_cond_in_cond3897 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L});
    public static final BitSet FOLLOW_OR_in_cond3902 = new BitSet(new long[]{0xBF7C5352AE7EF750L,0xFFA58F83D80CD6FFL,0x00020000000605BFL});
    public static final BitSet FOLLOW_and_cond_in_cond3905 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L});
    public static final BitSet FOLLOW_not_cond_in_and_cond3917 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_AND_in_and_cond3921 = new BitSet(new long[]{0xBF7C5352AE7EF750L,0xFFA58F83D80CD6FFL,0x00020000000605BFL});
    public static final BitSet FOLLOW_not_cond_in_and_cond3924 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_NOT_in_not_cond3936 = new BitSet(new long[]{0xBF7C5352AE7EF750L,0xFFA58F83D808D6FFL,0x00020000000605BFL});
    public static final BitSet FOLLOW_unary_cond_in_not_cond3940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_unary_cond3970 = new BitSet(new long[]{0x0800000000000002L,0xF000000003F00004L,0x0000000000000007L});
    public static final BitSet FOLLOW_IS_in_unary_cond3984 = new BitSet(new long[]{0x0000000000000000L,0x00000000000C0000L});
    public static final BitSet FOLLOW_NOT_in_unary_cond3986 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_NULL_in_unary_cond3989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_in_unary_cond4019 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_unary_cond4021 = new BitSet(new long[]{0xBF7C5352AE7EF750L,0xFFA58F83D808D6FFL,0x00020000000605BFL});
    public static final BitSet FOLLOW_rhs_operand_in_unary_cond4025 = new BitSet(new long[]{0x0000000001000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_COMMA_in_unary_cond4029 = new BitSet(new long[]{0xBF7C5352AE7EF750L,0xFFA58F83D808D6FFL,0x00020000000605BFL});
    public static final BitSet FOLLOW_rhs_operand_in_unary_cond4031 = new BitSet(new long[]{0x0000000001000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_unary_cond4038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_op_in_unary_cond4079 = new BitSet(new long[]{0xBF7C5352AE7EF750L,0xFFA58F83D808D6FFL,0x00020000000605BFL});
    public static final BitSet FOLLOW_expr_in_unary_cond4085 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_rhs_operand4134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multi_expr_in_expr4143 = new BitSet(new long[]{0x0000000000000002L,0x0000001000008000L});
    public static final BitSet FOLLOW_set_in_expr4147 = new BitSet(new long[]{0xBF7C5352AE7EF750L,0xFFA58F83D808D6FFL,0x00020000000605BFL});
    public static final BitSet FOLLOW_multi_expr_in_expr4158 = new BitSet(new long[]{0x0000000000000002L,0x0000001000008000L});
    public static final BitSet FOLLOW_cast_expr_in_multi_expr4170 = new BitSet(new long[]{0x0000000400000002L,0x0040000400000000L});
    public static final BitSet FOLLOW_set_in_multi_expr4174 = new BitSet(new long[]{0xBF7C5352AE7EF750L,0xFFA58F83D808D6FFL,0x00020000000605BFL});
    public static final BitSet FOLLOW_cast_expr_in_multi_expr4189 = new BitSet(new long[]{0x0000000400000002L,0x0040000400000000L});
    public static final BitSet FOLLOW_set_in_func_name_suffix4203 = new BitSet(new long[]{0x7779D022AE6E5F50L,0xFFA58E03D80C6E1DL,0x00020000000601F7L});
    public static final BitSet FOLLOW_eid_in_func_name_suffix4213 = new BitSet(new long[]{0x0000000800000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_scalar_in_cast_expr4248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_cast_expr4262 = new BitSet(new long[]{0xBF7C5352AE7EF750L,0xFFA58F83D808D6FFL,0x00020000000605BFL});
    public static final BitSet FOLLOW_cast_expr_in_cast_expr4264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_ref_without_identifier_in_cast_expr4321 = new BitSet(new long[]{0x0000000000000002L,0x0000002800000000L});
    public static final BitSet FOLLOW_projection_in_cast_expr4323 = new BitSet(new long[]{0x0000000000000002L,0x0000002800000000L});
    public static final BitSet FOLLOW_invoker_func_in_cast_expr4338 = new BitSet(new long[]{0x0000000000000002L,0x0000002800000000L});
    public static final BitSet FOLLOW_projection_in_cast_expr4340 = new BitSet(new long[]{0x0000000000000002L,0x0000002800000000L});
    public static final BitSet FOLLOW_identifier_plus_in_cast_expr4355 = new BitSet(new long[]{0x0000000000000002L,0x0000002800000000L});
    public static final BitSet FOLLOW_projection_in_cast_expr4357 = new BitSet(new long[]{0x0000000000000002L,0x0000002800000000L});
    public static final BitSet FOLLOW_identifier_plus_in_cast_expr4372 = new BitSet(new long[]{0x0000000800000000L,0x0000000800000080L});
    public static final BitSet FOLLOW_func_name_suffix_in_cast_expr4374 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_cast_expr4377 = new BitSet(new long[]{0xBF7C53D2AE7EF750L,0xFFE5CF83D808D6FFL,0x00020000000605BFL});
    public static final BitSet FOLLOW_real_arg_in_cast_expr4381 = new BitSet(new long[]{0x0000000001000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_COMMA_in_cast_expr4385 = new BitSet(new long[]{0xBF7C53D2AE7EF750L,0xFFE58F83D808D6FFL,0x00020000000605BFL});
    public static final BitSet FOLLOW_real_arg_in_cast_expr4387 = new BitSet(new long[]{0x0000000001000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_cast_expr4395 = new BitSet(new long[]{0x0000000000000002L,0x0000002800000000L});
    public static final BitSet FOLLOW_projection_in_cast_expr4397 = new BitSet(new long[]{0x0000000000000002L,0x0000002800000000L});
    public static final BitSet FOLLOW_func_name_without_columns_in_cast_expr4431 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_cast_expr4433 = new BitSet(new long[]{0xBF7C53D2AE7EF750L,0xFFE5CF83D808D6FFL,0x00020000000605BFL});
    public static final BitSet FOLLOW_real_arg_in_cast_expr4437 = new BitSet(new long[]{0x0000000001000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_COMMA_in_cast_expr4441 = new BitSet(new long[]{0xBF7C53D2AE7EF750L,0xFFE58F83D808D6FFL,0x00020000000605BFL});
    public static final BitSet FOLLOW_real_arg_in_cast_expr4443 = new BitSet(new long[]{0x0000000001000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_cast_expr4451 = new BitSet(new long[]{0x0000000000000002L,0x0000002800000000L});
    public static final BitSet FOLLOW_projection_in_cast_expr4453 = new BitSet(new long[]{0x0000000000000002L,0x0000002800000000L});
    public static final BitSet FOLLOW_CASE_in_cast_expr4484 = new BitSet(new long[]{0xBF7C5352AE7EF750L,0xFFA58F83D808D6FFL,0x00020000000605BFL});
    public static final BitSet FOLLOW_WHEN_in_cast_expr4493 = new BitSet(new long[]{0xBF7C5352AE7EF750L,0xFFA58F83D80CD6FFL,0x00020000000605BFL});
    public static final BitSet FOLLOW_cond_in_cast_expr4495 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_THEN_in_cast_expr4497 = new BitSet(new long[]{0xBF7C5352AE7EF750L,0xFFA58F83D808D6FFL,0x00020000000605BFL});
    public static final BitSet FOLLOW_expr_in_cast_expr4499 = new BitSet(new long[]{0x0000030000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_WHEN_in_cast_expr4503 = new BitSet(new long[]{0xBF7C5352AE7EF750L,0xFFA58F83D80CD6FFL,0x00020000000605BFL});
    public static final BitSet FOLLOW_cond_in_cast_expr4505 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_THEN_in_cast_expr4507 = new BitSet(new long[]{0xBF7C5352AE7EF750L,0xFFA58F83D808D6FFL,0x00020000000605BFL});
    public static final BitSet FOLLOW_expr_in_cast_expr4509 = new BitSet(new long[]{0x0000030000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_ELSE_in_cast_expr4516 = new BitSet(new long[]{0xBF7C5352AE7EF750L,0xFFA58F83D808D6FFL,0x00020000000605BFL});
    public static final BitSet FOLLOW_expr_in_cast_expr4518 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_END_in_cast_expr4523 = new BitSet(new long[]{0x0000000000000002L,0x0000002800000000L});
    public static final BitSet FOLLOW_projection_in_cast_expr4525 = new BitSet(new long[]{0x0000000000000002L,0x0000002800000000L});
    public static final BitSet FOLLOW_expr_in_cast_expr4572 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_WHEN_in_cast_expr4574 = new BitSet(new long[]{0xBF7C5352AE7EF750L,0xFFA58F83D808D6FFL,0x00020000000605BFL});
    public static final BitSet FOLLOW_rhs_operand_in_cast_expr4576 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_THEN_in_cast_expr4578 = new BitSet(new long[]{0xBF7C5352AE7EF750L,0xFFA58F83D808D6FFL,0x00020000000605BFL});
    public static final BitSet FOLLOW_rhs_operand_in_cast_expr4580 = new BitSet(new long[]{0x0000030000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_WHEN_in_cast_expr4584 = new BitSet(new long[]{0xBF7C5352AE7EF750L,0xFFA58F83D808D6FFL,0x00020000000605BFL});
    public static final BitSet FOLLOW_rhs_operand_in_cast_expr4586 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_THEN_in_cast_expr4588 = new BitSet(new long[]{0xBF7C5352AE7EF750L,0xFFA58F83D808D6FFL,0x00020000000605BFL});
    public static final BitSet FOLLOW_rhs_operand_in_cast_expr4590 = new BitSet(new long[]{0x0000030000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_ELSE_in_cast_expr4597 = new BitSet(new long[]{0xBF7C5352AE7EF750L,0xFFA58F83D808D6FFL,0x00020000000605BFL});
    public static final BitSet FOLLOW_rhs_operand_in_cast_expr4599 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_END_in_cast_expr4604 = new BitSet(new long[]{0x0000000000000002L,0x0000002800000000L});
    public static final BitSet FOLLOW_projection_in_cast_expr4606 = new BitSet(new long[]{0x0000000000000002L,0x0000002800000000L});
    public static final BitSet FOLLOW_paren_expr_in_cast_expr4681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_curly_expr_in_cast_expr4695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bracket_expr_in_cast_expr4709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INVOKE_in_invoker_func4723 = new BitSet(new long[]{0x0000000000000020L,0x0000000000000080L});
    public static final BitSet FOLLOW_AMPERSAND_in_invoker_func4727 = new BitSet(new long[]{0x0900030004000000L,0x0000010000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_invoker_func4731 = new BitSet(new long[]{0xBF7C53D2AE7EF750L,0xFFE58F83D808D6FFL,0x00020000000605BFL});
    public static final BitSet FOLLOW_real_arg_in_invoker_func4733 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_invoker_func4737 = new BitSet(new long[]{0x0900030004000000L,0x0000010000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_identifier_plus_in_invoker_func4745 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_PERIOD_in_invoker_func4747 = new BitSet(new long[]{0x0900030004000000L,0x0000010000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_identifier_plus_in_invoker_func4756 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_invoker_func4760 = new BitSet(new long[]{0xBF7C53D2AE7EF750L,0xFFE5CF83D808D6FFL,0x00020000000605BFL});
    public static final BitSet FOLLOW_real_arg_in_invoker_func4764 = new BitSet(new long[]{0x0000000001000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_COMMA_in_invoker_func4768 = new BitSet(new long[]{0xBF7C53D2AE7EF750L,0xFFE58F83D808D6FFL,0x00020000000605BFL});
    public static final BitSet FOLLOW_real_arg_in_invoker_func4770 = new BitSet(new long[]{0x0000000001000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_invoker_func4778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_paren_expr4845 = new BitSet(new long[]{0xFF7D53F2AE7FFF50L,0xFFE5CF83D80CFEFFL,0x00020000000605FFL});
    public static final BitSet FOLLOW_try_implicit_map_cast_in_paren_expr4848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implicit_map_type_in_try_implicit_map_cast4951 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_try_implicit_map_cast4953 = new BitSet(new long[]{0xBF7C5352AE7EF750L,0xFFA58F83D808D6FFL,0x00020000000605BFL});
    public static final BitSet FOLLOW_cast_expr_in_try_implicit_map_cast4955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_after_left_paren_in_try_implicit_map_cast4982 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_type_cast_in_after_left_paren4991 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_after_left_paren4993 = new BitSet(new long[]{0xBF7C5352AE7EF750L,0xFFA58F83D808D6FFL,0x00020000000605BFL});
    public static final BitSet FOLLOW_cast_expr_in_after_left_paren4995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_after_left_paren5046 = new BitSet(new long[]{0x0000000000000002L,0x0000002800000000L});
    public static final BitSet FOLLOW_projection_in_after_left_paren5048 = new BitSet(new long[]{0x0000000000000002L,0x0000002800000000L});
    public static final BitSet FOLLOW_STAR_in_after_left_paren5081 = new BitSet(new long[]{0x0000000001000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_COMMA_in_after_left_paren5085 = new BitSet(new long[]{0xBF7C53D2AE7EF750L,0xFFE58F83D808D6FFL,0x00020000000605BFL});
    public static final BitSet FOLLOW_real_arg_in_after_left_paren5087 = new BitSet(new long[]{0x0000000001000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_after_left_paren5092 = new BitSet(new long[]{0x0000000000000002L,0x0000002800000000L});
    public static final BitSet FOLLOW_projection_in_after_left_paren5094 = new BitSet(new long[]{0x0000000000000002L,0x0000002800000000L});
    public static final BitSet FOLLOW_col_range_in_after_left_paren5134 = new BitSet(new long[]{0x0000000001000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_COMMA_in_after_left_paren5138 = new BitSet(new long[]{0xBF7C53D2AE7EF750L,0xFFE58F83D808D6FFL,0x00020000000605BFL});
    public static final BitSet FOLLOW_real_arg_in_after_left_paren5140 = new BitSet(new long[]{0x0000000001000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_after_left_paren5145 = new BitSet(new long[]{0x0000000000000002L,0x0000002800000000L});
    public static final BitSet FOLLOW_projection_in_after_left_paren5147 = new BitSet(new long[]{0x0000000000000002L,0x0000002800000000L});
    public static final BitSet FOLLOW_cond_in_after_left_paren5259 = new BitSet(new long[]{0x0000000001000000L,0x0000404000000000L});
    public static final BitSet FOLLOW_COMMA_in_after_left_paren5286 = new BitSet(new long[]{0xBF7C53D2AE7EF750L,0xFFE58F83D808D6FFL,0x00020000000605BFL});
    public static final BitSet FOLLOW_real_arg_in_after_left_paren5288 = new BitSet(new long[]{0x0000000001000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_after_left_paren5293 = new BitSet(new long[]{0x0000000000000002L,0x0000002800000000L});
    public static final BitSet FOLLOW_projection_in_after_left_paren5295 = new BitSet(new long[]{0x0000000000000002L,0x0000002800000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_after_left_paren5341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QMARK_in_after_left_paren5378 = new BitSet(new long[]{0xBF7C5352AE7EF750L,0xFFA58F83D808D6FFL,0x00020000000605BFL});
    public static final BitSet FOLLOW_expr_in_after_left_paren5384 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_COLON_in_after_left_paren5386 = new BitSet(new long[]{0xBF7C5352AE7EF750L,0xFFA58F83D808D6FFL,0x00020000000605BFL});
    public static final BitSet FOLLOW_expr_in_after_left_paren5392 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_after_left_paren5394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_curly_expr5423 = new BitSet(new long[]{0xBF7C53D2AE7EF750L,0xFFE58F83D808D6FFL,0x00020000000605BFL});
    public static final BitSet FOLLOW_real_arg_in_curly_expr5425 = new BitSet(new long[]{0x0000000001000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_COMMA_in_curly_expr5429 = new BitSet(new long[]{0xBF7C53D2AE7EF750L,0xFFE58F83D808D6FFL,0x00020000000605BFL});
    public static final BitSet FOLLOW_real_arg_in_curly_expr5431 = new BitSet(new long[]{0x0000000001000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_curly_expr5436 = new BitSet(new long[]{0x0000000000000002L,0x0000002800000000L});
    public static final BitSet FOLLOW_projection_in_curly_expr5438 = new BitSet(new long[]{0x0000000000000002L,0x0000002800000000L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_curly_expr5470 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_curly_expr5472 = new BitSet(new long[]{0x0000000000000002L,0x0000002800000000L});
    public static final BitSet FOLLOW_projection_in_curly_expr5474 = new BitSet(new long[]{0x0000000000000002L,0x0000002800000000L});
    public static final BitSet FOLLOW_LEFT_BRACKET_in_bracket_expr5495 = new BitSet(new long[]{0xBF7C53D2AE7EF750L,0xFFE58F83D808D6FFL,0x00020000000605BFL});
    public static final BitSet FOLLOW_real_arg_in_bracket_expr5497 = new BitSet(new long[]{0x0000000001000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COMMA_in_bracket_expr5501 = new BitSet(new long[]{0xBF7C53D2AE7EF750L,0xFFE58F83D808D6FFL,0x00020000000605BFL});
    public static final BitSet FOLLOW_real_arg_in_bracket_expr5503 = new BitSet(new long[]{0x0000000001000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RIGHT_BRACKET_in_bracket_expr5508 = new BitSet(new long[]{0x0000000000000002L,0x0000002800000000L});
    public static final BitSet FOLLOW_projection_in_bracket_expr5510 = new BitSet(new long[]{0x0000000000000002L,0x0000002800000000L});
    public static final BitSet FOLLOW_LEFT_BRACKET_in_bracket_expr5544 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_keyvalue_in_bracket_expr5546 = new BitSet(new long[]{0x0000000001000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COMMA_in_bracket_expr5550 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_keyvalue_in_bracket_expr5552 = new BitSet(new long[]{0x0000000001000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RIGHT_BRACKET_in_bracket_expr5557 = new BitSet(new long[]{0x0000000000000002L,0x0000002800000000L});
    public static final BitSet FOLLOW_projection_in_bracket_expr5559 = new BitSet(new long[]{0x0000000000000002L,0x0000002800000000L});
    public static final BitSet FOLLOW_LEFT_BRACKET_in_bracket_expr5591 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RIGHT_BRACKET_in_bracket_expr5593 = new BitSet(new long[]{0x0000000000000002L,0x0000002800000000L});
    public static final BitSet FOLLOW_projection_in_bracket_expr5595 = new BitSet(new long[]{0x0000000000000002L,0x0000002800000000L});
    public static final BitSet FOLLOW_PERIOD_in_projection5616 = new BitSet(new long[]{0x0940031004000000L,0x0000010000000080L,0x0000000000000408L});
    public static final BitSet FOLLOW_col_ref_in_projection5620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_projection5624 = new BitSet(new long[]{0x0940031004000000L,0x0000010000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_col_ref_in_projection5626 = new BitSet(new long[]{0x0000000001000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_COMMA_in_projection5630 = new BitSet(new long[]{0x0940031004000000L,0x0000010000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_col_ref_in_projection5632 = new BitSet(new long[]{0x0000000001000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_projection5637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_POUND_in_projection5665 = new BitSet(new long[]{0x0000000000000000L,0x0000008000080000L});
    public static final BitSet FOLLOW_set_in_projection5668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_ref_without_identifier_in_col_ref5701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_plus_in_col_ref5705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_ref_in_col_range5718 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_DOUBLE_PERIOD_in_col_range5720 = new BitSet(new long[]{0x0940031004000002L,0x0000010000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_col_ref_in_col_range5726 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLE_PERIOD_in_col_range5757 = new BitSet(new long[]{0x0940031004000000L,0x0000010000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_col_ref_in_col_range5759 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_keyvalue5886 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_POUND_in_keyvalue5888 = new BitSet(new long[]{0x800410400000A000L,0x00000080000810E0L,0x0000000000000020L});
    public static final BitSet FOLLOW_literal_in_keyvalue5890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_BRACKET_in_literal_map5911 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_keyvalue_in_literal_map5913 = new BitSet(new long[]{0x0000000001000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COMMA_in_literal_map5917 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_keyvalue_in_literal_map5919 = new BitSet(new long[]{0x0000000001000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RIGHT_BRACKET_in_literal_map5924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_BRACKET_in_literal_map5951 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RIGHT_BRACKET_in_literal_map5953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_literal_bag5971 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_literal_tuple_in_literal_bag5973 = new BitSet(new long[]{0x0000000001000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_COMMA_in_literal_bag5977 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_literal_tuple_in_literal_bag5979 = new BitSet(new long[]{0x0000000001000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_literal_bag5984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_literal_bag6011 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_literal_bag6013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_literal_tuple6030 = new BitSet(new long[]{0x800410400000A000L,0x00000080000810E0L,0x0000000000000020L});
    public static final BitSet FOLLOW_literal_in_literal_tuple6032 = new BitSet(new long[]{0x0000000001000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_COMMA_in_literal_tuple6036 = new BitSet(new long[]{0x800410400000A000L,0x00000080000810E0L,0x0000000000000020L});
    public static final BitSet FOLLOW_literal_in_literal_tuple6038 = new BitSet(new long[]{0x0000000001000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_literal_tuple6043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_literal_tuple6072 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_literal_tuple6074 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_scalar_in_literal6091 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_map_in_literal6095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_bag_in_literal6099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_tuple_in_literal6103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_command_in_nested_blk6116 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_nested_blk6118 = new BitSet(new long[]{0x0920030004000000L,0x0000010000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_GENERATE_in_nested_blk6123 = new BitSet(new long[]{0xBF7CD3D2AE7EF750L,0xFFE58F83D808D6FFL,0x00020000000605BFL});
    public static final BitSet FOLLOW_flatten_generated_item_in_nested_blk6125 = new BitSet(new long[]{0x0000000001000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_COMMA_in_nested_blk6129 = new BitSet(new long[]{0xBF7CD3D2AE7EF750L,0xFFE58F83D808D6FFL,0x00020000000605BFL});
    public static final BitSet FOLLOW_flatten_generated_item_in_nested_blk6131 = new BitSet(new long[]{0x0000000001000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_nested_blk6136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_plus_in_nested_command6183 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_EQUAL_in_nested_command6185 = new BitSet(new long[]{0x0940031004000000L,0x0000010000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_nested_proj_in_nested_command6187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_plus_in_nested_command6234 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_EQUAL_in_nested_command6236 = new BitSet(new long[]{0xBF7C5352AE7EF750L,0xFFA58F83D808D6FFL,0x00020000000605BFL});
    public static final BitSet FOLLOW_expr_in_nested_command6238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_plus_in_nested_command6283 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_EQUAL_in_nested_command6285 = new BitSet(new long[]{0x0008400202000000L,0x0000000010000200L});
    public static final BitSet FOLLOW_nested_op_in_nested_command6287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_filter_in_nested_op6322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_sort_in_nested_op6336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_distinct_in_nested_op6350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_limit_in_nested_op6364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_cross_in_nested_op6378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_foreach_in_nested_op6392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_ref_in_nested_proj6401 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_PERIOD_in_nested_proj6403 = new BitSet(new long[]{0x0940031004000000L,0x0000010000000080L,0x0000000000000408L});
    public static final BitSet FOLLOW_col_ref_list_in_nested_proj6405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_ref_in_col_ref_list6439 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_col_ref_list6445 = new BitSet(new long[]{0x0940031004000000L,0x0000010000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_col_ref_in_col_ref_list6447 = new BitSet(new long[]{0x0000000001000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_COMMA_in_col_ref_list6451 = new BitSet(new long[]{0x0940031004000000L,0x0000010000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_col_ref_in_col_ref_list6453 = new BitSet(new long[]{0x0000000001000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_col_ref_list6458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FILTER_in_nested_filter6488 = new BitSet(new long[]{0x0940031004000000L,0x0000010000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_filter6491 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_BY_in_nested_filter6493 = new BitSet(new long[]{0xBF7C5352AE7EF750L,0xFFA58F83D80CD6FFL,0x00020000000605BFL});
    public static final BitSet FOLLOW_cond_in_nested_filter6496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORDER_in_nested_sort6505 = new BitSet(new long[]{0x0940031004000000L,0x0000010000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_sort6508 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_BY_in_nested_sort6510 = new BitSet(new long[]{0x0940039004000000L,0x0040010000000080L,0x0000000000000408L});
    public static final BitSet FOLLOW_order_by_clause_in_nested_sort6514 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_USING_in_nested_sort6518 = new BitSet(new long[]{0x7779D022AE6E5F50L,0xFFA58E03D80C6E1DL,0x00020000000601F7L});
    public static final BitSet FOLLOW_func_clause_in_nested_sort6521 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DISTINCT_in_nested_distinct6533 = new BitSet(new long[]{0x0940031004000000L,0x0000010000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_distinct6536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIMIT_in_nested_limit6545 = new BitSet(new long[]{0x0940031004000000L,0x0000010000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_limit6548 = new BitSet(new long[]{0xBF7C5352AE7EF750L,0xFFA58F83D808D6FFL,0x00020000000605BFL});
    public static final BitSet FOLLOW_INTEGER_in_nested_limit6560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_nested_limit6564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CROSS_in_nested_cross6575 = new BitSet(new long[]{0x0940031004000000L,0x0000010000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_nested_op_input_list_in_nested_cross6578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOREACH_in_nested_foreach6586 = new BitSet(new long[]{0x0940031004000000L,0x0000010000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_foreach6588 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_GENERATE_in_nested_foreach6590 = new BitSet(new long[]{0xBF7CD3D2AE7EF750L,0xFFE58F83D808D6FFL,0x00020000000605BFL});
    public static final BitSet FOLLOW_flatten_generated_item_in_nested_foreach6592 = new BitSet(new long[]{0x0000000001000002L});
    public static final BitSet FOLLOW_COMMA_in_nested_foreach6596 = new BitSet(new long[]{0xBF7CD3D2AE7EF750L,0xFFE58F83D808D6FFL,0x00020000000605BFL});
    public static final BitSet FOLLOW_flatten_generated_item_in_nested_foreach6598 = new BitSet(new long[]{0x0000000001000002L});
    public static final BitSet FOLLOW_col_ref_in_nested_op_input6633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_proj_in_nested_op_input6637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_op_input_list6646 = new BitSet(new long[]{0x0000000001000002L});
    public static final BitSet FOLLOW_COMMA_in_nested_op_input_list6650 = new BitSet(new long[]{0x0940031004000000L,0x0000010000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_op_input_list6652 = new BitSet(new long[]{0x0000000001000002L});
    public static final BitSet FOLLOW_rel_str_op_in_eid_without_columns6680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_in_eid_without_columns6688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGISTER_in_eid_without_columns6696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETURNS_in_eid_without_columns6704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_eid_without_columns6712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOAD_in_eid_without_columns6720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FILTER_in_eid_without_columns6728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOREACH_in_eid_without_columns6736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROLLUP_in_eid_without_columns6744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORDER_in_eid_without_columns6752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DISTINCT_in_eid_without_columns6760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COGROUP_in_eid_without_columns6768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_JOIN_in_eid_without_columns6776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CROSS_in_eid_without_columns6784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNION_in_eid_without_columns6792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SPLIT_in_eid_without_columns6800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTO_in_eid_without_columns6808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_eid_without_columns6816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_eid_without_columns6824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_eid_without_columns6832 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BY_in_eid_without_columns6840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_USING_in_eid_without_columns6848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INNER_in_eid_without_columns6856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTER_in_eid_without_columns6864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARALLEL_in_eid_without_columns6872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_eid_without_columns6880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AND_in_eid_without_columns6888 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OR_in_eid_without_columns6896 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GENERATE_in_eid_without_columns6904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASC_in_eid_without_columns6912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_eid_without_columns6920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOL_in_eid_without_columns6928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BIGINTEGER_in_eid_without_columns6936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BIGDECIMAL_in_eid_without_columns6944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DATETIME_in_eid_without_columns6952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARARRAY_in_eid_without_columns6960 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BYTEARRAY_in_eid_without_columns6968 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_in_eid_without_columns6976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STREAM_in_eid_without_columns6984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THROUGH_in_eid_without_columns6992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STORE_in_eid_without_columns7000 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAPREDUCE_in_eid_without_columns7008 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHIP_in_eid_without_columns7016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CACHE_in_eid_without_columns7024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INPUT_in_eid_without_columns7032 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTPUT_in_eid_without_columns7040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDERROR_in_eid_without_columns7048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDIN_in_eid_without_columns7056 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDOUT_in_eid_without_columns7064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIMIT_in_eid_without_columns7072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SAMPLE_in_eid_without_columns7080 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_in_eid_without_columns7088 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RIGHT_in_eid_without_columns7096 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FULL_in_eid_without_columns7104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REALIAS_in_eid_without_columns7112 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOL_COND_in_eid_without_columns7120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSERT_in_eid_without_columns7128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eid_without_columns_in_eid7137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_eid7145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GROUP_in_eid7153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CUBE_in_eid7161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRUE_in_eid7169 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FALSE_in_eid7177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INT_in_eid7185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LONG_in_eid7193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLOAT_in_eid7201 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLE_in_eid7209 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NULL_in_eid7217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_eid7225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLATTEN_in_eid7233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BAG_in_eid7241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TUPLE_in_eid7249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAP_in_eid7257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_str_op_in_rel_op7267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_OP_EQ_in_rel_op7278 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_OP_NE_in_rel_op7289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_OP_GT_in_rel_op7300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_OP_GTE_in_rel_op7311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_OP_LT_in_rel_op7322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_OP_LTE_in_rel_op7333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_synpred1_QueryParser4489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implicit_map_type_in_synpred2_QueryParser4942 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred2_QueryParser4944 = new BitSet(new long[]{0xBF7C5352AE7EF750L,0xFFA58F83D808D6FFL,0x00020000000605BFL});
    public static final BitSet FOLLOW_cast_expr_in_synpred2_QueryParser4946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_plus_in_synpred3_QueryParser6165 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_EQUAL_in_synpred3_QueryParser6167 = new BitSet(new long[]{0x0940031004000000L,0x0000010000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_col_ref_in_synpred3_QueryParser6169 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_PERIOD_in_synpred3_QueryParser6171 = new BitSet(new long[]{0x0940031004000000L,0x0000010000000080L,0x0000000000000408L});
    public static final BitSet FOLLOW_col_ref_list_in_synpred3_QueryParser6173 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTEGER_in_synpred4_QueryParser6553 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_synpred4_QueryParser6555 = new BitSet(new long[]{0x0000000000000002L});

}