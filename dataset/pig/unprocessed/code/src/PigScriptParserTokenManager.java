/* Generated By:JavaCC: Do not edit this line. PigScriptParserTokenManager.java */
package org.apache.pig.tools.pigscript.parser;
import java.io.IOException;
import java.io.InputStream;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import org.apache.pig.impl.util.StringUtils;
import jline.console.ConsoleReader;

/** Token Manager. */
public class PigScriptParserTokenManager implements PigScriptParserConstants
{
        int pigBlockLevel = 0;
        int funcBlockLevel = 0;
        int tupleSchemaLevel = 0;
        int bagSchemaLevel = 0;
        int bagConstantLevel = 0;
        int prevState = DEFAULT;
        boolean interactive = false;
        ConsoleReader consoleReader = null;
    Stack<Integer> stack = new Stack<Integer>();
        public void secondary_prompt()
        {
                if (interactive)
                {
                        /*System.err.print(">> ");
			System.err.flush();*/
                    consoleReader.setPrompt(">> ");
                }
        }

    public int getState(int state) {
        if(!stack.empty()) return stack.pop();
        return state;
    }

    public void saveState(int state) {
        stack.push(state);
    }

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_12(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_12(int pos, long active0, long active1)
{
   return jjMoveNfa_12(jjStopStringLiteralDfa_12(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_12()
{
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 121);
      case 92:
         return jjMoveStringLiteralDfa1_12(0x100000000000000L);
      default :
         return jjMoveNfa_12(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_12(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_12(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 34:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 120);
         break;
      default :
         break;
   }
   return jjStartNfa_12(0, 0L, active1);
}
private int jjMoveNfa_12(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 122)
                        kind = 122;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 122)
                     kind = 122;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_8(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_8(int pos, long active0, long active1)
{
   return jjMoveNfa_8(jjStopStringLiteralDfa_8(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_8()
{
   switch(curChar)
   {
      case 39:
         return jjStopAtPos(0, 94);
      case 45:
         return jjMoveStringLiteralDfa1_8(0x10000000L);
      case 47:
         return jjMoveStringLiteralDfa1_8(0x20000000L);
      case 59:
         return jjStopAtPos(0, 95);
      case 123:
         return jjStopAtPos(0, 90);
      default :
         return jjMoveNfa_8(4, 0);
   }
}
private int jjMoveStringLiteralDfa1_8(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_8(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active1 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 93);
         break;
      case 45:
         if ((active1 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 92);
         break;
      default :
         break;
   }
   return jjStartNfa_8(0, 0L, active1);
}
private int jjMoveNfa_8(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 7;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 96)
                        kind = 96;
                  }
                  else if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(0, 1);
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 0:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(0, 1);
                  break;
               case 3:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 10 && kind > 96)
                     kind = 96;
                  break;
               case 6:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 7 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_11(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_11(int pos, long active0, long active1)
{
   return jjMoveNfa_11(jjStopStringLiteralDfa_11(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_11()
{
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 109);
      case 39:
         return jjStopAtPos(0, 114);
      case 45:
         return jjMoveStringLiteralDfa1_11(0x10000000000000L);
      case 47:
         return jjMoveStringLiteralDfa1_11(0x20000000000000L);
      case 96:
         return jjStopAtPos(0, 115);
      case 123:
         return jjStopAtPos(0, 112);
      default :
         return jjMoveNfa_11(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_11(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_11(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 117);
         break;
      case 45:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 116);
         break;
      default :
         break;
   }
   return jjStartNfa_11(0, 0L, active1);
}
private int jjMoveNfa_11(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 20;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 118)
                        kind = 118;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 1:
                  if (curChar == 59)
                     kind = 113;
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 118)
                     kind = 118;
                  break;
               case 3:
                  if (curChar == 10 && kind > 118)
                     kind = 118;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  break;
               case 6:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 9:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 10:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 19:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 111)
                     kind = 111;
                  jjstateSet[jjnewStateCnt++] = 19;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar != 125)
                     break;
                  kind = 113;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 7:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 8:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 12:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 15:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 16:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 20 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_9(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_9(int pos, long active0, long active1)
{
   return jjMoveNfa_9(jjStopStringLiteralDfa_9(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_9()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 98);
      case 41:
         return jjStopAtPos(0, 99);
      case 123:
         return jjStopAtPos(0, 100);
      case 125:
         return jjStopAtPos(0, 101);
      default :
         return jjMoveNfa_9(0, 0);
   }
}
private int jjMoveNfa_9(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                  }
                  else if ((0x800100000000000L & l) != 0L)
                  {
                     if (kind > 102)
                        kind = 102;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 1:
                  if ((0x2400L & l) != 0L && kind > 103)
                     kind = 103;
                  break;
               case 2:
                  if (curChar == 10 && kind > 103)
                     kind = 103;
                  break;
               case 3:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_2()
{
   return 1;
}
private final int jjStopStringLiteralDfa_7(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_7(int pos, long active0, long active1)
{
   return jjMoveNfa_7(jjStopStringLiteralDfa_7(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_7()
{
   switch(curChar)
   {
      case 92:
         return jjMoveStringLiteralDfa1_7(0x400000L);
      case 96:
         return jjStopAtPos(0, 87);
      default :
         return jjMoveNfa_7(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_7(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 96:
         if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(1, 86);
         break;
      default :
         break;
   }
   return jjStartNfa_7(0, 0L, active1);
}
private int jjMoveNfa_7(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 88)
                        kind = 88;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 88)
                     kind = 88;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xff0000000000L) != 0L)
         {
            jjmatchedKind = 137;
            return 0;
         }
         if ((active0 & 0x3002020128000L) != 0L)
         {
            jjmatchedKind = 137;
            return 19;
         }
         if ((active2 & 0x80L) != 0L)
            return 19;
         if ((active1 & 0x4000000000000000L) != 0L)
            return 62;
         if ((active0 & 0x1f0c00dfdfed7fc0L) != 0L)
         {
            jjmatchedKind = 136;
            return 63;
         }
         return -1;
      case 1:
         if ((active0 & 0x37f0000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 137;
               jjmatchedPos = 1;
            }
            return 19;
         }
         if ((active0 & 0x800000703000f00L) != 0L)
            return 63;
         if ((active0 & 0x802020128000L) != 0L)
            return 19;
         if ((active0 & 0x170c00d8dced70c0L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 136;
               jjmatchedPos = 1;
            }
            return 63;
         }
         return -1;
      case 2:
         if ((active0 & 0x37f0000000000L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 2;
            return 19;
         }
         if ((active0 & 0x1f040090d4ed7080L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 2;
            return 63;
         }
         if ((active0 & 0x8004c08000040L) != 0L)
            return 63;
         if ((active0 & 0x20000L) != 0L)
            return 19;
         return -1;
      case 3:
         if ((active0 & 0x3470000000000L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 3;
            return 19;
         }
         if ((active0 & 0x8010a04000L) != 0L)
            return 63;
         if ((active0 & 0x1f040010c44d3080L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 3;
            return 63;
         }
         if ((active0 & 0x380000000000L) != 0L)
            return 19;
         return -1;
      case 4:
         if ((active0 & 0x1a040010404d3000L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 4;
            return 63;
         }
         if ((active0 & 0x3470000000000L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 4;
            return 19;
         }
         if ((active0 & 0x500000084000080L) != 0L)
            return 63;
         return -1;
      case 5:
         if ((active0 & 0x40010404d3000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 136;
               jjmatchedPos = 5;
            }
            return 63;
         }
         if ((active0 & 0x1a00000000000000L) != 0L)
            return 63;
         if ((active0 & 0x3040000000000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 137;
               jjmatchedPos = 5;
            }
            return 19;
         }
         if ((active0 & 0x430000000000L) != 0L)
            return 19;
         return -1;
      case 6:
         if ((active0 & 0x3020000000000L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 6;
            return 19;
         }
         if ((active0 & 0x4001040013000L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 6;
            return 63;
         }
         if ((active0 & 0x4c0000L) != 0L)
            return 63;
         if ((active0 & 0x40000000000L) != 0L)
            return 19;
         return -1;
      case 7:
         if ((active0 & 0x4001000003000L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 7;
            return 63;
         }
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 7;
            return 19;
         }
         if ((active0 & 0x40010000L) != 0L)
            return 63;
         if ((active0 & 0x3000000000000L) != 0L)
            return 19;
         return -1;
      case 8:
         if ((active0 & 0x4001000003000L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 8;
            return 63;
         }
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 8;
            return 19;
         }
         return -1;
      case 9:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 9;
            return 19;
         }
         if ((active0 & 0x3000L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 9;
            return 63;
         }
         if ((active0 & 0x4001000000000L) != 0L)
            return 63;
         return -1;
      case 10:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 10;
            return 63;
         }
         if ((active0 & 0x2000L) != 0L)
            return 63;
         if ((active0 & 0x20000000000L) != 0L)
            return 19;
         return -1;
      case 11:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 11;
            return 63;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 37:
         return jjMoveStringLiteralDfa1_0(0x3000000000000L);
      case 39:
         return jjStartNfaWithStates_0(0, 126, 62);
      case 45:
         return jjMoveStringLiteralDfa1_0(0xff0000000000L);
      case 59:
         return jjStopAtPos(0, 127);
      case 64:
         return jjStartNfaWithStates_0(0, 135, 19);
      case 92:
         return jjMoveStringLiteralDfa1_0(0x2020128000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x800000100040000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x3cc0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x200000000014000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x8000080000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x100L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x600000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x1000001000000000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa1_0(0x800000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x1000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x6000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x8000000L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa1_0(0x10000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x4640000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x50c000800000200L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x80000000L);
      default :
         return jjMoveNfa_0(2, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, 0L, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x40L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000L);
      case 68:
      case 100:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(1, 10, 63);
         else if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x3080000020000L);
      case 69:
      case 101:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(1, 20, 19);
         return jjMoveStringLiteralDfa2_0(active0, 0x200000840210000L);
      case 72:
      case 104:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(1, 9, 63);
         break;
      case 73:
      case 105:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 37, 19);
         return jjMoveStringLiteralDfa2_0(active0, 0xc00000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000040080L);
      case 77:
      case 109:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000400000000L);
      case 78:
      case 110:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 47, 19);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000003000L);
      case 80:
      case 112:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(1, 11, 63);
         return jjMoveStringLiteralDfa2_0(active0, 0x100030000000000L);
      case 81:
      case 113:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(1, 29, 19);
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L);
      case 83:
      case 115:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(1, 8, 63);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(1, 24, 63);
         else if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x800040080000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x4010004000L);
      case 86:
      case 118:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(1, 25, 63);
         break;
      case 87:
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x108000080000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x30000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L);
      case 68:
      case 100:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(2, 27, 63);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L);
      case 69:
      case 101:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 17, 19);
         return jjMoveStringLiteralDfa3_0(active0, 0x3008000000080L);
      case 70:
      case 102:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 34, 63);
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x90040000L);
      case 76:
      case 108:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 51, 63);
         return jjMoveStringLiteralDfa3_0(active0, 0x100001000a00000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000004000L);
      case 78:
      case 110:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 38, 63);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x400080000000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000083000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x4400000000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000410000L);
      case 84:
      case 116:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(2, 6, 63);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(2, 35, 63);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x40080L);
      case 67:
      case 99:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 39, 63);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000010000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x304400044000000L);
      case 76:
      case 108:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 63);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 44, 19);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L);
      case 80:
      case 112:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 14, 63);
         else if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 21, 63);
         break;
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x400070000000000L);
      case 84:
      case 116:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 63);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 43, 19);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 45, 19);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa4_0(active0, 0x3000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x1030000080000L);
      case 69:
      case 101:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 58, 63);
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L);
      case 71:
      case 103:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 31, 63);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000L);
      case 82:
      case 114:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 7, 63);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 26, 63);
         return jjMoveStringLiteralDfa5_0(active0, 0x1800000000010000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x1040040000L);
      case 84:
      case 116:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 56, 63);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000L);
      case 69:
      case 101:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 57, 63);
         return jjMoveStringLiteralDfa6_0(active0, 0x40000L);
      case 70:
      case 102:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 46, 19);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x90000L);
      case 77:
      case 109:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x401000L);
      case 84:
      case 116:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 59, 63);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 60, 63);
         return jjMoveStringLiteralDfa6_0(active0, 0x4001040000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000002000L);
      case 78:
      case 110:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 19, 63);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x2001000000000L);
      case 83:
      case 115:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(6, 18, 63);
         break;
      case 84:
      case 116:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 42, 19);
         break;
      case 89:
      case 121:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 22, 63);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000L);
      case 69:
      case 101:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(7, 16, 63);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 49, 19);
         break;
      case 70:
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000002000L);
      case 82:
      case 114:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(7, 30, 63);
         break;
      case 84:
      case 116:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 48, 19);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000L);
      case 69:
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 36, 63);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 50, 63);
         break;
      case 76:
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000L);
      case 69:
      case 101:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 41, 19);
         break;
      case 76:
      case 108:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(10, 13, 63);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 76:
      case 108:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(12, 12, 63);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 62;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0xf7fffcfeffffd9ffL & l) != 0L)
                  {
                     if (kind > 137)
                        kind = 137;
                     jjCheckNAdd(19);
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 125)
                        kind = 125;
                  }
                  if (curChar == 39)
                     jjCheckNAddStates(4, 7);
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 17;
                  else if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 13;
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 6;
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 3;
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 63:
                  if ((0xf7fffcfeffffd9ffL & l) != 0L)
                  {
                     if (kind > 137)
                        kind = 137;
                     jjCheckNAdd(19);
                  }
                  else if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(8, 11);
                  else if (curChar == 40)
                  {
                     if (kind > 64)
                        kind = 64;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAddTwoStates(59, 61);
                  }
                  else if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(56, 57);
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 60;
                  else if (curChar == 61)
                  {
                     if (kind > 63)
                        kind = 63;
                  }
                  else if (curChar == 44)
                     jjCheckNAddTwoStates(44, 45);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(12, 15);
                  else if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(37, 38);
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 54;
                  else if (curChar == 61)
                  {
                     if (kind > 61)
                        kind = 61;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(16, 20);
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 41;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(21, 23);
                  break;
               case 62:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(4, 7);
                  else if (curChar == 39)
                  {
                     if (kind > 138)
                        kind = 138;
                  }
                  if ((0xf7fffcfeffffd9ffL & l) != 0L)
                  {
                     if (kind > 137)
                        kind = 137;
                     jjCheckNAdd(19);
                  }
                  break;
               case 0:
                  if ((0xf7fffcfeffffd9ffL & l) != 0L)
                  {
                     if (kind > 137)
                        kind = 137;
                     jjCheckNAdd(19);
                  }
                  if (curChar == 45)
                  {
                     if (kind > 3)
                        kind = 3;
                     jjCheckNAdd(1);
                  }
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAdd(1);
                  break;
               case 3:
                  if (curChar != 33)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAdd(4);
                  break;
               case 5:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 7:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 8:
                  if (curChar == 42)
                     jjCheckNAddStates(24, 26);
                  break;
               case 9:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(10, 8);
                  break;
               case 10:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(10, 8);
                  break;
               case 11:
                  if (curChar == 47 && kind > 5)
                     kind = 5;
                  break;
               case 12:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 13:
                  if (curChar != 62)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(14);
                  break;
               case 14:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(14);
                  break;
               case 15:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 16:
                  if ((0x2400L & l) != 0L && kind > 125)
                     kind = 125;
                  break;
               case 17:
                  if (curChar == 10 && kind > 125)
                     kind = 125;
                  break;
               case 18:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if ((0xf7fffcfeffffd9ffL & l) == 0L)
                     break;
                  if (kind > 137)
                     kind = 137;
                  jjCheckNAdd(19);
                  break;
               case 20:
               case 23:
                  if (curChar == 39)
                     jjCheckNAddStates(4, 7);
                  break;
               case 21:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(4, 7);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(4, 7);
                  break;
               case 30:
                  if (curChar == 39 && kind > 138)
                     kind = 138;
                  break;
               case 32:
                  jjAddStates(27, 28);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(21, 23);
                  break;
               case 37:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(37, 38);
                  break;
               case 38:
                  if (curChar == 61 && kind > 61)
                     kind = 61;
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(16, 20);
                  break;
               case 41:
                  if (curChar == 58)
                     jjCheckNAddStates(16, 20);
                  break;
               case 42:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (curChar == 44)
                     jjCheckNAddTwoStates(44, 45);
                  break;
               case 44:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(44, 45);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(29, 33);
                  break;
               case 47:
                  if (curChar == 58)
                     jjCheckNAddStates(29, 33);
                  break;
               case 48:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(49, 50);
                  break;
               case 50:
                  if (curChar == 61 && kind > 63)
                     kind = 63;
                  break;
               case 51:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(8, 11);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(12, 15);
                  break;
               case 54:
                  if (curChar == 58)
                     jjCheckNAddStates(12, 15);
                  break;
               case 55:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(56, 57);
                  break;
               case 57:
                  if (curChar == 40 && kind > 64)
                     kind = 64;
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 136)
                     kind = 136;
                  jjCheckNAddTwoStates(59, 61);
                  break;
               case 60:
                  if (curChar != 58)
                     break;
                  if (kind > 136)
                     kind = 136;
                  jjCheckNAddTwoStates(59, 61);
                  break;
               case 61:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if (kind > 137)
                     kind = 137;
                  jjCheckNAdd(19);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAddStates(34, 51);
                  }
                  else if (curChar == 96)
                     jjCheckNAddTwoStates(32, 33);
                  break;
               case 63:
                  if (kind > 137)
                     kind = 137;
                  jjCheckNAdd(19);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAddTwoStates(59, 61);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(12, 15);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(16, 20);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(21, 23);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAddStates(52, 54);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(55, 59);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(60, 65);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(66, 69);
                  break;
               case 62:
                  if (kind > 137)
                     kind = 137;
                  jjCheckNAdd(19);
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(4, 7);
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 24;
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 0:
               case 19:
                  if (kind > 137)
                     kind = 137;
                  jjCheckNAdd(19);
                  break;
               case 1:
                  if (kind > 3)
                     kind = 3;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if (kind > 4)
                     kind = 4;
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 7:
                  jjCheckNAddTwoStates(7, 8);
                  break;
               case 9:
               case 10:
                  jjCheckNAddTwoStates(10, 8);
                  break;
               case 21:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(4, 7);
                  break;
               case 22:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if ((0x14404410144044L & l) != 0L)
                     jjCheckNAddStates(4, 7);
                  break;
               case 24:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 25:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 27:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 28:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(4, 7);
                  break;
               case 29:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 31:
                  if (curChar == 96)
                     jjCheckNAddTwoStates(32, 33);
                  break;
               case 32:
                  if ((0xfffffffeffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(32, 33);
                  break;
               case 33:
                  if (curChar == 96 && kind > 139)
                     kind = 139;
                  break;
               case 34:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 136)
                     kind = 136;
                  jjCheckNAddStates(34, 51);
                  break;
               case 35:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(66, 69);
                  break;
               case 36:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(21, 23);
                  break;
               case 39:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(60, 65);
                  break;
               case 40:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(16, 20);
                  break;
               case 45:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(70, 75);
                  break;
               case 46:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(29, 33);
                  break;
               case 52:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(55, 59);
                  break;
               case 53:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(12, 15);
                  break;
               case 58:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 136)
                     kind = 136;
                  jjCheckNAddStates(52, 54);
                  break;
               case 59:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 136)
                     kind = 136;
                  jjCheckNAddTwoStates(59, 61);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
               case 19:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 137)
                     kind = 137;
                  jjCheckNAdd(19);
                  break;
               case 63:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 137)
                     kind = 137;
                  jjCheckNAdd(19);
                  break;
               case 62:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 137)
                        kind = 137;
                     jjCheckNAdd(19);
                  }
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(4, 7);
                  break;
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 137)
                     kind = 137;
                  jjCheckNAdd(19);
                  break;
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 7:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 9:
               case 10:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(10, 8);
                  break;
               case 21:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(4, 7);
                  break;
               case 32:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(27, 28);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 62 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 59:
         return jjStopAtPos(0, 52);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 53)
                        kind = 53;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 53)
                     kind = 53;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_6(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_6(int pos, long active0, long active1)
{
   return jjMoveNfa_6(jjStopStringLiteralDfa_6(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_6()
{
   switch(curChar)
   {
      case 39:
         return jjStopAtPos(0, 83);
      case 92:
         return jjMoveStringLiteralDfa1_6(0x60000L);
      default :
         return jjMoveNfa_6(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_6(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 39:
         if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(1, 82);
         break;
      case 92:
         if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(1, 81);
         break;
      default :
         break;
   }
   return jjStartNfa_6(0, 0L, active1);
}
private int jjMoveNfa_6(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 84)
                        kind = 84;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 84)
                     kind = 84;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_10(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_10(int pos, long active0, long active1)
{
   return jjMoveNfa_10(jjStopStringLiteralDfa_10(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_10()
{
   switch(curChar)
   {
      case 123:
         return jjStopAtPos(0, 105);
      case 125:
         return jjStopAtPos(0, 106);
      default :
         return jjMoveNfa_10(0, 0);
   }
}
private int jjMoveNfa_10(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 107)
                     kind = 107;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_5(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_5(int pos, long active0, long active1)
{
   return jjMoveNfa_5(jjStopStringLiteralDfa_5(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_5(0x4000L);
      default :
         return jjMoveNfa_5(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_5(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(1, 78);
         break;
      default :
         break;
   }
   return jjStartNfa_5(0, 0L, active1);
}
private int jjMoveNfa_5(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 79)
                        kind = 79;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 79)
                     kind = 79;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_4()
{
   return jjMoveNfa_4(0, 0);
}
private int jjMoveNfa_4(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 76)
                        kind = 76;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 76)
                     kind = 76;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_13()
{
   return 1;
}
private final int jjStopStringLiteralDfa_3(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0, long active1)
{
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 39:
         return jjStopAtPos(0, 65);
      case 45:
         return jjMoveStringLiteralDfa1_3(0x100L);
      case 47:
         return jjMoveStringLiteralDfa1_3(0x200L);
      case 59:
         return jjStopAtPos(0, 71);
      case 96:
         return jjStopAtPos(0, 66);
      case 123:
         return jjStopAtPos(0, 69);
      case 125:
         return jjStopAtPos(0, 70);
      default :
         return jjMoveNfa_3(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_3(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(1, 73);
         break;
      case 45:
         if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(1, 72);
         break;
      default :
         break;
   }
   return jjStartNfa_3(0, 0L, active1);
}
private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 18;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(76, 79);
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 74)
                        kind = 74;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 74)
                     kind = 74;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(76, 79);
                  break;
               case 4:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 7:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 8:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 17:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 68)
                     kind = 68;
                  jjstateSet[jjnewStateCnt++] = 17;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 6:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 10:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 11:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 12:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 15:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 16:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 18 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   6, 7, 10, 11, 21, 22, 29, 30, 43, 49, 50, 51, 53, 55, 56, 57, 
   40, 42, 43, 50, 51, 36, 37, 38, 8, 9, 11, 32, 33, 43, 46, 48, 
   49, 50, 35, 36, 37, 38, 39, 40, 42, 43, 50, 52, 53, 55, 56, 57, 
   58, 59, 61, 51, 58, 59, 61, 52, 53, 55, 56, 57, 39, 40, 42, 43, 
   50, 51, 35, 36, 37, 38, 43, 45, 46, 48, 49, 50, 4, 5, 8, 9, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, "\47", "\73", null, null, null, null, null, null, null, "\100", null, null, 
null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "SQL_START",
   "SQL_END",
   "PIG_START",
   "SINGLE_LINE_COMMENT",
   "MULTI_LINE_COMMENT",
   "IN_STRING",
   "IN_COMMAND",
   "GENERATE",
   "SCHEMA_DEFINITION",
   "BAG_CONSTANT",
   "IN_BLOCK",
   "IN_DOUBLE_QUOTED_STRING",
   "PIG_END",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, 1, 2, -1, -1, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 7, 9, 8, 11, -1, 13, 4, 5, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 9, 4, 5, 6, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, 9, 8, -1, -1, 6, 7, 4, 5, -1, -1, -1, -1, -1, -1, 0, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x87ffffffffffc1L, 0xf000000000000000L, 0xf80L, 
};
static final long[] jjtoSkip = {
   0x3eL, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0xff78000000000000L, 0xfffffffffffffffL, 0x0L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[62];
private final int[] jjstateSet = new int[124];
private final StringBuffer jjimage = new StringBuffer();
private StringBuffer image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public PigScriptParserTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public PigScriptParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 62; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 14 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   if (jjmatchedPos < 0)
   {
      if (image == null)
         curTokenImage = "";
      else
         curTokenImage = image.toString();
      beginLine = endLine = input_stream.getBeginLine();
      beginColumn = endColumn = input_stream.getBeginColumn();
   }
   else
   {
      String im = jjstrLiteralImages[jjmatchedKind];
      curTokenImage = (im == null) ? input_stream.GetImage() : im;
      beginLine = input_stream.getBeginLine();
      beginColumn = input_stream.getBeginColumn();
      endLine = input_stream.getEndLine();
      endColumn = input_stream.getEndColumn();
   }
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100000200L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 54)
         {
            jjmatchedKind = 54;
         }
         break;
       case 2:
         jjmatchedKind = 55;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 75)
         {
            jjmatchedKind = 75;
         }
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         if (jjmatchedPos == 0 && jjmatchedKind > 77)
         {
            jjmatchedKind = 77;
         }
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         if (jjmatchedPos == 0 && jjmatchedKind > 80)
         {
            jjmatchedKind = 80;
         }
         break;
       case 6:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_6();
         if (jjmatchedPos == 0 && jjmatchedKind > 85)
         {
            jjmatchedKind = 85;
         }
         break;
       case 7:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_7();
         if (jjmatchedPos == 0 && jjmatchedKind > 89)
         {
            jjmatchedKind = 89;
         }
         break;
       case 8:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_8();
         if (jjmatchedPos == 0 && jjmatchedKind > 97)
         {
            jjmatchedKind = 97;
         }
         break;
       case 9:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_9();
         if (jjmatchedPos == 0 && jjmatchedKind > 104)
         {
            jjmatchedKind = 104;
         }
         break;
       case 10:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_10();
         if (jjmatchedPos == 0 && jjmatchedKind > 108)
         {
            jjmatchedKind = 108;
         }
         break;
       case 11:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_11();
         if (jjmatchedPos == 0 && jjmatchedKind > 119)
         {
            jjmatchedKind = 119;
         }
         break;
       case 12:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_12();
         if (jjmatchedPos == 0 && jjmatchedKind > 123)
         {
            jjmatchedKind = 123;
         }
         break;
       case 13:
         jjmatchedKind = 124;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_13();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 53 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                              secondary_prompt();
         break;
      case 65 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
               prevState = PIG_START;
         break;
      case 66 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
               prevState = PIG_START;
         break;
      case 67 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                         prevState = PIG_START;
         break;
      case 68 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                                                                                         prevState = PIG_START;
         break;
      case 69 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
               pigBlockLevel = 1;
         break;
      case 70 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
               if (true) throw new TokenMgrError("Unmatched '}'", TokenMgrError.LEXICAL_ERROR);
         break;
      case 72 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                prevState = PIG_START;
         break;
      case 73 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                prevState = PIG_START;
         break;
      case 74 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                  secondary_prompt();
         break;
      case 76 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                  SwitchTo(prevState); if(prevState != DEFAULT) secondary_prompt();
         break;
      case 78 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                SwitchTo(prevState);
         break;
      case 79 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                  secondary_prompt();
         break;
      case 83 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                SwitchTo(prevState);
         break;
      case 84 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                  secondary_prompt();
         break;
      case 87 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                SwitchTo(prevState);
         break;
      case 88 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                  secondary_prompt();
         break;
      case 90 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
        bagConstantLevel++;
        prevState = getState(prevState);
        saveState(prevState);
        prevState = GENERATE;
         break;
      case 91 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
        prevState = getState(prevState);
        saveState(prevState);
        prevState = GENERATE;
         break;
      case 92 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
        prevState = getState(prevState);
        saveState(prevState);
        prevState = GENERATE;
         break;
      case 93 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
        prevState = getState(prevState);
        saveState(prevState);
        prevState = GENERATE;
         break;
      case 94 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
        prevState = getState(prevState);
        saveState(prevState);
        prevState = GENERATE;
         break;
      case 95 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
        prevState = getState(prevState);
        if(prevState == PIG_START) {
            input_stream.backup(1);
            image.deleteCharAt(image.length()-1);
        }
        SwitchTo(prevState);
         break;
      case 96 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                  secondary_prompt();
         break;
      case 98 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
           tupleSchemaLevel++;
         break;
      case 99 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
        if ((tupleSchemaLevel == 0) && (bagSchemaLevel == 0)) {
        // This means parenthesis is not from this schema_def.
        // Putting back ")" although others do not check parenthesis at this time.
        // This is a bandaid workaround for the issue with inline-op which
        // also uses parenthesis.
        // Real fix would be to move out of using this javacc parser. (PIG-2597)
            input_stream.backup(1);
            image.deleteCharAt(image.length()-1);
            SwitchTo(prevState);
        }
        tupleSchemaLevel--; if ((tupleSchemaLevel == 0) && (bagSchemaLevel == 0)) SwitchTo(prevState);
         break;
      case 100 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
           bagSchemaLevel++;
         break;
      case 101 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
           bagSchemaLevel--; if ((tupleSchemaLevel == 0) && (bagSchemaLevel == 0)) SwitchTo(prevState);
         break;
      case 102 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
        if ((tupleSchemaLevel == 0) && (bagSchemaLevel == 0)) {
            input_stream.backup(1);
            image.deleteCharAt(image.length()-1);
            SwitchTo(prevState);
        }
         break;
      case 103 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                  secondary_prompt();
         break;
      case 105 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
           bagConstantLevel++;
         break;
      case 106 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
           bagConstantLevel--; if (bagConstantLevel == 0) SwitchTo(prevState);
         break;
      case 107 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                  secondary_prompt();
         break;
      case 109 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                prevState = IN_BLOCK;
         break;
      case 110 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                         prevState = IN_BLOCK;
         break;
      case 111 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                                                                                        prevState = IN_BLOCK;
         break;
      case 112 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
               pigBlockLevel++;
         break;
      case 113 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                     pigBlockLevel--; if (pigBlockLevel == 0) SwitchTo(PIG_END);
         break;
      case 114 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
               prevState = IN_BLOCK;
         break;
      case 115 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
               prevState = IN_BLOCK;
         break;
      case 116 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                prevState = IN_BLOCK;
         break;
      case 117 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                prevState = IN_BLOCK;
         break;
      case 118 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                  secondary_prompt();
         break;
      case 121 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
             SwitchTo(prevState);
         break;
      case 122 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                              secondary_prompt();
         break;
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 55 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                       matchedToken.image = image.toString();
         break;
      case 124 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                        matchedToken.image = image.toString();
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
