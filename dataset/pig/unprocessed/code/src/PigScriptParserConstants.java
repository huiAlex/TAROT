/* Generated By:JavaCC: Do not edit this line. PigScriptParserConstants.java */
package org.apache.pig.tools.pigscript.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface PigScriptParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int CAT = 6;
  /** RegularExpression Id. */
  int CLEAR = 7;
  /** RegularExpression Id. */
  int FS = 8;
  /** RegularExpression Id. */
  int SH = 9;
  /** RegularExpression Id. */
  int CD = 10;
  /** RegularExpression Id. */
  int COPY = 11;
  /** RegularExpression Id. */
  int COPYFROMLOCAL = 12;
  /** RegularExpression Id. */
  int COPYTOLOCAL = 13;
  /** RegularExpression Id. */
  int DUMP = 14;
  /** RegularExpression Id. */
  int DUMP_SHORT = 15;
  /** RegularExpression Id. */
  int DESCRIBE = 16;
  /** RegularExpression Id. */
  int DESCRIBE_SHORT = 17;
  /** RegularExpression Id. */
  int ALIASES = 18;
  /** RegularExpression Id. */
  int EXPLAIN = 19;
  /** RegularExpression Id. */
  int EXPLAIN_SHORT = 20;
  /** RegularExpression Id. */
  int HELP = 21;
  /** RegularExpression Id. */
  int HISTORY = 22;
  /** RegularExpression Id. */
  int KILL = 23;
  /** RegularExpression Id. */
  int LS = 24;
  /** RegularExpression Id. */
  int MOVE = 25;
  /** RegularExpression Id. */
  int MKDIR = 26;
  /** RegularExpression Id. */
  int PWD = 27;
  /** RegularExpression Id. */
  int QUIT = 28;
  /** RegularExpression Id. */
  int QUIT_SHORT = 29;
  /** RegularExpression Id. */
  int REGISTER = 30;
  /** RegularExpression Id. */
  int USING = 31;
  /** RegularExpression Id. */
  int AS = 32;
  /** RegularExpression Id. */
  int REMOVE = 33;
  /** RegularExpression Id. */
  int REMOVEFORCE = 34;
  /** RegularExpression Id. */
  int SET = 35;
  /** RegularExpression Id. */
  int ILLUSTRATE = 36;
  /** RegularExpression Id. */
  int ILLUSTRATE_SHORT = 37;
  /** RegularExpression Id. */
  int RUN = 38;
  /** RegularExpression Id. */
  int EXEC = 39;
  /** RegularExpression Id. */
  int PARAM = 40;
  /** RegularExpression Id. */
  int PARAM_FILE = 41;
  /** RegularExpression Id. */
  int SCRIPT = 42;
  /** RegularExpression Id. */
  int DOT = 43;
  /** RegularExpression Id. */
  int XML = 44;
  /** RegularExpression Id. */
  int OUT = 45;
  /** RegularExpression Id. */
  int BRIEF = 46;
  /** RegularExpression Id. */
  int N = 47;
  /** RegularExpression Id. */
  int PIGDEFAULT = 48;
  /** RegularExpression Id. */
  int DECLARE = 49;
  /** RegularExpression Id. */
  int SCRIPT_DONE = 50;
  /** RegularExpression Id. */
  int SQL = 55;
  /** RegularExpression Id. */
  int PIG = 124;
  /** RegularExpression Id. */
  int EOL = 125;
  /** RegularExpression Id. */
  int QUOTE = 126;
  /** RegularExpression Id. */
  int SEMICOLON = 127;
  /** RegularExpression Id. */
  int LETTER = 128;
  /** RegularExpression Id. */
  int DIGIT = 129;
  /** RegularExpression Id. */
  int SPECIALCHAR = 130;
  /** RegularExpression Id. */
  int FSSPECIALCHAR = 131;
  /** RegularExpression Id. */
  int FLOAT = 132;
  /** RegularExpression Id. */
  int INTEGER = 133;
  /** RegularExpression Id. */
  int NUMBER = 134;
  /** RegularExpression Id. */
  int PREVREL = 135;
  /** RegularExpression Id. */
  int IDENTIFIER = 136;
  /** RegularExpression Id. */
  int PATH = 137;
  /** RegularExpression Id. */
  int QUOTEDSTRING = 138;
  /** RegularExpression Id. */
  int SHELLCMD = 139;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int SQL_START = 1;
  /** Lexical state. */
  int SQL_END = 2;
  /** Lexical state. */
  int PIG_START = 3;
  /** Lexical state. */
  int SINGLE_LINE_COMMENT = 4;
  /** Lexical state. */
  int MULTI_LINE_COMMENT = 5;
  /** Lexical state. */
  int IN_STRING = 6;
  /** Lexical state. */
  int IN_COMMAND = 7;
  /** Lexical state. */
  int GENERATE = 8;
  /** Lexical state. */
  int SCHEMA_DEFINITION = 9;
  /** Lexical state. */
  int BAG_CONSTANT = 10;
  /** Lexical state. */
  int IN_BLOCK = 11;
  /** Lexical state. */
  int IN_DOUBLE_QUOTED_STRING = 12;
  /** Lexical state. */
  int PIG_END = 13;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "<token of kind 3>",
    "<token of kind 4>",
    "<token of kind 5>",
    "\"cat\"",
    "\"clear\"",
    "\"fs\"",
    "\"sh\"",
    "\"cd\"",
    "\"cp\"",
    "\"copyFromLocal\"",
    "\"copyToLocal\"",
    "\"dump\"",
    "\"\\\\d\"",
    "\"describe\"",
    "\"\\\\de\"",
    "\"aliases\"",
    "\"explain\"",
    "\"\\\\e\"",
    "\"help\"",
    "\"history\"",
    "\"kill\"",
    "\"ls\"",
    "\"mv\"",
    "\"mkdir\"",
    "\"pwd\"",
    "\"quit\"",
    "\"\\\\q\"",
    "\"register\"",
    "\"using\"",
    "\"as\"",
    "\"rm\"",
    "\"rmf\"",
    "\"set\"",
    "\"illustrate\"",
    "\"\\\\i\"",
    "\"run\"",
    "\"exec\"",
    "\"-param\"",
    "\"-param_file\"",
    "\"-script\"",
    "\"-dot\"",
    "\"-xml\"",
    "\"-out\"",
    "\"-brief\"",
    "\"-n\"",
    "\"%default\"",
    "\"%declare\"",
    "\"scriptDone\"",
    "\"sql\"",
    "\";\"",
    "<token of kind 53>",
    "<token of kind 54>",
    "\"\"",
    "\"split\"",
    "\"define\"",
    "\"store\"",
    "\"assert\"",
    "\"import\"",
    "<token of kind 61>",
    "<token of kind 62>",
    "<token of kind 63>",
    "<token of kind 64>",
    "\"\\\'\"",
    "\"`\"",
    "<token of kind 67>",
    "<token of kind 68>",
    "\"{\"",
    "\"}\"",
    "\";\"",
    "\"--\"",
    "\"/*\"",
    "<token of kind 74>",
    "<token of kind 75>",
    "<token of kind 76>",
    "<token of kind 77>",
    "\"*/\"",
    "<token of kind 79>",
    "<token of kind 80>",
    "\"\\\\\\\\\"",
    "\"\\\\\\\'\"",
    "\"\\\'\"",
    "<token of kind 84>",
    "<token of kind 85>",
    "\"\\\\`\"",
    "\"`\"",
    "<token of kind 88>",
    "<token of kind 89>",
    "\"{\"",
    "<token of kind 91>",
    "\"--\"",
    "\"/*\"",
    "\"\\\'\"",
    "\";\"",
    "<token of kind 96>",
    "<token of kind 97>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "<token of kind 102>",
    "<token of kind 103>",
    "<token of kind 104>",
    "\"{\"",
    "\"}\"",
    "<token of kind 107>",
    "<token of kind 108>",
    "\"\\\"\"",
    "<token of kind 110>",
    "<token of kind 111>",
    "\"{\"",
    "<token of kind 113>",
    "\"\\\'\"",
    "\"`\"",
    "\"--\"",
    "\"/*\"",
    "<token of kind 118>",
    "<token of kind 119>",
    "\"\\\\\\\"\"",
    "\"\\\"\"",
    "<token of kind 122>",
    "<token of kind 123>",
    "\"\"",
    "<EOL>",
    "\"\\\'\"",
    "\";\"",
    "<LETTER>",
    "<DIGIT>",
    "<SPECIALCHAR>",
    "<FSSPECIALCHAR>",
    "<FLOAT>",
    "<INTEGER>",
    "<NUMBER>",
    "\"@\"",
    "<IDENTIFIER>",
    "<PATH>",
    "<QUOTEDSTRING>",
    "<SHELLCMD>",
  };

}
