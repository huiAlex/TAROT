/**
 * A default implementation of Tuple. This class will be created by the DefaultTupleFactory.
 */

/**
     * Default constructor. This constructor is public so that hadoop can call it directly. However, inside pig you
     * should never be calling this function. Use TupleFactory instead.
     * Time complexity: O(1), after allocation
     */

/**
     * Construct a tuple with a known number of fields. Package level so that callers cannot directly invoke it.
     * Resulting tuple is filled pre-filled with null elements. Time complexity: O(N), after allocation
     *
     * @param size
     *            Number of fields to allocate in the tuple.
     */

/**
     * Construct a tuple from an existing list of objects. Package level so that callers cannot directly invoke it.
     * Time complexity: O(N) plus running time of input object iteration, after allocation
     * @param c
     *            List of objects to turn into a tuple.
     */

/**
     * Construct a tuple from an existing list of objects. Package level so that callers cannot directly invoke it.
     * Time complexity: O(1)
     *
     * @param c
     *            List of objects to turn into a tuple. This list will be kept as part of the tuple.
     * @param junk
     *            Just used to differentiate from the constructor above that copies the list.
     */

/**
     * Find the size of the tuple. Used to be called arity().
     *
     * @return number of fields in the tuple.
     */

/**
     * Get the value in a given field.
     *
     * @param fieldNum
     *            Number of the field to get the value for.
     * @return value, as an Object.
     *      *             if the field number is greater than or equal to the number of fields in the tuple.
     */

/**
     * Get all of the fields in the tuple as a list.
     *
     * @return List&lt;Object&gt; containing the fields of the tuple in order.
     */

/**
     * Set the value in a given field.
     *
     * @param fieldNum
     *            Number of the field to set the value for.
     * @param val
     *            Object to put in the indicated field.
     *      *             if the field number is greater than or equal to the number of fields in the tuple.
     */

/**
     * Append a field to a tuple. This method is not efficient as it may force copying of existing data in order to grow
     * the data structure. Whenever possible you should construct your Tuple with the newTuple(int) method and then fill
     * in the values with set(), rather than construct it with newTuple() and append values.
     *
     * @param val
     *            Object to append to the tuple.
     */

/**
     * Determine the size of tuple in memory. This is used by data bags to determine their memory size. This need not be
     * exact, but it should be a decent estimation.
     *
     * @return estimated memory size.
     */

/**
         * Compare two DefaultTuples as raw bytes. We assume the Tuples are NOT PigNullableWritable, so client classes
         * need to deal with Null and Index.
         */

/**
         * Compare two DefaultTuples as raw bytes.
         */

