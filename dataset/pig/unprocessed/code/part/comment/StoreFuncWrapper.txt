/**
 * Convenience class to extend when decorating a StoreFunc. It's not abstract so that it will fail
 * to compile if new methods get added to StoreFuncInterface. Subclasses must call the setStoreFunc
 * with an instance of StoreFuncInterface before other methods can be called. Not doing so will
 * result in an IllegalArgumentException when the method is called.
 */

/**
     * The wrapped StoreFuncInterface object must be set before method calls are made on this object.
     * Typically, this is done with via constructor, but often times the wrapped object can
     * not be properly initialized until later in the lifecycle of the wrapper object.
     * @param storeFunc
     */

/**
     * Returns a method in the call stack at the given depth. Depth 0 will return the method that
     * called this getMethodName, depth 1 the method that called it, etc...
     * @param depth
     * @return method name as String
     */

