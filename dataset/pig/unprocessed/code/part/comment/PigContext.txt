/**
     * a table mapping function names to function specs.
     */

/**
     * a table mapping names to streaming commands.
     */

/**
     * extends URLClassLoader to allow adding to classpath as new jars
     * are registered.
     */

/**
     * This method is created with the aim of unifying the Grunt and PigServer
     * approaches, so all common initializations can go in here.
     */

/**
     * calls: addScriptFile(path, new File(path)), ensuring that a given path is
     * added to the jar at most once.
     * @param path
     */

/**
     * this method adds script files that must be added to the shipped jar
     * named differently from their local fs path.
     * @param name  name in the jar
     * @param path  path on the local fs
     */

/**
     * Adds the specified path to the predeployed jars list. These jars will
     * never be included in generated job jar.
     * 
     * This can be called for jars that are pre-installed on the Hadoop
     * cluster to reduce the size of the job jar.
     */

/**
     * script files as name/file pairs to be added to the job jar
     * @return name/file pairs
     */

/**
     * Provides configuration information.
     *
     * @return - information about the configuration used to connect to
     *         execution engine
     */

/**
     * @deprecated use {@link #getProperties()} instead
     */

/**
     * Defines an alias for the given function spec. This
     * is useful for functions that require arguments to the
     * constructor.
     *
     * @param function - the new function alias to define.
     * @param functionSpec - the FuncSpec object representing the name of
     * the function class and any arguments to constructor.
     *
     */

/**
     * Defines an alias for the given streaming command.
     *
     * This is useful for complicated streaming command specs.
     *
     * @param alias - the new command alias to define.
     * @param command - the command
     */

/**
     * Returns the type of execution currently in effect.
     *
     * @return current execution type
     */

/**
     * Creates a Classloader based on the passed jarFile and any extra jar files.
     *
     * @param jarFile
     *            the jar file to be part of the newly created Classloader. This jar file plus any
     *            jars in the extraJars list will constitute the classpath.
     * @return the new Classloader.
     *      */

/**
     * A common Pig pattern for initializing objects via system properties is to support passing
     * something like this on the command line:
     * -Dpig.notification.listener=MyClass
     * -Dpig.notification.listener.arg=myConstructorStringArg
     *
     * This method will properly initialize the class with the args, if they exist.
     * @param conf
     * @param classParamKey the property used to identify the class
     * @param argParamKey the property used to identify the class args
     * @param clazz The class that is expected
     * @return  T
     */

/**
     * Get the {@link StreamingCommand} for the given alias.
     *
     * @param alias the alias for the StreamingCommand
     * @return StreamingCommand for the alias
     */

/**
     * Create a new {@link ExecutableManager} depending on the ExecType.
     *
     * @return a new {@link ExecutableManager} depending on the ExecType
     *      */

/**
     * Add a path to be skipped while automatically shipping binaries for
     * streaming.
     *
     * @param path path to be skipped
     */

/**
     * Get paths which are to skipped while automatically shipping binaries for
     * streaming.
     *
     * @return paths which are to skipped while automatically shipping binaries
     *         for streaming
     */

/**
     * Check the execution mode and return the appropriate error source
     *
     * @return error source
     */

