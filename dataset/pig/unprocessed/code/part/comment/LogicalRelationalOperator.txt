/**
 * Logical representation of relational operators.  Relational operators have
 * a schema.
 */

/**
     * Name of the customPartitioner if one is used, this is set to null otherwise.
     */

/**
     * A HashSet to indicate whether an option (such a Join Type) was pinned
     * by the user or can be chosen at runtime by the optimizer.
     */

/**
     * 
     * @param name of this operator
     * @param plan this operator is in
     */

/**
     * 
     * @param name of this operator
     * @param plan this operator is in
     * @param rp requested parallelism
     */

/**
     * Get the schema for the output of this relational operator.  This does
     * not merely return the schema variable.  If schema is not yet set, this
     * will attempt to construct it.  Therefore it is abstract since each
     * operator will need to construct its schema differently.
     * @return the schema
     *      */

/**
     * Reset the schema to null so that the next time getSchema is called
     * the schema will be regenerated from scratch.
     */

/**
     * Erase all cached uid, regenerate uid when we regenerating schema.
     * This process currently only used in ImplicitSplitInsert, which will
     * insert split and invalidate some uids in plan
     */

/**
     * Get the requestedParallelism for this operator.
     * @return requestedParallelsim
     */

/**
     * Get the alias of this operator.  That is, if the Pig Latin for this operator
     * was 'X = sort W by $0' then the alias will be X.  For store and split it will
     * be the alias being stored or split.  Note that because of this this alias
     * is not guaranteed to be unique to a single operator.
     * @return alias
     */

/**
     * Get the line number in the submitted Pig Latin script where this operator
     * occurred.
     * @return line number
     */

/**
     * Only to be used by unit tests.  This is a back door cheat to set the schema
     * without having to calculate it.  This should never be called by production
     * code, only by tests.
     * @param schema to set
     */

/**
     * Do some basic equality checks on two relational operators.  Equality
     * is defined here as having equal schemas and  predecessors that are equal.
     * This is intended to be used by operators' equals methods.
     * @param other LogicalRelationalOperator to compare predecessors against
     * @return true if the isEquals() methods of this node's predecessor(s) returns
     * true when invoked with other's predecessor(s).
     *      */

/**
     * In the case of an operation which manipualtes columns (such as a foreach or a join)
     * it is possible for multiple columns to have been derived from the same
     * column and thus have duplicate UID's. This detects that case and resets the uid.
     * See PIG-3020 and PIG-3093 for more information.
     * @param fss a list of LogicalFieldSchemas to check the uids of
     */

