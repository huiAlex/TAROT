/**
 * A represenation of a schema used to communicate with load and store functions.  This is
 * separate from {@link Schema}, which is an internal Pig representation of a schema.
 *  */

/**
     * Construct an empty ResourceSchema.
     */

/**
     * Construct a ResourceSchema from a {@link Schema}
     * @param pigSchema Schema to use
     */

/**
     * Construct a ResourceSchema from a {@link LogicalSchema}
     * @param pigSchema Schema to use
     */

/**
     * Only for use by Pig internal code.
     * Construct a ResourceSchema from a {@link Schema}
     * @param pigSchema Schema to use
     * @param sortInfo information on how data is sorted
     */

/**
     * Only for use by Pig internal code.
     * Construct a ResourceSchema from a {@link LogicalSchema}
     * @param pigSchema LogicalSchema to use
     * @param sortInfo information on how data is sorted
     */

/**
     * Get the version of this schema.
     * @return version
     */

/**
     * Get field schema for each field
     * @return array of field schemas.
     */

/**
     * Get all field names.
     * @return array of field names
     */

/**
     * Set all the fields.  If fields are not currently null the new fields will be silently
     * ignored.
     * @param fields to use as fields in this schema
     * @return this
     */

/**
     * Get the sort keys for this data.
     * @return array of ints.  Each integer in the array represents the field number.  So if the
     * schema of the data is (a, b, c, d) and the data is sorted on c, b, the returned sort keys
     * will be [2, 1].  Field numbers are zero based.  If the data is not sorted a zero length
     * array will be returned.
     */

/**
     * Set the sort keys for htis data.  If sort keys are not currently null the new sort keys
     * will be silently ignored.
     * @param sortKeys  Each integer in the array represents the field number.  So if the
     * schema of the data is (a, b, c, d) and the data is sorted on c, b, the sort keys
     * should be [2, 1].  Field numbers are zero based.
     * @return this
     */

/**
     * Get order for sort keys.
     * @return array of Order.  This array will be the same length as the int[] array returned by
     * {@link #getSortKeys}.
     */

/**
     * Set the order for each sort key.  If order is not currently null, new order will be
     * silently ignored.
     * @param sortKeyOrders array of Order.  Should be the same length as int[] passed to 
     * {@link #setSortKeys}.
     * @return this
     */

/**
     * Test whether two ResourceSchemas are the same.  Two schemas are said to be the same if they
     * are both null or 
     * have the same number of fields and for each field the name, type are the same.  For fields
     * that have may have schemas (i.e. tuples) both schemas be equal.  Field
     * descriptions are not used in testing equality.
     * @return true if equal according to the above definition, otherwise false.
     */

/**
         * Construct an empty field schema.
         */

/**
         * Construct using a {@link org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema} as the template.
         * @param fieldSchema fieldSchema to copy from
         */

/**
         * Construct using a {@link org.apache.pig.newplan.logical.relational.LogicalSchema.LogicalFieldSchema} as the template.
         * @param fieldSchema fieldSchema to copy from
         */

/**
         * Get the name of this field.
         * @return name
         */

/**
         * Set the name of this filed.
         * @param name new name
         * @return this
         */

/**
         * Get the type of this field.
         * @return type, as a {@link DataType} static final byte 
         */

/**
         * Set the type of this field
         * @param type new type
         * @return this
         */

/**
         * Get a free form text description of this field.
         * @return description
         */

/**
         * Set the description
         * @param description new description
         * @return this
         */

/**
         * Get the schema for this field. Type tuple/bag/map may have a schema.
         * @return schema
         */

/**
         * Set the schema for this field. Type tuple/bag/map may have a schema.
         * @param schema new schema
         * @return this
         */

