/**
 * Logical representation of expression operators.  Expression operators have
 * a data type and a uid.  Uid is a unique id for each expression.
 *
 */

/**
     *
     * @param name of the operator
     * @param plan LogicalExpressionPlan this is part of
     */

/**
     * This is a convenience method to avoid the side-effectful nature of getFieldSchema().
     * It simply returns whether or not fieldSchema is currently null.
     */

/**
     * Get the field schema for the output of this expression operator.  This does
     * not merely return the field schema variable.  If schema is not yet set, this
     * will attempt to construct it.  Therefore it is abstract since each
     * operator will need to construct its field schema differently.
     * @return the FieldSchema
     *      */

/**
     * Get the data type for this expression.
     * @return data type, one of the static bytes of DataType
     */

/**
     * Create the deep copy of this expression and add that into the passed
     * LogicalExpressionPlan Return the copy of this expression with updated
     * logical expression plan.
     * @param lgExpPlan LogicalExpressionPlan in which this expression will be added.
     * @return LogicalExpression with its own logical expression plan.
     *      */

/**
     * Erase all cached uid, regenerate uid when we regenerating schema.
     * This process currently only used in ImplicitSplitInsert, which will
     * insert split and invalidate some uids in plan
     */

