/**
 * A visitor to walk operators that contain a nested plan and translate project( * )
 * operators to a list of projection operators, i.e., 
 * project( * ) -> project(0), project(1), ... project(n-2), project(n-1)
 * If input schema is null, project(*) is not expanded.
 * It also expands project range ( eg $1 .. $5). It won't expand project-range-to-end
 * (eg $3 ..) if the input schema is null.
 * 
 */

/**
     * Expand plan into multiple plans if the plan contains a project star,
     * if there is no project star the returned list contains the plan argument.
     * @param plan
     * @return
     *      */

/**
     * Find project-star in foreach statement. The LOInnerLoad corresponding
     * to the project-star also needs to have a project-star
     * @param expPlan - expression plan
     * @param oldPos2Rel - inner relational plan of foreach
     * @return ProjectExpression that satisfies the conditions
     *      */

/**
     * expand this plan containing project star to multiple plans 
     * each projecting a single column
     * @param expPlan
     * @param proj
     * @return
     *      */

/**
     * Create new logical plan with a project that is attached to LogicalRelation
     * attachRel and projects i'th column from input
     * @param attachRel 
     * @param inputNum
     * @param colNum 
     * @return
     */

/**
     * if LogicalExpressionPlan argument has a project star output then
     * return it, otherwise return null
     * @param expPlan
     * @return
     *      */

