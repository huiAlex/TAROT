/**
 * Rules describe a pattern of operators.  They also reference a Transformer.
 * If the pattern of operators is found one or more times in the provided plan,
 * then the optimizer will use the associated Transformer to transform the
 * plan.
 * Note: the pattern matching logic implemented here has a limitation 
 * that it assumes that all the leaves in the pattern are siblings. See more 
 * detailed description here - https://issues.apache.org/jira/browse/PIG-1742
 * If new rules use patterns that don't work with this limitation, the pattern
 * match logic will need to be updated. 
 */

/**
     * Create this rule by using the default pattern that this rule provided
     * @param n Name of this rule
     * @param mandatory if it is set to false, this rule can be disabled by user
     */

/**
     * @param n Name of this rule
     * @param p Pattern to look for.
     */

/**
     * Build the pattern that this rule will look for
     * @return  the pattern to look for by this rule
     */

/**
     * Get the transformer for this rule.  Abstract because the rule
     * may want to choose how to instantiate the transformer.  
     * This should never return a cached transformer, it should
     * always return a fresh one with no state.
     * @return Transformer to use with this rule
     */

/**
     * Return the pattern to be matched for this rule
     * @return the pattern to be matched for this rule
     */

/**
     * Search for all the sub-plans that matches the pattern
     * defined by this rule. 
     * See class description above for limitations on the patterns supported.
     * @return A list of all matched sub-plans. The returned plans are
     *        partial views of the original OperatorPlan. Each is a 
     *        sub-set of the original plan and represents the same
     *        topology as the pattern, but operators in the returned plan  
     *        are the same objects as the original plan. Therefore, 
     *        a call getPlan() from any node in the return plan would 
     *        return the original plan.
     *        
     * @param plan the OperatorPlan to look for matches to the pattern
     */

/** 
     * Check if two operators match each other, we want to find matches
     * that don't share nodes
     */

/**
         * Check if the plan operator and its sub-tree has a match to the pattern 
         * operator and its sub-tree. This algorithm only search and return one match.
         * It doesn't recursively search for all possible matches. For example,
         * for a plan that looks like
         *                   join
         *                  /     \
         *                 load   load
         * if we are looking for join->load pattern, only one match will be returned instead
         * of two, so that the matched subsets don't share nodes.
         */

