/**
 * This operator is part of the RANK operator implementation.
 * It adds a local counter and a unique task id to each tuple.
 * There are 2 modes of operations: regular and dense.
 * The local counter is depends on the mode of operation.
 * With regular rank is considered duplicate rows while assigning
 * numbers to distinct values groups.
 * With dense rank counts the number of distinct values, without
 * considering duplicate rows. Depending on if it is considered.
 * the entire tuple (row number) or a by a set of columns (rank by).
 *
 * This Physical Operator relies on some specific MR class,
 * available at PigMapReduceCounter.
 **/

/**
     * In case of RANK BY, it could by dense or not.
     * Being a dense rank means to assign consecutive ranks
     * to different values.
     **/

/**
     * In case of simple RANK, namely row number mode
     * which is a consecutive number assigned to each tuple.
     **/

/**
     * Local counter for tuples on the same task.
     **/

/**
     * Task ID to label each tuple analyzed by the corresponding task
     **/

/**
     * Unique identifier that links POCounter and PORank,
     * through the global counter labeled with it.
     **/

/**
     * Add current task id and local counter value.
     * @param input from the previous output
     * @return  a tuple within two values prepended to the tuple
     * the task identifier and the local counter value.
     * Local counter value could be incremented by one (is a row number or dense rank)
     * or, could be incremented by the size of the bag on the previous tuple processed
     **/

/**
     *  Initialization step into the POCounter is to set
     *  up local counter to 1.
     **/

/**
     *  Sequential counter used at ROW NUMBER and RANK BY DENSE mode
     **/

/**
     *  Task ID: identifier of the task (map or reducer)
     **/

/**
     *  Dense Rank flag
     **/

/**
     *  Row number flag
     **/

/**
     *  Operation ID: identifier shared within the corresponding PORank
     **/

