/**
 * RANK operator implementation.
 * Operator Syntax:
 * 
 */

/**
     * A List within logical expression plans in case of RANK BY
     */

/**
     * A List within ascending columns on a RANK BY
     */

/**
     * In case of RANK BY, it could by dense or not.
     * Being a dense rank means to assign consecutive ranking
     * to different tuples.
     */

/**
     * In case of simple RANK, namely row number mode
     * which is a consecutive number assigned to each tuple.
     */

/**
     * This is a uid which has been generated for the rank column. It is
     * important to keep this so that the uid will be persistent between calls
     * of resetSchema and getSchema.
     */

/**
     * Get the schema for the output of LORank.
     * Composed by long value prepended to the
     * rest of the input schema
     * @return the schema
     *      */

/**
     * Get if it is a dense RANK BY
     * @return boolean
     */

/**
     * Set if it is a dense RANK BY
     * @param isDenseRank if is dense rank or not
     */

/**
     * Get if it is a simple RANK operation.
     * Which means a row number attached to each tuple.
     * @return boolean
     */

/**
     * Set if it is a simple RANK operation.
     * @param rowNumber if is a row number operation
     */

