/**
     * used for pattern matching
     * 
     * @param schema schema user specified in script, or null if not
     * specified.
     * @param plan logical plan this load is part of.
     */

/**
     * Used from the LogicalPlanBuilder
     *
     * @param loader FuncSpec for load function to use for this load.
     * @param schema schema user specified in script, or null if not specified.
     * @param plan logical plan this load is part of.
     * @param conf
     * @param loadFunc the LoadFunc that was instantiated from loader
     * @param signature the signature that will be passed to the LoadFunc
     */

/**
     * Get the schema for this load.  The schema will be either be what was
     * given by the user in the script or what the load functions getSchema
     * call returned.  Otherwise null will be returned, indicating that the
     * schema is unknown.
     * @return schema, or null if unknown
     */

/**
	 * This method will store the scriptSchema:Schema using ObjectSerializer to
	 * the current configuration.
	 * The schema can be retrieved by load functions or UDFs to know the schema
	 * the user entered in the as clause.
	 * The name format is:
	 * 
	 * 
	 * 
     * Note that this is not the schema the load function returns but will
	 * always be the as clause schema.
	 * That is a = LOAD 'input' as (a:chararray, b:chararray)
	 * The schema wil lbe (a:chararray, b:chararray)
	 * 
	 * 
	 * TODO Find better solution to make script schema available to LoadFunc see
	 * https://issues.apache.org/jira/browse/PIG-1717
	 */

