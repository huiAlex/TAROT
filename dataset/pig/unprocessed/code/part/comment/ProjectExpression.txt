/**
 * Projection of columns in an expression.
 *
 */

/**
     * In Foreach inner plan, a projection can be made on a relational operator, which may get reused.
     * However, the expression needs to be sticky to the operator on which the expression is projected.
     */

/**
     * Adds projection to the plan.
     * @param plan LogicalExpressionPlan this projection will be a part of
     * @param inputNum Input number this project references.
     * @param colNum Column number this project references.
     * @param attachedRelationalOp
     */

/**
     * Adds projection to the plan.
     * @param plan
     * @param inputNum
     * @param alias
     * @param attachedRelationalOp
     *      */

/**
     * Constructor for range projection
     * Adds projection to the plan.
     * The start and end alias/column-number should be set separately.
     * @param plan
     * @param inputNum
     * @param attachedRelationalOp
     */

/**
     * like a copy constructor, but with a plan argument
     * @param projExpr
     * @param plan
     */

/**
     * If there is an alias, finds the column number from it.
     *      */

/**
     * @link org.apache.pig.newplan.Operator#accept(org.apache.pig.newplan.PlanVisitor)
     */

/**
     * Input number this project references.  This is the input number for the
     * relational operator that contains this expression.  The count is zero
     * based.
     * @return input number
     */

/**
     * Column number this project references.  The column number is the column
     * in the relational operator that contains this expression.  The count
     * is zero based.
     * @return column number
     */

/**
     * Set the column number for this project.  This should only be called by
     * ProjectionPatcher.  Stupid Java needs friends.
     * @param colNum new column number for projection
     */

/**
     * Find the LogicalRelationalOperator that this projection refers to.
     * @return LRO this projection refers to
     *      */

/**
     * @return the startCol
     */

/**
     * @param startCol the startCol to set
     */

/**
     * @return the endCol
     */

/**
     * @param endCol the endCol to set
     */

/**
     * @param startAlias
     *      */

/**
     * @param endAlias
     *      */

