<Class>
    <Id>728</Id>
    <Package>org.apache.pig.impl.streaming</Package>
    <ClassName>InputHandler</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>InputHandler  /** 
 * {@link InputHandler} is responsible for handling the input to thePig-Streaming external command. The managed executable could be fed input in a  {@link InputType#SYNCHRONOUS}manner via its &lt;code&gt;stdin&lt;/code&gt; or in an  {@link InputType#ASYNCHRONOUS}manner via an external file which is subsequently read by the executable.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>serializer</FieldName>
            <FieldType>PigToStream</FieldType>
        </Field>
        <Field>
            <FieldName>newSerializer</FieldName>
            <FieldType>PigStreamingBase</FieldType>
        </Field>
        <Field>
            <FieldName>out</FieldName>
            <FieldType>OutputStream</FieldType>
        </Field>
        <Field>
            <FieldName>alreadyClosed</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getInputType</MethodName>
            <MethodComment>/** 
 * Get the handled &lt;code&gt;InputType&lt;/code&gt;
 * @return the handled &lt;code&gt;InputType&lt;/code&gt;
 */
</MethodComment>
            <ReturnType>InputType</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>putNext</MethodName>
            <MethodComment>/** 
 * Send the given input &lt;code&gt;Tuple&lt;/code&gt; to the managed executable.
 * @param t input &lt;code&gt;Tuple&lt;/code&gt;
 * @throws IOException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>close</MethodName>
            <MethodComment>/** 
 * Close the &lt;code&gt;InputHandler&lt;/code&gt; since there is no more input to be sent to the managed process.
 * @param process the managed process - this could be null in some caseslike when input is through files. In that case, the process would not have been exec'ed yet - if this method if overridden it is the responsibility of the implementer to check that the process is usable. The managed process object is supplied by the ExecutableManager to this call so that this method can check if the process is alive if it needs to know.
 * @throws IOException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>process</ParamName>
                    <ParamType>Process</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>bindTo</MethodName>
            <MethodComment>/** 
 * Bind the &lt;code&gt;InputHandler&lt;/code&gt; to the &lt;code&gt;OutputStream&lt;/code&gt; from which it reads input and sends it to the managed process.
 * @param os &lt;code&gt;OutputStream&lt;/code&gt; from which to read input data for themanaged process
 * @throws IOException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>os</ParamName>
                    <ParamType>OutputStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>