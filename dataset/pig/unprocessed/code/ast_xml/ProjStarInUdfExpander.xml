<Class>
    <Id>570</Id>
    <Package>org.apache.pig.newplan.logical.visitor</Package>
    <ClassName>ProjExpanderForNonForeach</ClassName>
    <SuperClass>LogicalExpressionVisitor</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>loGen</FieldName>
            <FieldType>LOGenerate</FieldType>
        </Field>
        <Field>
            <FieldName>innerRelPlan</FieldName>
            <FieldType>LogicalPlan</FieldType>
        </Field>
        <Field>
            <FieldName>oldPos2Rel</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>oldPos2Rel</FieldName>
            <FieldType>Integer</FieldType>
        </Field>
        <Field>
            <FieldName>proj2InpRel</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>proj2InpRel</FieldName>
            <FieldType>ProjectExpression</FieldType>
        </Field>
        <Field>
            <FieldName>foreach</FieldName>
            <FieldType>LOForEach</FieldType>
        </Field>
        <Field>
            <FieldName>expandedInLoads</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>expandedInLoads</FieldName>
            <FieldType>LOInnerLoad</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ProjStarInUdfExpander</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>plan</ParamName>
                    <ParamType>OperatorPlan</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getVisitor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>LogicalExpressionVisitor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>exprPlan</ParamName>
                    <ParamType>LogicalExpressionPlan</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>foreach</ParamName>
                    <ParamType>LOForEach</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LogicalPlan [innerPlan=foreach.getInnerPlan()]</InnerVar>
                <InnerVar>PlanWalker [newWalker=currentWalker.spawnChildWalker(innerPlan)]</InnerVar>
                <InnerVar>List&lt;Operator&gt; [feOutputs=innerPlan.getSinks()]</InnerVar>
                <InnerVar>LOGenerate [gen=null]</InnerVar>
                <InnerVar>List&lt;Operator&gt; [loGenPreds=innerPlan.getPredecessors(gen)]</InnerVar>
                <InnerVar>Map&lt;Integer,LogicalRelationalOperator&gt; [oldPos2Rel=new HashMap&lt;Integer,LogicalRelationalOperator&gt;()]</InnerVar>
                <InnerVar>Map&lt;ProjectExpression,LogicalRelationalOperator&gt; [proj2InpRel=new HashMap&lt;ProjectExpression,LogicalRelationalOperator&gt;()]</InnerVar>
                <InnerVar>List&lt;LOInnerLoad&gt; [expandedInLoads=new ArrayList&lt;LOInnerLoad&gt;()]</InnerVar>
                <InnerVar>Map&lt;LogicalRelationalOperator,Integer&gt; [rel2pos=new HashMap&lt;LogicalRelationalOperator,Integer&gt;()]</InnerVar>
                <InnerVar>List&lt;Operator&gt; [newGenPreds=innerPlan.getPredecessors(gen)]</InnerVar>
                <InnerVar>int [numNewGenPreds=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;pushWalker;[newWalker]</InnerMethodInvoke>
                <InnerMethodInvoke>currentWalker;walk;[this]</InnerMethodInvoke>
                <InnerMethodInvoke>null;popWalker;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>gen</ParamName>
                    <ParamType>LOGenerate</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ProjExpanderForForeach</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>p</ParamName>
                    <ParamType>OperatorPlan</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>loGen</ParamName>
                    <ParamType>LOGenerate</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>oldPos2Rel</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>proj2InpRel</ParamName>
                    <ParamType>ProjectExpression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>foreach</ParamName>
                    <ParamType>LOForEach</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>expandedInLoads</ParamName>
                    <ParamType>LOInnerLoad</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>func</ParamName>
                    <ParamType>UserFuncExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;Operator&gt; [inputs=new ArrayList&lt;Operator&gt;(plan.getSuccessors(func))]</InnerVar>
                <InnerVar>List&lt;Operator&gt; [expandedProjectStars=new ArrayList&lt;Operator&gt;()]</InnerVar>
                <InnerVar>List&lt;Operator&gt; [newExpandedProjects=new ArrayList&lt;Operator&gt;()]</InnerVar>
                <InnerVar>List&lt;Operator&gt; [newInputs=new ArrayList&lt;Operator&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>proj</ParamName>
                    <ParamType>ProjectExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>proj2InpRel;put;[proj, oldPos2Rel.get(proj.getInputNum())]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>expandProjectStar</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Operator</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>proj</ParamName>
                    <ParamType>ProjectExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Pair&lt;Integer,Integer&gt; [firstLastCols=ProjectStarExpanderUtil.getProjectStartEndCols((LogicalExpressionPlan)plan,proj)]</InnerVar>
                <InnerVar>int [firstProjCol=firstLastCols.first]</InnerVar>
                <InnerVar>int [lastProjCol=firstLastCols.second]</InnerVar>
                <InnerVar>List&lt;Operator&gt; [newProjects=new ArrayList&lt;Operator&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ProjExpanderForNonForeach</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>p</ParamName>
                    <ParamType>OperatorPlan</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>func</ParamName>
                    <ParamType>UserFuncExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;Operator&gt; [inputs=new ArrayList&lt;Operator&gt;(plan.getSuccessors(func))]</InnerVar>
                <InnerVar>List&lt;Operator&gt; [expandedProjectStars=new ArrayList&lt;Operator&gt;()]</InnerVar>
                <InnerVar>List&lt;Operator&gt; [newExpandedProjects=new ArrayList&lt;Operator&gt;()]</InnerVar>
                <InnerVar>List&lt;Operator&gt; [newInputs=new ArrayList&lt;Operator&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>expandProjectStar</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Operator</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>proj</ParamName>
                    <ParamType>ProjectExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Pair&lt;Integer,Integer&gt; [firstLastCols=ProjectStarExpanderUtil.getProjectStartEndCols((LogicalExpressionPlan)plan,proj)]</InnerVar>
                <InnerVar>int [firstProjCol=firstLastCols.first]</InnerVar>
                <InnerVar>int [lastProjCol=firstLastCols.second]</InnerVar>
                <InnerVar>List&lt;Operator&gt; [newProjects=new ArrayList&lt;Operator&gt;()]</InnerVar>
                <InnerVar>LogicalRelationalOperator [relOp=proj.getAttachedRelationalOp()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>