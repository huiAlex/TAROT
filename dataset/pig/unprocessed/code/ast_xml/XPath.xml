<Class>
    <Id>241</Id>
    <Package>org.apache.pig.piggybank.evaluation.xml</Package>
    <ClassName>XPath</ClassName>
    <SuperClass>EvalFunc</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>XPath  /** 
 * XPath is a function that allows for text extraction from xml
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>xpath</FieldName>
            <FieldType>javax.xml.xpath.XPath</FieldType>
        </Field>
        <Field>
            <FieldName>xml</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>document</FieldName>
            <FieldType>Document</FieldType>
        </Field>
        <Field>
            <FieldName>cache</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>ignoreNamespace</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>exec</MethodName>
            <MethodComment>/** 
 * input should contain: 1) xml 2) xpath  3) optional cache xml doc flag  4) optional ignore namespace flag Usage: 1) XPath(xml, xpath) 2) XPath(xml, xpath, false)  3) XPath(xml, xpath, false, false)
 * @param input 1st element should to be the xml 2nd element should be the xpath 3rd optional boolean cache flag (default true) 4th optional boolean ignore namespace flag (default true) This UDF will cache the last xml document. This is helpful when multiple consecutive xpathAll calls are made for the same xml document. Caching can be turned off to ensure that the UDF's recreates the internal javax.xml.xpath.XPathAll for every call This UDF will also support ignoring the namespace in the xml tags. This will help to search xpath items by ignoring its namespace. Ignoring of the namespace can be turned off for special cases using a fourth argument in the UDF. 
 * @return chararrary result or null if no match
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNamespaceURI</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>prefix</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPrefix</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>namespaceURI</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPrefixes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Iterator</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>namespaceURI</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isArgsValid</MethodName>
            <MethodComment>/** 
 * Validates values of the input parameters.
 * @param Tuple
 * @return boolean
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getArgToFuncMapping</MethodName>
            <MethodComment>/** 
 * Returns argument schemas of the UDF.
 * @return List
 */
</MethodComment>
            <ReturnType>FuncSpec</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>List&lt;FuncSpec&gt; [funcList=new ArrayList&lt;FuncSpec&gt;()]</InnerVar>
                <InnerVar>List&lt;FieldSchema&gt; [fields=new ArrayList&lt;FieldSchema&gt;()]</InnerVar>
                <InnerVar>Schema [twoArgInSchema=new Schema(fields)]</InnerVar>
                <InnerVar>Schema [threeArgInSchema=new Schema(fields)]</InnerVar>
                <InnerVar>Schema [fourArgInSchema=new Schema(fields)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>fields;add;[new Schema.FieldSchema(null,DataType.CHARARRAY)]</InnerMethodInvoke>
                <InnerMethodInvoke>fields;add;[new Schema.FieldSchema(null,DataType.CHARARRAY)]</InnerMethodInvoke>
                <InnerMethodInvoke>funcList;add;[new FuncSpec(this.getClass().getName(),twoArgInSchema)]</InnerMethodInvoke>
                <InnerMethodInvoke>fields;add;[new Schema.FieldSchema(null,DataType.CHARARRAY)]</InnerMethodInvoke>
                <InnerMethodInvoke>fields;add;[new Schema.FieldSchema(null,DataType.CHARARRAY)]</InnerMethodInvoke>
                <InnerMethodInvoke>fields;add;[new Schema.FieldSchema(null,DataType.BOOLEAN)]</InnerMethodInvoke>
                <InnerMethodInvoke>funcList;add;[new FuncSpec(this.getClass().getName(),threeArgInSchema)]</InnerMethodInvoke>
                <InnerMethodInvoke>fields;add;[new Schema.FieldSchema(null,DataType.CHARARRAY)]</InnerMethodInvoke>
                <InnerMethodInvoke>fields;add;[new Schema.FieldSchema(null,DataType.CHARARRAY)]</InnerMethodInvoke>
                <InnerMethodInvoke>fields;add;[new Schema.FieldSchema(null,DataType.BOOLEAN)]</InnerMethodInvoke>
                <InnerMethodInvoke>fields;add;[new Schema.FieldSchema(null,DataType.BOOLEAN)]</InnerMethodInvoke>
                <InnerMethodInvoke>funcList;add;[new FuncSpec(this.getClass().getName(),fourArgInSchema)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>