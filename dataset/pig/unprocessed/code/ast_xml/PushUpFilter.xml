<Class>
    <Id>457</Id>
    <Package>org.apache.pig.newplan.logical.rules</Package>
    <ClassName>PushUpFilter</ClassName>
    <SuperClass>Rule</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>subPlan</FieldName>
            <FieldType>OperatorSubPlan</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>PushUpFilter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>n</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNewTransformer</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Transformer</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>check</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>matched</ParamName>
                    <ParamType>OperatorPlan</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Operator [current=matched.getSources().get(0)]</InnerVar>
                <InnerVar>Operator [pred=findNonFilterPredecessor(current)]</InnerVar>
                <InnerVar>LOFilter [filter=(LOFilter)current]</InnerVar>
                <InnerVar>List&lt;Operator&gt; [preds=currentPlan.getPredecessors(pred)]</InnerVar>
                <InnerVar>LogicalExpressionPlan [filterPlan=filter.getFilterPlan()]</InnerVar>
                <InnerVar>Set&lt;Long&gt; [uids=collectUidFromExpPlan(filterPlan)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>containUDF</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>filterPlan</ParamName>
                    <ParamType>LogicalExpressionPlan</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Iterator&lt;Operator&gt; [it=filterPlan.getOperators()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>collectUidFromExpPlan</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>filterPlan</ParamName>
                    <ParamType>LogicalExpressionPlan</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Set&lt;Long&gt; [uids=new HashSet&lt;Long&gt;()]</InnerVar>
                <InnerVar>Iterator&lt;Operator&gt; [iter=filterPlan.getOperators()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findNonFilterPredecessor</MethodName>
            <MethodComment>/** 
 * Starting from current operator (which is a filter), search its successors until locating a non-filter operator. Null is returned if none is found.
 */
</MethodComment>
            <ReturnType>Operator</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>current</ParamName>
                    <ParamType>Operator</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Operator [op=current]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>transform</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>matched</ParamName>
                    <ParamType>OperatorPlan</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LOFilter [filter=(LOFilter)matched.getSources().get(0)]</InnerVar>
                <InnerVar>Operator [predecessor=this.findNonFilterPredecessor(filter)]</InnerVar>
                <InnerVar>Operator [predec=currentPlan.getPredecessors(filter).get(0)]</InnerVar>
                <InnerVar>Operator [succed]</InnerVar>
                <InnerVar>Pair&lt;Integer,Integer&gt; [p1=currentPlan.disconnect(predec,filter)]</InnerVar>
                <InnerVar>LogicalExpressionPlan [filterPlan=filter.getFilterPlan()]</InnerVar>
                <InnerVar>List&lt;Operator&gt; [preds=currentPlan.getPredecessors(predecessor)]</InnerVar>
                <InnerVar>Map&lt;Integer,Operator&gt; [inputs=findInputsToAddFilter(filterPlan,predecessor,preds)]</InnerVar>
                <InnerVar>LOFilter [newFilter=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>subPlan;add;[predecessor]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasAll</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>op</ParamName>
                    <ParamType>LogicalRelationalOperator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>uids</ParamName>
                    <ParamType>Long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LogicalSchema [schema=op.getSchema()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reportChanges</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>OperatorPlan</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>insertFilter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>prev</ParamName>
                    <ParamType>Operator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>predecessor</ParamName>
                    <ParamType>Operator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>filter</ParamName>
                    <ParamType>LOFilter</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Pair&lt;Integer,Integer&gt; [p3=currentPlan.disconnect(prev,predecessor)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>currentPlan;connect;[prev, p3.first, filter, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>currentPlan;connect;[filter, 0, predecessor, p3.second]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findInputsToAddFilter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Integer</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>filterPlan</ParamName>
                    <ParamType>LogicalExpressionPlan</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>predecessor</ParamName>
                    <ParamType>Operator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>preds</ParamName>
                    <ParamType>Operator</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Map&lt;Integer,Operator&gt; [inputs=new HashMap&lt;Integer,Operator&gt;()]</InnerVar>
                <InnerVar>Set&lt;Long&gt; [uids=collectUidFromExpPlan(filterPlan)]</InnerVar>
                <InnerVar>boolean[] [innerFlags=null]</InnerVar>
                <InnerVar>boolean [isInner=true]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildPattern</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>OperatorPlan</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>LogicalPlan [plan=new LogicalPlan()]</InnerVar>
                <InnerVar>LogicalRelationalOperator [op1=new LOFilter(plan)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>plan;add;[op1]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>