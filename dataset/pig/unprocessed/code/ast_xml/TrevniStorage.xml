<Class>
    <Id>947</Id>
    <Package>org.apache.pig.builtin</Package>
    <ClassName>TrevniStorage</ClassName>
    <SuperClass>AvroStorage</SuperClass>
    <SuperInterfaceList>
        <SuperInterface>LoadPushDown</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>TrevniStorage  /** 
 * Pig Store/Load Function for Trevni.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>fsplit</FieldName>
            <FieldType>FileSplit</FieldType>
        </Field>
        <Field>
            <FieldName>params</FieldName>
            <FieldType>AvroColumnReader.Params</FieldType>
        </Field>
        <Field>
            <FieldName>reader</FieldName>
            <FieldType>AvroColumnReader</FieldType>
        </Field>
        <Field>
            <FieldName>reader</FieldName>
            <FieldType>GenericData.Record</FieldType>
        </Field>
        <Field>
            <FieldName>rows</FieldName>
            <FieldType>float</FieldType>
        </Field>
        <Field>
            <FieldName>row</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>currentRecord</FieldName>
            <FieldType>GenericData.Record</FieldType>
        </Field>
        <Field>
            <FieldName>schema</FieldName>
            <FieldType>Schema</FieldType>
        </Field>
        <Field>
            <FieldName>part</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>avroRecordWriterSchema</FieldName>
            <FieldType>Schema</FieldType>
        </Field>
        <Field>
            <FieldName>writer</FieldName>
            <FieldType>AvroColumnWriter</FieldType>
        </Field>
        <Field>
            <FieldName>writer</FieldName>
            <FieldType>GenericData.Record</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>TrevniStorage</MethodName>
            <MethodComment>/** 
 * Create new instance of TrevniStorage with no arguments (useful for loading files without specifying parameters).
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>TrevniStorage</MethodName>
            <MethodComment>/** 
 * Create new instance of TrevniStorage.
 * @param sn Specifies the input/output schema or record name.
 * @param opts Options for AvroStorage:&lt;li&gt;&lt;code&gt;-namespace&lt;/code&gt; Namespace for an automatically generated output schema.&lt;/li&gt; &lt;li&gt;&lt;code&gt;-schemafile&lt;/code&gt; Specifies URL for avro schema file from which to read the input schema (can be local file, hdfs, url, etc).&lt;/li&gt; &lt;li&gt;&lt;code&gt;-examplefile&lt;/code&gt; Specifies URL for avro data file from which to copy the input schema (can be local file, hdfs, url, etc).&lt;/li&gt; &lt;li&gt;&lt;code&gt;-allowrecursive&lt;/code&gt; Option to allow recursive schema definitions (default is false).&lt;/li&gt;
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sn</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>opts</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getInputFormat</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>NullWritable</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isSplitable</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>jc</ParamName>
                    <ParamType>JobContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>p</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>listStatus</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>FileStatus</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>job</ParamName>
                    <ParamType>JobContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;FileStatus&gt; [results=Lists.newArrayList()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>job.getConfiguration();setBoolean;[MRConfiguration.INPUT_DIR_RECURSIVE, true]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createRecordReader</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>NullWritable</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>is</ParamName>
                    <ParamType>InputSplit</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tc</ParamName>
                    <ParamType>TaskAttemptContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>RecordReader&lt;NullWritable,GenericData.Record&gt; [rr=new RecordReader&lt;NullWritable,GenericData.Record&gt;(){
  private FileSplit fsplit;
  private AvroColumnReader.Params params;
  private AvroColumnReader&lt;GenericData.Record&gt; reader;
  private float rows;
  private long row=0;
  private GenericData.Record currentRecord=null;
  @Override public void close() throws IOException {
    reader.close();
  }
  @Override public NullWritable getCurrentKey() throws IOException, InterruptedException {
    return NullWritable.get();
  }
  @Override public Record getCurrentValue() throws IOException, InterruptedException {
    return currentRecord;
  }
  @Override public float getProgress() throws IOException, InterruptedException {
    return row / rows;
  }
  @Override public void initialize(  final InputSplit isplit,  final TaskAttemptContext tac) throws IOException, InterruptedException {
    fsplit=(FileSplit)isplit;
    params=new AvroColumnReader.Params(new HadoopInput(fsplit.getPath(),tac.getConfiguration()));
    Schema inputSchema=getInputAvroSchema();
    params.setSchema(inputSchema);
    reader=new AvroColumnReader&lt;GenericData.Record&gt;(params);
    rows=reader.getRowCount();
  }
  @Override public boolean nextKeyValue() throws IOException, InterruptedException {
    if (reader.hasNext()) {
      currentRecord=reader.next();
      row++;
      return true;
    }
 else {
      return false;
    }
  }
}
]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>tc;setStatus;[is.toString()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>close</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>reader;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCurrentKey</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>NullWritable</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCurrentValue</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Record</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getProgress</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>float</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initialize</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>isplit</ParamName>
                    <ParamType>InputSplit</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tac</ParamName>
                    <ParamType>TaskAttemptContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Schema [inputSchema=getInputAvroSchema()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>params;setSchema;[inputSchema]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nextKeyValue</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOutputFormat</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>NullWritable</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>TrevniStorageOutputFormat</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>Schema</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRecordWriter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>NullWritable</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tc</ParamName>
                    <ParamType>TaskAttemptContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ColumnFileMetaData [meta=new ColumnFileMetaData()]</InnerVar>
                <InnerVar>Path [dir=getOutputPath(tc)]</InnerVar>
                <InnerVar>FileSystem [fs=FileSystem.get(tc.getConfiguration())]</InnerVar>
                <InnerVar>long [blockSize=fs.getDefaultBlockSize()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>meta;setCodec;["deflate"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>flush</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Integer [taskAttemptId=tc.getTaskAttemptID().getTaskID().getId()]</InnerVar>
                <InnerVar>String [partName=String.format("%05d_%03d",taskAttemptId,part++)]</InnerVar>
                <InnerVar>OutputStream [out=fs.create(new Path(dir,"part-" + partName + AvroTrevniOutputFormat.EXT))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>close</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>arg0</ParamName>
                    <ParamType>TaskAttemptContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;flush;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>write</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>n</ParamName>
                    <ParamType>NullWritable</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>o</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>GenericData.Record [r=AvroStorageDataConversionUtilities.packIntoAvro((Tuple)o,schema)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>writer;write;[r]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>prepareToWrite</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>Schema</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAvroSchema</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Schema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>p</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>job</ParamName>
                    <ParamType>Job</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ArrayList&lt;FileStatus&gt; [statusList=new ArrayList&lt;FileStatus&gt;()]</InnerVar>
                <InnerVar>FileSystem [fs=FileSystem.get(p[0].toUri(),job.getConfiguration())]</InnerVar>
                <InnerVar>FileStatus[] [statusArray=(FileStatus[])statusList.toArray(new FileStatus[statusList.size()])]</InnerVar>
                <InnerVar>Path [filePath=Utils.depthFirstSearchForFile(statusArray,fs)]</InnerVar>
                <InnerVar>AvroColumnReader.Params [params=new AvroColumnReader.Params(new HadoopInput(filePath,job.getConfiguration()))]</InnerVar>
                <InnerVar>AvroColumnReader&lt;GenericData.Record&gt; [reader=new AvroColumnReader&lt;GenericData.Record&gt;(params)]</InnerVar>
                <InnerVar>Schema [s=reader.getFileSchema()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>reader;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>