<Class>
    <Id>485</Id>
    <Package>org.apache.pig.newplan.logical.visitor</Package>
    <ClassName>ScalarVisitor</ClassName>
    <SuperClass>AllExpressionVisitor</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ScalarVisitor  /** 
 * Logical plan visitor which handles scalar projections. It will find or create a LOStore  and a soft link between the store operator to a scalar expression. It will also sync the file name between the store and scalar expression.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>pigContext</FieldName>
            <FieldType>PigContext</FieldType>
        </Field>
        <Field>
            <FieldName>scope</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ScalarVisitor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>plan</ParamName>
                    <ParamType>OperatorPlan</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pigContext</ParamName>
                    <ParamType>PigContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>scope</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getVisitor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>LogicalExpressionVisitor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>exprPlan</ParamName>
                    <ParamType>LogicalExpressionPlan</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expr</ParamName>
                    <ParamType>ScalarExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ConstantExpression [filenameConst=(ConstantExpression)exprPlan.getSuccessors(expr).get(1)]</InnerVar>
                <InnerVar>Operator [refOp=expr.getImplicitReferencedOperator()]</InnerVar>
                <InnerVar>Operator [attachedOp=expr.getAttachedLogicalOperator()]</InnerVar>
                <InnerVar>LogicalPlan [lp=(LogicalPlan)attachedOp.getPlan()]</InnerVar>
                <InnerVar>List&lt;Operator&gt; [succs=lp.getSuccessors(refOp)]</InnerVar>
                <InnerVar>LOStore [store=null]</InnerVar>
                <InnerVar>FuncSpec [interStorageFuncSpec=new FuncSpec(InterStorage.class.getName())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>expr;setImplicitReferencedOperator;[store]</InnerMethodInvoke>
                <InnerMethodInvoke>filenameConst;setValue;[store.getOutputSpec().getFileName()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>