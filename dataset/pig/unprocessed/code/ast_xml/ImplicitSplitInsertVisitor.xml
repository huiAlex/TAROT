<Class>
    <Id>1004</Id>
    <Package>org.apache.pig.newplan.logical.visitor</Package>
    <ClassName>ImplicitSplitInsertVisitor</ClassName>
    <SuperClass>AllSameRalationalNodesVisitor</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>ImplicitSplitInsertVisitor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>plan</ParamName>
                    <ParamType>LogicalPlan</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nodeHasTwoOutputs</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>op</ParamName>
                    <ParamType>LogicalRelationalOperator</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;Operator&gt; [succs=plan.getSuccessors(op)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>execute</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>op</ParamName>
                    <ParamType>LogicalRelationalOperator</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;Operator&gt; [succs=plan.getSuccessors(op)]</InnerVar>
                <InnerVar>LOSplit [splitOp=new LOSplit(plan)]</InnerVar>
                <InnerVar>Operator[] [sucs=succs.toArray(new Operator[0])]</InnerVar>
                <InnerVar>UidResetter [uidResetter=new UidResetter(plan)]</InnerVar>
                <InnerVar>SchemaResetter [schemaResetter=new SchemaResetter(plan,true)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>splitOp;setAlias;[((LogicalRelationalOperator)op).getAlias()]</InnerMethodInvoke>
                <InnerMethodInvoke>plan;add;[splitOp]</InnerMethodInvoke>
                <InnerMethodInvoke>plan;connect;[op, splitOp]</InnerMethodInvoke>
                <InnerMethodInvoke>uidResetter;visit;[]</InnerMethodInvoke>
                <InnerMethodInvoke>schemaResetter;visit;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>