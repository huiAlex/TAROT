<Class>
    <Id>46</Id>
    <Package>org.apache.pig.piggybank.storage.avro</Package>
    <ClassName>AvroSchema2Pig</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>AvroSchema2Pig  /** 
 * This class converts Avro schema to Pig schema
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>RECORD</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>FIELD</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>ARRAY_FIELD</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>MAP_VALUE_FIELD</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getPigSchema</MethodName>
            <MethodComment>/** 
 * Wrap a pig type to a field schema
 */
</MethodComment>
            <ReturnType>ResourceFieldSchema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pigType</ParamName>
                    <ParamType>byte</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fieldName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>convert</MethodName>
            <MethodComment>/** 
 * Convert an Avro schema to a Pig schema
 */
</MethodComment>
            <ReturnType>ResourceSchema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>schema</ParamName>
                    <ParamType>Schema</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Set&lt;Schema&gt; [visitedRecords=new HashSet&lt;Schema&gt;()]</InnerVar>
                <InnerVar>ResourceFieldSchema [inSchema=inconvert(schema,FIELD,visitedRecords)]</InnerVar>
                <InnerVar>ResourceSchema [tupleSchema]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>inconvert</MethodName>
            <MethodComment>/** 
 * Convert a schema with field name to a pig schema
 */
</MethodComment>
            <ReturnType>ResourceFieldSchema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>in</ParamName>
                    <ParamType>Schema</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fieldName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>visitedRecords</ParamName>
                    <ParamType>Schema</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Schema.Type [avroType=in.getType()]</InnerVar>
                <InnerVar>ResourceFieldSchema [fieldSchema=new ResourceFieldSchema()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>AvroStorageLog;details;["InConvert avro schema with field name " + fieldName]</InnerMethodInvoke>
                <InnerMethodInvoke>fieldSchema;setName;[fieldName]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>add2BagSchema</MethodName>
            <MethodComment>/** 
 * Add a field schema to a bag schema
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fieldSchema</ParamName>
                    <ParamType>ResourceFieldSchema</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>subFieldSchema</ParamName>
                    <ParamType>ResourceFieldSchema</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ResourceFieldSchema [wrapped=(subFieldSchema.getType() == DataType.TUPLE) ? subFieldSchema : AvroStorageUtils.wrapAsTuple(subFieldSchema)]</InnerVar>
                <InnerVar>ResourceSchema [listSchema=new ResourceSchema()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>listSchema;setFields;[new ResourceFieldSchema[]{wrapped}]</InnerMethodInvoke>
                <InnerMethodInvoke>fieldSchema;setSchema;[listSchema]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>