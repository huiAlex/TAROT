<Class>
    <Id>832</Id>
    <Package>org.apache.pig.data</Package>
    <ClassName>DataBag</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Spillable</SuperInterface>
        <SuperInterface>WritableComparable</SuperInterface>
        <SuperInterface>Iterable</SuperInterface>
        <SuperInterface>Tuple</SuperInterface>
        <SuperInterface>Serializable</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>DataBag  /** 
 * A collection of Tuples.  A DataBag may or may not fit into memory. DataBag extends spillable, which means that it registers with a memory manager.  By default, it attempts to keep all of its contents in memory. If it is asked by the memory manager to spill to disk (by a call to spill()), it takes whatever it has in memory, opens a spill file, and writes the contents out.  This may happen multiple times.  The bag tracks all of the files it's spilled to. &lt;p&gt; DataBag provides an Iterator interface, that allows callers to read through the contents.  The iterators are aware of the data spilling. They have to be able to handle reading from files, as well as the fact that data they were reading from memory may have been spilled to disk underneath them. &lt;p&gt; The DataBag interface assumes that all data is written before any is read.  That is, a DataBag cannot be used as a queue.  If data is written after data is read, the results are undefined.  This condition is not checked on each add or read, for reasons of speed.  Caveat emptor. &lt;p&gt; Since spills are asynchronous (the memory manager requesting a spill runs in a separate thread), all operations dealing with the mContents Collection (which is the collection of tuples contained in the bag) have to be synchronized.  This means that reading from a DataBag is currently serialized.  This is ok for the moment because pig execution is currently single threaded.  A ReadWriteLock was experimented with, but it was found to be about 10x slower than using the synchronize keyword. If pig changes its execution model to be multithreaded, we may need to return to this issue, as synchronizing reads will most likely defeat the purpose of multi-threading execution. &lt;p&gt; DataBags come in several types, default, sorted, and distinct.  The type must be chosen up front, there is no way to convert a bag on the fly. Default data bags do not guarantee any particular order of retrieval for  the tuples and may contain duplicate tuples.  Sorted data bags guarantee that tuples will be retrieved in order, where "in order" is defined either by the default comparator for Tuple or the comparator provided by the caller when the bag was created.  Sorted bags may contain duplicates. Distinct bags do not guarantee any particular order of retrieval, but do guarantee that they will not contain duplicate tuples.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>size</MethodName>
            <MethodComment>/** 
 * Get the number of elements in the bag, both in memory and on disk.
 * @return number of elements in the bag
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isSorted</MethodName>
            <MethodComment>/** 
 * Find out if the bag is sorted.
 * @return true if this is a sorted data bag, false otherwise.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isDistinct</MethodName>
            <MethodComment>/** 
 * Find out if the bag is distinct.
 * @return true if the bag is a distinct bag, false otherwise.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>iterator</MethodName>
            <MethodComment>/** 
 * Get an iterator to the bag. For default and distinct bags, no particular order is guaranteed. For sorted bags the order is guaranteed to be sorted according to the provided comparator.
 * @return tuple iterator
 */
</MethodComment>
            <ReturnType>Tuple</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>add</MethodName>
            <MethodComment>/** 
 * Add a tuple to the bag.
 * @param t tuple to add.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addAll</MethodName>
            <MethodComment>/** 
 * Add contents of a bag to the bag.
 * @param b bag to add contents of.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>b</ParamName>
                    <ParamType>DataBag</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clear</MethodName>
            <MethodComment>/** 
 * Clear out the contents of the bag, both on disk and in memory. Any attempts to read after this is called will produce undefined results.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>markStale</MethodName>
            <MethodComment>/** 
 * This is used by FuncEvalSpec.FakeDataBag.
 * @param stale Set stale state.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>stale</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>