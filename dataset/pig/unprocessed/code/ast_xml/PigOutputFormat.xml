<Class>
    <Id>1017</Id>
    <Package>org.apache.pig.backend.hadoop.executionengine.mapReduceLayer</Package>
    <ClassName>PigOutputFormat</ClassName>
    <SuperClass>OutputFormat</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>PigOutputFormat  /** 
 * The better half of PigInputFormat which is responsible for the Store functionality. It is the exact mirror image of PigInputFormat having RecordWriter instead of a RecordReader.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>PIG_MAPRED_OUTPUT_DIR</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>PIG_TMP_PATH</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>reduceStores</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>reduceStores</FieldName>
            <FieldType>POStore</FieldType>
        </Field>
        <Field>
            <FieldName>mapStores</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>mapStores</FieldName>
            <FieldType>POStore</FieldType>
        </Field>
        <Field>
            <FieldName>currentConf</FieldName>
            <FieldType>Configuration</FieldType>
        </Field>
        <Field>
            <FieldName>wrappedWriter</FieldName>
            <FieldType>RecordWriter</FieldType>
        </Field>
        <Field>
            <FieldName>sFunc</FieldName>
            <FieldType>StoreFuncInterface</FieldType>
        </Field>
        <Field>
            <FieldName>storeDecorator</FieldName>
            <FieldType>StoreFuncDecorator</FieldType>
        </Field>
        <Field>
            <FieldName>mode</FieldName>
            <FieldType>Mode</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getRecordWriter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>WritableComparable</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>taskattemptcontext</ParamName>
                    <ParamType>TaskAttemptContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setupUdfEnvAndStores;[taskattemptcontext]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PigRecordWriter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>wrappedWriter</ParamName>
                    <ParamType>RecordWriter</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>storeDecorator</ParamName>
                    <ParamType>StoreFuncDecorator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mode</ParamName>
                    <ParamType>Mode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>write</MethodName>
            <MethodComment>/** 
 * We only care about the values, so we are going to skip the keys when we write.
 * @see org.apache.hadoop.mapreduce.RecordWriter#write(Object,Object)
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>WritableComparable</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>close</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>taskattemptcontext</ParamName>
                    <ParamType>TaskAttemptContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setLocation</MethodName>
            <MethodComment>/** 
 * Before delegating calls to underlying OutputFormat or OutputCommitter Pig needs to ensure the Configuration in the JobContext contains the output location and StoreFunc for the specific store - so set these up in the context for this specific store
 * @param jobContext the {@link JobContext}
 * @param store the POStore
 * @throws IOException on failure
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>jobContext</ParamName>
                    <ParamType>JobContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>store</ParamName>
                    <ParamType>POStore</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Job [storeJob=new Job(jobContext.getConfiguration())]</InnerVar>
                <InnerVar>StoreFuncInterface [storeFunc=store.getStoreFunc()]</InnerVar>
                <InnerVar>String [outputLocation=store.getSFile().getFileName()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>storeFunc;setStoreLocation;[outputLocation, storeJob]</InnerMethodInvoke>
                <InnerMethodInvoke>ConfigurationUtil;mergeConf;[jobContext.getConfiguration(), storeJob.getConfiguration()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkOutputSpecs</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>jobcontext</ParamName>
                    <ParamType>JobContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setupUdfEnvAndStores;[jobcontext]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkOutputSpecsHelper;[mapStores, jobcontext]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkOutputSpecsHelper;[reduceStores, jobcontext]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkOutputSpecsHelper</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>stores</ParamName>
                    <ParamType>POStore</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>jobcontext</ParamName>
                    <ParamType>JobContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStores</MethodName>
            <MethodComment>/** 
 * @param currentConf2
 * @param storeLookupKey
 * @return
 * @throws IOException
 */
</MethodComment>
            <ReturnType>POStore</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conf</ParamName>
                    <ParamType>Configuration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>storeLookupKey</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setupUdfEnvAndStores</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>jobcontext</ParamName>
                    <ParamType>JobContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Configuration [newConf=jobcontext.getConfiguration()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>MapRedUtil;setupUDFContext;[newConf]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isConfPropEqual</MethodName>
            <MethodComment>/** 
 * Check if given property prop is same in configurations conf1, conf2
 * @param prop
 * @param conf1
 * @param conf2
 * @return true if both are equal
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>prop</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>conf1</ParamName>
                    <ParamType>Configuration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>conf2</ParamName>
                    <ParamType>Configuration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [str1=conf1.get(prop)]</InnerVar>
                <InnerVar>String [str2=conf2.get(prop)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOutputCommitter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>OutputCommitter</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>taskattemptcontext</ParamName>
                    <ParamType>TaskAttemptContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setupUdfEnvAndStores;[taskattemptcontext]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>