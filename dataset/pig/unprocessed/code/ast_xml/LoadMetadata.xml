<Class>
    <Id>631</Id>
    <Package>org.apache.pig</Package>
    <ClassName>LoadMetadata</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>LoadMetadata  /** 
 * This interface defines how to retrieve metadata related to data to be loaded. If a given loader does not implement this interface, it will be assumed that it is unable to provide metadata about the associated data.
 * @since Pig 0.7
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getSchema</MethodName>
            <MethodComment>/** 
 * Get a schema for the data to be loaded.  
 * @param location Location as returned by {@link LoadFunc#relativeToAbsolutePath(String,org.apache.hadoop.fs.Path)}
 * @param job The {@link Job} object - this should be used only to obtain cluster properties through  {@link Job#getConfiguration()} and not to set/queryany runtime job information.  
 * @return schema for the data to be loaded. This schema should representall tuples of the returned data.  If the schema is unknown or it is not possible to return a schema that represents all returned data, then null should be returned. The schema should not be affected by pushProjection, ie. getSchema should always return the original schema even after pushProjection
 * @throws IOException if an exception occurs while determining the schema
 */
</MethodComment>
            <ReturnType>ResourceSchema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>location</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>job</ParamName>
                    <ParamType>Job</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStatistics</MethodName>
            <MethodComment>/** 
 * Get statistics about the data to be loaded.  If no statistics are available, then null should be returned. If the implementing class also extends {@link LoadFunc}, then  {@link LoadFunc#setLocation(String,org.apache.hadoop.mapreduce.Job)}is guaranteed to be called before this method.
 * @param location Location as returned by {@link LoadFunc#relativeToAbsolutePath(String,org.apache.hadoop.fs.Path)}
 * @param job The {@link Job} object - this should be used only to obtain cluster properties through  {@link Job#getConfiguration()} and not to set/queryany runtime job information.  
 * @return statistics about the data to be loaded.  If no statistics areavailable, then null should be returned.
 * @throws IOException if an exception occurs while retrieving statistics
 */
</MethodComment>
            <ReturnType>ResourceStatistics</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>location</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>job</ParamName>
                    <ParamType>Job</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPartitionKeys</MethodName>
            <MethodComment>/** 
 * Find what columns are partition keys for this input.
 * @param location Location as returned by {@link LoadFunc#relativeToAbsolutePath(String,org.apache.hadoop.fs.Path)}
 * @param job The {@link Job} object - this should be used only to obtain cluster properties through  {@link Job#getConfiguration()} and not to set/queryany runtime job information.  
 * @return array of field names of the partition keys. Implementations should return null to indicate that there are no partition keys
 * @throws IOException if an exception occurs while retrieving partition keys
 */
</MethodComment>
            <ReturnType>String[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>location</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>job</ParamName>
                    <ParamType>Job</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setPartitionFilter</MethodName>
            <MethodComment>/** 
 * Set the filter for partitioning.  It is assumed that this filter will only contain references to fields given as partition keys in getPartitionKeys. So if the implementation returns null in  {@link #getPartitionKeys(String,Job)}, then this method is not called by Pig runtime. This method is also not called by the Pig runtime if there are no partition filter conditions. 
 * @param partitionFilter that describes filter for partitioning
 * @throws IOException if the filter is not compatible with the storagemechanism or contains non-partition fields.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>partitionFilter</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>