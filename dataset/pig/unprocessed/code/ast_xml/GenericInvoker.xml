<Class>
    <Id>685</Id>
    <Package>org.apache.pig.builtin</Package>
    <ClassName>GenericInvoker</ClassName>
    <SuperClass>EvalFunc</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>GenericInvoker  /** 
 * The generic Invoker class does all the common grunt work of setting up an invoker. Class-specific non-generic extensions of this class are needed for Pig to know what type of return to expect from exec, and to find the appropriate classes through reflection. All they have to do is implement the constructors that call into super(). Note that the  no-parameter constructor is &lt;b&gt;required&lt;/b&gt;, if seemingly nonsensical, for Pig to do its work. &lt;p&gt; The Invoker family of udfs understand the following class names (all case-independent): &lt;li&gt;String &lt;li&gt;Long &lt;li&gt;Float &lt;li&gt;Double &lt;li&gt;Int &lt;p&gt; Invokers can also work with array arguments, represented in Pig as DataBags of single-tuple elements. Simply refer to &lt;code&gt;string[]&lt;/code&gt;, for example. &lt;p&gt; This UDF allows one to dynamically invoke Java methods that return a &lt;code&gt;T&lt;/code&gt; &lt;p&gt; Usage of the Invoker family of UDFs (adjust as appropriate): &lt;p&gt; &lt;pre&gt; {@code -- invoking a static method DEFINE StringToLong InvokeForLong('java.lang.Long.valueOf', 'String') longs = FOREACH strings GENERATE StringToLong(some_chararray); -- invoking a method on an object DEFINE StringConcat InvokeForString('java.lang.String.concat', 'String String', 'false') concatenations = FOREACH strings GENERATE StringConcat(str1, str2); }&lt;/pre&gt; &lt;p&gt; The first argument to the constructor is the full path to desired method.&lt;br&gt; The second argument is a list of classes of the method parameters.&lt;br&gt; If the method is not static, the first element in this list is the object to invoke the method on.&lt;br&gt; The second argument is optional (a no-argument static method is assumed if it is not supplied).&lt;br&gt; The third argument is the keyword "static" (or "true") to signify that the method is static. &lt;br&gt; The third argument is optional, and true by default.&lt;br&gt; &lt;p&gt;
 * @param &lt; T &gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>invoker_</FieldName>
            <FieldType>Invoker</FieldType>
        </Field>
        <Field>
            <FieldName>invoker_</FieldName>
            <FieldType>T</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>GenericInvoker</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>GenericInvoker</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fullName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ClassNotFoundException</ExceptionType>
                <ExceptionType>FrontendException</ExceptionType>
                <ExceptionType>SecurityException</ExceptionType>
                <ExceptionType>NoSuchMethodException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>GenericInvoker</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fullName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>paramSpecsStr</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ClassNotFoundException</ExceptionType>
                <ExceptionType>FrontendException</ExceptionType>
                <ExceptionType>SecurityException</ExceptionType>
                <ExceptionType>NoSuchMethodException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>GenericInvoker</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fullName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>paramSpecsStr</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isStatic</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ClassNotFoundException</ExceptionType>
                <ExceptionType>FrontendException</ExceptionType>
                <ExceptionType>SecurityException</ExceptionType>
                <ExceptionType>NoSuchMethodException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>exec</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>outputSchema</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Schema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>Schema</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>FieldSchema [fs=new FieldSchema(null,DataType.findType(invoker_.getReturnType()))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>