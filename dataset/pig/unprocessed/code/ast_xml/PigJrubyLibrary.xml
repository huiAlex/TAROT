<Class>
    <Id>450</Id>
    <Package>org.apache.pig.scripting.jruby</Package>
    <ClassName>PigJrubyLibrary</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Library</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>PigJrubyLibrary  /** 
 * This class provides the ability to present to Ruby a library that was written in Java. In JRuby, there are two ways to present a library to ruby: one is to implement it in ruby as a module or class, and the other is to implement it in Java and then register it with the runtime. For the Pig datatypes we provide Ruby implementations for, it was easier to implement them in Java and provide a Ruby interface via the annotations that Jruby provides. Additionally, this class provides static object conversion functionality to and from Pig and JRuby.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>tupleFactory</FieldName>
            <FieldType>TupleFactory</FieldType>
        </Field>
        <Field>
            <FieldName>enumeratorizeMethod</FieldName>
            <FieldType>Method</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>load</MethodName>
            <MethodComment>/** 
 * This method is called from JRuby to register any classes in the library.
 * @param runtime the current Ruby runtime
 * @param wrap    ignored
 * @throws IOException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>runtime</ParamName>
                    <ParamType>Ruby</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wrap</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>RubyDataBag;define;[runtime]</InnerMethodInvoke>
                <InnerMethodInvoke>RubyDataByteArray;define;[runtime]</InnerMethodInvoke>
                <InnerMethodInvoke>RubySchema;define;[runtime]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rubyToPig</MethodName>
            <MethodComment>/** 
 * This method facilitates conversion from Ruby objects to Pig objects. This is a general class which detects the subclass and invokes the appropriate conversion routine. It will fail on an unsupported datatype.
 * @param rbObject      a Ruby object to convert
 * @return               the Pig analogue of the Ruby object
 * @throws ExecException if rbObject is not of a known type that can be converted
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rbObject</ParamName>
                    <ParamType>IRubyObject</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ExecException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rubyToPig</MethodName>
            <MethodComment>/** 
 * A type specific conversion routine.
 * @param rbObject object to convert
 * @return          analogous Pig type
 */
</MethodComment>
            <ReturnType>Tuple</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rbObject</ParamName>
                    <ParamType>RubyArray</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Tuple [out=tupleFactory.newTuple(rbObject.size())]</InnerVar>
                <InnerVar>int [i=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ExecException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rubyToPig</MethodName>
            <MethodComment>/** 
 * A type specific conversion routine.
 * @param rbObject object to convert
 * @return          analogous Pig type
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rbObject</ParamName>
                    <ParamType>RubyHash</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Map&lt;String,Object&gt; [newMap=Maps.newHashMap()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ExecException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rubyToPig</MethodName>
            <MethodComment>/** 
 * A type specific conversion routine.
 * @param rbObject object to convert
 * @return          analogous Pig type
 */
</MethodComment>
            <ReturnType>Boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rbObject</ParamName>
                    <ParamType>RubyBoolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rubyToPig</MethodName>
            <MethodComment>/** 
 * A type specific conversion routine.
 * @param rbObject object to convert
 * @return          analogous Pig type
 */
</MethodComment>
            <ReturnType>Schema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rbObject</ParamName>
                    <ParamType>RubySchema</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rubyToPig</MethodName>
            <MethodComment>/** 
 * A type specific conversion routine.
 * @param rbObject object to convert
 * @return          analogous Pig type
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rbObject</ParamName>
                    <ParamType>RubyString</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rubyToPig</MethodName>
            <MethodComment>/** 
 * A type specific conversion routine.
 * @param rbObject object to convert
 * @return          analogous Pig type
 */
</MethodComment>
            <ReturnType>Long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rbObject</ParamName>
                    <ParamType>RubyBignum</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rubyToPig</MethodName>
            <MethodComment>/** 
 * A type specific conversion routine.
 * @param rbObject object to convert
 * @return          analogous Pig type
 */
</MethodComment>
            <ReturnType>Long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rbObject</ParamName>
                    <ParamType>RubyFixnum</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rubyToPig</MethodName>
            <MethodComment>/** 
 * A type specific conversion routine.
 * @param rbObject object to convert
 * @return          analogous Pig type
 */
</MethodComment>
            <ReturnType>Double</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rbObject</ParamName>
                    <ParamType>RubyFloat</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rubyToPig</MethodName>
            <MethodComment>/** 
 * A type specific conversion routine.
 * @param rbObject object to convert
 * @return          analogous Pig type
 */
</MethodComment>
            <ReturnType>Integer</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rbObject</ParamName>
                    <ParamType>RubyInteger</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rubyToPig</MethodName>
            <MethodComment>/** 
 * A type specific conversion routine.
 * @param rbObject object to convert
 * @return          analogous Pig type
 */
</MethodComment>
            <ReturnType>DataBag</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rbObject</ParamName>
                    <ParamType>RubyDataBag</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rubyToPig</MethodName>
            <MethodComment>/** 
 * A type specific conversion routine.
 * @param rbObject object to convert
 * @return          analogous Pig type
 */
</MethodComment>
            <ReturnType>DataByteArray</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rbObject</ParamName>
                    <ParamType>RubyDataByteArray</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rubyToPig</MethodName>
            <MethodComment>/** 
 * A type specific conversion routine.
 * @param rbObject object to convert
 * @return          analogous Pig type
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rbObject</ParamName>
                    <ParamType>RubyNil</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>pigToRuby</MethodName>
            <MethodComment>/** 
 * This is the method which provides conversion from Pig to Ruby. In this case, an instance of the Ruby runtime is necessary. This method provides the general detection of the type and then calls the more specific conversion methods.
 * @param ruby          the Ruby runtime to create objects in
 * @param object        the Pig object to convert to Ruby
 * @return               Ruby analogue of object
 * @throws ExecException object is not a convertible Pig type
 */
</MethodComment>
            <ReturnType>IRubyObject</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ruby</ParamName>
                    <ParamType>Ruby</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>object</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ExecException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>pigToRuby</MethodName>
            <MethodComment>/** 
 * A type specific conversion routine.
 * @param ruby          the Ruby runtime to create objects in
 * @param object        object to convert
 * @return               analogous Ruby type
 * @throws ExecException object contained an object that could not convert
 */
</MethodComment>
            <ReturnType>RubyArray</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ruby</ParamName>
                    <ParamType>Ruby</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>object</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>RubyArray [rubyArray=ruby.newArray()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ExecException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>pigToRuby</MethodName>
            <MethodComment>/** 
 * A type specific conversion routine.
 * @param ruby   the Ruby runtime to create objects in
 * @param object object to convert
 * @return       analogous Ruby type
 */
</MethodComment>
            <ReturnType>RubyBoolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ruby</ParamName>
                    <ParamType>Ruby</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>object</ParamName>
                    <ParamType>Boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>pigToRuby</MethodName>
            <MethodComment>/** 
 * A type specific conversion routine.
 * @param ruby   the Ruby runtime to create objects in
 * @param object object to convert
 * @return       analogous Ruby type
 */
</MethodComment>
            <ReturnType>RubyDataBag</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ruby</ParamName>
                    <ParamType>Ruby</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>object</ParamName>
                    <ParamType>DataBag</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>pigToRuby</MethodName>
            <MethodComment>/** 
 * A type specific conversion routine.
 * @param ruby   the Ruby runtime to create objects in
 * @param object object to convert
 * @return       analogous Ruby type
 */
</MethodComment>
            <ReturnType>RubySchema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ruby</ParamName>
                    <ParamType>Ruby</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>object</ParamName>
                    <ParamType>Schema</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>pigToRuby</MethodName>
            <MethodComment>/** 
 * A type specific conversion routine for Pig Maps. This only deals with maps with String keys, which is all that Pig supports.
 * @param ruby          the Ruby runtime to create objects in
 * @param object        map to convert. In Pig, only maps with String keys aresupported
 * @return               analogous Ruby type
 * @throws ExecException object contains a key that can't be convert to a Ruby type
 */
</MethodComment>
            <ReturnType>RubyHash</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ruby</ParamName>
                    <ParamType>Ruby</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>object</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>RubyHash [newMap=RubyHash.newHash(ruby)]</InnerVar>
                <InnerVar>boolean [checkType=false]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ExecException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>pigToRuby</MethodName>
            <MethodComment>/** 
 * A type specific conversion routine.
 * @param ruby   the Ruby runtime to create objects in
 * @param object object to convert
 * @return       analogous Ruby type
 */
</MethodComment>
            <ReturnType>RubyDataByteArray</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ruby</ParamName>
                    <ParamType>Ruby</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>object</ParamName>
                    <ParamType>DataByteArray</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>pigToRuby</MethodName>
            <MethodComment>/** 
 * A type specific conversion routine.
 * @param ruby   the Ruby runtime to create objects in
 * @param object object to convert
 * @return       analogous Ruby type
 */
</MethodComment>
            <ReturnType>RubyString</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ruby</ParamName>
                    <ParamType>Ruby</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>object</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>pigToRuby</MethodName>
            <MethodComment>/** 
 * A type specific conversion routine.
 * @param ruby   the Ruby runtime to create objects in
 * @param object object to convert
 * @return       analogous Ruby type
 */
</MethodComment>
            <ReturnType>RubyFixnum</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ruby</ParamName>
                    <ParamType>Ruby</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>object</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>pigToRuby</MethodName>
            <MethodComment>/** 
 * A type specific conversion routine.
 * @param ruby   the Ruby runtime to create objects in
 * @param object object to convert
 * @return       analogous Ruby type
 */
</MethodComment>
            <ReturnType>RubyFixnum</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ruby</ParamName>
                    <ParamType>Ruby</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>object</ParamName>
                    <ParamType>Long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>pigToRuby</MethodName>
            <MethodComment>/** 
 * A type specific conversion routine.
 * @param ruby   the Ruby runtime to create objects in
 * @param object object to convert
 * @return       analogous Ruby type
 */
</MethodComment>
            <ReturnType>RubyFloat</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ruby</ParamName>
                    <ParamType>Ruby</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>object</ParamName>
                    <ParamType>Float</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>pigToRuby</MethodName>
            <MethodComment>/** 
 * A type specific conversion routine.
 * @param ruby   the Ruby runtime to create objects in
 * @param object object to convert
 * @return       analogous Ruby type
 */
</MethodComment>
            <ReturnType>RubyFloat</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ruby</ParamName>
                    <ParamType>Ruby</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>object</ParamName>
                    <ParamType>Double</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>enumeratorize</MethodName>
            <MethodComment>/** 
 * This is a hack to get around the fact that in JRuby 1.6.7, the enumeratorize method isn't public. In 1.7.0, it will be made public and this can be gotten rid of, but until then the Jruby API doesn't provide an easy way (or even a difficult way, really) to provide this functionality; thus, it felt much cleaner to use reflection to make public a method that will soon be public anyway instead of doing something much hairier.
 * @param runtime the Ruby runtime to create objects in
 * @param obj     the Enumerable object to wrap
 * @param name    the name of the method that still needs a block (ie each or flatten)
 * @return        enumerator Ruby object wrapping the given Enumerable
 */
</MethodComment>
            <ReturnType>IRubyObject</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>runtime</ParamName>
                    <ParamType>Ruby</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>obj</ParamName>
                    <ParamType>IRubyObject</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>