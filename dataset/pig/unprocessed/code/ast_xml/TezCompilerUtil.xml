<Class>
    <Id>1093</Id>
    <Package>org.apache.pig.backend.hadoop.executionengine.tez.util</Package>
    <ClassName>TezCompilerUtil</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>TUPLE_CLASS</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>TezCompilerUtil</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>simpleConnectTwoVertex</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tezPlan</ParamName>
                    <ParamType>TezOperPlan</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>op1</ParamName>
                    <ParamType>TezOperator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>op2</ParamName>
                    <ParamType>TezOperator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>scope</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nig</ParamName>
                    <ParamType>NodeIdGenerator</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PhysicalPlan [ep=new PhysicalPlan()]</InnerVar>
                <InnerVar>POProject [prjStar=new POProject(new OperatorKey(scope,nig.getNextNodeId(scope)))]</InnerVar>
                <InnerVar>List&lt;PhysicalPlan&gt; [eps=new ArrayList&lt;PhysicalPlan&gt;()]</InnerVar>
                <InnerVar>POLocalRearrangeTez [lr=new POLocalRearrangeTez(new OperatorKey(scope,nig.getNextNodeId(scope)))]</InnerVar>
                <InnerVar>POPackage [pkg=new POPackage(new OperatorKey(scope,nig.getNextNodeId(scope)))]</InnerVar>
                <InnerVar>boolean[] [inner={false}]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>prjStar;setResultType;[DataType.TUPLE]</InnerMethodInvoke>
                <InnerMethodInvoke>prjStar;setStar;[true]</InnerMethodInvoke>
                <InnerMethodInvoke>ep;add;[prjStar]</InnerMethodInvoke>
                <InnerMethodInvoke>eps;add;[ep]</InnerMethodInvoke>
                <InnerMethodInvoke>lr;setKeyType;[DataType.TUPLE]</InnerMethodInvoke>
                <InnerMethodInvoke>lr;setPlans;[eps]</InnerMethodInvoke>
                <InnerMethodInvoke>lr;setResultType;[DataType.TUPLE]</InnerMethodInvoke>
                <InnerMethodInvoke>lr;setOutputKey;[op2.getOperatorKey().toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>op1.plan;addAsLeaf;[lr]</InnerMethodInvoke>
                <InnerMethodInvoke>pkg.getPkgr();setKeyType;[DataType.TUPLE]</InnerMethodInvoke>
                <InnerMethodInvoke>pkg;setNumInps;[1]</InnerMethodInvoke>
                <InnerMethodInvoke>pkg.getPkgr();setInner;[inner]</InnerMethodInvoke>
                <InnerMethodInvoke>op2.plan;add;[pkg]</InnerMethodInvoke>
                <InnerMethodInvoke>op2.plan;addAsLeaf;[getForEachPlain(scope,nig)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;connect;[tezPlan, op1, op2]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>PlanException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>connect</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>TezEdgeDescriptor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>plan</ParamName>
                    <ParamType>TezOperPlan</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>from</ParamName>
                    <ParamType>TezOperator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>to</ParamName>
                    <ParamType>TezOperator</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>TezEdgeDescriptor [edge=new TezEdgeDescriptor()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>plan;connect;[from, to]</InnerMethodInvoke>
                <InnerMethodInvoke>to.inEdges;put;[from.getOperatorKey(), edge]</InnerMethodInvoke>
                <InnerMethodInvoke>from.outEdges;put;[to.getOperatorKey(), edge]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>PlanException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>connect</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>plan</ParamName>
                    <ParamType>TezOperPlan</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>from</ParamName>
                    <ParamType>TezOperator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>to</ParamName>
                    <ParamType>TezOperator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>edge</ParamName>
                    <ParamType>TezEdgeDescriptor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>plan;connect;[from, to]</InnerMethodInvoke>
                <InnerMethodInvoke>to.inEdges;put;[from.getOperatorKey(), edge]</InnerMethodInvoke>
                <InnerMethodInvoke>from.outEdges;put;[to.getOperatorKey(), edge]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>PlanException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>connectTezOpToNewPredecessor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>plan</ParamName>
                    <ParamType>TezOperPlan</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tezOp</ParamName>
                    <ParamType>TezOperator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>newPredecessor</ParamName>
                    <ParamType>TezOperator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>edge</ParamName>
                    <ParamType>TezEdgeDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>oldInputKey</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>plan;connect;[newPredecessor, tezOp]</InnerMethodInvoke>
                <InnerMethodInvoke>tezOp.inEdges;put;[newPredecessor.getOperatorKey(), edge]</InnerMethodInvoke>
                <InnerMethodInvoke>newPredecessor.outEdges;put;[tezOp.getOperatorKey(), edge]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>PlanException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>replaceInput</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tezOp</ParamName>
                    <ParamType>TezOperator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>oldInputKey</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>newInputKey</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>PlanException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>connectTezOpToNewSuccesor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>plan</ParamName>
                    <ParamType>TezOperPlan</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tezOp</ParamName>
                    <ParamType>TezOperator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>newSuccessor</ParamName>
                    <ParamType>TezOperator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>edge</ParamName>
                    <ParamType>TezEdgeDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>oldOutputKey</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>plan;connect;[tezOp, newSuccessor]</InnerMethodInvoke>
                <InnerMethodInvoke>newSuccessor.inEdges;put;[tezOp.getOperatorKey(), edge]</InnerMethodInvoke>
                <InnerMethodInvoke>tezOp.outEdges;put;[newSuccessor.getOperatorKey(), edge]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>PlanException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>replaceOutput</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tezOp</ParamName>
                    <ParamType>TezOperator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>oldOutputKey</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>newOutputKey</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>PlanException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isNonPackageInput</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>inputKey</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tezOp</ParamName>
                    <ParamType>TezOperator</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>PlanException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getForEach</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>POForEach</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>project</ParamName>
                    <ParamType>POProject</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rp</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>scope</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nig</ParamName>
                    <ParamType>NodeIdGenerator</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PhysicalPlan [forEachPlan=new PhysicalPlan()]</InnerVar>
                <InnerVar>List&lt;PhysicalPlan&gt; [forEachPlans=Lists.newArrayList()]</InnerVar>
                <InnerVar>List&lt;Boolean&gt; [flatten=Lists.newArrayList()]</InnerVar>
                <InnerVar>POForEach [forEach=new POForEach(new OperatorKey(scope,nig.getNextNodeId(scope)),rp,forEachPlans,flatten)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>forEachPlan;add;[project]</InnerMethodInvoke>
                <InnerMethodInvoke>forEachPlans;add;[forEachPlan]</InnerMethodInvoke>
                <InnerMethodInvoke>flatten;add;[true]</InnerMethodInvoke>
                <InnerMethodInvoke>forEach;setResultType;[DataType.BAG]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getForEachPlain</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>POForEach</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>scope</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nig</ParamName>
                    <ParamType>NodeIdGenerator</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>POProject [project=new POProject(new OperatorKey(scope,nig.getNextNodeId(scope)))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>project;setResultType;[DataType.TUPLE]</InnerMethodInvoke>
                <InnerMethodInvoke>project;setStar;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>project;setColumn;[1]</InnerMethodInvoke>
                <InnerMethodInvoke>project;setOverloaded;[true]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStore</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>POStore</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>scope</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nig</ParamName>
                    <ParamType>NodeIdGenerator</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>POStore [st=new POStoreTez(new OperatorKey(scope,nig.getNextNodeId(scope)))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>st;setIsTmpStore;[true]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setCustomPartitioner</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>customPartitioner</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tezOp</ParamName>
                    <ParamType>TezOperator</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>configureValueOnlyTupleOutput</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>edge</ParamName>
                    <ParamType>TezEdgeDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dataMovementType</ParamName>
                    <ParamType>DataMovementType</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>edge;setIntermediateOutputKeyClass;[POValueOutputTez.EmptyWritable.class.getName()]</InnerMethodInvoke>
                <InnerMethodInvoke>edge;setIntermediateOutputValueClass;[TUPLE_CLASS]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>bagDataTypeInCombinePlan</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>combinePlan</ParamName>
                    <ParamType>PhysicalPlan</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PhysicalOperator [lr=combinePlan.getLeaves().get(0)]</InnerVar>
                <InnerVar>POForEach [fe=(POForEach)combinePlan.getPredecessors(lr).get(0)]</InnerVar>
                <InnerVar>Type [dataBagType=new TOBAG().getReturnType()]</InnerVar>
                <InnerVar>List&lt;PhysicalPlan&gt; [inputPlans=fe.getInputPlans()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ExecException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>