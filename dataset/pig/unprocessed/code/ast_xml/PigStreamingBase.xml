<Class>
    <Id>1034</Id>
    <Package>org.apache.pig</Package>
    <ClassName>PigStreamingBase</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>PigToStream</SuperInterface>
        <SuperInterface>StreamToPig</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>PigStreamingBase  /** 
 * The interface is used for the custom mapping of - a  {@link Tuple} to a byte array. The byte array is fed to the stdinof the streaming process. - a byte array, received from the stdout of the streaming process, to a  {@link Tuple}. This interface is designed to provide a common protocol for data exchange between Pig runtime and streaming executables. Typically, a user implements this interface for a particular type of stream command and specifies the implementation class in the Pig DEFINE statement.
 * @since Pig 0.12
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>serialize</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>byte[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>WritableByteArray [data=serializeToBytes(t)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>serializeToBytes</MethodName>
            <MethodComment>/** 
 * Given a tuple, produce an array of bytes to be passed to the streaming executable.
 * @param t Tuple to serialize
 * @return Serialized form of the tuple
 * @throws IOException
 */
</MethodComment>
            <ReturnType>WritableByteArray</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>deserialize</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Tuple</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>bytes</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>deserialize</MethodName>
            <MethodComment>/** 
 * Given a byte array from a streaming executable, produce a tuple.
 * @param bytes  bytes to deserialize.
 * @param offset the offset in the byte array from which to deserialize.
 * @param length the number of bytes from the offset of the byte array to deserialize.
 * @return Data as a Pig Tuple.
 * @throws IOException
 */
</MethodComment>
            <ReturnType>Tuple</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>bytes</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>offset</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>length</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLoadCaster</MethodName>
            <MethodComment>/** 
 * This will be called on the front end during planning and not on the back end during execution.
 * @return the {@link LoadCaster} associated with this object, or null ifthere is no such LoadCaster.
 * @throws IOException if there is an exception during LoadCaster
 */
</MethodComment>
            <ReturnType>LoadCaster</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>