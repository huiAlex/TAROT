<Class>
    <Id>1046</Id>
    <Package>org.apache.pig.tools.pigstats.spark</Package>
    <ClassName>SparkPigStats</ClassName>
    <SuperClass>PigStats</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>jobSparkOperatorMap</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>jobSparkOperatorMap</FieldName>
            <FieldType>SparkJobStats</FieldType>
        </Field>
        <Field>
            <FieldName>LOG</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>sparkOperatorsSet</FieldName>
            <FieldType>Set</FieldType>
        </Field>
        <Field>
            <FieldName>sparkOperatorsSet</FieldName>
            <FieldType>SparkOperator</FieldType>
        </Field>
        <Field>
            <FieldName>sparkScriptState</FieldName>
            <FieldType>SparkScriptState</FieldType>
        </Field>
        <Field>
            <FieldName>conf</FieldName>
            <FieldType>Configuration</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>SparkPigStats</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initialize</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pigContext</ParamName>
                    <ParamType>PigContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sparkPlan</ParamName>
                    <ParamType>SparkOperPlan</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>conf</ParamName>
                    <ParamType>Configuration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>sparkScriptState;setScriptInfo;[sparkPlan]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addJobStats</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>poStore</ParamName>
                    <ParamType>POStore</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sparkOperator</ParamName>
                    <ParamType>SparkOperator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>jobId</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>jobMetricsListener</ParamName>
                    <ParamType>JobMetricsListener</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sparkContext</ParamName>
                    <ParamType>JavaSparkContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [isSuccess=SparkStatsUtil.isJobSuccess(jobId,sparkContext)]</InnerVar>
                <InnerVar>SparkJobStats [jobStats=new SparkJobStats(jobId,jobPlan,conf)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>jobStats;setSuccessful;[isSuccess]</InnerMethodInvoke>
                <InnerMethodInvoke>jobStats;collectStats;[jobMetricsListener]</InnerMethodInvoke>
                <InnerMethodInvoke>jobStats;addOutputInfo;[poStore, isSuccess, jobMetricsListener]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addInputInfoForSparkOper;[sparkOperator, jobStats, isSuccess, jobMetricsListener, conf]</InnerMethodInvoke>
                <InnerMethodInvoke>jobStats;initWarningCounters;[]</InnerMethodInvoke>
                <InnerMethodInvoke>jobSparkOperatorMap;put;[jobStats, sparkOperator]</InnerMethodInvoke>
                <InnerMethodInvoke>jobPlan;add;[jobStats]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addFailJobStats</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>poStore</ParamName>
                    <ParamType>POStore</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sparkOperator</ParamName>
                    <ParamType>SparkOperator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>jobId</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>jobMetricsListener</ParamName>
                    <ParamType>JobMetricsListener</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sparkContext</ParamName>
                    <ParamType>JavaSparkContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>e</ParamName>
                    <ParamType>Exception</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [isSuccess=false]</InnerVar>
                <InnerVar>SparkJobStats [jobStats=new SparkJobStats(jobId,jobPlan,conf)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>jobStats;setSuccessful;[isSuccess]</InnerMethodInvoke>
                <InnerMethodInvoke>jobStats;collectStats;[jobMetricsListener]</InnerMethodInvoke>
                <InnerMethodInvoke>jobStats;addOutputInfo;[poStore, isSuccess, jobMetricsListener]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addInputInfoForSparkOper;[sparkOperator, jobStats, isSuccess, jobMetricsListener, conf]</InnerMethodInvoke>
                <InnerMethodInvoke>jobSparkOperatorMap;put;[jobStats, sparkOperator]</InnerMethodInvoke>
                <InnerMethodInvoke>jobPlan;add;[jobStats]</InnerMethodInvoke>
                <InnerMethodInvoke>jobStats;setBackendException;[e]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addNativeJobStats</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sparkOperator</ParamName>
                    <ParamType>NativeSparkOperator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>jobId</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isSuccess</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>e</ParamName>
                    <ParamType>Exception</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>SparkJobStats [jobStats=new SparkJobStats(jobId,jobPlan,conf)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>jobStats;setSuccessful;[isSuccess]</InnerMethodInvoke>
                <InnerMethodInvoke>jobSparkOperatorMap;put;[jobStats, sparkOperator]</InnerMethodInvoke>
                <InnerMethodInvoke>jobPlan;add;[jobStats]</InnerMethodInvoke>
                <InnerMethodInvoke>jobStats;setBackendException;[e]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>finish</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;display;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>display</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>LOG;info;[getDisplayString()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;handleAggregateWarnings;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>handleAggregateWarnings</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Map&lt;Enum,Long&gt; [warningAggMap=new HashMap&lt;Enum,Long&gt;()]</InnerVar>
                <InnerVar>Iterator&lt;JobStats&gt; [iter=jobPlan.iterator()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>CompilationMessageCollector;logAggregate;[warningAggMap, CompilationMessageCollector.MessageType.Warning, LOG]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDisplayString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>StringBuilder [sb=new StringBuilder()]</InnerVar>
                <InnerVar>Iterator&lt;JobStats&gt; [iter=jobPlan.iterator()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getJobClient</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>JobClient</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isEmbedded</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAllStats</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAllErrorMessages</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSMMSpillCount</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getProactiveSpillCountObjects</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getProactiveSpillCountRecords</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNumberJobs</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addInputInfoForSparkOper</MethodName>
            <MethodComment>/** 
 * SparkPlan can have many SparkOperators. Each SparkOperator can have multiple POStores We currently collect stats once for every POStore, But do not want to collect input stats for every POStore e.g. After multiQuery optimization, the sparkOperator may look like this: POLoad_1             (PhysicalPlan) ...POStore_A \          / ...POSplit /          \ POLoad_2            (PhysicalPlan) ...POStore_B
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sparkOperator</ParamName>
                    <ParamType>SparkOperator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>jobStats</ParamName>
                    <ParamType>SparkJobStats</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isSuccess</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>jobMetricsListener</ParamName>
                    <ParamType>JobMetricsListener</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>conf</ParamName>
                    <ParamType>Configuration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>sparkOperatorsSet;add;[sparkOperator]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>