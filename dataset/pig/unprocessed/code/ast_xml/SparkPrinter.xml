<Class>
    <Id>1101</Id>
    <Package>org.apache.pig.backend.hadoop.executionengine.spark.plan</Package>
    <ClassName>SparkPrinter</ClassName>
    <SuperClass>SparkOpPlanVisitor</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>SparkPrinter  /** 
 * A visitor mechanism printing out the logical plan.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>mStream</FieldName>
            <FieldType>PrintStream</FieldType>
        </Field>
        <Field>
            <FieldName>isVerbose</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>SparkPrinter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ps</ParamName>
                    <ParamType>PrintStream</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>plan</ParamName>
                    <ParamType>SparkOperPlan</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mStream;println;["#--------------------------------------------------"]</InnerMethodInvoke>
                <InnerMethodInvoke>mStream;println;["# Spark Plan"]</InnerMethodInvoke>
                <InnerMethodInvoke>mStream;println;["#--------------------------------------------------"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setVerbose</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>verbose</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitSparkOp</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sparkOp</ParamName>
                    <ParamType>SparkOperator</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;POGlobalRearrangeSpark&gt; [glrList=PlanHelper.getPhysicalOperators(sparkOp.physicalPlan,POGlobalRearrangeSpark.class)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mStream;println;[""]</InnerMethodInvoke>
                <InnerMethodInvoke>mStream;println;["Spark node " + sparkOp.getOperatorKey().toString()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>VisitorException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>