<Class>
    <Id>561</Id>
    <Package>org.apache.pig</Package>
    <ClassName>LoadPredicatePushdown</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>LoadPredicatePushdown  /** 
 * This interface defines how a loader can support predicate pushdown. If a given loader implements this interface, pig will pushdown predicates based on type of operations supported by the loader on given set of fields. This interface is private in Pig 0.14 and will be made public in Pig 0.15 after PIG-4093. It is to be used only by builtin LoadFunc implementations till it is made public as PIG-4093 will cause API changes to this interface and make it backward incompatible.
 * @since Pig 0.14
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getPredicateFields</MethodName>
            <MethodComment>/** 
 * Find what fields of the data can support predicate pushdown.
 * @param location Location as returned by{@link LoadFunc#relativeToAbsolutePath(String,org.apache.hadoop.fs.Path)}
 * @param job The {@link Job} object - this should be used only to obtaincluster properties through  {@link Job#getConfiguration()} and not to set/queryany runtime job information.
 * @return list of field names that can be pushed down. Implementationsshould return null to indicate that there are no fields that support predicate pushdown
 * @throws IOException if an exception occurs while retrieving predicate fields
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>location</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>job</ParamName>
                    <ParamType>Job</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSupportedExpressionTypes</MethodName>
            <MethodComment>/** 
 * Indicate operations on fields supported by the loader for predicate pushdown
 * @return List of operations supported by the predicate pushdown loader
 */
</MethodComment>
            <ReturnType>Expression.OpType</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setPushdownPredicate</MethodName>
            <MethodComment>/** 
 * Push down expression to the loader
 * @param predicate expression to be filtered by the loader.
 * @throws IOException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>predicate</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>