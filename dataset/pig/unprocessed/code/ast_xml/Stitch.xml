<Class>
    <Id>385</Id>
    <Package>org.apache.pig.piggybank.evaluation</Package>
    <ClassName>Stitch</ClassName>
    <SuperClass>EvalFunc</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Stitch  /** 
 * Given a set of bags, stitch them together tuple by tuple.  That is,  assuming the bags have row numbers join them by row number.  So given two bags &lt;p&gt; {(1, 2), (3, 4)} and &lt;p&gt; {(5, 6), (7, 8)} the result will be &lt;p&gt; {(1, 2, 5, 6), (3, 4, 7, 8)} In general it is assumed that each bag has the same number of tuples. The implementation uses the first bag to determine the number of tuples placed in the output.  If bags beyond the first have fewer tuples then the resulting tuples will have fewer fields.  Nulls will not be filled in. &lt;p&gt;Any number of bags can be passed to this function.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>exec</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DataBag</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;DataBag&gt; [bags=new ArrayList&lt;DataBag&gt;(input.size())]</InnerVar>
                <InnerVar>DataBag [output=BagFactory.getInstance().newDefaultBag()]</InnerVar>
                <InnerVar>List&lt;Iterator&lt;Tuple&gt;&gt; [iters=new ArrayList&lt;Iterator&lt;Tuple&gt;&gt;(bags.size())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>outputSchema</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Schema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>inputSch</ParamName>
                    <ParamType>Schema</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;FieldSchema&gt; [fields=inputSch.getFields()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>