<Class>
    <Id>383</Id>
    <Package>org.apache.pig</Package>
    <ClassName>AlgebraicEvalFunc</ClassName>
    <SuperClass>AccumulatorEvalFunc</SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Algebraic</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>AlgebraicEvalFunc  /** 
 * This class is used to provide a free implementation of the Accumulator interface and EvalFunc class in the case of an Algebraic function. Instead of having to provide redundant implementations for Accumulator and EvalFunc, implementing the getInitial, getIntermed, and getFinal methods (which implies implementing the static classes they reference) will give you an implementation of each of those for free. &lt;br&gt;&lt;br&gt; One key thing to note is that if a subclass of AlgebraicEvalFunc wishes to use any constructor arguments, it MUST call super(args). &lt;br&gt;&lt;br&gt; IMPORTANT: the implementation of the Accumulator interface that this class provides is good, but it is simulated. For maximum efficiency, it is important to manually implement the accumulator interface. See  {@link Accumulator} for more information on how to do so.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>initEvalFunc</FieldName>
            <FieldType>EvalFunc</FieldType>
        </Field>
        <Field>
            <FieldName>initEvalFunc</FieldName>
            <FieldType>Tuple</FieldType>
        </Field>
        <Field>
            <FieldName>intermedEvalFunc</FieldName>
            <FieldType>EvalFunc</FieldType>
        </Field>
        <Field>
            <FieldName>intermedEvalFunc</FieldName>
            <FieldType>Tuple</FieldType>
        </Field>
        <Field>
            <FieldName>finalEvalFunc</FieldName>
            <FieldType>EvalFunc</FieldType>
        </Field>
        <Field>
            <FieldName>finalEvalFunc</FieldName>
            <FieldType>T</FieldType>
        </Field>
        <Field>
            <FieldName>mBagFactory</FieldName>
            <FieldType>BagFactory</FieldType>
        </Field>
        <Field>
            <FieldName>mTupleFactory</FieldName>
            <FieldType>TupleFactory</FieldType>
        </Field>
        <Field>
            <FieldName>intermediateDB</FieldName>
            <FieldType>DataBag</FieldType>
        </Field>
        <Field>
            <FieldName>wrapDB</FieldName>
            <FieldType>DataBag</FieldType>
        </Field>
        <Field>
            <FieldName>accumDB</FieldName>
            <FieldType>DataBag</FieldType>
        </Field>
        <Field>
            <FieldName>argTuple</FieldName>
            <FieldType>Tuple</FieldType>
        </Field>
        <Field>
            <FieldName>accumTup</FieldName>
            <FieldType>Tuple</FieldType>
        </Field>
        <Field>
            <FieldName>bagCombineThreshold</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>combineFactor</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>pigCounterHelper</FieldName>
            <FieldType>PigCounterHelper</FieldType>
        </Field>
        <Field>
            <FieldName>combine</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>constructorArgs</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>init</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>AlgebraicEvalFunc</MethodName>
            <MethodComment>/** 
 * It is key that if a subclass has a constructor, that it calls super(args...) or else this class will not instantiate properly.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>constructorArgs</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFinal</MethodName>
            <MethodComment>/** 
 * This must be implement as per a normal Algebraic interface. See  {@link Algebraic} formore information.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getInitial</MethodName>
            <MethodComment>/** 
 * This must be implement as per a normal Algebraic interface. See  {@link Algebraic} formore information.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getIntermed</MethodName>
            <MethodComment>/** 
 * This must be implement as per a normal Algebraic interface. See  {@link Algebraic} formore information.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeEvalFunc</MethodName>
            <MethodComment>/** 
 * This helper function instantiates an EvalFunc given its String class name.
 */
</MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>base</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuffer [sb=new StringBuffer()]</InnerVar>
                <InnerVar>boolean [first=true]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>sb.append(base);append;["("]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;[")"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>accumulate</MethodName>
            <MethodComment>/** 
 * This is the free accumulate implementation based on the static classes provided by the Algebraic static classes. This implemention works by leveraging the initial, intermediate, and final classes provided by the algebraic interface. The exec function of the Initial EvalFunc will be called on every Tuple of the input and the output will be collected in an intermediate state. Periodically, this intermediate state will have the Intermediate EvalFunc called on it 1 or more times. The Final EvalFunc is not called until getValue() is called.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>accumDB;clear;[]</InnerMethodInvoke>
                <InnerMethodInvoke>intermediateDB;add;[intermedEvalFunc.exec(accumTup)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cleanup</MethodName>
            <MethodComment>/** 
 * Per the Accumulator interface, this clears all of the variables used in the implementation.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getValue</MethodName>
            <MethodComment>/** 
 * This function returns the ultimate result. It is when getValue() is called that the Final EvalFunc's exec function is called on the accumulated data.
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>