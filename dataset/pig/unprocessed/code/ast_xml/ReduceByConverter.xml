<Class>
    <Id>150</Id>
    <Package>org.apache.pig.backend.hadoop.executionengine.spark.converter</Package>
    <ClassName>ReduceByConverter</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>RDDConverter</SuperInterface>
        <SuperInterface>Tuple</SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>LOG</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>tf</FieldName>
            <FieldType>TupleFactory</FieldType>
        </Field>
        <Field>
            <FieldName>poReduce</FieldName>
            <FieldType>POReduceBySpark</FieldType>
        </Field>
        <Field>
            <FieldName>poReduce</FieldName>
            <FieldType>POReduceBySpark</FieldType>
        </Field>
        <Field>
            <FieldName>poReduce</FieldName>
            <FieldType>POReduceBySpark</FieldType>
        </Field>
        <Field>
            <FieldName>lra</FieldName>
            <FieldType>POLocalRearrange</FieldType>
        </Field>
        <Field>
            <FieldName>useSecondaryKey</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>secondarySortOrder</FieldName>
            <FieldType>boolean[]</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>convert</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Tuple</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>predecessors</ParamName>
                    <ParamType>RDD&lt;Tuple&gt;</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>op</ParamName>
                    <ParamType>POReduceBySpark</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [parallelism=SparkPigContext.get().getParallelism(predecessors,op)]</InnerVar>
                <InnerVar>RDD&lt;Tuple&gt; [rdd=predecessors.get(0)]</InnerVar>
                <InnerVar>RDD&lt;Tuple2&lt;IndexedKey,Tuple&gt;&gt; [rddPair=rdd.map(new LocalRearrangeFunction(op.getLROp(),op.isUseSecondaryKey(),op.getSecondarySortOrder()),SparkUtil.&lt;IndexedKey,Tuple&gt;getTuple2Manifest())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>SparkUtil;assertPredecessorSize;[predecessors, op, 1]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>handleSecondarySort</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Tuple2&lt;IndexedKey,Tuple&gt;</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rdd</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>op</ParamName>
                    <ParamType>POReduceBySpark</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parallelism</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>RDD&lt;Tuple2&lt;Tuple,Object&gt;&gt; [rddPair=rdd.map(new ToKeyNullValueFunction(),SparkUtil.&lt;Tuple,Object&gt;getTuple2Manifest())]</InnerVar>
                <InnerVar>JavaPairRDD&lt;Tuple,Object&gt; [pairRDD=new JavaPairRDD&lt;Tuple,Object&gt;(rddPair,SparkUtil.getManifest(Tuple.class),SparkUtil.getManifest(Object.class))]</InnerVar>
                <InnerVar>JavaPairRDD&lt;Tuple,Object&gt; [sorted=pairRDD.repartitionAndSortWithinPartitions(new HashPartitioner(parallelism),new PigSecondaryKeyComparatorSpark(op.getSecondarySortOrder()))]</InnerVar>
                <InnerVar>JavaRDD&lt;Tuple&gt; [jrdd=sorted.keys()]</InnerVar>
                <InnerVar>JavaRDD&lt;Tuple2&lt;IndexedKey,Tuple&gt;&gt; [jrddPair=jrdd.map(new ToKeyValueFunction(op))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>apply</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Tuple</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Tuple2&lt;Tuple,Object&gt; [out=new Tuple2&lt;Tuple,Object&gt;(t,null)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ToKeyValueFunction</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>poReduce</ParamName>
                    <ParamType>POReduceBySpark</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>call</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>IndexedKey</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>MergeValuesFunction</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>poReduce</ParamName>
                    <ParamType>POReduceBySpark</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>apply</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Tuple</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>v1</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>v2</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Tuple [result=tf.newTuple(2)]</InnerVar>
                <InnerVar>DataBag [bag=DefaultBagFactory.getInstance().newDefaultBag()]</InnerVar>
                <InnerVar>Tuple [t=new DefaultTuple()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>LOG;debug;["MergeValuesFunction in : " + v1 + " , "+ v2]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ToTupleFunction</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>poReduce</ParamName>
                    <ParamType>POReduceBySpark</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>apply</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Tuple</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>v1</ParamName>
                    <ParamType>IndexedKey</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DataBag [bag=DefaultBagFactory.getInstance().newDefaultBag()]</InnerVar>
                <InnerVar>Tuple [t=new DefaultTuple()]</InnerVar>
                <InnerVar>Tuple [packagedTuple=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>LOG;debug;["ToTupleFunction in : " + v1]</InnerMethodInvoke>
                <InnerMethodInvoke>LOG;debug;["ToTupleFunction out : " + packagedTuple]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>LocalRearrangeFunction</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lra</ParamName>
                    <ParamType>POLocalRearrange</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>useSecondaryKey</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>secondarySortOrder</ParamName>
                    <ParamType>boolean[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>apply</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>IndexedKey</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Result [result]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>