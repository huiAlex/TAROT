<Class>
    <Id>917</Id>
    <Package>org.apache.pig</Package>
    <ClassName>Main</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Main  /** 
 * Main class for Pig engine.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>LOG4J_CONF</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>BRIEF</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>DEBUG</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>VERBOSE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>version</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>majorVersion</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>minorVersion</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>patchVersion</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>svnRevision</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>buildTime</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>PROGRESS_NOTIFICATION_LISTENER_KEY</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>PROGRESS_NOTIFICATION_LISTENER_ARG_KEY</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>FileLocalizer;deleteTempResourceFiles;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>main</MethodName>
            <MethodComment>/** 
 * The Main-Class for the Pig Jar that will provide a shell and setup a classpath appropriate for executing Jar files.  Warning, this method calls System.exit().
 * @param args -jar can be used to add additional jar files (colon separated). - will start a shell. -e will execute the rest of the command line as if it was input to the shell.
 * @throws IOException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>System;exit;[run(args,null)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>listener</ParamName>
                    <ParamType>PigProgressNotificationListener</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DateTime [startTime=new DateTime()]</InnerVar>
                <InnerVar>int [rc=1]</InnerVar>
                <InnerVar>boolean [verbose=false]</InnerVar>
                <InnerVar>boolean [gruntCalled=false]</InnerVar>
                <InnerVar>boolean [deleteTempFiles=true]</InnerVar>
                <InnerVar>String [logFileName=null]</InnerVar>
                <InnerVar>boolean [printScriptRunTime=true]</InnerVar>
                <InnerVar>PigContext [pigContext=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>printScriptRunTime</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>startTime</ParamName>
                    <ParamType>DateTime</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DateTime [endTime=new DateTime()]</InnerVar>
                <InnerVar>Duration [duration=new Duration(startTime,endTime)]</InnerVar>
                <InnerVar>Period [period=duration.toPeriod().normalizedStandard(PeriodType.time())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>log;info;["Pig script completed in " + PeriodFormat.getDefault().print(period) + " ("+ duration.getMillis()+ " ms)"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>killRunningJobsIfInterrupted</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>e</ParamName>
                    <ParamType>Throwable</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pigContext</ParamName>
                    <ParamType>PigContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Throwable [cause=e.getCause()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeListener</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PigProgressNotificationListener</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>properties</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getReturnCodeForStats</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>stats</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>dryrun</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>scriptFile</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pigContext</ParamName>
                    <ParamType>PigContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BufferedReader [rd=new BufferedReader(new FileReader(scriptFile))]</InnerVar>
                <InnerVar>DryRunGruntParser [dryrun=new DryRunGruntParser(rd,scriptFile,pigContext)]</InnerVar>
                <InnerVar>boolean [hasMacro=dryrun.parseStopOnError()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>RecognitionException</ExceptionType>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>configureLog4J</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>properties</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pigContext</ParamName>
                    <ParamType>PigContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [log4jconf=properties.getProperty(LOG4J_CONF)]</InnerVar>
                <InnerVar>String [trueString="true"]</InnerVar>
                <InnerVar>boolean [brief=trueString.equalsIgnoreCase(properties.getProperty(BRIEF))]</InnerVar>
                <InnerVar>Level [logLevel=Level.INFO]</InnerVar>
                <InnerVar>String [logLevelString=properties.getProperty(DEBUG)]</InnerVar>
                <InnerVar>Properties [props=log4jConfAsProperties(log4jconf)]</InnerVar>
                <InnerVar>Properties [backendProps=pigContext.getLog4jProperties()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>PropertyConfigurator;configure;[props]</InnerMethodInvoke>
                <InnerMethodInvoke>backendProps;setProperty;["log4j.logger.org.apache.pig", logLevel.toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>pigContext;setLog4jProperties;[backendProps]</InnerMethodInvoke>
                <InnerMethodInvoke>pigContext;setDefaultLogLevel;[logLevel]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>log4jConfAsProperties</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Properties</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>log4jconf</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Properties [properties=new Properties()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fetchRemoteParamFiles</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>paramFiles</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>properties</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;String&gt; [paramFiles2=new ArrayList&lt;String&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>runParamPreprocessor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BufferedReader</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>PigContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>origPigScript</ParamName>
                    <ParamType>BufferedReader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>scriptFile</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>createFile</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>org.apache.pig.tools.parameters.ParseException</ExceptionType>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMajorVersion</MethodName>
            <MethodComment>/** 
 * Returns the major version of Pig being run.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMinorVersion</MethodName>
            <MethodComment>/** 
 * Returns the major version of the Pig build being run.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPatchVersion</MethodName>
            <MethodComment>/** 
 * Returns the patch version of the Pig build being run.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSvnRevision</MethodName>
            <MethodComment>/** 
 * Returns the svn revision number of the Pig build being run.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBuildTime</MethodName>
            <MethodComment>/** 
 * Returns the built time of the Pig build being run.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getVersionString</MethodName>
            <MethodComment>/** 
 * Returns a version string formatted similarly to that of svn. &lt;pre&gt; Apache Pig version 0.11.0-SNAPSHOT (r1202387) compiled Nov 15 2011, 15:22:09 &lt;/pre&gt;
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>usage</MethodName>
            <MethodComment>/** 
 * Print usage string.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>System.out;println;["\n" + getVersionString() + "\n"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["USAGE: Pig [options] [-] : Run interactively in grunt shell."]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["       Pig [options] -e[xecute] cmd [cmd ...] : Run cmd(s)."]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["       Pig [options] [-f[ile]] file : Run cmds found in file."]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["  options include:"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["    -4, -log4jconf - Log4j configuration file, overrides log conf"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["    -b, -brief - Brief logging (no timestamps)"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["    -c, -check - Syntax check"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["    -d, -debug - Debug level, INFO is default"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["    -e, -execute - Commands to execute (within quotes)"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["    -f, -file - Path to the script to execute"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["    -g, -embedded - ScriptEngine classname or keyword for the ScriptEngine"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["    -h, -help - Display this message. You can specify topic to get help for that topic."]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["        properties is the only topic currently supported: -h properties."]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["    -i, -version - Display version information"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["    -l, -logfile - Path to client side log file; default is current working directory."]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["    -m, -param_file - Path to the parameter file"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["    -p, -param - Key value pair of the form param=val"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["    -r, -dryrun - Produces script with substituted parameters. Script is not executed."]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["    -t, -optimizer_off - Turn optimizations off. The following values are supported:"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["            ConstantCalculator - Calculate constants at compile time"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["            SplitFilter - Split filter conditions"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["            PushUpFilter - Filter as early as possible"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["            MergeFilter - Merge filter conditions"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["            PushDownForeachFlatten - Join or explode as late as possible"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["            LimitOptimizer - Limit as early as possible"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["            ColumnMapKeyPrune - Remove unused data"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["            AddForEach - Add ForEach to remove unneeded columns"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["            MergeForEach - Merge adjacent ForEach"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["            GroupByConstParallelSetter - Force parallel 1 for \"group all\" statement"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["            PartitionFilterOptimizer - Pushdown partition filter conditions to loader implementing LoadMetaData"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["            PredicatePushdownOptimizer - Pushdown filter predicates to loader implementing LoadPredicatePushDown"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["            All - Disable all optimizations"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["        All optimizations listed here are enabled by default. Optimization values are case insensitive."]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["    -v, -verbose - Print all error messages to screen"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["    -w, -warning - Turn warning logging on; also turns warning aggregation off"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["    -x, -exectype - Set execution mode: local|mapreduce|tez, default is mapreduce."]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["    -F, -stop_on_failure - Aborts execution on the first failed job; default is off"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["    -M, -no_multiquery - Turn multiquery optimization off; default is on"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["    -N, -no_fetch - Turn fetch optimization off; default is on"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["    -P, -propertyFile - Path to property file"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["    -printCmdDebug - Overrides anything else and prints the actual command used to run Pig, including"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["                     any environment variables that are set by the pig command."]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>printProperties</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>System.out;println;["The following properties are supported:"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["    Logging:"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["        verbose=true|false; default is false. This property is the same as -v switch"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["        brief=true|false; default is false. This property is the same as -b switch"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["        debug=OFF|ERROR|WARN|INFO|DEBUG; default is INFO. This property is the same as -d switch"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["        aggregate.warning=true|false; default is true. If true, prints count of warnings"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["            of each type rather than logging each warning."]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["    Performance tuning:"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["        pig.cachedbag.memusage=&lt;mem fraction&gt;; default is 0.2 (20% of all memory)."]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["            Note that this memory is shared across all large bags used by the application."]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["        pig.skewedjoin.reduce.memusagea=&lt;mem fraction&gt;; default is 0.3 (30% of all memory)."]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["            Specifies the fraction of heap available for the reducer to perform the join."]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["        pig.exec.nocombiner=true|false; default is false. "]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["            Only disable combiner as a temporary workaround for problems."]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["        opt.multiquery=true|false; multiquery is on by default."]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["            Only disable multiquery as a temporary workaround for problems."]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["        opt.fetch=true|false; fetch is on by default."]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["            Scripts containing Filter, Foreach, Limit, Stream, and Union can be dumped without MR jobs."]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["        pig.tmpfilecompression=true|false; compression is off by default."]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["            Determines whether output of intermediate jobs is compressed."]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["        pig.tmpfilecompression.codec=lzo|gzip; default is gzip."]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["            Used in conjunction with pig.tmpfilecompression. Defines compression type."]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["        pig.noSplitCombination=true|false. Split combination is on by default."]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["            Determines if multiple small files are combined into a single map."]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["        pig.exec.mapPartAgg=true|false. Default is false."]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["            Determines if partial aggregation is done within map phase, "]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["            before records are sent to combiner."]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["        pig.exec.mapPartAgg.minReduction=&lt;min aggregation factor&gt;. Default is 10."]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["            If the in-map partial aggregation does not reduce the output num records"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["            by this factor, it gets disabled."]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["    Miscellaneous:"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["        exectype=mapreduce|tez|local; default is mapreduce. This property is the same as -x switch"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["        pig.additional.jars.uris=&lt;comma seperated list of jars&gt;. Used in place of register command."]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["        udf.import.list=&lt;Colon seperated list of imports&gt;. Used to avoid package names in UDF."]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["        stop.on.failure=true|false; default is false. Set to true to terminate on the first error."]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["        pig.datetime.default.tz=&lt;UTC time offset&gt;. e.g. +08:00. Default is the default timezone of the host."]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["            Determines the timezone used to handle datetime datatype and UDFs. "]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["        pig.artifacts.download.location=&lt;path to download artifacts&gt;; default is ~/.groovy/grapes"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["            Determines the location to download the artifacts when registering jars using ivy coordinates."]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["Additionally, any Hadoop property can be specified."]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>validateLogFile</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>logFileName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>scriptFile</ParamName>
                    <ParamType>File</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [strippedDownScriptName=null]</InnerVar>
                <InnerVar>String [defaultLogFileName=(strippedDownScriptName == null ? "pig_" : strippedDownScriptName) + new Date().getTime() + ".log"]</InnerVar>
                <InnerVar>File [logFile]</InnerVar>
                <InnerVar>String [currDir=System.getProperty("user.dir")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>log;warn;["Cannot write to log file: " + logFileName]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFileFromCanonicalPath</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>canonicalPath</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>determineScriptType</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>SupportedScriptLang</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>file</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>runEmbeddedScript</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pigContext</ParamName>
                    <ParamType>PigContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>file</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>engine</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ScriptEngine [scriptEngine=ScriptEngine.getInstance(engine)]</InnerVar>
                <InnerVar>Map&lt;String,List&lt;PigStats&gt;&gt; [statsMap=scriptEngine.run(pigContext,file)]</InnerVar>
                <InnerVar>int [failCount=0]</InnerVar>
                <InnerVar>int [totalCount=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>log;info;["Run embedded script: " + engine]</InnerMethodInvoke>
                <InnerMethodInvoke>pigContext;connect;[]</InnerMethodInvoke>
                <InnerMethodInvoke>PigStatsUtil;setStatsMap;[statsMap]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>