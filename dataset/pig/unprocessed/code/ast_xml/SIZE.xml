<Class>
    <Id>53</Id>
    <Package>org.apache.pig.builtin</Package>
    <ClassName>SIZE</ClassName>
    <SuperClass>EvalFunc</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>SIZE  /** 
 * Generates the size of the argument passed to it.  For bytearrays this means the number of bytes.  For charrays the number of characters.  For bags the number of tuples, for tuples the number of fields, and for maps the number of keyvalue pairs.  For all other types the value of 1 is always returned.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>exec</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>outputSchema</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Schema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>Schema</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getArgToFuncMapping</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>FuncSpec</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>List&lt;FuncSpec&gt; [funcList=new ArrayList&lt;FuncSpec&gt;()]</InnerVar>
                <InnerVar>Schema [s=new Schema()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>s;add;[new Schema.FieldSchema(null,DataType.BYTEARRAY)]</InnerMethodInvoke>
                <InnerMethodInvoke>funcList;add;[new FuncSpec(this.getClass().getName(),s)]</InnerMethodInvoke>
                <InnerMethodInvoke>s;add;[new Schema.FieldSchema(null,DataType.CHARARRAY)]</InnerMethodInvoke>
                <InnerMethodInvoke>funcList;add;[new FuncSpec(StringSize.class.getName(),s)]</InnerMethodInvoke>
                <InnerMethodInvoke>s;add;[new Schema.FieldSchema(null,DataType.TUPLE)]</InnerMethodInvoke>
                <InnerMethodInvoke>funcList;add;[new FuncSpec(TupleSize.class.getName(),s)]</InnerMethodInvoke>
                <InnerMethodInvoke>s;add;[new Schema.FieldSchema(null,DataType.BAG)]</InnerMethodInvoke>
                <InnerMethodInvoke>funcList;add;[new FuncSpec(BagSize.class.getName(),s)]</InnerMethodInvoke>
                <InnerMethodInvoke>s;add;[new Schema.FieldSchema(null,DataType.MAP)]</InnerMethodInvoke>
                <InnerMethodInvoke>funcList;add;[new FuncSpec(MapSize.class.getName(),s)]</InnerMethodInvoke>
                <InnerMethodInvoke>s;add;[new Schema.FieldSchema(null,DataType.INTEGER)]</InnerMethodInvoke>
                <InnerMethodInvoke>funcList;add;[new FuncSpec(ConstantSize.class.getName(),s)]</InnerMethodInvoke>
                <InnerMethodInvoke>s;add;[new Schema.FieldSchema(null,DataType.LONG)]</InnerMethodInvoke>
                <InnerMethodInvoke>funcList;add;[new FuncSpec(ConstantSize.class.getName(),s)]</InnerMethodInvoke>
                <InnerMethodInvoke>s;add;[new Schema.FieldSchema(null,DataType.FLOAT)]</InnerMethodInvoke>
                <InnerMethodInvoke>funcList;add;[new FuncSpec(ConstantSize.class.getName(),s)]</InnerMethodInvoke>
                <InnerMethodInvoke>s;add;[new Schema.FieldSchema(null,DataType.DOUBLE)]</InnerMethodInvoke>
                <InnerMethodInvoke>funcList;add;[new FuncSpec(ConstantSize.class.getName(),s)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>allowCompileTimeCalculation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>