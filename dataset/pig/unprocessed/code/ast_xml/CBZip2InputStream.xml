<Class>
    <Id>44</Id>
    <Package>org.apache.tools.bzip2r</Package>
    <ClassName>CBZip2InputStream</ClassName>
    <SuperClass>InputStream</SuperClass>
    <SuperInterfaceList>
        <SuperInterface>BZip2Constants</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>CBZip2InputStream  /** 
 * An input stream that decompresses from the BZip2 format (without the file header chars) to be read as any other stream.
 * @author &lt;a href="mailto:keiron@aftexsw.com"&gt;Keiron Liddle&lt;/a&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>last</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>origPtr</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>blockSize100k</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>blockRandomised</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>bsBuff</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>bsLive</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>mCrc</FieldName>
            <FieldType>CRC</FieldType>
        </Field>
        <Field>
            <FieldName>inUse</FieldName>
            <FieldType>boolean[]</FieldType>
        </Field>
        <Field>
            <FieldName>nInUse</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>seqToUnseq</FieldName>
            <FieldType>char[]</FieldType>
        </Field>
        <Field>
            <FieldName>unseqToSeq</FieldName>
            <FieldType>char[]</FieldType>
        </Field>
        <Field>
            <FieldName>selector</FieldName>
            <FieldType>char[]</FieldType>
        </Field>
        <Field>
            <FieldName>selectorMtf</FieldName>
            <FieldType>char[]</FieldType>
        </Field>
        <Field>
            <FieldName>tt</FieldName>
            <FieldType>int[]</FieldType>
        </Field>
        <Field>
            <FieldName>ll8</FieldName>
            <FieldType>char[]</FieldType>
        </Field>
        <Field>
            <FieldName>unzftab</FieldName>
            <FieldType>int[]</FieldType>
        </Field>
        <Field>
            <FieldName>limit</FieldName>
            <FieldType>int[][]</FieldType>
        </Field>
        <Field>
            <FieldName>base</FieldName>
            <FieldType>int[][]</FieldType>
        </Field>
        <Field>
            <FieldName>perm</FieldName>
            <FieldType>int[][]</FieldType>
        </Field>
        <Field>
            <FieldName>minLens</FieldName>
            <FieldType>int[]</FieldType>
        </Field>
        <Field>
            <FieldName>innerBsStream</FieldName>
            <FieldType>FSDataInputStream</FieldType>
        </Field>
        <Field>
            <FieldName>readLimit</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>readCount</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>streamEnd</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>currentChar</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>START_BLOCK_STATE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>RAND_PART_A_STATE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>RAND_PART_B_STATE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>RAND_PART_C_STATE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>NO_RAND_PART_A_STATE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>NO_RAND_PART_B_STATE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>NO_RAND_PART_C_STATE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>currentState</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>storedBlockCRC</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>storedCombinedCRC</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>computedBlockCRC</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>computedCombinedCRC</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>checkComputedCombinedCRC</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>i2</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>count</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>chPrev</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>ch2</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>i</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>tPos</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>rNToGo</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>rTPos</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>j2</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>z</FieldName>
            <FieldType>char</FieldType>
        </Field>
        <Field>
            <FieldName>retPos</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>endOffsetOfSplit</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>signalToStopReading</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>mask</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>eob</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>eos</FieldName>
            <FieldType>long</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>cadvise</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>reason</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compressedStreamEOF</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;cadvise;["compressedStream EOF"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeMaps</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [i]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getReadLimit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setReadLimit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>readLimit</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getReadCount</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>CBZip2InputStream</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>zStream</ParamName>
                    <ParamType>FSDataInputStream</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>blockSize</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>end</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;bsSetStream;[zStream]</InnerMethodInvoke>
                <InnerMethodInvoke>null;initialize;[blockSize]</InnerMethodInvoke>
                <InnerMethodInvoke>null;initBlock;[blockSize != -1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setupBlock;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>read</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>close</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPos</MethodName>
            <MethodComment>/** 
 * getPos is used by the caller to know when the processing of the current  {@link InputSplit} is complete. In this method, as we read each bzipblock, we keep returning the beginning of the  {@link InputSplit} as thereturn value until we hit a block  which starts at a position &gt;= end of current split. At that point we should set up retpos such that after a  record is read, future getPos() calls will get a value &gt; end of current  split - this way we will read only one record out of that bzip block -  the rest of the records from that bzip block should be read by the next  map task while processing the next split
 * @return
 * @throws IOException
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initialize</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>blockSize</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setDecompressStructureSizes;[blockSize]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initBlock</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>searchForMagic</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>long [pos=innerBsStream.getPos()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;getAndMoveToFrontDecode;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mCrc;initialiseCRC;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>endBlock</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>complete</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>blockOverrun</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;cadvise;["block overrun"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>badBlockHeader</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;cadvise;["bad block header"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>crcError</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;cadvise;["CRC error"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>bsSetStream</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>f</ParamName>
                    <ParamType>FSDataInputStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readBs</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>bsR</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>n</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [v]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>bsGetUChar</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>char</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>bsGetint</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [u=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>bsGetIntVS</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>numBits</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>bsGetInt32</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hbCreateDecodeTables</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>limit</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>base</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>perm</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>length</ParamName>
                    <ParamType>char[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>minLen</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>maxLen</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>alphaSize</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [pp, i, j, vec]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>recvDecodingTables</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>char [len[][]=new char[N_GROUPS][MAX_ALPHA_SIZE]]</InnerVar>
                <InnerVar>int [i, j, t, nGroups, nSelectors, alphaSize]</InnerVar>
                <InnerVar>int [minLen, maxLen]</InnerVar>
                <InnerVar>boolean[] [inUse16=new boolean[16]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;makeMaps;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAndMoveToFrontDecode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>char[] [yy=new char[256]]</InnerVar>
                <InnerVar>int [i, j, nextSym, limitLast]</InnerVar>
                <InnerVar>int [EOB, groupNo, groupPos]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;recvDecodingTables;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setupBlock</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int[] [cftab=new int[257]]</InnerVar>
                <InnerVar>char [ch]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setupRandPartA</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setupNoRandPartA</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setupRandPartB</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setupRandPartC</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setupNoRandPartB</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setupNoRandPartC</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setDecompressStructureSizes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>newSize100k</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [n=baseBlockSize * newSize100k]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>