<Class>
    <Id>47</Id>
    <Package>org.apache.pig.tools.cmdline</Package>
    <ClassName>CmdLineParser</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>EndOfOpts</FieldName>
            <FieldType>char</FieldType>
        </Field>
        <Field>
            <FieldName>mArgs</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>mShort</FieldName>
            <FieldType>HashMap</FieldType>
        </Field>
        <Field>
            <FieldName>mShort</FieldName>
            <FieldType>Character</FieldType>
        </Field>
        <Field>
            <FieldName>mLong</FieldName>
            <FieldType>HashMap</FieldType>
        </Field>
        <Field>
            <FieldName>mLong</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>mArgNum</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>mVal</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>CmdLineParser</MethodName>
            <MethodComment>/** 
 * @param args String array of arguments passed to the program.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>registerOpt</MethodName>
            <MethodComment>/** 
 * Register a command line option.
 * @param c Single character designator for this option.  It cannot be '-'.
 * @param s Full word designator for this option.  This can be null, in which caseno long designator will exist for this option.
 * @param ve If REQUIRED, a value will be expected with this option.  IfOPTIONAL a value will be accepted if it is seen.
 * @throws AssertionError if there is no short option, or if this option has already beenused.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>char</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ve</ParamName>
                    <ParamType>ValueExpected</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Character [cc=Character.valueOf(c)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNextOpt</MethodName>
            <MethodComment>/** 
 * Get the next option.
 * @return The short designator for the next argument.  If there are no more argumentsthan the special designator CmdLineParser.EndOfOpts will be returned.
 * @throws ParseException if an unknown option is found or an option thatexpects a value does not have one or a value that does not expect a value does have one.
 */
</MethodComment>
            <ReturnType>char</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [offset=1]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ParseException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRemainingArgs</MethodName>
            <MethodComment>/** 
 * Get any remaining arguments.
 * @return In general this function will null.Only if the caller passed a '-' or '--' followed by other arguments.  In that case the remainder of the args array will be returned.
 */
</MethodComment>
            <ReturnType>String[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String[] [remainders=new String[mArgs.length - mArgNum]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>System;arraycopy;[mArgs, mArgNum, remainders, 0, remainders.length]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getValStr</MethodName>
            <MethodComment>/** 
 * Get the value, as a string.
 * @return The value associated with the current option.  If there is no value,then null will be returned.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getValInt</MethodName>
            <MethodComment>/** 
 * Get the value, as an Integer.
 * @return The value associated with the current option.  If there is not value, thennull will be returned.
 * @throws NumberFormatException if the value cannot be converted to an integer.
 */
</MethodComment>
            <ReturnType>Integer</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>NumberFormatException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>