<Class>
    <Id>677</Id>
    <Package>org.apache.pig.parser</Package>
    <ClassName>PigMacro</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>LOG</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>fileName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>name</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>body</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>params</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>params</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>rets</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>rets</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>seen</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>seen</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>macroStack</FieldName>
            <FieldType>Set</FieldType>
        </Field>
        <Field>
            <FieldName>macroStack</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>pigContext</FieldName>
            <FieldType>PigContext</FieldType>
        </Field>
        <Field>
            <FieldName>idx</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>startLine</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>PigMacro</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>file</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>params</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>returns</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>body</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>seen</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>LOG;debug;["Macro '" + name + "' is defined"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setStack</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>stack</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStack</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setStartLine</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>start</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStartLine</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setPigContext</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pigContext</ParamName>
                    <ParamType>PigContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>inline</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>CommonTree</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>inputs</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>outputs</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>CommonTree</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>file</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [in=substituteParams(inputs,outputs,t.getLine(),file)]</InnerVar>
                <InnerVar>Set&lt;String&gt; [masks=new HashSet&lt;String&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ParserException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>substituteParams</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>inputs</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>outputs</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>line</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>file</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [isVoidReturn=false]</InnerVar>
                <InnerVar>String[] [args=new String[params.size()]]</InnerVar>
                <InnerVar>StringWriter [writer=new StringWriter()]</InnerVar>
                <InnerVar>BufferedReader [in=new BufferedReader(new StringReader(body))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>LOG;debug;["--- after substition:\n" + writer.toString()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ParserException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>maskAlias</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>CommonTree</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>in</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>masks</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tree</ParamName>
                    <ParamType>CommonTree</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>file</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [line=tree.getChild(0).getLine()]</InnerVar>
                <InnerVar>CharStream [input=null]</InnerVar>
                <InnerVar>QueryLexer [lex=new QueryLexer(input)]</InnerVar>
                <InnerVar>CommonTokenStream [tokens=new CommonTokenStream(lex)]</InnerVar>
                <InnerVar>QueryParser.query_return [result=null]</InnerVar>
                <InnerVar>QueryParser [parser=QueryParserUtils.createParser(tokens,startLine - 1)]</InnerVar>
                <InnerVar>CommonTree [ast=(CommonTree)result.getTree()]</InnerVar>
                <InnerVar>List&lt;CommonTree&gt; [macroDefNodes=new ArrayList&lt;CommonTree&gt;()]</InnerVar>
                <InnerVar>PigParserNode [pnode=(PigParserNode)tree]</InnerVar>
                <InnerVar>List&lt;InvocationPoint&gt; [invStack=pnode.getInvocationStack()]</InnerVar>
                <InnerVar>List&lt;InvocationPoint&gt; [newInvStack=(invStack == null) ? new ArrayList&lt;InvocationPoint&gt;() : new ArrayList&lt;InvocationPoint&gt;(invStack)]</InnerVar>
                <InnerVar>InvocationPoint [pt=new InvocationPoint(line,file,name)]</InnerVar>
                <InnerVar>List&lt;CommonTree&gt; [inlineNodes=new ArrayList&lt;CommonTree&gt;()]</InnerVar>
                <InnerVar>CommonTreeNodeStream [nodes=new CommonTreeNodeStream(ast)]</InnerVar>
                <InnerVar>AliasMasker [walker=new AliasMasker(nodes)]</InnerVar>
                <InnerVar>AliasMasker.query_return [result2=null]</InnerVar>
                <InnerVar>CommonTree [commonTree=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>LOG;debug;["AST for macro '" + name + "':\n"+ ast.toStringTree()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;traverseMacro;[ast, macroDefNodes, "MACRO_DEF"]</InnerMethodInvoke>
                <InnerMethodInvoke>newInvStack;add;[pt]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setInvocationStack;[ast, newInvStack]</InnerMethodInvoke>
                <InnerMethodInvoke>null;traverseMacro;[ast, inlineNodes, "MACRO_INLINE"]</InnerMethodInvoke>
                <InnerMethodInvoke>walker;setParams;[masks, name, idx++]</InnerMethodInvoke>
                <InnerMethodInvoke>LOG;debug;["AST for masked macro '" + name + "':\n"+ commonTree.toStringTree()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ParserException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setInvocationStack</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ast</ParamName>
                    <ParamType>Tree</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stack</ParamName>
                    <ParamType>InvocationPoint</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PigParserNode [node=(PigParserNode)ast]</InnerVar>
                <InnerVar>int [n=node.getChildCount()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>node;setInvocationStack;[stack]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>validate</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>HashSet&lt;String&gt; [testSet=new HashSet&lt;String&gt;()]</InnerVar>
                <InnerVar>StreamTokenizer [st=new StreamTokenizer(new StringReader(body))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>st;wordChars;['.', '.']</InnerMethodInvoke>
                <InnerMethodInvoke>st;wordChars;['0', '9']</InnerMethodInvoke>
                <InnerMethodInvoke>st;wordChars;['_', '_']</InnerMethodInvoke>
                <InnerMethodInvoke>st;wordChars;['$', '$']</InnerMethodInvoke>
                <InnerMethodInvoke>st;lowerCaseMode;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>st;ordinaryChar;['/']</InnerMethodInvoke>
                <InnerMethodInvoke>st;slashStarComments;[true]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isMultiValueReturn</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>st</ParamName>
                    <ParamType>StreamTokenizer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mlist</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>comma</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [lookahead=st.nextToken()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>matchDollarAlias</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>st</ParamName>
                    <ParamType>StreamTokenizer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>next</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [type=next ? st.nextToken() : st.ttype]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>matchWord</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>st</ParamName>
                    <ParamType>StreamTokenizer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>word</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>next</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [type=next ? st.nextToken() : st.ttype]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>matchChar</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>st</ParamName>
                    <ParamType>StreamTokenizer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>next</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [type=next ? st.nextToken() : st.ttype]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>skipSingleLineComment</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>st</ParamName>
                    <ParamType>StreamTokenizer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [lineNo=st.lineno()]</InnerVar>
                <InnerVar>int [lookahead=st.nextToken()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>st;pushBack;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>traverseMacro</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Tree</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nodes</ParamName>
                    <ParamType>CommonTree</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nodeType</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [n=t.getChildCount()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>macroInline</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>CommonTree</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>CommonTree</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>macroDefs</ParamName>
                    <ParamType>PigMacro</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>macroStack</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pigContext</ParamName>
                    <ParamType>PigContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [mn=t.getChild(0).getText()]</InnerVar>
                <InnerVar>PigMacro [macro=null]</InnerVar>
                <InnerVar>String [file=((PigParserNode)t).getFileName()]</InnerVar>
                <InnerVar>Set&lt;String&gt; [newStack=new HashSet&lt;String&gt;(macroStack)]</InnerVar>
                <InnerVar>int [n=t.getChild(1).getChildCount()]</InnerVar>
                <InnerVar>String[] [rets=new String[n]]</InnerVar>
                <InnerVar>int [m=t.getChild(2).getChildCount()]</InnerVar>
                <InnerVar>String[] [params=new String[m]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>newStack;add;[macro.name]</InnerMethodInvoke>
                <InnerMethodInvoke>macro;setStack;[newStack]</InnerMethodInvoke>
                <InnerMethodInvoke>macro;setPigContext;[pigContext]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ParserException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getErrorMessage</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>file</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>line</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>header</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>reason</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuilder [sb=new StringBuilder()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>sb;append;["&lt;"]</InnerMethodInvoke>
                <InnerMethodInvoke>sb.append("line ").append(line).append("&gt; ");append;[header]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>