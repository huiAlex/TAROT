<Class>
    <Id>1105</Id>
    <Package>org.apache.pig.newplan.logical.relational</Package>
    <ClassName>LogicalPlan</ClassName>
    <SuperClass>BaseOperatorPlan</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>LogicalPlan  /** 
 * LogicalPlan is the logical view of relational operations Pig will execute for a given script.  Note that it contains only relational operations. All expressions will be contained in LogicalExpressionPlans inside each relational operator.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>LogicalPlan</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>other</ParamName>
                    <ParamType>LogicalPlan</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>LogicalPlan</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isEqual</MethodName>
            <MethodComment>/** 
 * Equality is checked by calling equals on every leaf in the plan.  This assumes that plans are always connected graphs.  It is somewhat inefficient since every leaf will test equality all the way to every root.  But it is only intended for use in testing, so that should be ok.  Checking predecessors (as opposed to successors) was chosen because splits (which have multiple successors) do not depend on order of outputs for correctness, whereas joins (with multiple predecessors) do.  That is, reversing the outputs of split in the graph has no correctness implications, whereas reversing the inputs of join can.  This method of doing equals will detect predecessors in different orders but not successors in different orders. It will return false if either plan has non deterministic EvalFunc.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>other</ParamName>
                    <ParamType>OperatorPlan</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>explain</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ps</ParamName>
                    <ParamType>PrintStream</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>format</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>verbose</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ps;println;["#-----------------------------------------------"]</InnerMethodInvoke>
                <InnerMethodInvoke>ps;println;["# New Logical Plan:"]</InnerMethodInvoke>
                <InnerMethodInvoke>ps;println;["#-----------------------------------------------"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findByAlias</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Operator</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>alias</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Iterator&lt;Operator&gt; [it=getOperators()]</InnerVar>
                <InnerVar>List&lt;Operator&gt; [ops=new ArrayList&lt;Operator&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSignature</MethodName>
            <MethodComment>/** 
 * Returns the signature of the LogicalPlan. The signature is a unique identifier for a given plan generated by a Pig script. The same script run multiple times with the same version of Pig is guaranteed to produce the same signature, even if the input or output locations differ.
 * @return a unique identifier for the logical plan
 * @throws FrontendException if signature can't be computed
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>HashFunction [hf=Hashing.murmur3_32(0)]</InnerVar>
                <InnerVar>HashOutputStream [hos=new HashOutputStream(hf)]</InnerVar>
                <InnerVar>PrintStream [ps=new PrintStream(hos)]</InnerVar>
                <InnerVar>LogicalPlanPrinter [printer=new LogicalPlanPrinter(this,ps)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>printer;visit;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>validate</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pigContext</ParamName>
                    <ParamType>PigContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>scope</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>skipInputOutputValidation</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CompilationMessageCollector [collector=new CompilationMessageCollector()]</InnerVar>
                <InnerVar>boolean [aggregateWarning="true".equalsIgnoreCase(pigContext.getProperties().getProperty("aggregate.warning"))]</InnerVar>
                <InnerVar>BlackAndWhitelistValidator [validator=new BlackAndWhitelistValidator(pigContext,this)]</InnerVar>
                <InnerVar>UidResetter [uidResetter=new UidResetter(this)]</InnerVar>
                <InnerVar>SchemaResetter [schemaResetter=new SchemaResetter(this,true)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>new DanglingNestedNodeRemover(this);visit;[]</InnerMethodInvoke>
                <InnerMethodInvoke>new ColumnAliasConversionVisitor(this);visit;[]</InnerMethodInvoke>
                <InnerMethodInvoke>new SchemaAliasVisitor(this);visit;[]</InnerMethodInvoke>
                <InnerMethodInvoke>new ScalarVisitor(this,pigContext,scope);visit;[]</InnerMethodInvoke>
                <InnerMethodInvoke>new ForEachUserSchemaVisitor(this);visit;[]</InnerMethodInvoke>
                <InnerMethodInvoke>new ImplicitSplitInsertVisitor(this);visit;[]</InnerMethodInvoke>
                <InnerMethodInvoke>new DuplicateForEachColumnRewriteVisitor(this);visit;[]</InnerMethodInvoke>
                <InnerMethodInvoke>new TypeCheckingRelVisitor(this,collector);visit;[]</InnerMethodInvoke>
                <InnerMethodInvoke>new UnionOnSchemaSetter(this);visit;[]</InnerMethodInvoke>
                <InnerMethodInvoke>new CastLineageSetter(this,collector);visit;[]</InnerMethodInvoke>
                <InnerMethodInvoke>new ScalarVariableValidator(this);visit;[]</InnerMethodInvoke>
                <InnerMethodInvoke>new StoreAliasSetter(this);visit;[]</InnerMethodInvoke>
                <InnerMethodInvoke>new SortInfoSetter(this);visit;[]</InnerMethodInvoke>
                <InnerMethodInvoke>validator;validate;[]</InnerMethodInvoke>
                <InnerMethodInvoke>uidResetter;visit;[]</InnerMethodInvoke>
                <InnerMethodInvoke>schemaResetter;visit;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>optimize</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pigContext</ParamName>
                    <ParamType>PigContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>HashSet&lt;String&gt; [disabledOptimizerRules]</InnerVar>
                <InnerVar>String [pigOptimizerRulesDisabled=pigContext.getProperties().getProperty(PigConstants.PIG_OPTIMIZER_RULES_DISABLED_KEY)]</InnerVar>
                <InnerVar>LogicalPlanOptimizer [optimizer=new LogicalPlanOptimizer(this,100,disabledOptimizerRules,pigContext)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>optimizer;optimize;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>