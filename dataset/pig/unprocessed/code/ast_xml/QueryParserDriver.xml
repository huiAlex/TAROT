<Class>
    <Id>72</Id>
    <Package>org.apache.pig.parser</Package>
    <ClassName>QueryParserDriver</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>LOG</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>MACRO_DEF</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>MACRO_INLINE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>IMPORT_DEF</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>REGISTER_DEF</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>pigContext</FieldName>
            <FieldType>PigContext</FieldType>
        </Field>
        <Field>
            <FieldName>pigServer</FieldName>
            <FieldType>PigServer</FieldType>
        </Field>
        <Field>
            <FieldName>scope</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>fileNameMap</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>fileNameMap</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>operators</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>operators</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>lastRel</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>importSeen</FieldName>
            <FieldType>Set</FieldType>
        </Field>
        <Field>
            <FieldName>importSeen</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>macroSeen</FieldName>
            <FieldType>Set</FieldType>
        </Field>
        <Field>
            <FieldName>macroSeen</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>fnameMap</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>fnameMap</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>QueryParserDriver</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pigContext</ParamName>
                    <ParamType>PigContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>scope</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fileNameMap</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseSchema</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Tree</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tokens</ParamName>
                    <ParamType>CommonTokenStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>QueryParser [parser=QueryParserUtils.createParser(tokens)]</InnerVar>
                <InnerVar>schema_return [result=null]</InnerVar>
                <InnerVar>Tree [ast=(Tree)result.getTree()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkError;[parser]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ParserException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseSchema</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>LogicalSchema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CommonTokenStream [tokenStream=tokenize(input,null)]</InnerVar>
                <InnerVar>LogicalSchema [schema=null]</InnerVar>
                <InnerVar>Tree [ast=parseSchema(tokenStream)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ParserException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseConstant</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Tree</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tokens</ParamName>
                    <ParamType>CommonTokenStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>QueryParser [parser=QueryParserUtils.createParser(tokens)]</InnerVar>
                <InnerVar>literal_return [result=null]</InnerVar>
                <InnerVar>Tree [ast=(Tree)result.getTree()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkError;[parser]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ParserException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseConstant</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CommonTokenStream [tokenStream=tokenize(input,null)]</InnerVar>
                <InnerVar>Object [value=null]</InnerVar>
                <InnerVar>Tree [ast=parseConstant(tokenStream)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ParserException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parse</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>LogicalPlan</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>query</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LogicalPlan [plan=null]</InnerVar>
                <InnerVar>ScriptState [ss=ScriptState.get()]</InnerVar>
                <InnerVar>CommonTokenStream [tokenStream=tokenize(query,ss.getFileName())]</InnerVar>
                <InnerVar>Tree [ast=parse(tokenStream)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ParserException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOperators</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>tokenize</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>CommonTokenStream</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>query</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>source</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CharStream [input]</InnerVar>
                <InnerVar>QueryLexer [lexer=new QueryLexer(input)]</InnerVar>
                <InnerVar>CommonTokenStream [tokens=new CommonTokenStream(lexer)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkError;[lexer]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ParserException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkError</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>recognizer</ParamName>
                    <ParamType>BaseRecognizer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [errorCount=recognizer.getNumberOfSyntaxErrors()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ParserException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parse</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Tree</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tokens</ParamName>
                    <ParamType>CommonTokenStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>QueryParser [parser=QueryParserUtils.createParser(tokens)]</InnerVar>
                <InnerVar>QueryParser.query_return [result=null]</InnerVar>
                <InnerVar>Tree [ast=(Tree)result.getTree()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkError;[parser]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ParserException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>validateAst</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Tree</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ast</ParamName>
                    <ParamType>Tree</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CommonTreeNodeStream [nodes=new CommonTreeNodeStream(ast)]</InnerVar>
                <InnerVar>AstValidator [walker=new AstValidator(nodes)]</InnerVar>
                <InnerVar>AstValidator.query_return [newResult=walker.query()]</InnerVar>
                <InnerVar>Tree [newAst=(Tree)newResult.getTree()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkError;[walker]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>RecognitionException</ExceptionType>
                <ExceptionType>ParserException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>expandMacro</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Tree</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ast</ParamName>
                    <ParamType>Tree</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;CommonTree&gt; [macroNodes=new ArrayList&lt;CommonTree&gt;()]</InnerVar>
                <InnerVar>List&lt;CommonTree&gt; [inlineNodes=new ArrayList&lt;CommonTree&gt;()]</InnerVar>
                <InnerVar>Map&lt;String,PigMacro&gt; [seen=new HashMap&lt;String,PigMacro&gt;()]</InnerVar>
                <InnerVar>List&lt;PigMacro&gt; [macroDefs=new ArrayList&lt;PigMacro&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>LOG;debug;["Original macro AST:\n" + ast.toStringTree() + "\n"]</InnerMethodInvoke>
                <InnerMethodInvoke>LOG;debug;["macro AST after import:\n" + ast.toStringTree() + "\n"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;traverse;[ast, macroNodes, inlineNodes]</InnerMethodInvoke>
                <InnerMethodInvoke>null;inlineMacro;[inlineNodes, macroDefs]</InnerMethodInvoke>
                <InnerMethodInvoke>LOG;debug;["Resulting macro AST:\n" + ast.toStringTree() + "\n"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ParserException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>inlineMacro</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>inlineNodes</ParamName>
                    <ParamType>CommonTree</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>macroDefs</ParamName>
                    <ParamType>PigMacro</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ParserException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>applyRegisters</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Tree</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ExecException</ExceptionType>
                <ExceptionType>ParserException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPigServer</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PigServer</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ExecException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>traverseInline</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Tree</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nodes</ParamName>
                    <ParamType>CommonTree</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [n=t.getChildCount()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>expandImport</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ast</ParamName>
                    <ParamType>Tree</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;CommonTree&gt; [nodes=new ArrayList&lt;CommonTree&gt;()]</InnerVar>
                <InnerVar>BlackAndWhitelistFilter [filter=new BlackAndWhitelistFilter(this.pigContext)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;traverseImport;[ast, nodes]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ParserException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>traverseImport</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Tree</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nodes</ParamName>
                    <ParamType>CommonTree</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [n=t.getChildCount()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>traverse</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Tree</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>macroNodes</ParamName>
                    <ParamType>CommonTree</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>inlineNodes</ParamName>
                    <ParamType>CommonTree</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [n=t.getChildCount()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMacroFile</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>FetchFileRet</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fname</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>FetchFileRet [localFileRet=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeMacroDef</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PigMacro</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>CommonTree</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>seen</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [mn=t.getChild(0).getText()]</InnerVar>
                <InnerVar>String [fname=((PigParserNode)t).getFileName()]</InnerVar>
                <InnerVar>Tree [defNode=t.getChild(1)]</InnerVar>
                <InnerVar>ArrayList&lt;String&gt; [params=new ArrayList&lt;String&gt;()]</InnerVar>
                <InnerVar>Tree [paramNode=defNode.getChild(0)]</InnerVar>
                <InnerVar>int [n=paramNode.getChildCount()]</InnerVar>
                <InnerVar>ArrayList&lt;String&gt; [returns=new ArrayList&lt;String&gt;()]</InnerVar>
                <InnerVar>Tree [retNode=defNode.getChild(1)]</InnerVar>
                <InnerVar>int [m=retNode.getChildCount()]</InnerVar>
                <InnerVar>Tree [bodyNode=defNode.getChild(2)]</InnerVar>
                <InnerVar>String [body=bodyNode.getChild(0).getText()]</InnerVar>
                <InnerVar>PigMacro [pm=new PigMacro(mn,fname,params,returns,body,seen)]</InnerVar>
                <InnerVar>PigParserNode [pnode=(PigParserNode)bodyNode.getChild(0)]</InnerVar>
                <InnerVar>Tree [defineNode=t.getParent()]</InnerVar>
                <InnerVar>Tree [stmtNode=defineNode.getParent()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>pm;setStartLine;[pnode.getStartLine()]</InnerMethodInvoke>
                <InnerMethodInvoke>seen;put;[mn, pm]</InnerMethodInvoke>
                <InnerMethodInvoke>stmtNode;deleteChild;[defineNode.getChildIndex()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ParserException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>macroImport</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>CommonTree</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [fname=t.getChild(0).getText()]</InnerVar>
                <InnerVar>Tree [macroAST=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>QueryParserUtils;replaceNodeWithNodeList;[t, (CommonTree)macroAST, fname]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ParserException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getErrorMessage</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>importFile</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>CommonTree</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>header</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>reason</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuilder [sb=new StringBuilder()]</InnerVar>
                <InnerVar>PigParserNode [node=(PigParserNode)t]</InnerVar>
                <InnerVar>String [file=node.getFileName()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>sb;append;["&lt;"]</InnerMethodInvoke>
                <InnerMethodInvoke>sb.append("line ").append(t.getLine()).append("&gt; ");append;[header]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLastRel</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>