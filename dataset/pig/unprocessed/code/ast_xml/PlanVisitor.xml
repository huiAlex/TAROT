<Class>
    <Id>627</Id>
    <Package>org.apache.pig.newplan</Package>
    <ClassName>PlanVisitor</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>PlanVisitor  /** 
 * A visitor mechanism for navigating and operating on a plan of  Operators.  This class contains the logic to traverse the plan.  It does not visit individual nodes.  That is left to implementing classes (such as LOVisitor).
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>DEFAULT_SCOPE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>plan</FieldName>
            <FieldType>OperatorPlan</FieldType>
        </Field>
        <Field>
            <FieldName>currentWalker</FieldName>
            <FieldType>PlanWalker</FieldType>
        </Field>
        <Field>
            <FieldName>walkers</FieldName>
            <FieldType>Deque</FieldType>
        </Field>
        <Field>
            <FieldName>walkers</FieldName>
            <FieldType>PlanWalker</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment>/** 
 * Entry point for visiting the plan.
 * @throws VisitorException if an error is encountered while visiting.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>currentWalker;walk;[this]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPlan</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>OperatorPlan</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PlanVisitor</MethodName>
            <MethodComment>/** 
 * @param plan OperatorPlan this visitor will visit.
 * @param walker PlanWalker this visitor will use to traverse the plan.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>plan</ParamName>
                    <ParamType>OperatorPlan</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>walker</ParamName>
                    <ParamType>PlanWalker</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>pushWalker</MethodName>
            <MethodComment>/** 
 * Push the current walker onto the stack of saved walkers and begin using the newly passed walker as the current walker.
 * @param walker new walker to set as the current walker.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>walker</ParamName>
                    <ParamType>PlanWalker</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>walkers;push;[currentWalker]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>popWalker</MethodName>
            <MethodComment>/** 
 * Pop the next to previous walker off of the stack and set it as the current walker.  This will drop the reference to the current walker.
 * @throws VisitorException if there are no more walkers on the stack.  Inthis case the current walker is not reset.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>