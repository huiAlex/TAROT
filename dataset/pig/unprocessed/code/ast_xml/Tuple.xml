<Class>
    <Id>344</Id>
    <Package>org.apache.pig.data</Package>
    <ClassName>Tuple</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>WritableComparable</SuperInterface>
        <SuperInterface>Serializable</SuperInterface>
        <SuperInterface>Iterable</SuperInterface>
        <SuperInterface>Object</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Tuple  /** 
 * An ordered list of Data.  A tuple has fields, numbered 0 through (number of fields - 1).  The entry in the field can be any datatype, or it can be null. &lt;p&gt; Tuples are constructed only by a  {@link TupleFactory}.  A {@link DefaultTupleFactory}is provided by the system.  If users wish to use their own type of Tuple, they should also provide an implementation of  {@link TupleFactory} toconstruct their types of Tuples.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>NULL</FieldName>
            <FieldType>byte</FieldType>
        </Field>
        <Field>
            <FieldName>NOTNULL</FieldName>
            <FieldType>byte</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>reference</MethodName>
            <MethodComment>/** 
 * Make this tuple reference the contents of another.  This method does not copy the underlying data.   It maintains references to the data from the original tuple (and possibly even to the data structure holding the data).
 * @param t Tuple to reference.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>size</MethodName>
            <MethodComment>/** 
 * Find the size of the tuple.  Used to be called arity().
 * @return number of fields in the tuple.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isNull</MethodName>
            <MethodComment>/** 
 * Find out if a given field is null.
 * @param fieldNum Number of field to check for null.
 * @return true if the field is null, false otherwise.
 * @throws ExecException if the field number given is greaterthan or equal to the number of fields in the tuple.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fieldNum</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>ExecException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getType</MethodName>
            <MethodComment>/** 
 * Find the type of a given field.
 * @param fieldNum Number of field to get the type for.
 * @return type, encoded as a byte value.  The values are defined in{@link DataType}.  If the field is null, then DataType.UNKNOWN will be returned.
 * @throws ExecException if the field number is greater than or equal tothe number of fields in the tuple.
 */
</MethodComment>
            <ReturnType>byte</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fieldNum</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>ExecException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>get</MethodName>
            <MethodComment>/** 
 * Get the value in a given field.
 * @param fieldNum Number of the field to get the value for.
 * @return value, as an Object.
 * @throws ExecException if the field number is greater than or equal tothe number of fields in the tuple.
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fieldNum</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>ExecException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAll</MethodName>
            <MethodComment>/** 
 * Get all of the fields in the tuple as a list.
 * @return a list of objects containing the fields of the tuplein order.
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>set</MethodName>
            <MethodComment>/** 
 * Set the value in a given field.  This should not be called unless the tuple was constructed by  {@link TupleFactory#newTuple(int)} with anargument greater than the fieldNum being passed here.  This call will not automatically expand the tuple size.  That is if you called  {@link TupleFactory#newTuple(int)} with a 2, it is okay to callthis function with a 1, but not with a 2 or greater.
 * @param fieldNum Number of the field to set the value for.
 * @param val Object to put in the indicated field.
 * @throws ExecException if the field number is greater than or equal tothe number of fields in the tuple.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fieldNum</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>val</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>ExecException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>append</MethodName>
            <MethodComment>/** 
 * Append a field to a tuple.  This method is not efficient as it may force copying of existing data in order to grow the data structure. Whenever possible you should construct your Tuple with  {@link TupleFactory#newTuple(int)} and then fill in the values with {@link #set(int,Object)}, rather than construct it with  {@link TupleFactory#newTuple()} and append values.
 * @param val Object to append to the tuple.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>val</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMemorySize</MethodName>
            <MethodComment>/** 
 * Determine the size of tuple in memory.  This is used by data bags to determine their memory size.  This need not be exact, but it should be a decent estimation.
 * @return estimated memory size, in bytes.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toDelimitedString</MethodName>
            <MethodComment>/** 
 * Write a tuple of values into a string. The output will be the result of calling toString on each of the values in the tuple.
 * @param delim Delimiter to use in the string.
 * @return A string containing the tuple.
 * @throws ExecException this is never thrown. This only exists for backwards compatability reasons.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>delim</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>ExecException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>