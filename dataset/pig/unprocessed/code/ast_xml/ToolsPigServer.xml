<Class>
    <Id>581</Id>
    <Package>org.apache.pig.tools</Package>
    <ClassName>ToolsPigServer</ClassName>
    <SuperClass>PigServer</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ToolsPigServer  /** 
 * ToolsPigServer is a subclass of PigServer intended only for Pig tools.  Users should not use this interface, as we make no promises about its stability or continued existence.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>plans</FieldName>
            <FieldType>PigPlans</FieldType>
        </Field>
        <Field>
            <FieldName>lp</FieldName>
            <FieldType>LogicalPlan</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ToolsPigServer</MethodName>
            <MethodComment>/** 
 * @param execTypeString can be 'mapreduce' or 'local'.  Local mode will use Hadoop's local job runner to execute the job on the local machine. Mapreduce mode will connect to a cluster to execute the job.
 * @throws ExecException if throws by PigServer
 * @throws IOException if throws by PigServer
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>execTypeString</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ExecException</ExceptionType>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ToolsPigServer</MethodName>
            <MethodComment>/** 
 * @param ctx the context to use to construct the PigServer
 * @throws ExecException if throws by PigServer
 * @throws IOException if throws by PigServer
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>PigContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ExecException</ExceptionType>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ToolsPigServer</MethodName>
            <MethodComment>/** 
 * @param execType execution type to start the engine in.
 * @param properties to use for this run
 * @throws ExecException if throws by PigServer
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>execType</ParamName>
                    <ParamType>ExecType</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>properties</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ExecException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>registerNoRun</MethodName>
            <MethodComment>/** 
 * Register a script without running it.  This method is not compatible with {@link #registerQuery(String)},  {@link #registerScript(String)},  {@link #store(String,String)} or {@link #openIterator(String)}.  It can be used with  {@link #getPlans()} and {@link #runPlan(LogicalPlan,String)} in this class only. The proper control flow is for the caller to call registerNoRun() and then getPlans() to get a copy of the plans.  The user can then modify the logical plan.  It can then be returned via runPlan(), which will execute the plan.
 * @param fileName File containing Pig Latin script to register.
 * @param params  the key is the parameter name, and the value is the parameter value
 * @param paramFiles   files which have the parameter setting
 * @throws IOException if it encounters problems reading the script
 * @throws FrontendException if it encounters problems parsing the script
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fileName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>params</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>paramFiles</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [substituted=null]</InnerVar>
                <InnerVar>FileInputStream [fis=null]</InnerVar>
                <InnerVar>Graph [g=getClonedGraph()]</InnerVar>
                <InnerVar>LogicalPlan [lp=g.getPlan(null)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPlans</MethodName>
            <MethodComment>/** 
 * Get a class containing the Pig plans.  For now it just contains the new logical plan.  At some point in the future it should contain the MR plan as well.
 * @return the pig plans.
 */
</MethodComment>
            <ReturnType>PigPlans</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>runPlan</MethodName>
            <MethodComment>/** 
 * Given a (modified) new logical plan, run the script.
 * @param newPlan plan to run
 * @param jobName name to give the MR jobs associated with this run
 * @return list of exec jobs describing the jobs that were run.
 * @throws FrontendException if plan translation fails.
 * @throws ExecException if running the job fails.
 */
</MethodComment>
            <ReturnType>ExecJob</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>newPlan</ParamName>
                    <ParamType>LogicalPlan</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>jobName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PigStats [stats=launchPlan(newPlan,jobName)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
                <ExceptionType>ExecException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PigPlans</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lp</ParamName>
                    <ParamType>LogicalPlan</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>