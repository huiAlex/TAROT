<Class>
    <Id>853</Id>
    <Package>org.apache.pig.backend.hadoop.executionengine.spark</Package>
    <ClassName>JobGraphBuilder</ClassName>
    <SuperClass>SparkOpPlanVisitor</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>LOG</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>NULLPART_JOB_ID</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>convertMap</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>convertMap</FieldName>
            <FieldType>Class&lt;? extends PhysicalOperator&gt;</FieldType>
        </Field>
        <Field>
            <FieldName>sparkStats</FieldName>
            <FieldType>SparkPigStats</FieldType>
        </Field>
        <Field>
            <FieldName>sparkContext</FieldName>
            <FieldType>JavaSparkContext</FieldType>
        </Field>
        <Field>
            <FieldName>jobMetricsListener</FieldName>
            <FieldType>JobMetricsListener</FieldType>
        </Field>
        <Field>
            <FieldName>jobGroupID</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>seenJobIDs</FieldName>
            <FieldType>Set</FieldType>
        </Field>
        <Field>
            <FieldName>seenJobIDs</FieldName>
            <FieldType>Integer</FieldType>
        </Field>
        <Field>
            <FieldName>sparkPlan</FieldName>
            <FieldType>SparkOperPlan</FieldType>
        </Field>
        <Field>
            <FieldName>sparkOpRdds</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>sparkOpRdds</FieldName>
            <FieldType>OperatorKey</FieldType>
        </Field>
        <Field>
            <FieldName>physicalOpRdds</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>physicalOpRdds</FieldName>
            <FieldType>OperatorKey</FieldType>
        </Field>
        <Field>
            <FieldName>jobConf</FieldName>
            <FieldType>JobConf</FieldType>
        </Field>
        <Field>
            <FieldName>pc</FieldName>
            <FieldType>PigContext</FieldType>
        </Field>
        <Field>
            <FieldName>rp</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>replaced</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>isAfterSampleOperator</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>JobGraphBuilder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>plan</ParamName>
                    <ParamType>SparkOperPlan</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>convertMap</ParamName>
                    <ParamType>Class&lt;? extends PhysicalOperator&gt;</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sparkStats</ParamName>
                    <ParamType>SparkPigStats</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sparkContext</ParamName>
                    <ParamType>JavaSparkContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>jobMetricsListener</ParamName>
                    <ParamType>JobMetricsListener</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>jobGroupID</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>jobConf</ParamName>
                    <ParamType>JobConf</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pc</ParamName>
                    <ParamType>PigContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitSparkOp</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sparkOp</ParamName>
                    <ParamType>SparkOperator</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>new PhyPlanSetter(sparkOp.physicalPlan);visit;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>VisitorException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setReplicationForMergeJoin</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>plan</ParamName>
                    <ParamType>PhysicalPlan</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;Path&gt; [filesForMoreReplication=new ArrayList&lt;&gt;()]</InnerVar>
                <InnerVar>List&lt;POMergeJoin&gt; [poMergeJoins=PlanHelper.getPhysicalOperators(plan,POMergeJoin.class)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setReplicationForFiles;[filesForMoreReplication]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setReplicationForFiles</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>files</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>FileSystem [fs=FileSystem.get(this.jobConf)]</InnerVar>
                <InnerVar>short [replication=(short)jobConf.getInt(MRConfiguration.SUMIT_REPLICATION,10)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>finishUDFs</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>physicalPlan</ParamName>
                    <ParamType>PhysicalPlan</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>UDFFinishVisitor [finisher=new UDFFinishVisitor(physicalPlan,new DependencyOrderWalker&lt;PhysicalOperator,PhysicalPlan&gt;(physicalPlan))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>VisitorException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sparkOperToRDD</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sparkOperator</ParamName>
                    <ParamType>SparkOperator</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;SparkOperator&gt; [predecessors=sparkPlan.getPredecessors(sparkOperator)]</InnerVar>
                <InnerVar>Set&lt;OperatorKey&gt; [predecessorOfPreviousSparkOp=new HashSet&lt;OperatorKey&gt;()]</InnerVar>
                <InnerVar>boolean [isFail=false]</InnerVar>
                <InnerVar>Exception [exception=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>InterruptedException</ExceptionType>
                <ExceptionType>VisitorException</ExceptionType>
                <ExceptionType>JobCreationException</ExceptionType>
                <ExceptionType>ExecException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>physicalToRDD</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sparkOperator</ParamName>
                    <ParamType>SparkOperator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>plan</ParamName>
                    <ParamType>PhysicalPlan</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>physicalOperator</ParamName>
                    <ParamType>PhysicalOperator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>predsFromPreviousSparkOper</ParamName>
                    <ParamType>OperatorKey</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>RDD&lt;Tuple&gt; [nextRDD=null]</InnerVar>
                <InnerVar>List&lt;PhysicalOperator&gt; [predecessorsOfCurrentPhysicalOp=getPredecessors(plan,physicalOperator)]</InnerVar>
                <InnerVar>LinkedHashSet&lt;OperatorKey&gt; [operatorKeysOfAllPreds=new LinkedHashSet&lt;OperatorKey&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;addPredsFromPrevoiousSparkOp;[sparkOperator, physicalOperator, operatorKeysOfAllPreds]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setReplicatedInputs</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>physicalOperator</ParamName>
                    <ParamType>PhysicalOperator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>converter</ParamName>
                    <ParamType>FRJoinConverter</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Set&lt;String&gt; [replicatedInputs=new HashSet&lt;&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>converter;setReplicatedInputs;[replicatedInputs]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPredecessors</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PhysicalOperator</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>plan</ParamName>
                    <ParamType>PhysicalPlan</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>op</ParamName>
                    <ParamType>PhysicalOperator</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List [preds=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sortPredecessorRDDs</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>RDD&lt;Tuple&gt;</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>operatorKeysOfAllPreds</ParamName>
                    <ParamType>OperatorKey</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;RDD&lt;Tuple&gt;&gt; [predecessorRDDs=Lists.newArrayList()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addPredsFromPrevoiousSparkOp</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sparkOperator</ParamName>
                    <ParamType>SparkOperator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>physicalOperator</ParamName>
                    <ParamType>PhysicalOperator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>operatorKeysOfPredecessors</ParamName>
                    <ParamType>OperatorKey</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;OperatorKey&gt; [predOperatorKeys=sparkOperator.getMultiQueryOptimizeConnectionItem().get(physicalOperator.getOperatorKey())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getJobIDs</MethodName>
            <MethodComment>/** 
 * In Spark, currently only async actions return job id. There is no async equivalent of actions like saveAsNewAPIHadoopFile() &lt;p/&gt; The only other way to get a job id is to register a "job group ID" with the spark context and request all job ids corresponding to that job group via getJobIdsForGroup. &lt;p/&gt; However getJobIdsForGroup does not guarantee the order of the elements in it's result. &lt;p/&gt; This method simply returns the previously unseen job ids.
 * @param seenJobIDs job ids in the job group that are already seen
 * @return Spark job ids not seen before
 */
</MethodComment>
            <ReturnType>Integer</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>seenJobIDs</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Set&lt;Integer&gt; [groupjobIDs=new HashSet&lt;Integer&gt;(Arrays.asList(ArrayUtils.toObject(sparkContext.statusTracker().getJobIdsForGroup(jobGroupID))))]</InnerVar>
                <InnerVar>List&lt;Integer&gt; [unseenJobIDs=new ArrayList&lt;Integer&gt;(groupjobIDs)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>groupjobIDs;removeAll;[seenJobIDs]</InnerMethodInvoke>
                <InnerMethodInvoke>seenJobIDs;addAll;[unseenJobIDs]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>adjustRuntimeParallelismForSkewedJoin</MethodName>
            <MethodComment>/** 
 * if the parallelism of skewed join is NOT specified by user in the script when sampling, set a default parallelism for sampling
 * @param physicalOperator
 * @param sparkOperator
 * @param allPredRDDs
 * @throws VisitorException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>physicalOperator</ParamName>
                    <ParamType>PhysicalOperator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sparkOperator</ParamName>
                    <ParamType>SparkOperator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>allPredRDDs</ParamName>
                    <ParamType>RDD&lt;Tuple&gt;</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>VisitorException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ParallelConstantVisitor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>plan</ParamName>
                    <ParamType>PhysicalPlan</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rp</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitConstant</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cnst</ParamName>
                    <ParamType>ConstantExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>VisitorException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitPoissonSample</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>po</ParamName>
                    <ParamType>POPoissonSample</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>