<Class>
    <Id>336</Id>
    <Package>org.apache.pig.backend.datastorage</Package>
    <ClassName>ElementDescriptor</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Comparable</SuperInterface>
        <SuperInterface>ElementDescriptor</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ElementDescriptor  /** 
 * DataStorageElementDescriptor provides methods necessary to manage an element in a DataStorage.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>BLOCK_SIZE_KEY</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>BLOCK_REPLICATION_KEY</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>LENGTH_KEY</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>MODIFICATION_TIME_KEY</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getDataStorage</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DataStorage</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>create</MethodName>
            <MethodComment>/** 
 * Opens a stream onto which an entity can be written to.
 * @param configuration information at the object level
 * @return stream where to write
 * @throws DataStorageException
 */
</MethodComment>
            <ReturnType>OutputStream</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>configuration</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>create</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>OutputStream</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>copy</MethodName>
            <MethodComment>/** 
 * Copy entity from an existing one, possibly residing in a  different Data Storage.
 * @param dstName name of entity to create
 * @param dstConfiguration configuration for the new entity
 * @param removeSrc if src entity needs to be removed after copying it
 * @throws DataStorageException for instance, configuration information for new entity is not compatible with  configuration information at the Data Storage level, user does not have privileges to read from source entity or write to destination storage...
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dstName</ParamName>
                    <ParamType>ElementDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dstConfiguration</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>removeSrc</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>copy</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dstName</ParamName>
                    <ParamType>ElementDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>removeSrc</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>open</MethodName>
            <MethodComment>/** 
 * Open for read a given entity
 * @param configuration
 * @return entity to read from
 * @throws DataStorageExecption e.g. entity does not exist...
 */
</MethodComment>
            <ReturnType>InputStream</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>configuration</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>open</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>InputStream</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sopen</MethodName>
            <MethodComment>/** 
 * Open an element in the Data Storage with support for random access  (seek operations).
 * @param configuration
 * @return a seekable input stream
 * @throws DataStorageException
 */
</MethodComment>
            <ReturnType>SeekableInputStream</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>configuration</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sopen</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>SeekableInputStream</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>exists</MethodName>
            <MethodComment>/** 
 * Checks whether the entity exists or not
 * @return true if entity exists, false otherwise.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rename</MethodName>
            <MethodComment>/** 
 * Changes the name of an entity in the Data Storage
 * @param newName new name of entity 
 * @throws DataStorageException 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>newName</ParamName>
                    <ParamType>ElementDescriptor</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>delete</MethodName>
            <MethodComment>/** 
 * Remove entity from the Data Storage.
 * @throws DataStorageException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getConfiguration</MethodName>
            <MethodComment>/** 
 * Retrieve configuration information for entity
 * @return configuration
 */
</MethodComment>
            <ReturnType>Properties</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>updateConfiguration</MethodName>
            <MethodComment>/** 
 * Update configuration information for this entity
 * @param newConfig configuration
 * @throws DataStorageException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>newConfig</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>systemElement</MethodName>
            <MethodComment>/** 
 * Defines whether the element is visible to users or  contains system's metadata
 * @return true if this is system file; false otherwise
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStatistics</MethodName>
            <MethodComment>/** 
 * List entity statistics
 * @return DataStorageProperties
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>