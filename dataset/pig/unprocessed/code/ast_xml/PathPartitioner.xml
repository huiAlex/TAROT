<Class>
    <Id>1191</Id>
    <Package>org.apache.pig.piggybank.storage.partition</Package>
    <ClassName>PathPartitioner</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>PathPartitioner  /** 
 * Its convenient sometimes to partition logs by date values or other e.g. country, city etc.&lt;br/&gt; A daydate partitioned hdfs directory might look something like:&lt;br/&gt; &lt;pre&gt; /logs/repo/mylog/ daydate=2010-01-01 daydate=2010-01-02 &lt;/pre&gt; This class accepts a path like /logs/repo/mylog and return a map of the partition keys
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getPathPartitionKeyValues</MethodName>
            <MethodComment>/** 
 * Note: this must be the path lowes in the Searches for the key=value pairs in the path pointer by the location parameter.
 * @param location String root path in hdsf e.g. /user/hive/warehouse or /logs/repo
 * @param conf Configuration
 * @return Set of String. The order is maintained as per the directory tree.i.e. if /logs/repo/year=2010/month=2010 exists the first item in the set will be year and the second month.
 * @throws IOException
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>location</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Map&lt;String,String&gt; [partitionKeys=new LinkedHashMap&lt;String,String&gt;()]</InnerVar>
                <InnerVar>String[] [pathSplit=location.split("/")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPartitionKeys</MethodName>
            <MethodComment>/** 
 * Searches for the key=value pairs in the path pointer by the location parameter.
 * @param location String root path in hdsf e.g. /user/hive/warehouse or /logs/repo
 * @param conf Configuration
 * @return Set of String. The order is maintained as per the directory tree.i.e. if /logs/repo/year=2010/month=2010 exists the first item in the set will be year and the second month.
 * @throws IOException
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>location</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>conf</ParamName>
                    <ParamType>Configuration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Path [path=new Path(location)]</InnerVar>
                <InnerVar>FileSystem [fs=path.getFileSystem(conf)]</InnerVar>
                <InnerVar>FileStatus[] [fileStatusArr=null]</InnerVar>
                <InnerVar>Set&lt;String&gt; [partitionKeys=new LinkedHashSet&lt;String&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;parseAndPutKeyValue;[location, partitionKeys]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseAndPutKeyValue</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pathName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>partitionKeys</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String[] [keyValue=parsePathKeyValue(pathName)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseAndPutKeyValue</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pathName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>partitionKeys</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String[] [keyValue=parsePathKeyValue(pathName)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parsePathKeyValue</MethodName>
            <MethodComment>/** 
 * Will look for key=value pairs in the path for example: /user/hive/warehouse/mylogs/year=2010/month=07
 * @param path
 * @return String[] [0]= key [1] = value
 */
</MethodComment>
            <ReturnType>String[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>path</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [slashIndex=path.lastIndexOf('/')]</InnerVar>
                <InnerVar>String [parsedPath=path]</InnerVar>
                <InnerVar>String[] [keyValue=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>