<Class>
    <Id>868</Id>
    <Package>org.apache.pig.backend.hadoop.executionengine.spark.optimizer</Package>
    <ClassName>MultiQueryOptimizerSpark</ClassName>
    <SuperClass>SparkOpPlanVisitor</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>MultiQueryOptimizerSpark  /** 
 * MultiQueryOptimizer for spark
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>LOG</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>scope</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>nig</FieldName>
            <FieldType>NodeIdGenerator</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>MultiQueryOptimizerSpark</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>plan</ParamName>
                    <ParamType>SparkOperPlan</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;SparkOperator&gt; [roots=plan.getRoots()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitSparkOp</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sparkOp</ParamName>
                    <ParamType>SparkOperator</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>VisitorException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPhysicalPlans</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PhysicalPlan</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>physicalPlan</ParamName>
                    <ParamType>PhysicalPlan</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>size</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;PhysicalPlan&gt; [ppList=new ArrayList&lt;PhysicalPlan&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>OptimizerException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>mergePlanAWithPlanB</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>planA</ParamName>
                    <ParamType>PhysicalPlan</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>planB</ParamName>
                    <ParamType>PhysicalPlan</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>to</ParamName>
                    <ParamType>PhysicalOperator</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PhysicalOperator [predOfStore=planB.getLeaves().get(0)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>planA;merge;[planB]</InnerMethodInvoke>
                <InnerMethodInvoke>planA;connect;[predOfStore, to]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>PlanException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeSpliter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>plan</ParamName>
                    <ParamType>SparkOperPlan</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>spliter</ParamName>
                    <ParamType>SparkOperator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>splittee</ParamName>
                    <ParamType>SparkOperator</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>plan;remove;[spliter]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>PlanException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeSplittee</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>plan</ParamName>
                    <ParamType>SparkOperPlan</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>splitter</ParamName>
                    <ParamType>SparkOperator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>splittee</ParamName>
                    <ParamType>SparkOperator</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>getPlan();remove;[splittee]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>PlanException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createSplit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>POSplit</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addSubPlanPropertiesToParent</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parentOper</ParamName>
                    <ParamType>SparkOperator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>subPlanOper</ParamName>
                    <ParamType>SparkOperator</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>parentOper;copyFeatures;[subPlanOper, null]</InnerMethodInvoke>
                <InnerMethodInvoke>subPlanOper;setRequestedParallelismByReference;[parentOper]</InnerMethodInvoke>
                <InnerMethodInvoke>parentOper.UDFs;addAll;[subPlanOper.UDFs]</InnerMethodInvoke>
                <InnerMethodInvoke>parentOper.scalars;addAll;[subPlanOper.scalars]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>