<Class>
    <Id>844</Id>
    <Package>org.apache.pig.data</Package>
    <ClassName>SchemaTupleBackend</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>LOG</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>filesToResolve</FieldName>
            <FieldType>Set</FieldType>
        </Field>
        <Field>
            <FieldName>filesToResolve</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>classLoader</FieldName>
            <FieldType>URLClassLoader</FieldType>
        </Field>
        <Field>
            <FieldName>schemaTupleFactoriesByTriple</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>schemaTupleFactoriesByTriple</FieldName>
            <FieldType>Triple&lt;SchemaKey,Boolean,GenContext&gt;</FieldType>
        </Field>
        <Field>
            <FieldName>schemaTupleFactoriesById</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>schemaTupleFactoriesById</FieldName>
            <FieldType>Integer</FieldType>
        </Field>
        <Field>
            <FieldName>jConf</FieldName>
            <FieldType>Configuration</FieldType>
        </Field>
        <Field>
            <FieldName>codeDir</FieldName>
            <FieldType>File</FieldType>
        </Field>
        <Field>
            <FieldName>isLocal</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>abort</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>stb</FieldName>
            <FieldType>SchemaTupleBackend</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>SchemaTupleBackend</MethodName>
            <MethodComment>/** 
 * The only information this class needs is a directory of generated code to resolve classes in.
 * @param jConf
 * @param directory of generated code
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>jConf</ParamName>
                    <ParamType>Configuration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isLocal</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>internalNewSchemaTupleFactory</MethodName>
            <MethodComment>/** 
 * This method fetches the SchemaTupleFactory that can create Tuples of the given Schema (ignoring aliases) and appendability. IMPORTANT: if no such SchemaTupleFactory is available, this returns null.
 * @param schema
 * @param   true if it should be appendable
 * @param the context in which this SchemaTupleFactory is being requested
 * @return  generating SchemaTupleFactory, null otherwise
 */
</MethodComment>
            <ReturnType>SchemaTupleFactory</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>Schema</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isAppendable</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>GenContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>internalNewSchemaTupleFactory</MethodName>
            <MethodComment>/** 
 * This method fetches the SchemaTupleFactory that generates the SchemaTuple registered with the given identifier. IMPORTANT: if no such SchemaTupleFactory is available, this returns null.
 * @param identifier
 * @return  generating schemaTupleFactory, null otherwise
 */
</MethodComment>
            <ReturnType>SchemaTupleFactory</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>id</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>SchemaTupleFactory [stf=schemaTupleFactoriesById.get(id)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newSchemaTupleFactory</MethodName>
            <MethodComment>/** 
 * This method fetches the SchemaTupleFactory that can create Tuples of the given Schema and appendability. IMPORTANT: if no such SchemaTupleFactory is available, this returns null.
 * @param   SchemaKey/appendability pair
 * @return  generating SchemaTupleFactory, null otherwise
 */
</MethodComment>
            <ReturnType>SchemaTupleFactory</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>trip</ParamName>
                    <ParamType>SchemaKey</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>SchemaTupleFactory [stf=schemaTupleFactoriesByTriple.get(trip)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>copyAndResolve</MethodName>
            <MethodComment>/** 
 * This method copies all of the generated classes from the distributed cache to a local directory, and then seeks to resolve them and cache their respective SchemaTupleFactories.
 * @param configuration
 * @param   true if the job is local
 * @throws IOException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;resolveClasses;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>copyAllFromDistributedCache</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [toDeserialize=jConf.get(PigConstants.GENERATED_CLASSES_KEY)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>LOG;info;["Copying files in key [" + PigConstants.GENERATED_CLASSES_KEY + "] from distributed cache: "+ toDeserialize]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>resolveClasses</MethodName>
            <MethodComment>/** 
 * Once all of the files are copied from the distributed cache to the local temp directory, this will attempt to resolve those files and add their information.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reset</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initialize</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>jConf</ParamName>
                    <ParamType>Configuration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pigContext</ParamName>
                    <ParamType>PigContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;initialize;[jConf, pigContext.getExecType().isLocal()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initialize</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>jConf</ParamName>
                    <ParamType>Configuration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;initialize;[jConf, Utils.isLocal(jConf)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initialize</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>jConf</ParamName>
                    <ParamType>Configuration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isLocal</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newSchemaTupleFactory</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>SchemaTupleFactory</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>Schema</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isAppendable</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>GenContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newSchemaTupleFactory</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>SchemaTupleFactory</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>id</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>