<Class>
    <Id>1028</Id>
    <Package>org.apache.pig.piggybank.storage.avro</Package>
    <ClassName>PigSchema2Avro</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>PigSchema2Avro  /** 
 * This class contains functions to convert Pig schema to Avro. It consists of two sets of methods: 1. Convert a Pig schema to Avro schema; 2. Validate whether a Pig schema is compatible with a given Avro schema. Notice that the Avro schema doesn't need to cover all fields in Pig schema, and the missing fields are converted using methods in set 1.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>TUPLE_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>FIELD_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>tupleIndex</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>convert</MethodName>
            <MethodComment>/** 
 * Convert a pig ResourceSchema to avro schema
 */
</MethodComment>
            <ReturnType>Schema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pigSchema</ParamName>
                    <ParamType>ResourceSchema</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nullable</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ResourceFieldSchema[] [pigFields=pigSchema.getFields()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>convert</MethodName>
            <MethodComment>/** 
 * Convert a Pig ResourceFieldSchema to avro schema
 */
</MethodComment>
            <ReturnType>Schema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pigSchema</ParamName>
                    <ParamType>ResourceFieldSchema</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nullable</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>byte [pigType=pigSchema.getType()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>AvroStorageLog;details;["Convert pig field schema:" + pigSchema]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>convertRecord</MethodName>
            <MethodComment>/** 
 * Convert pig data to Avro record
 */
</MethodComment>
            <ReturnType>Schema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pigFields</ParamName>
                    <ParamType>ResourceFieldSchema[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nullable</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [typeName=getRecordName()]</InnerVar>
                <InnerVar>Schema [outSchema=Schema.createRecord(typeName,null,null,false)]</InnerVar>
                <InnerVar>List&lt;Schema.Field&gt; [outFields=new ArrayList&lt;Schema.Field&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>AvroStorageLog;funcCall;["convertRecord"]</InnerMethodInvoke>
                <InnerMethodInvoke>outSchema;setFields;[outFields]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setTupleIndex</MethodName>
            <MethodComment>/** 
 * This is a painful hack to make unit tests pass. The static counter holds state between unit tests, so it needs to be reset. Otherwise tests will fail if their order is swapped or a new test is added.
 * @param index
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>index</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRecordName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [name=TUPLE_NAME + "_" + tupleIndex]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>convertPrimitiveType</MethodName>
            <MethodComment>/** 
 * Convert Pig primitive type to Avro type
 */
</MethodComment>
            <ReturnType>Schema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pigType</ParamName>
                    <ParamType>byte</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>validateAndConvert</MethodName>
            <MethodComment>/** 
 * Validate whether pigSchema is compatible with avroSchema
 */
</MethodComment>
            <ReturnType>Schema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>avroSchema</ParamName>
                    <ParamType>Schema</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pigSchema</ParamName>
                    <ParamType>ResourceSchema</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>validateAndConvert</MethodName>
            <MethodComment>/** 
 * Validate whether pigSchema is compatible with avroSchema and convert those Pig fields with to corresponding Avro schemas.
 */
</MethodComment>
            <ReturnType>Schema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>avroSchema</ParamName>
                    <ParamType>Schema</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pigSchema</ParamName>
                    <ParamType>ResourceFieldSchema</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>byte [pigType=pigSchema.getType()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>AvroStorageLog;details;["Validate pig field schema:" + pigSchema]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>validateAndConvertRecord</MethodName>
            <MethodComment>/** 
 * Validate a Pig tuple is compatible with Avro record. If the Avro schema  is not complete (with uncovered fields), then convert those fields using  methods in set 1.  Notice that users can get rid of Pig tuple wrappers, e.g. an Avro schema "int" is compatible with a Pig schema "T:(int)"
 */
</MethodComment>
            <ReturnType>Schema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>avroSchema</ParamName>
                    <ParamType>Schema</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pigFields</ParamName>
                    <ParamType>ResourceFieldSchema[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [isPartialSchema=AvroStorageUtils.isUDPartialRecordSchema(avroSchema)]</InnerVar>
                <InnerVar>String [typeName=isPartialSchema ? getRecordName() : avroSchema.getName()]</InnerVar>
                <InnerVar>Schema [outSchema=Schema.createRecord(typeName,avroSchema.getDoc(),avroSchema.getNamespace(),false)]</InnerVar>
                <InnerVar>List&lt;Schema.Field&gt; [inFields=avroSchema.getFields()]</InnerVar>
                <InnerVar>List&lt;Schema.Field&gt; [outFields=new ArrayList&lt;Schema.Field&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>AvroStorageLog;details;["isPartialSchema=" + isPartialSchema]</InnerMethodInvoke>
                <InnerMethodInvoke>outSchema;setFields;[outFields]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isCompatible</MethodName>
            <MethodComment>/** 
 * Check whether Avro type is compatible with Pig type
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>avroSchema</ParamName>
                    <ParamType>Schema</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pigSchema</ParamName>
                    <ParamType>ResourceFieldSchema</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Schema.Type [avroType=avroSchema.getType()]</InnerVar>
                <InnerVar>byte [pigType=pigSchema.getType()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>