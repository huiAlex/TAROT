<Class>
    <Id>944</Id>
    <Package>org.apache.pig.builtin</Package>
    <ClassName>REGEX_EXTRACT_ALL</ClassName>
    <SuperClass>EvalFunc</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>REGEX_EXTRACT_ALL  /** 
 * &lt;dl&gt; &lt;dt&gt;&lt;b&gt;Syntax:&lt;/b&gt;&lt;/dt&gt; &lt;dd&gt;&lt;code&gt;String RegexExtractAll(String expression, String regex)&lt;/code&gt;.&lt;/dd&gt; &lt;dt&gt;&lt;b&gt;Input:&lt;/b&gt;&lt;/dt&gt; &lt;dd&gt;&lt;code&gt;expression&lt;/code&gt;-&lt;code&gt;source string&lt;/code&gt;.&lt;/dd&gt; &lt;dd&gt;&lt;code&gt;regex&lt;/code&gt;-&lt;code&gt;regular expression&lt;/code&gt;.&lt;/dd&gt; &lt;dt&gt;&lt;b&gt;Output:&lt;/b&gt;&lt;/dt&gt; &lt;dd&gt;&lt;code&gt;A tuple of matched strings&lt;/code&gt;.&lt;/dd&gt; &lt;dt&gt;&lt;b&gt;Matching strategy:&lt;/b&gt;&lt;/dt&gt; &lt;dd&gt;Trying to match the entire input by using  {@link Matcher#matches()} instead of{@link Matcher#find()} (default useMatches=true).&lt;/dd&gt;&lt;dd&gt;&lt;code&gt;DEFINE GREEDY_EXTRACT REGEX_EXTRACT_ALL('false');&lt;/code&gt;&lt;/dd&gt; &lt;/dl&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>tupleFactory</FieldName>
            <FieldType>TupleFactory</FieldType>
        </Field>
        <Field>
            <FieldName>mUseMatches</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>mExpression</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>mPattern</FieldName>
            <FieldType>Pattern</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>REGEX_EXTRACT_ALL</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>REGEX_EXTRACT_ALL</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>useMatches</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>exec</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Tuple</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Matcher [m=mPattern.matcher((String)input.get(0))]</InnerVar>
                <InnerVar>Tuple [result=tupleFactory.newTuple(m.groupCount())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>outputSchema</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Schema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>Schema</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getArgToFuncMapping</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>FuncSpec</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>List&lt;FuncSpec&gt; [funcList=new ArrayList&lt;FuncSpec&gt;()]</InnerVar>
                <InnerVar>Schema [s=new Schema()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>s;add;[new Schema.FieldSchema(null,DataType.CHARARRAY)]</InnerMethodInvoke>
                <InnerMethodInvoke>s;add;[new Schema.FieldSchema(null,DataType.CHARARRAY)]</InnerMethodInvoke>
                <InnerMethodInvoke>funcList;add;[new FuncSpec(this.getClass().getName(),s)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>allowCompileTimeCalculation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>