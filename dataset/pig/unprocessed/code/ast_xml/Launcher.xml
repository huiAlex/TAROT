<Class>
    <Id>1147</Id>
    <Package>org.apache.pig.backend.hadoop.executionengine</Package>
    <ClassName>Launcher</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Launcher  /** 
 * Provides core processing implementation for the backend of Pig if ExecutionEngine chosen decides to delegate it's work to this class. Also contains set of utility methods, including ones centered around Hadoop.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>OOM_ERR</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>pigException</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>outOfMemory</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>newLine</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>jobControlExceptionStackTrace</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>jobControlException</FieldName>
            <FieldType>Exception</FieldType>
        </Field>
        <Field>
            <FieldName>totalHadoopTimeSpent</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>failureMap</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>failureMap</FieldName>
            <FieldType>FileSpec</FieldType>
        </Field>
        <Field>
            <FieldName>jc</FieldName>
            <FieldType>JobControl</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>HangingJobKiller</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>Launcher</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;reset;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reset</MethodName>
            <MethodComment>/** 
 * Resets the state after a launch
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>launchPig</MethodName>
            <MethodComment>/** 
 * Method to launch pig for hadoop either for a cluster's job tracker or for a local job runner. THe only difference between the two is the job client. Depending on the pig context the job client will be initialize to one of the two. Launchers for other frameworks can overide these methods. Given an input PhysicalPlan, it compiles it to get a MapReduce Plan. The MapReduce plan which has multiple MapReduce operators each one of which has to be run as a map reduce job with dependency information stored in the plan. It compiles the MROperPlan into a JobControl object. Each Map Reduce operator is converted into a Job and added to the JobControl object. Each Job also has a set of dependent Jobs that are created using the MROperPlan. The JobControl object is obtained from the JobControlCompiler Then a new thread is spawned that submits these jobs while respecting the dependency information. The parent thread monitors the submitted jobs' progress and after it is complete, stops the JobControl thread.
 * @param php
 * @param grpName
 * @param pc
 * @throws Exception
 */
</MethodComment>
            <ReturnType>PigStats</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>php</ParamName>
                    <ParamType>PhysicalPlan</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>grpName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pc</ParamName>
                    <ParamType>PigContext</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>explain</MethodName>
            <MethodComment>/** 
 * Explain how a pig job will be executed on the underlying infrastructure.
 * @param pp PhysicalPlan to explain
 * @param pc PigContext to use for configuration
 * @param ps PrintStream to write output on.
 * @param format Format to write in
 * @param verbose Amount of information to print
 * @throws VisitorException
 * @throws IOException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pp</ParamName>
                    <ParamType>PhysicalPlan</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pc</ParamName>
                    <ParamType>PigContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ps</ParamName>
                    <ParamType>PrintStream</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>format</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>verbose</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>PlanException</ExceptionType>
                <ExceptionType>VisitorException</ExceptionType>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>kill</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>BackendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>killJob</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>jobID</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>conf</ParamName>
                    <ParamType>Configuration</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>BackendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isComplete</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>prog</ParamName>
                    <ParamType>double</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>computeTimeSpent</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>taskReports</ParamName>
                    <ParamType>TaskReport</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>long [timeSpent=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getErrorMessages</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>reports</ParamName>
                    <ParamType>TaskReport</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>errNotDbg</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pigContext</ParamName>
                    <ParamType>PigContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>calculateProgress</MethodName>
            <MethodComment>/** 
 * Compute the progress of the current job submitted through the JobControl object jc to the JobClient jobClient
 * @param jc - The JobControl object that has been submitted
 * @param jobClient - The JobClient to which it has been submitted
 * @return The progress as a precentage in double format
 * @throws IOException
 */
</MethodComment>
            <ReturnType>double</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>jc</ParamName>
                    <ParamType>JobControl</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>double [prog=0.0]</InnerVar>
                <InnerVar>List&lt;Job&gt; [runnJobs=jc.getRunningJobs()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>progressOfRunningJob</MethodName>
            <MethodComment>/** 
 * Returns the progress of a Job j which is part of a submitted JobControl object. The progress is for this Job. So it has to be scaled down by the num of jobs that are present in the JobControl.
 * @param j The Job for which progress is required
 * @return Returns the percentage progress of this Job
 * @throws IOException
 */
</MethodComment>
            <ReturnType>double</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>j</ParamName>
                    <ParamType>Job</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>org.apache.hadoop.mapreduce.Job [mrJob=j.getJob()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTotalHadoopTimeSpent</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>uncaughtException</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>thread</ParamName>
                    <ParamType>Thread</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>throwable</ParamName>
                    <ParamType>Throwable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setJobException;[throwable]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setJobException</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>throwable</ParamName>
                    <ParamType>Throwable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getExceptionFromString</MethodName>
            <MethodComment>/** 
 * @param stackTrace The string representation of {@link Throwable#printStackTrace() printStackTrace} Handlesinternal PigException and its subclasses that override the {@link Throwable#toString() toString} method
 * @return An exception object whose string representation ofprintStackTrace is the input stackTrace
 * @throws Exception
 */
</MethodComment>
            <ReturnType>Exception</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>stackTrace</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String[] [lines=stackTrace.split(newLine)]</InnerVar>
                <InnerVar>Throwable [t=getExceptionFromStrings(lines,0)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getExceptionFromStrings</MethodName>
            <MethodComment>/** 
 * @param stackTraceLines An array of strings that represent {@link Throwable#printStackTrace() printStackTrace} output,split by newline
 * @return An exception object whose string representation ofprintStackTrace is the input stackTrace
 * @throws Exception
 */
</MethodComment>
            <ReturnType>Throwable</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>stackTraceLines</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>startingLineNum</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStackTraceElement</MethodName>
            <MethodComment>/** 
 * @param line the string representation of a stack trace returned by {@link Throwable#printStackTrace() printStackTrace}
 * @return the StackTraceElement object representing the stack trace
 * @throws Exception
 */
</MethodComment>
            <ReturnType>StackTraceElement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>line</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String[] [items]</InnerVar>
                <InnerVar>String [qualifiedMethodNameRegex="(\\w+(\\$\\w+)?\\.)+(&lt;)?\\w+(&gt;)?"]</InnerVar>
                <InnerVar>Pattern [qualifiedMethodNamePattern=Pattern.compile(qualifiedMethodNameRegex)]</InnerVar>
                <InnerVar>Matcher [contentMatcher=qualifiedMethodNamePattern.matcher(line)]</InnerVar>
                <InnerVar>String [content=null]</InnerVar>
                <InnerVar>Matcher [qualifiedMethodNameMatcher=qualifiedMethodNamePattern.matcher(content)]</InnerVar>
                <InnerVar>String [qualifiedMethodName=null]</InnerVar>
                <InnerVar>String [fileDetails=null]</InnerVar>
                <InnerVar>String [declaringClass=items[0]]</InnerVar>
                <InnerVar>String [methodName=items[items.length - 1]]</InnerVar>
                <InnerVar>StringBuilder [sb=new StringBuilder()]</InnerVar>
                <InnerVar>String [fileName=null]</InnerVar>
                <InnerVar>int [lineNumber=-1]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>destroy</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>