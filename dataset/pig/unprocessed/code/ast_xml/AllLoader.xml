<Class>
    <Id>63</Id>
    <Package>org.apache.pig.piggybank.storage</Package>
    <ClassName>AllLoader</ClassName>
    <SuperClass>FileInputLoadFunc</SuperClass>
    <SuperInterfaceList>
        <SuperInterface>LoadMetadata</SuperInterface>
        <SuperInterface>StoreMetadata</SuperInterface>
        <SuperInterface>LoadPushDown</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>AllLoader  /** 
 * The AllLoader provides the ability to point pig at a folder that contains files in multiple formats e.g. PlainText, Gz, Bz, Lzo, HiveRC etc and have the LoadFunc(s) automatically selected based on the file extension. &lt;br/&gt; &lt;b&gt;How this works:&lt;b/&gt;&lt;br/&gt; The file extensions are mapped in the pig.properties via the property file.extension.loaders. &lt;p/&gt; &lt;b&gt;file.extension.loaders format&lt;/b&gt; &lt;ul&gt; &lt;li&gt;[file extension]:[loader func spec]&lt;/li&gt; &lt;li&gt;[file-extension]:[optional path tag]:[loader func spec]&lt;/li&gt; &lt;li&gt;[file-extension]:[optional path tag]:[sequence file key value writer class name]:[loader func spec]&lt;/li&gt; &lt;/ul&gt; &lt;p/&gt; The file.extension.loaders property associate pig loaders with file extensions, if a file does not have an extension the AllLoader will look at the first three bytes of a file and try to guess its format bassed on: &lt;ul&gt; &lt;li&gt;[ -119, 76, 90 ] = lzo&lt;/li&gt; &lt;li&gt;[ 31, -117, 8 ] = gz&lt;/li&gt; &lt;li&gt;[ 66, 90, 104 ] = bz2&lt;/li&gt; &lt;li&gt;[ 83, 69, 81 ] = seq&lt;/li&gt; &lt;/ul&gt; &lt;br/&gt; The loader associated with that extension will then be used. &lt;p/&gt; &lt;b&gt;Path partitioning&lt;/b&gt; The AllLoader supports hive style path partitioning e.g. /log/type1/daydate=2010-11-01&lt;br/&gt; "daydate" will be considered a partition key and filters can be written against this.&lt;br/&gt; Note that the filter should go into the AllLoader contructor e.g.&lt;br/&gt; a = LOAD 'input' using AllLoader('daydate&lt;\"2010-11-01\"')&lt;br/&gt; &lt;b&gt;Path tags&lt;/b&gt; AllLoader supports configuring different loaders for the same extension based on there file path.&lt;br/&gt; E.g.&lt;br/&gt; We have the paths /log/type1, /log/type2&lt;br/&gt; For each of these directories we'd like to use different loaders.&lt;br/&gt; So we use setup our loaders:&lt;br/&gt; file.extension.loaders:gz:type1:MyType1Loader, gz:type2:MyType2Loader&lt;br/&gt; &lt;p/&gt; &lt;b&gt;Sequence files&lt;b/&gt; Sequence files also support using the Path tags for loader selection but has an extra configuration option that relates to the Key Class used to write the Sequence file.&lt;br/&gt; E.g. for HiveRC this value is: org.apache.hadoop.hive.ql.io.RCFile so we can setup our sequence file formatting:&lt;br/&gt; file.extension.loaders:seq::org.apache.hadoop.hive.ql.io.RCFile: MyHiveRCLoader, seq::DefaultSequenceFileLoader&lt;br/&gt; &lt;p/&gt; &lt;b&gt;Schema&lt;/b&gt; The JsoneMetadata schema loader is supported and the schema will be loaded using this loader.&lt;br/&gt; In case this fails, the schema can be loaded using the default schema provided.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>LOG</FieldName>
            <FieldType>Logger</FieldType>
        </Field>
        <Field>
            <FieldName>PROJECTION_ID</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>childLoadFunc</FieldName>
            <FieldType>LoadFunc</FieldType>
        </Field>
        <Field>
            <FieldName>supportPushDownProjection</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>requiredFieldList</FieldName>
            <FieldType>RequiredFieldList</FieldType>
        </Field>
        <Field>
            <FieldName>requiredFieldHashSet</FieldName>
            <FieldType>SortedSet</FieldType>
        </Field>
        <Field>
            <FieldName>requiredFieldHashSet</FieldName>
            <FieldType>Integer</FieldType>
        </Field>
        <Field>
            <FieldName>tupleFactory</FieldName>
            <FieldType>TupleFactory</FieldType>
        </Field>
        <Field>
            <FieldName>schema</FieldName>
            <FieldType>ResourceSchema</FieldType>
        </Field>
        <Field>
            <FieldName>signature</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>pathPartitionerHelper</FieldName>
            <FieldType>PathPartitionHelper</FieldType>
        </Field>
        <Field>
            <FieldName>currentPathPartitionKeyMap</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>currentPathPartitionKeyMap</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>partitionColumns</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>jsonMetadata</FieldName>
            <FieldType>JsonMetadata</FieldType>
        </Field>
        <Field>
            <FieldName>partitionKeysSet</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>loadFuncHelper</FieldName>
            <FieldType>LoadFuncHelper</FieldType>
        </Field>
        <Field>
            <FieldName>conf</FieldName>
            <FieldType>Configuration</FieldType>
        </Field>
        <Field>
            <FieldName>currentPath</FieldName>
            <FieldType>Path</FieldType>
        </Field>
        <Field>
            <FieldName>constructorPassedPartitionFilter</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>partitionHelper</FieldName>
            <FieldType>PathPartitionHelper</FieldType>
        </Field>
        <Field>
            <FieldName>udfSignature</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>selectedLoadFunc</FieldName>
            <FieldType>LoadFunc</FieldType>
        </Field>
        <Field>
            <FieldName>selectedReader</FieldName>
            <FieldType>RecordReader</FieldType>
        </Field>
        <Field>
            <FieldName>selectedReader</FieldName>
            <FieldType>Writable</FieldType>
        </Field>
        <Field>
            <FieldName>loadFuncHelper</FieldName>
            <FieldType>LoadFuncHelper</FieldType>
        </Field>
        <Field>
            <FieldName>udfSignature</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>path</FieldName>
            <FieldType>Path</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>AllLoader</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>AllLoader</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>partitionFilter</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>LOG;debug;["PartitionFilter: " + partitionFilter.toString()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setLocation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>location</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>job</ParamName>
                    <ParamType>Job</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>FileInputFormat;setInputPaths;[job, location]</InnerMethodInvoke>
                <InnerMethodInvoke>null;getPartitionKeys;[location, job]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLoadCaster</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>LoadCaster</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getInputFormat</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>AllLoaderInputFormat</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>prepareToRead</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>reader</ParamName>
                    <ParamType>RecordReader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>split</ParamName>
                    <ParamType>PigSplit</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AllReader [allReader=(AllReader)reader]</InnerVar>
                <InnerVar>String [projectProperty=getUDFContext().getProperty(PROJECTION_ID)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNext</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Tuple</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Tuple [tuple=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFeatures</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>OperatorSet</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>pushProjection</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>RequiredFieldResponse</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>requiredFieldList</ParamName>
                    <ParamType>RequiredFieldList</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Properties [properties=getUDFContext()]</InnerVar>
                <InnerVar>ByteArrayOutputStream [byteArray=new ByteArrayOutputStream()]</InnerVar>
                <InnerVar>ObjectOutputStream [objOut=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSchemaFromLoadFunc</MethodName>
            <MethodComment>/** 
 * Tries to determine the LoadFunc by using the LoadFuncHelper to identify a loader for the first file in the location directory.&lt;br/&gt; If no LoadFunc can be determine ad FrontendException is thrown.&lt;br/&gt; If the LoadFunc implements the LoadMetadata interface and returns a non null schema this schema is returned.
 * @param location
 * @param job
 * @return
 * @throws IOException
 */
</MethodComment>
            <ReturnType>ResourceSchema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>location</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>job</ParamName>
                    <ParamType>Job</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ResourceSchema [schema=null]</InnerVar>
                <InnerVar>Path [firstFile=loadFuncHelper.determineFirstFile(location)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>LOG;debug;["Found LoadFunc:  " + childLoadFunc.getClass().getName()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSchema</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ResourceSchema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>location</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>job</ParamName>
                    <ParamType>Job</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStatistics</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ResourceStatistics</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>location</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>job</ParamName>
                    <ParamType>Job</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>storeStatistics</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>stats</ParamName>
                    <ParamType>ResourceStatistics</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>location</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>job</ParamName>
                    <ParamType>Job</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>storeSchema</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>schema</ParamName>
                    <ParamType>ResourceSchema</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>location</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>job</ParamName>
                    <ParamType>Job</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>jsonMetadata;storeSchema;[schema, location, job]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPartitionColumns</MethodName>
            <MethodComment>/** 
 * Reads the partition columns
 * @param location
 * @param job
 * @return
 */
</MethodComment>
            <ReturnType>String[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>location</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>job</ParamName>
                    <ParamType>Job</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPartitionKeys</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>location</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>job</ParamName>
                    <ParamType>Job</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String[] [partitionKeys=getPartitionColumns(location,job)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>LOG;info;["Get Parition Keys for: " + location + " keys: "+ Arrays.toString(partitionKeys)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setUDFContextSignature</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>signature</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getUDFContext</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Properties</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setPartitionFilter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>partitionFilter</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>LOG;debug;["PartitionFilter: " + partitionFilter.toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>pathPartitionerHelper;setPartitionFilterExpression;[partitionFilter.toString(), AllLoader.class, signature]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>AllLoaderInputFormat</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>udfSignature</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>listStatus</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>FileStatus</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>jobContext</ParamName>
                    <ParamType>JobContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;FileStatus&gt; [files=partitionHelper.listStatus(jobContext,AllLoader.class,udfSignature)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createRecordReader</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Writable</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>inputSplit</ParamName>
                    <ParamType>InputSplit</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>taskAttemptContext</ParamName>
                    <ParamType>TaskAttemptContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>AllReader</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>udfSignature</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initialize</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>inputSplit</ParamName>
                    <ParamType>InputSplit</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>taskAttemptContext</ParamName>
                    <ParamType>TaskAttemptContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>FileSplit [fileSplit=(FileSplit)inputSplit]</InnerVar>
                <InnerVar>String [fileName=path.toUri().toString()]</InnerVar>
                <InnerVar>FuncSpec [funcSpec=loadFuncHelper.determineFunction(fileName)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>selectedLoadFunc;setUDFContextSignature;[udfSignature]</InnerMethodInvoke>
                <InnerMethodInvoke>selectedLoadFunc;setLocation;[fileName, new Job(taskAttemptContext.getConfiguration(),taskAttemptContext.getJobName())]</InnerMethodInvoke>
                <InnerMethodInvoke>selectedReader;initialize;[fileSplit, taskAttemptContext]</InnerMethodInvoke>
                <InnerMethodInvoke>LOG;info;["Using LoadFunc " + selectedLoadFunc.getClass().getName() + " on "+ fileName]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>prepareLoadFuncForReading</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>LoadFunc</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>split</ParamName>
                    <ParamType>PigSplit</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>selectedLoadFunc;prepareToRead;[selectedReader, split]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nextKeyValue</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCurrentKey</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Writable</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCurrentValue</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Writable</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getProgress</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>float</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>close</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>selectedReader;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>