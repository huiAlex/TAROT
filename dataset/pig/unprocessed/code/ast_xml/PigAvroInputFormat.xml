<Class>
    <Id>263</Id>
    <Package>org.apache.pig.piggybank.storage.avro</Package>
    <ClassName>PigAvroInputFormat</ClassName>
    <SuperClass>FileInputFormat</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>PigAvroInputFormat  /** 
 * The InputFormat for avro data.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>readerSchema</FieldName>
            <FieldType>Schema</FieldType>
        </Field>
        <Field>
            <FieldName>useMultipleSchemas</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>ignoreBadFiles</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>schemaToMergedSchemaMap</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>schemaToMergedSchemaMap</FieldName>
            <FieldType>Path</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>PigAvroInputFormat</MethodName>
            <MethodComment>/** 
 * empty constructor
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PigAvroInputFormat</MethodName>
            <MethodComment>/** 
 * constructor called by AvroStorage to pass in schema and ignoreBadFiles.
 * @param readerSchema reader schema
 * @param ignoreBadFiles whether ignore corrupted files during load
 * @param schemaToMergedSchemaMap map that associates each input recordwith a remapping of its fields relative to the merged schema
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>readerSchema</ParamName>
                    <ParamType>Schema</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ignoreBadFiles</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>schemaToMergedSchemaMap</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>useMultipleSchemas</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createRecordReader</MethodName>
            <MethodComment>/** 
 * Create and return an avro record reader. It uses the input schema passed in to the constructor.
 */
</MethodComment>
            <ReturnType>NullWritable</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>split</ParamName>
                    <ParamType>InputSplit</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>TaskAttemptContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>context;setStatus;[split.toString()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>listStatus</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>FileStatus</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>job</ParamName>
                    <ParamType>JobContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>