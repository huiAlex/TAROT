<Class>
    <Id>632</Id>
    <Package>org.apache.pig.builtin</Package>
    <ClassName>SUM</ClassName>
    <SuperClass>AlgebraicByteArrayMathBase</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>SUM  /** 
 * Generates the sum of a set of values. This class implements {@link org.apache.pig.Algebraic}, so if possible the execution will performed in a distributed fashion. &lt;p&gt; SUM can operate on any numeric type.  It can also operate on bytearrays, which it will cast to doubles.  It expects a bag of tuples of one record each.  If Pig knows from the schema that this function will be passed a bag of integers or longs, it will use a specially adapted version of SUM that uses integer arithmetic for summing the data.  The return type of SUM is double for float, double, or bytearray arguments and long for int or long arguments. &lt;p&gt; SUM implements the  {@link org.apache.pig.Accumulator} interface as well.While this will never be the preferred method of usage it is available in case the combiner can not be used for a given calculation.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>SUM</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setOp;[KNOWN_OP.SUM]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOp</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>KNOWN_OP</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOp</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>KNOWN_OP</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getArgToFuncMapping</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>FuncSpec</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>List&lt;FuncSpec&gt; [funcList=new ArrayList&lt;FuncSpec&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>funcList;add;[new FuncSpec(this.getClass().getName(),Schema.generateNestedSchema(DataType.BAG,DataType.BYTEARRAY))]</InnerMethodInvoke>
                <InnerMethodInvoke>funcList;add;[new FuncSpec(DoubleSum.class.getName(),Schema.generateNestedSchema(DataType.BAG,DataType.DOUBLE))]</InnerMethodInvoke>
                <InnerMethodInvoke>funcList;add;[new FuncSpec(DoubleSum.class.getName(),Schema.generateNestedSchema(DataType.BAG,DataType.FLOAT))]</InnerMethodInvoke>
                <InnerMethodInvoke>funcList;add;[new FuncSpec(LongSum.class.getName(),Schema.generateNestedSchema(DataType.BAG,DataType.INTEGER))]</InnerMethodInvoke>
                <InnerMethodInvoke>funcList;add;[new FuncSpec(LongSum.class.getName(),Schema.generateNestedSchema(DataType.BAG,DataType.LONG))]</InnerMethodInvoke>
                <InnerMethodInvoke>funcList;add;[new FuncSpec(BigDecimalSum.class.getName(),Schema.generateNestedSchema(DataType.BAG,DataType.BIGDECIMAL))]</InnerMethodInvoke>
                <InnerMethodInvoke>funcList;add;[new FuncSpec(BigIntegerSum.class.getName(),Schema.generateNestedSchema(DataType.BAG,DataType.BIGINTEGER))]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>