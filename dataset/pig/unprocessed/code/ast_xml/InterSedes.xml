<Class>
    <Id>525</Id>
    <Package>org.apache.pig.data</Package>
    <ClassName>InterSedes</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>InterSedes  /** 
 * A class to handle reading and writing of intermediate results of data types. The serialization format used by this class more efficient than  what was used in DataReaderWriter .  The format used by the functions in this class is subject to change, so it should be used ONLY to store intermediate results within a pig query.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>readDatum</MethodName>
            <MethodComment>/** 
 * Get the next object from DataInput in
 * @param in
 * @return Next object from DataInput in
 * @throws IOException
 * @throws ExecException
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>in</ParamName>
                    <ParamType>DataInput</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>ExecException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readDatum</MethodName>
            <MethodComment>/** 
 * Get the next object from DataInput in of the type of type argument The type information has been read from DataInput.
 * @param in
 * @param type
 * @return Next object from DataInput in
 * @throws IOException
 * @throws ExecException
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>in</ParamName>
                    <ParamType>DataInput</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>byte</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>ExecException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addColsToTuple</MethodName>
            <MethodComment>/** 
 * The type of next object has been determined to be of type Tuple, add the columns that belong to the tuple to given tuple argument t
 * @param in
 * @param t
 * @throws IOException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>in</ParamName>
                    <ParamType>DataInput</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeDatum</MethodName>
            <MethodComment>/** 
 * Write given object val to DataOutput out
 * @param out
 * @param val
 * @throws IOException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>DataOutput</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>val</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeDatum</MethodName>
            <MethodComment>/** 
 * Write given object val of DataType type to DataOutput out
 * @param out output
 * @param val value to write
 * @param type type, as defined in {@link DataType}
 * @throws IOException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>DataOutput</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>val</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>byte</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTupleRawComparatorClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>? extends TupleRawComparator</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>