<Class>
    <Id>998</Id>
    <Package>org.apache.pig.backend.hadoop.executionengine.spark.optimizer</Package>
    <ClassName>AccumulatorOptimizer</ClassName>
    <SuperClass>SparkOpPlanVisitor</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>AccumulatorOptimizer  /** 
 * A visitor to optimize plans that determines if a vertex plan can run in accumulative mode.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>AccumulatorOptimizer</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>plan</ParamName>
                    <ParamType>SparkOperPlan</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitSparkOp</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sparkOperator</ParamName>
                    <ParamType>SparkOperator</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PhysicalPlan [plan=sparkOperator.physicalPlan]</InnerVar>
                <InnerVar>List&lt;PhysicalOperator&gt; [pos=plan.getRoots()]</InnerVar>
                <InnerVar>List&lt;POGlobalRearrange&gt; [glrs=PlanHelper.getPhysicalOperators(plan,POGlobalRearrange.class)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>VisitorException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>