<Class>
    <Id>533</Id>
    <Package>org.apache.pig.backend.hadoop.executionengine.tez.plan.optimizer</Package>
    <ClassName>TezOperDependencyParallelismEstimator</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>TezParallelismEstimator</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>TezOperDependencyParallelismEstimator  /** 
 * Estimate the parallelism of the vertex using: 1. parallelism of the predecessors 2. bloating factor of the physical plan of the predecessor Since currently it is only possible to reduce the parallelism estimation is exaggerated and will rely on Tez runtime to decrease the parallelism
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>DEFAULT_FLATTEN_FACTOR</FieldName>
            <FieldType>double</FieldType>
        </Field>
        <Field>
            <FieldName>DEFAULT_FILTER_FACTOR</FieldName>
            <FieldType>double</FieldType>
        </Field>
        <Field>
            <FieldName>DEFAULT_LIMIT_FACTOR</FieldName>
            <FieldType>double</FieldType>
        </Field>
        <Field>
            <FieldName>DEFAULT_DISTINCT_FACTOR</FieldName>
            <FieldType>double</FieldType>
        </Field>
        <Field>
            <FieldName>DEFAULT_AGGREGATION_FACTOR</FieldName>
            <FieldType>double</FieldType>
        </Field>
        <Field>
            <FieldName>pc</FieldName>
            <FieldType>PigContext</FieldType>
        </Field>
        <Field>
            <FieldName>maxTaskCount</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>bytesPerReducer</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>factor</FieldName>
            <FieldType>double</FieldType>
        </Field>
        <Field>
            <FieldName>outputKey</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>tezOp</FieldName>
            <FieldType>TezOperator</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>setPigContext</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pc</ParamName>
                    <ParamType>PigContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>estimateParallelism</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>plan</ParamName>
                    <ParamType>TezOperPlan</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tezOper</ParamName>
                    <ParamType>TezOperator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>conf</ParamName>
                    <ParamType>Configuration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;TezOperator&gt; [preds=plan.getPredecessors(tezOper)]</InnerVar>
                <InnerVar>double [estimatedParallelism=0]</InnerVar>
                <InnerVar>int [roundedEstimatedParallelism=(int)Math.ceil(estimatedParallelism)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPredecessorWithKey</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>TezOperator</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>plan</ParamName>
                    <ParamType>TezOperPlan</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tezOper</ParamName>
                    <ParamType>TezOperator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>inputKey</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;TezOperator&gt; [preds=plan.getPredecessors(tezOper)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>TezParallelismFactorVisitor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tezOp</ParamName>
                    <ParamType>TezOperator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>successor</ParamName>
                    <ParamType>TezOperator</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitFilter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fl</ParamName>
                    <ParamType>POFilter</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>VisitorException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitPOForEach</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>nfe</ParamName>
                    <ParamType>POForEach</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;Boolean&gt; [flattens=nfe.getToBeFlattened()]</InnerVar>
                <InnerVar>List&lt;PhysicalPlan&gt; [inputPlans=nfe.getInputPlans()]</InnerVar>
                <InnerVar>boolean [containFlatten=false]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>VisitorException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitLimit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lim</ParamName>
                    <ParamType>POLimit</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>VisitorException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitFRJoin</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>join</ParamName>
                    <ParamType>POFRJoin</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>VisitorException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitMergeJoin</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>join</ParamName>
                    <ParamType>POMergeJoin</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>VisitorException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitPackage</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pkg</ParamName>
                    <ParamType>POPackage</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>VisitorException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitSplit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sp</ParamName>
                    <ParamType>POSplit</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PhysicalPlan [plan=getSplitBranch(sp,outputKey)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;pushWalker;[mCurrentWalker.spawnChildWalker(plan)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;visit;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;popWalker;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>VisitorException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSplitBranch</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PhysicalPlan</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>split</ParamName>
                    <ParamType>POSplit</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>outputKey</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;PhysicalPlan&gt; [plans=split.getPlans()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>VisitorException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFactor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>double</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>