<Class>
    <Id>1300</Id>
    <Package>org.apache.pig.impl.logicalLayer.schema</Package>
    <ClassName>SchemaUtil</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>SchemaUtil  /** 
 * A utility class for simplify the schema creation, especially for bag and tuple schema. Currently, it only support simple schema creation, nested tuple and bag is not supported
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>SUPPORTED_TYPE_SET</FieldName>
            <FieldType>Set</FieldType>
        </Field>
        <Field>
            <FieldName>SUPPORTED_TYPE_SET</FieldName>
            <FieldType>Byte</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>newTupleSchema</MethodName>
            <MethodComment>/** 
 * Create a new tuple schema according the tuple name and two list: names of fields, types of fields
 * @param tupleName
 * @param fieldNames
 * @param dataTypes
 * @return tuple schema
 * @throws FrontendException
 */
</MethodComment>
            <ReturnType>Schema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tupleName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fieldNames</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dataTypes</ParamName>
                    <ParamType>Byte</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;Schema.FieldSchema&gt; [tokenSchemas=new ArrayList&lt;Schema.FieldSchema&gt;()]</InnerVar>
                <InnerVar>Schema [tupleSchema=new Schema(tokenSchemas)]</InnerVar>
                <InnerVar>Schema.FieldSchema [tupleField=new Schema.FieldSchema(tupleName,tupleSchema)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkParameters;[fieldNames, dataTypes]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newTupleSchema</MethodName>
            <MethodComment>/** 
 * Create a new tuple schema according the tuple name and two arrays: names of fields, types of fields
 * @param tupleName
 * @param fieldNames
 * @param dataTypes
 * @return tuple schema
 * @throws FrontendException
 */
</MethodComment>
            <ReturnType>Schema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tupleName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fieldNames</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dataTypes</ParamName>
                    <ParamType>Byte[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newTupleSchema</MethodName>
            <MethodComment>/** 
 * Create a new tuple schema according the two list: names of fields, types of fields, the default tuple name is t.
 * @param fieldNames
 * @param dataTypes
 * @return tuple schema
 * @throws FrontendException
 */
</MethodComment>
            <ReturnType>Schema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fieldNames</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dataTypes</ParamName>
                    <ParamType>Byte</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newTupleSchema</MethodName>
            <MethodComment>/** 
 * Create a new tuple schema according one list: types of fields, the default names of fields are f0,f1,f2..., and the tuple name is t.
 * @param dataTypes
 * @return tuple schema
 * @throws FrontendException
 */
</MethodComment>
            <ReturnType>Schema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dataTypes</ParamName>
                    <ParamType>Byte</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;String&gt; [names=newNames(dataTypes.size())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newTupleSchema</MethodName>
            <MethodComment>/** 
 * Create a new tuple schema according the two arrays: names of fields, types of fields, the default tuple name is t.
 * @param names
 * @param dataTypes
 * @return tuple schema
 * @throws FrontendException
 */
</MethodComment>
            <ReturnType>Schema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>names</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dataTypes</ParamName>
                    <ParamType>Byte[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newTupleSchema</MethodName>
            <MethodComment>/** 
 * Create a new tuple schema according one array: types of fields, the default names of fields are f0,f1,f2..., and the tuple name is t.
 * @param dataTypes
 * @return tuple schema
 * @throws FrontendException
 */
</MethodComment>
            <ReturnType>Schema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dataTypes</ParamName>
                    <ParamType>Byte[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newNames</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>size</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;String&gt; [names=new ArrayList&lt;String&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newBagSchema</MethodName>
            <MethodComment>/** 
 * Create a bag schema according the bag name,tuple name and two list: name of fields, type of fields
 * @param bagName
 * @param tupleName
 * @param fieldNames
 * @param dataTypes
 * @return bag schema
 * @throws FrontendException
 */
</MethodComment>
            <ReturnType>Schema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>bagName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tupleName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fieldNames</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dataTypes</ParamName>
                    <ParamType>Byte</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Schema [tupleSchema=newTupleSchema(tupleName,fieldNames,dataTypes)]</InnerVar>
                <InnerVar>Schema.FieldSchema [bagField=new Schema.FieldSchema(bagName,tupleSchema,DataType.BAG)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkParameters;[fieldNames, dataTypes]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newBagSchema</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Schema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>bagName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tupleName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fieldNames</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dataTypes</ParamName>
                    <ParamType>Byte[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newBagSchema</MethodName>
            <MethodComment>/** 
 * Create a bag schema according two list: name of fields, type of fields, and the default bag name is b, the default tuple name is t.
 * @param names
 * @param dataTypes
 * @return bag schema
 * @throws FrontendException
 */
</MethodComment>
            <ReturnType>Schema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>names</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dataTypes</ParamName>
                    <ParamType>Byte</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Schema [tupleSchema=newTupleSchema(names,dataTypes)]</InnerVar>
                <InnerVar>Schema.FieldSchema [bagField=new Schema.FieldSchema("b",tupleSchema,DataType.BAG)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkParameters;[names, dataTypes]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newBagSchema</MethodName>
            <MethodComment>/** 
 * Create a new tuple schema according one list: types of fields, the default names of fields are f0,f1,f2..., and the tuple is t, the bag name is b.
 * @param dataTypes
 * @return bag schema
 * @throws FrontendException
 */
</MethodComment>
            <ReturnType>Schema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dataTypes</ParamName>
                    <ParamType>Byte</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;String&gt; [names=newNames(dataTypes.size())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newBagSchema</MethodName>
            <MethodComment>/** 
 * Create a new tuple schema according two arrays: names of field,types of fields. The default tuple name is t, and the bag is b.
 * @param names
 * @param dataTypes
 * @return bag schema
 * @throws FrontendException
 */
</MethodComment>
            <ReturnType>Schema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>names</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dataTypes</ParamName>
                    <ParamType>Byte[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newBagSchema</MethodName>
            <MethodComment>/** 
 * Create a new tuple schema according one array: the type of fields, the tuple name is t, and the bag name is b.
 * @param dataTypes
 * @return bag schema
 * @throws FrontendException
 */
</MethodComment>
            <ReturnType>Schema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dataTypes</ParamName>
                    <ParamType>Byte[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkDataTypes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dataTypes</ParamName>
                    <ParamType>Byte</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkParameters</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>names</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dataTypes</ParamName>
                    <ParamType>Byte</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkDataTypes;[dataTypes]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>