<Class>
    <Id>181</Id>
    <Package>org.apache.pig.impl.streaming</Package>
    <ClassName>StreamingCommand</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Serializable</SuperInterface>
        <SuperInterface>Cloneable</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>StreamingCommand  /** 
 * {@link StreamingCommand} represents the specification of an externalcommand to be executed in a Pig Query.  &lt;code&gt;StreamingCommand&lt;/code&gt; encapsulates all relevant details of the command specified by the user either directly via the &lt;code&gt;STREAM&lt;/code&gt; operator or indirectly via a &lt;code&gt;DEFINE&lt;/code&gt; operator. It includes details such as input/output/error specifications and also files to be shipped to the cluster and files to be cached.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>serialVersionUID</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>executable</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>argv</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>shipSpec</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>shipSpec</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>cacheSpec</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>cacheSpec</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>handleSpecs</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>handleSpecs</FieldName>
            <FieldType>Handle</FieldType>
        </Field>
        <Field>
            <FieldName>persistStderr</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>logDir</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>logFilesLimit</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>MAX_TASKS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>shipFiles</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>pigContext</FieldName>
            <FieldType>PigContext</FieldType>
        </Field>
        <Field>
            <FieldName>serialVersionUID</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>name</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>spec</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>StreamingCommand</MethodName>
            <MethodComment>/** 
 * Create a new &lt;code&gt;StreamingCommand&lt;/code&gt; with the given command.
 * @param pigContext PigContext structure
 * @param argv parsed arguments of the &lt;code&gt;command&lt;/code&gt;
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pigContext</ParamName>
                    <ParamType>PigContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>argv</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getExecutable</MethodName>
            <MethodComment>/** 
 * Get the command to be executed.
 * @return the command to be executed
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setExecutable</MethodName>
            <MethodComment>/** 
 * Set the executable for the &lt;code&gt;StreamingCommand&lt;/code&gt;.
 * @param executable the executable for the &lt;code&gt;StreamingCommand&lt;/code&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>executable</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setCommandArgs</MethodName>
            <MethodComment>/** 
 * Set the command line arguments for the &lt;code&gt;StreamingCommand&lt;/code&gt;.
 * @param argv the command line arguments for the &lt;code&gt;StreamingCommand&lt;/code&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>argv</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCommandArgs</MethodName>
            <MethodComment>/** 
 * Get the parsed command arguments.
 * @return the parsed command arguments as &lt;code&gt;String[]&lt;/code&gt;
 */
</MethodComment>
            <ReturnType>String[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getShipSpecs</MethodName>
            <MethodComment>/** 
 * Get the list of files which need to be shipped to the cluster.
 * @return the list of files which need to be shipped to the cluster
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCacheSpecs</MethodName>
            <MethodComment>/** 
 * Get the list of files which need to be cached on the execute nodes.
 * @return the list of files which need to be cached on the execute nodes
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addPathToShip</MethodName>
            <MethodComment>/** 
 * Add a file to be shipped to the cluster.  Users can use this to distribute executables and other necessary files to the clusters.
 * @param path path of the file to be shipped to the cluster
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>path</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>File [file=new File(path)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>shipSpec;add;[path]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addPathToCache</MethodName>
            <MethodComment>/** 
 * Add a file to be cached on execute nodes on the cluster. The file is assumed to be available at the shared filesystem.
 * @param path path of the file to be cached on the execute nodes
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>path</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>URI [pathUri=null]</InnerVar>
                <InnerVar>URI [dfsPath=null]</InnerVar>
                <InnerVar>boolean [exists=false]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cacheSpec;add;[path]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addHandleSpec</MethodName>
            <MethodComment>/** 
 * Attach a  {@link HandleSpec} to a given {@link Handle}
 * @param handle &lt;code&gt;Handle&lt;/code&gt; to which the specification is to be attached.
 * @param handleSpec &lt;code&gt;HandleSpec&lt;/code&gt; for the given handle.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>handle</ParamName>
                    <ParamType>Handle</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>handleSpec</ParamName>
                    <ParamType>HandleSpec</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;HandleSpec&gt; [handleSpecList=handleSpecs.get(handle)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>handleSpecList;add;[handleSpec]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setInputSpec</MethodName>
            <MethodComment>/** 
 * Set the input specification for the &lt;code&gt;StreamingCommand&lt;/code&gt;.
 * @param spec input specification
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>spec</ParamName>
                    <ParamType>HandleSpec</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;HandleSpec&gt; [inputSpecs=getHandleSpecs(Handle.INPUT)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getInputSpec</MethodName>
            <MethodComment>/** 
 * Get the input specification of the &lt;code&gt;StreamingCommand&lt;/code&gt;.
 * @return input specification of the &lt;code&gt;StreamingCommand&lt;/code&gt;
 */
</MethodComment>
            <ReturnType>HandleSpec</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>List&lt;HandleSpec&gt; [inputSpecs=getHandleSpecs(Handle.INPUT)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setOutputSpec</MethodName>
            <MethodComment>/** 
 * Set the specification for the primary output of the  &lt;code&gt;StreamingCommand&lt;/code&gt;.
 * @param spec specification for the primary output of the &lt;code&gt;StreamingCommand&lt;/code&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>spec</ParamName>
                    <ParamType>HandleSpec</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;HandleSpec&gt; [outputSpecs=getHandleSpecs(Handle.OUTPUT)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOutputSpec</MethodName>
            <MethodComment>/** 
 * Get the specification of the primary output of the  &lt;code&gt;StreamingCommand&lt;/code&gt;.
 * @return specification of the primary output of the &lt;code&gt;StreamingCommand&lt;/code&gt;
 */
</MethodComment>
            <ReturnType>HandleSpec</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>List&lt;HandleSpec&gt; [outputSpecs=getHandleSpecs(Handle.OUTPUT)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getHandleSpecs</MethodName>
            <MethodComment>/** 
 * Get specifications for the given &lt;code&gt;Handle&lt;/code&gt;.
 * @param handle &lt;code&gt;Handle&lt;/code&gt; of the stream
 * @return specification for the given &lt;code&gt;Handle&lt;/code&gt;
 */
</MethodComment>
            <ReturnType>HandleSpec</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>handle</ParamName>
                    <ParamType>Handle</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPersistStderr</MethodName>
            <MethodComment>/** 
 * Should the stderr of the managed process be persisted?
 * @return &lt;code&gt;true&lt;/code&gt; if the stderr of the managed process should bepersisted, &lt;code&gt;false&lt;/code&gt; otherwise.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setPersistStderr</MethodName>
            <MethodComment>/** 
 * Specify if the stderr of the managed process should be persisted.
 * @param persistStderr &lt;code&gt;true&lt;/code&gt; if the stderr of the managed process should be persisted, else &lt;code&gt;false&lt;/code&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>persistStderr</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLogDir</MethodName>
            <MethodComment>/** 
 * Get the directory where the log-files of the command are persisted.
 * @return the directory where the log-files of the command are persisted
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setLogDir</MethodName>
            <MethodComment>/** 
 * Set the directory where the log-files of the command are persisted.
 * @param logDir the directory where the log-files of the command are persisted
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>logDir</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setPersistStderr;[true]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLogFilesLimit</MethodName>
            <MethodComment>/** 
 * Get the maximum number of tasks whose stderr logs files are persisted.
 * @return the maximum number of tasks whose stderr logs files are persisted
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setLogFilesLimit</MethodName>
            <MethodComment>/** 
 * Set the maximum number of tasks whose stderr logs files are persisted.
 * @param logFilesLimit the maximum number of tasks whose stderr logs files are persisted
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>logFilesLimit</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setShipFiles</MethodName>
            <MethodComment>/** 
 * Set whether files should be shipped or not.
 * @param shipFiles &lt;code&gt;true&lt;/code&gt; if files of this command should beshipped, &lt;code&gt;false&lt;/code&gt; otherwise
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>shipFiles</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getShipFiles</MethodName>
            <MethodComment>/** 
 * Get whether files for this command should be shipped or not.
 * @return &lt;code&gt;true&lt;/code&gt; if files of this command should be shipped, &lt;code&gt;false&lt;/code&gt; otherwise
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>StringBuffer [sb=new StringBuffer()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>sb;append;["(" + getInputSpec().toString() + "/"+ getOutputSpec()+ ")"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clone</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>HandleSpec</MethodName>
            <MethodComment>/** 
 * Create a new  {@link HandleSpec} with a given name using the default{@link PigStorage} serializer/deserializer.
 * @param handleName name of the handle (one of &lt;code&gt;stdin&lt;/code&gt;,&lt;code&gt;stdout&lt;/code&gt; or a file-path)
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>handleName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>HandleSpec</MethodName>
            <MethodComment>/** 
 * Create a new  {@link HandleSpec} with a given name using the default{@link PigStorage} serializer/deserializer.
 * @param handleName name of the handle (one of &lt;code&gt;stdin&lt;/code&gt;,&lt;code&gt;stdout&lt;/code&gt; or a file-path)
 * @param spec serializer/deserializer spec
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>handleName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>spec</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compareTo</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>o</ParamName>
                    <ParamType>HandleSpec</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getName</MethodName>
            <MethodComment>/** 
 * Get the &lt;b&gt;name&lt;/b&gt; of the &lt;code&gt;HandleSpec&lt;/code&gt;.
 * @return the &lt;b&gt;name&lt;/b&gt; of the &lt;code&gt;HandleSpec&lt;/code&gt; (one of &lt;code&gt;stdin&lt;/code&gt;, &lt;code&gt;stdout&lt;/code&gt; or a file-path)
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setName</MethodName>
            <MethodComment>/** 
 * Set the &lt;b&gt;name&lt;/b&gt; of the &lt;code&gt;HandleSpec&lt;/code&gt;.
 * @param name &lt;b&gt;name&lt;/b&gt; of the &lt;code&gt;HandleSpec&lt;/code&gt; (one of &lt;code&gt;stdin&lt;/code&gt;, &lt;code&gt;stdout&lt;/code&gt; or a file-path)
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSpec</MethodName>
            <MethodComment>/** 
 * Get the serializer/deserializer spec of the &lt;code&gt;HandleSpec&lt;/code&gt;.
 * @return the serializer/deserializer spec of the &lt;code&gt;HandleSpec&lt;/code&gt;
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setSpec</MethodName>
            <MethodComment>/** 
 * Set the serializer/deserializer spec of the &lt;code&gt;HandleSpec&lt;/code&gt;.
 * @param spec the serializer/deserializer spec of the &lt;code&gt;HandleSpec&lt;/code&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>spec</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>equals</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>obj</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hashCode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clone</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>