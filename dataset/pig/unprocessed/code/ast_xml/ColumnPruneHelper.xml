<Class>
    <Id>527</Id>
    <Package>org.apache.pig.newplan.logical.rules</Package>
    <ClassName>ColumnPruneHelper</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ColumnPruneHelper  /** 
 * Helper class used by ColumnMapKeyPrune to figure out what columns can be pruned. It doesn't make any changes to the operator plan
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>INPUTUIDS</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>OUTPUTUIDS</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>REQUIREDCOLS</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>currentPlan</FieldName>
            <FieldType>OperatorPlan</FieldType>
        </Field>
        <Field>
            <FieldName>subPlan</FieldName>
            <FieldType>OperatorSubPlan</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ColumnPruneHelper</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>currentPlan</ParamName>
                    <ParamType>OperatorPlan</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSubPlan</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>OperatorSubPlan</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>OperatorSubPlan [p=null]</InnerVar>
                <InnerVar>Iterator&lt;Operator&gt; [iter=currentPlan.getOperators()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addOperator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>op</ParamName>
                    <ParamType>Operator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>subplan</ParamName>
                    <ParamType>OperatorSubPlan</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;Operator&gt; [ll=currentPlan.getPredecessors(op)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>subplan;add;[op]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>check</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>List&lt;Operator&gt; [sources=currentPlan.getSources()]</InnerVar>
                <InnerVar>ColumnDependencyVisitor [v=new ColumnDependencyVisitor(currentPlan)]</InnerVar>
                <InnerVar>List&lt;Operator&gt; [ll=subPlan.getSources()]</InnerVar>
                <InnerVar>boolean [found=false]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clearAnnotation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Iterator&lt;Operator&gt; [iter=currentPlan.getOperators()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getColumns</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Integer</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>schema</ParamName>
                    <ParamType>LogicalSchema</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>uids</ParamName>
                    <ParamType>Long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Set&lt;Integer&gt; [cols=new HashSet&lt;Integer&gt;()]</InnerVar>
                <InnerVar>Iterator&lt;Long&gt; [iter=uids.iterator()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reportChanges</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>OperatorPlan</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ColumnDependencyVisitor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>plan</ParamName>
                    <ParamType>OperatorPlan</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>load</ParamName>
                    <ParamType>LOLoad</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Set&lt;Long&gt; [output=setOutputUids(load)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>load;annotate;[INPUTUIDS, output]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>filter</ParamName>
                    <ParamType>LOFilter</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Set&lt;Long&gt; [output=setOutputUids(filter)]</InnerVar>
                <InnerVar>Set&lt;Long&gt; [input=new HashSet&lt;Long&gt;(output)]</InnerVar>
                <InnerVar>LogicalExpressionPlan [exp=filter.getFilterPlan()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;collectUids;[filter, exp, input]</InnerMethodInvoke>
                <InnerMethodInvoke>filter;annotate;[INPUTUIDS, input]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>store</ParamName>
                    <ParamType>LOStore</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Set&lt;Long&gt; [output=setOutputUids(store)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>store;annotate;[INPUTUIDS, output]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>join</ParamName>
                    <ParamType>LOJoin</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Set&lt;Long&gt; [output=setOutputUids(join)]</InnerVar>
                <InnerVar>Set&lt;Long&gt; [input=new HashSet&lt;Long&gt;(output)]</InnerVar>
                <InnerVar>Collection&lt;LogicalExpressionPlan&gt; [exps=join.getExpressionPlanValues()]</InnerVar>
                <InnerVar>Iterator&lt;LogicalExpressionPlan&gt; [iter=exps.iterator()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>join;annotate;[INPUTUIDS, input]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cg</ParamName>
                    <ParamType>LOCogroup</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Set&lt;Long&gt; [output=setOutputUids(cg)]</InnerVar>
                <InnerVar>Set&lt;Long&gt; [input=new HashSet&lt;Long&gt;()]</InnerVar>
                <InnerVar>long [firstUid=-1]</InnerVar>
                <InnerVar>Map&lt;Integer,Long&gt; [generatedInputUids=cg.getGeneratedInputUids()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cg;annotate;[INPUTUIDS, input]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>limit</ParamName>
                    <ParamType>LOLimit</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Set&lt;Long&gt; [output=setOutputUids(limit)]</InnerVar>
                <InnerVar>Set&lt;Long&gt; [input=new HashSet&lt;Long&gt;(output)]</InnerVar>
                <InnerVar>LogicalExpressionPlan [exp=limit.getLimitPlan()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>limit;annotate;[INPUTUIDS, input]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>stream</ParamName>
                    <ParamType>LOStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Set&lt;Long&gt; [output=setOutputUids(stream)]</InnerVar>
                <InnerVar>LogicalRelationalOperator [pred=(LogicalRelationalOperator)plan.getPredecessors(stream).get(0)]</InnerVar>
                <InnerVar>Set&lt;Long&gt; [input=getAllUids(pred.getSchema())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>stream;annotate;[INPUTUIDS, input]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>distinct</ParamName>
                    <ParamType>LODistinct</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Set&lt;Long&gt; [input=new HashSet&lt;Long&gt;()]</InnerVar>
                <InnerVar>LogicalSchema [s=distinct.getSchema()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setOutputUids;[distinct]</InnerMethodInvoke>
                <InnerMethodInvoke>distinct;annotate;[INPUTUIDS, input]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cross</ParamName>
                    <ParamType>LOCross</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Set&lt;Long&gt; [output=setOutputUids(cross)]</InnerVar>
                <InnerVar>List&lt;Operator&gt; [preds=plan.getPredecessors(cross)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cross;annotate;[INPUTUIDS, output]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>union</ParamName>
                    <ParamType>LOUnion</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Set&lt;Long&gt; [output=setOutputUids(union)]</InnerVar>
                <InnerVar>Set&lt;Long&gt; [input=new HashSet&lt;Long&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>union;annotate;[INPUTUIDS, input]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>split</ParamName>
                    <ParamType>LOSplit</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Set&lt;Long&gt; [output=setOutputUids(split)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>split;annotate;[INPUTUIDS, output]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>splitOutput</ParamName>
                    <ParamType>LOSplitOutput</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Set&lt;Long&gt; [output=setOutputUids(splitOutput)]</InnerVar>
                <InnerVar>Set&lt;Long&gt; [input=new HashSet&lt;Long&gt;()]</InnerVar>
                <InnerVar>LogicalExpressionPlan [exp=splitOutput.getFilterPlan()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;collectUids;[splitOutput, exp, input]</InnerMethodInvoke>
                <InnerMethodInvoke>splitOutput;annotate;[INPUTUIDS, input]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sort</ParamName>
                    <ParamType>LOSort</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Set&lt;Long&gt; [output=setOutputUids(sort)]</InnerVar>
                <InnerVar>Set&lt;Long&gt; [input=new HashSet&lt;Long&gt;(output)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>sort;annotate;[INPUTUIDS, input]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rank</ParamName>
                    <ParamType>LORank</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Set&lt;Long&gt; [output=setOutputUids(rank)]</InnerVar>
                <InnerVar>Set&lt;Long&gt; [input=new HashSet&lt;Long&gt;(output)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rank;annotate;[INPUTUIDS, input]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAllUids</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>schema</ParamName>
                    <ParamType>LogicalSchema</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Set&lt;Long&gt; [uids=new HashSet&lt;Long&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>foreach</ParamName>
                    <ParamType>LOForEach</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Set&lt;Long&gt; [output=setOutputUids(foreach)]</InnerVar>
                <InnerVar>LOGenerate [gen=OptimizerUtils.findGenerate(foreach)]</InnerVar>
                <InnerVar>Set&lt;Long&gt; [input=(Set&lt;Long&gt;)gen.getAnnotation(INPUTUIDS)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>gen;annotate;[OUTPUTUIDS, output]</InnerMethodInvoke>
                <InnerMethodInvoke>null;visit;[gen]</InnerMethodInvoke>
                <InnerMethodInvoke>foreach;annotate;[INPUTUIDS, input]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>gen</ParamName>
                    <ParamType>LOGenerate</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Set&lt;Long&gt; [output=(Set&lt;Long&gt;)gen.getAnnotation(OUTPUTUIDS)]</InnerVar>
                <InnerVar>Set&lt;Long&gt; [input=new HashSet&lt;Long&gt;()]</InnerVar>
                <InnerVar>List&lt;LogicalExpressionPlan&gt; [ll=gen.getOutputPlans()]</InnerVar>
                <InnerVar>Iterator&lt;Long&gt; [iter=output.iterator()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>gen;annotate;[INPUTUIDS, input]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>load</ParamName>
                    <ParamType>LOInnerLoad</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Set&lt;Long&gt; [output=setOutputUids(load)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>load;annotate;[INPUTUIDS, output]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>collectUids</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>currentOp</ParamName>
                    <ParamType>LogicalRelationalOperator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>exp</ParamName>
                    <ParamType>LogicalExpressionPlan</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>uids</ParamName>
                    <ParamType>Long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;Operator&gt; [ll=exp.getSinks()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setOutputUids</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>op</ParamName>
                    <ParamType>LogicalRelationalOperator</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;Operator&gt; [ll=plan.getSuccessors(op)]</InnerVar>
                <InnerVar>Set&lt;Long&gt; [uids=new HashSet&lt;Long&gt;()]</InnerVar>
                <InnerVar>LogicalSchema [s=op.getSchema()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>op;annotate;[OUTPUTUIDS, uids]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>