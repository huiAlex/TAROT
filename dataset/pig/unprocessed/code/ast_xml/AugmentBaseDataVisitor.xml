<Class>
    <Id>298</Id>
    <Package>org.apache.pig.pen</Package>
    <ClassName>AugmentBaseDataVisitor</ClassName>
    <SuperClass>LogicalRelationalNodesVisitor</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>baseData</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>baseData</FieldName>
            <FieldType>LOLoad</FieldType>
        </Field>
        <Field>
            <FieldName>newBaseData</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>newBaseData</FieldName>
            <FieldType>LOLoad</FieldType>
        </Field>
        <Field>
            <FieldName>derivedData</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>derivedData</FieldName>
            <FieldType>Operator</FieldType>
        </Field>
        <Field>
            <FieldName>limit</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>logToPhysMap</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>logToPhysMap</FieldName>
            <FieldType>Operator</FieldType>
        </Field>
        <Field>
            <FieldName>oriLimitMap</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>oriLimitMap</FieldName>
            <FieldType>LOLimit</FieldType>
        </Field>
        <Field>
            <FieldName>outputConstraintsMap</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>outputConstraintsMap</FieldName>
            <FieldType>Operator</FieldType>
        </Field>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>AugmentBaseDataVisitor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>plan</ParamName>
                    <ParamType>OperatorPlan</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>logToPhysMap</ParamName>
                    <ParamType>Operator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>baseData</ParamName>
                    <ParamType>LOLoad</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>derivedData</ParamName>
                    <ParamType>Operator</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setLimit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNewBaseData</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>LOLoad</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>MultiMap&lt;FileSpec,DataBag&gt; [inputDataMap=new MultiMap&lt;FileSpec,DataBag&gt;()]</InnerVar>
                <InnerVar>int [index=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ExecException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOriLimitMap</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>LOLimit</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cg</ParamName>
                    <ParamType>LOCogroup</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DataBag [outputConstraints=outputConstraintsMap.get(cg)]</InnerVar>
                <InnerVar>boolean [ableToHandle=true]</InnerVar>
                <InnerVar>List&lt;List&lt;Integer&gt;&gt; [groupSpecs=new LinkedList&lt;List&lt;Integer&gt;&gt;()]</InnerVar>
                <InnerVar>int [numCols=-1]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>outputConstraintsMap;remove;[cg]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>join</ParamName>
                    <ParamType>LOJoin</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DataBag [outputConstraints=outputConstraintsMap.get(join)]</InnerVar>
                <InnerVar>boolean [ableToHandle=true]</InnerVar>
                <InnerVar>List&lt;List&lt;Integer&gt;&gt; [groupSpecs=new LinkedList&lt;List&lt;Integer&gt;&gt;()]</InnerVar>
                <InnerVar>int [numCols=-1]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>outputConstraintsMap;remove;[join]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cs</ParamName>
                    <ParamType>LOCross</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dt</ParamName>
                    <ParamType>LODistinct</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DataBag [outputConstraints=outputConstraintsMap.get(dt)]</InnerVar>
                <InnerVar>DataBag [inputConstraints=outputConstraintsMap.get(dt.getInput((LogicalPlan)plan))]</InnerVar>
                <InnerVar>boolean [emptyInputConstraints=inputConstraints.size() == 0]</InnerVar>
                <InnerVar>Set&lt;Tuple&gt; [distinctSet=new HashSet&lt;Tuple&gt;()]</InnerVar>
                <InnerVar>Iterator&lt;Tuple&gt; [it]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>outputConstraintsMap;remove;[dt]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>filter</ParamName>
                    <ParamType>LOFilter</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DataBag [outputConstraints=outputConstraintsMap.get(filter)]</InnerVar>
                <InnerVar>LogicalExpressionPlan [filterCond=filter.getFilterPlan()]</InnerVar>
                <InnerVar>DataBag [inputConstraints=outputConstraintsMap.get(filter.getInput((LogicalPlan)plan))]</InnerVar>
                <InnerVar>DataBag [outputData=derivedData.get(filter)]</InnerVar>
                <InnerVar>DataBag [inputData=derivedData.get(filter.getInput((LogicalPlan)plan))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>outputConstraintsMap;remove;[filter]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>forEach</ParamName>
                    <ParamType>LOForEach</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DataBag [outputConstraints=outputConstraintsMap.get(forEach)]</InnerVar>
                <InnerVar>LogicalPlan [plan=forEach.getInnerPlan()]</InnerVar>
                <InnerVar>boolean [ableToHandle=true]</InnerVar>
                <InnerVar>List&lt;Integer&gt; [cols=new ArrayList&lt;Integer&gt;()]</InnerVar>
                <InnerVar>boolean [cast=false]</InnerVar>
                <InnerVar>Operator [op=plan.getSinks().get(0)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>outputConstraintsMap;remove;[forEach]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>load</ParamName>
                    <ParamType>LOLoad</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DataBag [inputData=baseData.get(load)]</InnerVar>
                <InnerVar>DataBag [newInputData=newBaseData.get(load)]</InnerVar>
                <InnerVar>LogicalSchema [schema]</InnerVar>
                <InnerVar>Tuple [exampleTuple=inputData.iterator().next()]</InnerVar>
                <InnerVar>DataBag [outputConstraints=outputConstraintsMap.get(load)]</InnerVar>
                <InnerVar>boolean [newInput=false]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>outputConstraintsMap;remove;[load]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;[exampleTuple.toString()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>inInput</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>newTuple</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>DataBag</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>schema</ParamName>
                    <ParamType>LogicalSchema</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [result]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ExecException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>LOSort</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DataBag [outputConstraints=outputConstraintsMap.get(s)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>outputConstraintsMap;remove;[s]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>split</ParamName>
                    <ParamType>LOSplit</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>store</ParamName>
                    <ParamType>LOStore</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DataBag [outputConstraints=outputConstraintsMap.get(store)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>u</ParamName>
                    <ParamType>LOUnion</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DataBag [outputConstraints=outputConstraintsMap.get(u)]</InnerVar>
                <InnerVar>int [count=0]</InnerVar>
                <InnerVar>List&lt;Operator&gt; [inputs=u.getInputs(((LogicalPlan)plan))]</InnerVar>
                <InnerVar>int [noInputs=inputs.size()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>outputConstraintsMap;remove;[u]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lm</ParamName>
                    <ParamType>LOLimit</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DataBag [outputConstraints=outputConstraintsMap.get(lm)]</InnerVar>
                <InnerVar>DataBag [inputConstraints=outputConstraintsMap.get(lm.getInput((LogicalPlan)plan))]</InnerVar>
                <InnerVar>DataBag [inputData=derivedData.get(lm.getInput((LogicalPlan)plan))]</InnerVar>
                <InnerVar>POLimit [poLimit=(POLimit)logToPhysMap.get(lm)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>outputConstraintsMap;remove;[lm]</InnerMethodInvoke>
                <InnerMethodInvoke>oriLimitMap;put;[lm, Long.valueOf(poLimit.getLimit())]</InnerMethodInvoke>
                <InnerMethodInvoke>poLimit;setLimit;[inputConstraints.size() - 1]</InnerMethodInvoke>
                <InnerMethodInvoke>lm;setLimit;[poLimit.getLimit()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>GetGroupByInput</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Tuple</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>groupLabel</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>groupCols</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>numFields</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Tuple [t=TupleFactory.getInstance().newTuple(numFields)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ExecException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>GetJoinInput</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Tuple</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>group</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>groupCols0</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>groupCols</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>numFields</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Tuple [t=TupleFactory.getInstance().newTuple(numFields)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ExecException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>GetJoinInput</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Tuple</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>group</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>groupCols</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>numFields</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Tuple [t=TupleFactory.getInstance().newTuple(numFields)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ExecException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>BackPropConstraint</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Tuple</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>outputConstraint</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cols</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>inputSchema</ParamName>
                    <ParamType>LogicalSchema</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cast</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Tuple [inputConst=TupleFactory.getInstance().newTuple(inputSchema.getFields().size())]</InnerVar>
                <InnerVar>Tuple [inputConstraint=new ExampleTuple(inputConst)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ExecException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>GenerateMatchingTuple</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ExampleTuple</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>schema</ParamName>
                    <ParamType>LogicalSchema</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>plan</ParamName>
                    <ParamType>LogicalExpressionPlan</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>invert</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
                <ExceptionType>ExecException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>GenerateMatchingTuple</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ExampleTuple</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>constraint</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>predicate</ParamName>
                    <ParamType>LogicalExpressionPlan</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>invert</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Tuple [t=TupleFactory.getInstance().newTuple(constraint.size())]</InnerVar>
                <InnerVar>ExampleTuple [tOut=new ExampleTuple(t)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;GenerateMatchingTupleHelper;[tOut, predicate.getSources().get(0), invert]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ExecException</ExceptionType>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>GenerateMatchingTupleHelper</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pred</ParamName>
                    <ParamType>Operator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>invert</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
                <ExceptionType>ExecException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>GenerateMatchingTupleHelper</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pred</ParamName>
                    <ParamType>BinaryExpression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>invert</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [leftIsConst=false, rightIsConst=false]</InnerVar>
                <InnerVar>Object [leftConst=null, rightConst=null]</InnerVar>
                <InnerVar>byte [leftDataType=0, rightDataType=0]</InnerVar>
                <InnerVar>int [leftCol=-1, rightCol=-1]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
                <ExceptionType>ExecException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>GenerateMatchingTupleHelper</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>op</ParamName>
                    <ParamType>AndExpression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>invert</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Operator [input=op.getLhs()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;GenerateMatchingTupleHelper;[t, input, invert]</InnerMethodInvoke>
                <InnerMethodInvoke>null;GenerateMatchingTupleHelper;[t, input, invert]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
                <ExceptionType>ExecException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>GenerateMatchingTupleHelper</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>op</ParamName>
                    <ParamType>OrExpression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>invert</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Operator [input=op.getLhs()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;GenerateMatchingTupleHelper;[t, input, invert]</InnerMethodInvoke>
                <InnerMethodInvoke>null;GenerateMatchingTupleHelper;[t, input, invert]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
                <ExceptionType>ExecException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>GenerateMatchingTupleHelper</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>op</ParamName>
                    <ParamType>NotExpression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>invert</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LogicalExpression [input=op.getExpression()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;GenerateMatchingTupleHelper;[t, input, !invert]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
                <ExceptionType>ExecException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>GenerateMatchingTupleHelper</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>op</ParamName>
                    <ParamType>IsNullExpression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>invert</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>byte [type=op.getExpression().getType()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
                <ExceptionType>ExecException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>GetUnequalValue</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>v</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>byte [type=DataType.findType(v)]</InnerVar>
                <InnerVar>Object [zero=generateData(type,"0")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>GetSmallerValue</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>v</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>byte [type=DataType.findType(v)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>GetLargerValue</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>v</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>byte [type=DataType.findType(v)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateData</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>byte</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>data</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>