<Class>
    <Id>1092</Id>
    <Package>org.apache.pig.scripting.jruby</Package>
    <ClassName>RubySchema</ClassName>
    <SuperClass>RubyObject</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>RubySchema  /** 
 * This class encapsulated a native Schema object, and provides a more convenient interface for manipulating Schemas. It hides the Schema/FieldSchema distinction from the user, and tries to present a cleaner, more Ruby-esque API to the user. For general information on JRuby's API definition annotations, see  {@link RubyDataBag}.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>serialVersionUID</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>bmtPattern</FieldName>
            <FieldType>Pattern</FieldType>
        </Field>
        <Field>
            <FieldName>internalSchema</FieldName>
            <FieldType>Schema</FieldType>
        </Field>
        <Field>
            <FieldName>ALLOCATOR</FieldName>
            <FieldType>ObjectAllocator</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>allocate</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>IRubyObject</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>runtime</ParamName>
                    <ParamType>Ruby</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>klass</ParamName>
                    <ParamType>RubyClass</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>define</MethodName>
            <MethodComment>/** 
 * This method registers the class with the given runtime.
 * @param runtime an instance of the Ruby runtime
 * @return        a RubyClass object with metadata about the registered class
 */
</MethodComment>
            <ReturnType>RubyClass</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>runtime</ParamName>
                    <ParamType>Ruby</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>RubyClass [result=runtime.defineClass("Schema",runtime.getObject(),ALLOCATOR)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>result;includeModule;[runtime.getEnumerable()]</InnerMethodInvoke>
                <InnerMethodInvoke>result;defineAnnotatedMethods;[RubySchema.class]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isKindOf</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>obj</ParamName>
                    <ParamType>IRubyObject</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>RubyModule</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>RubySchema</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ruby</ParamName>
                    <ParamType>Ruby</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rc</ParamName>
                    <ParamType>RubyClass</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>RubySchema</MethodName>
            <MethodComment>/** 
 * This constructor sets the encapsulated Schema to be equal to the given Schema. If copy is true, it is set equal to a copy. If it is false, it is set directly equal.
 * @param ruby an instance of the ruby runtime
 * @param rc   an instance of the class object with meatadata
 * @param s    a Schema to encapsulate
 * @param copy a boolean value. If true, s will be copied and the copywill be encapsulated. If false, it will be encapsulated directly.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ruby</ParamName>
                    <ParamType>Ruby</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rc</ParamName>
                    <ParamType>RubyClass</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>Schema</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>copy</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>RubySchema</MethodName>
            <MethodComment>/** 
 * This constructor sets the encapsulated Schema to be equal to the given Schema.
 * @param ruby an instance of the ruby runtime
 * @param rc   an instance of the class object with meatadata
 * @param s    a Schema to encapsulate
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ruby</ParamName>
                    <ParamType>Ruby</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rc</ParamName>
                    <ParamType>RubyClass</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>Schema</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>RubySchema</MethodName>
            <MethodComment>/** 
 * This constructor is provided for convenience and sets the internal Schema equal to the result of a call to {@link Utils#getSchemaFromString}.
 * @param ruby an instance of the ruby runtime
 * @param rc   an instance of the class object with meatadata
 * @param s    a String which will be passed to{@link Utils#getSchemaFromString}
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ruby</ParamName>
                    <ParamType>Ruby</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rc</ParamName>
                    <ParamType>RubyClass</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initialize</MethodName>
            <MethodComment>/** 
 * The ruby initializer accepts any number of arguments. With no arguments, it will return an empty Schema object. It can accept any number of arguments. To understand the valid arguments, see the documentation for  {@link #rubyArgToSchema}.
 * @param args a varargs which can take any number of valid arguments to{@link #rubyArgToSchema}
 * @return     the initialized RubySchema
 */
</MethodComment>
            <ReturnType>RubySchema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>IRubyObject[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>RubySchema;fixSchemaNames;[internalSchema]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nullBytearray</MethodName>
            <MethodComment>/** 
 * This is a static helper method to create a null aliased bytearray Schema. This is useful in cases where you do not want the output to have an explicit name, which  {@link Utils#getSchemaFromString} will assign.
 * @param context the context the method is being executed in
 * @param self    an instance of the RubyClass with metadata onthe Ruby class object this method is being statically invoked against
 * @return        a null-aliased bytearray schema
 */
</MethodComment>
            <ReturnType>RubySchema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>ThreadContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>IRubyObject</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nullBoolean</MethodName>
            <MethodComment>/** 
 * This is a static helper method to create a null aliased Boolean Schema. This is useful in cases where you do not want the output to have an explicit name, which  {@link Utils#getSchemaFromString} will assign.
 * @param context the context the method is being executed in
 * @param self    an instance of the RubyClass with metadata onthe Ruby class object this method is being statically invoked against
 * @return        a null-aliased bytearray schema
 */
</MethodComment>
            <ReturnType>RubySchema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>ThreadContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>IRubyObject</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nullChararray</MethodName>
            <MethodComment>/** 
 * This is a static helper method to create a null aliased chararray Schema. This is useful in cases where you do not want the output to have an explicit name, which  {@link Utils#getSchemaFromString} will assign.
 * @param context the context the method is being executed in
 * @param self    an instance of the RubyClass with metadata onthe Ruby class object this method is being statically invoked against
 * @return        a null-aliased bytearray schema
 */
</MethodComment>
            <ReturnType>RubySchema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>ThreadContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>IRubyObject</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nullLong</MethodName>
            <MethodComment>/** 
 * This is a static helper method to create a null aliased long Schema. This is useful in cases where you do not want the output to have an explicit name, which  {@link Utils#getSchemaFromString} will assign.
 * @param context the context the method is being executed in
 * @param self    an instance of the RubyClass with metadata onthe Ruby class object this method is being statically invoked against
 * @return        a null-aliased bytearray schema
 */
</MethodComment>
            <ReturnType>RubySchema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>ThreadContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>IRubyObject</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nullInt</MethodName>
            <MethodComment>/** 
 * This is a static helper method to create a null aliased int Schema. This is useful in cases where you do not want the output to have an explicit name, which  {@link Utils#getSchemaFromString} will assign.
 * @param context the context the method is being executed in
 * @param self    an instance of the RubyClass with metadata onthe Ruby class object this method is being statically invoked against
 * @return        a null-aliased bytearray schema
 */
</MethodComment>
            <ReturnType>RubySchema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>ThreadContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>IRubyObject</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nullDouble</MethodName>
            <MethodComment>/** 
 * This is a static helper method to create a null aliased double Schema. This is useful in cases where you do not want the output to have an explicit name, which  {@link Utils#getSchemaFromString} will assign.
 * @param context the context the method is being executed in
 * @param self    an instance of the RubyClass with metadata onthe Ruby class object this method is being statically invoked against
 * @return        a null-aliased bytearray schema
 */
</MethodComment>
            <ReturnType>RubySchema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>ThreadContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>IRubyObject</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nullFloate</MethodName>
            <MethodComment>/** 
 * This is a static helper method to create a null aliased float Schema. This is useful in cases where you do not want the output to have an explicit name, which  {@link Utils#getSchemaFromString} will assign.
 * @param context the context the method is being executed in
 * @param self    an instance of the RubyClass with metadata onthe Ruby class object this method is being statically invoked against
 * @return        a null-aliased bytearray schema
 */
</MethodComment>
            <ReturnType>RubySchema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>ThreadContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>IRubyObject</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nullDateTime</MethodName>
            <MethodComment>/** 
 * This is a static helper method to create a null aliased datetime Schema. This is useful in cases where you do not want the output to have an explicit name, which  {@link Utils#getSchemaFromString} will assign.
 * @param context the context the method is being executed in
 * @param self    an instance of the RubyClass with metadata onthe Ruby class object this method is being statically invoked against
 * @return        a null-aliased bytearray schema
 */
</MethodComment>
            <ReturnType>RubySchema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>ThreadContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>IRubyObject</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nullTuple</MethodName>
            <MethodComment>/** 
 * This is a static helper method to create a null aliased tuple Schema. This is useful in cases where you do not want the output to have an explicit name, which  {@link Utils#getSchemaFromString} will assign.
 * @param context the context the method is being executed in
 * @param self    an instance of the RubyClass with metadata onthe Ruby class object this method is being statically invoked against
 * @return        a null-aliased bytearray schema
 */
</MethodComment>
            <ReturnType>RubySchema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>ThreadContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>IRubyObject</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nullBag</MethodName>
            <MethodComment>/** 
 * This is a static helper method to create a null aliased bag Schema. This is useful in cases where you do not want the output to have an explicit name, which  {@link Utils#getSchemaFromString} will assign.
 * @param context the context the method is being executed in
 * @param self    an instance of the RubyClass with metadata onthe Ruby class object this method is being statically invoked against
 * @return        a null-aliased bytearray schema
 */
</MethodComment>
            <ReturnType>RubySchema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>ThreadContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>IRubyObject</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nullMap</MethodName>
            <MethodComment>/** 
 * This is a static helper method to create a null aliased map Schema. This is useful in cases where you do not want the output to have an explicit name, which  {@link Utils#getSchemaFromString} will assign.
 * @param context the context the method is being executed in
 * @param self    an instance of the RubyClass with metadata onthe Ruby class object this method is being statically invoked against
 * @return        a null-aliased bytearray schema
 */
</MethodComment>
            <ReturnType>RubySchema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>ThreadContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>IRubyObject</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeNullAliasRubySchema</MethodName>
            <MethodComment>/** 
 * This is a helper method to generate a RubySchema of the given type without an alias.
 * @param context the context the method is being executed in
 * @param type    the DataType.PIGTYPE value to make the Schema from
 * @return        a RubySchema object encapsulated a Schema of the specified type
 */
</MethodComment>
            <ReturnType>RubySchema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>ThreadContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>byte</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Ruby [runtime=context.getRuntime()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rubyArgToSchema</MethodName>
            <MethodComment>/** 
 * This is a helper function which converts objects into Schema objects. The valid options are as follows: &lt;p&gt; A RubyString, which will have  {@link Utils#getSchemaFromString} called on it, andit will be added. &lt;p&gt; A RubySchema, which will be added directly. IMPORTANT NOTE: since this API abstracts away from the distinction between Schema/FieldSchema, its important to understand how a Schema is added to another. In this case, the FieldSchema is pulled directly out of the given Schema. Thus, where in Pig a Schema.FieldSchema might be passed around, internally to this class, generally a Schema will be passed around encapsulating it. &lt;p&gt; A list will create the Schema for a Tuple whose elements will be the elements of the list. Each element will be subjected to the same rules applied here. &lt;p&gt; A hash in the form of:&lt;br&gt; &lt;code&gt;{"name:tuple"=&gt;["x:int","y:int,z:int"], "name2:bag"=&gt;["a:chararray"]}&lt;/code&gt;&lt;br&gt; The keys must be a tuple, bag, or map, and the value must be an array.
 * @param arg an object (generally an IRubyObject or String) to convert. See above forthe rules on valid arguments
 * @return    the Schema constructed for the given argument
 */
</MethodComment>
            <ReturnType>Schema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>arg</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>tuple</MethodName>
            <MethodComment>/** 
 * This is a ruby method which takes a name and an array of arguments and constructs a Tuple schema from them.
 * @param context the context the method is being executed in
 * @param self    the RubyClass for the Class object this was invoked on
 * @param arg1    the name for the RubySchema
 * @param arg2    a list of arguments to instantiate the new RubySchema
 * @return        the new Tuple RubySchema
 */
</MethodComment>
            <ReturnType>RubySchema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>ThreadContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>IRubyObject</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>arg1</ParamName>
                    <ParamType>IRubyObject</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>arg2</ParamName>
                    <ParamType>IRubyObject</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>RubySchema [rs=tuple(context,self,arg2)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rs;setNameIf;[arg1]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>tuple</MethodName>
            <MethodComment>/** 
 * This is a ruby method which takes an array of arguments and constructs a Tuple schema from them. The name will be set automatically.
 * @param context the context the method is being executed in
 * @param self    the RubyClass for the Class object this was invoked on
 * @param arg     a list of arguments to instantiate the new RubySchema
 * @return        the new RubySchema
 */
</MethodComment>
            <ReturnType>RubySchema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>ThreadContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>IRubyObject</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>arg</ParamName>
                    <ParamType>IRubyObject</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>map</MethodName>
            <MethodComment>/** 
 * This is a ruby method which takes a name and an array of arguments and constructs a Map schema from them.
 * @param context the context the method is being executed in
 * @param self    the RubyClass for the Class object this was invoked on
 * @param arg1    the name for the RubySchema
 * @param arg2    a list of arguments to instantiate the new RubySchema
 * @return        the new RubySchema
 */
</MethodComment>
            <ReturnType>RubySchema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>ThreadContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>IRubyObject</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>arg1</ParamName>
                    <ParamType>IRubyObject</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>arg2</ParamName>
                    <ParamType>IRubyObject</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>RubySchema [rs=map(context,self,arg2)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rs;setNameIf;[arg1]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>map</MethodName>
            <MethodComment>/** 
 * This is a ruby method which takes an array of arguments and constructs a Map schema from them. The name will be set automatically.
 * @param context the context the method is being executed in
 * @param self    the RubyClass for the Class object this was invoked on
 * @param arg     a list of arguments to instantiate the new RubySchema
 * @return        the new RubySchema
 */
</MethodComment>
            <ReturnType>RubySchema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>ThreadContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>IRubyObject</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>arg</ParamName>
                    <ParamType>IRubyObject</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Schema [s=tuple(context,self,arg).getInternalSchema()]</InnerVar>
                <InnerVar>Ruby [runtime=context.getRuntime()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>bag</MethodName>
            <MethodComment>/** 
 * This is a ruby method which takes a name and an array of arguments and constructs a Bag schema from them.
 * @param context the context the method is being executed in
 * @param self    the RubyClass for the Class object this was invoked on
 * @param arg1    the name for the RubySchema
 * @param arg2    a list of arguments to instantiate the new RubySchema
 * @return        the new RubySchema
 */
</MethodComment>
            <ReturnType>RubySchema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>ThreadContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>IRubyObject</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>arg1</ParamName>
                    <ParamType>IRubyObject</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>arg2</ParamName>
                    <ParamType>IRubyObject</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>RubySchema [rs=bag(context,self,arg2)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rs;setNameIf;[arg1]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>bag</MethodName>
            <MethodComment>/** 
 * This is a ruby method which takes an array of arguments and constructs a Bag schema from them. The name will be set automatically.
 * @param context the context the method is being executed in
 * @param self    the RubyClass for the Class object this was invoked on
 * @param arg     a list of arguments to instantiate the new RubySchema
 * @return        the new RubySchema
 */
</MethodComment>
            <ReturnType>RubySchema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>ThreadContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>IRubyObject</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>arg</ParamName>
                    <ParamType>IRubyObject</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Schema [s=tuple(context,self,arg).getInternalSchema()]</InnerVar>
                <InnerVar>Ruby [runtime=context.getRuntime()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fixSchemaNames</MethodName>
            <MethodComment>/** 
 * This method will fix any name conflicts in a schema. It's important to note that this will change the Schema object itself. It will deal with any collisions in things named tuple_#, bag_#, map_#, or val_#, as these are generally names generated by Util.getSchemaFromString. In the case of another name conflict, it will not be changed, as that name conflict was created by the user.
 * @param s a Schema object to fix in place
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>Schema</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Pattern [p=Pattern.compile("(bag_|tuple_|map_|val_)(\\d+)",Pattern.CASE_INSENSITIVE)]</InnerVar>
                <InnerVar>Set&lt;String&gt; [names=new HashSet&lt;String&gt;(s.size(),1.0f)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setNameIf</MethodName>
            <MethodComment>/** 
 * This is just a convenience method which sets the name of the internalSchema to the argument that was given.
 * @param arg a RubyString to set the name of the encapsulated Schema object
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>arg</ParamName>
                    <ParamType>IRubyObject</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setName</MethodName>
            <MethodComment>/** 
 * This method sets the name of a RubySchema to the name given. It's important to note that if the RubySchema represents anything other than a tuple, databag, or map then an error will be thrown.
 * @param name a String to set the name of the encapsulated Schema object
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Schema.FieldSchema [fs]</InnerVar>
                <InnerVar>byte [type=fs.type]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment>/** 
 * The toString method just leverages Schema's printing.
 * @param context the context the method is being executed in
 * @return        a String representation of the encapsulated Schema object
 */
</MethodComment>
            <ReturnType>RubyString</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>ThreadContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>get</MethodName>
            <MethodComment>/** 
 * This is the ruby method which allows people to access elements of the RubySchema object. It can be given either a single numeric index, or a Range object to specify a range of indices. It's important to note that the Schema object returned from this references the Schema stored internally, so if the user wants to make changes without affecting this object, it must be cloned.
 * @param context the context the method is being executed in
 * @param arg     a Fixnum index, Range object to specify a range of values to return, ora String to look up by alias name
 * @return        the RubySchema object encapsulated the found Schema
 */
</MethodComment>
            <ReturnType>RubySchema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>ThreadContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>arg</ParamName>
                    <ParamType>IRubyObject</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Ruby [runtime=context.getRuntime()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>get</MethodName>
            <MethodComment>/** 
 * This is a version of [] which allows the range to be specified as such: [1,2].
 * @param context the context the method is being executed in
 * @param arg1    a Fixnum start index
 * @param arg2    a Fixnum end index
 * @return        the RubySchema object encapsulated the found Schema
 */
</MethodComment>
            <ReturnType>RubySchema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>ThreadContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>arg1</ParamName>
                    <ParamType>IRubyObject</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>arg2</ParamName>
                    <ParamType>IRubyObject</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>set</MethodName>
            <MethodComment>/** 
 * This allows the users to set an index or a range of values to a specified RubySchema. The first argument must be a Fixnum or Range, and the second argument may optionally be a Fixnum. The given index (or range of indices) will be replaced by a RubySchema instantiated based on the remaining arguments.
 * @param context the contextthe method is being executed in
 * @param args    a varargs which has to be at least length two.
 * @return        the RubySchema that was added
 */
</MethodComment>
            <ReturnType>RubySchema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>ThreadContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>IRubyObject[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>IRubyObject [arg1=args[0]]</InnerVar>
                <InnerVar>IRubyObject [arg2=args[1]]</InnerVar>
                <InnerVar>IRubyObject[] [arg3=Arrays.copyOfRange(args,1,args.length)]</InnerVar>
                <InnerVar>Schema [s=internalSchema]</InnerVar>
                <InnerVar>Ruby [runtime=context.getRuntime()]</InnerVar>
                <InnerVar>List&lt;Schema.FieldSchema&gt; [lfs=s.getFields()]</InnerVar>
                <InnerVar>int [min, max]</InnerVar>
                <InnerVar>RubySchema [rs=new RubySchema(runtime,runtime.getClass("Schema")).initialize(arg3)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>RubySchema;fixSchemaNames;[internalSchema]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>add</MethodName>
            <MethodComment>/** 
 * This method provides addition semantics, without modifying the original Schema. This method can be given any number of arguments, much as with the constructor.
 * @param context the context the method is being executed in
 * @param args    a varargs which can be any valid set of arguments thatcan initialize a RubySchema
 * @return        the Rresult of the addition
 */
</MethodComment>
            <ReturnType>RubySchema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>ThreadContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>IRubyObject[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>RubySchema [rsClone=clone(context)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rsClone;addInPlace;[context, args]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addInPlace</MethodName>
            <MethodComment>/** 
 * This method provides addition semantics, modifying the original Schema in place. This method can be given any number of arguments, much as with the constructor.
 * @param context the context the method is being executed in
 * @param args    a varargs which can be any valid set of arguments thatcan initialize a RubySchema
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>ThreadContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>IRubyObject[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Ruby [runtime=context.getRuntime()]</InnerVar>
                <InnerVar>List&lt;Schema.FieldSchema&gt; [lfs=internalSchema.getFields()]</InnerVar>
                <InnerVar>RubySchema [rs=new RubySchema(runtime,runtime.getClass("Schema")).initialize(args)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>RubySchema;fixSchemaNames;[internalSchema]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clone</MethodName>
            <MethodComment>/** 
 * @param context the context the method is being executed in
 * @return        a RubySchema copy of the Schema
 */
</MethodComment>
            <ReturnType>RubySchema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>ThreadContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Ruby [runtime=context.getRuntime()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>find</MethodName>
            <MethodComment>/** 
 * Given a field name this string will search the RubySchema for a FieldSchema with that name and return it encapsulated in a Schema.
 * @param context the context the method is being executed in
 * @param arg     a RubyString serving as an alias to lookfor in the Schema
 * @return        the found RubySchema
 */
</MethodComment>
            <ReturnType>RubySchema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>ThreadContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>arg</ParamName>
                    <ParamType>IRubyObject</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>find</MethodName>
            <MethodComment>/** 
 * This is a helper method which recursively searches for an alias in the Schema encapsulated by RubySchema. This is necessary because findFieldSchema uses canonicalName, not name.
 * @param s     the Schema to search through
 * @param alias
 * @return      the found RubySchema
 */
</MethodComment>
            <ReturnType>Schema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>Schema</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>alias</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>index</MethodName>
            <MethodComment>/** 
 * Given a field name, this will return the index of it in the schema.
 * @param context the context the method is being executed in
 * @param arg     a field name to look for
 * @return        the index for that field name
 */
</MethodComment>
            <ReturnType>RubyFixnum</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>ThreadContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>arg</ParamName>
                    <ParamType>IRubyObject</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>size</MethodName>
            <MethodComment>/** 
 * @param context the context the method is being executed in
 * @return        the size of the encapsulated Schema
 */
</MethodComment>
            <ReturnType>RubyFixnum</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>ThreadContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getInternalSchema</MethodName>
            <MethodComment>/** 
 * This is a helper method to pull out the native Java type from the ruby object.
 * @return the encapsulated Schema
 */
</MethodComment>
            <ReturnType>Schema</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>get</MethodName>
            <MethodComment>/** 
 * This method allows access into the Schema nested in the encapsulated Schema. For example, if the encapsulated Schema is a bag Schema, this allows the user to access the schema of the interior Tuple.
 * @param context the context the method is being executed in
 * @return        a RubySchema encapsulating the nested Schema
 */
</MethodComment>
            <ReturnType>RubySchema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>ThreadContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Ruby [runtime=context.getRuntime()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getName</MethodName>
            <MethodComment>/** 
 * This method allows the user to see the name of the alias of the FieldSchema of the encapsulated Schema. This method only works if the Schema has one FieldSchema.
 * @param context the context the method is being executed in
 * @return        the name of the Schema
 */
</MethodComment>
            <ReturnType>RubyString</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>ThreadContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setName</MethodName>
            <MethodComment>/** 
 * This method allows the user to set the name of the alias of the FieldSchema of the encapsulated Schema. This method only works if the Schema has one FieldSchema.
 * @param arg a RubyString to set the name to
 * @return    the new name
 */
</MethodComment>
            <ReturnType>RubyString</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>arg</ParamName>
                    <ParamType>IRubyObject</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>