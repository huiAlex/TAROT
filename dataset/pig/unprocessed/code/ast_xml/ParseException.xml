<Class>
    <Id>636</Id>
    <Package>org.apache.pig.tools.parameters</Package>
    <ClassName>ParseException</ClassName>
    <SuperClass>Exception</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ParseException  /** 
 * This exception is thrown when parse errors are encountered. You can explicitly create objects of this exception type by calling the method generateParseException in the generated parser. You can modify this class to customize your error reporting mechanisms so long as you retain the public fields.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>serialVersionUID</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>currentToken</FieldName>
            <FieldType>Token</FieldType>
        </Field>
        <Field>
            <FieldName>expectedTokenSequences</FieldName>
            <FieldType>int[][]</FieldType>
        </Field>
        <Field>
            <FieldName>tokenImage</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>eol</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ParseException</MethodName>
            <MethodComment>/** 
 * This constructor is used by the method "generateParseException" in the generated parser.  Calling this constructor generates a new object of this type with the fields "currentToken", "expectedTokenSequences", and "tokenImage" set.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>currentTokenVal</ParamName>
                    <ParamType>Token</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>expectedTokenSequencesVal</ParamName>
                    <ParamType>int[][]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tokenImageVal</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ParseException</MethodName>
            <MethodComment>/** 
 * The following constructors are for use by you for whatever purpose you can think of.  Constructing the exception in this manner makes the exception behave in the normal way - i.e., as documented in the class "Throwable".  The fields "errorToken", "expectedTokenSequences", and "tokenImage" do not contain relevant information.  The JavaCC generated code does not use these constructors.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ParseException</MethodName>
            <MethodComment>/** 
 * Constructor with message. 
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>message</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initialise</MethodName>
            <MethodComment>/** 
 * It uses "currentToken" and "expectedTokenSequences" to generate a parse error message and returns it.  If this object has been created due to a parse error, and you do not catch it (it gets thrown from the parser) the correct error message gets displayed.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>currentToken</ParamName>
                    <ParamType>Token</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>expectedTokenSequences</ParamName>
                    <ParamType>int[][]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tokenImage</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [eol=System.getProperty("line.separator","\n")]</InnerVar>
                <InnerVar>StringBuffer [expected=new StringBuffer()]</InnerVar>
                <InnerVar>int [maxSize=0]</InnerVar>
                <InnerVar>String [retval="Encountered \""]</InnerVar>
                <InnerVar>Token [tok=currentToken.next]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>add_escapes</MethodName>
            <MethodComment>/** 
 * Used to convert raw characters to their escaped version when these raw version cannot be used as part of an ASCII string literal.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>str</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuffer [retval=new StringBuffer()]</InnerVar>
                <InnerVar>char [ch]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>