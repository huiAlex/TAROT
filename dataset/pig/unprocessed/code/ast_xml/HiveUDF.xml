<Class>
    <Id>460</Id>
    <Package>org.apache.pig.builtin</Package>
    <ClassName>HiveUDF</ClassName>
    <SuperClass>HiveUDFBase</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>HiveUDF  /** 
 * Use Hive UDF or GenericUDF. Example: define sin HiveUDF('sin'); A = load 'mydata' as (num:double); B = foreach A generate sin(num); HiveUDF takes an optional second parameter if the Hive UDF require constant parameters define in_file HiveUDF('in_file', '(null, "names.txt")');
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>inited</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>evalUDF</FieldName>
            <FieldType>GenericUDF</FieldType>
        </Field>
        <Field>
            <FieldName>inputObjectInspector</FieldName>
            <FieldType>StructObjectInspector</FieldType>
        </Field>
        <Field>
            <FieldName>outputObjectInspector</FieldName>
            <FieldType>ObjectInspector</FieldType>
        </Field>
        <Field>
            <FieldName>schemaInfo</FieldName>
            <FieldType>SchemaInfo</FieldType>
        </Field>
        <Field>
            <FieldName>constantsInfo</FieldName>
            <FieldType>ConstantObjectInspectInfo</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>init</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>inputSchema</ParamName>
                    <ParamType>Schema</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>evalUDF</ParamName>
                    <ParamType>GenericUDF</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>constantsInfo</ParamName>
                    <ParamType>ConstantObjectInspectInfo</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ResourceSchema [rs=new ResourceSchema(inputSchema)]</InnerVar>
                <InnerVar>ResourceFieldSchema [wrappedTupleFieldSchema=new ResourceFieldSchema()]</InnerVar>
                <InnerVar>TypeInfo [ti=HiveUtils.getTypeInfo(wrappedTupleFieldSchema)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>wrappedTupleFieldSchema;setType;[DataType.TUPLE]</InnerMethodInvoke>
                <InnerMethodInvoke>wrappedTupleFieldSchema;setSchema;[rs]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>HiveUDF</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>funcName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Class [hiveUDFClass=resolveFunc(funcName)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>InstantiationException</ExceptionType>
                <ExceptionType>IllegalAccessException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>HiveUDF</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>funcName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>params</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>InstantiationException</ExceptionType>
                <ExceptionType>IllegalAccessException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>exec</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List [inputs=schemaInfo.inputObjectInspector.getStructFieldsDataAsList(input)]</InnerVar>
                <InnerVar>DeferredObject[] [arguments=new DeferredObject[inputs.size()]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getShipFiles</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>List&lt;String&gt; [files=super.getShipFiles()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>outputSchema</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Schema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>Schema</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>finish</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>