<Class>
    <Id>1177</Id>
    <Package>org.apache.pig.test.pigmix.datagen</Package>
    <ClassName>DataGenerator</ClassName>
    <SuperClass>Configured</SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Tool</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>DataGenerator  /** 
 * A tool to generate data for performance testing.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>colSpecs</FieldName>
            <FieldType>ColSpec[]</FieldType>
        </Field>
        <Field>
            <FieldName>seed</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>numRows</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>numMappers</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>outputFile</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>inFile</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>separator</FieldName>
            <FieldType>char</FieldType>
        </Field>
        <Field>
            <FieldName>rand</FieldName>
            <FieldType>Random</FieldType>
        </Field>
        <Field>
            <FieldName>mapkey</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>arg</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>datatype</FieldName>
            <FieldType>Datatype</FieldType>
        </Field>
        <Field>
            <FieldName>distype</FieldName>
            <FieldType>DistributionType</FieldType>
        </Field>
        <Field>
            <FieldName>avgsz</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>card</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>gen</FieldName>
            <FieldType>RandomGenerator</FieldType>
        </Field>
        <Field>
            <FieldName>pctNull</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>contained</FieldName>
            <FieldType>ColSpec</FieldType>
        </Field>
        <Field>
            <FieldName>mapfile</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>map</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>map</FieldName>
            <FieldType>Integer</FieldType>
        </Field>
        <Field>
            <FieldName>avgsz</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>hasMapFile</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>card</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>z</FieldName>
            <FieldType>Zipf</FieldType>
        </Field>
        <Field>
            <FieldName>r</FieldName>
            <FieldType>Random</FieldType>
        </Field>
        <Field>
            <FieldName>fs</FieldName>
            <FieldType>FileSystem</FieldType>
        </Field>
        <Field>
            <FieldName>tmpHome</FieldName>
            <FieldType>Path</FieldType>
        </Field>
        <Field>
            <FieldName>jobConf</FieldName>
            <FieldType>JobConf</FieldType>
        </Field>
        <Field>
            <FieldName>dg</FieldName>
            <FieldType>DataGenerator</FieldType>
        </Field>
        <Field>
            <FieldName>hasInput</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>main</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DataGenerator [dg=new DataGenerator()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>dg;go;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>DataGenerator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>seed</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>System.out;println;["Using seed " + seed]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>DataGenerator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>DataGenerator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CmdLineParser [opts=new CmdLineParser(args)]</InnerVar>
                <InnerVar>char [opt]</InnerVar>
                <InnerVar>String [remainders[]=opts.getRemainingArgs()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>opts;registerOpt;['e', "seed", CmdLineParser.ValueExpected.REQUIRED]</InnerMethodInvoke>
                <InnerMethodInvoke>opts;registerOpt;['f', "file", CmdLineParser.ValueExpected.REQUIRED]</InnerMethodInvoke>
                <InnerMethodInvoke>opts;registerOpt;['r', "rows", CmdLineParser.ValueExpected.REQUIRED]</InnerMethodInvoke>
                <InnerMethodInvoke>opts;registerOpt;['s', "separator", CmdLineParser.ValueExpected.REQUIRED]</InnerMethodInvoke>
                <InnerMethodInvoke>opts;registerOpt;['i', "input", CmdLineParser.ValueExpected.REQUIRED]</InnerMethodInvoke>
                <InnerMethodInvoke>opts;registerOpt;['m', "mappers", CmdLineParser.ValueExpected.OPTIONAL]</InnerMethodInvoke>
                <InnerMethodInvoke>System.err;println;["Using seed " + seed]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>go</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>long [t1=System.currentTimeMillis()]</InnerVar>
                <InnerVar>long [t2=System.currentTimeMillis()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>System.out;println;["Job is successful! It took " + (t2 - t1) / 1000 + " seconds."]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>goLocal</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>PrintWriter [out=null]</InnerVar>
                <InnerVar>BufferedReader [in=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>out;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeLine</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>PrintWriter</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeCol</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>colspec</ParamName>
                    <ParamType>ColSpec</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>PrintWriter</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>usage</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>System.err;println;["Usage: datagen -rows numrows [options] colspec ..."]</InnerMethodInvoke>
                <InnerMethodInvoke>System.err;println;["\tOptions:"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.err;println;["\t-e -seed seed value for random numbers"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.err;println;["\t-f -file output file, default is stdout"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.err;println;["\t-i -input input file, lines will be read from"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.err;println;["\t\tthe file and additional columns appended."]</InnerMethodInvoke>
                <InnerMethodInvoke>System.err;println;["\t\tMutually exclusive with -r."]</InnerMethodInvoke>
                <InnerMethodInvoke>System.err;println;["\t-r -rows number of rows to output"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.err;println;["\t-s -separator character, default is ^A"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.err;println;["\t-m -number of mappers to run concurrently to generate data. " + "If not specified, DataGenerator runs locally. This option can NOT be used with -e."]</InnerMethodInvoke>
                <InnerMethodInvoke>System.err;println;[]</InnerMethodInvoke>
                <InnerMethodInvoke>System.err;print;["\tcolspec: columntype:average_size:cardinality:"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.err;println;["distribution_type:percent_null"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.err;println;["\tcolumntype:"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.err;println;["\t\ti = int"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.err;println;["\t\tl = long"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.err;println;["\t\tf = float"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.err;println;["\t\td = double"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.err;println;["\t\ts = string"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.err;println;["\t\tm = map"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.err;println;["\t\tbx = bag of x, where x is a columntype"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.err;println;["\tdistribution_type:"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.err;println;["\t\tu = uniform"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.err;println;["\t\tz = zipf"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ColSpec</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>arg</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String[] [parts=arg.split(":")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nextInt</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nextLong</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nextDouble</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>double</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nextFloat</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>float</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nextString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nextInt</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>map</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nextLong</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>map</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nextFloat</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>float</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>map</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nextDouble</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>double</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>map</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nextString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>map</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>randomString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [var=(int)((double)avgsz * 0.3)]</InnerVar>
                <InnerVar>StringBuffer [sb=new StringBuffer(avgsz + var)]</InnerVar>
                <InnerVar>int [len=rand.nextInt(2 * var) + avgsz - var]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>randomFloat</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>float</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>randomDouble</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>double</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>UniformRandomGenerator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>a</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nextInt</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>map</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nextLong</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>map</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nextFloat</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>float</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>map</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [seed=rand.nextInt(card)]</InnerVar>
                <InnerVar>Float [f=(Float)map.get(seed)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nextDouble</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>double</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>map</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [seed=rand.nextInt(card)]</InnerVar>
                <InnerVar>Double [d=(Double)map.get(seed)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nextString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>map</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [seed=rand.nextInt(card)]</InnerVar>
                <InnerVar>String [s=(String)map.get(seed)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ZipfRandomGenerator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>a</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>next</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>double</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nextInt</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>map</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nextLong</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>map</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nextFloat</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>float</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>map</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [seed=(int)next()]</InnerVar>
                <InnerVar>Float [d=(Float)map.get(seed)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nextDouble</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>double</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>map</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [seed=(int)next()]</InnerVar>
                <InnerVar>Double [d=(Double)map.get(seed)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nextString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>map</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [seed=(int)next()]</InnerVar>
                <InnerVar>String [s=(String)map.get(seed)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>HadoopRunner</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>goHadoop</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Configuration [conf=getConf()]</InnerVar>
                <InnerVar>JobConf [job=new JobConf(conf)]</InnerVar>
                <InnerVar>String [config=genMapFiles().toUri().getRawPath()]</InnerVar>
                <InnerVar>RunningJob [j=JobClient.runJob(job)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>job;set;["fieldconfig", config]</InnerMethodInvoke>
                <InnerMethodInvoke>job;set;["separator", String.valueOf((int)separator)]</InnerMethodInvoke>
                <InnerMethodInvoke>job;setJobName;["data-gen"]</InnerMethodInvoke>
                <InnerMethodInvoke>job;setNumMapTasks;[numMappers]</InnerMethodInvoke>
                <InnerMethodInvoke>job;setNumReduceTasks;[0]</InnerMethodInvoke>
                <InnerMethodInvoke>job;setMapperClass;[DataGenMapper.class]</InnerMethodInvoke>
                <InnerMethodInvoke>job;setJarByClass;[DataGenMapper.class]</InnerMethodInvoke>
                <InnerMethodInvoke>FileOutputFormat;setOutputPath;[job, new Path(outputFile)]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["Submit hadoop job..."]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>genInputFiles</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Path</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>long [avgRows=numRows / numMappers]</InnerVar>
                <InnerVar>Path [input=createTempDir(tmpHome)]</InnerVar>
                <InnerVar>long [rowsLeft=numRows]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>System.out;println;["Generating input files into " + input.toString()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>genMapFiles</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Path</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Object[] [tmp=createTempFile(tmpHome,false)]</InnerVar>
                <InnerVar>PrintWriter [pw=new PrintWriter((OutputStream)tmp[1])]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>System.out;println;["Generating column config file in " + tmp[0].toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>pw;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>genMapFile</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Path</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>col</ParamName>
                    <ParamType>DataGenerator.ColSpec</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [card=col.card]</InnerVar>
                <InnerVar>Object[] [tmp=createTempFile(tmpHome,false)]</InnerVar>
                <InnerVar>PrintWriter [pw=new PrintWriter((OutputStream)tmp[1])]</InnerVar>
                <InnerVar>HashSet&lt;Object&gt; [hash=new HashSet&lt;Object&gt;(card)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>System.out;println;["Generating mapping file for column " + col.arg + " into "+ tmp[0].toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>pw;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createTempDir</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Path</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parentDir</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Object[] [obj=createTempFile(parentDir,true)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createTempFile</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parentDir</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isDir</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Path [tmp_home=parentDir]</InnerVar>
                <InnerVar>int [id=r.nextInt()]</InnerVar>
                <InnerVar>Path [f=new Path(tmp_home,"tmp" + id)]</InnerVar>
                <InnerVar>Object[] [r=new Object[2]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>configure</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>jobconf</ParamName>
                    <ParamType>JobConf</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [id=Integer.parseInt(jobconf.get(MRConfiguration.TASK_PARTITION))]</InnerVar>
                <InnerVar>long [time=System.currentTimeMillis() - id * 3600 * 24* 1000]</InnerVar>
                <InnerVar>String [config=jobConf.get("fieldconfig")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>map</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>LongWritable</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>Text</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>output</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>reporter</ParamName>
                    <ParamType>Reporter</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [intialsz=dg.colSpecs.length * 50]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>