<Class>
    <Id>597</Id>
    <Package>org.apache.pig.scripting.jruby</Package>
    <ClassName>JrubyEvalFunc</ClassName>
    <SuperClass>EvalFunc</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>JrubyEvalFunc  /** 
 * This class serves at the bridge between Ruby methods that are registered with and extend PigUdf, and their execution in Pig. An instance of the containing class is created, and their method name will be called against that instance. If they have a schema function associated, then when outputSchema is called, that function will be given the input Schema and the output will be given to Pig.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>methodName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>numRequiredArgs</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>numOptionalArgs</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>fileName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>functionName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>isInitialized</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>schemaPiece</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>funcReceiver</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>funcInfoEncapsulator</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>rubyEngine</FieldName>
            <FieldType>ScriptingContainer</FieldType>
        </Field>
        <Field>
            <FieldName>ruby</FieldName>
            <FieldType>Ruby</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>JrubyEvalFunc</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>JrubyEvalFunc</MethodName>
            <MethodComment>/** 
 * The constructor for this class registers the filename of the Ruby script and the name of the method we care about. The difference between function name and method name is that the former is the name that was used to register the function, whereas the method name is the actual method that must be invoked. The two are often the same, but not always. functionName is the key to the list of EvalFuncs that are registered.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>filename</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>functionName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initialize</MethodName>
            <MethodComment>/** 
 * This method initializes the objects necessary to evaluate the Ruby class on the pig side. Using the object that was saved to the functionName key by Ruby, this class gets an instance of the class that will receive method calls, as well as information on the arity.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>exec</MethodName>
            <MethodComment>/** 
 * The exec method passes the tuple argument to the Ruby function, and converts the result back to Pig.
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tuple</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>outputSchema</MethodName>
            <MethodComment>/** 
 * This method uses the schema method of the function encapsulation object to get the Schema information for the Ruby method.
 */
</MethodComment>
            <ReturnType>Schema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>Schema</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>RubySchema [rs=PigJrubyLibrary.pigToRuby(ruby,input)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>