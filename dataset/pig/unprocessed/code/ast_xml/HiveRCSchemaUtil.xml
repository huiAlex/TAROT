<Class>
    <Id>930</Id>
    <Package>org.apache.pig.piggybank.storage.hiverc</Package>
    <ClassName>HiveRCSchemaUtil</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>HiveRCSchemaUtil  /** 
 * Implements helper methods for:&lt;br/&gt; &lt;ul&gt; &lt;li&gt;Parsing the hive table schema string.&lt;/li&gt; &lt;li&gt;Converting from hive to pig types&lt;/li&gt; &lt;li&gt;Converting from pig to hive types&lt;/li&gt; &lt;/ul&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>tupleFactory</FieldName>
            <FieldType>TupleFactory</FieldType>
        </Field>
        <Field>
            <FieldName>ptypes</FieldName>
            <FieldType>Pattern</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>parseSchema</MethodName>
            <MethodComment>/** 
 * General schema parsing method, is used to parse the column names.
 * @param pattern String
 * @param schema String
 * @return List of String
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pattern</ParamName>
                    <ParamType>Pattern</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>schema</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;String&gt; [types=new ArrayList&lt;String&gt;()]</InnerVar>
                <InnerVar>Matcher [m=pattern.matcher(schema)]</InnerVar>
                <InnerVar>String [item=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseSchemaTypes</MethodName>
            <MethodComment>/** 
 * Parses the schema types and returns a List of these.
 * @param schema
 * @return List of String
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>schema</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;String&gt; [types=new ArrayList&lt;String&gt;()]</InnerVar>
                <InnerVar>Matcher [m=ptypes.matcher(schema)]</InnerVar>
                <InnerVar>String [item=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>listToString</MethodName>
            <MethodComment>/** 
 * Trims items in the list.
 * @param list
 * @return String
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>list</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuilder [buff=new StringBuilder()]</InnerVar>
                <InnerVar>int [len=buff.length() - 1]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>buff;delete;[len, len]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>extractDayDate</MethodName>
            <MethodComment>/** 
 * Extract the date from the hive file names e.g /user/hive/warehouse/table/daydate=2009-10-01/upload001/0002.dat&lt;br/&gt; This method will extract the 2009-10-01 from this name.
 * @param fileName
 * @return String
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fileName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [index=fileName.indexOf("daydate=")]</InnerVar>
                <InnerVar>String [dateStr=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compileSet</MethodName>
            <MethodComment>/** 
 * Returns a set of columns, with the column names strimmed
 * @param columnsToRead
 * @return Set
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>columnsToRead</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String[] [columnsArr=columnsToRead.split(",")]</InnerVar>
                <InnerVar>int [len=columnsArr.length]</InnerVar>
                <InnerVar>Set&lt;String&gt; [columnsSet=new TreeSet&lt;String&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findPigDataType</MethodName>
            <MethodComment>/** 
 * Returns the pig DataType for the hive type
 * @param hiveType
 * @return byte from DataType
 */
</MethodComment>
            <ReturnType>byte</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>hiveType</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>extractPigTypeFromHiveType</MethodName>
            <MethodComment>/** 
 * Converts from a hive type to a pig type
 * @param value Object hive type
 * @return Object pig type
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseLazyMapToPigMap</MethodName>
            <MethodComment>/** 
 * Converts the LazyMap to a InternalMap.
 * @param map LazyMap
 * @return InternalMap
 */
</MethodComment>
            <ReturnType>InternalMap</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>map</ParamName>
                    <ParamType>LazyMap</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>InternalMap [pigmap=new InternalMap()]</InnerVar>
                <InnerVar>Map&lt;Object,Object&gt; [javamap=map.getMap()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseLazyArrayToPigArray</MethodName>
            <MethodComment>/** 
 * Converts the LazyArray to a Tuple.&lt;br/&gt;
 * @param arr LazyArray
 * @return Tuple
 */
</MethodComment>
            <ReturnType>Tuple</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>arr</ParamName>
                    <ParamType>LazyArray</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;Object&gt; [list=new ArrayList&lt;Object&gt;()]</InnerVar>
                <InnerVar>List&lt;Object&gt; [hivedataList=arr.getList()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>