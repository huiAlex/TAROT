<Class>
    <Id>329</Id>
    <Package>org.apache.pig.backend.hadoop.executionengine.spark</Package>
    <ClassName>SparkUtil</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getManifest</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTuple2Manifest</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Tuple2&lt;K,V&gt;</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getProduct2Manifest</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Product2&lt;K,V&gt;</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newJobConf</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>JobConf</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pigContext</ParamName>
                    <ParamType>PigContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>physicalPlan</ParamName>
                    <ParamType>PhysicalPlan</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sparkEngineConf</ParamName>
                    <ParamType>SparkEngineConf</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>JobConf [jobConf=new JobConf(ConfigurationUtil.toConfiguration(pigContext.getProperties()))]</InnerVar>
                <InnerVar>Random [rand=new Random()]</InnerVar>
                <InnerVar>LinkedList&lt;POStore&gt; [stores=PlanHelper.getPhysicalOperators(physicalPlan,POStore.class)]</InnerVar>
                <InnerVar>POStore [firstStore=stores.getFirst()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>jobConf;set;["spark.engine.conf", ObjectSerializer.serialize(sparkEngineConf)]</InnerMethodInvoke>
                <InnerMethodInvoke>jobConf;set;["pig.pigContext", ObjectSerializer.serialize(pigContext)]</InnerMethodInvoke>
                <InnerMethodInvoke>jobConf;set;["udf.import.list", ObjectSerializer.serialize(PigContext.getPackageImportList())]</InnerMethodInvoke>
                <InnerMethodInvoke>jobConf;set;[MRConfiguration.JOB_APPLICATION_ATTEMPT_ID, Integer.toString(rand.nextInt())]</InnerMethodInvoke>
                <InnerMethodInvoke>jobConf;set;[PigConstants.LOCAL_CODE_DIR, System.getProperty("java.io.tmpdir")]</InnerMethodInvoke>
                <InnerMethodInvoke>jobConf;set;[MRConfiguration.JOB_ID, UUID.randomUUID().toString()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toScalaSeq</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>list</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>assertPredecessorSize</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>predecessors</ParamName>
                    <ParamType>RDD&lt;Tuple&gt;</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>physicalOperator</ParamName>
                    <ParamType>PhysicalOperator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>size</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>assertPredecessorSizeGreaterThan</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>predecessors</ParamName>
                    <ParamType>RDD&lt;Tuple&gt;</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>physicalOperator</ParamName>
                    <ParamType>PhysicalOperator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>size</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPartitioner</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Partitioner</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>customPartitioner</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parallelism</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createIndexerSparkNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>baseSparkOp</ParamName>
                    <ParamType>SparkOperator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>scope</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nig</ParamName>
                    <ParamType>NodeIdGenerator</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;PhysicalPlan&gt; [eps=new ArrayList&lt;PhysicalPlan&gt;()]</InnerVar>
                <InnerVar>PhysicalPlan [ep=new PhysicalPlan()]</InnerVar>
                <InnerVar>POProject [prj=new POProject(new OperatorKey(scope,nig.getNextNodeId(scope)))]</InnerVar>
                <InnerVar>List&lt;Boolean&gt; [ascCol=new ArrayList&lt;Boolean&gt;()]</InnerVar>
                <InnerVar>int [requestedParallelism=baseSparkOp.requestedParallelism]</InnerVar>
                <InnerVar>POSort [sort=new POSort(new OperatorKey(scope,nig.getNextNodeId(scope)),requestedParallelism,null,eps,ascCol,null)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>prj;setStar;[true]</InnerMethodInvoke>
                <InnerMethodInvoke>prj;setOverloaded;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>prj;setResultType;[DataType.TUPLE]</InnerMethodInvoke>
                <InnerMethodInvoke>ep;add;[prj]</InnerMethodInvoke>
                <InnerMethodInvoke>eps;add;[ep]</InnerMethodInvoke>
                <InnerMethodInvoke>ascCol;add;[true]</InnerMethodInvoke>
                <InnerMethodInvoke>baseSparkOp.physicalPlan;addAsLeaf;[sort]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>PlanException</ExceptionType>
                <ExceptionType>ExecException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>