<Class>
    <Id>618</Id>
    <Package>org.apache.pig</Package>
    <ClassName>PigException</ClassName>
    <SuperClass>IOException</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>PigException  /** 
 * All exceptions in Pig are encapsulated in the &lt;code&gt;PigException&lt;/code&gt; class. Details such as the source of the error, error message, error code, etc. are contained in this class. The default values for the attributes are: errorSource = BUG errorCode = 0 retriable = false detailedMessage = null location = null
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>serialVersionUID</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>INPUT</FieldName>
            <FieldType>byte</FieldType>
        </Field>
        <Field>
            <FieldName>BUG</FieldName>
            <FieldType>byte</FieldType>
        </Field>
        <Field>
            <FieldName>USER_ENVIRONMENT</FieldName>
            <FieldType>byte</FieldType>
        </Field>
        <Field>
            <FieldName>REMOTE_ENVIRONMENT</FieldName>
            <FieldType>byte</FieldType>
        </Field>
        <Field>
            <FieldName>ERROR</FieldName>
            <FieldType>byte</FieldType>
        </Field>
        <Field>
            <FieldName>errorCode</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>errorSource</FieldName>
            <FieldType>byte</FieldType>
        </Field>
        <Field>
            <FieldName>retriable</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>detailedMessage</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>markedAsShowToUser</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>sourceLocation</FieldName>
            <FieldType>SourceLocation</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>isInput</MethodName>
            <MethodComment>/** 
 * A static method to query if an error source is due to an input or not.
 * @param errSource - byte that indicates the error source
 * @return true if the error source is an input; false otherwise
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>errSource</ParamName>
                    <ParamType>byte</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isBug</MethodName>
            <MethodComment>/** 
 * A static method to query if an error source is due to a bug or not.
 * @param errSource - byte that indicates the error source
 * @return true if the error source is a bug; false otherwise
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>errSource</ParamName>
                    <ParamType>byte</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isUserEnvironment</MethodName>
            <MethodComment>/** 
 * A static method to query if an error source is due to the user environment or not.
 * @param errSource - byte that indicates the error source
 * @return true if the error source is due to the user environment; false otherwise
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>errSource</ParamName>
                    <ParamType>byte</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isRemoteEnvironment</MethodName>
            <MethodComment>/** 
 * A static method to query if an error source is due to the remote environment or not.
 * @param errSource - byte that indicates the error source
 * @return true if the error source is due to the remote environment; false otherwise
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>errSource</ParamName>
                    <ParamType>byte</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>determineErrorSource</MethodName>
            <MethodComment>/** 
 * A static method to determine the error source given the error code
 * @param errCode - integer error code
 * @return byte that indicates the error source
 */
</MethodComment>
            <ReturnType>byte</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>errCode</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PigException</MethodName>
            <MethodComment>/** 
 * Create a new PigException with null as the error message.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PigException</MethodName>
            <MethodComment>/** 
 * Create a new PigException with the specified message.
 * @param message - The error message (which is saved for later retrieval by the &lt;link&gt;Throwable.getMessage()&lt;/link&gt; method) shown to the user 
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>message</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PigException</MethodName>
            <MethodComment>/** 
 * Create a new PigException with the specified message.
 * @param message - The error message (which is saved for later retrieval by the &lt;link&gt;Throwable.getMessage()&lt;/link&gt; method) shown to the user 
 * @param location - The &lt;link&gt;SourceLocation&lt;/link&gt; that generated this error.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>message</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>location</ParamName>
                    <ParamType>SourceLocation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PigException</MethodName>
            <MethodComment>/** 
 * Create a new PigException with the specified cause.
 * @param cause - The cause (which is saved for later retrieval by the &lt;link&gt;Throwable.getCause()&lt;/link&gt; method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cause</ParamName>
                    <ParamType>Throwable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PigException</MethodName>
            <MethodComment>/** 
 * Create a new PigException with the specified message and cause.
 * @param message - The error message (which is saved for later retrieval by the &lt;link&gt;Throwable.getMessage()&lt;/link&gt; method) shown to the user 
 * @param cause - The cause (which is saved for later retrieval by the &lt;link&gt;Throwable.getCause()&lt;/link&gt; method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>message</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cause</ParamName>
                    <ParamType>Throwable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PigException</MethodName>
            <MethodComment>/** 
 * Create a new PigException with the specified message and cause.
 * @param message - The error message (which is saved for later retrieval by the &lt;link&gt;Throwable.getMessage()&lt;/link&gt; method) shown to the user 
 * @param errCode - The error code shown to the user 
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>message</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>errCode</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PigException</MethodName>
            <MethodComment>/** 
 * Create a new PigException with the specified message and cause.
 * @param message - The error message (which is saved for later retrieval by the &lt;link&gt;Throwable.getMessage()&lt;/link&gt; method) shown to the user 
 * @param errCode - The error code shown to the user 
 * @param location - The &lt;link&gt;SourceLocation&lt;/link&gt; that generated this error.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>message</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>errCode</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>location</ParamName>
                    <ParamType>SourceLocation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PigException</MethodName>
            <MethodComment>/** 
 * Create a new PigException with the specified message and cause.
 * @param message - The error message (which is saved for later retrieval by the &lt;link&gt;Throwable.getMessage()&lt;/link&gt; method) shown to the user 
 * @param errCode - The error code shown to the user 
 * @param cause - The cause (which is saved for later retrieval by the &lt;link&gt;Throwable.getCause()&lt;/link&gt; method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown. 
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>message</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>errCode</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cause</ParamName>
                    <ParamType>Throwable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PigException</MethodName>
            <MethodComment>/** 
 * Create a new PigException with the specified message and cause.
 * @param message - The error message (which is saved for later retrieval by the &lt;link&gt;Throwable.getMessage()&lt;/link&gt; method) shown to the user 
 * @param errCode - The error code shown to the user 
 * @param cause - The cause (which is saved for later retrieval by the &lt;link&gt;Throwable.getCause()&lt;/link&gt; method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown. 
 * @param location - The &lt;link&gt;SourceLocation&lt;/link&gt; that generated this error.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>message</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>errCode</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cause</ParamName>
                    <ParamType>Throwable</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>location</ParamName>
                    <ParamType>SourceLocation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PigException</MethodName>
            <MethodComment>/** 
 * Create a new PigException with the specified message and cause.
 * @param message - The error message (which is saved for later retrieval by the &lt;link&gt;Throwable.getMessage()&lt;/link&gt; method) shown to the user 
 * @param errCode - The error code shown to the user 
 * @param errSrc - The error source 
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>message</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>errCode</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>errSrc</ParamName>
                    <ParamType>byte</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PigException</MethodName>
            <MethodComment>/** 
 * Create a new PigException with the specified message and cause.
 * @param message - The error message (which is saved for later retrieval by the &lt;link&gt;Throwable.getMessage()&lt;/link&gt; method) shown to the user 
 * @param errCode - The error code shown to the user 
 * @param errSrc - The error source 
 * @param location - The &lt;link&gt;SourceLocation&lt;/link&gt; that generated this error.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>message</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>errCode</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>errSrc</ParamName>
                    <ParamType>byte</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>location</ParamName>
                    <ParamType>SourceLocation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PigException</MethodName>
            <MethodComment>/** 
 * Create a new PigException with the specified message and cause.
 * @param message - The error message (which is saved for later retrieval by the &lt;link&gt;Throwable.getMessage()&lt;/link&gt; method) shown to the user 
 * @param errCode - The error code shown to the user 
 * @param errSrc - The error source
 * @param cause - The cause (which is saved for later retrieval by the &lt;link&gt;Throwable.getCause()&lt;/link&gt; method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown. 
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>message</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>errCode</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>errSrc</ParamName>
                    <ParamType>byte</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cause</ParamName>
                    <ParamType>Throwable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PigException</MethodName>
            <MethodComment>/** 
 * Create a new PigException with the specified message and cause.
 * @param message - The error message (which is saved for later retrieval by the &lt;link&gt;Throwable.getMessage()&lt;/link&gt; method) shown to the user 
 * @param errCode - The error code shown to the user 
 * @param errSrc - The error source
 * @param cause - The cause (which is saved for later retrieval by the &lt;link&gt;Throwable.getCause()&lt;/link&gt; method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown. 
 * @param location - The &lt;link&gt;SourceLocation&lt;/link&gt; that generated this error.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>message</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>errCode</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>errSrc</ParamName>
                    <ParamType>byte</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cause</ParamName>
                    <ParamType>Throwable</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>location</ParamName>
                    <ParamType>SourceLocation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PigException</MethodName>
            <MethodComment>/** 
 * Create a new PigException with the specified message and cause.
 * @param message - The error message (which is saved for later retrieval by the &lt;link&gt;Throwable.getMessage()&lt;/link&gt; method) shown to the user 
 * @param errCode - The error code shown to the user 
 * @param retry - If the exception is retriable or not
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>message</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>errCode</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>retry</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PigException</MethodName>
            <MethodComment>/** 
 * Create a new PigException with the specified message and cause.
 * @param message - The error message (which is saved for later retrieval by the &lt;link&gt;Throwable.getMessage()&lt;/link&gt; method) shown to the user 
 * @param errCode - The error code shown to the user 
 * @param errSrc - The error source 
 * @param retry - If the exception is retriable or not
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>message</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>errCode</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>errSrc</ParamName>
                    <ParamType>byte</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>retry</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PigException</MethodName>
            <MethodComment>/** 
 * Create a new PigException with the specified message and cause.
 * @param message - The error message (which is saved for later retrieval by the &lt;link&gt;Throwable.getMessage()&lt;/link&gt; method) shown to the user 
 * @param errCode - The error code shown to the user 
 * @param errSrc - The error source 
 * @param retry - If the exception is retriable or not
 * @param detailedMsg - The detailed message shown to the developer 
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>message</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>errCode</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>errSrc</ParamName>
                    <ParamType>byte</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>retry</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>detailedMsg</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PigException</MethodName>
            <MethodComment>/** 
 * Create a new PigException with the specified message and cause.
 * @param message - The error message (which is saved for later retrieval by the &lt;link&gt;Throwable.getMessage()&lt;/link&gt; method) shown to the user 
 * @param errCode - The error code shown to the user 
 * @param errSrc - The error source 
 * @param retry - If the exception is retriable or not
 * @param detailedMsg - The detailed message shown to the developer 
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>message</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>errCode</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>errSrc</ParamName>
                    <ParamType>byte</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>retry</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>detailedMsg</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>location</ParamName>
                    <ParamType>SourceLocation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PigException</MethodName>
            <MethodComment>/** 
 * Create a new PigException with the specified message, error code, error source, retriable or not, detalied message for the developer and cause.
 * @param message - The error message (which is saved for later retrieval by the &lt;link&gt;Throwable.getMessage()&lt;/link&gt; method) shown to the user 
 * @param errCode - The error code shown to the user 
 * @param errSrc - The error source 
 * @param retry - If the exception is retriable or not
 * @param detailedMsg - The detailed message shown to the developer 
 * @param cause - The cause (which is saved for later retrieval by the &lt;link&gt;Throwable.getCause()&lt;/link&gt; method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>message</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>errCode</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>errSrc</ParamName>
                    <ParamType>byte</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>retry</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>detailedMsg</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cause</ParamName>
                    <ParamType>Throwable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PigException</MethodName>
            <MethodComment>/** 
 * Create a new PigException with the specified message, error code, error source, retriable or not, detalied message for the developer and cause.
 * @param message - The error message (which is saved for later retrieval by the &lt;link&gt;Throwable.getMessage()&lt;/link&gt; method) shown to the user 
 * @param errCode - The error code shown to the user 
 * @param errSrc - The error source 
 * @param retry - If the exception is retriable or not
 * @param detailedMsg - The detailed message shown to the developer 
 * @param cause - The cause (which is saved for later retrieval by the &lt;link&gt;Throwable.getCause()&lt;/link&gt; method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.
 * @param location - The &lt;link&gt;SourceLocation&lt;/link&gt; that generated this error.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>message</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>errCode</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>errSrc</ParamName>
                    <ParamType>byte</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>retry</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>detailedMsg</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cause</ParamName>
                    <ParamType>Throwable</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>location</ParamName>
                    <ParamType>SourceLocation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>retriable</MethodName>
            <MethodComment>/** 
 * Checks if the exception is retriable.
 * @return if the exception is retriable or not
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setRetriable</MethodName>
            <MethodComment>/** 
 * Set the retriable attribute of the exception
 * @param retry - true if retriable; false otherwise
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>retry</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getErrorSource</MethodName>
            <MethodComment>/** 
 * Returns the error source of the exception. Can be more than one source.
 * @return error sources represented as a byte
 */
</MethodComment>
            <ReturnType>byte</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setErrorSource</MethodName>
            <MethodComment>/** 
 * Set the error source of the exception
 * @param src - byte representing the error sources
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>src</ParamName>
                    <ParamType>byte</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getErrorCode</MethodName>
            <MethodComment>/** 
 * Returns the error code of the exception
 * @return error code of the exception
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setErrorCode</MethodName>
            <MethodComment>/** 
 * Set the error code of the exception
 * @param code - error code
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>code</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDetailedMessage</MethodName>
            <MethodComment>/** 
 * Returns the detailed message used by developers for debugging
 * @return detailed message
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setDetailedMessage</MethodName>
            <MethodComment>/** 
 * Set the detailed message of the exception
 * @param detailMsg - detailed message to be used by developers
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>detailMsg</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMarkedAsShowToUser</MethodName>
            <MethodComment>/** 
 * Check if this PigException is marked as the ones whose message is to be  displayed to the user. This can be used to indicate if the corresponding  error message is a good candidate for displaying to the end user, instead of drilling down the stack trace further.
 * @return true if this pig exception is marked as appropriate to be displayed to the user
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setMarkedAsShowToUser</MethodName>
            <MethodComment>/** 
 * Mark this exception as a good candidate for showing its message to the  pig user 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>showToUser</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSourceLocation</MethodName>
            <MethodComment>/** 
 * Return the location in the source that generated the exception.
 */
</MethodComment>
            <ReturnType>SourceLocation</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setSourceLocation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>location</ParamName>
                    <ParamType>SourceLocation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment>/** 
 * Returns a short description of this throwable. The result is the concatenation of: &lt;ul&gt; &lt;li&gt; the  {@linkplain Class#getName() name} of the class of this object&lt;li&gt; ": " (a colon and a space) &lt;li&gt; "ERROR " (the string ERROR followed by a a space) &lt;li&gt; the result of invoking this object's  {@link #getErrorCode} method&lt;li&gt; ": " (a colon and a space) &lt;li&gt; the result of invoking  {@link Throwable#getLocalizedMessage() getLocalizedMessage}method &lt;/ul&gt; If &lt;tt&gt;getLocalizedMessage&lt;/tt&gt; returns &lt;tt&gt;null&lt;/tt&gt;, then just the class name is returned.
 * @return a string representation of this throwable.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [s=getClass().getName()]</InnerVar>
                <InnerVar>String [message=getLocalizedMessage()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>