<Class>
    <Id>1281</Id>
    <Package>org.apache.pig.piggybank.evaluation.util.apachelogparser</Package>
    <ClassName>DateExtractor</ClassName>
    <SuperClass>EvalFunc</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>DateExtractor  /** 
 * DateExtractor has four different constructors which each allow for different functionality. The incomingDateFormat ("dd/MMM/yyyy:HH:mm:ss Z" by default) is used to match the date string that gets passed in from the log. The outgoingDateFormat ("yyyy-MM-dd" by default) is used to format the returned string. Different constructors exist for each combination; please use the appropriate respective constructor. Note that any data that exists in the SimpleDateFormat schema can be supported. For example, if you were starting with the default incoming format and wanted to extract just the year, you would use the single string constructor DateExtractor("yyyy"). From pig latin you will need to use aliases to use a non-default format, like define MyDateExtractor org.apache.pig.piggybank.evaluation.util.apachelogparser.DateExtractor("yyyy-MM"); A = FOREACH row GENERATE DateExtractor(dayTime); If a string cannot be parsed, null will be returned and an error message printed to stderr. By default, the DateExtractor uses the GMT timezone. You can use the three-parameter constructor to override the timezone.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>DEFAULT_INCOMING_DATE_FORMAT</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>DEFAULT_OUTGOING_DATE_FORMAT</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>DEFAULT_TZ_ID</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>incomingDateFormat</FieldName>
            <FieldType>SimpleDateFormat</FieldType>
        </Field>
        <Field>
            <FieldName>outgoingDateFormat</FieldName>
            <FieldType>SimpleDateFormat</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>DateExtractor</MethodName>
            <MethodComment>/** 
 * forms the formats based on default incomingDateFormat and default outgoingDateFormat
 * @param outgoingDateString outgoingDateFormat is based on outgoingDateString
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>DateExtractor</MethodName>
            <MethodComment>/** 
 * forms the formats based on passed outgoingDateString and the default incomingDateFormat
 * @param outgoingDateString outgoingDateFormat is based on outgoingDateString
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>outgoingDateString</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>DateExtractor</MethodName>
            <MethodComment>/** 
 * forms the formats based on passed incomingDateString and outgoingDateString
 * @param incomingDateString incomingDateFormat is based on incomingDateString
 * @param outgoingDateString outgoingDateFormat is based on outgoingDateString
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>incomingDateString</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>outgoingDateString</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>DateExtractor</MethodName>
            <MethodComment>/** 
 * forms the formats based on passed incomingDateString and outgoingDateString
 * @param incomingDateString incomingDateFormat is based on incomingDateString
 * @param outgoingDateString outgoingDateFormat is based on outgoingDateString
 * @param timeZoneID time zone id in which dates should be expressed.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>incomingDateString</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>outgoingDateString</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>timeZoneID</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>TimeZone [tz=TimeZone.getTimeZone(timeZoneID)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>incomingDateFormat;setTimeZone;[tz]</InnerMethodInvoke>
                <InnerMethodInvoke>outgoingDateFormat;setTimeZone;[tz]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>exec</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [str=""]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getArgToFuncMapping</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>FuncSpec</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>List&lt;FuncSpec&gt; [funcList=new ArrayList&lt;FuncSpec&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>funcList;add;[new FuncSpec(this.getClass().getName(),new Schema(new Schema.FieldSchema(null,DataType.CHARARRAY)))]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>