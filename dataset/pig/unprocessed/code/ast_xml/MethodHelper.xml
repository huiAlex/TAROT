<Class>
    <Id>634</Id>
    <Package>org.apache.pig.data.utils</Package>
    <ClassName>MethodHelper</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>MethodHelper</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isNotImplementedAnnotationPresent</MethodName>
            <MethodComment>/** 
 * Given a method and a class, this will return true if the method is declared in the class, and if it is, if the NotImplemented annotation is present. This method will recurse through the parent class hierarchy until it finds the first instance of the method at hand, and then it will return accordingly.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>m</ParamName>
                    <ParamType>Method</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>methodNotImplemented</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>RuntimeException</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>StackTraceElement[] [ste=Thread.currentThread().getStackTrace()]</InnerVar>
                <InnerVar>StackTraceElement [pre=ste[ste.length - 2]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>methodSignatureEqual</MethodName>
            <MethodComment>/** 
 * This implements a stripped down version of method equality. method.equals(method) checks to see whether the declaring classes are equal, which we do not want. Instead, we just want to know if the methods are equal assuming that they come from the same class hierarchy (ie generated code which extends SchemaTuple).
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>m1</ParamName>
                    <ParamType>Method</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>m2</ParamName>
                    <ParamType>Method</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Class&lt;?&gt;[] [params1=m1.getParameterTypes()]</InnerVar>
                <InnerVar>Class&lt;?&gt;[] [params2=m2.getParameterTypes()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>