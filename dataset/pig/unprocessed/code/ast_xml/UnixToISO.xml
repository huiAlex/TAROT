<Class>
    <Id>210</Id>
    <Package>org.apache.pig.piggybank.evaluation.datetime.convert</Package>
    <ClassName>UnixToISO</ClassName>
    <SuperClass>EvalFunc</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>UnixToISO  /** 
 * &lt;p&gt;UnixToISO converts Unix Time Long datetimes to ISO8601 datetime strings&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Jodatime: http://joda-time.sourceforge.net/&lt;/li&gt; &lt;li&gt;ISO8601 Date Format: http://en.wikipedia.org/wiki/ISO_8601&lt;/li&gt; &lt;li&gt;Unix Time: http://en.wikipedia.org/wiki/Unix_time&lt;/li&gt; &lt;/ul&gt; &lt;br /&gt; &lt;pre&gt; Example usage: REGISTER /Users/me/commiter/piggybank/java/piggybank.jar ; REGISTER /Users/me/commiter/piggybank/java/lib/joda-time-1.6.jar ; DEFINE UnixToISO org.apache.pig.piggybank.evaluation.datetime.convert.UnixToISO(); UnixIn = LOAD 'test2.tsv' USING PigStorage('\t') AS (dt:long); DESCRIBE UnixIn; UnixIn: {dt: long} DUMP UnixIn; (1231290421000L) (1233885962000L) (1236222303000L) toISO = FOREACH UnixIn GENERATE UnixToISO(dt) AS ISOTime:chararray; DESCRIBE toISO; toISO: {ISOTime: chararray} DUMP toISO; (2009-01-07T01:07:01.000Z) (2009-02-06T02:06:02.000Z) (2009-03-05T03:05:03.000Z) ... &lt;/pre&gt;
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>exec</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DateTime [result=new DateTime(DataType.toLong(input.get(0)))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>outputSchema</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Schema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>Schema</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getArgToFuncMapping</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>FuncSpec</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>List&lt;FuncSpec&gt; [funcList=new ArrayList&lt;FuncSpec&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>funcList;add;[new FuncSpec(this.getClass().getName(),new Schema(new Schema.FieldSchema(null,DataType.LONG)))]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>