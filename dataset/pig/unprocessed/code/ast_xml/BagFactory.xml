<Class>
    <Id>1052</Id>
    <Package>org.apache.pig.data</Package>
    <ClassName>BagFactory</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>BagFactory  /** 
 * Factory for constructing different types of bags. This class is abstract so that users can override the bag factory if they desire to provide their own that returns their implementation of a bag.  If the property pig.data.bag.factory.name is set to a class name and pig.data.bag.factory.jar is set to a URL pointing to a jar that contains the above named class, then getInstance() will create  an instance of the named class using the indicated jar.  Otherwise, it will create an instance of DefaultBagFactory.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>gSelf</FieldName>
            <FieldType>BagFactory</FieldType>
        </Field>
        <Field>
            <FieldName>gMemMgr</FieldName>
            <FieldType>SpillableMemoryManager</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getInstance</MethodName>
            <MethodComment>/** 
 * Get a reference to the singleton factory.
 * @return BagFactory
 */
</MethodComment>
            <ReturnType>BagFactory</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newDefaultBag</MethodName>
            <MethodComment>/** 
 * Get a default (unordered, not distinct) data bag.
 * @return default data bag.
 */
</MethodComment>
            <ReturnType>DataBag</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newDefaultBag</MethodName>
            <MethodComment>/** 
 * Get a default (unordered, not distinct) data bag with an existing list of tuples inserted into the bag.
 * @param listOfTuples list of tuples to be placed in the bag.  This list may not becopied, it may be used directly by the created bag.
 * @return default data bag.
 */
</MethodComment>
            <ReturnType>DataBag</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>listOfTuples</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newLimitedSortedBag</MethodName>
            <MethodComment>/** 
 * Get a limited sorted data bag.  Limited sorted bags are sorted bags with number of elements no more than limit.
 * @param comp Comparator that controls how the data is sorted.If null, default comparator will be used.
 * @param limit max number of tuples in bag
 * @return a sorted data bag
 */
</MethodComment>
            <ReturnType>DataBag</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>comp</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>limit</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newSortedBag</MethodName>
            <MethodComment>/** 
 * Get a sorted data bag.  Sorted bags guarantee that when an iterator is opened on the bag the tuples will be returned in sorted order.
 * @param comp Comparator that controls how the data is sorted.If null, default comparator will be used.
 * @return a sorted data bag
 */
</MethodComment>
            <ReturnType>DataBag</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>comp</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newDistinctBag</MethodName>
            <MethodComment>/** 
 * Get a distinct data bag.  Distinct bags guarantee that when an iterator is opened on the bag, no two tuples returned from the iterator will be equal.
 * @return distinct data bag
 */
</MethodComment>
            <ReturnType>DataBag</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>BagFactory</MethodName>
            <MethodComment>/** 
 * Construct a new BagFactory
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>registerBag</MethodName>
            <MethodComment>/** 
 * @deprecated As of Pig 0.11, bags register with the {@link SpillableMemoryManager} themselves.Register a bag with the {@link org.apache.pig.impl.util.SpillableMemoryManager}. If the bags created by an implementation of BagFactory are managed by the  {@link org.apache.pig.impl.util.SpillableMemoryManager} then thismethod should be called each time a new bag is created.
 * @param b bag to be registered.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>b</ParamName>
                    <ParamType>DataBag</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>gMemMgr;registerSpillable;[b]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>resetSelf</MethodName>
            <MethodComment>/** 
 * Provided for testing purposes only.  This function should never be called by anybody but the unit tests.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>