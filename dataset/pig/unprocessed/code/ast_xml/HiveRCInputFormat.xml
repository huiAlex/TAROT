<Class>
    <Id>874</Id>
    <Package>org.apache.pig.piggybank.storage.hiverc</Package>
    <ClassName>HiveRCInputFormat</ClassName>
    <SuperClass>FileInputFormat</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>HiveRCInputFormat  /** 
 * HiveRCInputFormat used by HiveColumnarLoader as the InputFormat; &lt;p/&gt; Reasons for implementing a new InputFormat sub class:&lt;br/&gt; &lt;ul&gt; &lt;li&gt;The current RCFileInputFormat uses the old InputFormat mapred interface, and the pig load store design used the new InputFormat mapreduce classes.&lt;/li&gt; &lt;li&gt;The splits are calculated by the InputFormat, HiveColumnarLoader supports date partitions, the filtering is done here.&lt;/li&gt; &lt;/ul&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>partitionHelper</FieldName>
            <FieldType>PathPartitionHelper</FieldType>
        </Field>
        <Field>
            <FieldName>signature</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>HiveRCInputFormat</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>HiveRCInputFormat</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>signature</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Properties [properties=UDFContext.getUDFContext().getUDFProperties(HiveColumnarLoader.class,new String[]{signature})]</InnerVar>
                <InnerVar>String [partitionExpression=properties.getProperty(PathPartitionHelper.PARITITION_FILTER_EXPRESSION)]</InnerVar>
                <InnerVar>String [dateRange=properties.getProperty(HiveColumnarLoader.DATE_RANGE)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>listStatus</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>FileStatus</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>jobContext</ParamName>
                    <ParamType>JobContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;FileStatus&gt; [files=partitionHelper.listStatus(jobContext,HiveColumnarLoader.class,signature)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildFilterExpressionFromDatePartition</MethodName>
            <MethodComment>/** 
 * If the date range was supplied in the loader constructor we need to build our own filter expression.&lt;br/&gt;
 * @param dateRange
 * @return String
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dateRange</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Properties [properties=UDFContext.getUDFContext().getUDFProperties(HiveColumnarLoader.class,new String[]{signature})]</InnerVar>
                <InnerVar>String [partitionColumnStr=properties.getProperty(PathPartitionHelper.PARTITION_COLUMNS)]</InnerVar>
                <InnerVar>boolean [isYearMonthDayFormat=false]</InnerVar>
                <InnerVar>String [key=null]</InnerVar>
                <InnerVar>String[] [split=dateRange.split(":")]</InnerVar>
                <InnerVar>String [partitionExpression=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>formatNumber</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>numb</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createRecordReader</MethodName>
            <MethodComment>/** 
 * Initialises an instance of HiveRCRecordReader.
 */
</MethodComment>
            <ReturnType>LongWritable</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>split</ParamName>
                    <ParamType>InputSplit</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>TaskAttemptContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>HiveRCRecordReader [reader=new HiveRCRecordReader()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseDate</MethodName>
            <MethodComment>/** 
 * Parse a date string with format yyyy-MM-dd.
 * @param dateFormat DateFormat
 * @param dateString String
 * @return Date
 */
</MethodComment>
            <ReturnType>Date</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dateFormat</ParamName>
                    <ParamType>DateFormat</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dateString</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFormatMinSplitSize</MethodName>
            <MethodComment>/** 
 * The input split size should never be smaller than the RCFile.SYNC_INTERVAL
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>