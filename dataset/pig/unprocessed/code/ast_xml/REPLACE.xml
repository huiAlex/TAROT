<Class>
    <Id>517</Id>
    <Package>org.apache.pig.builtin</Package>
    <ClassName>REPLACE</ClassName>
    <SuperClass>EvalFunc</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>REPLACE  /** 
 * REPLACE implements eval function to replace part of a string. Example:&lt;code&gt; A = load 'mydata' as (name); B = foreach A generate REPLACE(name, 'blabla', 'bla'); The first argument is a string on which to perform the operation. The second argument is treated as a regular expression. The third argument is the replacement string. This is a wrapper around Java's String.replaceAll(String, String);
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>mPattern</FieldName>
            <FieldType>Pattern</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>exec</MethodName>
            <MethodComment>/** 
 * Method invoked on every tuple during foreach evaluation
 * @param input tuple; first column is assumed to have the column to convert
 * @exception java.io.IOException
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [source=(String)input.get(0)]</InnerVar>
                <InnerVar>String [target=(String)input.get(1)]</InnerVar>
                <InnerVar>String [replacewith=(String)input.get(2)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>outputSchema</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Schema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>Schema</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getArgToFuncMapping</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>FuncSpec</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>List&lt;FuncSpec&gt; [funcList=new ArrayList&lt;FuncSpec&gt;()]</InnerVar>
                <InnerVar>Schema [s=new Schema()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>s;add;[new Schema.FieldSchema(null,DataType.CHARARRAY)]</InnerMethodInvoke>
                <InnerMethodInvoke>s;add;[new Schema.FieldSchema(null,DataType.CHARARRAY)]</InnerMethodInvoke>
                <InnerMethodInvoke>s;add;[new Schema.FieldSchema(null,DataType.CHARARRAY)]</InnerMethodInvoke>
                <InnerMethodInvoke>funcList;add;[new FuncSpec(this.getClass().getName(),s)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>allowCompileTimeCalculation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>