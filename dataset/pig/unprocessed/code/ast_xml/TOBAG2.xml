<Class>
    <Id>218</Id>
    <Package>org.apache.pig.test.udf.evalfunc</Package>
    <ClassName>TOBAG2</ClassName>
    <SuperClass>EvalFunc</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>TOBAG2  /** 
 * This class takes a list of items and puts them into a bag T = foreach U generate TOBAG($0, $1, $2); It's like saying this: T = foreach U generate {($0), ($1), ($2)} All arguments that are not of tuple type are inserted into a tuple before being added to the bag. This is because bag is always a bag of tuples. Output schema: The output schema for this udf depends on the schema of its arguments. If all the arguments have same type and same inner  schema (for bags/tuple columns), then the udf output schema would be a bag  of tuples having a column of the type and inner-schema (if any) of the  arguments.  If the arguments are of type tuple/bag, then their innerschmea, including the alias names should match. If these conditions are not met the output schema will be a bag with null  inner schema. example 1  grunt&gt; describe a; a: {a0: int,a1: int} grunt&gt; b = foreach a generate TOBAG(a0,a1); grunt&gt; describe b; b: {{int}} example 2 grunt&gt; describe a; a: {a0: (x: int),a1: (x: int)} grunt&gt; b = foreach a generate TOBAG(a0,a1);                                     grunt&gt; describe b;                                                              b: {{(x: int)}} example 3 grunt&gt; describe a;                                                              a: {a0: (x: int),a1: (y: int)} -- note that the inner schema is different because the alises (x &amp; y) are different grunt&gt; b = foreach a generate TOBAG(a0,a1);                                     grunt&gt; describe b;                                                              b: {{NULL}}
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>exec</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DataBag</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>outputSchema</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Schema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>inputSch</ParamName>
                    <ParamType>Schema</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>byte [type=DataType.ERROR]</InnerVar>
                <InnerVar>Schema [innerSchema=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nullEquals</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>currentSchema</ParamName>
                    <ParamType>Schema</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>newSchema</ParamName>
                    <ParamType>Schema</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>