<Class>
    <Id>653</Id>
    <Package>org.apache.pig.newplan.logical.rules</Package>
    <ClassName>FilterAboveForeach</ClassName>
    <SuperClass>Rule</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>FilterAboveForeach  /** 
 * This Rule moves Filter Above Foreach. It checks if uid on which filter works on is present in the predecessor of foreach. If so it transforms it.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>filter</FieldName>
            <FieldType>LOFilter</FieldType>
        </Field>
        <Field>
            <FieldName>foreach</FieldName>
            <FieldType>LOForEach</FieldType>
        </Field>
        <Field>
            <FieldName>forEachPred</FieldName>
            <FieldType>LogicalRelationalOperator</FieldType>
        </Field>
        <Field>
            <FieldName>subPlan</FieldName>
            <FieldType>OperatorSubPlan</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>FilterAboveForeach</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>n</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildPattern</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>OperatorPlan</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>LogicalPlan [plan=new LogicalPlan()]</InnerVar>
                <InnerVar>LogicalRelationalOperator [foreach=new LOForEach(plan)]</InnerVar>
                <InnerVar>LogicalRelationalOperator [filter=new LOFilter(plan)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>plan;add;[foreach]</InnerMethodInvoke>
                <InnerMethodInvoke>plan;add;[filter]</InnerMethodInvoke>
                <InnerMethodInvoke>plan;connect;[foreach, filter]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNewTransformer</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Transformer</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>check</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>matched</ParamName>
                    <ParamType>OperatorPlan</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Iterator&lt;Operator&gt; [iter=matched.getOperators()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFilterProjectionUids</MethodName>
            <MethodComment>/** 
 * Get all uids from Projections of this FilterOperator
 * @param filter
 * @return Set of uid
 */
</MethodComment>
            <ReturnType>List&lt;Long&gt;</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>filter</ParamName>
                    <ParamType>LOFilter</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;Long&gt; [uids=new ArrayList&lt;Long&gt;()]</InnerVar>
                <InnerVar>List&lt;Byte&gt; [types=new ArrayList&lt;Byte&gt;()]</InnerVar>
                <InnerVar>Pair&lt;List&lt;Long&gt;,List&lt;Byte&gt;&gt; [result=new Pair&lt;List&lt;Long&gt;,List&lt;Byte&gt;&gt;(uids,types)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasAll</MethodName>
            <MethodComment>/** 
 * checks if a relational operator contains all of the specified uids
 * @param op LogicalRelational operator that should contain the uid
 * @param uids Uids to check for
 * @return true if given LogicalRelationalOperator has all the given uids
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>op</ParamName>
                    <ParamType>LogicalRelationalOperator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>uidWithTypes</ParamName>
                    <ParamType>List&lt;Long&gt;</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LogicalSchema [schema=op.getSchema()]</InnerVar>
                <InnerVar>List&lt;Long&gt; [uids=uidWithTypes.first]</InnerVar>
                <InnerVar>List&lt;Byte&gt; [types=uidWithTypes.second]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reportChanges</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>OperatorPlan</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>transform</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>matched</ParamName>
                    <ParamType>OperatorPlan</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;Operator&gt; [opSet=currentPlan.getPredecessors(filter)]</InnerVar>
                <InnerVar>Operator [filterPred=opSet.get(0)]</InnerVar>
                <InnerVar>Operator [filterSuc=opSet.get(0)]</InnerVar>
                <InnerVar>Pair&lt;Integer,Integer&gt; [forEachPredPlaces=currentPlan.disconnect(forEachPred,foreach)]</InnerVar>
                <InnerVar>Pair&lt;Integer,Integer&gt; [filterPredPlaces=currentPlan.disconnect(filterPred,filter)]</InnerVar>
                <InnerVar>Pair&lt;Integer,Integer&gt; [filterSucPlaces=currentPlan.disconnect(filter,filterSuc)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>currentPlan;connect;[forEachPred, forEachPredPlaces.first, filter, filterPredPlaces.second]</InnerMethodInvoke>
                <InnerMethodInvoke>currentPlan;connect;[filter, filterSucPlaces.first, foreach, forEachPredPlaces.second]</InnerMethodInvoke>
                <InnerMethodInvoke>currentPlan;connect;[filterPred, filterPredPlaces.first, filterSuc, filterSucPlaces.second]</InnerMethodInvoke>
                <InnerMethodInvoke>subPlan;add;[forEachPred]</InnerMethodInvoke>
                <InnerMethodInvoke>subPlan;add;[foreach]</InnerMethodInvoke>
                <InnerMethodInvoke>subPlan;add;[filterPred]</InnerMethodInvoke>
                <InnerMethodInvoke>subPlan;add;[filter]</InnerMethodInvoke>
                <InnerMethodInvoke>subPlan;add;[filterSuc]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>