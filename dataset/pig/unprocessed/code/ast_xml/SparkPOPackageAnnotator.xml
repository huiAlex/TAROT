<Class>
    <Id>769</Id>
    <Package>org.apache.pig.backend.hadoop.executionengine.spark.plan</Package>
    <ClassName>SparkPOPackageAnnotator</ClassName>
    <SuperClass>SparkOpPlanVisitor</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>SparkPOPackageAnnotator  /** 
 * This visitor visits the SparkPlan and does the following for each SparkOperator - visits the POPackage in the plan and finds the corresponding POLocalRearrange(s). It then annotates the POPackage with information about which columns in the "value" are present in the "key" and will need to stitched in to the "value"
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>LOG</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>pkg</FieldName>
            <FieldType>POPackage</FieldType>
        </Field>
        <Field>
            <FieldName>plan</FieldName>
            <FieldType>PhysicalPlan</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>SparkPOPackageAnnotator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>plan</ParamName>
                    <ParamType>SparkOperPlan</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitSparkOp</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sparkOp</ParamName>
                    <ParamType>SparkOperator</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>VisitorException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PackageDiscoverer</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>plan</ParamName>
                    <ParamType>PhysicalPlan</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitPackage</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pkg</ParamName>
                    <ParamType>POPackage</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PhysicalOperator [graOp=plan.getPredecessors(pkg).get(0)]</InnerVar>
                <InnerVar>List&lt;PhysicalOperator&gt; [lraOps=plan.getPredecessors(graOp)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>Collections;sort;[lraOps]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>VisitorException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>annotatePkgWithLRA</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lrearrange</ParamName>
                    <ParamType>POLocalRearrange</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Map&lt;Integer,Pair&lt;Boolean,Map&lt;Integer,Integer&gt;&gt;&gt; [keyInfo]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>keyInfo;put;[Integer.valueOf(lrearrange.getIndex()), new Pair&lt;Boolean,Map&lt;Integer,Integer&gt;&gt;(lrearrange.isProjectStar(),lrearrange.getProjectedColsMap())]</InnerMethodInvoke>
                <InnerMethodInvoke>pkg.getPkgr();setKeyInfo;[keyInfo]</InnerMethodInvoke>
                <InnerMethodInvoke>pkg.getPkgr();setKeyTuple;[lrearrange.isKeyTuple()]</InnerMethodInvoke>
                <InnerMethodInvoke>pkg.getPkgr();setKeyCompound;[lrearrange.isKeyCompound()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>VisitorException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>