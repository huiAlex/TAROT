<Class>
    <Id>324</Id>
    <Package>org.apache.pig.backend.hadoop.executionengine.util</Package>
    <ClassName>AccumulatorOptimizerUtil</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>LOG</FieldName>
            <FieldType>Log</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getAccumulativeBatchSize</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [batchSize=20000]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addAccumulator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>plan</ParamName>
                    <ParamType>PhysicalPlan</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pos</ParamName>
                    <ParamType>PhysicalOperator</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PhysicalOperator [po_package=pos.get(0)]</InnerVar>
                <InnerVar>Packager [pkgr=((POPackage)po_package).getPkgr()]</InnerVar>
                <InnerVar>boolean[] [isInner=pkgr.getInner()]</InnerVar>
                <InnerVar>List&lt;PhysicalOperator&gt; [l=plan.getSuccessors(po_package)]</InnerVar>
                <InnerVar>PhysicalOperator [po_foreach=l.get(0)]</InnerVar>
                <InnerVar>boolean [foundUDF=false]</InnerVar>
                <InnerVar>List&lt;PhysicalPlan&gt; [list=((POForEach)po_foreach).getInputPlans()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>check</MethodName>
            <MethodComment>/** 
 * Check if an operator is qualified to be under POForEach to turn on accumulator. The operator must be in the following list or an &lt;code&gt;POUserFunc&lt;/code&gt;. If the operator has sub-operators, they must also belong to this list. &lt;li&gt;ConstantExpression&lt;/li&gt; &lt;li&gt;POProject, whose result type is not BAG, or TUPLE and overloaded&lt;/li&gt; &lt;li&gt;POMapLookup&lt;/li&gt; &lt;li&gt;POCase&lt;/li&gt; &lt;li&gt;UnaryExpressionOperator&lt;/li&gt; &lt;li&gt;BinaryExpressionOperator&lt;/li&gt; &lt;li&gt;POBinCond&lt;/li&gt; If the operator is &lt;code&gt;POUserFunc&lt;/code&gt;, it must implement &lt;code&gt;Accumulator&lt;/code&gt; interface and its inputs pass the check by calling &lt;code&gt;checkUDFInput()&lt;/code&gt;
 * @param po the operator to be checked on
 * @return &lt;code&gt;true&lt;/code&gt; if it is ok, &lt;code&gt;false&lt;/code&gt; if not.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>po</ParamName>
                    <ParamType>PhysicalOperator</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkUDFInput</MethodName>
            <MethodComment>/** 
 * Check operators under POUserFunc to verify if this is a valid UDF to run as accumulator. The inputs to &lt;code&gt;POUserFunc&lt;/code&gt; must be in the following list. If the operator has sub-operators, they must also belong to this list. &lt;li&gt;PORelationToExprProject&lt;/li&gt; &lt;li&gt;ConstantExpression&lt;/li&gt; &lt;li&gt;POProject&lt;/li&gt; &lt;li&gt;POCase&lt;/li&gt; &lt;li&gt;UnaryExpressionOperator&lt;/li&gt; &lt;li&gt;BinaryExpressionOperator&lt;/li&gt; &lt;li&gt;POBinCond&lt;/li&gt; &lt;li&gt;POSortedDistinct&lt;/li&gt; &lt;li&gt;POForEach&lt;/li&gt;
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>po</ParamName>
                    <ParamType>PhysicalOperator</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>