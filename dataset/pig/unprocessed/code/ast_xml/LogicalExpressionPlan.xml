<Class>
    <Id>535</Id>
    <Package>org.apache.pig.newplan.logical.expression</Package>
    <ClassName>LogicalExpressionPlan</ClassName>
    <SuperClass>BaseOperatorPlan</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>LogicalExpressionPlan  /** 
 * A plan containing LogicalExpressionOperators.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>isEqual</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>other</ParamName>
                    <ParamType>OperatorPlan</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>explain</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ps</ParamName>
                    <ParamType>PrintStream</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>format</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>verbose</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LogicalPlanPrinter [npp=new LogicalPlanPrinter(this,ps)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ps;println;["#-----------------------------------------------"]</InnerMethodInvoke>
                <InnerMethodInvoke>ps;println;["# New Logical Expression Plan:"]</InnerMethodInvoke>
                <InnerMethodInvoke>ps;println;["#-----------------------------------------------"]</InnerMethodInvoke>
                <InnerMethodInvoke>npp;visit;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>merge</MethodName>
            <MethodComment>/** 
 * Merge all nodes in lgExpPlan, keep the connections
 * @param lgExpPlan plan to merge
 * @return sources of the merged plan
 */
</MethodComment>
            <ReturnType>Operator</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lgExpPlan</ParamName>
                    <ParamType>LogicalExpressionPlan</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;Operator&gt; [sources=lgExpPlan.getSources()]</InnerVar>
                <InnerVar>Iterator&lt;Operator&gt; [iter=lgExpPlan.getOperators()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>deepCopy</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>LogicalExpressionPlan</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>LogicalExpressionPlan [result=new LogicalExpressionPlan()]</InnerVar>
                <InnerVar>LogicalExpression [root=(LogicalExpression)getSources().get(0)]</InnerVar>
                <InnerVar>LogicalExpression [newRoot=root.deepCopy(result)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>result;add;[newRoot]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>