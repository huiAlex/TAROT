<Class>
    <Id>585</Id>
    <Package>org.apache.pig.newplan.logical.expression</Package>
    <ClassName>ExpToPhyTranslationVisitor</ClassName>
    <SuperClass>LogicalExpressionVisitor</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>currentOp</FieldName>
            <FieldType>LogicalRelationalOperator</FieldType>
        </Field>
        <Field>
            <FieldName>logToPhyMap</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>logToPhyMap</FieldName>
            <FieldType>Operator</FieldType>
        </Field>
        <Field>
            <FieldName>currentPlans</FieldName>
            <FieldType>Deque</FieldType>
        </Field>
        <Field>
            <FieldName>currentPlans</FieldName>
            <FieldType>PhysicalPlan</FieldType>
        </Field>
        <Field>
            <FieldName>currentPlan</FieldName>
            <FieldType>PhysicalPlan</FieldType>
        </Field>
        <Field>
            <FieldName>nodeGen</FieldName>
            <FieldType>NodeIdGenerator</FieldType>
        </Field>
        <Field>
            <FieldName>pc</FieldName>
            <FieldType>PigContext</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ExpToPhyTranslationVisitor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>plan</ParamName>
                    <ParamType>OperatorPlan</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>op</ParamName>
                    <ParamType>LogicalRelationalOperator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>phyPlan</ParamName>
                    <ParamType>PhysicalPlan</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>map</ParamName>
                    <ParamType>Operator</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ExpToPhyTranslationVisitor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>plan</ParamName>
                    <ParamType>OperatorPlan</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>walker</ParamName>
                    <ParamType>PlanWalker</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>op</ParamName>
                    <ParamType>LogicalRelationalOperator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>phyPlan</ParamName>
                    <ParamType>PhysicalPlan</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>map</ParamName>
                    <ParamType>Operator</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setPigContext</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pc</ParamName>
                    <ParamType>PigContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPhysicalPlan</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PhysicalPlan</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>attachBinaryComparisonOperator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>op</ParamName>
                    <ParamType>BinaryExpression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>exprOp</ParamName>
                    <ParamType>BinaryComparisonOperator</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>OperatorPlan [oPlan=op.getPlan()]</InnerVar>
                <InnerVar>List&lt;Operator&gt; [successors=oPlan.getSuccessors(op)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>exprOp;setOperandType;[op.getLhs().getType()]</InnerMethodInvoke>
                <InnerMethodInvoke>exprOp;setLhs;[(ExpressionOperator)logToPhyMap.get(op.getLhs())]</InnerMethodInvoke>
                <InnerMethodInvoke>exprOp;setRhs;[(ExpressionOperator)logToPhyMap.get(op.getRhs())]</InnerMethodInvoke>
                <InnerMethodInvoke>currentPlan;add;[exprOp]</InnerMethodInvoke>
                <InnerMethodInvoke>logToPhyMap;put;[op, exprOp]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>attachBinaryExpressionOperator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>op</ParamName>
                    <ParamType>BinaryExpression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>exprOp</ParamName>
                    <ParamType>BinaryExpressionOperator</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>OperatorPlan [oPlan=op.getPlan()]</InnerVar>
                <InnerVar>List&lt;Operator&gt; [successors=oPlan.getSuccessors(op)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>exprOp;setResultType;[op.getLhs().getType()]</InnerMethodInvoke>
                <InnerMethodInvoke>exprOp;setLhs;[(ExpressionOperator)logToPhyMap.get(op.getLhs())]</InnerMethodInvoke>
                <InnerMethodInvoke>exprOp;setRhs;[(ExpressionOperator)logToPhyMap.get(op.getRhs())]</InnerMethodInvoke>
                <InnerMethodInvoke>currentPlan;add;[exprOp]</InnerMethodInvoke>
                <InnerMethodInvoke>logToPhyMap;put;[op, exprOp]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>op</ParamName>
                    <ParamType>AndExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BinaryComparisonOperator [exprOp=new POAnd(new OperatorKey(DEFAULT_SCOPE,nodeGen.getNextNodeId(DEFAULT_SCOPE)))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;attachBinaryComparisonOperator;[op, exprOp]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>op</ParamName>
                    <ParamType>OrExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BinaryComparisonOperator [exprOp=new POOr(new OperatorKey(DEFAULT_SCOPE,nodeGen.getNextNodeId(DEFAULT_SCOPE)))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;attachBinaryComparisonOperator;[op, exprOp]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>op</ParamName>
                    <ParamType>EqualExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BinaryComparisonOperator [exprOp=new EqualToExpr(new OperatorKey(DEFAULT_SCOPE,nodeGen.getNextNodeId(DEFAULT_SCOPE)))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;attachBinaryComparisonOperator;[op, exprOp]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>op</ParamName>
                    <ParamType>NotEqualExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BinaryComparisonOperator [exprOp=new NotEqualToExpr(new OperatorKey(DEFAULT_SCOPE,nodeGen.getNextNodeId(DEFAULT_SCOPE)))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;attachBinaryComparisonOperator;[op, exprOp]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>op</ParamName>
                    <ParamType>GreaterThanExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BinaryComparisonOperator [exprOp=new GreaterThanExpr(new OperatorKey(DEFAULT_SCOPE,nodeGen.getNextNodeId(DEFAULT_SCOPE)))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;attachBinaryComparisonOperator;[op, exprOp]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>op</ParamName>
                    <ParamType>GreaterThanEqualExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BinaryComparisonOperator [exprOp=new GTOrEqualToExpr(new OperatorKey(DEFAULT_SCOPE,nodeGen.getNextNodeId(DEFAULT_SCOPE)))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;attachBinaryComparisonOperator;[op, exprOp]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>op</ParamName>
                    <ParamType>LessThanExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BinaryComparisonOperator [exprOp=new LessThanExpr(new OperatorKey(DEFAULT_SCOPE,nodeGen.getNextNodeId(DEFAULT_SCOPE)))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;attachBinaryComparisonOperator;[op, exprOp]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>op</ParamName>
                    <ParamType>LessThanEqualExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BinaryComparisonOperator [exprOp=new LTOrEqualToExpr(new OperatorKey(DEFAULT_SCOPE,nodeGen.getNextNodeId(DEFAULT_SCOPE)))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;attachBinaryComparisonOperator;[op, exprOp]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>op</ParamName>
                    <ParamType>ProjectExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>POProject [exprOp]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>logToPhyMap;put;[op, exprOp]</InnerMethodInvoke>
                <InnerMethodInvoke>currentPlan;add;[exprOp]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>op</ParamName>
                    <ParamType>MapLookupExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ExpressionOperator [physOp=new POMapLookUp(new OperatorKey(DEFAULT_SCOPE,nodeGen.getNextNodeId(DEFAULT_SCOPE)))]</InnerVar>
                <InnerVar>ExpressionOperator [from=(ExpressionOperator)logToPhyMap.get(op.getMap())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>((POMapLookUp)physOp);setLookUpKey;[op.getLookupKey()]</InnerMethodInvoke>
                <InnerMethodInvoke>physOp;setResultType;[op.getType()]</InnerMethodInvoke>
                <InnerMethodInvoke>physOp;addOriginalLocation;[op.getFieldSchema().alias, op.getLocation()]</InnerMethodInvoke>
                <InnerMethodInvoke>currentPlan;add;[physOp]</InnerMethodInvoke>
                <InnerMethodInvoke>logToPhyMap;put;[op, physOp]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>op</ParamName>
                    <ParamType>org.apache.pig.newplan.logical.expression.ConstantExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ConstantExpression [ce=new ConstantExpression(new OperatorKey(DEFAULT_SCOPE,nodeGen.getNextNodeId(DEFAULT_SCOPE)))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ce;setValue;[op.getValue()]</InnerMethodInvoke>
                <InnerMethodInvoke>ce;setResultType;[op.getType()]</InnerMethodInvoke>
                <InnerMethodInvoke>currentPlan;add;[ce]</InnerMethodInvoke>
                <InnerMethodInvoke>logToPhyMap;put;[op, ce]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>op</ParamName>
                    <ParamType>CastExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>POCast [pCast=new POCast(new OperatorKey(DEFAULT_SCOPE,nodeGen.getNextNodeId(DEFAULT_SCOPE)))]</InnerVar>
                <InnerVar>ExpressionOperator [from=(ExpressionOperator)logToPhyMap.get(op.getExpression())]</InnerVar>
                <InnerVar>FuncSpec [lfSpec=op.getFuncSpec()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>pCast;addOriginalLocation;[op.getFieldSchema().alias, op.getLocation()]</InnerMethodInvoke>
                <InnerMethodInvoke>currentPlan;add;[pCast]</InnerMethodInvoke>
                <InnerMethodInvoke>logToPhyMap;put;[op, pCast]</InnerMethodInvoke>
                <InnerMethodInvoke>pCast;setResultType;[op.getType()]</InnerMethodInvoke>
                <InnerMethodInvoke>pCast;setFieldSchema;[new ResourceSchema.ResourceFieldSchema(op.getFieldSchema())]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>op</ParamName>
                    <ParamType>NotExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PONot [pNot=new PONot(new OperatorKey(DEFAULT_SCOPE,nodeGen.getNextNodeId(DEFAULT_SCOPE)))]</InnerVar>
                <InnerVar>ExpressionOperator [from=(ExpressionOperator)logToPhyMap.get(op.getExpression())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>currentPlan;add;[pNot]</InnerMethodInvoke>
                <InnerMethodInvoke>logToPhyMap;put;[op, pNot]</InnerMethodInvoke>
                <InnerMethodInvoke>pNot;setExpr;[from]</InnerMethodInvoke>
                <InnerMethodInvoke>pNot;setResultType;[op.getType()]</InnerMethodInvoke>
                <InnerMethodInvoke>pNot;setOperandType;[op.getType()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>op</ParamName>
                    <ParamType>IsNullExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>POIsNull [pIsNull=new POIsNull(new OperatorKey(DEFAULT_SCOPE,nodeGen.getNextNodeId(DEFAULT_SCOPE)))]</InnerVar>
                <InnerVar>ExpressionOperator [from=(ExpressionOperator)logToPhyMap.get(op.getExpression())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>currentPlan;add;[pIsNull]</InnerMethodInvoke>
                <InnerMethodInvoke>logToPhyMap;put;[op, pIsNull]</InnerMethodInvoke>
                <InnerMethodInvoke>pIsNull;setExpr;[from]</InnerMethodInvoke>
                <InnerMethodInvoke>pIsNull;setResultType;[op.getType()]</InnerMethodInvoke>
                <InnerMethodInvoke>pIsNull;setOperandType;[op.getExpression().getType()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>op</ParamName>
                    <ParamType>NegativeExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PONegative [pNegative=new PONegative(new OperatorKey(DEFAULT_SCOPE,nodeGen.getNextNodeId(DEFAULT_SCOPE)))]</InnerVar>
                <InnerVar>ExpressionOperator [from=(ExpressionOperator)logToPhyMap.get(op.getExpression())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>currentPlan;add;[pNegative]</InnerMethodInvoke>
                <InnerMethodInvoke>logToPhyMap;put;[op, pNegative]</InnerMethodInvoke>
                <InnerMethodInvoke>pNegative;setExpr;[from]</InnerMethodInvoke>
                <InnerMethodInvoke>pNegative;setResultType;[op.getType()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>op</ParamName>
                    <ParamType>AddExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BinaryExpressionOperator [exprOp=new Add(new OperatorKey(DEFAULT_SCOPE,nodeGen.getNextNodeId(DEFAULT_SCOPE)))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;attachBinaryExpressionOperator;[op, exprOp]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>op</ParamName>
                    <ParamType>RegexExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BinaryExpressionOperator [exprOp=new PORegexp(new OperatorKey(DEFAULT_SCOPE,nodeGen.getNextNodeId(DEFAULT_SCOPE)))]</InnerVar>
                <InnerVar>List&lt;Operator&gt; [successors=op.getPlan().getSuccessors(op)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;attachBinaryExpressionOperator;[op, exprOp]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>op</ParamName>
                    <ParamType>SubtractExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BinaryExpressionOperator [exprOp=new Subtract(new OperatorKey(DEFAULT_SCOPE,nodeGen.getNextNodeId(DEFAULT_SCOPE)))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;attachBinaryExpressionOperator;[op, exprOp]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>op</ParamName>
                    <ParamType>MultiplyExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BinaryExpressionOperator [exprOp=new Multiply(new OperatorKey(DEFAULT_SCOPE,nodeGen.getNextNodeId(DEFAULT_SCOPE)))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;attachBinaryExpressionOperator;[op, exprOp]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>op</ParamName>
                    <ParamType>DivideExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BinaryExpressionOperator [exprOp=new Divide(new OperatorKey(DEFAULT_SCOPE,nodeGen.getNextNodeId(DEFAULT_SCOPE)))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;attachBinaryExpressionOperator;[op, exprOp]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>op</ParamName>
                    <ParamType>ModExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BinaryExpressionOperator [exprOp=new Mod(new OperatorKey(DEFAULT_SCOPE,nodeGen.getNextNodeId(DEFAULT_SCOPE)))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;attachBinaryExpressionOperator;[op, exprOp]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>op</ParamName>
                    <ParamType>BinCondExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>POBinCond [exprOp=new POBinCond(new OperatorKey(DEFAULT_SCOPE,nodeGen.getNextNodeId(DEFAULT_SCOPE)))]</InnerVar>
                <InnerVar>OperatorPlan [oPlan=op.getPlan()]</InnerVar>
                <InnerVar>List&lt;Operator&gt; [successors=oPlan.getSuccessors(op)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>exprOp;setResultType;[op.getType()]</InnerMethodInvoke>
                <InnerMethodInvoke>exprOp;setCond;[(ExpressionOperator)logToPhyMap.get(op.getCondition())]</InnerMethodInvoke>
                <InnerMethodInvoke>exprOp;setLhs;[(ExpressionOperator)logToPhyMap.get(op.getLhs())]</InnerMethodInvoke>
                <InnerMethodInvoke>exprOp;setRhs;[(ExpressionOperator)logToPhyMap.get(op.getRhs())]</InnerMethodInvoke>
                <InnerMethodInvoke>currentPlan;add;[exprOp]</InnerMethodInvoke>
                <InnerMethodInvoke>logToPhyMap;put;[op, exprOp]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>op</ParamName>
                    <ParamType>UserFuncExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Object [f=PigContext.instantiateFuncFromSpec(op.getFuncSpec())]</InnerVar>
                <InnerVar>PhysicalOperator [p]</InnerVar>
                <InnerVar>List&lt;LogicalExpression&gt; [fromList=op.getArguments()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>p;setResultType;[op.getType()]</InnerMethodInvoke>
                <InnerMethodInvoke>currentPlan;add;[p]</InnerMethodInvoke>
                <InnerMethodInvoke>logToPhyMap;put;[op, p]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>op</ParamName>
                    <ParamType>DereferenceExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>POProject [exprOp=new POProject(new OperatorKey(DEFAULT_SCOPE,nodeGen.getNextNodeId(DEFAULT_SCOPE)))]</InnerVar>
                <InnerVar>PhysicalOperator [from=logToPhyMap.get(op.getReferredExpression())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>exprOp;setResultType;[op.getType()]</InnerMethodInvoke>
                <InnerMethodInvoke>exprOp;setColumns;[(ArrayList&lt;Integer&gt;)op.getBagColumns()]</InnerMethodInvoke>
                <InnerMethodInvoke>exprOp;setStar;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>logToPhyMap;put;[op, exprOp]</InnerMethodInvoke>
                <InnerMethodInvoke>currentPlan;add;[exprOp]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>