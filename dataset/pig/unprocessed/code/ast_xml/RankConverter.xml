<Class>
    <Id>963</Id>
    <Package>org.apache.pig.backend.hadoop.executionengine.spark.converter</Package>
    <ClassName>RankConverter</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>RDDConverter</SuperInterface>
        <SuperInterface>Tuple</SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>LOG</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>counts</FieldName>
            <FieldType>HashMap</FieldType>
        </Field>
        <Field>
            <FieldName>counts</FieldName>
            <FieldType>Integer</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>convert</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Tuple</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>predecessors</ParamName>
                    <ParamType>RDD&lt;Tuple&gt;</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>poRank</ParamName>
                    <ParamType>PORank</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [parallelism=SparkPigContext.get().getParallelism(predecessors,poRank)]</InnerVar>
                <InnerVar>RDD&lt;Tuple&gt; [rdd=predecessors.get(0)]</InnerVar>
                <InnerVar>JavaPairRDD&lt;Integer,Long&gt; [javaPairRdd=rdd.toJavaRDD().mapToPair(new ToPairRdd())]</InnerVar>
                <InnerVar>JavaPairRDD&lt;Integer,Iterable&lt;Long&gt;&gt; [groupedByIndex=javaPairRdd.groupByKey(parallelism)]</InnerVar>
                <InnerVar>JavaPairRDD&lt;Integer,Long&gt; [countsByIndex=groupedByIndex.mapToPair(new IndexCounters())]</InnerVar>
                <InnerVar>JavaPairRDD&lt;Integer,Long&gt; [sortedCountsByIndex=countsByIndex.sortByKey(true,parallelism)]</InnerVar>
                <InnerVar>Map&lt;Integer,Long&gt; [counts=sortedCountsByIndex.collectAsMap()]</InnerVar>
                <InnerVar>JavaRDD&lt;Tuple&gt; [finalRdd=rdd.toJavaRDD().map(new RankFunction(new HashMap&lt;Integer,Long&gt;(counts)))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>SparkUtil;assertPredecessorSize;[predecessors, poRank, 1]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>call</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Integer</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>call</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Integer</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>long [lastVaue=0L]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>RankFunction</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>counts</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>call</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Tuple</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Tuple [output=TupleFactory.getInstance().newTuple(input.getAll().size() - 2)]</InnerVar>
                <InnerVar>long [offset=calculateOffset((Integer)input.get(0))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>output;set;[0, offset + (Long)input.get(2)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>calculateOffset</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>index</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>long [offset=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>