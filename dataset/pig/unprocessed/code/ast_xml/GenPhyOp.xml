<Class>
    <Id>1233</Id>
    <Package>org.apache.pig.test.utils</Package>
    <ClassName>GenPhyOp</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>r</FieldName>
            <FieldType>Random</FieldType>
        </Field>
        <Field>
            <FieldName>GTE</FieldName>
            <FieldType>byte</FieldType>
        </Field>
        <Field>
            <FieldName>GT</FieldName>
            <FieldType>byte</FieldType>
        </Field>
        <Field>
            <FieldName>LTE</FieldName>
            <FieldType>byte</FieldType>
        </Field>
        <Field>
            <FieldName>LT</FieldName>
            <FieldType>byte</FieldType>
        </Field>
        <Field>
            <FieldName>plans</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>plans</FieldName>
            <FieldType>PhysicalPlan</FieldType>
        </Field>
        <Field>
            <FieldName>flattens</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>flattens</FieldName>
            <FieldType>Boolean</FieldType>
        </Field>
        <Field>
            <FieldName>pc</FieldName>
            <FieldType>PigContext</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>PlansAndFlattens</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>p</ParamName>
                    <ParamType>PhysicalPlan</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>f</ParamName>
                    <ParamType>Boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>exprConst</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ConstantExpression</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>ConstantExpression [ret=new ConstantExpression(new OperatorKey("",r.nextLong()))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compGreaterThanExpr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>GreaterThanExpr</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>GreaterThanExpr [ret=new GreaterThanExpr(new OperatorKey("",r.nextLong()))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compGreaterThanExpr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>GreaterThanExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lhs</ParamName>
                    <ParamType>ExpressionOperator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rhs</ParamName>
                    <ParamType>ExpressionOperator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>byte</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>GreaterThanExpr [ret=new GreaterThanExpr(new OperatorKey("",r.nextLong()))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ret;setLhs;[lhs]</InnerMethodInvoke>
                <InnerMethodInvoke>ret;setRhs;[rhs]</InnerMethodInvoke>
                <InnerMethodInvoke>ret;setOperandType;[type]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compAndExpr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>POAnd</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lhs</ParamName>
                    <ParamType>ExpressionOperator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rhs</ParamName>
                    <ParamType>ExpressionOperator</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>POAnd [ret=new POAnd(new OperatorKey("",r.nextLong()))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ret;setLhs;[lhs]</InnerMethodInvoke>
                <InnerMethodInvoke>ret;setRhs;[rhs]</InnerMethodInvoke>
                <InnerMethodInvoke>ret;setOperandType;[DataType.BOOLEAN]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>exprProject</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>POProject</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>POProject [ret=new POProject(new OperatorKey("",r.nextLong()))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>exprProject</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>POProject</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>col</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>POProject [ret=new POProject(new OperatorKey("",r.nextLong()),1,col)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compGTOrEqualToExpr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>GTOrEqualToExpr</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>GTOrEqualToExpr [ret=new GTOrEqualToExpr(new OperatorKey("",r.nextLong()))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compEqualToExpr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>EqualToExpr</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>EqualToExpr [ret=new EqualToExpr(new OperatorKey("",r.nextLong()))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compEqualToExpr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>EqualToExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lhs</ParamName>
                    <ParamType>ExpressionOperator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rhs</ParamName>
                    <ParamType>ExpressionOperator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>byte</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>EqualToExpr [ret=new EqualToExpr(new OperatorKey("",r.nextLong()))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ret;setLhs;[lhs]</InnerMethodInvoke>
                <InnerMethodInvoke>ret;setRhs;[rhs]</InnerMethodInvoke>
                <InnerMethodInvoke>ret;setOperandType;[type]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compNotEqualToExpr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>NotEqualToExpr</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>NotEqualToExpr [ret=new NotEqualToExpr(new OperatorKey("",r.nextLong()))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compIsNullExpr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>POIsNull</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>POIsNull [ret=new POIsNull(new OperatorKey("",r.nextLong()))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compLessThanExpr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>LessThanExpr</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>LessThanExpr [ret=new LessThanExpr(new OperatorKey("",r.nextLong()))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compLTOrEqualToExpr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>LTOrEqualToExpr</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>LTOrEqualToExpr [ret=new LTOrEqualToExpr(new OperatorKey("",r.nextLong()))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>topLocalRearrangeOp</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>POLocalRearrange</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>POLocalRearrange [ret=new POLocalRearrange(new OperatorKey("",r.nextLong()))]</InnerVar>
                <InnerVar>List&lt;PhysicalPlan&gt; [plans=new LinkedList&lt;PhysicalPlan&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>topGlobalRearrangeOp</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>POGlobalRearrange</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>POGlobalRearrange [ret=new POGlobalRearrange(new OperatorKey("",r.nextLong()))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>topPackageOp</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>POPackage</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>POPackage [ret=new POPackage(new OperatorKey("",r.nextLong()))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>topForEachOp</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>POForEach</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>POForEach [ret=new POForEach(new OperatorKey("",r.nextLong()))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>topUnionOp</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>POUnion</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>POUnion [ret=new POUnion(new OperatorKey("",r.nextLong()))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>topPOPartialAgg</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>POPartialAgg</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>POPartialAgg [partAgg=new POPartialAgg(getOK())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>topGenerateOpWithExPlan</MethodName>
            <MethodComment>/** 
 * creates the PlansAndFlattens struct for  generate grpCol, *.
 * @param grpCol - The column to be grouped on
 * @param sample - The sample tuple that is used to inferresult types and #projects for 
 * @return - The PlansAndFlattens struct which has the exprplanfor generate grpCol, * set.
 * @throws ExecException
 */
</MethodComment>
            <ReturnType>PlansAndFlattens</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>grpCol</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sample</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>POProject [prj1=new POProject(new OperatorKey("",r.nextLong()),-1,grpCol)]</InnerVar>
                <InnerVar>List&lt;Boolean&gt; [toBeFlattened=new LinkedList&lt;Boolean&gt;()]</InnerVar>
                <InnerVar>PhysicalPlan [plan1=new PhysicalPlan()]</InnerVar>
                <InnerVar>List&lt;PhysicalPlan&gt; [inputs=new LinkedList&lt;PhysicalPlan&gt;()]</InnerVar>
                <InnerVar>POProject [rest[]=new POProject[sample.size()]]</InnerVar>
                <InnerVar>int [i=-1]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>prj1;setResultType;[sample.getType(grpCol)]</InnerMethodInvoke>
                <InnerMethodInvoke>prj1;setOverloaded;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>toBeFlattened;add;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>plan1;add;[prj1]</InnerMethodInvoke>
                <InnerMethodInvoke>inputs;add;[plan1]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ExecException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>topGenerateOpWithExPlanLR</MethodName>
            <MethodComment>/** 
 * creates the PlansAndFlattens struct for  generate grpCol, *.
 * @param grpCol - The column to be grouped on
 * @param sample - The sample tuple that is used to inferresult types and #projects for 
 * @return - The PlansAndFlattens struct which has the exprplanfor generate grpCol, * set.
 * @throws ExecException
 * @throws PlanException 
 */
</MethodComment>
            <ReturnType>PlansAndFlattens</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>grpCol</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sample</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>POProject [prj1=new POProject(new OperatorKey("",r.nextLong()),-1,grpCol)]</InnerVar>
                <InnerVar>POCastDummy [cst=new POCastDummy(new OperatorKey("",r.nextLong()))]</InnerVar>
                <InnerVar>List&lt;Boolean&gt; [toBeFlattened=new LinkedList&lt;Boolean&gt;()]</InnerVar>
                <InnerVar>PhysicalPlan [plan1=new PhysicalPlan()]</InnerVar>
                <InnerVar>List&lt;PhysicalPlan&gt; [inputs=new LinkedList&lt;PhysicalPlan&gt;()]</InnerVar>
                <InnerVar>POProject [rest[]=new POProject[sample.size()]]</InnerVar>
                <InnerVar>POCastDummy [csts[]=new POCastDummy[sample.size()]]</InnerVar>
                <InnerVar>int [i=-1]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>prj1;setResultType;[sample.getType(grpCol)]</InnerMethodInvoke>
                <InnerMethodInvoke>prj1;setOverloaded;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>cst;setResultType;[sample.getType(grpCol)]</InnerMethodInvoke>
                <InnerMethodInvoke>toBeFlattened;add;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>plan1;add;[prj1]</InnerMethodInvoke>
                <InnerMethodInvoke>plan1;add;[cst]</InnerMethodInvoke>
                <InnerMethodInvoke>plan1;connect;[prj1, cst]</InnerMethodInvoke>
                <InnerMethodInvoke>inputs;add;[plan1]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ExecException</ExceptionType>
                <ExceptionType>PlanException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>topGenerateOpWithExPlanForFe</MethodName>
            <MethodComment>/** 
 * creates the PlansAndFlattens struct for  'generate field'.
 * @param field - The column to be generated
 * @param sample - The sample tuple that is used to inferresult type
 * @return - The PlansAndFlattens struct which has the exprplanfor 'generate field' set.
 * @throws ExecException
 */
</MethodComment>
            <ReturnType>PlansAndFlattens</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>field</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sample</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>POProject [prj1=new POProject(new OperatorKey("",r.nextLong()),-1,field)]</InnerVar>
                <InnerVar>List&lt;Boolean&gt; [toBeFlattened=new LinkedList&lt;Boolean&gt;()]</InnerVar>
                <InnerVar>PhysicalPlan [plan1=new PhysicalPlan()]</InnerVar>
                <InnerVar>List&lt;PhysicalPlan&gt; [inputs=new LinkedList&lt;PhysicalPlan&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>prj1;setResultType;[sample.getType(field)]</InnerMethodInvoke>
                <InnerMethodInvoke>prj1;setOverloaded;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>toBeFlattened;add;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>plan1;add;[prj1]</InnerMethodInvoke>
                <InnerMethodInvoke>inputs;add;[plan1]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ExecException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>topGenerateOpWithExPlanForFeFlat</MethodName>
            <MethodComment>/** 
 * creates the PlansAndFlattens struct for  'generate flatten(field)'.
 * @param field - The column to be generated
 * @param sample - The sample tuple that is used to inferresult type
 * @return - The PlansAndFlattens struct which has the exprplanfor 'generate field' set.
 * @throws ExecException
 */
</MethodComment>
            <ReturnType>PlansAndFlattens</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>field</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>POProject [prj1=new POProject(new OperatorKey("",r.nextLong()),-1,field)]</InnerVar>
                <InnerVar>List&lt;Boolean&gt; [toBeFlattened=new LinkedList&lt;Boolean&gt;()]</InnerVar>
                <InnerVar>PhysicalPlan [plan1=new PhysicalPlan()]</InnerVar>
                <InnerVar>List&lt;PhysicalPlan&gt; [inputs=new LinkedList&lt;PhysicalPlan&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>prj1;setResultType;[DataType.BAG]</InnerMethodInvoke>
                <InnerMethodInvoke>prj1;setOverloaded;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>toBeFlattened;add;[true]</InnerMethodInvoke>
                <InnerMethodInvoke>plan1;add;[prj1]</InnerMethodInvoke>
                <InnerMethodInvoke>inputs;add;[plan1]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ExecException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>topGenerateOpWithExPlanForFe</MethodName>
            <MethodComment>/** 
 * creates the PlansAndFlattens struct for  'generate field[0] field[1] ...'.
 * @param fields - The columns to be generated
 * @param sample - The sample tuple that is used to inferresult type
 * @return - The PlansAndFlattens struct which has the exprplanfor 'generate field[0] field[1]' set.
 * @throws ExecException
 * @throws PlanException 
 */
</MethodComment>
            <ReturnType>PlansAndFlattens</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fields</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sample</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>POProject[] [prj=new POProject[fields.length]]</InnerVar>
                <InnerVar>POCastDummy[] [cst=new POCastDummy[fields.length]]</InnerVar>
                <InnerVar>List&lt;Boolean&gt; [toBeFlattened=new LinkedList&lt;Boolean&gt;()]</InnerVar>
                <InnerVar>List&lt;PhysicalPlan&gt; [inputs=new LinkedList&lt;PhysicalPlan&gt;()]</InnerVar>
                <InnerVar>PhysicalPlan[] [plans=new PhysicalPlan[fields.length]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ExecException</ExceptionType>
                <ExceptionType>PlanException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>topGenerateOpWithExPlanForFe</MethodName>
            <MethodComment>/** 
 * creates the PlansAndFlattens struct for  'generate field[0] field[1] ...'. with the flatten list as specified
 * @param fields - The columns to be generated
 * @param toBeFlattened - The columns to be flattened
 * @param sample - The sample tuple that is used to inferresult type
 * @return - The PlansAndFlattens struct which has the exprplanfor 'generate field[0] field[1]' set.
 * @throws ExecException
 * @throws PlanException 
 */
</MethodComment>
            <ReturnType>PlansAndFlattens</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fields</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sample</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>toBeFlattened</ParamName>
                    <ParamType>Boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>POProject[] [prj=new POProject[fields.length]]</InnerVar>
                <InnerVar>POCastDummy[] [cst=new POCastDummy[fields.length]]</InnerVar>
                <InnerVar>List&lt;PhysicalPlan&gt; [inputs=new LinkedList&lt;PhysicalPlan&gt;()]</InnerVar>
                <InnerVar>PhysicalPlan[] [plans=new PhysicalPlan[fields.length]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ExecException</ExceptionType>
                <ExceptionType>PlanException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>topLocalRearrangeOPWithPlan</MethodName>
            <MethodComment>/** 
 * creates the POLocalRearrange operator with the given index for group by grpCol
 * @param index - The input index of this POLocalRearrange operator
 * @param grpCol - The column to be grouped on
 * @param sample - Sample tuple needed for topGenerateOpWithExPlan
 * @return - The POLocalRearrange operator
 * @throws ExecException
 */
</MethodComment>
            <ReturnType>POLocalRearrange</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>index</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>grpCol</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sample</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>POLocalRearrange [lr=topLocalRearrangeOPWithPlanPlain(index,grpCol,sample)]</InnerVar>
                <InnerVar>List&lt;PhysicalPlan&gt; [plans=lr.getPlans()]</InnerVar>
                <InnerVar>PhysicalPlan [ep=plans.get(0)]</InnerVar>
                <InnerVar>POCastDummy [cst=new POCastDummy(new OperatorKey("",r.nextLong()))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cst;setResultType;[sample.getType(grpCol)]</InnerMethodInvoke>
                <InnerMethodInvoke>ep;addAsLeaf;[cst]</InnerMethodInvoke>
                <InnerMethodInvoke>lr;setPlans;[plans]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ExecException</ExceptionType>
                <ExceptionType>PlanException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>topLocalRearrangeOPWithPlanPlain</MethodName>
            <MethodComment>/** 
 * creates the POLocalRearrange operator with the given index for group by grpCol
 * @param index - The input index of this POLocalRearrange operator
 * @param grpCol - The column to be grouped on
 * @param sample - Sample tuple needed for topGenerateOpWithExPlan
 * @return - The POLocalRearrange operator
 * @throws ExecException
 */
</MethodComment>
            <ReturnType>POLocalRearrange</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>index</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>grpCol</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sample</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>POProject [prj1=new POProject(new OperatorKey("",r.nextLong()),-1,grpCol)]</InnerVar>
                <InnerVar>PhysicalPlan [plan1=new PhysicalPlan()]</InnerVar>
                <InnerVar>List&lt;PhysicalPlan&gt; [plans=new ArrayList&lt;PhysicalPlan&gt;()]</InnerVar>
                <InnerVar>POLocalRearrange [ret=topLocalRearrangeOp()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>prj1;setResultType;[sample.getType(grpCol)]</InnerMethodInvoke>
                <InnerMethodInvoke>prj1;setOverloaded;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>plan1;add;[prj1]</InnerMethodInvoke>
                <InnerMethodInvoke>plans;add;[plan1]</InnerMethodInvoke>
                <InnerMethodInvoke>ret;setPlans;[plans]</InnerMethodInvoke>
                <InnerMethodInvoke>ret;setIndex;[index]</InnerMethodInvoke>
                <InnerMethodInvoke>ret;setResultType;[DataType.TUPLE]</InnerMethodInvoke>
                <InnerMethodInvoke>ret;setKeyType;[sample.getType(grpCol)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ExecException</ExceptionType>
                <ExceptionType>PlanException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>topForEachOPWithPlan</MethodName>
            <MethodComment>/** 
 * creates the POForEach operator for foreach A generate field
 * @param field - The column to be generated
 * @param sample - Sample tuple needed for topGenerateOpWithExPlanForFe
 * @return - The POForEach operator
 * @throws ExecException
 */
</MethodComment>
            <ReturnType>POForEach</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>field</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sample</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PlansAndFlattens [pf=topGenerateOpWithExPlanForFe(field,sample)]</InnerVar>
                <InnerVar>POForEach [ret=topForEachOp()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ret;setInputPlans;[pf.plans]</InnerMethodInvoke>
                <InnerMethodInvoke>ret;setToBeFlattened;[pf.flattens]</InnerMethodInvoke>
                <InnerMethodInvoke>ret;setResultType;[DataType.TUPLE]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ExecException</ExceptionType>
                <ExceptionType>PlanException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>topForEachOPWithPlan</MethodName>
            <MethodComment>/** 
 * creates the POForEach operator for foreach A generate field[0] field[1]
 * @param fields - The columns to be generated
 * @param sample - Sample tuple needed for topGenerateOpWithExPlanForFe
 * @return - The POForEach operator
 * @throws ExecException
 */
</MethodComment>
            <ReturnType>POForEach</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fields</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sample</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PlansAndFlattens [pf=topGenerateOpWithExPlanForFe(fields,sample)]</InnerVar>
                <InnerVar>POForEach [ret=topForEachOp()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ret;setInputPlans;[pf.plans]</InnerMethodInvoke>
                <InnerMethodInvoke>ret;setToBeFlattened;[pf.flattens]</InnerMethodInvoke>
                <InnerMethodInvoke>ret;setResultType;[DataType.TUPLE]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ExecException</ExceptionType>
                <ExceptionType>PlanException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>topForEachOPWithPlan</MethodName>
            <MethodComment>/** 
 * creates the POForEach operator for foreach A generate field[0] field[1]
 * @param fields - The columns to be generated
 * @param sample - Sample tuple needed for topGenerateOpWithExPlanForFe
 * @return - The POForEach operator
 * @throws ExecException
 */
</MethodComment>
            <ReturnType>POForEach</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fields</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sample</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>toBeFlattened</ParamName>
                    <ParamType>Boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PlansAndFlattens [pf=topGenerateOpWithExPlanForFe(fields,sample,toBeFlattened)]</InnerVar>
                <InnerVar>POForEach [ret=topForEachOp()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ret;setInputPlans;[pf.plans]</InnerMethodInvoke>
                <InnerMethodInvoke>ret;setToBeFlattened;[toBeFlattened]</InnerMethodInvoke>
                <InnerMethodInvoke>ret;setResultType;[DataType.TUPLE]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ExecException</ExceptionType>
                <ExceptionType>PlanException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>topForEachOPWithPlan</MethodName>
            <MethodComment>/** 
 * creates the POForEach operator for foreach A generate flatten(field)
 * @param fields - The columns to be generated
 * @param sample - Sample tuple needed for topGenerateOpWithExPlanForFe
 * @return - The POForEach operator
 * @throws ExecException
 */
</MethodComment>
            <ReturnType>POForEach</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>field</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PlansAndFlattens [pf=topGenerateOpWithExPlanForFeFlat(field)]</InnerVar>
                <InnerVar>POForEach [ret=topForEachOp()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ret;setInputPlans;[pf.plans]</InnerMethodInvoke>
                <InnerMethodInvoke>ret;setToBeFlattened;[pf.flattens]</InnerMethodInvoke>
                <InnerMethodInvoke>ret;setResultType;[DataType.TUPLE]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ExecException</ExceptionType>
                <ExceptionType>PlanException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>topLoadOp</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>POLoad</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>POLoad [ret=new POLoad(new OperatorKey("",r.nextLong()))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ret;setPc;[pc]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>topFilterOp</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>POFilter</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>POFilter [ret=new POFilter(new OperatorKey("",r.nextLong()))]</InnerVar>
                <InnerVar>ConstantExpression [ex=GenPhyOp.exprConst()]</InnerVar>
                <InnerVar>PhysicalPlan [pp=new PhysicalPlan()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ex;setValue;[new Boolean(true)]</InnerMethodInvoke>
                <InnerMethodInvoke>pp;add;[ex]</InnerMethodInvoke>
                <InnerMethodInvoke>ret;setPlan;[pp]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>connectedFilterOp</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>POFilter</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>PhysicalOperator</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;PhysicalOperator&gt; [ops=new ArrayList&lt;PhysicalOperator&gt;(1)]</InnerVar>
                <InnerVar>POFilter [ret=new POFilter(new OperatorKey("",r.nextLong()),ops)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ops;add;[input]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>topLimitOp</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>POLimit</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>POLimit [ret=new POLimit(new OperatorKey("",r.nextLong()))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>topFilterOpWithExPlan</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>POFilter</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lhsVal</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rhsVal</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>POFilter [ret=new POFilter(new OperatorKey("",r.nextLong()))]</InnerVar>
                <InnerVar>ConstantExpression [ce1=GenPhyOp.exprConst()]</InnerVar>
                <InnerVar>ConstantExpression [ce2=GenPhyOp.exprConst()]</InnerVar>
                <InnerVar>GreaterThanExpr [gr=GenPhyOp.compGreaterThanExpr()]</InnerVar>
                <InnerVar>PhysicalPlan [ep=new PhysicalPlan()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ce1;setValue;[lhsVal]</InnerMethodInvoke>
                <InnerMethodInvoke>ce2;setValue;[rhsVal]</InnerMethodInvoke>
                <InnerMethodInvoke>gr;setLhs;[ce1]</InnerMethodInvoke>
                <InnerMethodInvoke>gr;setRhs;[ce2]</InnerMethodInvoke>
                <InnerMethodInvoke>gr;setOperandType;[DataType.INTEGER]</InnerMethodInvoke>
                <InnerMethodInvoke>ep;add;[ce1]</InnerMethodInvoke>
                <InnerMethodInvoke>ep;add;[ce2]</InnerMethodInvoke>
                <InnerMethodInvoke>ep;add;[gr]</InnerMethodInvoke>
                <InnerMethodInvoke>ep;connect;[ce1, gr]</InnerMethodInvoke>
                <InnerMethodInvoke>ep;connect;[ce2, gr]</InnerMethodInvoke>
                <InnerMethodInvoke>ret;setPlan;[ep]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ExecException</ExceptionType>
                <ExceptionType>PlanException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>topFilterOpWithProj</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>POFilter</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>col</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rhsVal</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>POFilter [ret=new POFilter(new OperatorKey("",r.nextLong()))]</InnerVar>
                <InnerVar>POProject [proj=exprProject()]</InnerVar>
                <InnerVar>ConstantExpression [ce2=GenPhyOp.exprConst()]</InnerVar>
                <InnerVar>GreaterThanExpr [gr=GenPhyOp.compGreaterThanExpr()]</InnerVar>
                <InnerVar>PhysicalPlan [ep=new PhysicalPlan()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>proj;setResultType;[DataType.INTEGER]</InnerMethodInvoke>
                <InnerMethodInvoke>proj;setColumn;[col]</InnerMethodInvoke>
                <InnerMethodInvoke>proj;setOverloaded;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>ce2;setValue;[rhsVal]</InnerMethodInvoke>
                <InnerMethodInvoke>gr;setLhs;[proj]</InnerMethodInvoke>
                <InnerMethodInvoke>gr;setRhs;[ce2]</InnerMethodInvoke>
                <InnerMethodInvoke>gr;setOperandType;[DataType.INTEGER]</InnerMethodInvoke>
                <InnerMethodInvoke>ep;add;[proj]</InnerMethodInvoke>
                <InnerMethodInvoke>ep;add;[ce2]</InnerMethodInvoke>
                <InnerMethodInvoke>ep;add;[gr]</InnerMethodInvoke>
                <InnerMethodInvoke>ep;connect;[proj, gr]</InnerMethodInvoke>
                <InnerMethodInvoke>ep;connect;[ce2, gr]</InnerMethodInvoke>
                <InnerMethodInvoke>ret;setPlan;[ep]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ExecException</ExceptionType>
                <ExceptionType>PlanException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>topFilterOpWithProj</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>POFilter</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>col</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rhsVal</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>CompType</ParamName>
                    <ParamType>byte</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>POFilter [ret=new POFilter(new OperatorKey("",r.nextLong()))]</InnerVar>
                <InnerVar>POProject [proj=exprProject()]</InnerVar>
                <InnerVar>ConstantExpression [ce2=GenPhyOp.exprConst()]</InnerVar>
                <InnerVar>BinaryComparisonOperator [cop=null]</InnerVar>
                <InnerVar>PhysicalPlan [ep=new PhysicalPlan()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>proj;setResultType;[DataType.INTEGER]</InnerMethodInvoke>
                <InnerMethodInvoke>proj;setColumn;[col]</InnerMethodInvoke>
                <InnerMethodInvoke>proj;setOverloaded;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>ce2;setValue;[rhsVal]</InnerMethodInvoke>
                <InnerMethodInvoke>cop;setLhs;[proj]</InnerMethodInvoke>
                <InnerMethodInvoke>cop;setRhs;[ce2]</InnerMethodInvoke>
                <InnerMethodInvoke>cop;setOperandType;[DataType.INTEGER]</InnerMethodInvoke>
                <InnerMethodInvoke>ep;add;[proj]</InnerMethodInvoke>
                <InnerMethodInvoke>ep;add;[ce2]</InnerMethodInvoke>
                <InnerMethodInvoke>ep;add;[cop]</InnerMethodInvoke>
                <InnerMethodInvoke>ep;connect;[proj, cop]</InnerMethodInvoke>
                <InnerMethodInvoke>ep;connect;[ce2, cop]</InnerMethodInvoke>
                <InnerMethodInvoke>ret;setPlan;[ep]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ExecException</ExceptionType>
                <ExceptionType>PlanException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>topFilterOpWithProjWithCast</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>POFilter</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>col</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rhsVal</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>CompType</ParamName>
                    <ParamType>byte</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>POFilter [ret=new POFilter(new OperatorKey("",r.nextLong()))]</InnerVar>
                <InnerVar>POProject [proj=exprProject()]</InnerVar>
                <InnerVar>ConstantExpression [ce2=GenPhyOp.exprConst()]</InnerVar>
                <InnerVar>BinaryComparisonOperator [cop=null]</InnerVar>
                <InnerVar>POCastDummy [cst=new POCastDummy(new OperatorKey("",r.nextLong()))]</InnerVar>
                <InnerVar>PhysicalPlan [ep=new PhysicalPlan()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>proj;setResultType;[DataType.INTEGER]</InnerMethodInvoke>
                <InnerMethodInvoke>proj;setColumn;[col]</InnerMethodInvoke>
                <InnerMethodInvoke>proj;setOverloaded;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>ce2;setValue;[rhsVal]</InnerMethodInvoke>
                <InnerMethodInvoke>cop;setLhs;[cst]</InnerMethodInvoke>
                <InnerMethodInvoke>cop;setRhs;[ce2]</InnerMethodInvoke>
                <InnerMethodInvoke>cop;setOperandType;[DataType.INTEGER]</InnerMethodInvoke>
                <InnerMethodInvoke>ep;add;[cst]</InnerMethodInvoke>
                <InnerMethodInvoke>ep;add;[proj]</InnerMethodInvoke>
                <InnerMethodInvoke>ep;add;[ce2]</InnerMethodInvoke>
                <InnerMethodInvoke>ep;add;[cop]</InnerMethodInvoke>
                <InnerMethodInvoke>ep;connect;[proj, cst]</InnerMethodInvoke>
                <InnerMethodInvoke>ep;connect;[cst, cop]</InnerMethodInvoke>
                <InnerMethodInvoke>ep;connect;[ce2, cop]</InnerMethodInvoke>
                <InnerMethodInvoke>ret;setPlan;[ep]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ExecException</ExceptionType>
                <ExceptionType>PlanException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>topReadOp</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PORead</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>bag</ParamName>
                    <ParamType>DataBag</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PORead [ret=new PORead(new OperatorKey("",r.nextLong()),bag)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>dummyPigStorageOp</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>POStore</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>POStore [ret=new POStore(new OperatorKey("",r.nextLong()))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ret;setSFile;[new FileSpec("DummyFil",new FuncSpec(PigStorage.class.getName() + "()"))]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>topStoreOp</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>POStore</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>POStore [ret=new POStore(new OperatorKey("",r.nextLong()))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setR</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>r</ParamName>
                    <ParamType>Random</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>MROp</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>MapReduceOper</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>MapReduceOper [ret=new MapReduceOper(new OperatorKey("",r.nextLong()))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTempFileSpec</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>FileSpec</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>topSplitOp</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>POSplit</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>POSplit [ret=new POSplit(new OperatorKey("",r.nextLong()))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ret;setSplitStore;[getTempFileSpec()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>grpChain</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PhysicalPlan</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>PhysicalPlan [grpChain=new PhysicalPlan()]</InnerVar>
                <InnerVar>POLocalRearrange [lr=GenPhyOp.topLocalRearrangeOp()]</InnerVar>
                <InnerVar>POGlobalRearrange [gr=GenPhyOp.topGlobalRearrangeOp()]</InnerVar>
                <InnerVar>POPackage [pk=GenPhyOp.topPackageOp()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>grpChain;add;[lr]</InnerMethodInvoke>
                <InnerMethodInvoke>grpChain;add;[gr]</InnerMethodInvoke>
                <InnerMethodInvoke>grpChain;add;[pk]</InnerMethodInvoke>
                <InnerMethodInvoke>grpChain;connect;[lr, gr]</InnerMethodInvoke>
                <InnerMethodInvoke>grpChain;connect;[gr, pk]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ExecException</ExceptionType>
                <ExceptionType>PlanException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>loadedGrpChain</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PhysicalPlan</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>PhysicalPlan [ret=new PhysicalPlan()]</InnerVar>
                <InnerVar>POLoad [ld=GenPhyOp.topLoadOp()]</InnerVar>
                <InnerVar>POLocalRearrange [lr=GenPhyOp.topLocalRearrangeOp()]</InnerVar>
                <InnerVar>POGlobalRearrange [gr=GenPhyOp.topGlobalRearrangeOp()]</InnerVar>
                <InnerVar>POPackage [pk=GenPhyOp.topPackageOp()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ret;add;[ld]</InnerMethodInvoke>
                <InnerMethodInvoke>ret;add;[lr]</InnerMethodInvoke>
                <InnerMethodInvoke>ret;add;[gr]</InnerMethodInvoke>
                <InnerMethodInvoke>ret;add;[pk]</InnerMethodInvoke>
                <InnerMethodInvoke>ret;connect;[ld, lr]</InnerMethodInvoke>
                <InnerMethodInvoke>ret;connect;[lr, gr]</InnerMethodInvoke>
                <InnerMethodInvoke>ret;connect;[gr, pk]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ExecException</ExceptionType>
                <ExceptionType>PlanException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>loadedFilter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PhysicalPlan</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>PhysicalPlan [ret=new PhysicalPlan()]</InnerVar>
                <InnerVar>POLoad [ld=GenPhyOp.topLoadOp()]</InnerVar>
                <InnerVar>POFilter [fl=GenPhyOp.topFilterOp()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ret;add;[ld]</InnerMethodInvoke>
                <InnerMethodInvoke>ret;add;[fl]</InnerMethodInvoke>
                <InnerMethodInvoke>ret;connect;[ld, fl]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ExecException</ExceptionType>
                <ExceptionType>PlanException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>topForEachOPWithUDF</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>POForEach</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clsName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;PhysicalPlan&gt; [ep4s=new ArrayList&lt;PhysicalPlan&gt;()]</InnerVar>
                <InnerVar>List&lt;Boolean&gt; [flattened3=new ArrayList&lt;Boolean&gt;()]</InnerVar>
                <InnerVar>POForEach [fe3=new POForEach(new OperatorKey("",r.nextLong()),1,ep4s,flattened3)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>fe3;setResultType;[DataType.TUPLE]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>PlanException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>arithPlan</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PhysicalPlan</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>PhysicalPlan [ep=new PhysicalPlan()]</InnerVar>
                <InnerVar>ConstantExpression [ce[]=new ConstantExpression[7]]</InnerVar>
                <InnerVar>Add [ad=new Add(getOK())]</InnerVar>
                <InnerVar>Divide [div=new Divide(getOK())]</InnerVar>
                <InnerVar>Subtract [sub=new Subtract(getOK())]</InnerVar>
                <InnerVar>Mod [mod=new Mod(getOK())]</InnerVar>
                <InnerVar>Multiply [mul1=new Multiply(getOK())]</InnerVar>
                <InnerVar>Multiply [mul2=new Multiply(getOK())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ep;add;[ad]</InnerMethodInvoke>
                <InnerMethodInvoke>ep;connect;[ce[0], ad]</InnerMethodInvoke>
                <InnerMethodInvoke>ep;connect;[ce[1], ad]</InnerMethodInvoke>
                <InnerMethodInvoke>ep;add;[div]</InnerMethodInvoke>
                <InnerMethodInvoke>ep;connect;[ce[2], div]</InnerMethodInvoke>
                <InnerMethodInvoke>ep;connect;[ce[3], div]</InnerMethodInvoke>
                <InnerMethodInvoke>ep;add;[sub]</InnerMethodInvoke>
                <InnerMethodInvoke>ep;connect;[ad, sub]</InnerMethodInvoke>
                <InnerMethodInvoke>ep;connect;[div, sub]</InnerMethodInvoke>
                <InnerMethodInvoke>ep;add;[mod]</InnerMethodInvoke>
                <InnerMethodInvoke>ep;connect;[ce[4], mod]</InnerMethodInvoke>
                <InnerMethodInvoke>ep;connect;[ce[5], mod]</InnerMethodInvoke>
                <InnerMethodInvoke>ep;add;[mul1]</InnerMethodInvoke>
                <InnerMethodInvoke>ep;connect;[mod, mul1]</InnerMethodInvoke>
                <InnerMethodInvoke>ep;connect;[ce[6], mul1]</InnerMethodInvoke>
                <InnerMethodInvoke>ep;add;[mul2]</InnerMethodInvoke>
                <InnerMethodInvoke>ep;connect;[sub, mul2]</InnerMethodInvoke>
                <InnerMethodInvoke>ep;connect;[mul1, mul2]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>PlanException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOK</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>OperatorKey</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setPc</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pc</ParamName>
                    <ParamType>PigContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>