<Class>
    <Id>414</Id>
    <Package>org.apache.pig.impl.streaming</Package>
    <ClassName>ExecutableManager</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ExecutableManager  /** 
 * {@link ExecutableManager} manages an external executable which processes datain a Pig query. The &lt;code&gt;ExecutableManager&lt;/code&gt; is responsible for startup/teardown of the external process and also for managing it. It feeds input records to the executable via it's &lt;code&gt;stdin&lt;/code&gt;, collects the output records from the &lt;code&gt;stdout&lt;/code&gt; and also diagnostic information from the &lt;code&gt;stdout&lt;/code&gt;.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>LOG</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>SUCCESS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>EOS_RESULT</FieldName>
            <FieldType>Result</FieldType>
        </Field>
        <Field>
            <FieldName>command</FieldName>
            <FieldType>StreamingCommand</FieldType>
        </Field>
        <Field>
            <FieldName>process</FieldName>
            <FieldType>Process</FieldType>
        </Field>
        <Field>
            <FieldName>exitCode</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>stdin</FieldName>
            <FieldType>DataOutputStream</FieldType>
        </Field>
        <Field>
            <FieldName>stdinThread</FieldName>
            <FieldType>ProcessInputThread</FieldType>
        </Field>
        <Field>
            <FieldName>stdoutThread</FieldName>
            <FieldType>ProcessOutputThread</FieldType>
        </Field>
        <Field>
            <FieldName>stdout</FieldName>
            <FieldType>InputStream</FieldType>
        </Field>
        <Field>
            <FieldName>stderrThread</FieldName>
            <FieldType>ProcessErrorThread</FieldType>
        </Field>
        <Field>
            <FieldName>stderr</FieldName>
            <FieldType>InputStream</FieldType>
        </Field>
        <Field>
            <FieldName>inputHandler</FieldName>
            <FieldType>InputHandler</FieldType>
        </Field>
        <Field>
            <FieldName>outputHandler</FieldName>
            <FieldType>OutputHandler</FieldType>
        </Field>
        <Field>
            <FieldName>inputRecords</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>inputBytes</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>outputRecords</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>outputBytes</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>outerrThreadsError</FieldName>
            <FieldType>Throwable</FieldType>
        </Field>
        <Field>
            <FieldName>poStream</FieldName>
            <FieldType>POStream</FieldType>
        </Field>
        <Field>
            <FieldName>fileInputThread</FieldName>
            <FieldType>ProcessInputThread</FieldType>
        </Field>
        <Field>
            <FieldName>inputHandler</FieldName>
            <FieldType>InputHandler</FieldType>
        </Field>
        <Field>
            <FieldName>poStream</FieldName>
            <FieldType>POStream</FieldType>
        </Field>
        <Field>
            <FieldName>udfContext</FieldName>
            <FieldType>UDFContext</FieldType>
        </Field>
        <Field>
            <FieldName>binaryInputQueue</FieldName>
            <FieldType>BlockingQueue</FieldType>
        </Field>
        <Field>
            <FieldName>binaryInputQueue</FieldName>
            <FieldType>Result</FieldType>
        </Field>
        <Field>
            <FieldName>outputHandler</FieldName>
            <FieldType>OutputHandler</FieldType>
        </Field>
        <Field>
            <FieldName>binaryOutputQueue</FieldName>
            <FieldType>BlockingQueue</FieldType>
        </Field>
        <Field>
            <FieldName>binaryOutputQueue</FieldName>
            <FieldType>Result</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ExecutableManager</MethodName>
            <MethodComment>/** 
 * Create a new  {@link ExecutableManager}.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>configure</MethodName>
            <MethodComment>/** 
 * Configure and initialize the  {@link ExecutableManager}.
 * @param stream POStream operator
 * @throws IOException
 * @throws ExecException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>stream</ParamName>
                    <ParamType>POStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>ExecException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>close</MethodName>
            <MethodComment>/** 
 * Close and cleanup the  {@link ExecutableManager}.
 * @throws IOException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>inputHandler;close;[process]</InnerMethodInvoke>
                <InnerMethodInvoke>LOG;debug;["Process exited with: " + exitCode]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>killProcess</MethodName>
            <MethodComment>/** 
 * Helper function to close input and output streams to the process and kill it
 * @param process the process to be killed
 * @throws IOException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>process</ParamName>
                    <ParamType>Process</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>exec</MethodName>
            <MethodComment>/** 
 * Start execution of the external process. This takes care of setting up the environment of the process and also starts ProcessErrorThread to process the &lt;code&gt;stderr&lt;/code&gt; of the managed process.
 * @throws IOException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>ProcessBuilder [processBuilder=StreamingUtil.createProcess(this.command)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>LOG;debug;["Started the process for command: " + command]</InnerMethodInvoke>
                <InnerMethodInvoke>stderrThread;start;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment>/** 
 * Start execution of the  {@link ExecutableManager}.
 * @throws IOException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;exec;[]</InnerMethodInvoke>
                <InnerMethodInvoke>inputHandler;bindTo;[stdin]</InnerMethodInvoke>
                <InnerMethodInvoke>stdinThread;start;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ProcessInputThread</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>inputHandler</ParamName>
                    <ParamType>InputHandler</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>poStream</ParamName>
                    <ParamType>POStream</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>udfContext</ParamName>
                    <ParamType>UDFContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setDaemon;[true]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sendOutput</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>binaryOutputQueue</ParamName>
                    <ParamType>Result</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>res</ParamName>
                    <ParamType>Result</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ProcessOutputThread</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>outputHandler</ParamName>
                    <ParamType>OutputHandler</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>poStream</ParamName>
                    <ParamType>POStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setDaemon;[true]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>processOutput</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Result [res=new Result()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;sendOutput;[binaryOutputQueue, res]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>processError</MethodName>
            <MethodComment>/** 
 * Workhorse to process the stderr stream of the managed process. By default &lt;code&gt;ExecuatbleManager&lt;/code&gt; just sends out the received error message to the &lt;code&gt;stderr&lt;/code&gt; of itself.
 * @param error error message from the managed process.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>error</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>System.err;print;[error]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ProcessErrorThread</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setDaemon;[true]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>