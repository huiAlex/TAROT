<Class>
    <Id>722</Id>
    <Package>org.apache.pig.backend.hadoop.executionengine.physicalLayer.util</Package>
    <ClassName>MonitoredUDFExecutor</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Serializable</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>MonitoredUDFExecutor  /** 
 * MonitoredUDF is used to watch execution of a UDF, and kill it if the UDF takes an exceedingly long time. Null is returned if the UDF times out. Optionally, UDFs can implement the provided interfaces to provide custom logic for handling errors and default values.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>exec</FieldName>
            <FieldType>ListeningExecutorService</FieldType>
        </Field>
        <Field>
            <FieldName>timeUnit</FieldName>
            <FieldType>TimeUnit</FieldType>
        </Field>
        <Field>
            <FieldName>duration</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>defaultValue</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>evalFunc</FieldName>
            <FieldType>EvalFunc</FieldType>
        </Field>
        <Field>
            <FieldName>closure</FieldName>
            <FieldType>Function</FieldType>
        </Field>
        <Field>
            <FieldName>closure</FieldName>
            <FieldType>Tuple</FieldType>
        </Field>
        <Field>
            <FieldName>errorCallback</FieldName>
            <FieldType>Class</FieldType>
        </Field>
        <Field>
            <FieldName>errorCallback</FieldName>
            <FieldType>? extends ErrorCallback</FieldType>
        </Field>
        <Field>
            <FieldName>errorHandler</FieldName>
            <FieldType>Method</FieldType>
        </Field>
        <Field>
            <FieldName>timeoutHandler</FieldName>
            <FieldType>Method</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>MonitoredUDFExecutor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>udf</ParamName>
                    <ParamType>EvalFunc</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MonitoredUDF [anno=udf.getClass().getAnnotation(MonitoredUDF.class)]</InnerVar>
                <InnerVar>Type [retType=udf.getReturnType()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>apply</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDefaultValue</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>anno</ParamName>
                    <ParamType>MonitoredUDF</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>retType</ParamName>
                    <ParamType>Type</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>terminate</MethodName>
            <MethodComment>/** 
 * This method *MUST* be called in the finish by POUserFunc. Though we do use an ExitingExecutorService just in case.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>exec;shutdownNow;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>handleError</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>evalFunc</ParamName>
                    <ParamType>EvalFunc</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>e</ParamName>
                    <ParamType>Exception</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PigStatusReporter [reporter=PigStatusReporter.getInstance()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>evalFunc.getLogger();error;[e]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>handleTimeout</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>evalFunc</ParamName>
                    <ParamType>EvalFunc</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>e</ParamName>
                    <ParamType>Exception</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PigStatusReporter [reporter=PigStatusReporter.getInstance()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>evalFunc.getLogger();error;[e]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>monitorExec</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CheckedFuture&lt;Object,Exception&gt; [f=Futures.makeChecked(exec.submit(new Callable&lt;Object&gt;(){
  @Override public Object call() throws Exception {
    return closure.apply(input);
  }
}
),new Function&lt;Exception,Exception&gt;(){
  @Override public Exception apply(  Exception e){
    return e;
  }
}
)]</InnerVar>
                <InnerVar>Object [result=defaultValue]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>call</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>apply</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Exception</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>e</ParamName>
                    <ParamType>Exception</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>