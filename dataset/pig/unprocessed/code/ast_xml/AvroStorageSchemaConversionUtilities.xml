<Class>
    <Id>714</Id>
    <Package>org.apache.pig.impl.util.avro</Package>
    <ClassName>AvroStorageSchemaConversionUtilities</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>AvroStorageSchemaConversionUtilities  /** 
 * Static methods for converting from Avro Schema object to Pig Schema objects, and vice versa.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>LOG</FieldName>
            <FieldType>Log</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getPigType</MethodName>
            <MethodComment>/** 
 * Determines the pig object type of the Avro schema.
 * @param s The avro schema for which to determine the type
 * @return the byte representing the schema type
 * @throws ExecException
 * @see org.apache.avro.Schema.Type
 */
</MethodComment>
            <ReturnType>byte</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>Schema</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ExecException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isUnionOfSimpleTypes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>Schema</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;Schema&gt; [types=s.getTypes()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>avroSchemaToResourceSchema</MethodName>
            <MethodComment>/** 
 * Translates an Avro schema to a Resource Schema (for Pig).
 * @param s The avro schema for which to determine the type
 * @param allowRecursiveSchema Flag indicating whether tothrow an error if a recursive schema definition is found
 * @throws IOException
 * @return the corresponding pig schema
 */
</MethodComment>
            <ReturnType>ResourceSchema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>Schema</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>allowRecursiveSchema</ParamName>
                    <ParamType>Boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fieldToResourceFieldSchema</MethodName>
            <MethodComment>/** 
 * Translates a field schema (avro) to a resource field schema (pig).
 * @param f The avro schema field for which to determine the type
 * @param namesInStack Set of already defined object names
 * @param alreadyDefinedSchemas Map of schema names to resourceschema objects
 * @param allowRecursiveSchema controls whether to throw an erro if the schema is recursive
 * @throws IOException
 * @return the corresponding pig resource schema field
 */
</MethodComment>
            <ReturnType>ResourceSchema.ResourceFieldSchema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>f</ParamName>
                    <ParamType>Field</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>schemasInStack</ParamName>
                    <ParamType>Schema</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>alreadyDefinedSchemas</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>allowRecursiveSchema</ParamName>
                    <ParamType>Boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ResourceSchema.ResourceFieldSchema [rf=new ResourceSchema.ResourceFieldSchema()]</InnerVar>
                <InnerVar>Schema [fieldSchema=f.schema()]</InnerVar>
                <InnerVar>byte [pigType=getPigType(fieldSchema)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rf;setName;[f.name()]</InnerMethodInvoke>
                <InnerMethodInvoke>rf;setType;[pigType]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>avroSchemaToResourceSchema</MethodName>
            <MethodComment>/** 
 * Translates an Avro schema to a Resource Schema (for Pig). Internal method.
 * @param s The avro schema for which to determine the type
 * @param namesInStack Set of already defined object names
 * @param alreadyDefinedSchemas Map of schema names to resourceschema objects
 * @param allowRecursiveSchema controls whether to throw an errorif the schema is recursive
 * @throws IOException
 * @return the corresponding pig schema
 */
</MethodComment>
            <ReturnType>ResourceSchema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>Schema</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>schemasInStack</ParamName>
                    <ParamType>Schema</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>alreadyDefinedSchemas</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>allowRecursiveSchema</ParamName>
                    <ParamType>Boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ResourceSchema.ResourceFieldSchema[] [resourceFields=null]</InnerVar>
                <InnerVar>ResourceSchema [rs=new ResourceSchema()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rs;setFields;[resourceFields]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>resourceSchemaToAvroSchema</MethodName>
            <MethodComment>/** 
 * Translated a ResourceSchema to an Avro Schema.
 * @param rs Input schema.
 * @param recordName Record name
 * @param recordNameSpace Namespace
 * @param definedRecordNames Map of already defined record namesto schema objects
 * @return the translated schema
 * @throws IOException
 */
</MethodComment>
            <ReturnType>Schema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rs</ParamName>
                    <ParamType>ResourceSchema</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>recordName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>recordNameSpace</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>definedRecordNames</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>doubleColonsToDoubleUnderscores</ParamName>
                    <ParamType>Boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;Schema.Field&gt; [fields=new ArrayList&lt;Schema.Field&gt;()]</InnerVar>
                <InnerVar>Schema [newSchema=Schema.createRecord(recordName,null,recordNameSpace,false)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toAvroName</MethodName>
            <MethodComment>/** 
 * Translates a name in a pig schema to an acceptable Avro name, or throws an error if the name can't be translated.
 * @param name The variable name to translate.
 * @param doubleColonsToDoubleUnderscores Indicates whether to translatedouble colons to underscores or throw an error if they are encountered.
 * @return A name usable by Avro.
 * @throws IOException If the name is not compatible with Avro.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>doubleColonsToDoubleUnderscores</ParamName>
                    <ParamType>Boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createNullableUnion</MethodName>
            <MethodComment>/** 
 * Returns a Union Schema composed of  {@in} and null.
 * @param in the schema to combine with null
 * @return the new union schema
 */
</MethodComment>
            <ReturnType>Schema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>in</ParamName>
                    <ParamType>Schema</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createNullableUnion</MethodName>
            <MethodComment>/** 
 * Returns a Union Schema composed of  {@in} and null.
 * @param t the avro raw type to combine with null
 * @return the new union schema
 */
</MethodComment>
            <ReturnType>Schema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Type</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>resourceFieldSchemaToAvroSchema</MethodName>
            <MethodComment>/** 
 * Creates a new Avro schema object from the input ResouceSchema.
 * @param name object name
 * @param nameSpace namespace for avro object
 * @param type type of avro object
 * @param description description for new avro object
 * @param schema pig schema for the object
 * @param definedRecordNames already defined record names
 * @param doubleColonsToDoubleUnderscores whether to translate doublecolons in Pig  names to underscores in avro names.
 * @return the avro schema object
 * @throws IOException If there is a translation error.
 */
</MethodComment>
            <ReturnType>Schema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nameSpace</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>byte</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>description</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>schema</ParamName>
                    <ParamType>ResourceSchema</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>definedRecordNames</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>doubleColonsToDoubleUnderscores</ParamName>
                    <ParamType>Boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isNullableUnion</MethodName>
            <MethodComment>/** 
 * Checks to see if an avro schema is a combination of null and another object.
 * @param s The object to check
 * @return whether it's a nullable union
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>Schema</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeSimpleUnion</MethodName>
            <MethodComment>/** 
 * Given an input schema that is a union of an avro schema and null (or just a union with one type), return the avro schema.
 * @param s The input schema object
 * @return The non-null part of the union
 */
</MethodComment>
            <ReturnType>Schema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>Schema</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newSchemaFromRequiredFieldList</MethodName>
            <MethodComment>/** 
 * Takes an Avro Schema and a Pig RequiredFieldList and returns a new schema with only the requried fields, or no if the function can't extract only those fields. Useful for push down projections.
 * @param oldSchema The avro schema from which to extract the schema
 * @param rfl the Pig required field list
 * @return the new schema, or null
 */
</MethodComment>
            <ReturnType>Schema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>oldSchema</ParamName>
                    <ParamType>Schema</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rfl</ParamName>
                    <ParamType>RequiredFieldList</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newSchemaFromRequiredFieldList</MethodName>
            <MethodComment>/** 
 * Takes an Avro Schema and a Pig RequiredFieldList and returns a new schema with only the required fields, or no if the function can't extract only those fields. Useful for push down projections.
 * @param oldSchema The avro schema from which to extract the schema
 * @param rfl List of required fields
 * @return the new schema
 */
</MethodComment>
            <ReturnType>Schema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>oldSchema</ParamName>
                    <ParamType>Schema</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rfl</ParamName>
                    <ParamType>RequiredField</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;Schema.Field&gt; [fields=Lists.newArrayList()]</InnerVar>
                <InnerVar>Schema [newSchema=Schema.createRecord(oldSchema.getName(),"subset of fields from " + oldSchema.getName() + "; "+ oldSchema.getDoc(),oldSchema.getNamespace(),false)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>newSchema;setFields;[fields]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>