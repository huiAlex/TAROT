<Class>
    <Id>1103</Id>
    <Package>org.apache.pig.backend.executionengine</Package>
    <ClassName>ExecJob</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ExecJob  /** 
 * Abstraction on a job that the execution engine runs. It allows the front-end to retrieve information on job status and manage a running job.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>PROGRESS_KEY</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getStatus</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>JOB_STATUS</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasCompleted</MethodName>
            <MethodComment>/** 
 * true is the physical plan has executed successfully and results are ready to be retrieved
 * @return true if execution has completed, false otherwise.
 * @throws ExecException
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>ExecException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getResults</MethodName>
            <MethodComment>/** 
 * if query has executed successfully we want to retrieve the results via iterating over them. 
 * @return iterator for resulting tuples
 * @throws ExecException
 */
</MethodComment>
            <ReturnType>Tuple</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>ExecException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAlias</MethodName>
            <MethodComment>/** 
 * Returns the alias of relation generated by this job
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>ExecException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getConfiguration</MethodName>
            <MethodComment>/** 
 * Get configuration information
 * @return configuration information for the execution engine
 */
</MethodComment>
            <ReturnType>Properties</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStatistics</MethodName>
            <MethodComment>/** 
 * Can be information about the state (not submitted, e.g. the execute method has not been called yet; not running, e.g. execute has been issued,  but job is waiting; running...; completed; aborted...; progress information
 * @return statistics relevant to the execution engine
 */
</MethodComment>
            <ReturnType>PigStats</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPOStore</MethodName>
            <MethodComment>/** 
 * @return {@link POStore} object associated with the store 
 */
</MethodComment>
            <ReturnType>POStore</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>completionNotification</MethodName>
            <MethodComment>/** 
 * hook for asynchronous notification of job completion pushed from the back-end
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cookie</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>kill</MethodName>
            <MethodComment>/** 
 * Kills current job.
 * @throws ExecException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>ExecException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLogs</MethodName>
            <MethodComment>/** 
 * Collecting various forms of outputs
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>log</ParamName>
                    <ParamType>OutputStream</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>ExecException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSTDOut</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>OutputStream</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>ExecException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSTDError</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>error</ParamName>
                    <ParamType>OutputStream</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>ExecException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getException</MethodName>
            <MethodComment>/** 
 * Get exceptions that happened during execution
 */
</MethodComment>
            <ReturnType>Exception</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>