<Class>
    <Id>827</Id>
    <Package>org.apache.pig.impl.builtin</Package>
    <ClassName>PartitionSkewedKeys</ClassName>
    <SuperClass>EvalFunc</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>PartitionSkewedKeys  /** 
 * Partition reducers for skewed keys. This is used in skewed join during sampling process. It figures out how many reducers required to process a skewed key without causing spill and allocate this number of reducers to this key. This UDF outputs a map which contains 2 keys: &lt;li&gt;&amp;quot;totalreducers&amp;quot;: the value is an integer wich indicates the number of total reducers for this join job &lt;/li&gt; &lt;li&gt;&amp;quot;partition.list&amp;quot;: the value is a bag which contains a list of tuples with each tuple representing partitions for a skewed key. The tuple has format of &amp;lt;join key&amp;gt;,&amp;lt;min index of reducer&amp;gt;, &amp;lt;max index of reducer&amp;gt; &lt;/li&gt; For example, a join job configures 10 reducers, and the sampling process finds out 2 skewed keys, &amp;quot;swpv&amp;quot; needs 4 reducers and &amp;quot;swps&amp;quot; needs 2 reducers. The output file would be like following: {totalreducers=10, partition.list={(swpv,0,3), (swps,4,5)}} The name of this file is set into next MR job which does the actual join. That job uses this information to partition skewed keys properly
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>PARTITION_LIST</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>TOTAL_REDUCERS</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>DEFAULT_PERCENT_MEMUSAGE</FieldName>
            <FieldType>float</FieldType>
        </Field>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>mBagFactory</FieldName>
            <FieldType>BagFactory</FieldType>
        </Field>
        <Field>
            <FieldName>mTupleFactory</FieldName>
            <FieldType>TupleFactory</FieldType>
        </Field>
        <Field>
            <FieldName>currentIndex_</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>totalMemory_</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>totalSampleCount_</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>heapPercentage_</FieldName>
            <FieldType>double</FieldType>
        </Field>
        <Field>
            <FieldName>totalReducers_</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>tupleMCount_</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>PartitionSkewedKeys</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PartitionSkewedKeys</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>exec</MethodName>
            <MethodComment>/** 
 * first field in the input tuple is the number of reducers second field is the *sorted* bag of samples this should be called only once
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>in</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Map&lt;String,Object&gt; [output=new HashMap&lt;String,Object&gt;()]</InnerVar>
                <InnerVar>ArrayList&lt;Tuple&gt; [reducerList=new ArrayList&lt;Tuple&gt;()]</InnerVar>
                <InnerVar>Tuple [currentTuple=null]</InnerVar>
                <InnerVar>long [count=0]</InnerVar>
                <InnerVar>long [totalSampleMSize=0]</InnerVar>
                <InnerVar>long [totalInputRows=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>log;info;["Maximum of available memory is " + totalMemory_]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>calculateReducers</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Tuple</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>currentTuple</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>count</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>totalMSize</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>totalTuples</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>double [avgM=totalMSize / (double)count]</InnerVar>
                <InnerVar>long [tupleMCount=(tupleMCount_ &lt;= 0) ? (long)(totalMemory_ / avgM) : tupleMCount_]</InnerVar>
                <InnerVar>long [keyTupleCount=(long)(((double)count / totalSampleCount_) * totalTuples)]</InnerVar>
                <InnerVar>int [redCount=(int)Math.round(Math.ceil((double)keyTupleCount / tupleMCount))]</InnerVar>
                <InnerVar>Tuple [t=this.mTupleFactory.newTuple(currentTuple.size())]</InnerVar>
                <InnerVar>int [i=0]</InnerVar>
                <InnerVar>Pair&lt;Tuple,Integer&gt; [p=new Pair&lt;Tuple,Integer&gt;(t,redCount)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMemorySize</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [s=t.size()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasSameKey</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t1</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>t2</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [sz1=t1 == null ? 0 : t1.size()]</InnerVar>
                <InnerVar>int [sz2=t2 == null ? 0 : t2.size()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>