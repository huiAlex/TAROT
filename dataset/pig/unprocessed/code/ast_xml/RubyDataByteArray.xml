<Class>
    <Id>578</Id>
    <Package>org.apache.pig.scripting.jruby</Package>
    <ClassName>RubyDataByteArray</ClassName>
    <SuperClass>RubyObject</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>RubyDataByteArray  /** 
 * This class presents a native Ruby object for interacting with and manipulating DataByteArray objects. For more information on what the annotations mean, see {@link RubyDataBag}.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>serialVersionUID</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>ALLOCATOR</FieldName>
            <FieldType>ObjectAllocator</FieldType>
        </Field>
        <Field>
            <FieldName>internalDBA</FieldName>
            <FieldType>DataByteArray</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>allocate</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>IRubyObject</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>runtime</ParamName>
                    <ParamType>Ruby</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>klass</ParamName>
                    <ParamType>RubyClass</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>define</MethodName>
            <MethodComment>/** 
 * Registers the DataByteArray class with the Ruby runtime.
 * @param runtime an instance of the Ruby runtime
 * @return a RubyClass object with metadata about the registered class
 */
</MethodComment>
            <ReturnType>RubyClass</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>runtime</ParamName>
                    <ParamType>Ruby</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>RubyClass [result=runtime.defineClass("DataByteArray",runtime.getObject(),ALLOCATOR)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>result;defineAnnotatedMethods;[RubyDataByteArray.class]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isKindOf</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>obj</ParamName>
                    <ParamType>IRubyObject</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>RubyModule</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>RubyDataByteArray</MethodName>
            <MethodComment>/** 
 * This constructor encapsulated a null DataByteArray.
 * @param ruby an instance of the ruby runtime
 * @param rc   an instance of the class object with meatadata
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ruby</ParamName>
                    <ParamType>Ruby</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rc</ParamName>
                    <ParamType>RubyClass</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>RubyDataByteArray</MethodName>
            <MethodComment>/** 
 * Given a DataByteArray, this constructor creates a new one which copies the underlying bytes.
 * @param ruby an instance of the ruby runtime
 * @param rc   an instance of the class object with meatadata
 * @param dba  a DataByteArray to copy then encapsulate
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ruby</ParamName>
                    <ParamType>Ruby</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rc</ParamName>
                    <ParamType>RubyClass</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dba</ParamName>
                    <ParamType>DataByteArray</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>byte[] [buf1=dba.get()]</InnerVar>
                <InnerVar>byte[] [buf2=new byte[buf1.length]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>System;arraycopy;[buf1, 0, buf2, 0, buf1.length]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>RubyDataByteArray</MethodName>
            <MethodComment>/** 
 * This constructor makes a RubyDataByteArray whose underlying bytes are a concatenation of the given bytes. The new DataByteArray will not point to the original bytes.
 * @param ruby an instance of the ruby runtime
 * @param rc   an instance of the class object with meatadata
 * @param dba1 first DataByteArray in the concatentation
 * @param dba2 second DAtaByteArray whose bytes will be concatenated to the first's
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ruby</ParamName>
                    <ParamType>Ruby</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rc</ParamName>
                    <ParamType>RubyClass</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dba1</ParamName>
                    <ParamType>DataByteArray</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dba2</ParamName>
                    <ParamType>DataByteArray</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>RubyDataByteArray</MethodName>
            <MethodComment>/** 
 * This constructor creates a new DataByteArray with a reference to the provided bytes.
 * @param ruby an instance of the ruby runtime
 * @param rc   an instance of the class object with meatadata
 * @param buf  a byte array to encapsulate directly
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ruby</ParamName>
                    <ParamType>Ruby</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rc</ParamName>
                    <ParamType>RubyClass</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>buf</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDBA</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DataByteArray</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initialize</MethodName>
            <MethodComment>/** 
 * This is the default initializer, which returns an empty DataByteArray.
 * @return the initialized RubyDataByteArray
 */
</MethodComment>
            <ReturnType>RubyDataByteArray</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initialize</MethodName>
            <MethodComment>/** 
 * Given a String or a set of bytes[], initializes the encapsulated DataByteArray using  {@link DataByteArray#set}. In the case of a DataByteArray, will copy the underlying bytes.
 * @param arg a value to set the encapsulated DataByteArray to. A DataByteArraywill be copied, whereas a byte array will be encapsulated directly, and a string's bits will be used per  {@link DataByteArray#set}.
 * @return    the initialized RubyDataByteArray
 */
</MethodComment>
            <ReturnType>RubyDataByteArray</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>arg</ParamName>
                    <ParamType>IRubyObject</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initialize</MethodName>
            <MethodComment>/** 
 * Given two RubyDataByteArrays, initializes the encapsulated DataByteArray to be a concatentation of the copied bits of the first and second.
 * @param arg1 the first RubyDataByteArray whose bits will be used
 * @param arg2 the second RubyDataByteArray whose bits will be concatenatedafter the first's
 * @return     the initialized RubyDataBytearray
 */
</MethodComment>
            <ReturnType>RubyDataByteArray</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>arg1</ParamName>
                    <ParamType>IRubyObject</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>arg2</ParamName>
                    <ParamType>IRubyObject</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>append</MethodName>
            <MethodComment>/** 
 * This calls to the append function of the underlying DataByteArray. This accepts the same types that set accepts.
 * @param context the context the method is being executed in
 * @param arg a value to append to the encpasulated DataByteArray. In the case of aRubyDataByteArray, the bytes will be copied and appended; in the case of a String, the bits will be added; in the case of a byte array, the bytes will be appended directly.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>ThreadContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>arg</ParamName>
                    <ParamType>IRubyObject</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Ruby [runtime=context.getRuntime()]</InnerVar>
                <InnerVar>RubyDataByteArray [toAppend=new RubyDataByteArray(runtime,runtime.getClass("DataByteArray")).initialize(arg)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>internalDBA;append;[toAppend.getDBA()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compare</MethodName>
            <MethodComment>/** 
 * This calls to the static method compare of DataByteArray. Given two DataByteArrays, it will call it on the underlying bytes.
 * @param context the context the method is being executed in
 * @param self    an class which contains metadata on the calling class (required for static Ruby methods)
 * @param arg1    a RubyDataByteArray or byte array to compare
 * @param arg2    a RubyDataByteArray or byte array to compare
 * @return        the Fixnum result of comparing arg1 and arg2's bytes
 */
</MethodComment>
            <ReturnType>RubyFixnum</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>ThreadContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>IRubyObject</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>arg1</ParamName>
                    <ParamType>IRubyObject</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>arg2</ParamName>
                    <ParamType>IRubyObject</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>byte[] [buf1, buf2]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compareTo</MethodName>
            <MethodComment>/** 
 * This calls the compareTo method of the encapsulated DataByteArray.
 * @param context the context the method is being executed in
 * @param arg     a RubyDataByteArray or byte array to compare to theencapsulated DataByteArray
 * @return        the result of compareTo on the encapsulated DataByteArrayand arg
 */
</MethodComment>
            <ReturnType>RubyFixnum</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>ThreadContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>arg</ParamName>
                    <ParamType>IRubyObject</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [compResult]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>equals</MethodName>
            <MethodComment>/** 
 * Overrides equality leveraging DataByteArray's equality.
 * @param context the context the method is being executed in
 * @param arg     a RubyDataByteArray against which to test equality
 * @return        true if they are equal, false otherwise
 */
</MethodComment>
            <ReturnType>RubyBoolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>ThreadContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>arg</ParamName>
                    <ParamType>IRubyObject</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Ruby [runtime=context.getRuntime()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hash</MethodName>
            <MethodComment>/** 
 * Overrides ruby's hash leveraging DataByteArray's hash.
 * @param context the context the method is being executed in
 * @return        the encapsulated DataByteArray's hashCode()
 */
</MethodComment>
            <ReturnType>IRubyObject</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>ThreadContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>set</MethodName>
            <MethodComment>/** 
 * This method calls the set method of the underlying DataByteArray with one exception: if given a RubyDataByteArray, it will set the encapsulated DataByteArray to be equal.
 * @param arg an object to set the encapsulated DataByteArray's bits to. In the case ofa RubyString or byte array, the underlying bytes will be sit directly. In the case of a RubyDataByteArray, the encapsulated DataByteArray will be set equal to arg.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>arg</ParamName>
                    <ParamType>IRubyObject</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>size</MethodName>
            <MethodComment>/** 
 * @param context the context the method is being executed in
 * @return the size of the encapsulated DataByteArray
 */
</MethodComment>
            <ReturnType>RubyFixnum</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>ThreadContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>plus</MethodName>
            <MethodComment>/** 
 * This method accepts as an argument anything that could be passed to set (ie a RubyDataByteArray, RubyString, or byte array). It then adds those values together.
 * @param context the context the method is being executed in
 * @param arg     any argument that can validly initialize a RubyDataByteArray
 * @return        a &lt;u&gt;new&lt;/u&gt; RubyDataByteArray that is the concatentation ofthe encapsulated DataByteArray and arg
 */
</MethodComment>
            <ReturnType>IRubyObject</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>ThreadContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>arg</ParamName>
                    <ParamType>IRubyObject</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Ruby [runtime=context.getRuntime()]</InnerVar>
                <InnerVar>RubyDataByteArray [toAdd=new RubyDataByteArray(runtime,runtime.getClass("DataByteArray")).initialize(arg)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment>/** 
 * @param context the context the method is being executed in
 * @return        the string representation of the encapsulated DataByteArray
 */
</MethodComment>
            <ReturnType>IRubyObject</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>ThreadContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>