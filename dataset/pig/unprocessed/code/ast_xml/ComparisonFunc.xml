<Class>
    <Id>232</Id>
    <Package>org.apache.pig</Package>
    <ClassName>ComparisonFunc</ClassName>
    <SuperClass>WritableComparator</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ComparisonFunc  /** 
 * An interface for custom order by comparator function.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>reporter</FieldName>
            <FieldType>PigProgressable</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ComparisonFunc</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compare</MethodName>
            <MethodComment>/** 
 * Compare two tuples.  Note that even though both args are given type of WritableComparable to match the WritableComparable interface, they must both be tuples.
 * @param a first tuple
 * @param b tuple to compare a to
 * @return -1 if a &amp;lt; b, 1 if a &amp;gt; b, 0 if a = b
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>a</ParamName>
                    <ParamType>WritableComparable</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>b</ParamName>
                    <ParamType>WritableComparable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compare</MethodName>
            <MethodComment>/** 
 * This callback method must be implemented by all subclasses. Compares  its two arguments for order.  The order of elements of the tuples correspond  to the fields specified in the order by clause.  Same semantics as  {@link java.util.Comparator}.
 * @param t1 the first Tuple to be compared.
 * @param t2 the second Tuple to be compared.
 * @return  Returns a negative integer, zero, or a positive integer as the firstargument is less than, equal to, or greater than the second. 
 * @throws IOException
 * @see java.util.Comparator
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t1</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>t2</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setReporter</MethodName>
            <MethodComment>/** 
 * Set the reporter.  If the comparison takes a long time the reporter should be called occasionally to avoid Hadoop timing out underneath.  The default Hadoop timeout is 600 seconds.
 * @param reporter Progress reporter
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>reporter</ParamName>
                    <ParamType>PigProgressable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>