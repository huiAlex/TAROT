<Class>
    <Id>907</Id>
    <Package>org.apache.pig.builtin</Package>
    <ClassName>ABS</ClassName>
    <SuperClass>EvalFunc</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ABS  /** 
 * ABS implements a binding to the Java function {@link java.lang.Math#abs(double) Math.abs(double)} for computing theabsolute value of the argument. The returned value will be a double which is absolute value of the input.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>exec</MethodName>
            <MethodComment>/** 
 * java level API
 * @param input expects a single numeric value
 * @return output returns a single numeric value, absolute value of the argument
 */
</MethodComment>
            <ReturnType>Double</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Double [d]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>outputSchema</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Schema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>Schema</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getArgToFuncMapping</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>FuncSpec</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>List&lt;FuncSpec&gt; [funcList=new ArrayList&lt;FuncSpec&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>funcList;add;[new FuncSpec(this.getClass().getName(),new Schema(new Schema.FieldSchema(null,DataType.BYTEARRAY)))]</InnerMethodInvoke>
                <InnerMethodInvoke>funcList;add;[new FuncSpec(DoubleAbs.class.getName(),new Schema(new Schema.FieldSchema(null,DataType.DOUBLE)))]</InnerMethodInvoke>
                <InnerMethodInvoke>funcList;add;[new FuncSpec(FloatAbs.class.getName(),new Schema(new Schema.FieldSchema(null,DataType.FLOAT)))]</InnerMethodInvoke>
                <InnerMethodInvoke>funcList;add;[new FuncSpec(IntAbs.class.getName(),new Schema(new Schema.FieldSchema(null,DataType.INTEGER)))]</InnerMethodInvoke>
                <InnerMethodInvoke>funcList;add;[new FuncSpec(LongAbs.class.getName(),new Schema(new Schema.FieldSchema(null,DataType.LONG)))]</InnerMethodInvoke>
                <InnerMethodInvoke>funcList;add;[new FuncSpec(BigIntegerAbs.class.getName(),new Schema(new Schema.FieldSchema(null,DataType.BIGINTEGER)))]</InnerMethodInvoke>
                <InnerMethodInvoke>funcList;add;[new FuncSpec(BigDecimalAbs.class.getName(),new Schema(new Schema.FieldSchema(null,DataType.BIGDECIMAL)))]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>allowCompileTimeCalculation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>