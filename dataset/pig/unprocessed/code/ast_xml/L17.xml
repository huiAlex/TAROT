<Class>
    <Id>684</Id>
    <Package>org.apache.pig.test.pigmix.mapreduce</Package>
    <ClassName>L17</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>map</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>k</ParamName>
                    <ParamType>LongWritable</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>val</ParamName>
                    <ParamType>Text</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>oc</ParamName>
                    <ParamType>Text</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>reporter</ParamName>
                    <ParamType>Reporter</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;Text&gt; [vals=Library.splitLine(val,'')]</InnerVar>
                <InnerVar>StringBuffer [key=new StringBuffer()]</InnerVar>
                <InnerVar>StringBuffer [sb=new StringBuffer()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>key;append;[vals.get(0).toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>key;append;[""]</InnerMethodInvoke>
                <InnerMethodInvoke>key;append;[vals.get(1).toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>key;append;[""]</InnerMethodInvoke>
                <InnerMethodInvoke>key;append;[vals.get(2).toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>key;append;[""]</InnerMethodInvoke>
                <InnerMethodInvoke>key;append;[vals.get(3).toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>key;append;[""]</InnerMethodInvoke>
                <InnerMethodInvoke>key;append;[vals.get(4).toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>key;append;[""]</InnerMethodInvoke>
                <InnerMethodInvoke>key;append;[vals.get(5).toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>key;append;[""]</InnerMethodInvoke>
                <InnerMethodInvoke>key;append;[vals.get(6).toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>key;append;[""]</InnerMethodInvoke>
                <InnerMethodInvoke>key;append;[vals.get(9).toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>key;append;[""]</InnerMethodInvoke>
                <InnerMethodInvoke>key;append;[vals.get(10).toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>key;append;[""]</InnerMethodInvoke>
                <InnerMethodInvoke>key;append;[vals.get(11).toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>key;append;[""]</InnerMethodInvoke>
                <InnerMethodInvoke>key;append;[vals.get(12).toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>key;append;[""]</InnerMethodInvoke>
                <InnerMethodInvoke>key;append;[vals.get(13).toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>key;append;[""]</InnerMethodInvoke>
                <InnerMethodInvoke>key;append;[vals.get(14).toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>key;append;[""]</InnerMethodInvoke>
                <InnerMethodInvoke>key;append;[vals.get(15).toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>key;append;[""]</InnerMethodInvoke>
                <InnerMethodInvoke>key;append;[vals.get(18).toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>key;append;[""]</InnerMethodInvoke>
                <InnerMethodInvoke>key;append;[vals.get(19).toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>key;append;[""]</InnerMethodInvoke>
                <InnerMethodInvoke>key;append;[vals.get(20).toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>key;append;[""]</InnerMethodInvoke>
                <InnerMethodInvoke>key;append;[vals.get(21).toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>key;append;[""]</InnerMethodInvoke>
                <InnerMethodInvoke>key;append;[vals.get(22).toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>key;append;[""]</InnerMethodInvoke>
                <InnerMethodInvoke>key;append;[vals.get(23).toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>key;append;[""]</InnerMethodInvoke>
                <InnerMethodInvoke>key;append;[vals.get(24).toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;[vals.get(2).toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;[""]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;[vals.get(11).toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;[""]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;[vals.get(20).toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;[""]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;[vals.get(6).toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;[""]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;[vals.get(15).toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;[""]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;[vals.get(24).toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>oc;collect;[new Text(key.toString()), new Text(sb.toString())]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reduce</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Text</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>iter</ParamName>
                    <ParamType>Text</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>oc</ParamName>
                    <ParamType>Text</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>reporter</ParamName>
                    <ParamType>Reporter</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [tsSum=0, tsSum1=0, tsSum2=0, erCnt=0]</InnerVar>
                <InnerVar>double [erSum=0.0, erSum1=0.0, erSum2=0.0]</InnerVar>
                <InnerVar>StringBuffer [sb=new StringBuffer()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>sb;append;[(new Integer(tsSum)).toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;[""]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;[(new Integer(tsSum1)).toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;[""]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;[(new Integer(tsSum2)).toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;[""]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;[(new Double(erSum)).toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;[""]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;[(new Double(erSum1)).toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;[""]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;[(new Double(erSum2)).toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;[""]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;[(new Integer(erCnt)).toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>oc;collect;[key, new Text(sb.toString())]</InnerMethodInvoke>
                <InnerMethodInvoke>reporter;setStatus;["OK"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reduce</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Text</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>iter</ParamName>
                    <ParamType>Text</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>oc</ParamName>
                    <ParamType>Text</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>reporter</ParamName>
                    <ParamType>Reporter</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [tsSum=0, tsSum1=0, tsSum2=0, erCnt=0]</InnerVar>
                <InnerVar>double [erSum=0.0, erSum1=0.0, erSum2=0.0]</InnerVar>
                <InnerVar>double [erAvg=erSum / erCnt, erAvg1=erSum1 / erCnt, erAvg2=erSum2 / erCnt]</InnerVar>
                <InnerVar>StringBuffer [sb=new StringBuffer()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>sb;append;[(new Double(tsSum)).toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;["\t"]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;[(new Double(tsSum1)).toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;["\t"]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;[(new Double(tsSum2)).toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;["\t"]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;[(new Double(erAvg)).toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;["\t"]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;[(new Double(erAvg1)).toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;["\t"]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;[(new Double(erAvg2)).toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>oc;collect;[null, new Text(sb.toString())]</InnerMethodInvoke>
                <InnerMethodInvoke>reporter;setStatus;["OK"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>main</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [inputDir=args[0]]</InnerVar>
                <InnerVar>String [outputDir=args[1]]</InnerVar>
                <InnerVar>String [parallel=args[2]]</InnerVar>
                <InnerVar>JobConf [lp=new JobConf(L17.class)]</InnerVar>
                <InnerVar>Properties [props=System.getProperties()]</InnerVar>
                <InnerVar>Job [group=new Job(lp)]</InnerVar>
                <InnerVar>JobControl [jc=new JobControl("L17 group by")]</InnerVar>
                <InnerVar>int [i=0]</InnerVar>
                <InnerVar>ArrayList&lt;Job&gt; [failures=jc.getFailedJobs()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>lp;setJobName;["L17 Wide group by"]</InnerMethodInvoke>
                <InnerMethodInvoke>lp;setInputFormat;[TextInputFormat.class]</InnerMethodInvoke>
                <InnerMethodInvoke>lp;setOutputKeyClass;[Text.class]</InnerMethodInvoke>
                <InnerMethodInvoke>lp;setOutputValueClass;[Text.class]</InnerMethodInvoke>
                <InnerMethodInvoke>lp;setMapperClass;[ReadPageViews.class]</InnerMethodInvoke>
                <InnerMethodInvoke>lp;setCombinerClass;[Combiner.class]</InnerMethodInvoke>
                <InnerMethodInvoke>lp;setReducerClass;[Group.class]</InnerMethodInvoke>
                <InnerMethodInvoke>FileInputFormat;addInputPath;[lp, new Path(inputDir + "/widegroupbydata")]</InnerMethodInvoke>
                <InnerMethodInvoke>FileOutputFormat;setOutputPath;[lp, new Path(outputDir + "/L17out")]</InnerMethodInvoke>
                <InnerMethodInvoke>lp;setNumReduceTasks;[Integer.parseInt(parallel)]</InnerMethodInvoke>
                <InnerMethodInvoke>jc;addJob;[group]</InnerMethodInvoke>
                <InnerMethodInvoke>new Thread(jc);start;[]</InnerMethodInvoke>
                <InnerMethodInvoke>jc;stop;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>