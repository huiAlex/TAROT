<Class>
    <Id>396</Id>
    <Package>org.apache.pig.newplan.logical.rules</Package>
    <ClassName>PredicatePushdownOptimizer</ClassName>
    <SuperClass>Rule</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>LOG</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>loLoad</FieldName>
            <FieldType>LOLoad</FieldType>
        </Field>
        <Field>
            <FieldName>loFilter</FieldName>
            <FieldType>LOFilter</FieldType>
        </Field>
        <Field>
            <FieldName>loadFunc</FieldName>
            <FieldType>LoadFunc</FieldType>
        </Field>
        <Field>
            <FieldName>loadPredPushdown</FieldName>
            <FieldType>LoadPredicatePushdown</FieldType>
        </Field>
        <Field>
            <FieldName>predicateFields</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>predicateFields</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>colNameMap</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>colNameMap</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>reverseColNameMap</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>reverseColNameMap</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>subPlan</FieldName>
            <FieldType>OperatorSubPlan</FieldType>
        </Field>
        <Field>
            <FieldName>planChanged</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>PredicatePushdownOptimizer</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildPattern</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>OperatorPlan</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>LogicalPlan [plan=new LogicalPlan()]</InnerVar>
                <InnerVar>LogicalRelationalOperator [load=new LOLoad(null,plan)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>plan;add;[load]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNewTransformer</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Transformer</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>check</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>matched</ParamName>
                    <ParamType>OperatorPlan</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;Operator&gt; [succeds=currentPlan.getSuccessors(loLoad)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reportChanges</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>OperatorPlan</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>transform</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>matched</ParamName>
                    <ParamType>OperatorPlan</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PredicatePushDownFilterExtractor [filterFinder=new PredicatePushDownFilterExtractor(loFilter.getFilterPlan(),getMappedKeys(predicateFields),loadPredPushdown.getSupportedExpressionTypes())]</InnerVar>
                <InnerVar>Expression [pushDownPredicate=filterFinder.getPushDownExpression()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setupColNameMaps;[]</InnerMethodInvoke>
                <InnerMethodInvoke>filterFinder;visit;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>updateMappedColNames</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expr</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMappedKeys</MethodName>
            <MethodComment>/** 
 * The partition keys in the argument are as reported by {@link LoadMetadata#getPartitionKeys(String,org.apache.hadoop.conf.Configuration)}. The user may have renamed these by providing a schema with different names in the load statement - this method will replace the former names with the latter names.
 * @param predicateFields
 * @return
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>predicateFields</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;String&gt; [mappedKeys=new ArrayList&lt;String&gt;(predicateFields.size())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setupColNameMaps</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>LogicalSchema [loLoadSchema=loLoad.getSchema()]</InnerVar>
                <InnerVar>LogicalSchema [loadFuncSchema=loLoad.getDeterminedSchema()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>