<Class>
    <Id>1165</Id>
    <Package>org.apache.pig.backend.hadoop.executionengine.mapReduceLayer</Package>
    <ClassName>JobControlCompiler</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>JobControlCompiler  /** 
 * This is compiler class that takes an MROperPlan and converts it into a JobControl object with the relevant dependency info maintained. The JobControl Object is made up of Jobs each of which has a JobConf. The MapReduceOper corresponds to a Job and the getJobCong method returns the JobConf that is configured as per the MapReduceOper &lt;h2&gt;Comparator Design&lt;/h2&gt; &lt;p&gt; A few words on how comparators are chosen.  In almost all cases we use raw comparators (the one exception being when the user provides a comparison function for order by).  For order by queries the PigTYPERawComparator functions are used, where TYPE is Int, Long, etc.  These comparators are null aware and asc/desc aware.  The first byte of each of the NullableTYPEWritable classes contains info on whether the value is null. Asc/desc is written as an array into the JobConf with the key pig.sortOrder so that it can be read by each of the comparators as part of their setConf call. &lt;p&gt; For non-order by queries, PigTYPEWritableComparator classes are used. These are all just type specific instances of WritableComparator.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>plan</FieldName>
            <FieldType>MROperPlan</FieldType>
        </Field>
        <Field>
            <FieldName>conf</FieldName>
            <FieldType>Configuration</FieldType>
        </Field>
        <Field>
            <FieldName>defaultConf</FieldName>
            <FieldType>Configuration</FieldType>
        </Field>
        <Field>
            <FieldName>pigContext</FieldName>
            <FieldType>PigContext</FieldType>
        </Field>
        <Field>
            <FieldName>DISTRIBUTED_CACHE_ARCHIVE_MATCHER</FieldName>
            <FieldType>Matcher</FieldType>
        </Field>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>LOG_DIR</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>END_OF_INP_IN_MAP</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>PIG_MAP_COUNTER</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>PIG_MAP_RANK_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>PIG_MAP_SEPARATOR</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>globalCounters</FieldName>
            <FieldType>HashMap</FieldType>
        </Field>
        <Field>
            <FieldName>globalCounters</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>SMALL_JOB_LOG_MSG</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>BIG_JOB_LOG_MSG</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>PIG_MAP_STORES</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>PIG_REDUCE_STORES</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>jobStoreMap</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>jobStoreMap</FieldName>
            <FieldType>Job</FieldType>
        </Field>
        <Field>
            <FieldName>jobMroMap</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>jobMroMap</FieldName>
            <FieldType>Job</FieldType>
        </Field>
        <Field>
            <FieldName>pigContext</FieldName>
            <FieldType>PigContext</FieldType>
        </Field>
        <Field>
            <FieldName>conf</FieldName>
            <FieldType>Configuration</FieldType>
        </Field>
        <Field>
            <FieldName>rp</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>replaced</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>JobControlCompiler</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pigContext</ParamName>
                    <ParamType>PigContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>conf</ParamName>
                    <ParamType>Configuration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>JobControlCompiler</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pigContext</ParamName>
                    <ParamType>PigContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>conf</ParamName>
                    <ParamType>Configuration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>defaultConf</ParamName>
                    <ParamType>Configuration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStores</MethodName>
            <MethodComment>/** 
 * Returns all store locations of a previously compiled job
 */
</MethodComment>
            <ReturnType>POStore</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>job</ParamName>
                    <ParamType>Job</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Pair&lt;List&lt;POStore&gt;,Path&gt; [pair=jobStoreMap.get(job)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reset</MethodName>
            <MethodComment>/** 
 * Resets the state
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>UDFContext.getUDFContext();reset;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getJobMroMap</MethodName>
            <MethodComment>/** 
 * Gets the map of Job and the MR Operator
 */
</MethodComment>
            <ReturnType>Job</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>moveResults</MethodName>
            <MethodComment>/** 
 * Moves all the results of a collection of MR jobs to the final output directory. Some of the results may have been put into a temp location to work around restrictions with multiple output from a single map reduce job. This method should always be called after the job execution completes.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>completedJobs</ParamName>
                    <ParamType>Job</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>moveResults</MethodName>
            <MethodComment>/** 
 * Walks the temporary directory structure to move (rename) files to their final location.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>p</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rem</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fs</ParamName>
                    <ParamType>FileSystem</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removePart</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Path</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>src</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>part</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>URI [uri=src.toUri()]</InnerVar>
                <InnerVar>String [pathStr=uri.getPath().replace(part,"")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compile</MethodName>
            <MethodComment>/** 
 * Compiles all jobs that have no dependencies removes them from the plan and returns. Should be called with the same plan until exhausted.
 * @param plan - The MROperPlan to be compiled
 * @param grpName - The name given to the JobControl
 * @return JobControl object - null if no more jobs in plan
 * @throws JobCreationException
 */
</MethodComment>
            <ReturnType>JobControl</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>plan</ParamName>
                    <ParamType>MROperPlan</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>grpName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [timeToSleep]</InnerVar>
                <InnerVar>String [defaultPigJobControlSleep=pigContext.getExecType().isLocal() ? "100" : "5000"]</InnerVar>
                <InnerVar>String [pigJobControlSleep=conf.get("pig.jobcontrol.sleep",defaultPigJobControlSleep)]</InnerVar>
                <InnerVar>JobControl [jobCtrl=new PigJobControl(grpName,timeToSleep)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>JobCreationException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>updateMROpPlan</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>completeFailedJobs</ParamName>
                    <ParamType>Job</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [sizeBefore=plan.size()]</InnerVar>
                <InnerVar>int [sizeAfter=plan.size()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>jobMroMap;clear;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>saveCounters</MethodName>
            <MethodComment>/** 
 * Reads the global counters produced by a job on the group labeled with PIG_MAP_RANK_NAME. Then, it is calculated the cumulative sum, which consists on the sum of previous cumulative sum plus the previous global counter value.
 * @param job with the global counters collected.
 * @param operationID After being collected on global counters (POCounter),these values are passed via configuration file to PORank, by using the unique operation identifier
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>job</ParamName>
                    <ParamType>Job</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>operationID</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isRowNumber</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Counters [counters]</InnerVar>
                <InnerVar>Group [groupCounters]</InnerVar>
                <InnerVar>int [counterSize=-1]</InnerVar>
                <InnerVar>Long [previousValue=0L]</InnerVar>
                <InnerVar>Long [previousSum=0L]</InnerVar>
                <InnerVar>ArrayList&lt;Pair&lt;String,Long&gt;&gt; [counterPairs]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getGroupName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>collection</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>okToRunLocal</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>job</ParamName>
                    <ParamType>org.apache.hadoop.mapreduce.Job</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mro</ParamName>
                    <ParamType>MapReduceOper</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lds</ParamName>
                    <ParamType>POLoad</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Configuration [conf=job.getConfiguration()]</InnerVar>
                <InnerVar>long [inputByteMax=conf.getLong(PigConfiguration.PIG_AUTO_LOCAL_INPUT_MAXBYTES,100 * 1000 * 1000l)]</InnerVar>
                <InnerVar>long [totalInputFileSize=InputSizeReducerEstimator.getTotalInputFileSize(conf,lds,job,inputByteMax)]</InnerVar>
                <InnerVar>int [reducers=conf.getInt(MRConfiguration.REDUCE_TASKS,1)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>log;info;["Size of input: " + totalInputFileSize + " bytes. Small job threshold: "+ inputByteMax]</InnerMethodInvoke>
                <InnerMethodInvoke>log;info;["No of reducers: " + reducers]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getJob</MethodName>
            <MethodComment>/** 
 * The method that creates the Job corresponding to a MapReduceOper. The assumption is that every MapReduceOper will have a load and a store. The JobConf removes the load operator and serializes the input filespec so that PigInputFormat can take over the creation of splits. It also removes the store operator and serializes the output filespec so that PigOutputFormat can take over record writing. The remaining portion of the map plan and reduce plans are serialized and stored for the PigMapReduce or PigMapOnly objects to take over the actual running of the plans. The Mapper &amp;amp; Reducer classes and the required key value formats are set. Checks if this is a map only job and uses PigMapOnly class as the mapper and uses PigMapReduce otherwise. If it is a Map Reduce job, it is bound to have a package operator. Remove it from the reduce plan and serializes it so that the PigMapReduce class can use it to package the indexed tuples received by the reducer.
 * @param mro - The MapReduceOper for which the JobConf is required
 * @param config - the Configuration object from which JobConf is built
 * @param pigContext - The PigContext passed on from execution engine
 * @return Job corresponding to mro
 * @throws JobCreationException
 */
</MethodComment>
            <ReturnType>Job</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>plan</ParamName>
                    <ParamType>MROperPlan</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mro</ParamName>
                    <ParamType>MapReduceOper</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>config</ParamName>
                    <ParamType>Configuration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pigContext</ParamName>
                    <ParamType>PigContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>org.apache.hadoop.mapreduce.Job [nwJob=null]</InnerVar>
                <InnerVar>Configuration [conf=nwJob.getConfiguration()]</InnerVar>
                <InnerVar>ArrayList&lt;FileSpec&gt; [inp=new ArrayList&lt;FileSpec&gt;()]</InnerVar>
                <InnerVar>ArrayList&lt;List&lt;OperatorKey&gt;&gt; [inpTargets=new ArrayList&lt;List&lt;OperatorKey&gt;&gt;()]</InnerVar>
                <InnerVar>ArrayList&lt;String&gt; [inpSignatureLists=new ArrayList&lt;String&gt;()]</InnerVar>
                <InnerVar>ArrayList&lt;Long&gt; [inpLimits=new ArrayList&lt;Long&gt;()]</InnerVar>
                <InnerVar>ArrayList&lt;POStore&gt; [storeLocations=new ArrayList&lt;POStore&gt;()]</InnerVar>
                <InnerVar>Path [tmpLocation=null]</InnerVar>
                <InnerVar>String [setScriptProp=conf.get(PigConfiguration.PIG_SCRIPT_INFO_ENABLED,"true")]</InnerVar>
                <InnerVar>String [buffPercent=conf.get(MRConfiguration.JOB_REDUCE_MARKRESET_BUFFER_PERCENT)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>conf;set;[MRConfiguration.MAPPER_NEW_API, "true"]</InnerMethodInvoke>
                <InnerMethodInvoke>conf;set;[MRConfiguration.REDUCER_NEW_API, "true"]</InnerMethodInvoke>
                <InnerMethodInvoke>DateTimeWritable;setupAvailableZoneIds;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;configureCompression;[conf]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>JobCreationException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>configureCompression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conf</ParamName>
                    <ParamType>Configuration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>adjustNumReducers</MethodName>
            <MethodComment>/** 
 * Adjust the number of reducers based on the default_parallel, requested parallel and estimated parallel. For sampler jobs, we also adjust the next job in advance to get its runtime parallel as the number of partitions used in the sampler.
 * @param plan the MR plan
 * @param mro the MR operator
 * @param nwJob the current job
 * @throws IOException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>plan</ParamName>
                    <ParamType>MROperPlan</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mro</ParamName>
                    <ParamType>MapReduceOper</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nwJob</ParamName>
                    <ParamType>org.apache.hadoop.mapreduce.Job</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [jobParallelism=calculateRuntimeReducers(mro,nwJob)]</InnerVar>
                <InnerVar>Configuration [conf=nwJob.getConfiguration()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>log;info;["Setting Parallelism to " + jobParallelism]</InnerMethodInvoke>
                <InnerMethodInvoke>conf;setInt;[PigImplConstants.REDUCER_DEFAULT_PARALLELISM, pigContext.defaultParallel]</InnerMethodInvoke>
                <InnerMethodInvoke>conf;setInt;[PigImplConstants.REDUCER_REQUESTED_PARALLELISM, mro.requestedParallelism]</InnerMethodInvoke>
                <InnerMethodInvoke>conf;setInt;[PigImplConstants.REDUCER_ESTIMATED_PARALLELISM, mro.estimatedParallelism]</InnerMethodInvoke>
                <InnerMethodInvoke>conf;setInt;[MRConfiguration.REDUCE_TASKS, jobParallelism]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>calculateRuntimeReducers</MethodName>
            <MethodComment>/** 
 * Calculate the runtime #reducers based on the default_parallel, requested parallel and estimated parallel, and save it to MapReduceOper's runtimeParallelism.
 * @return the runtimeParallelism
 * @throws IOException
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mro</ParamName>
                    <ParamType>MapReduceOper</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nwJob</ParamName>
                    <ParamType>org.apache.hadoop.mapreduce.Job</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [jobParallelism=-1]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>estimateNumberOfReducers</MethodName>
            <MethodComment>/** 
 * Looks up the estimator from REDUCER_ESTIMATOR_KEY and invokes it to find the number of reducers to use. If REDUCER_ESTIMATOR_KEY isn't set, defaults to InputSizeReducerEstimator.
 * @param job
 * @param mapReducerOper
 * @throws IOException
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>job</ParamName>
                    <ParamType>org.apache.hadoop.mapreduce.Job</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mapReducerOper</ParamName>
                    <ParamType>MapReduceOper</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Configuration [conf=job.getConfiguration()]</InnerVar>
                <InnerVar>PigReducerEstimator [estimator=conf.get(PIG_EXEC_REDUCER_ESTIMATOR) == null ? new InputSizeReducerEstimator() : PigContext.instantiateObjectFromParams(conf,PIG_EXEC_REDUCER_ESTIMATOR,PIG_EXEC_REDUCER_ESTIMATOR_CONSTRUCTOR_ARG_KEY,PigReducerEstimator.class)]</InnerVar>
                <InnerVar>int [numberOfReducers=estimator.estimateNumberOfReducers(job,mapReducerOper)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>log;info;["Using reducer estimator: " + estimator.getClass().getName()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PigSecondaryKeyGroupComparator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compare</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>a</ParamName>
                    <ParamType>WritableComparable</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>b</ParamName>
                    <ParamType>WritableComparable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PigNullableWritable [wa=(PigNullableWritable)a]</InnerVar>
                <InnerVar>PigNullableWritable [wb=(PigNullableWritable)b]</InnerVar>
                <InnerVar>Object [valuea=null]</InnerVar>
                <InnerVar>Object [valueb=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PigWritableComparator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>Class</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compare</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>b1</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>s1</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>l1</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>b2</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>s2</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>l2</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PigBooleanWritableComparator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PigIntWritableComparator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PigLongWritableComparator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PigFloatWritableComparator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PigDoubleWritableComparator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PigBigIntegerWritableComparator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PigBigDecimalWritableComparator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PigDateTimeWritableComparator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PigCharArrayWritableComparator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PigDBAWritableComparator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PigTupleWritableComparator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PigBagWritableComparator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PigGroupingBooleanWritableComparator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PigGroupingIntWritableComparator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PigGroupingLongWritableComparator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PigGroupingFloatWritableComparator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PigGroupingDoubleWritableComparator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PigGroupingDateTimeWritableComparator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PigGroupingCharArrayWritableComparator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PigGroupingDBAWritableComparator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PigGroupingTupleWritableComparator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PigGroupingPartitionWritableComparator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PigGroupingBagWritableComparator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PigGroupingBigIntegerWritableComparator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PigGroupingBigDecimalWritableComparator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>selectComparator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mro</ParamName>
                    <ParamType>MapReduceOper</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>keyType</ParamName>
                    <ParamType>byte</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>job</ParamName>
                    <ParamType>org.apache.hadoop.mapreduce.Job</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [hasOrderBy=false]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>JobCreationException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setupDistributedCacheForJoin</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mro</ParamName>
                    <ParamType>MapReduceOper</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pigContext</ParamName>
                    <ParamType>PigContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>conf</ParamName>
                    <ParamType>Configuration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>new JoinDistributedCacheVisitor(mro.mapPlan,pigContext,conf);visit;[]</InnerMethodInvoke>
                <InnerMethodInvoke>new JoinDistributedCacheVisitor(mro.reducePlan,pigContext,conf);visit;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setupDistributedCache</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pigContext</ParamName>
                    <ParamType>PigContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>conf</ParamName>
                    <ParamType>Configuration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>properties</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>shipToCluster</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [fileNames=properties.getProperty(key)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addToDistributedCache</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>uri</ParamName>
                    <ParamType>URI</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>conf</ParamName>
                    <ParamType>Configuration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setupDistributedCache</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pigContext</ParamName>
                    <ParamType>PigContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>conf</ParamName>
                    <ParamType>Configuration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>paths</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>shipToCluster</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>DistributedCache;createSymlink;[conf]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addSingleFileToDistributedCache</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pigContext</ParamName>
                    <ParamType>PigContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>conf</ParamName>
                    <ParamType>Configuration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>filename</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>prefix</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [symlink=filename]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toURI</MethodName>
            <MethodComment>/** 
 * Ensure that 'src' is a valid URI
 * @param src the source Path
 * @return a URI for this path
 * @throws ExecException
 */
</MethodComment>
            <ReturnType>URI</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>src</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [pathInString=src.toString()]</InnerVar>
                <InnerVar>String [fragment=null]</InnerVar>
                <InnerVar>URI [uri=new Path(pathInString).toUri()]</InnerVar>
                <InnerVar>String [uriEncoded=uri.toString()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ExecException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>putJarOnClassPathThroughDistributedCache</MethodName>
            <MethodComment>/** 
 * if url is not in HDFS will copy the path to HDFS from local before adding to distributed cache
 * @param pigContext the pigContext
 * @param conf the job conf
 * @param url the url to be added to distributed cache
 * @return the path as seen on distributed cache
 * @throws IOException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pigContext</ParamName>
                    <ParamType>PigContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>conf</ParamName>
                    <ParamType>Configuration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>url</ParamName>
                    <ParamType>URL</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Path [distCachePath=getExistingDistCacheFilePath(conf,url)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>DistributedCache;createSymlink;[conf]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getExistingDistCacheFilePath</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Path</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conf</ParamName>
                    <ParamType>Configuration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>url</ParamName>
                    <ParamType>URL</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>URI[] [cacheFileUris=DistributedCache.getCacheFiles(conf)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCacheStagingDir</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Path</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conf</ParamName>
                    <ParamType>Configuration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [pigTempDir=conf.get(PigConfiguration.PIG_USER_CACHE_LOCATION,conf.get(PigConfiguration.PIG_TEMP_DIR,"/tmp"))]</InnerVar>
                <InnerVar>String [currentUser=System.getProperty("user.name")]</InnerVar>
                <InnerVar>Path [stagingDir=new Path(pigTempDir + "/" + currentUser+ "/",".pigcache")]</InnerVar>
                <InnerVar>FileSystem [fs=FileSystem.get(conf)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>fs;mkdirs;[stagingDir]</InnerMethodInvoke>
                <InnerMethodInvoke>fs;setPermission;[stagingDir, FileLocalizer.OWNER_ONLY_PERMS]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFromCache</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Path</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pigContext</ParamName>
                    <ParamType>PigContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>conf</ParamName>
                    <ParamType>Configuration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>url</ParamName>
                    <ParamType>URL</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>InputStream [is1=null]</InnerVar>
                <InnerVar>InputStream [is2=null]</InnerVar>
                <InnerVar>OutputStream [os=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>shipToHDFS</MethodName>
            <MethodComment>/** 
 * copy the file to hdfs in a temporary path
 * @param pigContext the pig context
 * @param conf the job conf
 * @param url the url to ship to hdfs
 * @return the location where it was shipped
 * @throws IOException
 */
</MethodComment>
            <ReturnType>Path</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pigContext</ParamName>
                    <ParamType>PigContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>conf</ParamName>
                    <ParamType>Configuration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>url</ParamName>
                    <ParamType>URL</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>short [replication=(short)conf.getInt(MRConfiguration.SUMIT_REPLICATION,3)]</InnerVar>
                <InnerVar>boolean [cacheEnabled=conf.getBoolean(PigConfiguration.PIG_USER_CACHE_ENABLED,false)]</InnerVar>
                <InnerVar>String [suffix=FilenameUtils.getName(url.getPath())]</InnerVar>
                <InnerVar>Path [dst=new Path(FileLocalizer.getTemporaryPath(pigContext).toUri().getPath(),suffix)]</InnerVar>
                <InnerVar>FileSystem [fs=dst.getFileSystem(conf)]</InnerVar>
                <InnerVar>OutputStream [os=null]</InnerVar>
                <InnerVar>InputStream [is=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>fs;setReplication;[dst, replication]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>JoinDistributedCacheVisitor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>plan</ParamName>
                    <ParamType>PhysicalPlan</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pigContext</ParamName>
                    <ParamType>PigContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>conf</ParamName>
                    <ParamType>Configuration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitFRJoin</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>join</ParamName>
                    <ParamType>POFRJoin</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>FileSpec[] [replFiles=join.getReplFiles()]</InnerVar>
                <InnerVar>ArrayList&lt;String&gt; [replicatedPath=new ArrayList&lt;String&gt;()]</InnerVar>
                <InnerVar>FileSpec[] [newReplFiles=new FileSpec[replFiles.length]]</InnerVar>
                <InnerVar>long [maxSize=Long.valueOf(pigContext.getProperties().getProperty(PigConfiguration.PIG_JOIN_REPLICATED_MAX_BYTES,"1000000000"))]</InnerVar>
                <InnerVar>long [sizeOfReplicatedInputs=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>VisitorException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitMergeJoin</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>join</ParamName>
                    <ParamType>POMergeJoin</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [indexFile=join.getIndexFile()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>VisitorException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitMergeCoGroup</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mergeCoGrp</ParamName>
                    <ParamType>POMergeCogroup</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [indexFile=mergeCoGrp.getIndexFileName()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>VisitorException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ParallelConstantVisitor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>plan</ParamName>
                    <ParamType>PhysicalPlan</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rp</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitConstant</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cnst</ParamName>
                    <ParamType>ConstantExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>VisitorException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setOutputFormat</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>job</ParamName>
                    <ParamType>org.apache.hadoop.mapreduce.Job</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>