<Class>
    <Id>1043</Id>
    <Package>org.apache.pig.data</Package>
    <ClassName>TupleFactory</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>TupleMaker</SuperInterface>
        <SuperInterface>Tuple</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>TupleFactory  /** 
 * A factory to construct tuples.  This class is abstract so that users can override the tuple factory if they desire to provide their own that returns their implementation of a tuple.  If the property pig.data.tuple.factory.name is set to a class name and pig.data.tuple.factory.jar is set to a URL pointing to a jar that contains the above named class, then  {@link #getInstance()} will create aan instance of the named class using the indicated jar.  Otherwise, it will create an instance of  {@link DefaultTupleFactory}.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>gSelf</FieldName>
            <FieldType>TupleFactory</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getInstance</MethodName>
            <MethodComment>/** 
 * Get a reference to the singleton factory.
 * @return The TupleFactory to use to construct tuples.
 */
</MethodComment>
            <ReturnType>TupleFactory</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newTuple</MethodName>
            <MethodComment>/** 
 * Create an empty tuple.  This should be used as infrequently as possible, use newTuple(int) instead.
 * @return Empty new tuple.
 */
</MethodComment>
            <ReturnType>Tuple</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newTuple</MethodName>
            <MethodComment>/** 
 * Create a tuple with size fields.  Whenever possible this is preferred over the null constructor, as the constructor can preallocate the size of the container holding the fields.  Once this is called, it is legal to call Tuple.set(x, object), where x &amp;lt; size.
 * @param size Number of fields in the tuple.
 * @return Tuple with size fields
 */
</MethodComment>
            <ReturnType>Tuple</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>size</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newTuple</MethodName>
            <MethodComment>/** 
 * Create a tuple from the provided list of objects.  The underlying list will be copied.
 * @param c List of objects to use as the fields of the tuple.
 * @return A tuple with the list objects as its fields
 */
</MethodComment>
            <ReturnType>Tuple</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>List</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newTupleNoCopy</MethodName>
            <MethodComment>/** 
 * Create a tuple from a provided list of objects, keeping the provided list.  The new tuple will take over ownership of the provided list.
 * @param list List of objects that will become the fields of the tuple.
 * @return A tuple with the list objects as its fields
 */
</MethodComment>
            <ReturnType>Tuple</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>list</ParamName>
                    <ParamType>List</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newTuple</MethodName>
            <MethodComment>/** 
 * Create a tuple with a single element.  This is useful because of the fact that bags (currently) only take tuples, we often end up sticking a single element in a tuple in order to put it in a bag.
 * @param datum Datum to put in the tuple.
 * @return A tuple with one field
 */
</MethodComment>
            <ReturnType>Tuple</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>datum</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>tupleClass</MethodName>
            <MethodComment>/** 
 * Return the actual class representing a tuple that the implementing factory will be returning.  This is needed because Hadoop needs to know the exact class we will be using for input and output.
 * @return Class that implements tuple.
 */
</MethodComment>
            <ReturnType>? extends Tuple</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>TupleFactory</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>resetSelf</MethodName>
            <MethodComment>/** 
 * Provided for testing purposes only.  This function should never be called by anybody but the unit tests.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>tupleRawComparatorClass</MethodName>
            <MethodComment>/** 
 * Return the actual class implementing the raw comparator for tuples that the factory will be returning. Ovverride this to allow Hadoop to speed up tuple sorting. The actual returned class should know the serialization details for the tuple. The default implementation  (PigTupleDefaultRawComparator) will serialize the data before comparison
 * @return Class that implements tuple raw comparator.
 */
</MethodComment>
            <ReturnType>? extends TupleRawComparator</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isFixedSize</MethodName>
            <MethodComment>/** 
 * This method is used to inspect whether the Tuples created by this factory will be of a fixed size when they are created. In practical terms, this means whether they support append or not.
 * @return where the Tuple is fixed or not
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>