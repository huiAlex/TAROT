<Class>
    <Id>559</Id>
    <Package>org.apache.pig.impl.util</Package>
    <ClassName>SpillableMemoryManager</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>NotificationListener</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>SpillableMemoryManager  /** 
 * This class Tracks the tenured pool and a list of Spillable objects. When memory gets low, this class will start requesting Spillable objects to free up memory. &lt;p&gt; Low memory is defined as more than 50% of the tenured pool being allocated. Spillable objects are tracked using WeakReferences so that the objects can be GCed even though this class has a reference to them.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>UNUSED_MEMORY_THRESHOLD_DEFAULT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>MEMORY_THRESHOLD_FRACTION_DEFAULT</FieldName>
            <FieldType>float</FieldType>
        </Field>
        <Field>
            <FieldName>COLLECTION_THRESHOLD_FRACTION_DEFAULT</FieldName>
            <FieldType>float</FieldType>
        </Field>
        <Field>
            <FieldName>spillables</FieldName>
            <FieldType>LinkedList</FieldType>
        </Field>
        <Field>
            <FieldName>spillables</FieldName>
            <FieldType>WeakReference&lt;Spillable&gt;</FieldType>
        </Field>
        <Field>
            <FieldName>spillablesSR</FieldName>
            <FieldType>LinkedList</FieldType>
        </Field>
        <Field>
            <FieldName>spillablesSR</FieldName>
            <FieldType>SpillablePtr</FieldType>
        </Field>
        <Field>
            <FieldName>spillLock</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>gcActivationSize</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>spillFileSizeThreshold</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>accumulatedFreeSize</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>memoryThresholdSize</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>collectionThresholdSize</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>firstUsageThreshExceededLogged</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>firstCollectionThreshExceededLogged</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>extraGCThresholdFraction</FieldName>
            <FieldType>float</FieldType>
        </Field>
        <Field>
            <FieldName>extraGCSpillSizeThreshold</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>blockRegisterOnSpill</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>tenuredHeap</FieldName>
            <FieldType>MemoryPoolMXBean</FieldType>
        </Field>
        <Field>
            <FieldName>manager</FieldName>
            <FieldType>SpillableMemoryManager</FieldType>
        </Field>
        <Field>
            <FieldName>spillable</FieldName>
            <FieldType>WeakReference</FieldType>
        </Field>
        <Field>
            <FieldName>spillable</FieldName>
            <FieldType>Spillable</FieldType>
        </Field>
        <Field>
            <FieldName>size</FieldName>
            <FieldType>long</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>staticDataCleanup</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>manager.spillables;clear;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>SpillableMemoryManager</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>List&lt;MemoryPoolMXBean&gt; [mpbeans=ManagementFactory.getMemoryPoolMXBeans()]</InnerVar>
                <InnerVar>long [totalSize=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>((NotificationEmitter)ManagementFactory.getMemoryMXBean());addNotificationListener;[this, null, null]</InnerMethodInvoke>
                <InnerMethodInvoke>null;configureMemoryThresholds;[MEMORY_THRESHOLD_FRACTION_DEFAULT, COLLECTION_THRESHOLD_FRACTION_DEFAULT, UNUSED_MEMORY_THRESHOLD_DEFAULT]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>configureMemoryThresholds</MethodName>
            <MethodComment>/** 
 * Configure thresholds for memory usage/collection threshold exceeded notifications. Uses memoryThresholdFraction and collectionMemoryThresholdFraction to configure thresholds for heap sizes less than 1GB and unusedMemoryThreshold for bigger heaps.
 * @param memoryThresholdFraction fraction of biggest heap for which we want to get memory usage threshold exceeded notifications
 * @param collectionMemoryThresholdFraction fraction of biggest heap for which we want to get collection threshold exceeded notifications
 * @param unusedMemoryThreshold Unused memory size below which we want to get notifications
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>memoryThresholdFraction</ParamName>
                    <ParamType>float</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>collectionMemoryThresholdFraction</ParamName>
                    <ParamType>float</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>unusedMemoryThreshold</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>long [tenuredHeapSize=tenuredHeap.getUsage().getMax()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>tenuredHeap;setCollectionUsageThreshold;[(long)(collectionThresholdSize)]</InnerMethodInvoke>
                <InnerMethodInvoke>tenuredHeap;setUsageThreshold;[(long)(memoryThresholdSize)]</InnerMethodInvoke>
                <InnerMethodInvoke>log;info;["Selected heap (" + tenuredHeap.getName() + ")"+ " of size "+ tenuredHeapSize+ " to monitor. collectionUsageThreshold = "+ tenuredHeap.getCollectionUsageThreshold()+ ", usageThreshold = "+ tenuredHeap.getUsageThreshold()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getInstance</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>SpillableMemoryManager</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>configure</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conf</ParamName>
                    <ParamType>Configuration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>float [memoryThresholdFraction=conf.getFloat(PigConfiguration.PIG_SPILL_MEMORY_USAGE_THRESHOLD_FRACTION,MEMORY_THRESHOLD_FRACTION_DEFAULT)]</InnerVar>
                <InnerVar>float [collectionThresholdFraction=conf.getFloat(PigConfiguration.PIG_SPILL_COLLECTION_THRESHOLD_FRACTION,COLLECTION_THRESHOLD_FRACTION_DEFAULT)]</InnerVar>
                <InnerVar>long [unusedMemoryThreshold=conf.getLong(PigConfiguration.PIG_SPILL_UNUSED_MEMORY_THRESHOLD_SIZE,UNUSED_MEMORY_THRESHOLD_DEFAULT)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;configureMemoryThresholds;[memoryThresholdFraction, collectionThresholdFraction, unusedMemoryThreshold]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>handleNotification</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>n</ParamName>
                    <ParamType>Notification</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>o</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CompositeData [cd=(CompositeData)n.getUserData()]</InnerVar>
                <InnerVar>MemoryNotificationInfo [info=MemoryNotificationInfo.from(cd)]</InnerVar>
                <InnerVar>long [toFree=0L]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compare</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>o1Ref</ParamName>
                    <ParamType>SpillablePtr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>o2Ref</ParamName>
                    <ParamType>SpillablePtr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>long [o1Size=o1Ref.getMemorySize()]</InnerVar>
                <InnerVar>long [o2Size=o2Ref.getMemorySize()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clearSpillables</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>registerSpillable</MethodName>
            <MethodComment>/** 
 * Register a spillable to be tracked. No need to unregister, the tracking will stop when the spillable is GCed.
 * @param s the spillable to track.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>Spillable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>SpillablePtr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>p</ParamName>
                    <ParamType>Spillable</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>get</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Spillable</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMemorySize</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>