<Class>
    <Id>352</Id>
    <Package>org.apache.pig.piggybank.storage.partition</Package>
    <ClassName>PathPartitionHelper</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>PathPartitionHelper  /** 
 * Implements the logic for:&lt;br/&gt; &lt;ul&gt; &lt;li&gt;Listing partition keys and values used in an hdfs path&lt;/li&gt; &lt;li&gt;Filtering of partitions from a pig filter operator expression&lt;/li&gt; &lt;/ul&gt; &lt;p/&gt; &lt;b&gt;Restrictions&lt;/b&gt; &lt;br/&gt; Function calls are not supported by this partition helper and it can only handle String values.&lt;br/&gt; This is normally not a problem given that partition values are part of the hdfs folder path and is given a&lt;br/&gt; determined value that would not need parsing by any external processes.&lt;br/&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>PARTITION_COLUMNS</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>PARITITION_FILTER_EXPRESSION</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>LOG</FieldName>
            <FieldType>Logger</FieldType>
        </Field>
        <Field>
            <FieldName>pathPartitioner</FieldName>
            <FieldType>PathPartitioner</FieldType>
        </Field>
        <Field>
            <FieldName>variableMapper</FieldName>
            <FieldType>VariableMapper</FieldType>
        </Field>
        <Field>
            <FieldName>valueExpressionMap</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>valueExpressionMap</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getPathPartitionKeyValues</MethodName>
            <MethodComment>/** 
 * Returns the Partition keys and each key's value for a single location.&lt;br/&gt; That is the location must be something like mytable/partition1=a/partition2=b/myfile.&lt;br/&gt; This method will return a map with [partition1='a', partition2='b']&lt;br/&gt; The work is delegated to the PathPartitioner class
 * @param location
 * @return Map of String, String
 * @throws IOException
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>location</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPartitionKeys</MethodName>
            <MethodComment>/** 
 * Returns the partition keys for a location.&lt;br/&gt; The work is delegated to the PathPartitioner class
 * @param location String must be the base directory for the partitions
 * @param conf
 * @return
 * @throws IOException
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>location</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>conf</ParamName>
                    <ParamType>Configuration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setPartitionFilterExpression</MethodName>
            <MethodComment>/** 
 * Sets the PARITITION_FILTER_EXPRESSION property in the UDFContext identified by the loaderClass.
 * @param partitionFilterExpression
 * @param loaderClass
 * @throws IOException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>partitionFilterExpression</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>loaderClass</ParamName>
                    <ParamType>? extends LoadFunc</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>signature</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>UDFContext.getUDFContext().getUDFProperties(loaderClass,new String[]{signature});setProperty;[PARITITION_FILTER_EXPRESSION, partitionFilterExpression]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setPartitionKeys</MethodName>
            <MethodComment>/** 
 * Reads the partition keys from the location i.e the base directory
 * @param location String must be the base directory for the partitions
 * @param conf
 * @param loaderClass
 * @throws IOException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>location</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>conf</ParamName>
                    <ParamType>Configuration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>loaderClass</ParamName>
                    <ParamType>? extends LoadFunc</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>signature</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Set&lt;String&gt; [partitionKeys=getPartitionKeys(location,conf)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>listStatus</MethodName>
            <MethodComment>/** 
 * This method is called by the FileInputFormat to find the input paths for which splits should be calculated.&lt;br/&gt; If applyDateRanges == true: Then the HiveRCDateSplitter is used to apply filtering on the input files.&lt;br/&gt; Else the default FileInputFormat listStatus method is used.
 * @param ctx JobContext
 * @param loaderClass this is chosen to be a subclass of LoadFunc to maintain some consistency.
 */
</MethodComment>
            <ReturnType>FileStatus</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>JobContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>loaderClass</ParamName>
                    <ParamType>? extends LoadFunc</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>signature</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Properties [properties=UDFContext.getUDFContext().getUDFProperties(loaderClass,new String[]{signature})]</InnerVar>
                <InnerVar>String [partitionExpression=properties.getProperty(PARITITION_FILTER_EXPRESSION)]</InnerVar>
                <InnerVar>ExpressionFactory [expressionFactory=null]</InnerVar>
                <InnerVar>String [partitionColumnStr=properties.getProperty(PathPartitionHelper.PARTITION_COLUMNS)]</InnerVar>
                <InnerVar>String[] [partitionKeys=(partitionColumnStr == null) ? null : partitionColumnStr.split(",")]</InnerVar>
                <InnerVar>Path[] [inputPaths=FileInputFormat.getInputPaths(ctx)]</InnerVar>
                <InnerVar>List&lt;FileStatus&gt; [splitPaths=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPartitionedFiles</MethodName>
            <MethodComment>/** 
 * Recursively works through all directories, skipping filtered partitions.
 * @param fs
 * @param fileStatus
 * @param partitionLevel
 * @param partitionKeys
 * @param splitPaths
 * @throws IOException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expressionFactory</ParamName>
                    <ParamType>ExpressionFactory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>partitionExpression</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fs</ParamName>
                    <ParamType>FileSystem</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fileStatus</ParamName>
                    <ParamType>FileStatus</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>partitionLevel</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>partitionKeys</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>splitPaths</ParamName>
                    <ParamType>FileStatus</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [partition=(partitionLevel &lt; partitionKeys.length) ? partitionKeys[partitionLevel] : null]</InnerVar>
                <InnerVar>Path [path=fileStatus.getPath()]</InnerVar>
                <InnerVar>int [nextPartitionLevel=partitionLevel + 1]</InnerVar>
                <InnerVar>FileStatus[] [childStatusArr=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>evaluatePartitionExpression</MethodName>
            <MethodComment>/** 
 * Evaluates the partitionExpression set in the HiveColumnarLoader.setPartitionExpression. * @
 * @param partitionExpression String
 * @param path Path
 * @return boolean
 * @throws IOException
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expressionFactory</ParamName>
                    <ParamType>ExpressionFactory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>partitionExpression</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>path</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [ret=true]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>VariableContext</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>variableMapper</ParamName>
                    <ParamType>VariableMapper</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getELResolver</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ELResolver</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFunctionMapper</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>FunctionMapper</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getVariableMapper</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>VariableMapper</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>MapVariableMapper</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expressionFactory</ParamName>
                    <ParamType>ExpressionFactory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>variableMap</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>resolveVariable</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ValueExpression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>variableName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setVariable</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ValueExpression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>variableName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>valueExpression</ParamName>
                    <ParamType>ValueExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>