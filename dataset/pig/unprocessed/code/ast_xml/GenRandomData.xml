<Class>
    <Id>490</Id>
    <Package>org.apache.pig.test.utils</Package>
    <ClassName>GenRandomData</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getRandMapFieldSchema</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ResourceFieldSchema</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>ResourceFieldSchema [bytefs=new ResourceFieldSchema()]</InnerVar>
                <InnerVar>ResourceSchema [mapSchema=new ResourceSchema()]</InnerVar>
                <InnerVar>ResourceFieldSchema [mapfs=new ResourceFieldSchema()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>bytefs;setType;[DataType.BYTEARRAY]</InnerMethodInvoke>
                <InnerMethodInvoke>mapSchema;setFields;[new ResourceFieldSchema[]{bytefs}]</InnerMethodInvoke>
                <InnerMethodInvoke>mapfs;setSchema;[mapSchema]</InnerMethodInvoke>
                <InnerMethodInvoke>mapfs;setType;[DataType.MAP]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>genRandMap</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>r</ParamName>
                    <ParamType>Random</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>numEnt</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Map&lt;String,Object&gt; [ret=new HashMap&lt;String,Object&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>genRandString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>r</ParamName>
                    <ParamType>Random</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>char[] [chars=new char[10]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>genRandLargeString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>r</ParamName>
                    <ParamType>Random</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>size</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>char[] [chars=new char[size]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>genRandDBA</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DataByteArray</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>r</ParamName>
                    <ParamType>Random</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>byte[] [bytes=new byte[10]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>r;nextBytes;[bytes]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>genRandTextDBA</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DataByteArray</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>r</ParamName>
                    <ParamType>Random</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSmallTupleFieldSchema</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ResourceFieldSchema</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>ResourceFieldSchema [stringfs=new ResourceFieldSchema()]</InnerVar>
                <InnerVar>ResourceFieldSchema [intfs=new ResourceFieldSchema()]</InnerVar>
                <InnerVar>ResourceSchema [tupleSchema=new ResourceSchema()]</InnerVar>
                <InnerVar>ResourceFieldSchema [tuplefs=new ResourceFieldSchema()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>stringfs;setType;[DataType.CHARARRAY]</InnerMethodInvoke>
                <InnerMethodInvoke>intfs;setType;[DataType.INTEGER]</InnerMethodInvoke>
                <InnerMethodInvoke>tupleSchema;setFields;[new ResourceFieldSchema[]{stringfs,intfs}]</InnerMethodInvoke>
                <InnerMethodInvoke>tuplefs;setSchema;[tupleSchema]</InnerMethodInvoke>
                <InnerMethodInvoke>tuplefs;setType;[DataType.TUPLE]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>genRandSmallTuple</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Tuple</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>r</ParamName>
                    <ParamType>Random</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>limit</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Tuple [t=new DefaultTuple()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t;append;[genRandString(r)]</InnerMethodInvoke>
                <InnerMethodInvoke>t;append;[r.nextInt(limit)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>genRandSmallTuple</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Tuple</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Tuple [t=new DefaultTuple()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t;append;[s]</InnerMethodInvoke>
                <InnerMethodInvoke>t;append;[value]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>genRandSmallTupDataBagWithNulls</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DataBag</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>r</ParamName>
                    <ParamType>Random</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>num</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>limit</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DataBag [db=DefaultBagFactory.getInstance().newDefaultBag()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSmallTupDataBagFieldSchema</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ResourceFieldSchema</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>ResourceFieldSchema [tuplefs=getSmallTupleFieldSchema()]</InnerVar>
                <InnerVar>ResourceSchema [bagSchema=new ResourceSchema()]</InnerVar>
                <InnerVar>ResourceFieldSchema [bagfs=new ResourceFieldSchema()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>bagSchema;setFields;[new ResourceFieldSchema[]{tuplefs}]</InnerMethodInvoke>
                <InnerMethodInvoke>bagfs;setSchema;[bagSchema]</InnerMethodInvoke>
                <InnerMethodInvoke>bagfs;setType;[DataType.BAG]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>genRandSmallTupDataBag</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DataBag</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>r</ParamName>
                    <ParamType>Random</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>num</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>limit</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DataBag [db=DefaultBagFactory.getInstance().newDefaultBag()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>genRandSmallBagTuple</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Tuple</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>r</ParamName>
                    <ParamType>Random</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>num</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>limit</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Tuple [t=new DefaultTuple()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t;append;[genRandSmallTupDataBag(r,num,limit)]</InnerMethodInvoke>
                <InnerMethodInvoke>t;append;[genRandDBA(r)]</InnerMethodInvoke>
                <InnerMethodInvoke>t;append;[genRandString(r)]</InnerMethodInvoke>
                <InnerMethodInvoke>t;append;[r.nextDouble()]</InnerMethodInvoke>
                <InnerMethodInvoke>t;append;[r.nextFloat()]</InnerMethodInvoke>
                <InnerMethodInvoke>t;append;[r.nextInt()]</InnerMethodInvoke>
                <InnerMethodInvoke>t;append;[r.nextLong()]</InnerMethodInvoke>
                <InnerMethodInvoke>t;append;[genRandMap(r,num)]</InnerMethodInvoke>
                <InnerMethodInvoke>t;append;[genRandSmallTuple(r,100)]</InnerMethodInvoke>
                <InnerMethodInvoke>t;append;[new Boolean(r.nextBoolean())]</InnerMethodInvoke>
                <InnerMethodInvoke>t;append;[new DateTime(r.nextLong())]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSmallBagTextTupleFieldSchema</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ResourceFieldSchema</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>ResourceFieldSchema [dbafs=new ResourceFieldSchema()]</InnerVar>
                <InnerVar>ResourceFieldSchema [stringfs=new ResourceFieldSchema()]</InnerVar>
                <InnerVar>ResourceFieldSchema [intfs=new ResourceFieldSchema()]</InnerVar>
                <InnerVar>ResourceFieldSchema [bagfs=getSmallTupDataBagFieldSchema()]</InnerVar>
                <InnerVar>ResourceFieldSchema [floatfs=new ResourceFieldSchema()]</InnerVar>
                <InnerVar>ResourceFieldSchema [doublefs=new ResourceFieldSchema()]</InnerVar>
                <InnerVar>ResourceFieldSchema [longfs=new ResourceFieldSchema()]</InnerVar>
                <InnerVar>ResourceFieldSchema [mapfs=new ResourceFieldSchema()]</InnerVar>
                <InnerVar>ResourceFieldSchema [tuplefs=getSmallTupleFieldSchema()]</InnerVar>
                <InnerVar>ResourceFieldSchema [boolfs=new ResourceFieldSchema()]</InnerVar>
                <InnerVar>ResourceFieldSchema [dtfs=new ResourceFieldSchema()]</InnerVar>
                <InnerVar>ResourceSchema [outSchema=new ResourceSchema()]</InnerVar>
                <InnerVar>ResourceFieldSchema [outfs=new ResourceFieldSchema()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>dbafs;setType;[DataType.BYTEARRAY]</InnerMethodInvoke>
                <InnerMethodInvoke>stringfs;setType;[DataType.CHARARRAY]</InnerMethodInvoke>
                <InnerMethodInvoke>intfs;setType;[DataType.INTEGER]</InnerMethodInvoke>
                <InnerMethodInvoke>floatfs;setType;[DataType.FLOAT]</InnerMethodInvoke>
                <InnerMethodInvoke>doublefs;setType;[DataType.DOUBLE]</InnerMethodInvoke>
                <InnerMethodInvoke>longfs;setType;[DataType.LONG]</InnerMethodInvoke>
                <InnerMethodInvoke>mapfs;setType;[DataType.MAP]</InnerMethodInvoke>
                <InnerMethodInvoke>boolfs;setType;[DataType.BOOLEAN]</InnerMethodInvoke>
                <InnerMethodInvoke>dtfs;setType;[DataType.DATETIME]</InnerMethodInvoke>
                <InnerMethodInvoke>outSchema;setFields;[new ResourceFieldSchema[]{bagfs,dbafs,stringfs,doublefs,floatfs,intfs,longfs,mapfs,tuplefs,boolfs,dtfs}]</InnerMethodInvoke>
                <InnerMethodInvoke>outfs;setSchema;[outSchema]</InnerMethodInvoke>
                <InnerMethodInvoke>outfs;setType;[DataType.TUPLE]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>genRandSmallBagTextTuple</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Tuple</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>r</ParamName>
                    <ParamType>Random</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>num</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>limit</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Tuple [t=new DefaultTuple()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t;append;[genRandSmallTupDataBag(r,num,limit)]</InnerMethodInvoke>
                <InnerMethodInvoke>t;append;[genRandTextDBA(r)]</InnerMethodInvoke>
                <InnerMethodInvoke>t;append;[genRandString(r)]</InnerMethodInvoke>
                <InnerMethodInvoke>t;append;[r.nextDouble()]</InnerMethodInvoke>
                <InnerMethodInvoke>t;append;[r.nextFloat()]</InnerMethodInvoke>
                <InnerMethodInvoke>t;append;[r.nextInt()]</InnerMethodInvoke>
                <InnerMethodInvoke>t;append;[r.nextLong()]</InnerMethodInvoke>
                <InnerMethodInvoke>t;append;[genRandMap(r,num)]</InnerMethodInvoke>
                <InnerMethodInvoke>t;append;[genRandSmallTuple(r,100)]</InnerMethodInvoke>
                <InnerMethodInvoke>t;append;[new Boolean(r.nextBoolean())]</InnerMethodInvoke>
                <InnerMethodInvoke>t;append;[new DateTime(r.nextLong())]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>genRandFullTupDataBag</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DataBag</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>r</ParamName>
                    <ParamType>Random</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>num</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>limit</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DataBag [db=DefaultBagFactory.getInstance().newDefaultBag()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFullTupTextDataBagFieldSchema</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ResourceFieldSchema</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>ResourceFieldSchema [tuplefs=getSmallBagTextTupleFieldSchema()]</InnerVar>
                <InnerVar>ResourceSchema [outBagSchema=new ResourceSchema()]</InnerVar>
                <InnerVar>ResourceFieldSchema [outBagfs=new ResourceFieldSchema()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>outBagSchema;setFields;[new ResourceFieldSchema[]{tuplefs}]</InnerMethodInvoke>
                <InnerMethodInvoke>outBagfs;setSchema;[outBagSchema]</InnerMethodInvoke>
                <InnerMethodInvoke>outBagfs;setType;[DataType.BAG]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>genRandFullTupTextDataBag</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DataBag</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>r</ParamName>
                    <ParamType>Random</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>num</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>limit</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DataBag [db=DefaultBagFactory.getInstance().newDefaultBag()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>genRandSmallBagTupleWithNulls</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Tuple</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>r</ParamName>
                    <ParamType>Random</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>num</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>limit</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Tuple [t=new DefaultTuple()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t;append;[genRandSmallTupDataBag(r,num,limit)]</InnerMethodInvoke>
                <InnerMethodInvoke>t;append;[genRandDBA(r)]</InnerMethodInvoke>
                <InnerMethodInvoke>t;append;[genRandString(r)]</InnerMethodInvoke>
                <InnerMethodInvoke>t;append;[r.nextDouble()]</InnerMethodInvoke>
                <InnerMethodInvoke>t;append;[r.nextFloat()]</InnerMethodInvoke>
                <InnerMethodInvoke>t;append;[r.nextInt()]</InnerMethodInvoke>
                <InnerMethodInvoke>t;append;[r.nextLong()]</InnerMethodInvoke>
                <InnerMethodInvoke>t;append;[genRandMap(r,num)]</InnerMethodInvoke>
                <InnerMethodInvoke>t;append;[genRandSmallTuple(r,100)]</InnerMethodInvoke>
                <InnerMethodInvoke>t;append;[new Boolean(r.nextBoolean())]</InnerMethodInvoke>
                <InnerMethodInvoke>t;append;[new DateTime(r.nextLong())]</InnerMethodInvoke>
                <InnerMethodInvoke>t;append;[null]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>genRandSmallBagTextTupleWithNulls</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Tuple</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>r</ParamName>
                    <ParamType>Random</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>num</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>limit</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Tuple [t=new DefaultTuple()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t;append;[genRandSmallTupDataBag(r,num,limit)]</InnerMethodInvoke>
                <InnerMethodInvoke>t;append;[genRandTextDBA(r)]</InnerMethodInvoke>
                <InnerMethodInvoke>t;append;[genRandString(r)]</InnerMethodInvoke>
                <InnerMethodInvoke>t;append;[r.nextDouble()]</InnerMethodInvoke>
                <InnerMethodInvoke>t;append;[r.nextFloat()]</InnerMethodInvoke>
                <InnerMethodInvoke>t;append;[r.nextInt()]</InnerMethodInvoke>
                <InnerMethodInvoke>t;append;[r.nextLong()]</InnerMethodInvoke>
                <InnerMethodInvoke>t;append;[genRandMap(r,num)]</InnerMethodInvoke>
                <InnerMethodInvoke>t;append;[genRandSmallTuple(r,100)]</InnerMethodInvoke>
                <InnerMethodInvoke>t;append;[new Boolean(r.nextBoolean())]</InnerMethodInvoke>
                <InnerMethodInvoke>t;append;[new DateTime(r.nextLong())]</InnerMethodInvoke>
                <InnerMethodInvoke>t;append;[null]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>genFloatDataBag</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DataBag</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>r</ParamName>
                    <ParamType>Random</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>column</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DataBag [db=DefaultBagFactory.getInstance().newDefaultBag()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFloatDataBagFieldSchema</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ResourceFieldSchema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>column</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ResourceFieldSchema [intfs=new ResourceFieldSchema()]</InnerVar>
                <InnerVar>ResourceSchema [tupleSchema=new ResourceSchema()]</InnerVar>
                <InnerVar>ResourceFieldSchema[] [fss=new ResourceFieldSchema[column]]</InnerVar>
                <InnerVar>ResourceFieldSchema [tuplefs=new ResourceFieldSchema()]</InnerVar>
                <InnerVar>ResourceSchema [bagSchema=new ResourceSchema()]</InnerVar>
                <InnerVar>ResourceFieldSchema [bagfs=new ResourceFieldSchema()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>intfs;setType;[DataType.INTEGER]</InnerMethodInvoke>
                <InnerMethodInvoke>tupleSchema;setFields;[fss]</InnerMethodInvoke>
                <InnerMethodInvoke>tuplefs;setSchema;[tupleSchema]</InnerMethodInvoke>
                <InnerMethodInvoke>tuplefs;setType;[DataType.TUPLE]</InnerMethodInvoke>
                <InnerMethodInvoke>bagSchema;setFields;[new ResourceFieldSchema[]{tuplefs}]</InnerMethodInvoke>
                <InnerMethodInvoke>bagfs;setSchema;[bagSchema]</InnerMethodInvoke>
                <InnerMethodInvoke>bagfs;setType;[DataType.BAG]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>genMixedTupleToConvert</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Tuple</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>r</ParamName>
                    <ParamType>Random</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Tuple [t=TupleFactory.getInstance().newTuple()]</InnerVar>
                <InnerVar>long [l=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t;append;[r.nextInt()]</InnerMethodInvoke>
                <InnerMethodInvoke>t;append;[r.nextInt()]</InnerMethodInvoke>
                <InnerMethodInvoke>t;append;[l]</InnerMethodInvoke>
                <InnerMethodInvoke>t;append;[r.nextFloat() * 1000]</InnerMethodInvoke>
                <InnerMethodInvoke>t;append;[r.nextDouble() * 10000]</InnerMethodInvoke>
                <InnerMethodInvoke>t;append;[genRandString(r)]</InnerMethodInvoke>
                <InnerMethodInvoke>t;append;["K" + genRandString(r)]</InnerMethodInvoke>
                <InnerMethodInvoke>t;append;["K" + genRandString(r)]</InnerMethodInvoke>
                <InnerMethodInvoke>t;append;["K" + genRandString(r)]</InnerMethodInvoke>
                <InnerMethodInvoke>t;append;[new DateTime(r.nextLong())]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMixedTupleToConvertFieldSchema</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ResourceFieldSchema</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>ResourceFieldSchema [stringfs=new ResourceFieldSchema()]</InnerVar>
                <InnerVar>ResourceFieldSchema [intfs=new ResourceFieldSchema()]</InnerVar>
                <InnerVar>ResourceFieldSchema [longfs=new ResourceFieldSchema()]</InnerVar>
                <InnerVar>ResourceFieldSchema [floatfs=new ResourceFieldSchema()]</InnerVar>
                <InnerVar>ResourceFieldSchema [doublefs=new ResourceFieldSchema()]</InnerVar>
                <InnerVar>ResourceFieldSchema [boolfs=new ResourceFieldSchema()]</InnerVar>
                <InnerVar>ResourceFieldSchema [dtfs=new ResourceFieldSchema()]</InnerVar>
                <InnerVar>ResourceSchema [tupleSchema=new ResourceSchema()]</InnerVar>
                <InnerVar>ResourceFieldSchema [tuplefs=new ResourceFieldSchema()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>stringfs;setType;[DataType.CHARARRAY]</InnerMethodInvoke>
                <InnerMethodInvoke>intfs;setType;[DataType.INTEGER]</InnerMethodInvoke>
                <InnerMethodInvoke>longfs;setType;[DataType.LONG]</InnerMethodInvoke>
                <InnerMethodInvoke>floatfs;setType;[DataType.FLOAT]</InnerMethodInvoke>
                <InnerMethodInvoke>doublefs;setType;[DataType.DOUBLE]</InnerMethodInvoke>
                <InnerMethodInvoke>boolfs;setType;[DataType.BOOLEAN]</InnerMethodInvoke>
                <InnerMethodInvoke>dtfs;setType;[DataType.DATETIME]</InnerMethodInvoke>
                <InnerMethodInvoke>tupleSchema;setFields;[new ResourceFieldSchema[]{stringfs,longfs,intfs,doublefs,floatfs,stringfs,intfs,doublefs,floatfs,boolfs,dtfs}]</InnerMethodInvoke>
                <InnerMethodInvoke>tuplefs;setSchema;[tupleSchema]</InnerMethodInvoke>
                <InnerMethodInvoke>tuplefs;setType;[DataType.TUPLE]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>