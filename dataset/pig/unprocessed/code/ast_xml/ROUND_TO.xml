<Class>
    <Id>729</Id>
    <Package>org.apache.pig.builtin</Package>
    <ClassName>ROUND_TO</ClassName>
    <SuperClass>EvalFunc</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ROUND_TO  /** 
 * ROUND_TO safely rounds a number to a given precision by using an intermediate BigDecimal. The too-often seen trick of doing (1000.0 * ROUND(x/1000)) is not only hard to read but also fails to produce numerically accurate results. Given a single data atom and number of digits, it returns a double extending to the given number of decimal places. The result is a multiple of ten to the power given by the digits argument: a negative value zeros out correspondingly many places to the left of the decimal point: ROUND_TO(0.9876543, 3) is 0.988; ROUND_TO(0.9876543, 0) is 1.0; and ROUND_TO(1234.56, -2) is 1200.0. The optional mode argument specifies the  {@link java.math.RoundingMode rounding mode}; by default,  {@link java.math.RoundingMode#HALF_EVEN HALF_EVEN} is used.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>exec</MethodName>
            <MethodComment>/** 
 * java level API
 * @param input expects a numeric value to round, a number of digits to keep, and an optional rounding mode.
 * @return output returns a single numeric value, the number with only those digits retained
 */
</MethodComment>
            <ReturnType>Double</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>outputSchema</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Schema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>Schema</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getArgToFuncMapping</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>FuncSpec</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>List&lt;FuncSpec&gt; [funcList=new ArrayList&lt;FuncSpec&gt;()]</InnerVar>
                <InnerVar>Schema [s_bty_2=new Schema()]</InnerVar>
                <InnerVar>Schema [s_bty_3=new Schema()]</InnerVar>
                <InnerVar>Schema [s_dbl_2=new Schema()]</InnerVar>
                <InnerVar>Schema [s_dbl_3=new Schema()]</InnerVar>
                <InnerVar>Schema [s_flt_2=new Schema()]</InnerVar>
                <InnerVar>Schema [s_flt_3=new Schema()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>s_bty_2;add;[new Schema.FieldSchema(null,DataType.BYTEARRAY)]</InnerMethodInvoke>
                <InnerMethodInvoke>s_bty_2;add;[new Schema.FieldSchema(null,DataType.BYTEARRAY)]</InnerMethodInvoke>
                <InnerMethodInvoke>s_bty_3;add;[new Schema.FieldSchema(null,DataType.BYTEARRAY)]</InnerMethodInvoke>
                <InnerMethodInvoke>s_bty_3;add;[new Schema.FieldSchema(null,DataType.BYTEARRAY)]</InnerMethodInvoke>
                <InnerMethodInvoke>s_bty_3;add;[new Schema.FieldSchema(null,DataType.INTEGER)]</InnerMethodInvoke>
                <InnerMethodInvoke>s_dbl_2;add;[new Schema.FieldSchema(null,DataType.DOUBLE)]</InnerMethodInvoke>
                <InnerMethodInvoke>s_dbl_2;add;[new Schema.FieldSchema(null,DataType.INTEGER)]</InnerMethodInvoke>
                <InnerMethodInvoke>s_dbl_3;add;[new Schema.FieldSchema(null,DataType.DOUBLE)]</InnerMethodInvoke>
                <InnerMethodInvoke>s_dbl_3;add;[new Schema.FieldSchema(null,DataType.INTEGER)]</InnerMethodInvoke>
                <InnerMethodInvoke>s_dbl_3;add;[new Schema.FieldSchema(null,DataType.INTEGER)]</InnerMethodInvoke>
                <InnerMethodInvoke>s_flt_2;add;[new Schema.FieldSchema(null,DataType.FLOAT)]</InnerMethodInvoke>
                <InnerMethodInvoke>s_flt_2;add;[new Schema.FieldSchema(null,DataType.INTEGER)]</InnerMethodInvoke>
                <InnerMethodInvoke>s_flt_3;add;[new Schema.FieldSchema(null,DataType.FLOAT)]</InnerMethodInvoke>
                <InnerMethodInvoke>s_flt_3;add;[new Schema.FieldSchema(null,DataType.INTEGER)]</InnerMethodInvoke>
                <InnerMethodInvoke>s_flt_3;add;[new Schema.FieldSchema(null,DataType.INTEGER)]</InnerMethodInvoke>
                <InnerMethodInvoke>funcList;add;[new FuncSpec(this.getClass().getName(),s_bty_2)]</InnerMethodInvoke>
                <InnerMethodInvoke>funcList;add;[new FuncSpec(this.getClass().getName(),s_bty_3)]</InnerMethodInvoke>
                <InnerMethodInvoke>funcList;add;[new FuncSpec(DoubleRoundTo.class.getName(),s_dbl_2)]</InnerMethodInvoke>
                <InnerMethodInvoke>funcList;add;[new FuncSpec(DoubleRoundTo.class.getName(),s_dbl_3)]</InnerMethodInvoke>
                <InnerMethodInvoke>funcList;add;[new FuncSpec(FloatRoundTo.class.getName(),s_flt_2)]</InnerMethodInvoke>
                <InnerMethodInvoke>funcList;add;[new FuncSpec(FloatRoundTo.class.getName(),s_flt_3)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>allowCompileTimeCalculation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>