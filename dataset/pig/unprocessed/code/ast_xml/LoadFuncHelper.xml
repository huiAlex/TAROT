<Class>
    <Id>38</Id>
    <Package>org.apache.pig.piggybank.storage.allloader</Package>
    <ClassName>LoadFuncHelper</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>LoadFuncHelper  /** 
 * Contains the logic for finding a LoadFunc based on the definition of: &lt;ul&gt; &lt;li&gt;file.extension.loaders&lt;/li&gt; &lt;li&gt;file.format.loaders&lt;/li&gt; &lt;/ul&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>FILE_EXTENSION_LOADERS</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>magicNumberExtensionMap</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>magicNumberExtensionMap</FieldName>
            <FieldType>MagicNumber</FieldType>
        </Field>
        <Field>
            <FieldName>conf</FieldName>
            <FieldType>Configuration</FieldType>
        </Field>
        <Field>
            <FieldName>fileSystem</FieldName>
            <FieldType>FileSystem</FieldType>
        </Field>
        <Field>
            <FieldName>loadFunctionExtensionTagMap</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>loadFunctionExtensionTagMap</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>extensionTagsMap</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>extensionTagsMap</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>magic</FieldName>
            <FieldType>byte[]</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>LoadFuncHelper</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conf</ParamName>
                    <ParamType>Configuration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [fileExtensionLoaders=conf.get(FILE_EXTENSION_LOADERS)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildMagicNumberExtensionMap</MethodName>
            <MethodComment>/** 
 * @return
 */
</MethodComment>
            <ReturnType>MagicNumber</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Map&lt;MagicNumber,String&gt; [magicNumberExtensionMap=new HashMap&lt;MagicNumber,String&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>magicNumberExtensionMap;put;[new MagicNumber(new byte[]{83,69,81}), "seq"]</InnerMethodInvoke>
                <InnerMethodInvoke>magicNumberExtensionMap;put;[new MagicNumber(new byte[]{82,67,70}), "rc"]</InnerMethodInvoke>
                <InnerMethodInvoke>magicNumberExtensionMap;put;[new MagicNumber(new byte[]{-119,76,90}), "lzo"]</InnerMethodInvoke>
                <InnerMethodInvoke>magicNumberExtensionMap;put;[new MagicNumber(new byte[]{31,-117,8}), "gz"]</InnerMethodInvoke>
                <InnerMethodInvoke>magicNumberExtensionMap;put;[new MagicNumber(new byte[]{66,90,104}), "bz2"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>determineFirstFile</MethodName>
            <MethodComment>/** 
 * If location is a directory the first file found is returned
 * @param location
 * @return
 * @throws IOException if no file is found a FrontendException is thrown
 */
</MethodComment>
            <ReturnType>Path</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>location</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Path [path=new Path(location)]</InnerVar>
                <InnerVar>FileStatus [status=fileSystem.getFileStatus(path)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>determineFunction</MethodName>
            <MethodComment>/** 
 * If location is a directory the first file found in the directory is used.&lt;br/&gt; The file extension of the file will be searched against the file.extension.loaders mappings. If none found null is returned.
 * @param location
 * @return
 * @throws IOException
 */
</MethodComment>
            <ReturnType>FuncSpec</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>location</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>determineFunction</MethodName>
            <MethodComment>/** 
 * The file extension of the file will be searched against the file.extension.loaders mappings. If none found null is returned.
 * @param path
 * @param location
 * @return
 * @throws IOException
 */
</MethodComment>
            <ReturnType>FuncSpec</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>location</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>path</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [fileName=path.getName()]</InnerVar>
                <InnerVar>FuncSpec [funcSpec=getLoadPerExtension(fileName,path)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFuncSpecFromContent</MethodName>
            <MethodComment>/** 
 * Tries to identify the extension and there by the loader from the content type.
 * @param path
 * @return
 * @throws IOException
 */
</MethodComment>
            <ReturnType>FuncSpec</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>path</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>FSDataInputStream [dataIn=null]</InnerVar>
                <InnerVar>byte[] [magic=new byte[3]]</InnerVar>
                <InnerVar>int [read=-1]</InnerVar>
                <InnerVar>FuncSpec [funcSpec=null]</InnerVar>
                <InnerVar>String [extensionMapping=magicNumberExtensionMap.get(new MagicNumber(magic))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSequenceFileKeyClass</MethodName>
            <MethodComment>/** 
 * Open a SequenceFile.Reader instance and return the keyClassName
 * @param path
 * @return
 * @throws IOException
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>path</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [keyClassName=null]</InnerVar>
                <InnerVar>SequenceFile.Reader [reader=new SequenceFile.Reader(fileSystem,path,conf)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLoadPerExtension</MethodName>
            <MethodComment>/** 
 * Search for the correct loader based on the extension and tags mappings.
 * @param fileName
 * @param path
 * @return
 */
</MethodComment>
            <ReturnType>FuncSpec</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fileName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>path</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [extension=null]</InnerVar>
                <InnerVar>String [applicableTag=null]</InnerVar>
                <InnerVar>String [loadFuncDefinition=null]</InnerVar>
                <InnerVar>FuncSpec [funcSpec=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getApplicableTag</MethodName>
            <MethodComment>/** 
 * Searches in the path for the first occurrence of the tags associated with the extension.&lt;br/&gt; If this extension has no tags an empty string is returned.&lt;br/&gt; If it has tags and no tag is found in the path null is returned.&lt;br/&gt;
 * @param extension
 * @param path
 * @return
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>extension</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>path</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Set&lt;String&gt; [tags=extensionTagsMap.get(extension)]</InnerVar>
                <InnerVar>String [applicableTag=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cutExtension</MethodName>
            <MethodComment>/** 
 * @param fileName
 * @return String return the file name without the last extension e.g.file.rc.gz will return file.rc
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fileName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [name=null]</InnerVar>
                <InnerVar>int [index=fileName.lastIndexOf('.')]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getExtension</MethodName>
            <MethodComment>/** 
 * @param fileName
 * @return String return the last file name extension e.g. file.rc.gz willreturn gz
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fileName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [extension=null]</InnerVar>
                <InnerVar>int [index=fileName.lastIndexOf('.')]</InnerVar>
                <InnerVar>int [pos=index + 1]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFirstFile</MethodName>
            <MethodComment>/** 
 * Looks for and returns the first file it can find.
 * @return Path null is no file was found
 * @throws IOException
 */
</MethodComment>
            <ReturnType>Path</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fileSystem</ParamName>
                    <ParamType>FileSystem</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>path</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Path [currentPath=path]</InnerVar>
                <InnerVar>Path [file=null]</InnerVar>
                <InnerVar>FileStatus[] [paths=fileSystem.listStatus(currentPath)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>Arrays;sort;[paths]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>MagicNumber</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>magic</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hashCode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [prime=31]</InnerVar>
                <InnerVar>int [result=1]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>equals</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>obj</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MagicNumber [other=(MagicNumber)obj]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>