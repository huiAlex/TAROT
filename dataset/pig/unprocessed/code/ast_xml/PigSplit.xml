<Class>
    <Id>79</Id>
    <Package>org.apache.pig.backend.hadoop.executionengine.mapReduceLayer</Package>
    <ClassName>PigSplit</ClassName>
    <SuperClass>InputSplit</SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Writable</SuperInterface>
        <SuperInterface>Configurable</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>PigSplit  /** 
 * The main split class that maintains important information about the input split. The reason this class implements Configurable is so that Hadoop will call {@link Configurable#setConf(Configuration)} on the backend so we can usethe Configuration to create the SerializationFactory to deserialize the wrapped InputSplit.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>FILESPLIT_CLASSNAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>targetOps</FieldName>
            <FieldType>ArrayList</FieldType>
        </Field>
        <Field>
            <FieldName>targetOps</FieldName>
            <FieldType>OperatorKey</FieldType>
        </Field>
        <Field>
            <FieldName>inputIndex</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>wrappedSplits</FieldName>
            <FieldType>InputSplit[]</FieldType>
        </Field>
        <Field>
            <FieldName>splitIndex</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>currentIdx</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>isMultiInputs</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>disableCounter</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>conf</FieldName>
            <FieldType>Configuration</FieldType>
        </Field>
        <Field>
            <FieldName>totalSplits</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>length</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>locations</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>splitLocationInfos</FieldName>
            <FieldType>SplitLocationInfo[]</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>PigSplit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PigSplit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>wrappedSplits</ParamName>
                    <ParamType>InputSplit[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>inputIndex</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>targetOps</ParamName>
                    <ParamType>OperatorKey</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>splitIndex</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTargetOps</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>OperatorKey</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getWrappedSplit</MethodName>
            <MethodComment>/** 
 * This methods returns the actual InputSplit (as returned by the {@link InputFormat}) which this class is wrapping.
 * @return the wrappedSplit
 */
</MethodComment>
            <ReturnType>InputSplit</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getWrappedSplit</MethodName>
            <MethodComment>/** 
 * @param idx the index into the wrapped splits
 * @return the specified wrapped split
 */
</MethodComment>
            <ReturnType>InputSplit</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>idx</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLocations</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compare</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>o1</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>o2</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>long [diff=o1.getValue() - o2.getValue()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLocationInfo</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>SplitLocationInfo[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compare</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>o1</ParamName>
                    <ParamType>SplitLocationInfo</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>o2</ParamName>
                    <ParamType>SplitLocationInfo</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>long [diff=o1.getValue() - o2.getValue()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLength</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLength</MethodName>
            <MethodComment>/** 
 * Return the length of a wrapped split
 * @param idx the index into the wrapped splits
 * @return number of wrapped splits
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>idx</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readFields</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>is</ParamName>
                    <ParamType>DataInput</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [splitLen=is.readInt()]</InnerVar>
                <InnerVar>int [distinctSplitClassCount=is.readInt()]</InnerVar>
                <InnerVar>boolean [nonFileSplit=false]</InnerVar>
                <InnerVar>String[] [distinctSplitClassName=new String[distinctSplitClassCount]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>write</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>os</ParamName>
                    <ParamType>DataOutput</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Set&lt;String&gt; [splitClassNameSet=new HashSet&lt;String&gt;()]</InnerVar>
                <InnerVar>List&lt;String&gt; [distinctSplitClassList=new ArrayList&lt;String&gt;()]</InnerVar>
                <InnerVar>boolean [nonFileSplit=distinctSplitClassList.size() &gt; 1 || (!distinctSplitClassList.contains(FILESPLIT_CLASSNAME))]</InnerVar>
                <InnerVar>SerializationFactory [sf=new SerializationFactory(conf)]</InnerVar>
                <InnerVar>boolean [compress=nonFileSplit &amp;&amp; conf.getBoolean(PigConfiguration.PIG_COMPRESS_INPUT_SPLITS,PigConfiguration.PIG_COMPRESS_INPUT_SPLITS_DEFAULT)]</InnerVar>
                <InnerVar>WritableByteArray [byteStream=null]</InnerVar>
                <InnerVar>Deflater [deflater=null]</InnerVar>
                <InnerVar>DataOutputStream [dos=null]</InnerVar>
                <InnerVar>DataOutput [dataOut=compress ? dos : os]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>os;writeBoolean;[disableCounter]</InnerMethodInvoke>
                <InnerMethodInvoke>os;writeBoolean;[isMultiInputs]</InnerMethodInvoke>
                <InnerMethodInvoke>os;writeInt;[totalSplits]</InnerMethodInvoke>
                <InnerMethodInvoke>os;writeInt;[splitIndex]</InnerMethodInvoke>
                <InnerMethodInvoke>os;writeInt;[inputIndex]</InnerMethodInvoke>
                <InnerMethodInvoke>null;writeObject;[targetOps, os]</InnerMethodInvoke>
                <InnerMethodInvoke>os;writeInt;[wrappedSplits.length]</InnerMethodInvoke>
                <InnerMethodInvoke>distinctSplitClassList;addAll;[splitClassNameSet]</InnerMethodInvoke>
                <InnerMethodInvoke>os;writeInt;[distinctSplitClassList.size()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeObject</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>obj</ParamName>
                    <ParamType>Serializable</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>os</ParamName>
                    <ParamType>DataOutput</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ByteArrayOutputStream [baos=new ByteArrayOutputStream()]</InnerVar>
                <InnerVar>ObjectOutputStream [oos=new ObjectOutputStream(baos)]</InnerVar>
                <InnerVar>byte[] [bytes=baos.toByteArray()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>oos;writeObject;[obj]</InnerMethodInvoke>
                <InnerMethodInvoke>oos;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>os;writeInt;[bytes.length]</InnerMethodInvoke>
                <InnerMethodInvoke>os;write;[bytes]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readObject</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>is</ParamName>
                    <ParamType>DataInput</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>byte[] [bytes=new byte[is.readInt()]]</InnerVar>
                <InnerVar>ObjectInputStream [ois=new ObjectInputStream(new ByteArrayInputStream(bytes))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>is;readFully;[bytes]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSplitIndex</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setMultiInputs</MethodName>
            <MethodComment>/** 
 * Indicates this map has multiple input (such as the result of a join operation).
 * @param b true if the map has multiple inputs
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>b</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isMultiInputs</MethodName>
            <MethodComment>/** 
 * Returns true if the map has multiple inputs, else false
 * @return true if the map has multiple inputs, else false
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getConf</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Configuration</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setConf</MethodName>
            <MethodComment>/** 
 * (non-Javadoc)
 * @see org.apache.hadoop.conf.Configurable#setConf(org.apache.hadoop.conf.Configuration) This will be called by {@link PigInputFormat#getSplits(org.apache.hadoop.mapreduce.JobContext)}to be used in  {@link #write(DataOutput)} for serializing thewrappedSplit This will be called by Hadoop in the backend to set the right Job Configuration (hadoop will invoke this method because PigSplit implements {@link Configurable} - we need this Configuration in readFields() todeserialize the wrappedSplit
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conf</ParamName>
                    <ParamType>Configuration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getInputIndex</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNumPaths</MethodName>
            <MethodComment>/** 
 * @return the number of wrapped splits
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTotalSplits</MethodName>
            <MethodComment>/** 
 * @return the totalSplitspackage level access because we don't want LoadFunc implementations to get this information - this is to be used only from PigInputFormat
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setTotalSplits</MethodName>
            <MethodComment>/** 
 * @param totalSplits the totalSplits to setpackage level access because we don't want LoadFunc implementations to get this information - this is to be used only from PigInputFormat
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>totalSplits</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>StringBuilder [st=new StringBuilder()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>st;append;["Number of splits :" + wrappedSplits.length + "\n"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setDisableCounter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>disableCounter</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>disableCounter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setCurrentIdx</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>idx</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>