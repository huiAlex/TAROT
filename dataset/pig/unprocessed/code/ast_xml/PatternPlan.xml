<Class>
    <Id>806</Id>
    <Package>org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans</Package>
    <ClassName>PatternPlan</ClassName>
    <SuperClass>BaseOperatorPlan</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>PatternPlan  /** 
 * Used for finding/representing a pattern in the plan This class represents the pattern Finds only a single matching pattern This is finding a sub-graph( represented by pattern) in the graph(plan)
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>ptNodesVisited</FieldName>
            <FieldType>ArrayList</FieldType>
        </Field>
        <Field>
            <FieldName>ptNodesVisited</FieldName>
            <FieldType>PatternNode</FieldType>
        </Field>
        <Field>
            <FieldName>currentPlan</FieldName>
            <FieldType>OperatorPlan</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>match</MethodName>
            <MethodComment>/** 
 * Return true if the given plan has nodes that match the pattern  represented by this class If a match is found, the PatterNodes in the plan will return non  null node for getMatch(). 
 * @param inpPlan - input plan to match
 * @return true if match is found
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>inpPlan</ParamName>
                    <ParamType>? extends Operator&lt;?&gt;</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PatternPlan [pattern=this]</InnerVar>
                <InnerVar>PatternNode [ptNode=(PatternNode)pattern.getSinks().get(0)]</InnerVar>
                <InnerVar>Iterator [it=currentPlan.iterator()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;reset;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reset</MethodName>
            <MethodComment>/** 
 * Reset the matching information if the pattern has been used to find  a match
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Iterator&lt;org.apache.pig.newplan.Operator&gt; [iter=this.getOperators()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ptNodesVisited;clear;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>match</MethodName>
            <MethodComment>/** 
 * Check if the pattern node ptNode matches given Operator plOp
 * @param ptNode
 * @param plOp
 * @return
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ptNode</ParamName>
                    <ParamType>PatternNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>plOp</ParamName>
                    <ParamType>Operator</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Class&lt;?&gt; [ptClass=ptNode.getClassName()]</InnerVar>
                <InnerVar>Class&lt;?&gt; [plClass=plOp.getClass()]</InnerVar>
                <InnerVar>int [ptNodesVisitedIdx=ptNodesVisited.size()]</InnerVar>
                <InnerVar>List&lt;org.apache.pig.newplan.Operator&gt; [ptPreds=this.getPredecessors(ptNode)]</InnerVar>
                <InnerVar>List&lt;Operator&lt;?&gt;&gt; [plPreds=currentPlan.getPredecessors(plOp)]</InnerVar>
                <InnerVar>List&lt;org.apache.pig.newplan.Operator&gt; [ptSuccs=this.getSuccessors(ptNode)]</InnerVar>
                <InnerVar>List&lt;Operator&lt;?&gt;&gt; [plSuccs=currentPlan.getSuccessors(plOp)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ptNode;setMatch;[plOp]</InnerMethodInvoke>
                <InnerMethodInvoke>ptNodesVisited;add;[ptNode]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>resetNewlyMatchedPtNodes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ptNodesVisitedIdx</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>match</MethodName>
            <MethodComment>/** 
 * try matching list of pattern nodes with list of plan nodes . these are either predecessors or successors of a matching node if pattern nodes is a ordered subset of plan nodes, return true
 * @param ptList list of pattern nodes
 * @param plList list of plan nodes
 * @return true if matched
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ptList</ParamName>
                    <ParamType>org.apache.pig.newplan.Operator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>plList</ParamName>
                    <ParamType>Operator&lt;?&gt;</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [plStart=0]</InnerVar>
                <InnerVar>int [ptIdx=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>create</MethodName>
            <MethodComment>/** 
 * This function can be used to create a new PatternPlan if the pattern nodes have at most one parent/child, and they are connected to each other. The PatternNode corresponding to the i'th class in classList will be the predecessor of the one corresponding to i+1'th class.
 * @param classList
 * @return new PatterPlan corresponding to classList
 */
</MethodComment>
            <ReturnType>PatternPlan</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classList</ParamName>
                    <ParamType>Class&lt;?&gt;[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PatternPlan [ptPlan=new PatternPlan()]</InnerVar>
                <InnerVar>PatternNode [prevNode=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>