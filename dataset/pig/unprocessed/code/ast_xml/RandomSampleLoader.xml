<Class>
    <Id>1029</Id>
    <Package>org.apache.pig.impl.builtin</Package>
    <ClassName>RandomSampleLoader</ClassName>
    <SuperClass>SampleLoader</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>RandomSampleLoader  /** 
 * A loader that samples the data.   It randomly samples tuples from input. The number of tuples to be sampled has to be set before the first call to getNext(). see documentation of getNext() call.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>samples</FieldName>
            <FieldType>Tuple[]</FieldType>
        </Field>
        <Field>
            <FieldName>nextSampleIdx</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>RandomSampleLoader</MethodName>
            <MethodComment>/** 
 * Construct with a class of loader to use.
 * @param funcSpec func spec of the loader to use.
 * @param ns Number of samples per map to collect. Arguments are passed as strings instead of actual types (FuncSpec, int)  because FuncSpec only supports string arguments to UDF constructors.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>funcSpec</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ns</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNext</MethodName>
            <MethodComment>/** 
 * Allocate a buffer for numSamples elements, populate it with the  first numSamples tuples, and continue scanning rest of the input. For every ith next() call, we generate a random number r s.t. 0&lt;=r&lt;i, and if r&lt;numSamples we insert the new tuple into our buffer at position r. This gives us a random sample of the tuples in the partition.
 */
</MethodComment>
            <ReturnType>Tuple</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Tuple [t=null]</InnerVar>
                <InnerVar>int [rowNum=numSamples + 1]</InnerVar>
                <InnerVar>Random [randGen=new Random()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>prepareToRead</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>reader</ParamName>
                    <ParamType>RecordReader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>split</ParamName>
                    <ParamType>PigSplit</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSample</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Tuple</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>