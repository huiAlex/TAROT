<Class>
    <Id>739</Id>
    <Package>org.apache.pig.test.utils.dotGraph</Package>
    <ClassName>OperatorPlanLoader</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>plan</FieldName>
            <FieldType>P</FieldType>
        </Field>
        <Field>
            <FieldName>dotGraph</FieldName>
            <FieldType>DotGraph</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>load</MethodName>
            <MethodComment>/** 
 * This method is used for loading an operator plan encoded in Dot format
 * @param dotContent the dot content
 * @param clazz the plan type to be created
 * @return
 */
</MethodComment>
            <ReturnType>P</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dotContent</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>P</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DotGraphReader [dotReader=new DotGraphReader()]</InnerVar>
                <InnerVar>DotGraph [graph=dotReader.load(dotContent)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>loadFromFile</MethodName>
            <MethodComment>/** 
 * Convenient method for loading directly from file
 * @param file
 * @param clazz
 * @return
 */
</MethodComment>
            <ReturnType>P</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>file</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>P</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DotGraphReader [dotReader=new DotGraphReader()]</InnerVar>
                <InnerVar>DotGraph [graph=dotReader.loadFromFile(file)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>loadFromFileWithGraph</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PlanAndGraphEntry</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>file</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>P</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DotGraphReader [dotReader=new DotGraphReader()]</InnerVar>
                <InnerVar>DotGraph [graph=dotReader.loadFromFile(file)]</InnerVar>
                <InnerVar>P [plan=constructPlan(graph,clazz)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PlanAndGraphEntry</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>plan</ParamName>
                    <ParamType>P</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dotGraph</ParamName>
                    <ParamType>DotGraph</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createOperator</MethodName>
            <MethodComment>/** 
 * This method has be overridden to instantiate the correct vertex type
 * @param node
 * @param plan
 * @return
 */
</MethodComment>
            <ReturnType>E</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>DotNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>plan</ParamName>
                    <ParamType>P</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>constructPlan</MethodName>
            <MethodComment>/** 
 * Construct the plan based on the given Dot graph
 * @param graph
 * @return
 */
</MethodComment>
            <ReturnType>P</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>graph</ParamName>
                    <ParamType>DotGraph</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>P</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>P [plan]</InnerVar>
                <InnerVar>Map&lt;String,E&gt; [nameMap=new HashMap&lt;String,E&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getKey</MethodName>
            <MethodComment>/** 
 * Helper for retrieving operator key from encoded attributes. By default, it will look for "key" in attributes. If no key is found, an arbitrary one will be generated.
 * @param attributes
 * @return
 */
</MethodComment>
            <ReturnType>OperatorKey</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>attributes</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [key=attributes.get("key")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>