<Class>
    <Id>842</Id>
    <Package>org.apache.pig.test.utils.planComparer</Package>
    <ClassName>PlanStructuralComparer</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>PlanStructuralComparer  /** 
 * This abstract class is a base for plan equality comparer
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>plan1ToPlan2</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>plan1ToPlan2</FieldName>
            <FieldType>OperatorKey</FieldType>
        </Field>
        <Field>
            <FieldName>plan2ToPlan1</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>plan2ToPlan1</FieldName>
            <FieldType>OperatorKey</FieldType>
        </Field>
        <Field>
            <FieldName>nodeMatcher</FieldName>
            <FieldType>NodeMatcher</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>structurallyEquals</MethodName>
            <MethodComment>/** 
 * This method does structural comparison of two plans based on:- - Graph connectivity The current implementation is based on simple key-based vertex matching.
 * @param plan1 the first plan
 * @param plan2 the second plan
 * @param messages where the error messages go
 * @return
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>plan1</ParamName>
                    <ParamType>P</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>plan2</ParamName>
                    <ParamType>P</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>messages</ParamName>
                    <ParamType>StringBuilder</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [diffCount=0]</InnerVar>
                <InnerVar>Iterator&lt;OperatorKey&gt; [keyIter1=plan1.getKeys().keySet().iterator()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>structurallyEquals</MethodName>
            <MethodComment>/** 
 * Same as above in case just want to compare but don't want to know the error messages
 * @param plan1 the first plan
 * @param plan2 the second plan
 * @return
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>plan1</ParamName>
                    <ParamType>P</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>plan2</ParamName>
                    <ParamType>P</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setNodeMatcher</MethodName>
            <MethodComment>/** 
 * This allows different implementation of node matcher
 * @param matcher
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>matcher</ParamName>
                    <ParamType>NodeMatcher</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateInverseMap</MethodName>
            <MethodComment>/** 
 * Generate inverse map of the given map
 * @param map
 * @return
 */
</MethodComment>
            <ReturnType>OperatorKey</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>map</ParamName>
                    <ParamType>OperatorKey</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Map&lt;OperatorKey,OperatorKey&gt; [inverseMap=new HashMap&lt;OperatorKey,OperatorKey&gt;()]</InnerVar>
                <InnerVar>Iterator&lt;OperatorKey&gt; [iter=map.keySet().iterator()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>diffOutgoingEdges</MethodName>
            <MethodComment>/** 
 * Report operator1.edges - operator2.edges  (Non-commutative)
 * @param operator1
 * @param operator2
 * @param plan1
 * @param plan2
 * @param messages
 * @param plan1Name
 * @param plan2Name
 * @return count(operator1.edges - operator2.edges)
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>operator1</ParamName>
                    <ParamType>E</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>operator2</ParamName>
                    <ParamType>E</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>plan1</ParamName>
                    <ParamType>P</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>plan2</ParamName>
                    <ParamType>P</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>messages</ParamName>
                    <ParamType>StringBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>plan1Name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>plan2Name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [diffCount=0]</InnerVar>
                <InnerVar>List&lt;E&gt; [list1=plan1.getSuccessors(operator1)]</InnerVar>
                <InnerVar>List&lt;E&gt; [list2=plan2.getSuccessors(operator2)]</InnerVar>
                <InnerVar>Map&lt;OperatorKey,Boolean&gt; [edgeMap2=new HashMap&lt;OperatorKey,Boolean&gt;()]</InnerVar>
                <InnerVar>Map&lt;OperatorKey,Boolean&gt; [edgeMap1=new HashMap&lt;OperatorKey,Boolean&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>appendOpKey</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>operatorKey</ParamName>
                    <ParamType>OperatorKey</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sb</ParamName>
                    <ParamType>StringBuilder</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>sb;append;["("]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;[operatorKey.toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;[")"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>appendMissingEdgeMessage</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fromKey</ParamName>
                    <ParamType>OperatorKey</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>toKey</ParamName>
                    <ParamType>OperatorKey</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>messages</ParamName>
                    <ParamType>StringBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>planName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>messages;append;["Edge "]</InnerMethodInvoke>
                <InnerMethodInvoke>null;appendOpKey;[fromKey, messages]</InnerMethodInvoke>
                <InnerMethodInvoke>messages;append;[" -&gt; "]</InnerMethodInvoke>
                <InnerMethodInvoke>null;appendOpKey;[toKey, messages]</InnerMethodInvoke>
                <InnerMethodInvoke>messages;append;[" doesn't exist"]</InnerMethodInvoke>
                <InnerMethodInvoke>messages;append;["\n"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>