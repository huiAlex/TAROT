<Class>
    <Id>851</Id>
    <Package>org.apache.pig.backend.hadoop.executionengine.mapReduceLayer</Package>
    <ClassName>PigGenericMapBase</ClassName>
    <SuperClass>Mapper</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>PigGenericMapBase  /** 
 * This class is the base class for PigMapBase, which has slightly difference among different versions of hadoop. PigMapBase implementation is located in $PIG_HOME/shims.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>keyType</FieldName>
            <FieldType>byte</FieldType>
        </Field>
        <Field>
            <FieldName>mp</FieldName>
            <FieldType>PhysicalPlan</FieldType>
        </Field>
        <Field>
            <FieldName>stores</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>stores</FieldName>
            <FieldType>POStore</FieldType>
        </Field>
        <Field>
            <FieldName>tf</FieldName>
            <FieldType>TupleFactory</FieldType>
        </Field>
        <Field>
            <FieldName>inIllustrator</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>outputCollector</FieldName>
            <FieldType>Context</FieldType>
        </Field>
        <Field>
            <FieldName>pigReporter</FieldName>
            <FieldType>ProgressableReporter</FieldType>
        </Field>
        <Field>
            <FieldName>errorInMap</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>roots</FieldName>
            <FieldType>PhysicalOperator[]</FieldType>
        </Field>
        <Field>
            <FieldName>leaf</FieldName>
            <FieldType>PhysicalOperator</FieldType>
        </Field>
        <Field>
            <FieldName>initialized</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>setMapPlan</MethodName>
            <MethodComment>/** 
 * for local map/reduce simulation
 * @param plan the map plan
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>plan</ParamName>
                    <ParamType>PhysicalPlan</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cleanup</MethodName>
            <MethodComment>/** 
 * Will be called when all the tuples in the input are done. So reporter thread should be closed.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>Context</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>UDFFinishVisitor [finisher=new UDFFinishVisitor(mp,new DependencyOrderWalker&lt;PhysicalOperator,PhysicalPlan&gt;(mp))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>PhysicalOperator;setReporter;[null]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setup</MethodName>
            <MethodComment>/** 
 * Configures the mapper with the map plan and the reproter thread
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>Context</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Configuration [job=context.getConfiguration()]</InnerVar>
                <InnerVar>Properties [log4jProperties=(Properties)ObjectSerializer.deserialize(job.get(PigImplConstants.PIG_LOG4J_PROPERTIES))]</InnerVar>
                <InnerVar>PigStatusReporter [pigStatusReporter=PigStatusReporter.getInstance()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>SpillableMemoryManager.getInstance();configure;[job]</InnerMethodInvoke>
                <InnerMethodInvoke>context.getConfiguration();set;[PigConstants.TASK_INDEX, Integer.toString(context.getTaskAttemptID().getTaskID().getId())]</InnerMethodInvoke>
                <InnerMethodInvoke>PigMapReduce.sJobConfInternal;set;[context.getConfiguration()]</InnerMethodInvoke>
                <InnerMethodInvoke>PigContext;setPackageImportList;[(ArrayList&lt;String&gt;)ObjectSerializer.deserialize(job.get("udf.import.list"))]</InnerMethodInvoke>
                <InnerMethodInvoke>SchemaTupleBackend;initialize;[job]</InnerMethodInvoke>
                <InnerMethodInvoke>MapRedUtil;setupUDFContext;[job]</InnerMethodInvoke>
                <InnerMethodInvoke>pigStatusReporter;setContext;[new MRTaskContext(context)]</InnerMethodInvoke>
                <InnerMethodInvoke>log;info;["Aliases being processed per job phase (AliasName[line,offset]): " + job.get("pig.alias.location")]</InnerMethodInvoke>
                <InnerMethodInvoke>Utils;setDefaultTimeZone;[PigMapReduce.sJobConfInternal.get()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>map</MethodName>
            <MethodComment>/** 
 * The map function that attaches the inpTuple appropriately and executes the map plan if its not empty. Collects the result of execution into oc or the input directly to oc if map plan empty. The collection is left abstract for the map-only or map-reduce job to implement. Map-only collects the tuple as-is whereas map-reduce collects it after extracting the key and indexed tuple.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Text</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>inpTuple</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>Context</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;runPipeline;[leaf]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>runPipeline</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>leaf</ParamName>
                    <ParamType>PhysicalOperator</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>collect</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>oc</ParamName>
                    <ParamType>Context</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tuple</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>InterruptedException</ExceptionType>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>inIllustrator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>Context</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getKeyType</MethodName>
            <MethodComment>/** 
 * @return the keyType
 */
</MethodComment>
            <ReturnType>byte</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setKeyType</MethodName>
            <MethodComment>/** 
 * @param keyType the keyType to set
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>keyType</ParamName>
                    <ParamType>byte</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getIllustratorContext</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Context</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conf</ParamName>
                    <ParamType>Configuration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>DataBag</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>output</ParamName>
                    <ParamType>Pair&lt;PigNullableWritable,Writable&gt;</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>split</ParamName>
                    <ParamType>InputSplit</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>