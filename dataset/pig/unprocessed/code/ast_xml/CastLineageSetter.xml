<Class>
    <Id>548</Id>
    <Package>org.apache.pig.newplan.logical.visitor</Package>
    <ClassName>CastLineageSetter</ClassName>
    <SuperClass>AllExpressionVisitor</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>CastLineageSetter  /** 
 * Find uid lineage information. Set the load function in CastExpression  if it needs to convert bytearray to another type.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>msgCollector</FieldName>
            <FieldType>CompilationMessageCollector</FieldType>
        </Field>
        <Field>
            <FieldName>uid2LoadFuncMap</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>uid2LoadFuncMap</FieldName>
            <FieldType>Long</FieldType>
        </Field>
        <Field>
            <FieldName>uid2LoadFuncMap</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>uid2LoadFuncMap</FieldName>
            <FieldType>Long</FieldType>
        </Field>
        <Field>
            <FieldName>msgCollector</FieldName>
            <FieldType>CompilationMessageCollector</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>CastLineageSetter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>plan</ParamName>
                    <ParamType>LogicalPlan</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>msgCollector</ParamName>
                    <ParamType>CompilationMessageCollector</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LineageFindRelVisitor [lineageFinder=new LineageFindRelVisitor(plan)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>lineageFinder;visit;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getVisitor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>LogicalExpressionVisitor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>exprPlan</ParamName>
                    <ParamType>LogicalExpressionPlan</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>CastLineageSetterExpVisitor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expPlan</ParamName>
                    <ParamType>OperatorPlan</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>uid2LoadFuncMap</ParamName>
                    <ParamType>Long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>msgCollector</ParamName>
                    <ParamType>CompilationMessageCollector</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cast</ParamName>
                    <ParamType>CastExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>byte [inType=cast.getExpression().getType()]</InnerVar>
                <InnerVar>byte [outType=cast.getType()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>containsByteArrayOrEmtpyInSchema</MethodName>
            <MethodComment>/** 
 * @param fs
 * @return true if fs is of complex type and contains a bytearray or empty inner schema
 * @throws FrontendException
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fs</ParamName>
                    <ParamType>LogicalFieldSchema</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>