<Class>
    <Id>373</Id>
    <Package>org.apache.pig.builtin</Package>
    <ClassName>InvokerGenerator</ClassName>
    <SuperClass>EvalFunc</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>className_</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>methodName_</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>argumentTypes_</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>isInitialized</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>generatedFunction</FieldName>
            <FieldType>InvokerFunction</FieldType>
        </Field>
        <Field>
            <FieldName>outputSchema</FieldName>
            <FieldType>Schema</FieldType>
        </Field>
        <Field>
            <FieldName>uniqueId</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>returnTypeMap</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>returnTypeMap</FieldName>
            <FieldType>Class&lt;?&gt;</FieldType>
        </Field>
        <Field>
            <FieldName>inverseTypeMap</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>inverseTypeMap</FieldName>
            <FieldType>Class&lt;?&gt;</FieldType>
        </Field>
        <Field>
            <FieldName>primitiveSignature</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>primitiveSignature</FieldName>
            <FieldType>Class&lt;?&gt;</FieldType>
        </Field>
        <Field>
            <FieldName>nameToClassObjectMap</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>nameToClassObjectMap</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>buf</FieldName>
            <FieldType>byte[]</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>InvokerGenerator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>className</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>methodName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>argumentTypes</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>exec</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>outputSchema</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Schema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>Schema</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getUniqueId</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initialize</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Class&lt;?&gt; [clazz]</InnerVar>
                <InnerVar>Class&lt;?&gt;[] [arguments=getArgumentClassArray(argumentTypes_)]</InnerVar>
                <InnerVar>Method [method]</InnerVar>
                <InnerVar>boolean [isStatic=Modifier.isStatic(method.getModifiers())]</InnerVar>
                <InnerVar>Class&lt;?&gt; [returnClazz=method.getReturnType()]</InnerVar>
                <InnerVar>Byte [type]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>outputSchema;add;[new Schema.FieldSchema(null,type)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getArgumentClassArray</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Class&lt;?&gt;[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>argumentTypes</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Class&lt;?&gt;[] [arguments=new Class&lt;?&gt;[argumentTypes.length]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateInvokerFunction</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>InvokerFunction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>className</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>method</ParamName>
                    <ParamType>Method</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isStatic</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>arguments</ParamName>
                    <ParamType>Class&lt;?&gt;[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>byte[] [byteCode=generateInvokerFunctionBytecode(className,method,isStatic,arguments)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateInvokerFunctionBytecode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>byte[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>className</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>method</ParamName>
                    <ParamType>Method</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isStatic</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>arguments</ParamName>
                    <ParamType>Class&lt;?&gt;[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [isInterface=method.getDeclaringClass().isInterface()]</InnerVar>
                <InnerVar>ClassWriter [cw=new ClassWriter(0)]</InnerVar>
                <InnerVar>MethodVisitor [mv=cw.visitMethod(ACC_PUBLIC,"eval","(Lorg/apache/pig/data/Tuple;)Ljava/lang/Object;",null,new String[]{"java/io/IOException"})]</InnerVar>
                <InnerVar>int [next=2]</InnerVar>
                <InnerVar>int [begin=0]</InnerVar>
                <InnerVar>String [signature=buildSignatureString(arguments,method.getReturnType())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cw;visit;[V1_6, ACC_PUBLIC + ACC_SUPER, className, null, "java/lang/Object", new String[]{"org/apache/pig/builtin/InvokerFunction"}]</InnerMethodInvoke>
                <InnerMethodInvoke>null;makeConstructor;[cw]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitCode;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[isStatic ? INVOKESTATIC : isInterface ? INVOKEINTERFACE : INVOKEVIRTUAL, getMethodStyleName(method.getDeclaringClass()), method.getName(), signature]</InnerMethodInvoke>
                <InnerMethodInvoke>null;boxIfPrimitive;[mv, method.getReturnType()]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ARETURN]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMaxs;[2, (isStatic ? 2 : 3) + arguments.length]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitEnd;[]</InnerMethodInvoke>
                <InnerMethodInvoke>cw;visitEnd;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildSignatureString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>arguments</ParamName>
                    <ParamType>Class&lt;?&gt;[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>returnClazz</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [sig="("]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getObjectVersion</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMethodStyleName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>boxIfPrimitive</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <ParamType>MethodVisitor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [boxedClass=getMethodStyleName(inverseTypeMap.get(clazz))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKESTATIC, boxedClass, "valueOf", "(" + getMethodStyleName(clazz) + ")L"+ boxedClass+ ";"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>unboxIfPrimitive</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <ParamType>MethodVisitor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [methodName=clazz.getSimpleName() + "Value"]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKEVIRTUAL, getMethodStyleName(inverseTypeMap.get(clazz)), methodName, "()" + getMethodStyleName(clazz)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>loadAndStoreArgument</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <ParamType>MethodVisitor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>loadIdx</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>storeIdx</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>castName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addConst;[mv, loadIdx]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKEINTERFACE, "org/apache/pig/data/Tuple", "get", "(I)Ljava/lang/Object;"]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitTypeInsn;[CHECKCAST, castName]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ASTORE, storeIdx]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addConst</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <ParamType>MethodVisitor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>idx</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeConstructor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cw</ParamName>
                    <ParamType>ClassWriter</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodVisitor [mv=cw.visitMethod(ACC_PUBLIC,"&lt;init&gt;","()V",null,null)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitCode;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKESPECIAL, "java/lang/Object", "&lt;init&gt;", "()V"]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[RETURN]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMaxs;[1, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitEnd;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ByteClassLoader</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>buf</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>InvokerFunction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getInvokerFunction</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>InvokerFunction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>buf</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>