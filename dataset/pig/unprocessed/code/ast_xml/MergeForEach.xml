<Class>
    <Id>1067</Id>
    <Package>org.apache.pig.newplan.logical.rules</Package>
    <ClassName>MergeForEach</ClassName>
    <SuperClass>Rule</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>subPlan</FieldName>
            <FieldType>OperatorSubPlan</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>MergeForEach</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildPattern</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>OperatorPlan</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>LogicalPlan [plan=new LogicalPlan()]</InnerVar>
                <InnerVar>LogicalRelationalOperator [foreach1=new LOForEach(plan)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>plan;add;[foreach1]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNewTransformer</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Transformer</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>check</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>matched</ParamName>
                    <ParamType>OperatorPlan</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LOForEach [foreach1=(LOForEach)matched.getSources().get(0)]</InnerVar>
                <InnerVar>List&lt;Operator&gt; [succs=currentPlan.getSuccessors(foreach1)]</InnerVar>
                <InnerVar>LOForEach [foreach2=(LOForEach)succs.get(0)]</InnerVar>
                <InnerVar>Iterator&lt;Operator&gt; [it=foreach2.getInnerPlan().getOperators()]</InnerVar>
                <InnerVar>LOGenerate [gen1=(LOGenerate)foreach1.getInnerPlan().getSinks().get(0)]</InnerVar>
                <InnerVar>Set&lt;Integer&gt; [inputs=new HashSet&lt;Integer&gt;()]</InnerVar>
                <InnerVar>boolean [duplicateInputs=false]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reportChanges</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>OperatorPlan</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOperatorToMerge</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Operator</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>op</ParamName>
                    <ParamType>Operator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>newPlan</ParamName>
                    <ParamType>OperatorPlan</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>newForEach</ParamName>
                    <ParamType>LOForEach</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Operator [opToMerge=op]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addBranchToPlan</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Operator</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>gen</ParamName>
                    <ParamType>LOGenerate</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>branch</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>newPlan</ParamName>
                    <ParamType>OperatorPlan</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>newForEach</ParamName>
                    <ParamType>LOForEach</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Operator [opNextToGen]</InnerVar>
                <InnerVar>Operator [op=gen.getPlan().getPredecessors(gen).get(branch)]</InnerVar>
                <InnerVar>Operator [opToMerge=getOperatorToMerge(op,newPlan,newForEach)]</InnerVar>
                <InnerVar>Operator [pred]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>newPlan;add;[opToMerge]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>transform</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>matched</ParamName>
                    <ParamType>OperatorPlan</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LOForEach [foreach1=(LOForEach)matched.getSources().get(0)]</InnerVar>
                <InnerVar>LOGenerate [gen1=(LOGenerate)foreach1.getInnerPlan().getSinks().get(0)]</InnerVar>
                <InnerVar>LOForEach [foreach2=(LOForEach)currentPlan.getSuccessors(foreach1).get(0)]</InnerVar>
                <InnerVar>LOGenerate [gen2=(LOGenerate)foreach2.getInnerPlan().getSinks().get(0)]</InnerVar>
                <InnerVar>LOForEach [newForEach=new LOForEach(currentPlan)]</InnerVar>
                <InnerVar>LogicalPlan [newForEachInnerPlan=new LogicalPlan()]</InnerVar>
                <InnerVar>List&lt;LogicalExpressionPlan&gt; [newExpList=new ArrayList&lt;LogicalExpressionPlan&gt;()]</InnerVar>
                <InnerVar>LOGenerate [newGen=new LOGenerate(newForEachInnerPlan,newExpList,gen2.getFlattenFlags())]</InnerVar>
                <InnerVar>Iterator&lt;Operator&gt; [iter=newForEach.getInnerPlan().getOperators()]</InnerVar>
                <InnerVar>Collection&lt;Operator&gt; [newSoftLinkPreds=Utils.mergeCollection(currentPlan.getSoftLinkPredecessors(foreach1),currentPlan.getSoftLinkPredecessors(foreach2))]</InnerVar>
                <InnerVar>Collection&lt;Operator&gt; [foreach1SoftLinkPred=null]</InnerVar>
                <InnerVar>Collection&lt;Operator&gt; [foreach2SoftLinkPred=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>newForEach;setInnerPlan;[newForEachInnerPlan]</InnerMethodInvoke>
                <InnerMethodInvoke>newForEach;setAlias;[foreach2.getAlias()]</InnerMethodInvoke>
                <InnerMethodInvoke>newForEach;setRequestedParallelism;[foreach1.getRequestedParallelism()]</InnerMethodInvoke>
                <InnerMethodInvoke>newGen;setUserDefinedSchema;[gen2.getUserDefinedSchema()]</InnerMethodInvoke>
                <InnerMethodInvoke>newForEachInnerPlan;add;[newGen]</InnerMethodInvoke>
                <InnerMethodInvoke>currentPlan;removeAndReconnect;[foreach1]</InnerMethodInvoke>
                <InnerMethodInvoke>currentPlan;replace;[foreach2, newForEach]</InnerMethodInvoke>
                <InnerMethodInvoke>subPlan;add;[newForEach]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>