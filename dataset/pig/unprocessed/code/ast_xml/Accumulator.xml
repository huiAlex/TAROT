<Class>
    <Id>694</Id>
    <Package>org.apache.pig</Package>
    <ClassName>Accumulator</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Accumulator  /** 
 * An interface that allows UDFs that take a bag to accumulate tuples in chunks rather than take the whole set at once.  This is intended for UDFs that do not need to see all of the tuples together but cannot be used with the combiner.  This lowers the memory needs, avoiding the need to spill large bags, and thus speeds up the query.  An example is something like session analysis. It cannot be used with the combiner because all it's inputs must first be ordered.  But it does not need to see all the tuples at once.  UDF implementors might also choose to implement this interface so that if other UDFs in the FOREACH implement it it can be used.
 * @since Pig 0.6
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>accumulate</MethodName>
            <MethodComment>/** 
 * Pass tuples to the UDF.
 * @param b A tuple containing a single field, which is a bag.  The bag will contain the setof tuples being passed to the UDF in this iteration.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>b</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getValue</MethodName>
            <MethodComment>/** 
 * Called when all tuples from current key have been passed to accumulate.
 * @return the value for the UDF for this key.
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cleanup</MethodName>
            <MethodComment>/** 
 * Called after getValue() to prepare processing for next key. 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>