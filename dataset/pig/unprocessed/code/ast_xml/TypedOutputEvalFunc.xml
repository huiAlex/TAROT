<Class>
    <Id>334</Id>
    <Package>org.apache.pig</Package>
    <ClassName>TypedOutputEvalFunc</ClassName>
    <SuperClass>EvalFunc</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>TypedOutputEvalFunc  /** 
 * Base class for Pig UDFs that are functions from Tuples to generic type OUT. Handles marshalling objects, basic error checking, etc. Also infers outputSchema and provides a function to verify the input Tuple. &lt;P&gt;&lt;/P&gt; Extend this class and implement the &lt;pre&gt;OUT exec(Tuple input)&lt;/pre&gt; method when writting a UDF that operates on multiple inputs from the Tuple.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>outTypeClass</FieldName>
            <FieldType>Class</FieldType>
        </Field>
        <Field>
            <FieldName>outTypeClass</FieldName>
            <FieldType>OUT</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getOutputTypeClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>OUT</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>TypedOutputEvalFunc</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>verifyInput</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>minimumSize</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;verifyUdfInput;[getCounterGroup(), input, minimumSize]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCounterGroup</MethodName>
            <MethodComment>/** 
 * Incremented counters will use this as the counter group. Typically this works fine, since the subclass name is enough to identify the UDF. In some cases though (i.e. a UDF wrapper that is a facade to a number of different transformation functions), a more specific group name is needed.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTypeArguments</MethodName>
            <MethodComment>/** 
 * Get the actual type arguments a child class has used to extend a generic base class.
 * @param baseClass the base class
 * @param childClass the child class
 * @return a list of the raw classes for the actual type arguments.
 */
</MethodComment>
            <ReturnType>Class&lt;?&gt;</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>baseClass</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>childClass</ParamName>
                    <ParamType>? extends T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Map&lt;Type,Type&gt; [resolvedTypes=Maps.newHashMap()]</InnerVar>
                <InnerVar>Type [type=childClass]</InnerVar>
                <InnerVar>Type[] [actualTypeArguments]</InnerVar>
                <InnerVar>List&lt;Class&lt;?&gt;&gt; [typeArgumentsAsClasses=new ArrayList&lt;Class&lt;?&gt;&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getClass</MethodName>
            <MethodComment>/** 
 * Get the underlying class for a type, or null if the type is a variable type.
 * @param type the type
 * @return the underlying class
 */
</MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>Type</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>verifyUdfInput</MethodName>
            <MethodComment>/** 
 * Increment Hadoop counters for bad inputs which are either null or too small.
 * @param klass the name of the calling class, for recording purposes
 * @param input the tuple passed to the UDF.
 * @param minimumSize the minimum size required of the tuple.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>klass</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>minimumSize</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>safeIncrCounter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>group</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>increment</ParamName>
                    <ParamType>Long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>PigStatusReporter.getInstance();incrCounter;[group, name, increment]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>