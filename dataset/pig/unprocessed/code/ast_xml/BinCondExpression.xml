<Class>
    <Id>1094</Id>
    <Package>org.apache.pig.newplan.logical.expression</Package>
    <ClassName>BinCondExpression</ClassName>
    <SuperClass>LogicalExpression</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>BinCondExpression</MethodName>
            <MethodComment>/** 
 * Will add this operator to the plan and connect it to the left and right hand side operators and the condition operator
 * @param plan plan this operator is part of
 * @param lhs expression on its left hand side
 * @param rhs expression on its right hand side
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>plan</ParamName>
                    <ParamType>OperatorPlan</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>condition</ParamName>
                    <ParamType>LogicalExpression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lhs</ParamName>
                    <ParamType>LogicalExpression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rhs</ParamName>
                    <ParamType>LogicalExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>plan;add;[this]</InnerMethodInvoke>
                <InnerMethodInvoke>plan;connect;[this, condition]</InnerMethodInvoke>
                <InnerMethodInvoke>plan;connect;[this, lhs]</InnerMethodInvoke>
                <InnerMethodInvoke>plan;connect;[this, rhs]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCondition</MethodName>
            <MethodComment>/** 
 * Returns the operator which handles this condition
 * @return expression which handles the condition
 * @throws FrontendException
 */
</MethodComment>
            <ReturnType>LogicalExpression</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLhs</MethodName>
            <MethodComment>/** 
 * Get the left hand side of this expression.
 * @return expression on the left hand side
 * @throws FrontendException
 */
</MethodComment>
            <ReturnType>LogicalExpression</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRhs</MethodName>
            <MethodComment>/** 
 * Get the right hand side of this expression.
 * @return expression on the right hand side
 * @throws FrontendException
 */
</MethodComment>
            <ReturnType>LogicalExpression</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>accept</MethodName>
            <MethodComment>/** 
 * @link org.apache.pig.newplan.Operator#accept(org.apache.pig.newplan.PlanVisitor)
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>v</ParamName>
                    <ParamType>PlanVisitor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>((LogicalExpressionVisitor)v);visit;[this]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isEqual</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>other</ParamName>
                    <ParamType>Operator</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFieldSchema</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>LogicalSchema.LogicalFieldSchema</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>LogicalFieldSchema [argFs=getLhs().getFieldSchema()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>fieldSchema;resetUid;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>deepCopy</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>LogicalExpression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lgExpPlan</ParamName>
                    <ParamType>LogicalExpressionPlan</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LogicalExpression [copy=new BinCondExpression(lgExpPlan,this.getCondition().deepCopy(lgExpPlan),this.getLhs().deepCopy(lgExpPlan),this.getRhs().deepCopy(lgExpPlan))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>copy;setLocation;[new SourceLocation(location)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>