<Class>
    <Id>824</Id>
    <Package>org.apache.pig.builtin</Package>
    <ClassName>STRSPLIT</ClassName>
    <SuperClass>EvalFunc</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>STRSPLIT  /** 
 * Wrapper around Java's String.split&lt;br&gt; input tuple: first column is assumed to have a string to split;&lt;br&gt; the optional second column is assumed to have the delimiter or regex to split on;&lt;br&gt; if not provided, it's assumed to be '\s' (space)&lt;br&gt; the optional third column may provide a limit to the number of results.&lt;br&gt; If limit is not provided, 0 is assumed, as per Java's split().
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>tupleFactory</FieldName>
            <FieldType>TupleFactory</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>exec</MethodName>
            <MethodComment>/** 
 * Wrapper around Java's String.split
 * @param input tuple; first column is assumed to have a string to split;the optional second column is assumed to have the delimiter or regex to split on;&lt;br&gt; if not provided, it's assumed to be '\s' (space) the optional third column may provide a limit to the number of results.&lt;br&gt; If limit is not provided, 0 is assumed, as per Java's split().
 * @exception java.io.IOException
 */
</MethodComment>
            <ReturnType>Tuple</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>outputSchema</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Schema</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>Schema</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getArgToFuncMapping</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>FuncSpec</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>List&lt;FuncSpec&gt; [funcList=new ArrayList&lt;FuncSpec&gt;()]</InnerVar>
                <InnerVar>Schema [s=new Schema(new Schema.FieldSchema(null,DataType.CHARARRAY))]</InnerVar>
                <InnerVar>Schema [s1=new Schema()]</InnerVar>
                <InnerVar>Schema [s2=new Schema()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>s1;add;[new Schema.FieldSchema(null,DataType.CHARARRAY)]</InnerMethodInvoke>
                <InnerMethodInvoke>s1;add;[new Schema.FieldSchema(null,DataType.CHARARRAY)]</InnerMethodInvoke>
                <InnerMethodInvoke>s2;add;[new Schema.FieldSchema(null,DataType.CHARARRAY)]</InnerMethodInvoke>
                <InnerMethodInvoke>s2;add;[new Schema.FieldSchema(null,DataType.CHARARRAY)]</InnerMethodInvoke>
                <InnerMethodInvoke>s2;add;[new Schema.FieldSchema(null,DataType.INTEGER)]</InnerMethodInvoke>
                <InnerMethodInvoke>funcList;add;[new FuncSpec(this.getClass().getName(),s)]</InnerMethodInvoke>
                <InnerMethodInvoke>funcList;add;[new FuncSpec(this.getClass().getName(),s1)]</InnerMethodInvoke>
                <InnerMethodInvoke>funcList;add;[new FuncSpec(this.getClass().getName(),s2)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FrontendException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>allowCompileTimeCalculation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>