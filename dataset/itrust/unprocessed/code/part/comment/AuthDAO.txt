/**
 * AuthDAO is for anything that has to do with authentication. Most methods access the users table.
 * 
 * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
 * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
 * added. DAOs can assume that all data has been validated and is correct.
 * 
 * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
 * accessed by DAOFactory ( * connections and/or accessing other DAOs.
 * 
 *  * 
 */

/**
	 * The typical constructor.
	 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
	 */

/**
	 * Add a particular user to the system. Does not add user-specific information (e.g. Patient or HCP).
	 * Initially sets security question to a random set of characters, so that nobody should be able to guess
	 * its value.
	 * 
	 * @param mid The user's MID as a Long.
	 * @param role The role of the user as a Role enum {@link Role}
	 * @param password The password for the new user.
	 * @return A string representing the newly added randomly-generated password. 
	 * 	 */

/**
	 * Reset the security question and answer for a particular user
	 * 
	 * @param question The security question as a string.
	 * @param answer The security answer as a string.
	 * @param mid The MID of the user as a long.
	 * 	 */

/**
	 * Returns the user name of a user from just the MID
	 * 
	 * @param mid The MID of the user to get the name of.
	 * @return The user's name as a String.
	 * 	 * 	 */

/**
	 * Returns the role of a particular MID
	 * 
	 * @param mid The MID of the user to look up.
	 * @return The {@link Role} of the user as an enum.
	 * 	 * 	 */

/**
	 * Change the password of a particular user
	 * 
	 * @param mid The MID of the user whose password we are changing.
	 * @param password The new password.
	 * 	 */

/**
	 * Return the security question for a particular user.
	 * 
	 * @param mid The MID of the user we are looking up.
	 * @return The security question of the user we are looking up.
	 * 	 */

/**
	 * Return the security answer of a particular user
	 * 
	 * @param mid The MID of the user we are looking up.
	 * @return The security answer as a String.
	 * 	 */

/**
	 * Record a login failure, which blacklists the ipAddress. Uses the database table like a hash table where
	 * the key is the user's IP address. If the user's IP address is not in the table, a row with "1" is
	 * added.
	 * 
	 * @param ipAddr The IP address of the user as a String.
	 * 	 */

/**
	 * Record a reset password failure, which blacklists the ipAddress. Uses the database table like a hash
	 * table where the key is the user's IP address. If the user's IP address is not in the table, a row with
	 * "1" is added.
	 * 
	 * @param ipAddr The IP address of the user as a String.
	 * 	 */

/**
	 * Return the number of failures from resetting a password, given an IP address.
	 * 
	 * @param ipAddr An IP address for the associated attempt as a String.
	 * @return An int representing the number of failures.
	 * 	 */

/**
	 * Return the number of failures from login failures a password, given an IP address.
	 * 
	 * @param ipAddr The IP address for this attempt as a String.
	 * @return An int representing the number of failures which have occured.
	 * 	 */

/**
	 * Check that a user actually exists.
	 * 
	 * @param mid
	 * @return
	 * 	 */

