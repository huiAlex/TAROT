/**
 * Used to update referrals, and fetch lists of referrals sent to and
 * from HCPs.
 *
 * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
 * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
 * added. DAOs can assume that all data has been validated and is correct.
 * 
 * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
 * accessed by DAOFactory ( * connections and/or accessing other DAOs.
 * 
 */

/**
	 * The typical constructor.
	 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
	 */

/**
	 * Get all referrals associated with a particular office visit.
	 * @param ovid The office visit id.
	 * @return A list of ReferralBeans.
	 * 	 */

/**
	 * Gets a list of all referrals sent from an HCP
	 * @param mid The HCP's mid.
	 * @return The list of the referrals they sent.
	 * 	 */

/**
	 * Get a specific referral.
	 * @param id The id of the referral to retrieve.
	 * @return A ReferralBean.
	 * 	 */

/**
	 * Set referral message.
	 * @param id The id of the referral to retrieve.
	 * @return A ReferralBean.
	 * 	 */

/**
	 * Set referral message.
	 * @param id The id of the referral to retrieve.
	 * @return A ReferralBean.
	 * 	 */

/**
	 * Gets a list of all referrals sent to an HCP
	 * @param mid The HCP's mid.
	 * @return The list of the referrals sent to them.
	 * 	 */

/**
	 * Gets a list of all referrals a HCP has received
	 * @param mid The patients's mid.
	 * @return The list of the referrals they received.
	 * 	 */

/**
	 * Gets a list of all referrals sent to a patient.
	 * @param mid The patients's mid.
	 * @return The list of the referrals they received.
	 * 	 */

/**
	 * Gets a list of all referrals sent to a patient
	 * @param mid The patients's mid.
	 * @return The list of the referrals they received that were unread.
	 * 	 */

/**
	 * Gets a list of all referrals sent to a patient
	 * @param mid The patients's mid.
	 * @return The list of the referrals they received that were unread.
	 * 	 */

/**
	 * Updates a given referral in the database.
	 * @param r The referral to update.
	 * 	 */

/**
	 * Adds a given referral to the database.
	 * @param r The referral to add.
	 * 	 */

/**
	 * Removes the given referral.
	 * 
	 * @param id The unique ID of the referral to be removed.
	 * 	 */

/**
	 * An abstract class that encapsulates a sorted query of referrals.  
	 * Derived classes provide the user id which all retrieved referrals will 
	 * contain.
	 */

/**
	 * Concrete ReferralListQuery for accessing an HCPs sent referrals.
	 */

/**
	 * Concrete ReferralListQuery for accessing an HCPs received referrals.
	 */

/**
	 * Concrete ReferralListQuery for accessing a patients referrals.
	 */

/**
	 * Get a referral query for a sending HCP.
	 * @param mid The HCP id.
	 * @return A ReferralListQuery object.
	 */

/**
	 * Get a referral query for a receiving HCP.
	 * @param mid The HCP id.
	 * @return A ReferralListQuery object.
	 */

/**
	 * Get a referral query for a patient.
	 * @param mid The patient id.
	 * @return A ReferralListQuery object.
	 */

/**
		 * Create a new ReferralListQuery object.
		 * @param factory
		 * @param userid
		 */

/**
		 * Perform the query.
		 * 
		 * @param sortField The pseudo-field name in which to sort.
		 * @param dir The direction of the desired sort (ascending or 
		 * 			  descending)
		 * @return A list of VerboseReferralBeans.
		 * 		 */

/**
		 * Perform the query.
		 * 
		 * @param sortField The pseudo-field name in which to sort.
		 * @param dir The direction of the desired sort (ascending or 
		 * 			  descending)
		 * @return A list of VerboseReferralBeans.
		 * 		 */

/**
		 * Get the name of the user pseudo-field which is used to limit the 
		 * query.  Only referrals where this field equals a specific user id 
		 * will be returned.  This must be overridden by derived classes.
		 * 
		 * @return The user field as a string.
		 */

/**
		 * Builds the sort portion of the SQL query (i.e. the ORDER BY... portion).
		 * 
		 * @param sortField The pseudo-field to sort on.
		 * @param dir The sort direction.
		 * @return A string which can be a part of an SQL query.
		 */

