<Class>
    <Id>362</Id>
    <Package>edu.ncsu.csc.itrust.validate</Package>
    <ClassName>BeanValidator</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>BeanValidator  /** 
 * Abstract class used by all validators that provides utility methods for checking formatting of a particular field. Specify the Bean to be validated
 * @author Andy
 * @param &lt; T &gt; The bean type to be validated
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>validate</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <ParameterType>T bean</ParameterType>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>FormValidationException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkFormat</MethodName>
            <MethodComment>/** 
 * Check the format against the given enum. isNullable will check if the string is empty or a Java null. Otherwise, an error message will be returned. Use this in conjunction with  {@link ErrorList}.
 * @param name
 * @param value
 * @param format
 * @param isNullable
 * @return
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <ParameterType>String name</ParameterType>
                <ParameterType>String value</ParameterType>
                <ParameterType>ValidationFormat format</ParameterType>
                <ParameterType>boolean isNullable</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [errorMessage=name + ": " + format.getDescription()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkFormat</MethodName>
            <MethodComment>/** 
 * Check a long value against a particular format. isNullable will check if it is empty or a Java null. Otherwise, an error message will be returned. Use this in conjunction with  {@link ErrorList}.
 * @param name
 * @param longValue
 * @param format
 * @param isNullable
 * @return
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <ParameterType>String name</ParameterType>
                <ParameterType>Long longValue</ParameterType>
                <ParameterType>ValidationFormat format</ParameterType>
                <ParameterType>boolean isNullable</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [str=""]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkFormat</MethodName>
            <MethodComment>/** 
 * Check the format against the given enum. isNullable will check if it is a Java null. Otherwise, an error message will be returned. Use this in conjunction with  {@link ErrorList}.
 * @param name
 * @param doubleValue
 * @param format
 * @param isNullable
 * @return
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <ParameterType>String name</ParameterType>
                <ParameterType>Double doubleValue</ParameterType>
                <ParameterType>ValidationFormat format</ParameterType>
                <ParameterType>boolean isNullable</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [str=""]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkGender</MethodName>
            <MethodComment>/** 
 * Check against the proper gender
 * @param name
 * @param gen
 * @param format
 * @param isNullable
 * @return
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <ParameterType>String name</ParameterType>
                <ParameterType>Gender gen</ParameterType>
                <ParameterType>ValidationFormat format</ParameterType>
                <ParameterType>boolean isNullable</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [str=""]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkInt</MethodName>
            <MethodComment>/** 
 * The that an integer is the proper format, and is in the correct range
 * @param name
 * @param value
 * @param lower
 * @param upper
 * @param isNullable
 * @return
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <ParameterType>String name</ParameterType>
                <ParameterType>String value</ParameterType>
                <ParameterType>int lower</ParameterType>
                <ParameterType>int upper</ParameterType>
                <ParameterType>boolean isNullable</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkDouble</MethodName>
            <MethodComment>/** 
 * Check that a double is in the proper format and is in the correct range
 * @param name
 * @param value
 * @param lower
 * @param upper
 * @return
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <ParameterType>String name</ParameterType>
                <ParameterType>String value</ParameterType>
                <ParameterType>double lower</ParameterType>
                <ParameterType>double upper</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkBoolean</MethodName>
            <MethodComment>/** 
 * Check that the value fits the "true" or "false"
 * @param name
 * @param value
 * @return
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <ParameterType>String name</ParameterType>
                <ParameterType>String value</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>