<Class>
    <Id>417</Id>
    <Package>edu.ncsu.csc.itrust.dao.mysql</Package>
    <ClassName>VisitRemindersDAO</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>VisitRemindersDAO  /** 
 * Used for queries related to patient reminders DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is, one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are added. DAOs can assume that all data has been validated and is correct. DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be accessed by DAOFactory (@see  {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC connections and/or accessing other DAOs.
 * @author Andy
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>factory</FieldName>
            <FieldType>DAOFactory</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>VisitRemindersDAO</MethodName>
            <MethodComment>/** 
 * The typical constructor.
 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <ParameterType>DAOFactory factory</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPatients</MethodName>
            <MethodComment>/** 
 * Returns a list of patients associated with a given HCP.
 * @param hcpid The MID of the HCP in question.
 * @return A java.util.List of Visit Reminder Forms.
 */
</MethodComment>
            <ReturnType>VisitReminderReturnForm</ReturnType>
            <ParameterList>
                <ParameterType>long hcpid</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>VisitReminderReturnForm [temp]</InnerVar>
                <InnerVar>VisitReminderReturnFormLoader [loader=new VisitReminderReturnFormLoader()]</InnerVar>
                <InnerVar>List&lt;VisitReminderReturnForm&gt; [patients=new ArrayList&lt;VisitReminderReturnForm&gt;()]</InnerVar>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
                <InnerVar>ResultSet [rs=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDiagnosedVisitNeeders</MethodName>
            <MethodComment>/** 
 * Returns a list of patients who need a visit for this HCP. This means: Alive patient, no office visit for &gt; 1 yr, diagnosed: - Diabetes: 250.xx - Asthma: 493.xx - Circulatory-System Disease: [ 390.00 , 459.99 ]
 * @param hcpid The MID of the HCP in question.
 * @return A java.util.List of visit reminders.
 */
</MethodComment>
            <ReturnType>VisitReminderReturnForm</ReturnType>
            <ParameterList>
                <ParameterType>long hcpid</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
                <InnerVar>ResultSet [rs=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFluShotDelinquents</MethodName>
            <MethodComment>/** 
 * Returns a list of old people who need a flu shot CURRENT SPEC: Alive patient, over 50 years old, no flu shot - 90656, 90658, 90660 a) during the months 09 - 12 of current calendar year if in 09 - 12 b) during the months 09 - 12 of last calendar year if not in 09 - 12 Determines current date and calls one of two private methods these methods return different sets of people - a: people who haven't had a flu shot yet this year and need one - b: people who missed last year's flu shot and need a check-up
 * @return A java.util.List of Visit Reminder Forms.
 * @param hcpid The MID of the HCP in question.
 * @param patientBirthday The birthday of the patient in question.
 * @throws DBException
 */
</MethodComment>
            <ReturnType>VisitReminderReturnForm</ReturnType>
            <ParameterList>
                <ParameterType>long hcpid</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
                <InnerVar>ResultSet [rs=null]</InnerVar>
                <InnerVar>boolean [thisYear=DateUtil.currentlyInMonthRange(8,11)]</InnerVar>
                <InnerVar>String [flagType=thisYear ? VisitFlag.MISSING_MEDICATION : VisitFlag.MISSED_MEDICATION]</InnerVar>
                <InnerVar>java.sql.Date [september=new java.sql.Date(0l), december=new java.sql.Date(0l)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>DateUtil;setSQLMonthRange;[september, 8, thisYear ? 0 : 1, december, 11, thisYear ? 0 : 1]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>