<Class>
    <Id>633</Id>
    <Package>edu.ncsu.csc.itrust.risk</Package>
    <ClassName>RiskChecker</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>RiskChecker  /** 
 * An abstract class which has a number of utlity methods for checking risks. When extending this class, use the methods to fill in all of the necessary information. Then use isAtRisk and getPatientRiskFactors to get the actual risks. See the known subclasses for an example
 * @author Andy
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>RISK_THRESHOLD</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>patient</FieldName>
            <FieldType>PatientBean</FieldType>
        </Field>
        <Field>
            <FieldName>currentHealthRecord</FieldName>
            <FieldType>HealthRecord</FieldType>
        </Field>
        <Field>
            <FieldName>factory</FieldName>
            <FieldType>DAOFactory</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>RiskChecker</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <ParameterType>DAOFactory factory</ParameterType>
                <ParameterType>long patientID</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>HealthRecordsDAO [hrDAO=factory.getHealthRecordsDAO()]</InnerVar>
                <InnerVar>List&lt;HealthRecord&gt; [records=hrDAO.getAllHealthRecords(patientID)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
                <ExceptionType>NoHealthRecordsException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getName</MethodName>
            <MethodComment>/** 
 * @return The name of the disease being checked.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <ParameterType></ParameterType>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDiseaseRiskFactors</MethodName>
            <MethodComment>/** 
 * @return A java.util.List of the risk factors increasing this patients disease risk.
 */
</MethodComment>
            <ReturnType>PatientRiskFactor</ReturnType>
            <ParameterList>
                <ParameterType></ParameterType>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>qualifiesForDisease</MethodName>
            <MethodComment>/** 
 * @return A boolean indicating whether the patient is at increased risk.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <ParameterType></ParameterType>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isAtRisk</MethodName>
            <MethodComment>/** 
 * This method exists purely for performance - just stop once you hit the threshold. &lt;br /&gt; &lt;br /&gt; Also, the risk factors should be cached in the RiskFactor implementors - in getPatientRiskFactors there should be no double-querying
 * @return isAtRisk
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <ParameterType></ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPatientRiskFactors</MethodName>
            <MethodComment>/** 
 * @return A java.util.List of patient risk factors associated with this disease.
 */
</MethodComment>
            <ReturnType>PatientRiskFactor</ReturnType>
            <ParameterList>
                <ParameterType></ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;PatientRiskFactor&gt; [patientRiskFactors=new ArrayList&lt;PatientRiskFactor&gt;()]</InnerVar>
                <InnerVar>List&lt;PatientRiskFactor&gt; [diseaseRiskFactors=getDiseaseRiskFactors()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>