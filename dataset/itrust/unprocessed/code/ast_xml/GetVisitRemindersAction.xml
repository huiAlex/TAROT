<Class>
    <Id>479</Id>
    <Package>edu.ncsu.csc.itrust.action</Package>
    <ClassName>GetVisitRemindersAction</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>GetVisitRemindersAction  /** 
 * Gets the VisitReminders for a given patient Used by visitReminders.jsp
 * @author laurenhayward
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>ReminderType</FieldName>
            <FieldType>enum</FieldType>
        </Field>
        <Field>
            <FieldName>typeName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>map</FieldName>
            <FieldType>HashMap</FieldType>
        </Field>
        <Field>
            <FieldName>map</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>visitReminderDAO</FieldName>
            <FieldType>VisitRemindersDAO</FieldType>
        </Field>
        <Field>
            <FieldName>patientDAO</FieldName>
            <FieldType>PatientDAO</FieldType>
        </Field>
        <Field>
            <FieldName>loggedInMID</FieldName>
            <FieldType>long</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ReminderType</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <ParameterType>String typeName</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getReminderType</MethodName>
            <MethodComment>/** 
 * Gets the ReminderType for the name passed as a param
 * @param name
 * @return the ReminderType associated with the name
 */
</MethodComment>
            <ReturnType>ReminderType</ReturnType>
            <ParameterList>
                <ParameterType>String name</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTypeName</MethodName>
            <MethodComment>/** 
 * Returns the type name as a string
 * @return
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <ParameterType></ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>GetVisitRemindersAction</MethodName>
            <MethodComment>/** 
 * Set up defaults
 * @param factory The DAOFactory used to create the DAOs used in this action.
 * @param loggedInMID MID of the person who is logged in
 * @throws iTrustException
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <ParameterType>DAOFactory factory</ParameterType>
                <ParameterType>long loggedInMID</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>iTrustException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getVisitReminders</MethodName>
            <MethodComment>/** 
 * Returns a list of VisitReminderReturnForms for the type passed in as a param
 * @param type the ReminderType
 * @return the list of VisitReminderReturnForms
 * @throws iTrustException
 * @throws FormValidationException
 */
</MethodComment>
            <ReturnType>VisitReminderReturnForm</ReturnType>
            <ParameterList>
                <ParameterType>ReminderType type</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>iTrustException</ExceptionType>
                <ExceptionType>FormValidationException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getImmunizationNeeders</MethodName>
            <MethodComment>/** 
 * Gets a list of anyone who need immunizations
 * @param mid the HCP whose patients are being checked
 * @return a list of all the people who need immunizations--done in a visit reminder
 * @throws iTrustException
 */
</MethodComment>
            <ReturnType>VisitReminderReturnForm</ReturnType>
            <ParameterList>
                <ParameterType>long mid</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;VisitReminderReturnForm&gt; [formList]</InnerVar>
                <InnerVar>List&lt;VisitReminderReturnForm&gt; [needList=new ArrayList&lt;VisitReminderReturnForm&gt;()]</InnerVar>
                <InnerVar>String [reason=""]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>iTrustException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkImmunizations</MethodName>
            <MethodComment>/** 
 * Checks a patient to see what immunizations they need
 * @param pid patient to be checked
 * @return patient list of those lacking immunizations according to the schedule
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <ParameterType>long pid</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [reason=""]</InnerVar>
                <InnerVar>List&lt;ProcedureBean&gt; [procs=patientDAO.getProcedures(pid)]</InnerVar>
                <InnerVar>PatientBean [patient=patientDAO.getPatient(pid)]</InnerVar>
                <InnerVar>Date [patientDOB=patient.getDateOfBirth()]</InnerVar>
                <InnerVar>Gender [gen=patient.getGender()]</InnerVar>
                <InnerVar>int [hepB=0]</InnerVar>
                <InnerVar>long [hepBTime=0]</InnerVar>
                <InnerVar>int [rota=0]</InnerVar>
                <InnerVar>long [rotaTime=0]</InnerVar>
                <InnerVar>int [diptet=0]</InnerVar>
                <InnerVar>long [deptetTime=0]</InnerVar>
                <InnerVar>int [haemoflu=0]</InnerVar>
                <InnerVar>long [haemofluTime=0]</InnerVar>
                <InnerVar>long [haemofluTimeFirst=0]</InnerVar>
                <InnerVar>int [pneumo=0]</InnerVar>
                <InnerVar>long [pneumoTime=0]</InnerVar>
                <InnerVar>long [pneumofluTimeFirst=0]</InnerVar>
                <InnerVar>int [polio=0]</InnerVar>
                <InnerVar>long [polioTime=0]</InnerVar>
                <InnerVar>int [measles=0]</InnerVar>
                <InnerVar>long [measlesTime=0]</InnerVar>
                <InnerVar>int [varicella=0]</InnerVar>
                <InnerVar>long [varicellaTime=0]</InnerVar>
                <InnerVar>int [hepA=0]</InnerVar>
                <InnerVar>long [hepATime=0]</InnerVar>
                <InnerVar>int [hpv=0]</InnerVar>
                <InnerVar>long [hpvTime=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>iTrustException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testHPV</MethodName>
            <MethodComment>/** 
 * Checks to see if a patient needs the HPV immunization
 * @param count			how many HPV immunizations she has already had
 * @param patientAge	how old the patient is, in weeks
 * @param time			date of the last procedure
 * @return the			reason the immunization should be given, including required immunization age
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <ParameterType>int count</ParameterType>
                <ParameterType>Date patientDOB</ParameterType>
                <ParameterType>long time</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [reason=""]</InnerVar>
                <InnerVar>long [weeks=(Calendar.getInstance().getTimeInMillis() - time) / (1000 * 60 * 60* 24* 7)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testHepA</MethodName>
            <MethodComment>/** 
 * Checks to see if a patient needs the Hepatits A immunization
 * @param count which immunization they are on
 * @param patientAge how old the patient is
 * @param time what the current date is
 * @return when the immunization should be given
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <ParameterType>int count</ParameterType>
                <ParameterType>Date patientDOB</ParameterType>
                <ParameterType>long time</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [reason=""]</InnerVar>
                <InnerVar>long [weeks=(Calendar.getInstance().getTimeInMillis() - time) / (1000 * 60 * 60* 24* 7)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testVaricella</MethodName>
            <MethodComment>/** 
 * Checks to see if a patient needs the Varicella immunization
 * @param count which immunization they are on
 * @param patientAge how old the patient is
 * @param time what the current date is
 * @return when the immunization should be given
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <ParameterType>int count</ParameterType>
                <ParameterType>Date patientDOB</ParameterType>
                <ParameterType>long time</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [reason=""]</InnerVar>
                <InnerVar>long [weeks=(Calendar.getInstance().getTimeInMillis() - time) / (1000 * 60 * 60* 24* 7)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testMeasles</MethodName>
            <MethodComment>/** 
 * Checks to see if a patient needs the Measles, Mumps, and Rubekka immunization
 * @param count which immunization they are on
 * @param patientAge how old the patient is
 * @param time what the current date is
 * @return when the immunization should be given
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <ParameterType>int count</ParameterType>
                <ParameterType>Date patientDOB</ParameterType>
                <ParameterType>long time</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [reason=""]</InnerVar>
                <InnerVar>long [weeks=(Calendar.getInstance().getTimeInMillis() - time) / (1000 * 60 * 60* 24* 7)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testPolio</MethodName>
            <MethodComment>/** 
 * Checks to see if a patient needs the Polio immunization
 * @param count which immunization they are on
 * @param patientAge how old the patient is
 * @param time what the current date is
 * @return when the immunization should be given
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <ParameterType>int count</ParameterType>
                <ParameterType>Date patientDOB</ParameterType>
                <ParameterType>long time</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [reason=""]</InnerVar>
                <InnerVar>long [weeks=(Calendar.getInstance().getTimeInMillis() - time) / (1000 * 60 * 60* 24* 7)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testPneumo</MethodName>
            <MethodComment>/** 
 * Checks to see if a patient needs the Pneumococcal immunization
 * @param count which immunization they are on
 * @param patientAge how old the patient is
 * @param time what the current date is
 * @return when the immunization should be given
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <ParameterType>int count</ParameterType>
                <ParameterType>Date patientDOB</ParameterType>
                <ParameterType>long time</ParameterType>
                <ParameterType>long firstDoseTime</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [reason=""]</InnerVar>
                <InnerVar>Date [firstDose=new Date(firstDoseTime)]</InnerVar>
                <InnerVar>long [weeks=(Calendar.getInstance().getTimeInMillis() - time) / (1000 * 60 * 60* 24* 7)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testHaemoFlu</MethodName>
            <MethodComment>/** 
 * Checks to see if a patient needs the Haemophilus Infulenzae immunization
 * @param count which immunization they are on
 * @param patientAge how old the patient is
 * @param time what the current date is
 * @return when the immunization should be given
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <ParameterType>int count</ParameterType>
                <ParameterType>Date patientDOB</ParameterType>
                <ParameterType>long time</ParameterType>
                <ParameterType>long firstDoseTime</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [reason=""]</InnerVar>
                <InnerVar>long [weeks=(Calendar.getInstance().getTimeInMillis() - time) / (1000 * 60 * 60* 24* 7)]</InnerVar>
                <InnerVar>Date [firstDose=new Date(firstDoseTime)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testDipTet</MethodName>
            <MethodComment>/** 
 * Checks to see if a patient needs the Diphtheria, Tetanus, Pertussis immunization
 * @param count which immunization they are on
 * @param patientAge how old the patient is
 * @param time what the current date is
 * @return when the immunization should be given
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <ParameterType>int count</ParameterType>
                <ParameterType>Date patientDOB</ParameterType>
                <ParameterType>long time</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [reason=""]</InnerVar>
                <InnerVar>long [weeks=(Calendar.getInstance().getTimeInMillis() - time) / (1000 * 60 * 60* 24* 7)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testRotaVirus</MethodName>
            <MethodComment>/** 
 * Checks to see if a patient needs the Rotavirus immunization
 * @param count which immunization they are on
 * @param patientAge how old the patient is
 * @param time what the current date is
 * @return when the immunization should be given
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <ParameterType>int count</ParameterType>
                <ParameterType>Date patientDOB</ParameterType>
                <ParameterType>long time</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [reason=""]</InnerVar>
                <InnerVar>long [weeks=(Calendar.getInstance().getTimeInMillis() - time) / (1000 * 60 * 60* 24* 7)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testHepB</MethodName>
            <MethodComment>/** 
 * Checks to see if a patient needs the Hepatitis B immunization
 * @param count which immunization they are on
 * @param patientAge how old the patient is
 * @param time what the current date is
 * @return when the immunization should be given
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <ParameterType>int count</ParameterType>
                <ParameterType>Date patientDOB</ParameterType>
                <ParameterType>long time</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [reason=""]</InnerVar>
                <InnerVar>long [weeks=(Calendar.getInstance().getTimeInMillis() - time) / (1000 * 60 * 60* 24* 7)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>olderThan</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <ParameterType>Date patientDOB</ParameterType>
                <ParameterType>int years</ParameterType>
                <ParameterType>int months</ParameterType>
                <ParameterType>int weeks</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>firstDoseAfter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <ParameterType>Date patientDOB</ParameterType>
                <ParameterType>Date ageFirst</ParameterType>
                <ParameterType>int years</ParameterType>
                <ParameterType>int months</ParameterType>
                <ParameterType>int weeks</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>endBefore</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <ParameterType>Date startTime</ParameterType>
                <ParameterType>Date endTime</ParameterType>
                <ParameterType>int years</ParameterType>
                <ParameterType>int months</ParameterType>
                <ParameterType>int weeks</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Calendar [cal=Calendar.getInstance()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cal;setTime;[startTime]</InnerMethodInvoke>
                <InnerMethodInvoke>cal;add;[Calendar.YEAR, years]</InnerMethodInvoke>
                <InnerMethodInvoke>cal;add;[Calendar.MONTH, months]</InnerMethodInvoke>
                <InnerMethodInvoke>cal;add;[Calendar.HOUR, weeks * 7 * 24]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>