<Class>
    <Id>528</Id>
    <Package>edu.ncsu.csc.itrust.action.base</Package>
    <ClassName>PersonnelBaseAction</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>PersonnelBaseAction  /** 
 * An abstract class for dealing with actions that require an associated personnel. The concrete functionality provided by this class allows for asserting the correctness and existence of personnel' MIDs. Use this class whenever your JSP requires a personnel ID when it loads (e.g. editPatient.jsp). The patient string is passed to the constructor of this class and is checked for both format and existence. If the patient ID is wrong in any way, an exception is thrown, resulting in the user getting kicked out to the home page. Subclasses need not rewrite this functionality, and they are not held to any strict contract to extend this class. Very similar to  {@link PatientBaseAction}
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>factory</FieldName>
            <FieldType>DAOFactory</FieldType>
        </Field>
        <Field>
            <FieldName>pid</FieldName>
            <FieldType>long</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>PersonnelBaseAction</MethodName>
            <MethodComment>/** 
 * The default constructor.
 * @param factory A factory to create a database access object.
 * @param pidString The personnel's ID to associate with this action.
 * @throws iTrustException If the personnel's ID is incorrect or there is a DB problem.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <ParameterType>DAOFactory factory</ParameterType>
                <ParameterType>String pidString</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>iTrustException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkPersonnelID</MethodName>
            <MethodComment>/** 
 * Asserts whether the input is a valid, existing personnel's MID.
 * @param input The presumed MID
 * @return The existing personnel's ID as a long.
 * @throws iTrustException If the personnel does not exist or there is a DB Problem.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <ParameterType>String input</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>iTrustException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPid</MethodName>
            <MethodComment>/** 
 * Retrieves the identifier of the patient as a long.
 * @return The patient's MID.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <ParameterType></ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>