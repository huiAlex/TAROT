<Class>
    <Id>405</Id>
    <Package>edu.ncsu.csc.itrust.dao.mysql</Package>
    <ClassName>AuthDAO</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>AuthDAO  /** 
 * AuthDAO is for anything that has to do with authentication. Most methods access the users table. DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is, one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are added. DAOs can assume that all data has been validated and is correct. DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be accessed by DAOFactory (@see  {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC connections and/or accessing other DAOs.
 * @author Andy
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>LOGIN_TIMEOUT</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>factory</FieldName>
            <FieldType>DAOFactory</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>AuthDAO</MethodName>
            <MethodComment>/** 
 * The typical constructor.
 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <ParameterType>DAOFactory factory</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addUser</MethodName>
            <MethodComment>/** 
 * Add a particular user to the system. Does not add user-specific information (e.g. Patient or HCP). Initially sets security question to a random set of characters, so that nobody should be able to guess its value.
 * @param mid The user's MID as a Long.
 * @param role The role of the user as a Role enum {@link Role}
 * @param password The password for the new user.
 * @return A string representing the newly added randomly-generated password. 
 * @throws DBException
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <ParameterType>Long mid</ParameterType>
                <ParameterType>Role role</ParameterType>
                <ParameterType>String password</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [pstmt=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setSecurityQuestionAnswer</MethodName>
            <MethodComment>/** 
 * Reset the security question and answer for a particular user
 * @param question The security question as a string.
 * @param answer The security answer as a string.
 * @param mid The MID of the user as a long.
 * @throws DBException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <ParameterType>String question</ParameterType>
                <ParameterType>String answer</ParameterType>
                <ParameterType>long mid</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [pstmt=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getUserName</MethodName>
            <MethodComment>/** 
 * Returns the user name of a user from just the MID
 * @param mid The MID of the user to get the name of.
 * @return The user's name as a String.
 * @throws DBException
 * @throws iTrustException
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <ParameterType>long mid</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Role [role=getUserRole(mid)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
                <ExceptionType>iTrustException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getUserRole</MethodName>
            <MethodComment>/** 
 * Returns the role of a particular MID
 * @param mid The MID of the user to look up.
 * @return The {@link Role} of the user as an enum.
 * @throws DBException
 * @throws iTrustException
 */
</MethodComment>
            <ReturnType>Role</ReturnType>
            <ParameterList>
                <ParameterType>long mid</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [pstmt=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
                <ExceptionType>iTrustException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>resetPassword</MethodName>
            <MethodComment>/** 
 * Change the password of a particular user
 * @param mid The MID of the user whose password we are changing.
 * @param password The new password.
 * @throws DBException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <ParameterType>long mid</ParameterType>
                <ParameterType>String password</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSecurityQuestion</MethodName>
            <MethodComment>/** 
 * Return the security question for a particular user.
 * @param mid The MID of the user we are looking up.
 * @return The security question of the user we are looking up.
 * @throws iTrustException
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <ParameterType>long mid</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>iTrustException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSecurityAnswer</MethodName>
            <MethodComment>/** 
 * Return the security answer of a particular user
 * @param mid The MID of the user we are looking up.
 * @return The security answer as a String.
 * @throws iTrustException
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <ParameterType>long mid</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>iTrustException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>recordLoginFailure</MethodName>
            <MethodComment>/** 
 * Record a login failure, which blacklists the ipAddress. Uses the database table like a hash table where the key is the user's IP address. If the user's IP address is not in the table, a row with "1" is added.
 * @param ipAddr The IP address of the user as a String.
 * @throws DBException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <ParameterType>String ipAddr</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>recordResetPasswordFailure</MethodName>
            <MethodComment>/** 
 * Record a reset password failure, which blacklists the ipAddress. Uses the database table like a hash table where the key is the user's IP address. If the user's IP address is not in the table, a row with "1" is added.
 * @param ipAddr The IP address of the user as a String.
 * @throws DBException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <ParameterType>String ipAddr</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getResetPasswordFailures</MethodName>
            <MethodComment>/** 
 * Return the number of failures from resetting a password, given an IP address.
 * @param ipAddr An IP address for the associated attempt as a String.
 * @return An int representing the number of failures.
 * @throws DBException
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <ParameterType>String ipAddr</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLoginFailures</MethodName>
            <MethodComment>/** 
 * Return the number of failures from login failures a password, given an IP address.
 * @param ipAddr The IP address for this attempt as a String.
 * @return An int representing the number of failures which have occured.
 * @throws DBException
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <ParameterType>String ipAddr</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>insertLoginFailureRow</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <ParameterType>String ipAddr</ParameterType>
                <ParameterType>int failureCount</ParameterType>
                <ParameterType>Connection conn</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PreparedStatement [ps=conn.prepareStatement("INSERT INTO LoginFailures(IPAddress, failureCount) VALUES(?,?)")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ps;setString;[1, ipAddr]</InnerMethodInvoke>
                <InnerMethodInvoke>ps;setInt;[2, failureCount]</InnerMethodInvoke>
                <InnerMethodInvoke>ps;executeUpdate;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>insertResetPasswordRow</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <ParameterType>String ipAddr</ParameterType>
                <ParameterType>int failureCount</ParameterType>
                <ParameterType>Connection conn</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PreparedStatement [ps=conn.prepareStatement("INSERT INTO ResetPasswordFailures(IPAddress, failureCount) VALUES(?,?)")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ps;setString;[1, ipAddr]</InnerMethodInvoke>
                <InnerMethodInvoke>ps;setInt;[2, failureCount]</InnerMethodInvoke>
                <InnerMethodInvoke>ps;executeUpdate;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>updateFailuresToZero</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <ParameterType>String ipAddr</ParameterType>
                <ParameterType>Connection conn</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PreparedStatement [ps=conn.prepareStatement("UPDATE LoginFailures SET failureCount=0 WHERE IPAddress=?")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ps;setString;[1, ipAddr]</InnerMethodInvoke>
                <InnerMethodInvoke>ps;executeUpdate;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>resetLoginFailuresToZero</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <ParameterType>String ipAddr</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>updateResetFailuresToZero</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <ParameterType>String ipAddr</ParameterType>
                <ParameterType>Connection conn</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PreparedStatement [ps=conn.prepareStatement("UPDATE ResetPasswordFailures SET failureCount=0 WHERE IPAddress=?")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ps;setString;[1, ipAddr]</InnerMethodInvoke>
                <InnerMethodInvoke>ps;executeUpdate;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkUserExists</MethodName>
            <MethodComment>/** 
 * Check that a user actually exists.
 * @param mid
 * @return
 * @throws DBException
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <ParameterType>long mid</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>