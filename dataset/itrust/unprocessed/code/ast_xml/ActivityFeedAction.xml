<Class>
    <Id>456</Id>
    <Package>edu.ncsu.csc.itrust.action</Package>
    <ClassName>ActivityFeedAction</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ActivityFeedAction  /** 
 * Handles retrieving the log of record accesses for a given user Used by viewAccessLog.jsp
 * @author laurenhayward
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>transDAO</FieldName>
            <FieldType>TransactionDAO</FieldType>
        </Field>
        <Field>
            <FieldName>patientDAO</FieldName>
            <FieldType>PatientDAO</FieldType>
        </Field>
        <Field>
            <FieldName>authDAO</FieldName>
            <FieldType>AuthDAO</FieldType>
        </Field>
        <Field>
            <FieldName>loggedInMID</FieldName>
            <FieldType>long</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ActivityFeedAction</MethodName>
            <MethodComment>/** 
 * Set up
 * @param factory The DAOFactory used to create the DAOs used in this action.
 * @param loggedInMID The MID of the person retrieving the logs.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <ParameterType>DAOFactory factory</ParameterType>
                <ParameterType>long loggedInMID</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTransactions</MethodName>
            <MethodComment>/** 
 * Returns a list of TransactionBeans between the two dates passed as params
 * @param n Number of "pages" of 20 log entries to retrieve.
 * @return list of 20*n TransactionBeans
 * @throws DBException
 * @throws FormValidationException
 */
</MethodComment>
            <ReturnType>TransactionBean</ReturnType>
            <ParameterList>
                <ParameterType>Date time</ParameterType>
                <ParameterType>int n</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;PersonnelBean&gt; [dlhcps=patientDAO.getDeclaredHCPs(loggedInMID)]</InnerVar>
                <InnerVar>long [dlhcpID=-1]</InnerVar>
                <InnerVar>List&lt;TransactionBean&gt; [fullList=transDAO.getTransactionsAffecting(loggedInMID,dlhcpID,time,20 * n + 1)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
                <ExceptionType>FormValidationException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>recent</MethodName>
            <MethodComment>/** 
 * Returns an indicator of the number of days between the current date and the date passed as a parameter. Returns 0 if the dates are on the same day, 1 if the date passed in is "yesterday", 2 otherwise.
 * @param d1 First date
 * @param d2 Second date
 * @return 0, 1, or 2, depending on the difference in the dates.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <ParameterType>Date d</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [oneDay=24 * 60 * 60* 1000]</InnerVar>
                <InnerVar>DateFormat [sdf=new SimpleDateFormat("MM/dd/yyyy")]</InnerVar>
                <InnerVar>Date [rightNow=new Date()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>d;setTime;[d.getTime() + oneDay]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMessageAsSentence</MethodName>
            <MethodComment>/** 
 * Pulls Action Phrase from the associated TransactionType Enum Forms an English sentence with actor, action, and timestamp.
 * @param actor
 * @param timestamp
 * @param code
 * @return
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <ParameterType>String actor</ParameterType>
                <ParameterType>Timestamp timestamp</ParameterType>
                <ParameterType>TransactionType code</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [result=actor + " "]</InnerVar>
                <InnerVar>SimpleDateFormat [formatter=new SimpleDateFormat("h:mma.")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>replaceNameWithYou</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <ParameterType>String activity</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>