<Class>
    <Id>523</Id>
    <Package>edu.ncsu.csc.itrust.action</Package>
    <ClassName>ResetPasswordAction</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ResetPasswordAction  /** 
 * Manages resetting the password Used by resetPassword.jsp
 * @author laurenhayward
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>MAX_RESET_ATTEMPTS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>authDAO</FieldName>
            <FieldType>AuthDAO</FieldType>
        </Field>
        <Field>
            <FieldName>patientDAO</FieldName>
            <FieldType>PatientDAO</FieldType>
        </Field>
        <Field>
            <FieldName>factory</FieldName>
            <FieldType>DAOFactory</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ResetPasswordAction</MethodName>
            <MethodComment>/** 
 * Set up defaults
 * @param factory The DAOFactory used to create the DAOs used in this action.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <ParameterType>DAOFactory factory</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkMID</MethodName>
            <MethodComment>/** 
 * Checks to see if a user exists with the given mid
 * @param midString The user's MID to check for.
 * @return 0 if the user does not exist, else the mid of the user as a long
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <ParameterType>String midString</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isMaxedOut</MethodName>
            <MethodComment>/** 
 * Checks to see if the number of reset password attempts has been exceeded for the given ipAddress
 * @param ipAddress The IPv4 or IPv6 IP address as a String.
 * @return true if the the number of reset attempts is greater than or equal to MAX_RESET_ATTEMPTS
 * @throws DBException
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <ParameterType>String ipAddress</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkRole</MethodName>
            <MethodComment>/** 
 * Checks if the given mid matches the given role
 * @param mid the mid to be checked
 * @param role the role to be checked
 * @return true if the mid and role match
 * @throws iTrustException
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <ParameterType>long mid</ParameterType>
                <ParameterType>String role</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>iTrustException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkAnswerNull</MethodName>
            <MethodComment>/** 
 * Checks if the answer param is null
 * @param answer the user's security answer
 * @return answer if not null, else return null
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <ParameterType>String answer</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSecurityQuestion</MethodName>
            <MethodComment>/** 
 * Returns the security question for the mid param
 * @param mid MID of the user
 * @return the security question or "" if DBException thrown
 * @throws iTrustException
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <ParameterType>long mid</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>iTrustException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>resetPassword</MethodName>
            <MethodComment>/** 
 * Resets the password for the given mid
 * @param mid of the user to have their password reset
 * @param role what role the user has in iTrust
 * @param answer answers to their security question
 * @param password their password
 * @param confirmPassword their password again
 * @param ipAddr the ip address the request is coming from
 * @return status message
 * @throws FormValidationException
 * @throws DBException
 * @throws iTrustException
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <ParameterType>long mid</ParameterType>
                <ParameterType>String role</ParameterType>
                <ParameterType>String answer</ParameterType>
                <ParameterType>String password</ParameterType>
                <ParameterType>String confirmPassword</ParameterType>
                <ParameterType>String ipAddr</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Role [r=authDAO.getUserRole(mid)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FormValidationException</ExceptionType>
                <ExceptionType>DBException</ExceptionType>
                <ExceptionType>iTrustException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeEmailApp</MethodName>
            <MethodComment>/** 
 * Creates and sends an e-mail about the change
 * @param mid the user who's password was changed
 * @param role what role they have in iTrust
 * @return the e-mial that is sent
 * @throws DBException
 */
</MethodComment>
            <ReturnType>Email</ReturnType>
            <ParameterList>
                <ParameterType>long mid</ParameterType>
                <ParameterType>String role</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>validatePassword</MethodName>
            <MethodComment>/** 
 * Checks to make sure the password is correctly entered twice.
 * @param password the password
 * @param confirmPassword the password again for confirmation
 * @throws FormValidationException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <ParameterType>String password</ParameterType>
                <ParameterType>String confirmPassword</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ErrorList [errorList=new ErrorList()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FormValidationException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>