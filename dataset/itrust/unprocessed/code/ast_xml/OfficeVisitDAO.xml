<Class>
    <Id>422</Id>
    <Package>edu.ncsu.csc.itrust.dao.mysql</Package>
    <ClassName>OfficeVisitDAO</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>OfficeVisitDAO  /** 
 * Used for doing tasks related to office visits. Use this for linking diagnoses to office visits, and similar tasks. DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is, one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are added. DAOs can assume that all data has been validated and is correct. DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be accessed by DAOFactory (@see  {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC connections and/or accessing other DAOs.
 * @author Andy
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>factory</FieldName>
            <FieldType>DAOFactory</FieldType>
        </Field>
        <Field>
            <FieldName>officeVisitLoader</FieldName>
            <FieldType>OfficeVisitLoader</FieldType>
        </Field>
        <Field>
            <FieldName>diagnosisLoader</FieldName>
            <FieldType>DiagnosisBeanLoader</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>OfficeVisitDAO</MethodName>
            <MethodComment>/** 
 * The typical constructor.
 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <ParameterType>DAOFactory factory</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>add</MethodName>
            <MethodComment>/** 
 * Adds an visit and return its ID
 * @param ov The OfficeVisitBean to be added.
 * @return A long indicating the unique ID for the office visit.
 * @throws DBException
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <ParameterType>OfficeVisitBean ov</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setValues</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <ParameterType>PreparedStatement ps</ParameterType>
                <ParameterType>OfficeVisitBean ov</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ps;setDate;[1, new java.sql.Date(ov.getVisitDate().getTime())]</InnerMethodInvoke>
                <InnerMethodInvoke>ps;setString;[2, ov.getNotes()]</InnerMethodInvoke>
                <InnerMethodInvoke>ps;setLong;[3, ov.getHcpID()]</InnerMethodInvoke>
                <InnerMethodInvoke>ps;setLong;[4, ov.getPatientID()]</InnerMethodInvoke>
                <InnerMethodInvoke>ps;setString;[5, ov.getHospitalID()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>update</MethodName>
            <MethodComment>/** 
 * Updates the information in a particular office visit.
 * @param ov The Office Visit bean representing the changes.
 * @throws DBException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <ParameterType>OfficeVisitBean ov</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOfficeVisit</MethodName>
            <MethodComment>/** 
 * Returns a particular office visit given an ID
 * @param visitID The unique ID of the office visit.
 * @return An OfficeVisitBean with the specifics for that office visit.
 * @throws DBException
 */
</MethodComment>
            <ReturnType>OfficeVisitBean</ReturnType>
            <ParameterList>
                <ParameterType>long visitID</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>loadFullOfficeVist</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>OfficeVisitBean</ReturnType>
            <ParameterList>
                <ParameterType>ResultSet rs</ParameterType>
                <ParameterType>long visitID</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>OfficeVisitBean [ov=new OfficeVisitBean(visitID)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ov;setVisitDateStr;[new SimpleDateFormat("MM/dd/yyyy").format(new Date(rs.getDate("VisitDate").getTime()))]</InnerMethodInvoke>
                <InnerMethodInvoke>ov;setHcpID;[rs.getLong("HCPID")]</InnerMethodInvoke>
                <InnerMethodInvoke>ov;setNotes;[rs.getString("notes")]</InnerMethodInvoke>
                <InnerMethodInvoke>ov;setPatientID;[rs.getLong("PatientID")]</InnerMethodInvoke>
                <InnerMethodInvoke>ov;setHospitalID;[rs.getString("HospitalID")]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkOfficeVisitExists</MethodName>
            <MethodComment>/** 
 * Returns whether or not an office visit actually exists
 * @param ovID The ID of the office visit to be checked.
 * @param pid The MID of the patient associated with this transaction.
 * @return A boolean indicating its existence.
 * @throws DBException
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <ParameterType>long ovID</ParameterType>
                <ParameterType>long pid</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAllOfficeVisits</MethodName>
            <MethodComment>/** 
 * Returns a list of all office visits for a given patient
 * @param pid The MID of the patient in question.
 * @return A java.util.List of OfficeVisitBeans.
 * @throws DBException
 */
</MethodComment>
            <ReturnType>OfficeVisitBean</ReturnType>
            <ParameterList>
                <ParameterType>long pid</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAllOfficeVisitsForLHCP</MethodName>
            <MethodComment>/** 
 * Returns a list of all office visits for a given patient
 * @param mid The MID of the LHCP you are looking up.
 * @return A java.util.List of Office Visits.
 * @throws DBException
 */
</MethodComment>
            <ReturnType>OfficeVisitBean</ReturnType>
            <ParameterList>
                <ParameterType>long mid</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOfficeVisitsWithNoSurvey</MethodName>
            <MethodComment>/** 
 * Returns a list of all office visits for a given patient
 * @param pid The MID of the patient.
 * @return A java.util.List of Office Visits.
 * @throws DBException
 */
</MethodComment>
            <ReturnType>OfficeVisitBean</ReturnType>
            <ParameterList>
                <ParameterType>long pid</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOfficeVisitsFromHospital</MethodName>
            <MethodComment>/** 
 * Returns a list of all office visits at a given hospital
 * @param hospitalID the id of the hospital
 * @return a list of the OfficeVisitBeans that hold the office visits
 * @throws DBException in the event of a database error
 */
</MethodComment>
            <ReturnType>OfficeVisitBean</ReturnType>
            <ParameterList>
                <ParameterType>String hospitalID</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAllOfficeVisitsForDiagnosis</MethodName>
            <MethodComment>/** 
 * Gets all office visits corresponding to a particular ICD diagnosis.
 * @param icdcode A string represnting the ICD diagnosis to look up.
 * @return A java.util.List of Office visits.
 * @throws DBException
 */
</MethodComment>
            <ReturnType>OfficeVisitBean</ReturnType>
            <ParameterList>
                <ParameterType>String icdcode</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;DiagnosisBean&gt; [diags=null]</InnerVar>
                <InnerVar>List&lt;OfficeVisitBean&gt; [ovs=new ArrayList&lt;OfficeVisitBean&gt;()]</InnerVar>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
                <InnerVar>ResultSet [rs=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>