<Class>
    <Id>418</Id>
    <Package>edu.ncsu.csc.itrust.dao.mysql</Package>
    <ClassName>SurveyResultDAO</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>SurveyResultDAO  /** 
 * A DAO for handling all Survey results. DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is, one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are added. DAOs can assume that all data has been validated and is correct. DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be accessed by DAOFactory (@see  {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC connections and/or accessing other DAOs.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>factory</FieldName>
            <FieldType>DAOFactory</FieldType>
        </Field>
        <Field>
            <FieldName>loader</FieldName>
            <FieldType>SurveyResultBeanLoader</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>SurveyResultDAO</MethodName>
            <MethodComment>/** 
 * The typical constructor.
 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <ParameterType>DAOFactory factory</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSurveyResultsForZip</MethodName>
            <MethodComment>/** 
 * Returns all the survey results in the database that correspond to a particular zip code.
 * @param zip The zipcode we are interested in as a String.
 * @param specialty The specialty we are interested in as a String.
 * @return A java.util.List of SurveyResultBeans.
 * @throws DBException
 */
</MethodComment>
            <ReturnType>SurveyResultBean</ReturnType>
            <ParameterList>
                <ParameterType>String zip</ParameterType>
                <ParameterType>String specialty</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
                <InnerVar>StringBuffer [sql=new StringBuffer()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>sql;append;["select p.mid, p.firstname, p.lastname, p.address1, p.address2, p.city, p.state, p.zip, p.specialty, "]</InnerMethodInvoke>
                <InnerMethodInvoke>sql;append;["'na' hospitalID, "]</InnerMethodInvoke>
                <InnerMethodInvoke>sql;append;["avg(s.WaitingRoomMinutes) AvgWaitingRoomMinutes, "]</InnerMethodInvoke>
                <InnerMethodInvoke>sql;append;["avg(s.ExamRoomMinutes) AvgExamRoomMinutes, "]</InnerMethodInvoke>
                <InnerMethodInvoke>sql;append;["avg(s.VisitSatisfaction) AvgVisitSatisfaction, "]</InnerMethodInvoke>
                <InnerMethodInvoke>sql;append;["avg(s.TreatmentSatisfaction) AvgTreatmentSatisfation, "]</InnerMethodInvoke>
                <InnerMethodInvoke>sql;append;["count(*) / "]</InnerMethodInvoke>
                <InnerMethodInvoke>sql;append;["	(select count(*) from personnel p1, officevisits v1 "]</InnerMethodInvoke>
                <InnerMethodInvoke>sql;append;["	 where v1.hcpid = p1.mid "]</InnerMethodInvoke>
                <InnerMethodInvoke>sql;append;["	 and substr(p1.zip,1,3) = ? "]</InnerMethodInvoke>
                <InnerMethodInvoke>sql;append;["	 and p1.mid = p.mid) * 100 PercentSatisfactionResults "]</InnerMethodInvoke>
                <InnerMethodInvoke>sql;append;["from ovsurvey s, personnel p, officevisits v "]</InnerMethodInvoke>
                <InnerMethodInvoke>sql;append;["where s.visitid = v.id "]</InnerMethodInvoke>
                <InnerMethodInvoke>sql;append;["and v.hcpid = p.mid "]</InnerMethodInvoke>
                <InnerMethodInvoke>sql;append;["and substr(p.zip,1,3) = ? "]</InnerMethodInvoke>
                <InnerMethodInvoke>sql;append;["group by p.mid, p.firstname, p.lastname, p.address1, p.address2, p.city, p.state, p.zip, hospitalID "]</InnerMethodInvoke>
                <InnerMethodInvoke>sql;append;["order by p.mid "]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSurveyResultsForHospital</MethodName>
            <MethodComment>/** 
 * Returns all the survey data associated with a given hospital and a certain specialty.
 * @param hospitalID The unique ID of the iTrust hospital we are querying about.
 * @param specialty A string representing the specialty we are interested in.
 * @return A java.util.List of SurveyResultBeans.
 * @throws DBException
 */
</MethodComment>
            <ReturnType>SurveyResultBean</ReturnType>
            <ParameterList>
                <ParameterType>String hospitalID</ParameterType>
                <ParameterType>String specialty</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
                <InnerVar>StringBuffer [sql=new StringBuffer()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>sql;append;["select p.mid, p.firstname, p.lastname, p.address1, p.address2, p.city, p.state, p.zip, p.specialty, "]</InnerMethodInvoke>
                <InnerMethodInvoke>sql;append;["h.hosid hospitalID, "]</InnerMethodInvoke>
                <InnerMethodInvoke>sql;append;["avg(s.WaitingRoomMinutes) AvgWaitingRoomMinutes, "]</InnerMethodInvoke>
                <InnerMethodInvoke>sql;append;["avg(s.ExamRoomMinutes) AvgExamRoomMinutes, "]</InnerMethodInvoke>
                <InnerMethodInvoke>sql;append;["avg(s.VisitSatisfaction) AvgVisitSatisfaction, "]</InnerMethodInvoke>
                <InnerMethodInvoke>sql;append;["avg(s.TreatmentSatisfaction) AvgTreatmentSatisfation, "]</InnerMethodInvoke>
                <InnerMethodInvoke>sql;append;["count(*) / "]</InnerMethodInvoke>
                <InnerMethodInvoke>sql;append;["	(select count(*) from personnel p1, officevisits v1, HCPAssignedHos h1 "]</InnerMethodInvoke>
                <InnerMethodInvoke>sql;append;["	 where v1.hcpid = p1.mid "]</InnerMethodInvoke>
                <InnerMethodInvoke>sql;append;["	 and v1.hcpid = h1.hcpid "]</InnerMethodInvoke>
                <InnerMethodInvoke>sql;append;["	 and h1.hosid = ? "]</InnerMethodInvoke>
                <InnerMethodInvoke>sql;append;["	 and p1.mid = p.mid) * 100 PercentSatisfactionResults "]</InnerMethodInvoke>
                <InnerMethodInvoke>sql;append;["from ovsurvey s, personnel p, officevisits v, HCPAssignedHos h "]</InnerMethodInvoke>
                <InnerMethodInvoke>sql;append;["where s.visitid = v.id "]</InnerMethodInvoke>
                <InnerMethodInvoke>sql;append;["and v.hcpid = p.mid "]</InnerMethodInvoke>
                <InnerMethodInvoke>sql;append;["and v.hcpid = h.hcpid "]</InnerMethodInvoke>
                <InnerMethodInvoke>sql;append;["and h.hosid = ? "]</InnerMethodInvoke>
                <InnerMethodInvoke>sql;append;["group by p.mid, p.firstname, p.lastname, p.address1, p.address2, p.city, p.state, p.zip, hospitalID "]</InnerMethodInvoke>
                <InnerMethodInvoke>sql;append;["order by p.mid "]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>