<Class>
    <Id>448</Id>
    <Package>edu.ncsu.csc.itrust.action</Package>
    <ClassName>ViewDiagnosisStatisticsAction</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ViewDiagnosisStatisticsAction  /** 
 * Used for the View Diagnosis Statistics page. Can return a list of all Diagnoses and get diagnosis statistics for a specified Zip code, Diagnosis code, and date range.
 * @author student
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>icdDAO</FieldName>
            <FieldType>ICDCodesDAO</FieldType>
        </Field>
        <Field>
            <FieldName>diagnosesDAO</FieldName>
            <FieldType>DiagnosesDAO</FieldType>
        </Field>
        <Field>
            <FieldName>ICD_MALARIA</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>ICD_INFLUENZA</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ViewDiagnosisStatisticsAction</MethodName>
            <MethodComment>/** 
 * Constructor for the action. Initializes DAO fields
 * @param factory The session's factory for DAOs
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <ParameterType>DAOFactory factory</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDiagnosisCodes</MethodName>
            <MethodComment>/** 
 * Gets all the diagnosis codes in iTrust and returns them in a list of beans.
 * @return List of DiagnosisBeans correlating to all ICDCodes
 * @throws DBException 
 * @throws iTrustException
 */
</MethodComment>
            <ReturnType>DiagnosisBean</ReturnType>
            <ParameterList>
                <ParameterType></ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
                <ExceptionType>iTrustException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDiagnosisStatistics</MethodName>
            <MethodComment>/** 
 * Gets the counts of local and regional diagnoses for the specified input
 * @param lowerDate The beginning date for the time range
 * @param upperDate The ending date for the time range
 * @param icdCode The diagnosis code to examine
 * @param zip The zip code to examine
 * @return A bean containing the local and regional counts
 * @throws FormValidationException
 * @throws DBException
 * @throws iTrustException
 */
</MethodComment>
            <ReturnType>DiagnosisStatisticsBean</ReturnType>
            <ParameterList>
                <ParameterType>String lowerDate</ParameterType>
                <ParameterType>String upperDate</ParameterType>
                <ParameterType>String icdCode</ParameterType>
                <ParameterType>String zip</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DiagnosisStatisticsBean [dsBean]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FormValidationException</ExceptionType>
                <ExceptionType>DBException</ExceptionType>
                <ExceptionType>iTrustException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEpidemicStatistics</MethodName>
            <MethodComment>/** 
 * Gets the local and regional counts for the specified week and calculates the prior average.
 * @param startDate a date in the week to analyze
 * @param icdCode the diagnosis to analyze
 * @param zip the area to analyze
 * @return statistics for the week and previous averages
 * @throws FormValidationException
 * @throws DBException
 */
</MethodComment>
            <ReturnType>DiagnosisStatisticsBean</ReturnType>
            <ParameterList>
                <ParameterType>String startDate</ParameterType>
                <ParameterType>String icdCode</ParameterType>
                <ParameterType>String zip</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Date [lower]</InnerVar>
                <InnerVar>DiagnosisStatisticsBean [dbWeek=diagnosesDAO.getCountForWeekOf(icdCode,zip,lower)]</InnerVar>
                <InnerVar>DiagnosisStatisticsBean [dbAvg=new DiagnosisStatisticsBean(zip,0,0,lower,lower)]</InnerVar>
                <InnerVar>Calendar [cal=Calendar.getInstance()]</InnerVar>
                <InnerVar>Date [start=diagnosesDAO.findEarliestIncident(icdCode)]</InnerVar>
                <InnerVar>Calendar [startCal=Calendar.getInstance()]</InnerVar>
                <InnerVar>ArrayList&lt;DiagnosisStatisticsBean&gt; [ret=new ArrayList&lt;DiagnosisStatisticsBean&gt;()]</InnerVar>
                <InnerVar>Calendar [lowerCal=Calendar.getInstance()]</InnerVar>
                <InnerVar>int [weekOfYr=cal.get(Calendar.WEEK_OF_YEAR)]</InnerVar>
                <InnerVar>ArrayList&lt;DiagnosisStatisticsBean&gt; [dbList=new ArrayList&lt;DiagnosisStatisticsBean&gt;()]</InnerVar>
                <InnerVar>long [avg=0]</InnerVar>
                <InnerVar>long [avgRegion=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>startCal;setTime;[start]</InnerMethodInvoke>
                <InnerMethodInvoke>cal;setTime;[lower]</InnerMethodInvoke>
                <InnerMethodInvoke>lowerCal;setTime;[lower]</InnerMethodInvoke>
                <InnerMethodInvoke>cal;set;[Calendar.YEAR, startCal.get(Calendar.YEAR)]</InnerMethodInvoke>
                <InnerMethodInvoke>dbAvg;setRegionStats;[avgRegion]</InnerMethodInvoke>
                <InnerMethodInvoke>dbAvg;setZipStats;[avg]</InnerMethodInvoke>
                <InnerMethodInvoke>ret;add;[dbWeek]</InnerMethodInvoke>
                <InnerMethodInvoke>ret;add;[dbAvg]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FormValidationException</ExceptionType>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isFluEpidemic</MethodName>
            <MethodComment>/** 
 * Determines if an Influenza Epidemic is happening
 * @param curDateStr a date in the currently evaluated week
 * @param zip the zip code to analyze
 * @return whether or not there is an epidemic
 * @throws ParseException
 * @throws DBException
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <ParameterType>String curDateStr</ParameterType>
                <ParameterType>String zip</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Date [curDate=new SimpleDateFormat("MM/dd/yyyy").parse(curDateStr)]</InnerVar>
                <InnerVar>Calendar [cal=Calendar.getInstance()]</InnerVar>
                <InnerVar>int [weekOfYr=cal.get(Calendar.WEEK_OF_YEAR)]</InnerVar>
                <InnerVar>double [threshold=calcThreshold(weekOfYr)]</InnerVar>
                <InnerVar>double [thresholdL=calcThreshold(weekOfYr - 1)]</InnerVar>
                <InnerVar>double [thresholdN=calcThreshold(weekOfYr + 1)]</InnerVar>
                <InnerVar>DiagnosisStatisticsBean [dbNow=diagnosesDAO.getCountForWeekOf(ICD_INFLUENZA,zip,cal.getTime())]</InnerVar>
                <InnerVar>DiagnosisStatisticsBean [dbLast=diagnosesDAO.getCountForWeekOf(ICD_INFLUENZA,zip,cal.getTime())]</InnerVar>
                <InnerVar>DiagnosisStatisticsBean [dbNext=diagnosesDAO.getCountForWeekOf(ICD_INFLUENZA,zip,cal.getTime())]</InnerVar>
                <InnerVar>double [weekNow=(double)dbNow.getRegionStats()]</InnerVar>
                <InnerVar>double [weekL=(double)dbLast.getRegionStats()]</InnerVar>
                <InnerVar>double [weekN=(double)dbNext.getRegionStats()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>new SimpleDateFormat("MM/dd/yyyy");parse;["01/04/1998"]</InnerMethodInvoke>
                <InnerMethodInvoke>cal;setTime;[curDate]</InnerMethodInvoke>
                <InnerMethodInvoke>cal;add;[Calendar.HOUR, -12 * 7]</InnerMethodInvoke>
                <InnerMethodInvoke>cal;add;[Calendar.HOUR, 2 * 12 * 7]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ParseException</ExceptionType>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>calcThreshold</MethodName>
            <MethodComment>/** 
 * Calculates the threshold of an influenza epidemic
 * @param weekNumber the week of the year
 * @return the epidemic threshold for flu cases
 */
</MethodComment>
            <ReturnType>double</ReturnType>
            <ParameterList>
                <ParameterType>double weekNumber</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isMalariaEpidemic</MethodName>
            <MethodComment>/** 
 * Determines whether a Malaria epidemic is happening
 * @param weekDate a date in the currently evaluated week
 * @param zip the zip code to analyze
 * @param thresholdStr the threshold for an epidemic
 * @return whether or not there is an epidemic
 * @throws DBException
 * @throws ParseException
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <ParameterType>String weekDate</ParameterType>
                <ParameterType>String zip</ParameterType>
                <ParameterType>String thresholdStr</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Date [wkDate=new SimpleDateFormat("MM/dd/yyyy").parse(weekDate)]</InnerVar>
                <InnerVar>ArrayList&lt;DiagnosisStatisticsBean&gt; [dbList=new ArrayList&lt;DiagnosisStatisticsBean&gt;()]</InnerVar>
                <InnerVar>ArrayList&lt;DiagnosisStatisticsBean&gt; [dbListL=new ArrayList&lt;DiagnosisStatisticsBean&gt;()]</InnerVar>
                <InnerVar>ArrayList&lt;DiagnosisStatisticsBean&gt; [dbListN=new ArrayList&lt;DiagnosisStatisticsBean&gt;()]</InnerVar>
                <InnerVar>int [threshold=Integer.parseInt(thresholdStr)]</InnerVar>
                <InnerVar>DiagnosisStatisticsBean [current=diagnosesDAO.getCountForWeekOf(ICD_MALARIA,zip,wkDate)]</InnerVar>
                <InnerVar>long [weekTotal=current.getRegionStats()]</InnerVar>
                <InnerVar>Calendar [cal=Calendar.getInstance()]</InnerVar>
                <InnerVar>DiagnosisStatisticsBean [last=diagnosesDAO.getCountForWeekOf(ICD_MALARIA,zip,cal.getTime())]</InnerVar>
                <InnerVar>long [weekTotalL=last.getRegionStats()]</InnerVar>
                <InnerVar>DiagnosisStatisticsBean [next=diagnosesDAO.getCountForWeekOf(ICD_MALARIA,zip,cal.getTime())]</InnerVar>
                <InnerVar>long [weekTotalN=next.getRegionStats()]</InnerVar>
                <InnerVar>int [weekOfYr=cal.get(Calendar.WEEK_OF_YEAR)]</InnerVar>
                <InnerVar>Date [startData=diagnosesDAO.findEarliestIncident(ICD_MALARIA)]</InnerVar>
                <InnerVar>Calendar [startDateCal=Calendar.getInstance()]</InnerVar>
                <InnerVar>Calendar [wkDateCal=Calendar.getInstance()]</InnerVar>
                <InnerVar>long [total=0]</InnerVar>
                <InnerVar>long [avg=0]</InnerVar>
                <InnerVar>long [avgL=0]</InnerVar>
                <InnerVar>long [avgN=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cal;setTime;[wkDate]</InnerMethodInvoke>
                <InnerMethodInvoke>cal;add;[Calendar.HOUR, -7 * 24]</InnerMethodInvoke>
                <InnerMethodInvoke>cal;add;[Calendar.HOUR, 2 * 7 * 24]</InnerMethodInvoke>
                <InnerMethodInvoke>cal;setTime;[wkDate]</InnerMethodInvoke>
                <InnerMethodInvoke>startDateCal;setTime;[startData]</InnerMethodInvoke>
                <InnerMethodInvoke>wkDateCal;setTime;[wkDate]</InnerMethodInvoke>
                <InnerMethodInvoke>cal;set;[Calendar.YEAR, startDateCal.get(Calendar.YEAR)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
                <ExceptionType>ParseException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>