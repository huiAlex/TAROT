<Class>
    <Id>527</Id>
    <Package>edu.ncsu.csc.itrust.action.base</Package>
    <ClassName>OfficeVisitBaseAction</ClassName>
    <SuperClass>PatientBaseAction</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>OfficeVisitBaseAction  /** 
 * An abstract class which contains functionalities common among all actions relating to inserting and editing office visits. Because all office visits are with a certain patient, OfficeVisitBaseAction extends PatientBaseAction. Use this class whenever you have a page which not only requires a patient MID, but an office visit ID. Pass those IDs to the constructor, and an exception will be thrown if they are not valid IDs (which should kick the user out to the home page). The concrete methods created by this class allow for its association with the unique identifier of a given office visit. These identifiers can also be verified for their correctness and existence. Very similar to  {@link PatientBaseAction} and {@link PersonnelBaseAction}
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>UNSAVED_VISIT_ID</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>ovDAO</FieldName>
            <FieldType>OfficeVisitDAO</FieldType>
        </Field>
        <Field>
            <FieldName>ovID</FieldName>
            <FieldType>long</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>OfficeVisitBaseAction</MethodName>
            <MethodComment>/** 
 * The default constructor.
 * @param factory A database access object factory for supplying a runtime context.
 * @param pidString The patient's MID as a String, to be passed to the super constructor (for PatientBaseAction)
 * @param ovIDString The unique identifier of the office visit as a String.
 * @throws iTrustException If any of the supplied parameters is incorrect or there is a DB problem.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <ParameterType>DAOFactory factory</ParameterType>
                <ParameterType>String pidString</ParameterType>
                <ParameterType>String ovIDString</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>iTrustException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>OfficeVisitBaseAction</MethodName>
            <MethodComment>/** 
 * Constructs an action that is initially unsaved.  Like the three-argument  constructor except that the office visit id is a sentinel value and does  not represent a valid office visit.
 * @param factory
 * @param pidString
 * @throws iTrustException
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <ParameterType>DAOFactory factory</ParameterType>
                <ParameterType>String pidString</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>iTrustException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkOfficeVisitID</MethodName>
            <MethodComment>/** 
 * Asserts whether this unique office visit identifier both exists and is associated with the patient in the database.
 * @param input The presumed identifier as a String.
 * @return The same identifier as a long of the existing office visit.
 * @throws iTrustException If the visit does not exist or if there is a DB problem.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <ParameterType>String input</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>iTrustException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isUnsaved</MethodName>
            <MethodComment>/** 
 * Indicates if the office visit has been saved or not.
 * @return boolean that indicates if this has been saved. 
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <ParameterType></ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>verifySaved</MethodName>
            <MethodComment>/** 
 * Raises an exception if the office visit has not been saved.  Otherwise,  does nothing. 
 * @throws iTrustException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <ParameterType></ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>iTrustException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOvID</MethodName>
            <MethodComment>/** 
 * For obtaining the unique identifier of the office visit this action is associated with.
 * @return A long of the identifier.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <ParameterType></ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>encode</MethodName>
            <MethodComment>/** 
 * Converts all characters of the input string to their HTML special characters equivalent representation. Explicitly, the less than symbol becomes lt, the greater than symbol becomes gt and a newline feed becomes br.
 * @param input The string to encode.
 * @return The encoded string.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <ParameterType>String input</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [str=input.replaceAll("&lt;","&amp;lt;")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>