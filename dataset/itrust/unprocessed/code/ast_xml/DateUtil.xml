<Class>
    <Id>531</Id>
    <Package>edu.ncsu.csc.itrust</Package>
    <ClassName>DateUtil</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>DateUtil  /** 
 * Provides a few extra date utilities
 * @author Andy
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>YEAR_IN_MS</FieldName>
            <FieldType>long</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>yearsAgo</MethodName>
            <MethodComment>/** 
 * Returns a MM/dd/yyyy format of the date for the given years ago
 * @param years
 * @return
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <ParameterType>long years</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>long [time=System.currentTimeMillis()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isInMonthRange</MethodName>
            <MethodComment>/** 
 * Checks to see if a given date is within a range of months &lt;strong&gt;INCLUSIVELY&lt;/strong&gt;, agnostic of the year. &lt;br /&gt; &lt;br /&gt; The range "wraps" so that if the first month is after the second month, then the definition of "is in month range" is:&lt;br /&gt; the date falls outside of secondMonth, firstMonth, but including secondMonth and firstMonth. Modular arithmetic is used to adjust month values into the valid range.
 * @param date
 * @param firstMonth
 * @param secondMonth
 * @return
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <ParameterType>java.util.Date date</ParameterType>
                <ParameterType>int firstMonth</ParameterType>
                <ParameterType>int secondMonth</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Calendar [cal=new GregorianCalendar()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cal;setTime;[date]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>currentlyInMonthRange</MethodName>
            <MethodComment>/** 
 * Same as isInMonthRange but uses the current date as the date value.
 * @see DateUtil#isInMonthRange(Date,int,int)
 * @param firstMonth
 * @param secondMonth
 * @return
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <ParameterType>int firstMonth</ParameterType>
                <ParameterType>int secondMonth</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDateXyearsAgoFromNow</MethodName>
            <MethodComment>/** 
 * Returns the date a certain number of years ago
 * @param years how many years ago
 * @return the date it was however many years ago
 */
</MethodComment>
            <ReturnType>Date</ReturnType>
            <ParameterList>
                <ParameterType>int years</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Calendar [cal=new GregorianCalendar()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cal;add;[Calendar.YEAR, -years]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSQLdateXyearsAgoFromNow</MethodName>
            <MethodComment>/** 
 * Returns the date a certain number of years ago
 * @param years how many years ago
 * @return the date it was however many years ago
 */
</MethodComment>
            <ReturnType>java.sql.Date</ReturnType>
            <ParameterList>
                <ParameterType>int years</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDateXDaysAgoFromNow</MethodName>
            <MethodComment>/** 
 * Returns the date a certain number of days ago
 * @param days how many days ago
 * @return the date it was however many days ago
 */
</MethodComment>
            <ReturnType>Date</ReturnType>
            <ParameterList>
                <ParameterType>int days</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Calendar [cal=new GregorianCalendar()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cal;add;[Calendar.DAY_OF_YEAR, -days]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSQLdateXDaysAgoFromNow</MethodName>
            <MethodComment>/** 
 * Returns the date a certain number of days ago
 * @param days how many days ago
 * @return the date it was however many days ago
 */
</MethodComment>
            <ReturnType>java.sql.Date</ReturnType>
            <ParameterList>
                <ParameterType>int days</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setSQLMonthRange</MethodName>
            <MethodComment>/** 
 * &lt;!--Pass in INSTANTIATED sql date objects and they will be set to the specified range, ie, FROM &lt;current year&gt; - yearsAgo1/monthValue1/01 TO &lt;current year&gt; - yearsAgo2/monthValue2/&lt;last day of month2&gt;--&gt; Pass in INSTANTIATED sql date objects and they will be set to the specified range, ie, FROM &amp;lt;current year&amp;gt; - yearsAgo1/monthValue1/01 TO &amp;lt;current year&amp;gt; - yearsAgo2/monthValue2/&amp;lt;last day of month2&amp;gt;
 * @param month1 First sql.Date object to be set
 * @param monthValue1
 * @param yearsAgo1
 * @param month2 Second sql.Date object to be set
 * @param monthValue2
 * @param yearsAgo2
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <ParameterType>java.sql.Date month1</ParameterType>
                <ParameterType>int monthValue1</ParameterType>
                <ParameterType>int yearsAgo1</ParameterType>
                <ParameterType>java.sql.Date month2</ParameterType>
                <ParameterType>int monthValue2</ParameterType>
                <ParameterType>int yearsAgo2</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>GregorianCalendar [cal=new GregorianCalendar()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cal;add;[Calendar.YEAR, -yearsAgo1]</InnerMethodInvoke>
                <InnerMethodInvoke>cal;set;[Calendar.MONTH, monthValue1]</InnerMethodInvoke>
                <InnerMethodInvoke>cal;set;[Calendar.DAY_OF_MONTH, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>month1;setTime;[cal.getTimeInMillis()]</InnerMethodInvoke>
                <InnerMethodInvoke>cal;add;[Calendar.YEAR, yearsAgo1]</InnerMethodInvoke>
                <InnerMethodInvoke>cal;add;[Calendar.YEAR, -yearsAgo2]</InnerMethodInvoke>
                <InnerMethodInvoke>cal;set;[Calendar.MONTH, monthValue2]</InnerMethodInvoke>
                <InnerMethodInvoke>cal;set;[Calendar.DAY_OF_MONTH, cal.getActualMaximum(Calendar.DAY_OF_MONTH)]</InnerMethodInvoke>
                <InnerMethodInvoke>month2;setTime;[cal.getTimeInMillis()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>