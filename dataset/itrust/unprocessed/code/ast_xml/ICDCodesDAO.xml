<Class>
    <Id>409</Id>
    <Package>edu.ncsu.csc.itrust.dao.mysql</Package>
    <ClassName>ICDCodesDAO</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ICDCodesDAO  /** 
 * Used for managing all ICD codes. DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is, one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are added. DAOs can assume that all data has been validated and is correct. DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be accessed by DAOFactory (@see  {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC connections and/or accessing other DAOs. The International Statistical Classification of Diseases and Related Health Problems  (most commonly known by the abbreviation ICD) provides codes to classify diseases and a  wide variety of signs, symptoms, abnormal findings, complaints, social circumstances and  external causes of injury or disease. 
 * @see http://www.cdc.gov/nchs/icd9.htm
 * @author Andy
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>factory</FieldName>
            <FieldType>DAOFactory</FieldType>
        </Field>
        <Field>
            <FieldName>diagnosisLoader</FieldName>
            <FieldType>DiagnosisBeanLoader</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ICDCodesDAO</MethodName>
            <MethodComment>/** 
 * The typical constructor.
 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <ParameterType>DAOFactory factory</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAllICDCodes</MethodName>
            <MethodComment>/** 
 * Returns all ICD9CM codes sorted by code
 * @return java.util.List of DiagnosisBeans
 * @throws DBException
 */
</MethodComment>
            <ReturnType>DiagnosisBean</ReturnType>
            <ParameterList>
                <ParameterType></ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getICDCode</MethodName>
            <MethodComment>/** 
 * Returns a particular description for a given code
 * @param code The String representation of the code.
 * @return A DiagnosisBean of the code.
 * @throws DBException
 */
</MethodComment>
            <ReturnType>DiagnosisBean</ReturnType>
            <ParameterList>
                <ParameterType>String code</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addICDCode</MethodName>
            <MethodComment>/** 
 * Adds an ICD9CM code. Returns whether or not the change was made.
 * @param diag The DiagnosisBean representing the changes.
 * @return A boolean indicating success.
 * @throws DBException
 * @throws iTrustException
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <ParameterType>DiagnosisBean diag</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
                <ExceptionType>iTrustException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>updateCode</MethodName>
            <MethodComment>/** 
 * Changes a the description of a particular code.
 * @param diag A DiagnosisBean representing the changes.
 * @return A boolean indicating the number of updated rows.
 * @throws DBException
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <ParameterType>DiagnosisBean diag</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [rows]</InnerVar>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>