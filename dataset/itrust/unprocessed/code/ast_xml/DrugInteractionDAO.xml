<Class>
    <Id>407</Id>
    <Package>edu.ncsu.csc.itrust.dao.mysql</Package>
    <ClassName>DrugInteractionDAO</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>DrugInteractionDAO  /** 
 * Used for managing drug interactions. DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is, one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are added. DAOs can assume that all data has been validated and is correct. DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be accessed by DAOFactory (@see  {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC connections and/or accessing other DAOs.
 * @see http://www.fda.gov/Drugs/InformationOnDrugs/ucm142438.htm
 * @author Andy
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>factory</FieldName>
            <FieldType>DAOFactory</FieldType>
        </Field>
        <Field>
            <FieldName>interactionLoader</FieldName>
            <FieldType>DrugInteractionBeanLoader</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>DrugInteractionDAO</MethodName>
            <MethodComment>/** 
 * The typical constructor.
 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <ParameterType>DAOFactory factory</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getInteractions</MethodName>
            <MethodComment>/** 
 * Returns a list of all drug interactions for the input drug name
 * @return A java.util.List of DrugInteractionBeans.
 * @throws DBException
 */
</MethodComment>
            <ReturnType>DrugInteractionBean</ReturnType>
            <ParameterList>
                <ParameterType>String drugCode</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reportInteraction</MethodName>
            <MethodComment>/** 
 * Adds a new drug interaction, returns whether or not the addition was successful. If the code already exists, an iTrustException is thrown.
 * @param firstDrug  The name of the first drug in an interaction.
 * @param secondDrug  The name of the second drug in an interaction.
 * @param description  Explanation of the drug interaction.
 * @return A boolean indicating success or failure.
 * @throws DBException
 * @throws iTrustException
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <ParameterType>String firstDrug</ParameterType>
                <ParameterType>String secondDrug</ParameterType>
                <ParameterType>String description</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;DrugInteractionBean&gt; [currentIntsDrug2=getInteractions(secondDrug)]</InnerVar>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
                <ExceptionType>iTrustException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>deleteInteraction</MethodName>
            <MethodComment>/** 
 * Remove an interaction from the database
 * @param firstDrug  The name of the first patient
 * @param secondDrug  The name of the second patient
 * @return true if removed successfully, false if not in list
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <ParameterType>String firstDrug</ParameterType>
                <ParameterType>String secondDrug</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>