<Class>
    <Id>59</Id>
    <Package>edu.ncsu.csc.itrust.bean</Package>
    <ClassName>LabProcedureBeanTest</ClassName>
    <SuperClass>TestCase</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>l</FieldName>
            <FieldType>LabProcedureBean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>setUp</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <ParameterType></ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Date [date=new SimpleDateFormat("MM/dd/yyyy HH:mm").parse("03/28/2008 12:00")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>l;setPid;[0000000001]</InnerMethodInvoke>
                <InnerMethodInvoke>l;setProcedureID;[10]</InnerMethodInvoke>
                <InnerMethodInvoke>l;setLoinc;["12345-6"]</InnerMethodInvoke>
                <InnerMethodInvoke>l;statusInTransit;[]</InnerMethodInvoke>
                <InnerMethodInvoke>l;setCommentary;["Their blood is purple and orange."]</InnerMethodInvoke>
                <InnerMethodInvoke>l;setResults;["Please call us for your results."]</InnerMethodInvoke>
                <InnerMethodInvoke>l;setOvID;[10023]</InnerMethodInvoke>
                <InnerMethodInvoke>l;setTimestamp;[new java.sql.Timestamp(date.getTime())]</InnerMethodInvoke>
                <InnerMethodInvoke>l;allow;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testBaseCaseBean</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <ParameterType></ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Date [date=new SimpleDateFormat("MM/dd/yyyy HH:mm").parse("03/28/2008 12:00")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertEquals;[0000000001, l.getPid()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[10, l.getProcedureID()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["12345-6", l.getLoinc()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[LabProcedureBean.In_Transit, l.getStatus()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["Their blood is purple and orange.", l.getCommentary()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["Please call us for your results.", l.getResults()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[10023, l.getOvID()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[date.getTime(), l.getTimestamp().getTime()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[LabProcedureBean.Allow, l.getRights()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testViewedByPatient</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <ParameterType></ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LabProcedureBean [lp=new LabProcedureBean()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>lp;setStatus;[LabProcedureBean.In_Transit]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[false, lp.isViewedByPatient()]</InnerMethodInvoke>
                <InnerMethodInvoke>lp;setViewedByPatient;[true]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[false, lp.isViewedByPatient()]</InnerMethodInvoke>
                <InnerMethodInvoke>lp;setStatus;[LabProcedureBean.Completed]</InnerMethodInvoke>
                <InnerMethodInvoke>lp;setViewedByPatient;[true]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[true, lp.isViewedByPatient()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testGetNumericalResultUnit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <ParameterType></ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LabProcedureBean [lp=new LabProcedureBean()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertEquals;["", lp.getNumericalResultUnit()]</InnerMethodInvoke>
                <InnerMethodInvoke>lp;setNumericalResultUnit;["grams"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["grams", lp.getNumericalResultUnit()]</InnerMethodInvoke>
                <InnerMethodInvoke>lp;setNumericalResultUnit;["ml"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["ml", lp.getNumericalResultUnit()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testGetNumericalResultAsDouble</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <ParameterType></ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LabProcedureBean [lp=new LabProcedureBean()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertEquals;["", lp.getNumericalResult()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[Double.NaN, lp.getNumericalResultAsDouble(), 1e-7]</InnerMethodInvoke>
                <InnerMethodInvoke>lp;setNumericalResult;["0.0"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["0.0", lp.getNumericalResult()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[0.0, lp.getNumericalResultAsDouble(), 1e-7]</InnerMethodInvoke>
                <InnerMethodInvoke>lp;setNumericalResult;["0.1"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["0.1", lp.getNumericalResult()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[0.1, lp.getNumericalResultAsDouble(), 1e-7]</InnerMethodInvoke>
                <InnerMethodInvoke>lp;setNumericalResult;["-5.1"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["-5.1", lp.getNumericalResult()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[-5.1, lp.getNumericalResultAsDouble(), 1e-7]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testGetUpperBoundAsDouble</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <ParameterType></ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LabProcedureBean [lp=new LabProcedureBean()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertEquals;["", lp.getUpperBound()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[Double.NaN, lp.getUpperBoundAsDouble(), 1e-7]</InnerMethodInvoke>
                <InnerMethodInvoke>lp;setUpperBound;["0.0"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["0.0", lp.getUpperBound()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[0.0, lp.getUpperBoundAsDouble(), 1e-7]</InnerMethodInvoke>
                <InnerMethodInvoke>lp;setUpperBound;["0.1"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["0.1", lp.getUpperBound()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[0.1, lp.getUpperBoundAsDouble(), 1e-7]</InnerMethodInvoke>
                <InnerMethodInvoke>lp;setUpperBound;["-5.1"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["-5.1", lp.getUpperBound()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[-5.1, lp.getUpperBoundAsDouble(), 1e-7]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testGetLowerBoundAsDouble</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <ParameterType></ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LabProcedureBean [lp=new LabProcedureBean()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertEquals;["", lp.getLowerBound()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[Double.NaN, lp.getLowerBoundAsDouble(), 1e-7]</InnerMethodInvoke>
                <InnerMethodInvoke>lp;setLowerBound;["0.0"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["0.0", lp.getLowerBound()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[0.0, lp.getLowerBoundAsDouble(), 1e-7]</InnerMethodInvoke>
                <InnerMethodInvoke>lp;setLowerBound;["0.1"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["0.1", lp.getLowerBound()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[0.1, lp.getLowerBoundAsDouble(), 1e-7]</InnerMethodInvoke>
                <InnerMethodInvoke>lp;setLowerBound;["-5.1"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["-5.1", lp.getLowerBound()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[-5.1, lp.getLowerBoundAsDouble(), 1e-7]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>