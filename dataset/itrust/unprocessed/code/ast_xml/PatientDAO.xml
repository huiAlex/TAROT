<Class>
    <Id>427</Id>
    <Package>edu.ncsu.csc.itrust.dao.mysql</Package>
    <ClassName>PatientDAO</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>PatientDAO  /** 
 * Used for managing all static information related to a patient. For other information related to all aspects of patient care, see the other DAOs. DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is, one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are added. DAOs can assume that all data has been validated and is correct. DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be accessed by DAOFactory (@see  {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC connections and/or accessing other DAOs.
 * @author Andy
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>factory</FieldName>
            <FieldType>DAOFactory</FieldType>
        </Field>
        <Field>
            <FieldName>patientLoader</FieldName>
            <FieldType>PatientLoader</FieldType>
        </Field>
        <Field>
            <FieldName>personnelLoader</FieldName>
            <FieldType>PersonnelLoader</FieldType>
        </Field>
        <Field>
            <FieldName>diagnosisLoader</FieldName>
            <FieldType>DiagnosisBeanLoader</FieldType>
        </Field>
        <Field>
            <FieldName>prescriptionLoader</FieldName>
            <FieldType>PrescriptionBeanLoader</FieldType>
        </Field>
        <Field>
            <FieldName>procedureLoader</FieldName>
            <FieldType>ProcedureBeanLoader</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>PatientDAO</MethodName>
            <MethodComment>/** 
 * The typical constructor.
 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <ParameterType>DAOFactory factory</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getName</MethodName>
            <MethodComment>/** 
 * Returns the name for the given MID
 * @param mid The MID of the patient in question.
 * @return A String representing the patient's first name and last name.
 * @throws iTrustException
 * @throws DBException
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <ParameterType>long mid</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>iTrustException</ExceptionType>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRole</MethodName>
            <MethodComment>/** 
 * Returns the role of a particular patient - why is this in PatientDAO? It should be in AuthDAO
 * @param mid The MID of the patient in question.
 * @param role A String representing the role of the patient.
 * @return A String representing the patient's role.
 * @throws iTrustException
 * @throws DBException
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <ParameterType>long mid</ParameterType>
                <ParameterType>String role</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>iTrustException</ExceptionType>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addEmptyPatient</MethodName>
            <MethodComment>/** 
 * Adds an empty patient to the table, returns the new MID
 * @return The MID of the patient as a long.
 * @throws DBException
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <ParameterType></ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPatient</MethodName>
            <MethodComment>/** 
 * Returns the patient's information for a given ID
 * @param mid The MID of the patient to retrieve.
 * @return A PatientBean representing the patient.
 * @throws DBException
 */
</MethodComment>
            <ReturnType>PatientBean</ReturnType>
            <ParameterList>
                <ParameterType>long mid</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>editPatient</MethodName>
            <MethodComment>/** 
 * Updates a patient's information for the given MID
 * @param p The patient bean representing the new information for the patient.
 * @throws DBException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <ParameterType>PatientBean p</ParameterType>
                <ParameterType>long hcpid</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addHistory</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <ParameterType>long pid</ParameterType>
                <ParameterType>long hcpid</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasHistory</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <ParameterType>long pid</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
                <InnerVar>boolean [hasHistory=false]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPatientHistory</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PatientHistoryBean</ReturnType>
            <ParameterList>
                <ParameterType>long mid</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
                <InnerVar>ArrayList&lt;PatientHistoryBean&gt; [pList]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkPatientExists</MethodName>
            <MethodComment>/** 
 * Returns whether or not the patient exists
 * @param pid The MID of the patient in question.
 * @return A boolean indicating whether the patient exists.
 * @throws DBException
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <ParameterType>long pid</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDeclaredHCPs</MethodName>
            <MethodComment>/** 
 * Returns a list of HCPs who are declared by the given patient
 * @param pid The MID of the patient in question.
 * @return A java.util.List of Personnel Beans.
 * @throws DBException
 */
</MethodComment>
            <ReturnType>PersonnelBean</ReturnType>
            <ParameterList>
                <ParameterType>long pid</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>declareHCP</MethodName>
            <MethodComment>/** 
 * Declares an HCP for a particular patient
 * @param pid The MID of the patient in question.
 * @param hcpID The HCP's MID.
 * @return A boolean as to whether the insertion was successful.
 * @throws DBException
 * @throws iTrustException
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <ParameterType>long pid</ParameterType>
                <ParameterType>long hcpID</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
                <ExceptionType>iTrustException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>undeclareHCP</MethodName>
            <MethodComment>/** 
 * Undeclare an HCP for a given patient
 * @param pid The MID of the patient in question.
 * @param hcpID The MID of the HCP in question.
 * @return A boolean indicating whether the action was successful.
 * @throws DBException
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <ParameterType>long pid</ParameterType>
                <ParameterType>long hcpID</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkDeclaredHCP</MethodName>
            <MethodComment>/** 
 * Check if a patient has declared the given HCP
 * @param pid The MID of the patient in question as a long.
 * @param hcpid The MID of the HCP in question as a long.
 * @return
 * @throws DBException
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <ParameterType>long pid</ParameterType>
                <ParameterType>long hcpid</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRepresented</MethodName>
            <MethodComment>/** 
 * Return a list of patients that the given patient represents
 * @param pid The MID of the patient in question.
 * @return A java.util.List of PatientBeans
 * @throws DBException
 */
</MethodComment>
            <ReturnType>PatientBean</ReturnType>
            <ParameterList>
                <ParameterType>long pid</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRepresenting</MethodName>
            <MethodComment>/** 
 * Return a list of patients that the given patient is represented by
 * @param pid The MID of the patient in question.
 * @return A java.util.List of PatientBeans.
 * @throws DBException
 */
</MethodComment>
            <ReturnType>PatientBean</ReturnType>
            <ParameterList>
                <ParameterType>long pid</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>represents</MethodName>
            <MethodComment>/** 
 * Check if the given representer represents the representee
 * @param representer The MID of the representer in question.
 * @param representee The MID of the representee in question.
 * @return A boolean indicating whether represenation is in place.
 * @throws DBException
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <ParameterType>long representer</ParameterType>
                <ParameterType>long representee</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addRepresentative</MethodName>
            <MethodComment>/** 
 * Assign a representer to the representee
 * @param representer The MID of the representer as a long.
 * @param representee The MID of the representee as a long.
 * @return A boolean as to whether the insertion was correct.
 * @throws DBException
 * @throws iTrustException
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <ParameterType>long representer</ParameterType>
                <ParameterType>long representee</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
                <ExceptionType>iTrustException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeRepresentative</MethodName>
            <MethodComment>/** 
 * Unassign the representation
 * @param representer The MID of the representer in question.
 * @param representee The MID of the representee in question.
 * @return A boolean indicating whether the unassignment was sucessful.
 * @throws DBException
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <ParameterType>long representer</ParameterType>
                <ParameterType>long representee</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDiagnoses</MethodName>
            <MethodComment>/** 
 * Return a list of all diagnoses for a given patient
 * @param pid The MID of the patient in question.
 * @return A java.util.List of Diagnoses.
 * @throws DBException
 */
</MethodComment>
            <ReturnType>DiagnosisBean</ReturnType>
            <ParameterList>
                <ParameterType>long pid</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getProcedures</MethodName>
            <MethodComment>/** 
 * Return a list of all procedures for a given patient
 * @param pid The MID of the patient in question.
 * @return A java.util.List of all the procedures.
 * @throws DBException
 */
</MethodComment>
            <ReturnType>ProcedureBean</ReturnType>
            <ParameterList>
                <ParameterType>long pid</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getImmunizationProcedures</MethodName>
            <MethodComment>/** 
 * Return a list of all immunization procedures for a given patient
 * @param pid The MID of the patient in question.
 * @return A java.util.List of the procedures.
 * @throws DBException
 */
</MethodComment>
            <ReturnType>ProcedureBean</ReturnType>
            <ParameterList>
                <ParameterType>long pid</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPrescriptions</MethodName>
            <MethodComment>/** 
 * Return a list of all prescriptions for a patient
 * @param patientID The MID of the patient in question.
 * @return A java.util.List of prescriptions.
 * @throws DBException
 */
</MethodComment>
            <ReturnType>PrescriptionBean</ReturnType>
            <ParameterList>
                <ParameterType>long patientID</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCurrentPrescriptions</MethodName>
            <MethodComment>/** 
 * Return a list of prescriptions which are currently prescribed for a patient
 * @param patientID The MID of the patient in question.
 * @return A java.util.List of prescription beans.
 * @throws DBException
 */
</MethodComment>
            <ReturnType>PrescriptionBean</ReturnType>
            <ParameterList>
                <ParameterType>long patientID</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getExpiredPrescriptions</MethodName>
            <MethodComment>/** 
 * Return a list of prescriptions which are expired prescription for a patient
 * @param patientID The MID of the patient in question.
 * @return A java.util.List of prescriptions.
 * @throws DBException
 */
</MethodComment>
            <ReturnType>PrescriptionBean</ReturnType>
            <ParameterList>
                <ParameterType>long patientID</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAllPatients</MethodName>
            <MethodComment>/** 
 * Lists every patient in the database.
 * @return A java.util.List of PatientBeans representing the patients.
 * @throws DBException
 */
</MethodComment>
            <ReturnType>PatientBean</ReturnType>
            <ParameterList>
                <ParameterType></ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRenewalNeedsPatients</MethodName>
            <MethodComment>/** 
 * Return a list of patients with a special-diagnosis-history who have the logged in HCP as a DHCP and whose medications are going to expire within seven days.
 * @param hcpMID The MID of the logged in HCP
 * @return A list of patients satisfying the conditions.
 * @throws DBException
 */
</MethodComment>
            <ReturnType>PatientBean</ReturnType>
            <ParameterList>
                <ParameterType>long hcpMID</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>searchForPatientsWithName</MethodName>
            <MethodComment>/** 
 * Returns all patients with names "LIKE" (as in SQL) the passed in parameters.
 * @param first The patient's first name.
 * @param last The patient's last name.
 * @return A java.util.List of PatientBeans.
 * @throws DBException
 */
</MethodComment>
            <ReturnType>PatientBean</ReturnType>
            <ParameterList>
                <ParameterType>String first</ParameterType>
                <ParameterType>String last</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>