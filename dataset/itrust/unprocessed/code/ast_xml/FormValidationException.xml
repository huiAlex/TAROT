<Class>
    <Id>612</Id>
    <Package>edu.ncsu.csc.itrust.exception</Package>
    <ClassName>FormValidationException</ClassName>
    <SuperClass>Exception</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>FormValidationException  /** 
 * This exception is used specifically for when an action involves the correct and proper submission of a web form.  Form Validation is handled by a series of other classes, but when form validation is incorrect or incomplete, this exception is thrown. 
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>serialVersionUID</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>errorList</FieldName>
            <FieldType>ErrorList</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>FormValidationException</MethodName>
            <MethodComment>/** 
 * Constructor with error messages passed as a list of parameters to the method.
 * @param errorMessages The list of error messages to be returned in the special form validation box.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <ParameterType>String errorMessages</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>FormValidationException</MethodName>
            <MethodComment>/** 
 * Constructor with error messages as a special ErrorList data type.
 * @param errorList An ErrorList object which contains the list of error messages.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <ParameterType>ErrorList errorList</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getErrorList</MethodName>
            <MethodComment>/** 
 * Returns the error list as a java.util.List of Strings.
 * @return The error list
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <ParameterType></ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMessage</MethodName>
            <MethodComment>/** 
 * The error message will be displayed at the top of the iTrust page as in other iTrust Exceptions.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <ParameterType></ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>printHTML</MethodName>
            <MethodComment>/** 
 * The special formatting for error messages is then kept in one place.
 * @param out The output writer (in this case a JSPWriter) where the formatted list will go.
 * @throws IOException If the writer is incorrect.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <ParameterType>JspWriter out</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>out;print;["&lt;h2&gt;Information not valid&lt;/h2&gt;&lt;div class=\"errorList\"&gt;"]</InnerMethodInvoke>
                <InnerMethodInvoke>out;print;["&lt;/div&gt;"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>printHTMLasString</MethodName>
            <MethodComment>/** 
 * Like printHTML, except a string is returned. 
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <ParameterType></ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [r="&lt;h2&gt;Information not valid&lt;/h2&gt;&lt;div class=\"errorList\"&gt;"]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>