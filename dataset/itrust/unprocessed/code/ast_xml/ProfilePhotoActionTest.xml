<Class>
    <Id>227</Id>
    <Package>edu.ncsu.csc.itrust.action</Package>
    <ClassName>ProfilePhotoActionTest</ClassName>
    <SuperClass>TestCase</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>action</FieldName>
            <FieldType>ProfilePhotoAction</FieldType>
        </Field>
        <Field>
            <FieldName>ctrl</FieldName>
            <FieldType>IMocksControl</FieldType>
        </Field>
        <Field>
            <FieldName>mockDAOFactory</FieldName>
            <FieldType>DAOFactory</FieldType>
        </Field>
        <Field>
            <FieldName>mockUpload</FieldName>
            <FieldType>ServletFileUpload</FieldType>
        </Field>
        <Field>
            <FieldName>mockDAO</FieldName>
            <FieldType>ProfilePhotoDAO</FieldType>
        </Field>
        <Field>
            <FieldName>mockItem</FieldName>
            <FieldType>FileItem</FieldType>
        </Field>
        <Field>
            <FieldName>request</FieldName>
            <FieldType>HttpServletRequest</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>setUp</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <ParameterType></ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>expect(mockDAOFactory.getProfilePhotoDAO()).andReturn(mockDAO);anyTimes;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testHappyPath</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <ParameterType></ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>InputStream [photoStream=ProfilePhotoDAO.class.getResourceAsStream("defaultProfilePhoto.jpg")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>expect(request.getMethod()).andReturn("post");anyTimes;[]</InnerMethodInvoke>
                <InnerMethodInvoke>expect(request.getContentType()).andReturn("multipart/");anyTimes;[]</InnerMethodInvoke>
                <InnerMethodInvoke>expect(request.getCharacterEncoding()).andReturn("");anyTimes;[]</InnerMethodInvoke>
                <InnerMethodInvoke>expect(mockItem.isFormField()).andReturn(false);anyTimes;[]</InnerMethodInvoke>
                <InnerMethodInvoke>expect(mockUpload.parseRequest(request));andReturn;[Arrays.asList(mockItem)]</InnerMethodInvoke>
                <InnerMethodInvoke>expect(mockItem.getInputStream());andReturn;[photoStream]</InnerMethodInvoke>
                <InnerMethodInvoke>expect(mockItem.getSize());andReturn;[2000l]</InnerMethodInvoke>
                <InnerMethodInvoke>expect(mockDAO.store(anyLong(),(BufferedImage)anyObject()));andReturn;[1]</InnerMethodInvoke>
                <InnerMethodInvoke>ctrl;replay;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["Picture stored successfully", action.storePicture(request)]</InnerMethodInvoke>
                <InnerMethodInvoke>ctrl;verify;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testUploadException</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <ParameterType></ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>expect(request.getMethod()).andReturn("post");anyTimes;[]</InnerMethodInvoke>
                <InnerMethodInvoke>expect(request.getContentType()).andReturn("multipart/");anyTimes;[]</InnerMethodInvoke>
                <InnerMethodInvoke>expect(request.getCharacterEncoding()).andReturn("");anyTimes;[]</InnerMethodInvoke>
                <InnerMethodInvoke>expect(mockItem.isFormField()).andReturn(false);anyTimes;[]</InnerMethodInvoke>
                <InnerMethodInvoke>expect(mockUpload.parseRequest(request));andThrow;[new FileUploadException("Testing")]</InnerMethodInvoke>
                <InnerMethodInvoke>ctrl;replay;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["Error uploading file - please try again", action.storePicture(request)]</InnerMethodInvoke>
                <InnerMethodInvoke>ctrl;verify;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testIOException</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <ParameterType></ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>expect(request.getMethod()).andReturn("post");anyTimes;[]</InnerMethodInvoke>
                <InnerMethodInvoke>expect(request.getContentType()).andReturn("multipart/");anyTimes;[]</InnerMethodInvoke>
                <InnerMethodInvoke>expect(request.getCharacterEncoding()).andReturn("");anyTimes;[]</InnerMethodInvoke>
                <InnerMethodInvoke>expect(mockItem.isFormField()).andReturn(false);anyTimes;[]</InnerMethodInvoke>
                <InnerMethodInvoke>expect(mockUpload.parseRequest(request));andReturn;[Arrays.asList(mockItem)]</InnerMethodInvoke>
                <InnerMethodInvoke>expect(mockItem.getInputStream());andThrow;[new IOException()]</InnerMethodInvoke>
                <InnerMethodInvoke>ctrl;replay;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["Error uploading file - please try again", action.storePicture(request)]</InnerMethodInvoke>
                <InnerMethodInvoke>ctrl;verify;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testNotMultipart</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <ParameterType></ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>expect(request.getMethod());andReturn;["post"]</InnerMethodInvoke>
                <InnerMethodInvoke>expect(request.getContentType()).andReturn("notmultipart/");anyTimes;[]</InnerMethodInvoke>
                <InnerMethodInvoke>ctrl;replay;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["Error uploading file - please try again", action.storePicture(request)]</InnerMethodInvoke>
                <InnerMethodInvoke>ctrl;verify;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testNormalConstructorNoException</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <ParameterType></ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testRemove</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <ParameterType></ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>expect(mockDAO.removePhoto(4L)).andReturn(0);anyTimes;[]</InnerMethodInvoke>
                <InnerMethodInvoke>ctrl;replay;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["Picture removed successfully. Now displaying default image.", action.removePhoto(4L)]</InnerMethodInvoke>
                <InnerMethodInvoke>ctrl;verify;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testRemoveException</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <ParameterType></ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>expect(mockDAO.removePhoto(4L)).andThrow(new IOException());anyTimes;[]</InnerMethodInvoke>
                <InnerMethodInvoke>ctrl;replay;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["Error removing file -- please try again", action.removePhoto(4L)]</InnerMethodInvoke>
                <InnerMethodInvoke>ctrl;verify;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>