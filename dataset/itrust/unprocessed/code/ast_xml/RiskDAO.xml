<Class>
    <Id>424</Id>
    <Package>edu.ncsu.csc.itrust.dao.mysql</Package>
    <ClassName>RiskDAO</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>RiskDAO  /** 
 * Used for finding risk factors for a given patient. DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is, one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are added. DAOs can assume that all data has been validated and is correct. DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be accessed by DAOFactory (@see  {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC connections and/or accessing other DAOs.
 * @author Andy
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>factory</FieldName>
            <FieldType>DAOFactory</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>RiskDAO</MethodName>
            <MethodComment>/** 
 * The typical constructor.
 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <ParameterType>DAOFactory factory</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasFamilyHistory</MethodName>
            <MethodComment>/** 
 * This method is implemented using  {@link FamilyDAO} for 2 reasons: (a) definitions of family membersmight change, so it's better to centralize that code and (2) to make this code a little bit "nicer" even though it executes one query per family member. If this method gets slow, then you will need to refactor. Otherwise, let's just keep it simple...
 * @param patientID The MID of the patient in question.
 * @param icdLower A double of the lower bound for the codes.
 * @param icdUpper A double of the upper bound for the codes.
 * @return A boolean indicating whether a family member had a match in this range.
 * @throws DBException
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <ParameterType>long patientID</ParameterType>
                <ParameterType>double icdLower</ParameterType>
                <ParameterType>double icdUpper</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;FamilyMemberBean&gt; [familyMembers=getFamilyMembers(patientID)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFamilyMembers</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>FamilyMemberBean</ReturnType>
            <ParameterList>
                <ParameterType>long patientID</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>FamilyDAO [famDAO=factory.getFamilyDAO()]</InnerVar>
                <InnerVar>List&lt;FamilyMemberBean&gt; [familyMembers=famDAO.getParents(patientID)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>familyMembers;addAll;[famDAO.getSiblings(patientID)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hadChildhoodInfection</MethodName>
            <MethodComment>/** 
 * Returns whether or not a patient had a childhood infection for the exact, given ICD codes.
 * @param patientID The MID of the patient in question.
 * @param icdCodes A parameter list of the ICD codes to match.
 * @return A boolean indicating whether this patient had all the listed ICD codes.
 * @throws DBException
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <ParameterType>long patientID</ParameterType>
                <ParameterType>double icdCodes</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createPrepared</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <ParameterType>int length</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [str=""]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setICDs</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <ParameterType>int start</ParameterType>
                <ParameterType>PreparedStatement ps</ParameterType>
                <ParameterType>double[] icdCodes</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasSmoked</MethodName>
            <MethodComment>/** 
 * Returns if the patient has ever smoked in their life
 * @param patientID The MID of the patient in question.
 * @return A boolean indicating whether the patient smoked.
 * @throws DBException
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <ParameterType>long patientID</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hadPriorDiagnoses</MethodName>
            <MethodComment>/** 
 * Returns if a patient has ever been diagnosed with the given ICD code, in the range [lower,upper)
 * @param patientID The MID of the patient in question.
 * @param lowerICDCode A double of the lower ICD code.
 * @param upperICDCode A double of the upper ICD code.
 * @return A boolean indicating whether there was a match in the given range.
 * @throws DBException
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <ParameterType>long patientID</ParameterType>
                <ParameterType>double lowerICDCode</ParameterType>
                <ParameterType>double upperICDCode</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>