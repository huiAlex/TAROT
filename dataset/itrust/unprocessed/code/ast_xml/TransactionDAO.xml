<Class>
    <Id>408</Id>
    <Package>edu.ncsu.csc.itrust.dao.mysql</Package>
    <ClassName>TransactionDAO</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>TransactionDAO  /** 
 * Used for the logging mechanism. DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is, one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are added. DAOs can assume that all data has been validated and is correct. DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be accessed by DAOFactory (@see  {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC connections and/or accessing other DAOs.
 * @author Andy
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>factory</FieldName>
            <FieldType>DAOFactory</FieldType>
        </Field>
        <Field>
            <FieldName>loader</FieldName>
            <FieldType>TransactionBeanLoader</FieldType>
        </Field>
        <Field>
            <FieldName>operationalProfileLoader</FieldName>
            <FieldType>OperationalProfileLoader</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>TransactionDAO</MethodName>
            <MethodComment>/** 
 * The typical constructor.
 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <ParameterType>DAOFactory factory</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAllTransactions</MethodName>
            <MethodComment>/** 
 * Returns the whole transaction log
 * @return
 * @throws DBException
 */
</MethodComment>
            <ReturnType>TransactionBean</ReturnType>
            <ParameterList>
                <ParameterType></ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>logTransaction</MethodName>
            <MethodComment>/** 
 * Log a transaction, just giving it the person who is logged in and the type
 * @param type The {@link TransactionType} enum representing the type this transaction is.
 * @param loggedInMID The MID of the user who is logged in.
 * @throws DBException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <ParameterType>TransactionType type</ParameterType>
                <ParameterType>long loggedInMID</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;logTransaction;[type, loggedInMID, 0L, ""]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>logTransaction</MethodName>
            <MethodComment>/** 
 * Log a transaction, with all of the info. The meaning of secondaryMID and addedInfo changes depending on the transaction type.
 * @param type The {@link TransactionType} enum representing the type this transaction is.
 * @param loggedInMID The MID of the user who is logged in.
 * @param secondaryMID Typically, the MID of the user who is being acted upon.
 * @param addedInfo A note about a subtransaction, or specifics of this transaction (for posterity).
 * @throws DBException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <ParameterType>TransactionType type</ParameterType>
                <ParameterType>long loggedInMID</ParameterType>
                <ParameterType>long secondaryMID</ParameterType>
                <ParameterType>String addedInfo</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAllRecordAccesses</MethodName>
            <MethodComment>/** 
 * Return a list of all transactions in which an HCP accessed the given patient's record
 * @param patientID The MID of the patient in question.
 * @return A java.util.List of transactions.
 * @throws DBException
 */
</MethodComment>
            <ReturnType>TransactionBean</ReturnType>
            <ParameterList>
                <ParameterType>long patientID</ParameterType>
                <ParameterType>long dlhcpID</ParameterType>
                <ParameterType>boolean getByRole</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTransactionsAffecting</MethodName>
            <MethodComment>/** 
 * The Most Thorough Fetch 
 * @param mid MID of the logged in user
 * @param dlhcpID MID of the user's DLHCP
 * @param start Index to start pulling entries from
 * @param range Number of entries to retrieve
 * @return List of &lt;range&gt; TransactionBeans affecting the user starting from the &lt;start&gt;th entry
 * @throws DBException
 */
</MethodComment>
            <ReturnType>TransactionBean</ReturnType>
            <ParameterList>
                <ParameterType>long mid</ParameterType>
                <ParameterType>long dlhcpID</ParameterType>
                <ParameterType>java.util.Date start</ParameterType>
                <ParameterType>int range</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRecordAccesses</MethodName>
            <MethodComment>/** 
 * Return a list of all transactions in which an HCP accessed the given patient's record, within the dates
 * @param patientID The MID of the patient in question.
 * @param lower The starting date as a java.util.Date
 * @param upper The ending date as a java.util.Date
 * @return A java.util.List of transactions.
 * @throws DBException
 */
</MethodComment>
            <ReturnType>TransactionBean</ReturnType>
            <ParameterList>
                <ParameterType>long patientID</ParameterType>
                <ParameterType>long dlhcpID</ParameterType>
                <ParameterType>java.util.Date lower</ParameterType>
                <ParameterType>java.util.Date upper</ParameterType>
                <ParameterType>boolean getByRole</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOperationalProfile</MethodName>
            <MethodComment>/** 
 * Returns the operation profile
 * @return The OperationalProfile as a bean.
 * @throws DBException
 */
</MethodComment>
            <ReturnType>OperationalProfile</ReturnType>
            <ParameterList>
                <ParameterType></ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addAndSortRoles</MethodName>
            <MethodComment>/** 
 * @param tbList
 * @param patientID
 * @param sortByRole
 * @return
 * @throws DBException
 */
</MethodComment>
            <ReturnType>TransactionBean</ReturnType>
            <ParameterList>
                <ParameterType>TransactionBean tbList</ParameterType>
                <ParameterType>long patientID</ParameterType>
                <ParameterType>boolean sortByRole</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>