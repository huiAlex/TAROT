<Class>
    <Id>420</Id>
    <Package>edu.ncsu.csc.itrust.dao.mysql</Package>
    <ClassName>RemoteMonitoringDAO</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>RemoteMonitoringDAO  /** 
 * Used for the keeping track of remote monitoring data. DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is, one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are added. DAOs can assume that all data has been validated and is correct. DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be accessed by DAOFactory (@see  {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC connections and/or accessing other DAOs.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>factory</FieldName>
            <FieldType>DAOFactory</FieldType>
        </Field>
        <Field>
            <FieldName>loader</FieldName>
            <FieldType>RemoteMonitoringDataBeanLoader</FieldType>
        </Field>
        <Field>
            <FieldName>rmListLoader</FieldName>
            <FieldType>RemoteMonitoringListsBeanLoader</FieldType>
        </Field>
        <Field>
            <FieldName>personnelLoader</FieldName>
            <FieldType>PersonnelLoader</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>RemoteMonitoringDAO</MethodName>
            <MethodComment>/** 
 * The typical constructor.
 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <ParameterType>DAOFactory factory</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTelemedicineBean</MethodName>
            <MethodComment>/** 
 * Return remote monitoring list data for a given patient.
 * @param patientMID Patient to retrieve data for.
 * @return List of TelemedicineBeans
 * @throws DBException
 */
</MethodComment>
            <ReturnType>TelemedicineBean</ReturnType>
            <ParameterList>
                <ParameterType>long patientMID</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPatientsData</MethodName>
            <MethodComment>/** 
 * Returns patient data for a given HCP
 * @return
 * @throws DBException
 */
</MethodComment>
            <ReturnType>RemoteMonitoringDataBean</ReturnType>
            <ParameterList>
                <ParameterType>long loggedInMID</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPatientDataByDate</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>RemoteMonitoringDataBean</ReturnType>
            <ParameterList>
                <ParameterType>long patientMID</ParameterType>
                <ParameterType>Date lower</ParameterType>
                <ParameterType>Date upper</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPatientDataByType</MethodName>
            <MethodComment>/** 
 * Get the requested type of data for the specified patient.
 * @param patientMID The MID of the patient
 * @param dataType The type of telemedicine data to return
 * @return A list of beans which all contain information of the requested type
 * @throws DBException
 */
</MethodComment>
            <ReturnType>RemoteMonitoringDataBean</ReturnType>
            <ParameterList>
                <ParameterType>long patientMID</ParameterType>
                <ParameterType>String dataType</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>storePatientData</MethodName>
            <MethodComment>/** 
 * Store pedometer reading and height/weight data for a given patient in the RemoteMonitoringData table
 * @param patientMID The MID of the patient
 * @param height The height of the patient
 * @param weight The weight of the patient
 * @param pedometerReading The pedometer reading of the patient
 * @param reporterRole  The role of the person that reported these monitoring stats
 * @param reporterMID  The MID of the person that reported these monitoring stats
 * @throws DBException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <ParameterType>long patientMID</ParameterType>
                <ParameterType>RemoteMonitoringDataBean bean</ParameterType>
                <ParameterType>String reporterRole</ParameterType>
                <ParameterType>long reporterMID</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>float [height=bean.getHeight()]</InnerVar>
                <InnerVar>float [weight=bean.getWeight()]</InnerVar>
                <InnerVar>int [pedometer=bean.getPedometerReading()]</InnerVar>
                <InnerVar>int [sbp=bean.getSystolicBloodPressure()]</InnerVar>
                <InnerVar>int [dbp=bean.getDiastolicBloodPressure()]</InnerVar>
                <InnerVar>int [glucose=bean.getGlucoseLevel()]</InnerVar>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
                <ExceptionType>iTrustException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNumberOfDailyEntries</MethodName>
            <MethodComment>/** 
 * Private method to get the number of entries for a certain patientID and a certain data type for today.
 * @param patientMID
 * @param dataType
 * @return the number of entries
 * @throws DBException
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <ParameterType>long patientMID</ParameterType>
                <ParameterType>String dataType</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>validatePR</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <ParameterType>long representativeMID</ParameterType>
                <ParameterType>long patientMID</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>iTrustException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMonitoringHCPs</MethodName>
            <MethodComment>/** 
 * Show the list of HCPs monitoring this patient
 * @param patientMID The MID of the patient
 * @return list of HCPs monitoring the provided patient
 */
</MethodComment>
            <ReturnType>PersonnelBean</ReturnType>
            <ParameterList>
                <ParameterType>long patientMID</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addPatientToList</MethodName>
            <MethodComment>/** 
 * Add a patient to the list of HCPs' monitoring lists of Patients
 * @param patientMID The MID of the patient
 * @param HCPMID The MID of the HCP
 * @param tBean The TelemedicineBean indicating what telemedicine data the patient is allowed to enter.
 * @return true if added successfully, false if already in list
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <ParameterType>long patientMID</ParameterType>
                <ParameterType>long HCPMID</ParameterType>
                <ParameterType>TelemedicineBean tBean</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removePatientFromList</MethodName>
            <MethodComment>/** 
 * Remove a patient from the list of HCPs' monitoring lists of Patients
 * @param patientMID The MID of the patient
 * @param HCPMID The MID of the HCP
 * @return true if removed successfully, false if not in list
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <ParameterType>long patientMID</ParameterType>
                <ParameterType>long HCPMID</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>