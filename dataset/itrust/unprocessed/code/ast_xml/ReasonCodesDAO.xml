<Class>
    <Id>431</Id>
    <Package>edu.ncsu.csc.itrust.dao.mysql</Package>
    <ClassName>ReasonCodesDAO</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ReasonCodesDAO  /** 
 * Used for managing the Reason Codes. DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is, one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are added. DAOs can assume that all data has been validated and is correct. DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be accessed by DAOFactory (@see  {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC connections and/or accessing other DAOs. The Override Reason Code (ORC) is a universal product identifier used in the United States for drugs intended for human use.
 * @see http://www.fda.gov/Drugs/InformationOnDrugs/ucm142438.htm
 * @author Andy
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>factory</FieldName>
            <FieldType>DAOFactory</FieldType>
        </Field>
        <Field>
            <FieldName>orcLoader</FieldName>
            <FieldType>OverrideReasonBeanLoader</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ReasonCodesDAO</MethodName>
            <MethodComment>/** 
 * The typical constructor.
 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <ParameterType>DAOFactory factory</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAllORCodes</MethodName>
            <MethodComment>/** 
 * Returns a list of all ND codes
 * @return A java.util.List of OverrideReasonBeans.
 * @throws DBException
 */
</MethodComment>
            <ReturnType>OverrideReasonBean</ReturnType>
            <ParameterList>
                <ParameterType></ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getORCode</MethodName>
            <MethodComment>/** 
 * Returns a particular description for a given code.
 * @param code The override reason code to be looked up.
 * @return A bean representing the override reason that was looked up.
 * @throws DBException
 */
</MethodComment>
            <ReturnType>OverrideReasonBean</ReturnType>
            <ParameterList>
                <ParameterType>String code</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addORCode</MethodName>
            <MethodComment>/** 
 * Adds a new override reason code, returns whether or not the change was made. If the code already exists, an iTrustException is thrown.
 * @param orc The overridereason bean to be added.
 * @return A boolean indicating success or failure.
 * @throws DBException
 * @throws iTrustException
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <ParameterType>OverrideReasonBean orc</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
                <ExceptionType>iTrustException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>updateCode</MethodName>
            <MethodComment>/** 
 * Updates a particular code's description
 * @param orc A bean representing the particular override reason to be updated.
 * @return An int representing the number of updated rows.
 * @throws DBException
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <ParameterType>OverrideReasonBean orc</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>