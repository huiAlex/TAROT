<Class>
    <Id>400</Id>
    <Package>edu.ncsu.csc.itrust.dao.mysql</Package>
    <ClassName>FamilyDAO</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>FamilyDAO  /** 
 * Used for queries related to families. DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is, one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are added. DAOs can assume that all data has been validated and is correct. DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be accessed by DAOFactory (@see  {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC connections and/or accessing other DAOs.
 * @author Andy
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>factory</FieldName>
            <FieldType>DAOFactory</FieldType>
        </Field>
        <Field>
            <FieldName>familyBeanLoader</FieldName>
            <FieldType>FamilyBeanLoader</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>FamilyDAO</MethodName>
            <MethodComment>/** 
 * The typical constructor.
 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <ParameterType>DAOFactory factory</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getParents</MethodName>
            <MethodComment>/** 
 * Return the information of the mother and father of this patient
 * @param pid -this patient
 * @return
 * @throws DBException
 */
</MethodComment>
            <ReturnType>FamilyMemberBean</ReturnType>
            <ParameterList>
                <ParameterType>long pid</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSiblings</MethodName>
            <MethodComment>/** 
 * Return a list of patients who share at least one parent (and that parent is not '0') with this patient
 * @param pid -this patient
 * @return A java.util.list of FamilyMemberBeans.
 * @throws DBException
 */
</MethodComment>
            <ReturnType>FamilyMemberBean</ReturnType>
            <ParameterList>
                <ParameterType>long pid</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getChildren</MethodName>
            <MethodComment>/** 
 * Return a list of patients whose mother or father is this patient
 * @param pid -this patient
 * @return A java.util.List of FamilyMemberBeans.
 * @throws DBException
 */
</MethodComment>
            <ReturnType>FamilyMemberBean</ReturnType>
            <ParameterList>
                <ParameterType>long pid</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFamilyMembers</MethodName>
            <MethodComment>/** 
 * Private helper method (since all three are alike)
 * @param pid
 * @param relation
 * @param query
 * @param secondParam -add the pid as the second parameter (the 3rd query was a little different)
 * @return A java.util.List of FamilyMemberBeans.
 * @throws DBException
 */
</MethodComment>
            <ReturnType>FamilyMemberBean</ReturnType>
            <ParameterList>
                <ParameterType>long pid</ParameterType>
                <ParameterType>String relation</ParameterType>
                <ParameterType>String query</ParameterType>
                <ParameterType>boolean secondParam</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>