<Class>
    <Id>3235</Id>
    <Package>org.infinispan.server.router.router.impl.hotrod.handlers</Package>
    <ClassName>SniRouteHandler</ClassName>
    <SuperClass>SniHandler</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>SniRouteHandler  /** 
 * Handler responsible for routing requests to proper backend based on SNI Host Name.
 * @author Sebastian ≈Åaskawiec
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>logger</FieldName>
            <FieldType>RouterLogger</FieldType>
        </Field>
        <Field>
            <FieldName>routingTable</FieldName>
            <FieldType>RoutingTable</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>SniRouteHandler</MethodName>
            <MethodComment>/** 
 * Creates new  {@link SniRouteHandler} based on SNI Domain mapping and the {@link RoutingTable}.
 * @param mapping      SNI Host Name mapping.
 * @param routingTable The {@link RoutingTable} for supplying the {@link Route}s.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mapping</ParamName>
                    <ParamType>? extends SslContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>routingTable</ParamName>
                    <ParamType>RoutingTable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>decode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>ChannelHandlerContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>in</ParamName>
                    <ParamType>ByteBuf</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isHandShaked</MethodName>
            <MethodComment>/** 
 * Return &lt;code&gt;true&lt;/code&gt; if handshake was successful.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>