<Class>
    <Id>2980</Id>
    <Package>org.infinispan.factories.components</Package>
    <ClassName>ComponentMetadataRepo</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ComponentMetadataRepo  /** 
 * This is a repository of component metadata, which is populated when the Infinispan core jar is loaded up.  Actual metadata is analyzed and persisted into the jar at build-time, taking it off the critical path.
 * @author Manik Surtani
 * @since 5.1
 * @see ComponentMetadata
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>componentMetadataMap</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>componentMetadataMap</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>factories</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>factories</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>dependencyFreeComponent</FieldName>
            <FieldType>ComponentMetadata</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>readMetadata</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>metadataFile</ParamName>
                    <ParamType>URL</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Map&lt;String,ComponentMetadata&gt; [comp]</InnerVar>
                <InnerVar>Map&lt;String,String&gt; [fact]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>componentMetadataMap;putAll;[comp]</InnerMethodInvoke>
                <InnerMethodInvoke>factories;putAll;[fact]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>ClassNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findComponentMetadata</MethodName>
            <MethodComment>/** 
 * Locates metadata for a given component type if registered.  If not registered, superclasses/interfaces are consulted, until, finally, an empty instance of  {@link ComponentMetadata} is returned effectively declaringthat the component has no dependencies or any lifecycle methods declared.
 * @param componentType component type to look for
 * @return metadata expressed as a ComponentMetadata instance
 */
</MethodComment>
            <ReturnType>ComponentMetadata</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>componentType</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ComponentMetadata [md=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findComponentMetadata</MethodName>
            <MethodComment>/** 
 * Locates metadata for a given component type if registered.  If not registered, a null is returned.
 * @param componentName name of component type to look for
 * @return metadata expressed as a ComponentMetadata instance, or null
 */
</MethodComment>
            <ReturnType>ComponentMetadata</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>componentName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findFactoryForComponent</MethodName>
            <MethodComment>/** 
 * Locates the fully qualified class name of a factory capable of constructing an instance of &lt;pre&gt;componentType&lt;/pre&gt;. Typically this is a factory annotated with  {@link DefaultFactoryFor}.
 * @param componentType component to create
 * @return a factory, or null if not found.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>componentType</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initialize</MethodName>
            <MethodComment>/** 
 * Initializes this repository.  The Iterable passed in should contain all  {@link ModuleMetadataFileFinder} instancesfor all loaded Infinispan modules.  Note that the core module is always loaded and need not be contained in this iterable.
 * @param moduleMetadataFiles file finders to iterate through and load into the repository
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>moduleMetadataFiles</ParamName>
                    <ParamType>ModuleMetadataFileFinder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cl</ParamName>
                    <ParamType>ClassLoader</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>FileLookup [fileLookup=FileLookupFactory.newInstance()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>injectFactoryForComponent</MethodName>
            <MethodComment>/** 
 * Inject a factory for a given component type.
 * @param componentType Component type that the factory will produce
 * @param factoryType Factory that produces the given type of components
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>componentType</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>factoryType</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>factories;put;[componentType.getName(), factoryType.getName()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasFactory</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>