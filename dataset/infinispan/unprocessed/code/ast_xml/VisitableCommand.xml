<Class>
    <Id>2409</Id>
    <Package>org.infinispan.commands</Package>
    <ClassName>VisitableCommand</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>ReplicableCommand</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>VisitableCommand  /** 
 * A type of command that can accept  {@link Visitor}s, such as  {@link org.infinispan.interceptors.DDAsyncInterceptor}.
 * @author Manik Surtani (&lt;a href="mailto:manik@jboss.org"&gt;manik@jboss.org&lt;/a&gt;)
 * @since 4.0
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>perform</MethodName>
            <MethodComment>/** 
 * Performs the primary function of the command.  Please see specific implementation classes for details on what is performed as well as return types. &lt;b&gt;Important&lt;/b&gt;: this method will be invoked at the end of interceptors chain. It should never be called directly from a custom interceptor.
 * @param ctx invocation context
 * @return arbitrary return value generated by performing this command
 * @throws Throwable in the event of problems.
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>InvocationContext</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>Throwable</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>acceptVisitor</MethodName>
            <MethodComment>/** 
 * Accept a visitor, and return the result of accepting this visitor.
 * @param ctx     invocation context
 * @param visitor visitor to accept
 * @return arbitrary return value
 * @throws Throwable in the event of problems
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>InvocationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>visitor</ParamName>
                    <ParamType>Visitor</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>Throwable</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>shouldInvoke</MethodName>
            <MethodComment>/** 
 * Used by the InboundInvocationHandler to determine whether the command should be invoked or not.
 * @return true if the command should be invoked, false otherwise.
 * @deprecated Since 9.0, no longer used.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>InvocationContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ignoreCommandOnStatus</MethodName>
            <MethodComment>/** 
 * Used to determine whether the command should be invoked or not. Commands can opt to be discarded in case the cache status is not suited (as  {@link InvalidateCommand})
 * @return true if the command should NOT be invoked.
 * @deprecated Since 9.0, no longer used.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>status</ParamName>
                    <ParamType>ComponentStatus</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>loadType</MethodName>
            <MethodComment>/** 
 * @return Nodes on which the command needs to read the previous values of the keys it acts on.
 * @throws UnsupportedOperationException if the distinction does not make any sense.
 */
</MethodComment>
            <ReturnType>LoadType</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>