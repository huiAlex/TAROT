<Class>
    <Id>2975</Id>
    <Package>org.infinispan.server.test.query</Package>
    <ClassName>RemoteQueryDMRRegisterIT</ClassName>
    <SuperClass>RemoteQueryIT</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>RemoteQueryDMRRegisterIT  /** 
 * Tests for remote queries over HotRod but registering the proto file via DMR plugin.
 * @author William Burns
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>setUp</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>ConfigurationBuilder [clientBuilder=new ConfigurationBuilder()]</InnerVar>
                <InnerVar>ModelNode [nameList=new ModelNode().add("/sample_bank_account/bank.proto")]</InnerVar>
                <InnerVar>ModelNode [urlList=new ModelNode().add(getClass().getResource("/sample_bank_account/bank.proto").toString())]</InnerVar>
                <InnerVar>ModelControllerClient [client=ModelControllerClient.Factory.create(getServer().getHotrodEndpoint().getInetAddress().getHostName(),SERVER1_MGMT_PORT)]</InnerVar>
                <InnerVar>ModelNode [addProtobufFileOp=getOperation("upload-proto-schemas",nameList,urlList)]</InnerVar>
                <InnerVar>ModelNode [result=client.execute(addProtobufFileOp)]</InnerVar>
                <InnerVar>RemoteCache&lt;String,String&gt; [metadataCache=remoteCacheManager.getCache(ProtobufMetadataManagerConstants.PROTOBUF_METADATA_CACHE_NAME)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>clientBuilder.addServer().host(getServer().getHotrodEndpoint().getInetAddress().getHostName()).port(getServer().getHotrodEndpoint().getPort());marshaller;[new ProtoStreamMarshaller()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[SUCCESS, result.get(OUTCOME).asString()]</InnerMethodInvoke>
                <InnerMethodInvoke>client;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertFalse;[metadataCache.containsKey(ProtobufMetadataManagerConstants.ERRORS_KEY_SUFFIX)]</InnerMethodInvoke>
                <InnerMethodInvoke>MarshallerRegistration;registerMarshallers;[ProtoStreamMarshaller.getSerializationContext(remoteCacheManager)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOperation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ModelNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>operationName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nameList</ParamName>
                    <ParamType>ModelNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>urlList</ParamName>
                    <ParamType>ModelNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PathAddress [address=PathAddress.pathAddress(PathElement.pathElement(ModelDescriptionConstants.SUBSYSTEM,InfinispanExtension.SUBSYSTEM_NAME)).append("cache-container",cacheContainerName)]</InnerVar>
                <InnerVar>ModelNode [op=new ModelNode()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>op.get(OP);set;[operationName]</InnerMethodInvoke>
                <InnerMethodInvoke>op.get(OP_ADDR);set;[address.toModelNode()]</InnerMethodInvoke>
                <InnerMethodInvoke>op.get("file-names");set;[nameList]</InnerMethodInvoke>
                <InnerMethodInvoke>op.get("file-urls");set;[urlList]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>