<Class>
    <Id>1785</Id>
    <Package>org.infinispan.util.concurrent.locks</Package>
    <ClassName>LockPromise</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>LockPromise  /** 
 * A promise returned by  {@link org.infinispan.util.concurrent.locks.impl.InfinispanLock}. &lt;p&gt; This promise does not means that the lock is acquired. The lock is acquired when the  {@link #lock()}  method isinvoked. It contains the basic method to check it state (when it is available or not) and it allows adding listeners to it.
 * @author Pedro Ruivo
 * @since 8.0
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>isAvailable</MethodName>
            <MethodComment>/** 
 * It tests if the lock is available. &lt;p&gt; The lock is consider available when it is successfully acquired or the timeout is expired. In any case, when it returns  {@code true}, the  {@link #lock()} will never block.
 * @return {@code true} if the lock is available (or the timeout is expired), {@code false} otherwise.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>lock</MethodName>
            <MethodComment>/** 
 * It locks the key (or keys) associated to this promise. &lt;p&gt; This method will block until the lock is available or the timeout is expired.
 * @throws InterruptedException if the current thread is interrupted while acquiring the lock
 * @throws TimeoutException     if we are unable to acquire the lock after a specified timeout.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>InterruptedException</ExceptionType>
                <ExceptionType>TimeoutException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addListener</MethodName>
            <MethodComment>/** 
 * Adds a  {@link LockListener} to be invoked when the lock is available.&lt;p&gt; The  {@code acquired} parameter indicates that the lock is acquired (when it is {@code true}) or it timed out (when it is  {@code false}).
 * @param listener the {@link LockListener} to invoke.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>listener</ParamName>
                    <ParamType>LockListener</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>