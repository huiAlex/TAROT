<Class>
    <Id>692</Id>
    <Package>org.infinispan.cdi.common.util</Package>
    <ClassName>ImmutableBean</ClassName>
    <SuperClass>AbstractImmutableBean</SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Bean</SuperInterface>
        <SuperInterface>T</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ImmutableBean  /** 
 * &lt;p&gt; A base class for implementing  {@link Bean}. The attributes are immutable, and collections are defensively copied on instantiation. It uses the defaults from the specification for properties if not specified. &lt;/p&gt; &lt;p/&gt; &lt;p&gt; This bean delegates it's lifecycle to the callbacks on the provided {@link ContextualLifecycle}. &lt;/p&gt;
 * @author Stuart Douglas
 * @author Pete Muir
 * @see AbstractImmutableBean
 * @see BeanBuilder
 * @see ImmutablePassivationCapableBean
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>contextualLifecycle</FieldName>
            <FieldType>ContextualLifecycle</FieldType>
        </Field>
        <Field>
            <FieldName>contextualLifecycle</FieldName>
            <FieldType>T</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ImmutableBean</MethodName>
            <MethodComment>/** 
 * Create a new, immutable bean. All arguments passed as collections are defensively copied.
 * @param beanClass           The Bean class, may not be null
 * @param name                The bean name
 * @param qualifiers          The bean's qualifiers, if null, a singleton set of{@link Default} is used
 * @param scope               The bean's scope, if null, the default scope of{@link Dependent} is used
 * @param stereotypes         The bean's stereotypes, if null, an empty set is used
 * @param types               The bean's types, if null, the beanClass and {@link Object}will be used
 * @param alternative         True if the bean is an alternative
 * @param nullable            True if the bean is nullable
 * @param injectionPoints     the bean's injection points, if null an empty setis used
 * @param contextualLifecycle Handler for {@link #create(CreationalContext)}and  {@link #destroy(Object,CreationalContext)}
 * @param toString            the string representation of the bean, if null the builtin representation is used, which states the bean class and qualifiers
 * @throws IllegalArgumentException if the beanClass is null
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>beanClass</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>qualifiers</ParamName>
                    <ParamType>Annotation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>scope</ParamName>
                    <ParamType>? extends Annotation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stereotypes</ParamName>
                    <ParamType>Class&lt;? extends Annotation&gt;</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>types</ParamName>
                    <ParamType>Type</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>alternative</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nullable</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>injectionPoints</ParamName>
                    <ParamType>InjectionPoint</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>contextualLifecycle</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>toString</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>create</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>arg0</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>destroy</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>arg0</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>arg1</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>contextualLifecycle;destroy;[this, arg0, arg1]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>