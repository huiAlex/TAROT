<Class>
    <Id>2174</Id>
    <Package>org.infinispan.persistence.spi</Package>
    <ClassName>CacheWriter</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Lifecycle</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>CacheWriter  /** 
 * Allows persisting data to an external storage, as opposed to the  {@link CacheLoader}.
 * @author Mircea Markus
 * @since 6.0
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>init</MethodName>
            <MethodComment>/** 
 * Used to initialize a cache loader.  Typically invoked by the  {@link org.infinispan.persistence.manager.PersistenceManager}when setting up cache loaders.
 * @throws PersistenceException in case of an error, e.g. communicating with the external storage
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>InitializationContext</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>write</MethodName>
            <MethodComment>/** 
 * Persists the entry to the storage.
 * @throws PersistenceException in case of an error, e.g. communicating with the external storage
 * @see MarshalledEntry
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>entry</ParamName>
                    <ParamType>? extends K</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>delete</MethodName>
            <MethodComment>/** 
 * @return true if the entry existed in the persistent store and it was deleted.
 * @throws PersistenceException in case of an error, e.g. communicating with the external storage
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeBatch</MethodName>
            <MethodComment>/** 
 * Persist all provided entries to the store in a single batch update. If this is not supported by the underlying store, then entries are written to the store individually via  {@link #write(MarshalledEntry)}.
 * @param entries an Iterable of MarshalledEntry to be written to the store.
 * @throws NullPointerException if entries is null.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>entries</ParamName>
                    <ParamType>MarshalledEntry&lt;? extends K,? extends V&gt;</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>entries;forEach;[this::write]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>deleteBatch</MethodName>
            <MethodComment>/** 
 * Remove all provided keys from the store in a single batch operation. If this is not supported by the underlying store, then keys are removed from the store individually via  {@link #delete(Object)}.
 * @param keys an Iterable of entry Keys to be removed from the store.
 * @throws NullPointerException if keys is null.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>keys</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>keys;forEach;[this::delete]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>