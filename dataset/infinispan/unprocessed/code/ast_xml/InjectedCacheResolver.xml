<Class>
    <Id>2403</Id>
    <Package>org.infinispan.jcache.annotation</Package>
    <ClassName>InjectedCacheResolver</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>CacheResolver</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>InjectedCacheResolver  /** 
 * Injected cache resolver for situations where caches and/or cache managers are injected into the CDI beans. In these situations, bridging is required in order to bridge between the Infinispan based caches and the JCache cache instances which is what it's expected by the specification cache resolver.
 * @author Galder Zamarre√±o
 * @since 5.3
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>defaultCacheManager</FieldName>
            <FieldType>EmbeddedCacheManager</FieldType>
        </Field>
        <Field>
            <FieldName>jcacheManagers</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>jcacheManagers</FieldName>
            <FieldType>EmbeddedCacheManager</FieldType>
        </Field>
        <Field>
            <FieldName>defaultJCacheManager</FieldName>
            <FieldType>JCacheManager</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>InjectedCacheResolver</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>InjectedCacheResolver</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>extension</ParamName>
                    <ParamType>InfinispanExtensionEmbedded</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>beanManager</ParamName>
                    <ParamType>BeanManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Set&lt;InfinispanExtensionEmbedded.InstalledCacheManager&gt; [installedCacheManagers=extension.getInstalledEmbeddedCacheManagers(beanManager)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;initializeDefaultCacheManagers;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initializeDefaultCacheManagers</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toJCacheManager</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>JCacheManager</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheManager</ParamName>
                    <ParamType>EmbeddedCacheManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>GlobalConfiguration [globalCfg=cacheManager.getCacheManagerConfiguration()]</InnerVar>
                <InnerVar>String [name=globalCfg.globalJmxStatistics().cacheManagerName()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>resolveCache</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheInvocationContext</ParamName>
                    <ParamType>? extends Annotation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [cacheName=cacheInvocationContext.getCacheName()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>Contracts;assertNotNull;[cacheInvocationContext, "cacheInvocationContext parameter must not be null"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCacheFromDefaultCacheManager</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Configuration [defaultInjectedConfiguration=getBeanReference(Configuration.class)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>defaultCacheManager;defineConfiguration;[cacheName, defaultInjectedConfiguration]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBeanManager</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BeanManager</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBeanReference</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>beanType</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BeanManager [bm=getBeanManager()]</InnerVar>
                <InnerVar>Iterator&lt;Bean&lt;?&gt;&gt; [iterator=bm.getBeans(beanType).iterator()]</InnerVar>
                <InnerVar>Bean&lt;?&gt; [configurationBean=iterator.next()]</InnerVar>
                <InnerVar>CreationalContext&lt;?&gt; [createCreationalContext=bm.createCreationalContext(configurationBean)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>