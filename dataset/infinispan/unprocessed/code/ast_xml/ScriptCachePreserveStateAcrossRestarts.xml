<Class>
    <Id>1003</Id>
    <Package>org.infinispan.scripting</Package>
    <ClassName>ScriptCachePreserveStateAcrossRestarts</ClassName>
    <SuperClass>AbstractInfinispanTest</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>createCacheManager</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>EmbeddedCacheManager</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>persistentStateLocation</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>GlobalConfigurationBuilder [global=new GlobalConfigurationBuilder()]</InnerVar>
                <InnerVar>EmbeddedCacheManager [cacheManager=TestCacheManagerFactory.createCacheManager(global,new ConfigurationBuilder())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>global.globalState().enable();persistentLocation;[persistentStateLocation]</InnerMethodInvoke>
                <InnerMethodInvoke>cacheManager;getCache;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testStatePreserved</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [persistentStateLocation=TestingUtil.tmpDirectory(this.getClass())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>Util;recursiveFileRemove;[persistentStateLocation]</InnerMethodInvoke>
                <InnerMethodInvoke>TestingUtil;withCacheManager;[new CacheManagerCallable(createCacheManager(persistentStateLocation)){
  @Override public void call() throws Exception {
    Cache&lt;String,String&gt; scriptCache=cm.getCache(ScriptingManagerImpl.SCRIPT_CACHE);
    try (InputStream is=this.getClass().getResourceAsStream("/test.js")){
      String script=TestingUtil.loadFileAsString(is);
      scriptCache.put("test.js",script);
    }
   }
}
]</InnerMethodInvoke>
                <InnerMethodInvoke>TestingUtil;withCacheManager;[new CacheManagerCallable(createCacheManager(persistentStateLocation)){
  @Override public void call() throws Exception {
    Cache&lt;String,String&gt; scriptCache=cm.getCache(ScriptingManagerImpl.SCRIPT_CACHE);
    assertTrue(scriptCache.containsKey("test.js"));
  }
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>call</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Cache&lt;String,String&gt; [scriptCache=cm.getCache(ScriptingManagerImpl.SCRIPT_CACHE)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>call</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Cache&lt;String,String&gt; [scriptCache=cm.getCache(ScriptingManagerImpl.SCRIPT_CACHE)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertTrue;[scriptCache.containsKey("test.js")]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>