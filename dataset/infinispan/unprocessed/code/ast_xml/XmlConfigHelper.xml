<Class>
    <Id>2740</Id>
    <Package>org.infinispan.configuration.parsing</Package>
    <ClassName>XmlConfigHelper</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>XmlConfigHelper  /** 
 * A simple XML utility class for reading configuration elements
 * @author &lt;a href="mailto:manik@jboss.org"&gt;Manik Surtani (manik@jboss.org)&lt;/a&gt;
 * @since 4.0
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getTagContents</MethodName>
            <MethodComment>/** 
 * Returns the contents of a specific node of given element name, provided a certain attribute exists and is set to value. E.g., if you have a  {@link Element} which represents the following XML snippet:&lt;pre&gt; &amp;lt;ItemQuantity Colour="Red"&amp;gt;100&amp;lt;/ItemQuantity&amp;gt; &amp;lt;ItemQuantity Colour="Blue"&amp;gt;30&amp;lt;/ItemQuantity&amp;gt; &amp;lt;ItemQuantity Colour="Black"&amp;gt;10&amp;lt;/ItemQuantity&amp;gt; &lt;pre&gt; &lt;p/&gt; The following results could be expected: &lt;/p&gt; &lt;pre&gt; getTagContents(element, "Red", "ItemQuantity", "Colour"); // 100 getTagContents(element, "Black", "ItemQuantity", "Colour"); // 10 getTagContents(element, "Blah", "ItemQuantity", "Colour"); // null getTagContents(element, "Red", "Blah", "Colour"); // null getTagContents(element, "Black", "ItemQuantity", "Blah"); // null &lt;/pre&gt; &lt;p/&gt; None of the parameters should be null - otherwise the method may throw a NullPointerException. &lt;/p&gt;
 * @param elem          - element to search through.
 * @param value         - expected value to match against
 * @param elementName   - element name
 * @param attributeName - attribute name of the element that would contain the expected value.
 * @return the contents of the matched element, or null if not found/matched
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>elem</ParamName>
                    <ParamType>Element</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>elementName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>attributeName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>NodeList [list=elem.getElementsByTagName(elementName)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAttributeValue</MethodName>
            <MethodComment>/** 
 * Retrieves the value of a given attribute for the first encountered instance of a tag in an element. &lt;p/&gt; E.g., if you have a  {@link Element} which represents the following XML snippet: &lt;/p&gt;&lt;pre&gt; &amp;lt;ItemQuantity Colour="Red"&amp;gt;100&amp;lt;/ItemQuantity&amp;gt; &amp;lt;ItemQuantity Colour="Blue"&amp;gt;30&amp;lt;/ItemQuantity&amp;gt; &amp;lt;ItemQuantity Colour="Black"&amp;gt;10&amp;lt;/ItemQuantity&amp;gt; &lt;pre&gt; &lt;p/&gt; The following results could be expected: &lt;/p&gt; &lt;pre&gt; getAttributeValue(element, "ItemQuantity", "Colour"); // "Red" getTagContents(element, "Blah", "Colour"); // null getTagContents(element, "ItemQuantity", "Blah"); // null &lt;/pre&gt; None of the parameters should be null - otherwise the method may throw a NullPointerException.
 * @param elem          - element to search through.
 * @param elementName   - element name
 * @param attributeName - attribute name of the element that would contain the expected value.
 * @return the contents of the matched attribute, or null if not found/matched
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>elem</ParamName>
                    <ParamType>Element</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>elementName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>attributeName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>NodeList [list=elem.getElementsByTagName(elementName)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSubElement</MethodName>
            <MethodComment>/** 
 * Returns a named sub-element of the current element passed in. &lt;p/&gt; None of the parameters should be null - otherwise the method may throw a NullPointerException.
 * @param element        - element to search through.
 * @param subElementName - the name of a sub element to look for
 * @return the first matching sub element, if found, or null otherwise.
 */
</MethodComment>
            <ReturnType>Element</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>element</ParamName>
                    <ParamType>Element</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>subElementName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>NodeList [nl=element.getChildNodes()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getElementContent</MethodName>
            <MethodComment>/** 
 * Reads the contents of the element passed in. &lt;p/&gt; None of the parameters should be null - otherwise the method may throw a NullPointerException.
 * @param element - element to search through.
 * @param trim    - if true, whitespace is trimmed before returning
 * @return the contents of the element passed in.  Will return an empty String if the element is empty.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>element</ParamName>
                    <ParamType>Element</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>trim</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>NodeList [nl=element.getChildNodes()]</InnerVar>
                <InnerVar>StringBuilder [attributeText=new StringBuilder()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readStringContents</MethodName>
            <MethodComment>/** 
 * Reads the contents of the first occurrence of elementName under the given element, trimming results of whitespace. &lt;p/&gt; None of the parameters should be null - otherwise the method may throw a NullPointerException.
 * @param element     - element to search through.
 * @param elementName - name of the element to find within the element passed in
 * @return may return an empty String of not found.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>element</ParamName>
                    <ParamType>Element</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>elementName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>NodeList [nodes=element.getElementsByTagName(elementName)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>escapeBackslashes</MethodName>
            <MethodComment>/** 
 * Escapes backslashes ('\') with additional backslashes in a given String, returning a new, escaped String.
 * @param value String to escape.   Cannot be null.
 * @return escaped String.  Never is null.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuilder [buf=new StringBuilder(value)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readPropertiesContents</MethodName>
            <MethodComment>/** 
 * Reads the contents of a named sub element within a given element, and attempts to parse the contents as a Java properties file. &lt;p/&gt; E.g., if you have a  {@link Element} which represents the following XML snippet:&lt;p/&gt; &lt;pre&gt; &amp;lt;props&amp;gt; my.attrib.1 = blah my.attrib.2 = blahblah &amp;lt;/props&amp;gt; &lt;pre&gt; &lt;p/&gt; The following results could be expected: &lt;p/&gt; &lt;pre&gt; Properties p = readPropertiesContents(element, "props"); p.getProperty("my.attrib.1"); // blah p.getProperty("my.attrib.2"); // blahblah &lt;/pre&gt; None of the parameters should be null - otherwise the method may throw a NullPointerException.
 * @param element     - element to search through.
 * @param elementName - name of the element to find within the element passed in
 * @return a {@link Properties} object, never null.
 * @throws IOException if unable to parse the contents of the element
 */
</MethodComment>
            <ReturnType>Properties</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>element</ParamName>
                    <ParamType>Element</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>elementName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [stringContents=readStringContents(element,elementName)]</InnerVar>
                <InnerVar>ByteArrayInputStream [is]</InnerVar>
                <InnerVar>Properties [properties]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readPropertiesContents</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Properties</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>element</ParamName>
                    <ParamType>Element</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readBooleanContents</MethodName>
            <MethodComment>/** 
 * Similar to  {@link #readStringContents(org.w3c.dom.Element,String)} except that it returns a boolean.
 * @param element     - element to search through.
 * @param elementName - name of the element to find within the element passed in
 * @return the contents of the element as a boolean, or false if not found.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>element</ParamName>
                    <ParamType>Element</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>elementName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readBooleanContents</MethodName>
            <MethodComment>/** 
 * Similar to  {@link #readStringContents(org.w3c.dom.Element,String)} except that it returns a boolean.
 * @param element      - element to search through.
 * @param elementName  - name of the element to find within the element passed in
 * @param defaultValue - value to return if the element is not found or cannot be parsed.
 * @return the contents of the element as a boolean
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>element</ParamName>
                    <ParamType>Element</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>elementName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>defaultValue</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [val=readStringContents(element,elementName)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>stringToElement</MethodName>
            <MethodComment>/** 
 * Converts a String representing an XML snippet into an  {@link org.w3c.dom.Element}.
 * @param xml snippet as a string
 * @return a DOM Element
 * @throws Exception if unable to parse the String or if it doesn't contain valid XML.
 */
</MethodComment>
            <ReturnType>Element</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xml</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ByteArrayInputStream [bais=new ByteArrayInputStream(xml.getBytes("utf8"))]</InnerVar>
                <InnerVar>DocumentBuilderFactory [factory=DocumentBuilderFactory.newInstance()]</InnerVar>
                <InnerVar>DocumentBuilder [builder=factory.newDocumentBuilder()]</InnerVar>
                <InnerVar>Document [d=builder.parse(bais)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>bais;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFirstChildElement</MethodName>
            <MethodComment>/** 
 * Gets the first child element of an element
 * @param element the parent
 * @return the first child element or null if there isn't one
 */
</MethodComment>
            <ReturnType>Element</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>element</ParamName>
                    <ParamType>Element</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Node [child=element.getFirstChild()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDocumentRoot</MethodName>
            <MethodComment>/** 
 * Returns the root element of a given input stream
 * @param is stream to parse
 * @return XML DOM element, or null if unable to parse stream
 */
</MethodComment>
            <ReturnType>Element</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>is</ParamName>
                    <ParamType>InputStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Document [doc]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readBooleanAttribute</MethodName>
            <MethodComment>/** 
 * Retrieves the boolean value of a given attribute for the first encountered instance of elementName
 * @param elem          - element to search
 * @param elementName   - name of element to find
 * @param attributeName - name of attribute to retrieve the value of
 * @param defaultValue  - default value to return if not found
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>elem</ParamName>
                    <ParamType>Element</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>elementName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>attributeName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>defaultValue</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [val=getAttributeValue(elem,elementName,attributeName)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>valueConverter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>klass</ParamName>
                    <ParamType>Class</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setAttributes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>attributes</ParamName>
                    <ParamType>AttributeSet</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>attribs</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isXmlAttribs</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>failOnMissingAttribute</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Map&lt;Object,Object&gt; [ignoredAttribs=new HashMap&lt;Object,Object&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setValues</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>target</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>attribs</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isXmlAttribs</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>failOnMissingSetter</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Class&lt;?&gt; [objectClass=target.getClass()]</InnerVar>
                <InnerVar>Map&lt;Object,Object&gt; [ignoredAttribs=new HashMap&lt;Object,Object&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>showUnrecognizedAttributes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>attribs</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>extractProperties</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Properties</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>source</ParamName>
                    <ParamType>Element</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>TypedProperties [p=new TypedProperties()]</InnerVar>
                <InnerVar>NodeList [list=source.getElementsByTagName("property")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>e</ParamName>
                    <ParamType>Element</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>