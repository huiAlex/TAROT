<Class>
    <Id>433</Id>
    <Package>org.infinispan.server.core.configuration</Package>
    <ClassName>SslEngineConfigurationBuilder</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>SslConfigurationChildBuilder</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>SslEngineConfigurationBuilder  /** 
 * SSLConfigurationBuilder.
 * @author Tristan Tarrant
 * @since 5.3
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>parentSslConfigurationBuilder</FieldName>
            <FieldType>SslConfigurationBuilder</FieldType>
        </Field>
        <Field>
            <FieldName>keyStoreFileName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>keyStorePassword</FieldName>
            <FieldType>char[]</FieldType>
        </Field>
        <Field>
            <FieldName>keyAlias</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>protocol</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>sslContext</FieldName>
            <FieldType>SSLContext</FieldType>
        </Field>
        <Field>
            <FieldName>trustStoreFileName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>trustStorePassword</FieldName>
            <FieldType>char[]</FieldType>
        </Field>
        <Field>
            <FieldName>keyStoreCertificatePassword</FieldName>
            <FieldType>char[]</FieldType>
        </Field>
        <Field>
            <FieldName>domain</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>keyStoreType</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>trustStoreType</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>SslEngineConfigurationBuilder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parentSslConfigurationBuilder</ParamName>
                    <ParamType>SslConfigurationBuilder</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sslContext</MethodName>
            <MethodComment>/** 
 * Sets the  {@link SSLContext} to use for setting up SSL connections.
 */
</MethodComment>
            <ReturnType>SslEngineConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sslContext</ParamName>
                    <ParamType>SSLContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>keyStoreFileName</MethodName>
            <MethodComment>/** 
 * Specifies the filename of a keystore to use to create the  {@link SSLContext} You also need tospecify a  {@link #keyStorePassword(char[])}. Alternatively specify an initialized  {@link #sslContext(SSLContext)}.
 */
</MethodComment>
            <ReturnType>SslEngineConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>keyStoreFileName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>keyStoreType</MethodName>
            <MethodComment>/** 
 * Specifies the type of the keystore, such as JKS or JCEKS. Defaults to JKS
 */
</MethodComment>
            <ReturnType>SslEngineConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>keyStoreType</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>keyStorePassword</MethodName>
            <MethodComment>/** 
 * Specifies the password needed to open the keystore You also need to specify a {@link #keyStoreFileName(String)}. Alternatively specify an initialized  {@link #sslContext(SSLContext)}.
 */
</MethodComment>
            <ReturnType>SslEngineConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>keyStorePassword</ParamName>
                    <ParamType>char[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>trustStoreFileName</MethodName>
            <MethodComment>/** 
 * Specifies the filename of a truststore to use to create the  {@link SSLContext} You also needto specify a  {@link #trustStorePassword(char[])}. Alternatively specify an initialized  {@link #sslContext(SSLContext)}.
 */
</MethodComment>
            <ReturnType>SslEngineConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>trustStoreFileName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>trustStoreType</MethodName>
            <MethodComment>/** 
 * Specifies the type of the truststore, such as JKS or JCEKS. Defaults to JKS
 */
</MethodComment>
            <ReturnType>SslEngineConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>trustStoreType</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>trustStorePassword</MethodName>
            <MethodComment>/** 
 * Specifies the password needed to open the truststore You also need to specify a {@link #trustStoreFileName(String)}. Alternatively specify an initialized  {@link #sslContext(SSLContext)}.
 */
</MethodComment>
            <ReturnType>SslEngineConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>trustStorePassword</ParamName>
                    <ParamType>char[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>keyStoreCertificatePassword</MethodName>
            <MethodComment>/** 
 * Specifies the password needed to access private key associated with certificate stored in specified {@link #keyStoreFileName(String)}. If password is not specified, the password provided in {@link #keyStorePassword(char[])} will be used.
 */
</MethodComment>
            <ReturnType>SslEngineConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>keyStoreCertificatePassword</ParamName>
                    <ParamType>char[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>keyAlias</MethodName>
            <MethodComment>/** 
 * Selects a specific key to choose from the keystore
 */
</MethodComment>
            <ReturnType>SslEngineConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>keyAlias</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>protocol</MethodName>
            <MethodComment>/** 
 * Configures the secure socket protocol.
 * @see javax.net.ssl.SSLContext#getInstance(String)
 * @param protocol The standard name of the requested protocol, e.g TLSv1.2
 */
</MethodComment>
            <ReturnType>SslEngineConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>protocol</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>validate</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>create</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>SslEngineConfiguration</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>read</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>SslEngineConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>template</ParamName>
                    <ParamType>SslEngineConfiguration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sniHostName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>SslEngineConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>domain</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>