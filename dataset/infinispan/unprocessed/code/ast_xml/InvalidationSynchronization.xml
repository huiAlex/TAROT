<Class>
    <Id>4061</Id>
    <Package>org.infinispan.hibernate.cache.access</Package>
    <ClassName>InvalidationSynchronization</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>javax.transaction.Synchronization</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>InvalidationSynchronization  /** 
 * Synchronization that should release the locks after invalidation is complete.
 * @author Radim Vansa &amp;lt;rvansa@redhat.com&amp;gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>InfinispanMessageLogger</FieldType>
        </Field>
        <Field>
            <FieldName>lockOwner</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>nonTxPutFromLoadInterceptor</FieldName>
            <FieldType>NonTxPutFromLoadInterceptor</FieldType>
        </Field>
        <Field>
            <FieldName>key</FieldName>
            <FieldType>Object</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>InvalidationSynchronization</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>nonTxPutFromLoadInterceptor</ParamName>
                    <ParamType>NonTxPutFromLoadInterceptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lockOwner</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>beforeCompletion</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>afterCompletion</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>status</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>log;tracef;["After completion callback with status %d", status]</InnerMethodInvoke>
                <InnerMethodInvoke>nonTxPutFromLoadInterceptor;endInvalidating;[key, lockOwner, status == Status.STATUS_COMMITTED || status == Status.STATUS_COMMITTING]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>