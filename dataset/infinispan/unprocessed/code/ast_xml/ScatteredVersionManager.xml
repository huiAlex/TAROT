<Class>
    <Id>3929</Id>
    <Package>org.infinispan.scattered</Package>
    <ClassName>ScatteredVersionManager</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ScatteredVersionManager  /** 
 * Manages versions of entries and states of segments.
 * @author Radim Vansa &amp;lt;rvansa@redhat.com&amp;gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>singleChar</FieldName>
            <FieldType>char</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>incrementVersion</MethodName>
            <MethodComment>/** 
 * Generates a new version for an entry in given segment.
 * @param segment
 */
</MethodComment>
            <ReturnType>EntryVersion</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>segment</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isVersionActual</MethodName>
            <MethodComment>/** 
 * @param segment
 * @param version
 * @return True if the version was generated by this node after most recently becoming owner of the given segment.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>segment</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>version</ParamName>
                    <ParamType>EntryVersion</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>scheduleKeyInvalidation</MethodName>
            <MethodComment>/** 
 * Notifies the manager that an operation on given key with version previously retrieved from {@link #incrementVersion(int)} has finished. This operation has to be executed on originator of the operationonce the entry was stored on both nodes. Eventually order versions of entries will be removed on other nodes. When the entry was completely removed by the operation, the nodes have stored a tombstone of that entry. The older versions will be dropped regularly and after this is confirmed the tombstones will be invalidated, too.
 * @param key
 * @param version
 * @param removal
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>version</ParamName>
                    <ParamType>EntryVersion</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>removal</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clearInvalidations</MethodName>
            <MethodComment>/** 
 * Forget all non-processed invalidations scheduled through  {@link #scheduleKeyInvalidation(Object,EntryVersion,boolean)}
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>registerSegment</MethodName>
            <MethodComment>/** 
 * Move the segment to  {@link SegmentState#BLOCKED} state.
 * @param segment
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>segment</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>unregisterSegment</MethodName>
            <MethodComment>/** 
 * Move the segment to  {@link SegmentState#NOT_OWNED} state.
 * @param segment
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>segment</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setOwnedSegments</MethodName>
            <MethodComment>/** 
 * Move the segment from  {@link SegmentState#NOT_OWNED} to {@link SegmentState#OWNED} without transferring data.
 * @param segments
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>segments</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startKeyTransfer</MethodName>
            <MethodComment>/** 
 * Move the segments from  {@link SegmentState#BLOCKED} to {@link SegmentState#KEY_TRANSFER} state.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>segments</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>notifyKeyTransferFinished</MethodName>
            <MethodComment>/** 
 * All key + version data from given segment have been received, or the key transfer failed.
 * @param segment
 * @param expectValues True when the transfer failed and the segment will be movedto the  {@link SegmentState#OWNED} state without waiting for values.
 * @param cancelled True is the transfer was cancelled due to a new topology - in that casethe segment will end up in  {@link SegmentState#NOT_OWNED}. This takes precedence over &lt;code&gt;expectValues&lt;/code&gt;.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>segment</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>expectValues</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cancelled</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>notifyValueTransferFinished</MethodName>
            <MethodComment>/** 
 * All entries have been received and we can put segments owned according to consistent hash to  {@link SegmentState#OWNED} state.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSegmentState</MethodName>
            <MethodComment>/** 
 * @param segment
 * @return Current {@link SegmentState status} of the segment.
 */
</MethodComment>
            <ReturnType>SegmentState</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>segment</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBlockingFuture</MethodName>
            <MethodComment>/** 
 * @param segment
 * @return A completable future that can be used to schedule an operation once that the segment has moved from{@link SegmentState#BLOCKED} state.
 */
</MethodComment>
            <ReturnType>Void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>segment</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setValuesTransferTopology</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>topologyId</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>valuesFuture</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>topologyId</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setTopologyId</MethodName>
            <MethodComment>/** 
 * Set current topology id.
 * @param topologyId
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>topologyId</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>updatePreloadedEntryVersion</MethodName>
            <MethodComment>/** 
 * This is called only during preload. Makes sure that the cache will start with topology higher than the one stored in a cache store.
 * @param version
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>version</ParamName>
                    <ParamType>EntryVersion</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>SegmentState</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>singleChar</ParamName>
                    <ParamType>char</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>singleChar</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>char</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>