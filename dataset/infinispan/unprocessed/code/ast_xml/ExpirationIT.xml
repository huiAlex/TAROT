<Class>
    <Id>722</Id>
    <Package>org.infinispan.server.test.expiration</Package>
    <ClassName>ExpirationIT</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ExpirationIT  /** 
 * Test for expiration configuration. Tested with REST (verifies JBPAPP-6928) and HotRod. Memcached cache cannot be configured to use expiration, see https://bugzilla.redhat.com/show_bug.cgi?id=909177#c5 . Tests when individual requests use expiration are also in client tests, here we're testing that they override the global configuration.
 * @author &lt;a href="mailto:tsykora@redhat.com"&gt;Tomas Sykora&lt;/a&gt;
 * @author &lt;a href="mailto:mgencur@redhat.com"&gt;Martin Gencur&lt;/a&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>server1</FieldName>
            <FieldType>RemoteInfinispanServer</FieldType>
        </Field>
        <Field>
            <FieldName>server2</FieldName>
            <FieldType>RemoteInfinispanServer</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>testRESTExpiration</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>RESTHelper [rest=new RESTHelper()]</InnerVar>
                <InnerVar>URI [key1Path=rest.fullPathKey(0,"k1")]</InnerVar>
                <InnerVar>URI [key2Path=rest.fullPathKey(1,"k2")]</InnerVar>
                <InnerVar>URI [key3Path=rest.fullPathKey(0,"k3")]</InnerVar>
                <InnerVar>URI [key4Path=rest.fullPathKey(0,"k4")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rest;addServer;[server1.getRESTEndpoint().getInetAddress().getHostName(), server1.getRESTEndpoint().getContextPath()]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;addServer;[server2.getRESTEndpoint().getInetAddress().getHostName(), server2.getRESTEndpoint().getContextPath()]</InnerMethodInvoke>
                <InnerMethodInvoke>Assert;assertEquals;[2, server1.getCacheManager("clustered").getClusterSize()]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;post;[key1Path, "v1", "application/text", HttpStatus.SC_OK, "Content-Type", "application/text", "timeToLiveSeconds", "4", "maxIdleTimeSeconds", "4"]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;post;[key2Path, "v2", "application/text", HttpStatus.SC_OK, "Content-Type", "application/text"]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;post;[key3Path, "v3", "application/text", HttpStatus.SC_OK, "Content-Type", "application/text", "timeToLiveSeconds", "0", "maxIdleTimeSeconds", "0"]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;post;[key4Path, "v4", "application/text", HttpStatus.SC_OK, "Content-Type", "application/text", "timeToLiveSeconds", "0", "maxIdleTimeSeconds", "2"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;sleepForSecs;[1]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;get;[key1Path, "v1"]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;get;[key3Path, "v3"]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;get;[key4Path, "v4"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;sleepForSecs;[2]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;get;[key1Path, "v1"]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;head;[key3Path, HttpStatus.SC_NOT_FOUND]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;head;[key4Path, HttpStatus.SC_NOT_FOUND]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;head;[key2Path, HttpStatus.SC_NOT_FOUND]</InnerMethodInvoke>
                <InnerMethodInvoke>null;sleepForSecs;[1]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;head;[key1Path, HttpStatus.SC_NOT_FOUND]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testHotRodExpiration</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>RemoteCacheManager [rcm1=ITestUtils.createCacheManager(server1)]</InnerVar>
                <InnerVar>RemoteCacheManager [rcm2=ITestUtils.createCacheManager(server2)]</InnerVar>
                <InnerVar>RemoteCache&lt;String,String&gt; [c=rcm1.getCache("hotrodExpiration")]</InnerVar>
                <InnerVar>RemoteCache&lt;String,String&gt; [c2=rcm2.getCache("hotrodExpiration")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>c;put;["key1", "value1"]</InnerMethodInvoke>
                <InnerMethodInvoke>c2;put;["key1_c2", "value1_c2"]</InnerMethodInvoke>
                <InnerMethodInvoke>c;put;["key2", "value2", 4000, TimeUnit.MILLISECONDS, 4000, TimeUnit.MILLISECONDS]</InnerMethodInvoke>
                <InnerMethodInvoke>c2;put;["key2_c2", "value2_c2", 4000, TimeUnit.MILLISECONDS, 4000, TimeUnit.MILLISECONDS]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["key1 should be in cache.", "value1", c.get("key1")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["key1_c2 should be in cache2.", "value1_c2", c2.get("key1_c2")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;sleepForSecs;[3]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;["key1 should be expired already.", c.get("key1") == null]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;["key1_c2 should be expired already.", c2.get("key1_c2") == null]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["key2 should still be in the cache.", "value2", c.get("key2")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["key2_c2 should still be in the cache.", "value2_c2", c2.get("key2_c2")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;sleepForSecs;[2]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;["key2 should be expired already.", c.get("key2") == null]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;["key2_c2 should be expired already.", c2.get("key2_c2") == null]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>