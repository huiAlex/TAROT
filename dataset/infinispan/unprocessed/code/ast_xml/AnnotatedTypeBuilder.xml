<Class>
    <Id>656</Id>
    <Package>org.infinispan.cdi.common.util.annotatedtypebuilder</Package>
    <ClassName>AnnotatedTypeBuilder</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>AnnotatedTypeBuilder  /** 
 * &lt;p&gt; Class for constructing a new AnnotatedType. A new instance of builder should be used for each annotated type. &lt;/p&gt; &lt;p/&gt; &lt;p&gt;  {@link AnnotatedTypeBuilder} is not thread-safe. &lt;/p&gt;
 * @author Stuart Douglas
 * @author Pete Muir
 * @see AnnotatedType
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>javaClass</FieldName>
            <FieldType>Class</FieldType>
        </Field>
        <Field>
            <FieldName>javaClass</FieldName>
            <FieldType>X</FieldType>
        </Field>
        <Field>
            <FieldName>typeAnnotations</FieldName>
            <FieldType>AnnotationBuilder</FieldType>
        </Field>
        <Field>
            <FieldName>constructors</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>constructors</FieldName>
            <FieldType>Constructor&lt;?&gt;</FieldType>
        </Field>
        <Field>
            <FieldName>constructorParameters</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>constructorParameters</FieldName>
            <FieldType>Constructor&lt;?&gt;</FieldType>
        </Field>
        <Field>
            <FieldName>constructorParameterTypes</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>constructorParameterTypes</FieldName>
            <FieldType>Constructor&lt;?&gt;</FieldType>
        </Field>
        <Field>
            <FieldName>fields</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>fields</FieldName>
            <FieldType>Field</FieldType>
        </Field>
        <Field>
            <FieldName>fieldTypes</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>fieldTypes</FieldName>
            <FieldType>Field</FieldType>
        </Field>
        <Field>
            <FieldName>methods</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>methods</FieldName>
            <FieldType>Method</FieldType>
        </Field>
        <Field>
            <FieldName>methodParameters</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>methodParameters</FieldName>
            <FieldType>Method</FieldType>
        </Field>
        <Field>
            <FieldName>methodParameterTypes</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>methodParameterTypes</FieldName>
            <FieldType>Method</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>AnnotatedTypeBuilder</MethodName>
            <MethodComment>/** 
 * Create a new builder. A new builder has no annotations and no members.
 * @see #readFromType(AnnotatedType)
 * @see #readFromType(Class)
 * @see #readFromType(AnnotatedType,boolean)
 * @see #readFromType(Class,boolean)
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addToClass</MethodName>
            <MethodComment>/** 
 * Add an annotation to the type declaration.
 * @param annotation the annotation instance to add
 * @throws IllegalArgumentException if the annotation is null
 */
</MethodComment>
            <ReturnType>X</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>annotation</ParamName>
                    <ParamType>Annotation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>typeAnnotations;add;[annotation]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readFromType</MethodName>
            <MethodComment>/** 
 * Reads in from an existing AnnotatedType. Any elements not present are added. The javaClass will be read in. If the annotation already exists on that element in the builder the read annotation will be used.
 * @param type the type to read from
 * @throws IllegalArgumentException if type is null
 */
</MethodComment>
            <ReturnType>X</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>X</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readFromType</MethodName>
            <MethodComment>/** 
 * Reads in from an existing AnnotatedType. Any elements not present are added. The javaClass will be read in if overwrite is true. If the annotation already exists on that element in the builder, overwrite determines whether the original or read annotation will be used.
 * @param type      the type to read from
 * @param overwrite if true, the read annotation will replace any existingannotation
 * @throws IllegalArgumentException if type is null
 */
</MethodComment>
            <ReturnType>X</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>X</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>overwrite</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;mergeAnnotationsOnElement;[type, overwrite, typeAnnotations]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readFromType</MethodName>
            <MethodComment>/** 
 * Reads the annotations from an existing java type. Annotations already present will be overwritten
 * @param type the type to read from
 * @throws IllegalArgumentException if type is null
 */
</MethodComment>
            <ReturnType>X</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>X</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readFromType</MethodName>
            <MethodComment>/** 
 * Reads the annotations from an existing java type. If overwrite is true then existing annotations will be overwritten
 * @param type      the type to read from
 * @param overwrite if true, the read annotation will replace any existingannotation
 */
</MethodComment>
            <ReturnType>X</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>X</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>overwrite</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>mergeAnnotationsOnElement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>annotated</ParamName>
                    <ParamType>Annotated</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>overwriteExisting</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>typeAnnotations</ParamName>
                    <ParamType>AnnotationBuilder</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>create</MethodName>
            <MethodComment>/** 
 * Create an  {@link AnnotatedType}. Any public members present on the underlying class and not overridden by the builder will be automatically added.
 */
</MethodComment>
            <ReturnType>X</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Map&lt;Constructor&lt;?&gt;,Map&lt;Integer,AnnotationStore&gt;&gt; [constructorParameterAnnnotations=new HashMap&lt;Constructor&lt;?&gt;,Map&lt;Integer,AnnotationStore&gt;&gt;()]</InnerVar>
                <InnerVar>Map&lt;Constructor&lt;?&gt;,AnnotationStore&gt; [constructorAnnotations=new HashMap&lt;Constructor&lt;?&gt;,AnnotationStore&gt;()]</InnerVar>
                <InnerVar>Map&lt;Method,Map&lt;Integer,AnnotationStore&gt;&gt; [methodParameterAnnnotations=new HashMap&lt;Method,Map&lt;Integer,AnnotationStore&gt;&gt;()]</InnerVar>
                <InnerVar>Map&lt;Method,AnnotationStore&gt; [methodAnnotations=new HashMap&lt;Method,AnnotationStore&gt;()]</InnerVar>
                <InnerVar>Map&lt;Field,AnnotationStore&gt; [fieldAnnotations=new HashMap&lt;Field,AnnotationStore&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeFromClass</MethodName>
            <MethodComment>/** 
 * Remove an annotation from the type
 * @param annotationType the annotation type to remove
 * @throws IllegalArgumentException if the annotationType
 */
</MethodComment>
            <ReturnType>X</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>annotationType</ParamName>
                    <ParamType>? extends Annotation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>typeAnnotations;remove;[annotationType]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeFromMethod</MethodName>
            <MethodComment>/** 
 * Remove an annotation from the specified method.
 * @param method         the method to remove the annotation from
 * @param annotationType the annotation type to remove
 * @throws IllegalArgumentException if the annotationType is null or if themethod is not currently declared on the type
 */
</MethodComment>
            <ReturnType>X</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>method</ParamName>
                    <ParamType>Method</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>annotationType</ParamName>
                    <ParamType>? extends Annotation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeFromMethod</MethodName>
            <MethodComment>/** 
 * Remove an annotation from the specified method.
 * @param method         the method to remove the annotation from
 * @param annotationType the annotation type to remove
 * @throws IllegalArgumentException if the annotationType is null or if themethod is not currently declared on the type
 */
</MethodComment>
            <ReturnType>X</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>method</ParamName>
                    <ParamType>? super X</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>annotationType</ParamName>
                    <ParamType>? extends Annotation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addToMethod</MethodName>
            <MethodComment>/** 
 * Add an annotation to the specified method. If the method is not already present, it will be added.
 * @param method     the method to add the annotation to
 * @param annotation the annotation to add
 * @throws IllegalArgumentException if the annotation is null
 */
</MethodComment>
            <ReturnType>X</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>method</ParamName>
                    <ParamType>Method</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>annotation</ParamName>
                    <ParamType>Annotation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>methods.get(method);add;[annotation]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addToMethod</MethodName>
            <MethodComment>/** 
 * Add an annotation to the specified method. If the method is not already present, it will be added.
 * @param method     the method to add the annotation to
 * @param annotation the annotation to add
 * @throws IllegalArgumentException if the annotation is null
 */
</MethodComment>
            <ReturnType>X</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>method</ParamName>
                    <ParamType>? super X</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>annotation</ParamName>
                    <ParamType>Annotation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addToMethodParameter</MethodName>
            <MethodComment>/** 
 * Add an annotation to the specified method parameter. If the method is not already present, it will be added. If the method parameter is not already present, it will be added.
 * @param method     the method to add the annotation to
 * @param position   the position of the parameter to add
 * @param annotation the annotation to add
 * @throws IllegalArgumentException if the annotation is null
 */
</MethodComment>
            <ReturnType>X</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>method</ParamName>
                    <ParamType>Method</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>position</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>annotation</ParamName>
                    <ParamType>Annotation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>methodParameters.get(method).get(position);add;[annotation]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeFromMethodParameter</MethodName>
            <MethodComment>/** 
 * Remove an annotation from the specified method parameter.
 * @param method         the method to remove the annotation from
 * @param position       the position of the parameter to remove
 * @param annotationType the annotation type to remove
 * @throws IllegalArgumentException if the annotationType is null, if themethod is not currently declared on the type or if the parameter is not declared on the method
 */
</MethodComment>
            <ReturnType>X</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>method</ParamName>
                    <ParamType>Method</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>position</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>annotationType</ParamName>
                    <ParamType>? extends Annotation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addToField</MethodName>
            <MethodComment>/** 
 * Add an annotation to the specified field. If the field is not already present, it will be added.
 * @param field      the field to add the annotation to
 * @param annotation the annotation to add
 * @throws IllegalArgumentException if the annotation is null
 */
</MethodComment>
            <ReturnType>X</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>field</ParamName>
                    <ParamType>Field</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>annotation</ParamName>
                    <ParamType>Annotation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>fields.get(field);add;[annotation]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addToField</MethodName>
            <MethodComment>/** 
 * Add an annotation to the specified field. If the field is not already present, it will be added.
 * @param field      the field to add the annotation to
 * @param annotation the annotation to add
 * @throws IllegalArgumentException if the annotation is null
 */
</MethodComment>
            <ReturnType>X</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>field</ParamName>
                    <ParamType>? super X</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>annotation</ParamName>
                    <ParamType>Annotation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeFromField</MethodName>
            <MethodComment>/** 
 * Remove an annotation from the specified field.
 * @param field          the field to remove the annotation from
 * @param annotationType the annotation type to remove
 * @throws IllegalArgumentException if the annotationType is null or if thefield is not currently declared on the type
 */
</MethodComment>
            <ReturnType>X</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>field</ParamName>
                    <ParamType>Field</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>annotationType</ParamName>
                    <ParamType>? extends Annotation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeFromField</MethodName>
            <MethodComment>/** 
 * Remove an annotation from the specified field.
 * @param field          the field to remove the annotation from
 * @param annotationType the annotation type to remove
 * @throws IllegalArgumentException if the annotationType is null or if thefield is not currently declared on the type
 */
</MethodComment>
            <ReturnType>X</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>field</ParamName>
                    <ParamType>? super X</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>annotationType</ParamName>
                    <ParamType>? extends Annotation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>