<Class>
    <Id>791</Id>
    <Package>org.infinispan.test.concurrent</Package>
    <ClassName>InterceptorSequencerAction</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>InterceptorSequencerAction  /** 
 * Replaces an  {@link AsyncInterceptor} with a wrapper that can interact with a {@link StateSequencer} when acommand that matches a  {@link CommandMatcher} is visited.
 * @author Dan Berindei
 * @since 7.0
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>stateSequencer</FieldName>
            <FieldType>StateSequencer</FieldType>
        </Field>
        <Field>
            <FieldName>cache</FieldName>
            <FieldType>Cache</FieldType>
        </Field>
        <Field>
            <FieldName>cache</FieldName>
            <FieldType>?</FieldType>
        </Field>
        <Field>
            <FieldName>interceptorClass</FieldName>
            <FieldType>Class</FieldType>
        </Field>
        <Field>
            <FieldName>interceptorClass</FieldName>
            <FieldType>? extends AsyncInterceptor</FieldType>
        </Field>
        <Field>
            <FieldName>matcher</FieldName>
            <FieldType>CommandMatcher</FieldType>
        </Field>
        <Field>
            <FieldName>ourInterceptor</FieldName>
            <FieldType>SequencerInterceptor</FieldType>
        </Field>
        <Field>
            <FieldName>uniqueInterceptorClasses</FieldName>
            <FieldType>Class[]</FieldType>
        </Field>
        <Field>
            <FieldName>stateSequencer</FieldName>
            <FieldType>StateSequencer</FieldType>
        </Field>
        <Field>
            <FieldName>matcher</FieldName>
            <FieldType>CommandMatcher</FieldType>
        </Field>
        <Field>
            <FieldName>statesBefore</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>statesBefore</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>statesAfter</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>statesAfter</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>InterceptorSequencerAction</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>stateSequencer</ParamName>
                    <ParamType>StateSequencer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cache</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>interceptorClass</ParamName>
                    <ParamType>? extends AsyncInterceptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>matcher</ParamName>
                    <ParamType>CommandMatcher</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>before</MethodName>
            <MethodComment>/** 
 * Set up a list of sequencer states before interceptor  {@code interceptorClass} is called.
 */
</MethodComment>
            <ReturnType>InterceptorSequencerAction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>state1</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>additionalStates</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;initOurInterceptor;[]</InnerMethodInvoke>
                <InnerMethodInvoke>ourInterceptor;beforeStates;[StateSequencerUtil.concat(state1,additionalStates)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initOurInterceptor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>after</MethodName>
            <MethodComment>/** 
 * Set up a list of sequencer states after interceptor  {@code interceptorClass} has returned.&lt;p/&gt; Each invocation accepted by  {@code matcher} will enter/exit the next state from the list, and does nothing after the list is exhausted.
 */
</MethodComment>
            <ReturnType>InterceptorSequencerAction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>state1</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>additionalStates</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;initOurInterceptor;[]</InnerMethodInvoke>
                <InnerMethodInvoke>ourInterceptor;afterStates;[StateSequencerUtil.concat(state1,additionalStates)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createUniqueInterceptor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>SequencerInterceptor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>chain</ParamName>
                    <ParamType>AsyncInterceptorChain</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Class [uniqueClass=findUniqueClass(chain)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findUniqueClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>chain</ParamName>
                    <ParamType>AsyncInterceptorChain</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>init</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>stateSequencer</ParamName>
                    <ParamType>StateSequencer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>matcher</ParamName>
                    <ParamType>CommandMatcher</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitCommand</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>InvocationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>command</ParamName>
                    <ParamType>VisitableCommand</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [commandAccepted=matcher.accept(command)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>StateSequencerUtil;advanceMultiple;[stateSequencer, commandAccepted, statesBefore]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Throwable</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>beforeStates</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>states</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>afterStates</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>states</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>