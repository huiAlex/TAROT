<Class>
    <Id>2242</Id>
    <Package>org.infinispan.util.concurrent.locks.impl</Package>
    <ClassName>DefaultPendingLockManager</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>PendingLockManager</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>DefaultPendingLockManager  /** 
 * The default implementation for  {@link PendingLockManager}. &lt;p&gt; In transactional caches, a transaction would wait for transaction originated in a older topology id. It can happen when topology changes and a backup owner becomes the primary owner.
 * @author Pedro Ruivo
 * @since 8.0
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>trace</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>NO_PENDING_CHECK</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>pendingLockPromiseMap</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>pendingLockPromiseMap</FieldName>
            <FieldType>GlobalTransaction</FieldType>
        </Field>
        <Field>
            <FieldName>transactionTable</FieldName>
            <FieldType>TransactionTable</FieldType>
        </Field>
        <Field>
            <FieldName>timeService</FieldName>
            <FieldType>TimeService</FieldType>
        </Field>
        <Field>
            <FieldName>timeoutExecutor</FieldName>
            <FieldType>ScheduledExecutorService</FieldType>
        </Field>
        <Field>
            <FieldName>stateTransferManager</FieldName>
            <FieldType>StateTransferManager</FieldType>
        </Field>
        <Field>
            <FieldName>cacheTransaction</FieldName>
            <FieldType>CacheTransaction</FieldType>
        </Field>
        <Field>
            <FieldName>key</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>keyReleased</FieldName>
            <FieldType>CompletableFuture</FieldType>
        </Field>
        <Field>
            <FieldName>keyReleased</FieldName>
            <FieldType>Void</FieldType>
        </Field>
        <Field>
            <FieldName>pendingTransactions</FieldName>
            <FieldType>Collection</FieldType>
        </Field>
        <Field>
            <FieldName>pendingTransactions</FieldName>
            <FieldType>PendingTransaction</FieldType>
        </Field>
        <Field>
            <FieldName>expectedEndTime</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>notifier</FieldName>
            <FieldType>CompletableFuture</FieldType>
        </Field>
        <Field>
            <FieldName>notifier</FieldName>
            <FieldType>Void</FieldType>
        </Field>
        <Field>
            <FieldName>timedOutTransaction</FieldName>
            <FieldType>PendingTransaction</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>DefaultPendingLockManager</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>inject</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>transactionTable</ParamName>
                    <ParamType>TransactionTable</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>timeService</ParamName>
                    <ParamType>TimeService</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>timeoutExecutor</ParamName>
                    <ParamType>ScheduledExecutorService</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stateTransferManager</ParamName>
                    <ParamType>StateTransferManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkPendingTransactionsForKey</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PendingLockPromise</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>time</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>unit</ParamName>
                    <ParamType>TimeUnit</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>GlobalTransaction [globalTransaction=ctx.getGlobalTransaction()]</InnerVar>
                <InnerVar>PendingLockPromise [existing=pendingLockPromiseMap.get(globalTransaction)]</InnerVar>
                <InnerVar>int [txTopologyId=getTopologyId(ctx)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkPendingTransactionsForKeys</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PendingLockPromise</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>keys</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>time</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>unit</ParamName>
                    <ParamType>TimeUnit</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>GlobalTransaction [globalTransaction=ctx.getGlobalTransaction()]</InnerVar>
                <InnerVar>PendingLockPromise [existing=pendingLockPromiseMap.get(globalTransaction)]</InnerVar>
                <InnerVar>int [txTopologyId=getTopologyId(ctx)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>awaitPendingTransactionsForKey</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>time</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>unit</ParamName>
                    <ParamType>TimeUnit</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>GlobalTransaction [gtx=ctx.getGlobalTransaction()]</InnerVar>
                <InnerVar>PendingLockPromise [pendingLockPromise=pendingLockPromiseMap.remove(gtx)]</InnerVar>
                <InnerVar>int [txTopologyId=getTopologyId(ctx)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>awaitPendingTransactionsForAllKeys</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>keys</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>time</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>unit</ParamName>
                    <ParamType>TimeUnit</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>GlobalTransaction [gtx=ctx.getGlobalTransaction()]</InnerVar>
                <InnerVar>PendingLockPromise [pendingLockPromise=pendingLockPromiseMap.remove(gtx)]</InnerVar>
                <InnerVar>int [txTopologyId=getTopologyId(ctx)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createAndStore</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PendingLockPromise</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>transactions</ParamName>
                    <ParamType>PendingTransaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>globalTransaction</ParamName>
                    <ParamType>GlobalTransaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>time</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>unit</ParamName>
                    <ParamType>TimeUnit</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PendingLockPromiseImpl [pendingLockPromise=new PendingLockPromiseImpl(transactions,timeService.expectedEndTime(time,unit))]</InnerVar>
                <InnerVar>PendingLockPromise [existing=pendingLockPromiseMap.putIfAbsent(globalTransaction,pendingLockPromise)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>pendingLockPromise;registerListenerInCacheTransactions;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createAndStore</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PendingLockPromise</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>globalTransaction</ParamName>
                    <ParamType>GlobalTransaction</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PendingLockPromise [existing=pendingLockPromiseMap.putIfAbsent(globalTransaction,PendingLockPromise.NO_OP)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTopologyId</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CacheTransaction [tx=context.getCacheTransaction()]</InnerVar>
                <InnerVar>boolean [isFromStateTransfer=context.isOriginLocal() &amp;&amp; ((LocalTransaction)tx).isFromStateTransfer()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkForPendingLock</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>globalTransaction</ParamName>
                    <ParamType>GlobalTransaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>transactionTopologyId</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lockTimeout</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>long [expectedEndTime=timeService.expectedEndTime(lockTimeout,TimeUnit.MILLISECONDS)]</InnerVar>
                <InnerVar>Collection&lt;PendingTransaction&gt; [pendingTransactions=getTransactionWithLockedKey(transactionTopologyId,key,globalTransaction)]</InnerVar>
                <InnerVar>PendingTransaction [lockOwner=waitForTransactionsToComplete(pendingTransactions,expectedEndTime)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkForAnyPendingLocks</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>keys</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>globalTransaction</ParamName>
                    <ParamType>GlobalTransaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>transactionTopologyId</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lockTimeout</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>long [expectedEndTime=timeService.expectedEndTime(lockTimeout,TimeUnit.MILLISECONDS)]</InnerVar>
                <InnerVar>Collection&lt;PendingTransaction&gt; [pendingTransactions=getTransactionWithAnyLockedKey(transactionTopologyId,keys,globalTransaction)]</InnerVar>
                <InnerVar>PendingTransaction [lockOwner=waitForTransactionsToComplete(pendingTransactions,expectedEndTime)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>timeout</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lockOwner</ParamName>
                    <ParamType>PendingTransaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>thisGlobalTransaction</ParamName>
                    <ParamType>GlobalTransaction</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>waitForTransactionsToComplete</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PendingTransaction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>transactionsToCheck</ParamName>
                    <ParamType>PendingTransaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>expectedEndTime</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTransactionWithLockedKey</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PendingTransaction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>transactionTopologyId</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>globalTransaction</ParamName>
                    <ParamType>GlobalTransaction</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Collection&lt;PendingTransaction&gt; [pendingTransactions=new ArrayList&lt;&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;forEachTransaction;[transaction -&gt; {
  if (transaction.getTopologyId() &lt; transactionTopologyId &amp;&amp; !transaction.getGlobalTransaction().equals(globalTransaction)) {
    CompletableFuture&lt;Void&gt; keyReleasedFuture=transaction.getReleaseFutureForKey(key);
    if (keyReleasedFuture != null) {
      pendingTransactions.add(new PendingTransaction(transaction,key,keyReleasedFuture));
    }
  }
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTransactionWithAnyLockedKey</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PendingTransaction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>transactionTopologyId</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>keys</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>globalTransaction</ParamName>
                    <ParamType>GlobalTransaction</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Collection&lt;PendingTransaction&gt; [pendingTransactions=new ArrayList&lt;&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;forEachTransaction;[transaction -&gt; {
  if (transaction.getTopologyId() &lt; transactionTopologyId &amp;&amp; !transaction.getGlobalTransaction().equals(globalTransaction)) {
    KeyValuePair&lt;Object,CompletableFuture&lt;Void&gt;&gt; keyReleaseFuture=transaction.getReleaseFutureForKeys(keys);
    if (keyReleaseFuture != null) {
      pendingTransactions.add(new PendingTransaction(transaction,keyReleaseFuture.getKey(),keyReleaseFuture.getValue()));
    }
  }
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>forEachTransaction</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>consumer</ParamName>
                    <ParamType>CacheTransaction</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Collection&lt;? extends CacheTransaction&gt; [localTransactions=transactionTable.getLocalTransactions()]</InnerVar>
                <InnerVar>Collection&lt;? extends CacheTransaction&gt; [remoteTransactions=transactionTable.getRemoteTransactions()]</InnerVar>
                <InnerVar>int [totalSize=localTransactions.size() + remoteTransactions.size()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>awaitOn</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pendingLockPromise</ParamName>
                    <ParamType>PendingLockPromise</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>globalTransaction</ParamName>
                    <ParamType>GlobalTransaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>timeout</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>timeUnit</ParamName>
                    <ParamType>TimeUnit</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>((PendingLockPromiseImpl)pendingLockPromise);await;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PendingTransaction</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheTransaction</ParamName>
                    <ParamType>CacheTransaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>keyReleased</ParamName>
                    <ParamType>Void</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PendingLockPromiseImpl</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pendingTransactions</ParamName>
                    <ParamType>PendingTransaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>expectedEndTime</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isReady</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addListener</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>listener</ParamName>
                    <ParamType>PendingLockListener</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>notifier;thenRun;[listener::onReady]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasTimedOut</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRemainingTimeout</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>call</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;onRelease;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;onRelease;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onRelease</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPendingTransaction</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PendingTransaction</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>registerListenerInCacheTransactions</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>await</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;isReady;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>