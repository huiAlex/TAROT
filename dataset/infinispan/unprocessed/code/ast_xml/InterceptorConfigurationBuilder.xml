<Class>
    <Id>3395</Id>
    <Package>org.infinispan.configuration.cache</Package>
    <ClassName>InterceptorConfigurationBuilder</ClassName>
    <SuperClass>AbstractCustomInterceptorsConfigurationChildBuilder</SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Builder</SuperInterface>
        <SuperInterface>InterceptorConfiguration</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>InterceptorConfigurationBuilder  /** 
 * This builder defines details of a specific custom interceptor.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>attributes</FieldName>
            <FieldType>AttributeSet</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>InterceptorConfigurationBuilder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>builder</ParamName>
                    <ParamType>CustomInterceptorsConfigurationBuilder</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>after</MethodName>
            <MethodComment>/** 
 * Dictates that the custom interceptor appears immediately &lt;i&gt;after&lt;/i&gt; the specified interceptor. If the specified interceptor is not found in the interceptor chain, a  {@link CacheConfigurationException} will be thrown when thecache starts.
 * @param after the class of the interceptor to look for
 */
</MethodComment>
            <ReturnType>InterceptorConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>after</ParamName>
                    <ParamType>? extends AsyncInterceptor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>attributes.attribute(AFTER);set;[after]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>before</MethodName>
            <MethodComment>/** 
 * Dictates that the custom interceptor appears immediately &lt;i&gt;before&lt;/i&gt; the specified interceptor. If the specified interceptor is not found in the interceptor chain, a  {@link CacheConfigurationException} will be thrown when thecache starts.
 * @param before the class of the interceptor to look for
 */
</MethodComment>
            <ReturnType>InterceptorConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>before</ParamName>
                    <ParamType>? extends AsyncInterceptor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>attributes.attribute(BEFORE);set;[before]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>interceptorClass</MethodName>
            <MethodComment>/** 
 * Class of the new custom interceptor to add to the configuration.
 * @param interceptorClass an instance of {@link AsyncInterceptor}
 */
</MethodComment>
            <ReturnType>InterceptorConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>interceptorClass</ParamName>
                    <ParamType>? extends AsyncInterceptor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>attributes.attribute(INTERCEPTOR_CLASS);set;[interceptorClass]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>interceptor</MethodName>
            <MethodComment>/** 
 * @deprecated Since 9.0, please use {@link #interceptor(AsyncInterceptor)} instead.
 */
</MethodComment>
            <ReturnType>InterceptorConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>interceptor</ParamName>
                    <ParamType>CommandInterceptor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>attributes.attribute(INTERCEPTOR);set;[interceptor]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>interceptor</MethodName>
            <MethodComment>/** 
 * An instance of the new custom interceptor to add to the configuration. Warning: if you use this configuration for multiple caches, the interceptor instance will be shared, which will corrupt interceptor stack. Use  {@link #interceptorClass} instead.
 * @param interceptor an instance of {@link AsyncInterceptor}
 */
</MethodComment>
            <ReturnType>InterceptorConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>interceptor</ParamName>
                    <ParamType>AsyncInterceptor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>attributes.attribute(INTERCEPTOR);set;[interceptor]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>index</MethodName>
            <MethodComment>/** 
 * Specifies a position in the interceptor chain to place the new interceptor.  The index starts at 0 and goes up to the number of interceptors in a given configuration.  An  {@link IllegalArgumentException} is thrown if the index isless than 0 or greater than the maximum number of interceptors in the chain.
 * @param i positional index in the interceptor chain to place the new interceptor.
 */
</MethodComment>
            <ReturnType>InterceptorConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>i</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>attributes.attribute(INDEX);set;[i]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>position</MethodName>
            <MethodComment>/** 
 * Specifies a position, denoted by the  {@link Position} enumeration, where to place the new interceptor.
 * @param p position to place the new interceptor
 */
</MethodComment>
            <ReturnType>InterceptorConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>p</ParamName>
                    <ParamType>Position</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>attributes.attribute(POSITION);set;[p]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>withProperties</MethodName>
            <MethodComment>/** 
 * Sets interceptor properties
 * @return this InterceptorConfigurationBuilder
 */
</MethodComment>
            <ReturnType>InterceptorConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>properties</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>attributes.attribute(PROPERTIES);set;[TypedProperties.toTypedProperties(properties)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clearProperties</MethodName>
            <MethodComment>/** 
 * Clears the interceptor properties
 * @return this InterceptorConfigurationBuilder
 */
</MethodComment>
            <ReturnType>InterceptorConfigurationBuilder</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>TypedProperties [properties=attributes.attribute(PROPERTIES).get()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>properties;clear;[]</InnerMethodInvoke>
                <InnerMethodInvoke>attributes.attribute(PROPERTIES);set;[TypedProperties.toTypedProperties(properties)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addProperty</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>InterceptorConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>TypedProperties [properties=attributes.attribute(PROPERTIES).get()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>properties;put;[key, value]</InnerMethodInvoke>
                <InnerMethodInvoke>attributes.attribute(PROPERTIES);set;[TypedProperties.toTypedProperties(properties)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeProperty</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>InterceptorConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>TypedProperties [properties=attributes.attribute(PROPERTIES).get()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>properties;remove;[key]</InnerMethodInvoke>
                <InnerMethodInvoke>attributes.attribute(PROPERTIES);set;[TypedProperties.toTypedProperties(properties)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>validate</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Attribute&lt;Class&gt; [interceptorClassAttribute=attributes.attribute(INTERCEPTOR_CLASS)]</InnerVar>
                <InnerVar>Attribute&lt;AsyncInterceptor&gt; [interceptorAttribute=attributes.attribute(INTERCEPTOR)]</InnerVar>
                <InnerVar>Class&lt;? extends AsyncInterceptor&gt; [interceptorClass=interceptorClassAttribute.get()]</InnerVar>
                <InnerVar>int [positions=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>validate</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>globalConfig</ParamName>
                    <ParamType>GlobalConfiguration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>create</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>InterceptorConfiguration</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>read</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>InterceptorConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>template</ParamName>
                    <ParamType>InterceptorConfiguration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>attributes;read;[template.attributes()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>