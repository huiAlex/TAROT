<Class>
    <Id>2635</Id>
    <Package>org.infinispan.rest.http2</Package>
    <ClassName>HttpResponseHandler</ClassName>
    <SuperClass>SimpleChannelInboundHandler</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>HttpResponseHandler  /** 
 * Process  {@link io.netty.handler.codec.http.FullHttpResponse} translated from HTTP/2 frames
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>streamidPromiseMap</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>streamidPromiseMap</FieldName>
            <FieldType>Integer</FieldType>
        </Field>
        <Field>
            <FieldName>responses</FieldName>
            <FieldType>Queue</FieldType>
        </Field>
        <Field>
            <FieldName>responses</FieldName>
            <FieldType>FullHttpResponse</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>HttpResponseHandler</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>put</MethodName>
            <MethodComment>/** 
 * Create an association between an anticipated response stream id and a  {@link io.netty.channel.ChannelPromise}
 * @param streamId The stream for which a response is expected
 * @param writeFuture A future that represent the request write operation
 * @param promise The promise object that will be used to wait/notify events
 * @return The previous object associated with {@code streamId}
 * @see HttpResponseHandler#awaitResponses(long,java.util.concurrent.TimeUnit)
 */
</MethodComment>
            <ReturnType>ChannelFuture</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>streamId</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>writeFuture</ParamName>
                    <ParamType>ChannelFuture</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>promise</ParamName>
                    <ParamType>ChannelPromise</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>awaitResponses</MethodName>
            <MethodComment>/** 
 * Wait (sequentially) for a time duration for each anticipated response
 * @param timeout Value of time to wait for each response
 * @param unit Units associated with {@code timeout}
 * @see HttpResponseHandler#put(int,io.netty.channel.ChannelFuture,io.netty.channel.ChannelPromise)
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>timeout</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>unit</ParamName>
                    <ParamType>TimeUnit</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Iterator&lt;Entry&lt;Integer,Entry&lt;ChannelFuture,ChannelPromise&gt;&gt;&gt; [itr=streamidPromiseMap.entrySet().iterator()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>channelRead0</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>ChannelHandlerContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>msg</ParamName>
                    <ParamType>FullHttpResponse</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Integer [streamId=msg.headers().getInt(HttpConversionUtil.ExtensionHeaderNames.STREAM_ID.text())]</InnerVar>
                <InnerVar>Entry&lt;ChannelFuture,ChannelPromise&gt; [entry=streamidPromiseMap.get(streamId)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getResponses</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>FullHttpResponse</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>