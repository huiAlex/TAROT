<Class>
    <Id>1029</Id>
    <Package>org.infinispan.query.impl</Package>
    <ClassName>LifecycleManager</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>ModuleLifecycle</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>LifecycleManager  /** 
 * Lifecycle of the Query module: initializes the Hibernate Search engine and shuts it down at cache stop.
 * @author Sanne Grinovero &lt;sanne@hibernate.org&gt; (C) 2011 Red Hat Inc.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>REMOVED_REGISTRY_COMPONENT</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>mbeanServer</FieldName>
            <FieldType>MBeanServer</FieldType>
        </Field>
        <Field>
            <FieldName>jmxDomain</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>cacheStarting</MethodName>
            <MethodComment>/** 
 * Registers the Search interceptor in the cache before it gets started
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cr</ParamName>
                    <ParamType>ComponentRegistry</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cfg</ParamName>
                    <ParamType>Configuration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cacheName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>InternalCacheRegistry [icr=cr.getGlobalComponentRegistry().getComponent(InternalCacheRegistry.class)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>registerMatcher</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cr</ParamName>
                    <ParamType>ComponentRegistry</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>searchFactory</ParamName>
                    <ParamType>SearchIntegrator</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassLoader [classLoader=cr.getGlobalComponentRegistry().getComponent(ClassLoader.class)]</InnerVar>
                <InnerVar>ReflectionMatcher [reflectionMatcher]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cr;registerComponent;[reflectionMatcher, ReflectionMatcher.class]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addCacheDependencyIfNeeded</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheStarting</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cacheManager</ParamName>
                    <ParamType>EmbeddedCacheManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indexingConfiguration</ParamName>
                    <ParamType>IndexingConfiguration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createQueryInterceptorIfNeeded</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cr</ParamName>
                    <ParamType>ComponentRegistry</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cfg</ParamName>
                    <ParamType>Configuration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>searchFactory</ParamName>
                    <ParamType>SearchIntegrator</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>QueryInterceptor [queryInterceptor=cr.getComponent(QueryInterceptor.class)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildQueryInterceptor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>QueryInterceptor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cfg</ParamName>
                    <ParamType>Configuration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>searchFactory</ParamName>
                    <ParamType>SearchIntegrator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cache</ParamName>
                    <ParamType>Cache</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>IndexModificationStrategy [indexingStrategy=IndexModificationStrategy.configuredStrategy(searchFactory,cfg)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cacheStarted</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cr</ParamName>
                    <ParamType>ComponentRegistry</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cacheName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Configuration [configuration=cr.getComponent(Configuration.class)]</InnerVar>
                <InnerVar>IndexingConfiguration [indexingConfiguration=configuration.indexing()]</InnerVar>
                <InnerVar>SearchIntegrator [searchFactory=cr.getComponent(SearchIntegrator.class)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;registerQueryMBeans;[cr, configuration, searchFactory]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkIndexableClasses</MethodName>
            <MethodComment>/** 
 * Check that the indexable classes declared by the user are really indexable.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>searchFactory</ParamName>
                    <ParamType>SearchIntegrator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indexedEntities</ParamName>
                    <ParamType>Class&lt;?&gt;</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>registerQueryMBeans</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cr</ParamName>
                    <ParamType>ComponentRegistry</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cfg</ParamName>
                    <ParamType>Configuration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sf</ParamName>
                    <ParamType>SearchIntegrator</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AdvancedCache&lt;?,?&gt; [cache=cr.getComponent(Cache.class).getAdvancedCache()]</InnerVar>
                <InnerVar>GlobalConfiguration [globalCfg=cr.getGlobalComponentRegistry().getGlobalConfiguration()]</InnerVar>
                <InnerVar>String [cacheManagerName=globalCfg.globalJmxStatistics().cacheManagerName()]</InnerVar>
                <InnerVar>String [queryGroupName=getQueryGroupName(cacheManagerName,cache.getName())]</InnerVar>
                <InnerVar>InfinispanQueryStatisticsInfo [stats=new InfinispanQueryStatisticsInfo(sf)]</InnerVar>
                <InnerVar>ManageableComponentMetadata [massIndexerCompMetadata=cr.getGlobalComponentRegistry().getComponentMetadataRepo().findComponentMetadata(MassIndexer.class).toManageableComponentMetadata()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>stats;setStatisticsEnabled;[cfg.jmxStatistics().enabled()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getQueryGroupName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheManagerName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cacheName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>verifyChainContainsQueryInterceptor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cr</ParamName>
                    <ParamType>ComponentRegistry</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AsyncInterceptorChain [interceptorChain=cr.getComponent(AsyncInterceptorChain.class)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSearchFactory</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>SearchIntegrator</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indexingConfiguration</ParamName>
                    <ParamType>IndexingConfiguration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cr</ParamName>
                    <ParamType>ComponentRegistry</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Object [component=cr.getComponent(SearchIntegrator.class)]</InnerVar>
                <InnerVar>SearchIntegrator [searchFactory=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>allowDynamicSortingByDefault</MethodName>
            <MethodComment>/** 
 * Dynamic index uninverting is deprecated: using it will cause warnings to be logged, to encourage people to use the annotation org.hibernate.search.annotations.SortableField. The default in Hibernate Search is to throw an exception rather than logging a warning; we opt to be more lenient by default in the Infinispan use case, matching the behaviour of previous versions of Hibernate Search.
 * @param indexingProperties
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>indexingProperties</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>indexingProperties;putIfAbsent;[Environment.INDEX_UNINVERTING_ALLOWED, Boolean.TRUE.toString()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addProgrammaticMappings</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Properties</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>indexingProperties</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cr</ParamName>
                    <ParamType>ComponentRegistry</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Iterator&lt;ProgrammaticSearchMappingProvider&gt; [providers=ServiceFinder.load(ProgrammaticSearchMappingProvider.class).iterator()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cacheStopping</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cr</ParamName>
                    <ParamType>ComponentRegistry</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cacheName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>QueryInterceptor [queryInterceptor=cr.getComponent(QueryInterceptor.class)]</InnerVar>
                <InnerVar>Object [searchFactoryIntegrator=cr.getComponent(SearchIntegrator.class)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cacheStopped</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cr</ParamName>
                    <ParamType>ComponentRegistry</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cacheName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Configuration [cfg=cr.getComponent(Configuration.class)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;removeQueryInterceptorFromConfiguration;[cfg]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeQueryInterceptorFromConfiguration</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cfg</ParamName>
                    <ParamType>Configuration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ConfigurationBuilder [builder=new ConfigurationBuilder()]</InnerVar>
                <InnerVar>CustomInterceptorsConfigurationBuilder [customInterceptorsBuilder=builder.customInterceptors()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cfg.customInterceptors();interceptors;[builder.build().customInterceptors().interceptors()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cacheManagerStarting</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>gcr</ParamName>
                    <ParamType>GlobalComponentRegistry</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>globalCfg</ParamName>
                    <ParamType>GlobalConfiguration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>QueryCache [queryCache=new QueryCache()]</InnerVar>
                <InnerVar>Map&lt;Integer,AdvancedExternalizer&lt;?&gt;&gt; [externalizerMap=globalCfg.serialization().advancedExternalizers()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>gcr;registerComponent;[queryCache, QueryCache.class]</InnerMethodInvoke>
                <InnerMethodInvoke>externalizerMap;put;[ExternalizerIds.ICKLE_FILTER_AND_CONVERTER, new IckleFilterAndConverter.IckleFilterAndConverterExternalizer()]</InnerMethodInvoke>
                <InnerMethodInvoke>externalizerMap;put;[ExternalizerIds.ICKLE_FILTER_RESULT, new IckleFilterAndConverter.FilterResultExternalizer()]</InnerMethodInvoke>
                <InnerMethodInvoke>externalizerMap;put;[ExternalizerIds.ICKLE_CACHE_EVENT_FILTER_CONVERTER, new IckleCacheEventFilterConverter.Externalizer()]</InnerMethodInvoke>
                <InnerMethodInvoke>externalizerMap;put;[ExternalizerIds.ICKLE_CONTINUOUS_QUERY_CACHE_EVENT_FILTER_CONVERTER, new IckleContinuousQueryCacheEventFilterConverter.Externalizer()]</InnerMethodInvoke>
                <InnerMethodInvoke>externalizerMap;put;[ExternalizerIds.ICKLE_CONTINUOUS_QUERY_RESULT, new ContinuousQueryResult.Externalizer()]</InnerMethodInvoke>
                <InnerMethodInvoke>externalizerMap;put;[ExternalizerIds.LUCENE_QUERY_BOOLEAN, new LuceneBooleanQueryExternalizer()]</InnerMethodInvoke>
                <InnerMethodInvoke>externalizerMap;put;[ExternalizerIds.LUCENE_QUERY_TERM, new LuceneTermQueryExternalizer()]</InnerMethodInvoke>
                <InnerMethodInvoke>externalizerMap;put;[ExternalizerIds.LUCENE_TERM, new LuceneTermExternalizer()]</InnerMethodInvoke>
                <InnerMethodInvoke>externalizerMap;put;[ExternalizerIds.LUCENE_SORT, new LuceneSortExternalizer()]</InnerMethodInvoke>
                <InnerMethodInvoke>externalizerMap;put;[ExternalizerIds.LUCENE_SORT_FIELD, new LuceneSortFieldExternalizer()]</InnerMethodInvoke>
                <InnerMethodInvoke>externalizerMap;put;[ExternalizerIds.CLUSTERED_QUERY_TOPDOCS, new ClusteredTopDocsExternalizer()]</InnerMethodInvoke>
                <InnerMethodInvoke>externalizerMap;put;[ExternalizerIds.LUCENE_TOPDOCS, new LuceneTopDocsExternalizer()]</InnerMethodInvoke>
                <InnerMethodInvoke>externalizerMap;put;[ExternalizerIds.LUCENE_FIELD_SCORE_DOC, new LuceneFieldDocExternalizer()]</InnerMethodInvoke>
                <InnerMethodInvoke>externalizerMap;put;[ExternalizerIds.LUCENE_SCORE_DOC, new LuceneScoreDocExternalizer()]</InnerMethodInvoke>
                <InnerMethodInvoke>externalizerMap;put;[ExternalizerIds.LUCENE_TOPFIELDDOCS, new LuceneTopFieldDocsExternalizer()]</InnerMethodInvoke>
                <InnerMethodInvoke>externalizerMap;put;[ExternalizerIds.LUCENE_QUERY_MATCH_ALL, new LuceneMatchAllQueryExternalizer()]</InnerMethodInvoke>
                <InnerMethodInvoke>externalizerMap;put;[ExternalizerIds.INDEX_WORKER, new IndexWorker.Externalizer()]</InnerMethodInvoke>
                <InnerMethodInvoke>externalizerMap;put;[ExternalizerIds.LUCENE_BYTES_REF, new LuceneBytesRefExternalizer()]</InnerMethodInvoke>
                <InnerMethodInvoke>externalizerMap;put;[ExternalizerIds.LUCENE_QUERY_PREFIX, new LucenePrefixQueryExternalizer()]</InnerMethodInvoke>
                <InnerMethodInvoke>externalizerMap;put;[ExternalizerIds.LUCENE_QUERY_WILDCARD, new LuceneWildcardQueryExternalizer()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>