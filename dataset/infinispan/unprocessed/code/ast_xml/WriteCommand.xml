<Class>
    <Id>3540</Id>
    <Package>org.infinispan.commands.write</Package>
    <ClassName>WriteCommand</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>VisitableCommand</SuperInterface>
        <SuperInterface>FlagAffectedCommand</SuperInterface>
        <SuperInterface>TopologyAffectedCommand</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>WriteCommand  /** 
 * A command that modifies the cache in some way
 * @author Manik Surtani
 * @since 4.0
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>isSuccessful</MethodName>
            <MethodComment>/** 
 * Some commands may want to provide information on whether the command was successful or not.  This is different from a failure, which usually would result in an exception being thrown.  An example is a putIfAbsent() not doing anything because the key in question was present.  This would result in a isSuccessful() call returning false.
 * @return true if the command completed successfully, false otherwise.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isConditional</MethodName>
            <MethodComment>/** 
 * Certain commands only work based on a certain condition or state of the cache.  For example,  {@link org.infinispan.Cache#putIfAbsent(Object,Object)} only does anything if a condition is met, i.e., the entry inquestion is not already present.  This method tests whether the command in question is conditional or not.
 * @return true if the command is conditional, false otherwise
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getValueMatcher</MethodName>
            <MethodComment>/** 
 * @return The current value matching policy.
 */
</MethodComment>
            <ReturnType>ValueMatcher</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setValueMatcher</MethodName>
            <MethodComment>/** 
 * @param valueMatcher The new value matching policy.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>valueMatcher</ParamName>
                    <ParamType>ValueMatcher</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAffectedKeys</MethodName>
            <MethodComment>/** 
 * @return a collection of keys affected by this write command.  Some commands - such as ClearCommand - may returnan empty collection for this method.
 */
</MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>updateStatusFromRemoteResponse</MethodName>
            <MethodComment>/** 
 * Used for conditional commands, to update the status of the command on the originator based on the result of its execution on the primary owner.
 * @deprecated since 9.1
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>remoteResponse</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fail</MethodName>
            <MethodComment>/** 
 * Make subsequent invocations of  {@link #isSuccessful()} return &lt;code&gt;false&lt;/code&gt;.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isWriteOnly</MethodName>
            <MethodComment>/** 
 * Indicates whether the command is write-only, meaning that it makes no attempt to read the previously associated value with key for which the command is directed.
 * @return true is the command is write only, false otherwise.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>