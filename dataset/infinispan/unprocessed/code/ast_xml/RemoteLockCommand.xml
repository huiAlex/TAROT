<Class>
    <Id>2483</Id>
    <Package>org.infinispan.util.concurrent.locks</Package>
    <ClassName>RemoteLockCommand</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>ReplicableCommand</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>RemoteLockCommand  /** 
 * Simple interface to extract all the keys that may need to be locked. &lt;p&gt; A  {@link org.infinispan.commands.remote.CacheRpcCommand} that needs to acquire locks should implement this interface.This way, Infinispan tries to provide a better management to optimize the system resources usage.
 * @author Pedro Ruivo
 * @since 8.0
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getKeysToLock</MethodName>
            <MethodComment>/** 
 * It returns a  {@link Collection} with the keys to be lock.&lt;p&gt; It may return an empty collection if no keys needs to be locked independently of the return value of  {@link #hasSkipLocking()}. It may contains duplicated keys and  {@code null} is not a valid return value.
 * @return a {@link Collection} of keys to lock.
 */
</MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getKeyLockOwner</MethodName>
            <MethodComment>/** 
 * It returns the lock owner of the key. &lt;p&gt; Usually, in transaction caches it is the  {@link org.infinispan.transaction.xa.GlobalTransaction} and innon-transactional caches the  {@link org.infinispan.commands.CommandInvocationId}.
 * @return the lock owner of the key.
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasZeroLockAcquisition</MethodName>
            <MethodComment>/** 
 * @return it the locks should be acquire with 0 (zero) acquisition timeout.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasSkipLocking</MethodName>
            <MethodComment>/** 
 * It checks if this command should acquire locks.
 * @return {@code true} if locks should be acquired for the keys in {@link #getKeysToLock()}.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>