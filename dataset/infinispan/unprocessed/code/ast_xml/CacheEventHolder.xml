<Class>
    <Id>2660</Id>
    <Package>org.infinispan.cdi.embedded.test.event</Package>
    <ClassName>CacheEventHolder</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>CacheEventHolder  /** 
 * Collects all events from observer and allows to extract them.
 * @author Sebastian Laskawiec
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>eventMap</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>eventMap</FieldName>
            <FieldType>Class&lt;?&gt;</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>addEventClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheAnnotationClass</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>eventClass</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addEvent</MethodName>
            <MethodComment>/** 
 * Adds event to this holder.
 * @param cacheAnnotationClass CDI Cache qualifier annotation (like &lt;code&gt;@Cache1&lt;/code&gt;).
 * @param eventStaticClass Event static class information (event have generic type information).
 * @param event Event itself.
 * @param &lt; T &gt; Generic information about event type.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheAnnotationClass</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>eventStaticClass</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>event</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;addEventClass;[cacheAnnotationClass, eventStaticClass]</InnerMethodInvoke>
                <InnerMethodInvoke>eventMap.get(cacheAnnotationClass).get(eventStaticClass);add;[event]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addEvent</MethodName>
            <MethodComment>/** 
 * Adds event to this holder.
 * @param cacheAnnotationClass CDI Cache qualifier annotation (like &lt;code&gt;@Cache1&lt;/code&gt;).
 * @param eventStaticClass Event static class information (event have generic type information).
 * @param event Event itself.
 * @param &lt; T &gt; Generic information about event type.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheAnnotationClass</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>eventStaticClass</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>event</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;addEventClass;[cacheAnnotationClass, eventStaticClass]</InnerMethodInvoke>
                <InnerMethodInvoke>eventMap.get(cacheAnnotationClass).get(eventStaticClass);add;[event]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clear</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>eventMap;clear;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEvents</MethodName>
            <MethodComment>/** 
 * Gets all events based on Cache annotation and class of events.
 * @param cacheAnnotationClass CDI Cache qualifier annotation (like &lt;code&gt;@Cache1&lt;/code&gt;).
 * @param eventClass Event class.
 * @param &lt; T &gt; Generic information about event type.
 * @return List of events occurred. Empty list if there was no events.
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheAnnotationClass</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>eventClass</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ArrayList&lt;T&gt; [toBeReturned=new ArrayList&lt;&gt;()]</InnerVar>
                <InnerVar>Map&lt;Class&lt;?&gt;,List&lt;Object&gt;&gt; [eventsMapForGivenCache=eventMap.get(cacheAnnotationClass)]</InnerVar>
                <InnerVar>List&lt;Object&gt; [events=eventsMapForGivenCache.get(eventClass)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>