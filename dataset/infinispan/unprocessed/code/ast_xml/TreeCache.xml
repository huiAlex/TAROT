<Class>
    <Id>975</Id>
    <Package>org.infinispan.tree</Package>
    <ClassName>TreeCache</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Lifecycle</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>TreeCache  /** 
 * This is a tree-like facade around a  {@link Cache} allowing for efficient tree-style access to cached data.&lt;p/&gt; The primary purpose of this interface is to allow for efficient caching of tree-like structures such as directories, as well as to provide a compatibility layer with JBoss Cache 3.x and earlier. &lt;p/&gt; For most purposes, we expect people to use the  {@link Cache} interface directly as it is simpler.&lt;p/&gt; The tree API assumes that a collection of  {@link Node}s, organized in a tree structure underneath a root node, contains key/value attributes of data. &lt;p/&gt; Any locking happens on a node-level granularity, which means that all attributes on a node are atomic and in terms of locking, is coarse grained.  At the same time, replication is fine grained, and only modified attributes in a Node are replicated. &lt;p/&gt; Obtaining a TreeCache is done using the  {@link TreeCacheFactory}. &lt;pre&gt; Cache cache = new DefaultCacheFactory().getCache(); TreeCacheFactory tcf = new TreeCacheFactory(); TreeCache tree = tcf.createTreeCache(cache); &lt;/pre&gt;
 * @author Manik Surtani (&lt;a href="mailto:manik AT jboss DOT org"&gt;manik AT jboss DOT org&lt;/a&gt;)
 * @see Node
 * @since 4.0
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getRoot</MethodName>
            <MethodComment>/** 
 * Returns the root node of this cache.
 * @return the root node
 */
</MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRoot</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>flags</ParamName>
                    <ParamType>Flag</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>put</MethodName>
            <MethodComment>/** 
 * Associates the specified value with the specified key for a  {@link Node} in this cache. If the {@link Node}previously contained a mapping for this key, the old value is replaced by the specified value.
 * @param fqn   &lt;b&gt;&lt;i&gt;absolute&lt;/i&gt;&lt;/b&gt; {@link Fqn} to the {@link Node} to be accessed.
 * @param key   key with which the specified value is to be associated.
 * @param value value to be associated with the specified key.
 * @return previous value associated with specified key, or &lt;code&gt;null&lt;/code&gt; if there was no mapping for key. A&lt;code&gt;null&lt;/code&gt; return can also indicate that the Node previously associated &lt;code&gt;null&lt;/code&gt; with the specified key, if the implementation supports null values.
 * @throws IllegalStateException if the cache is not in a started state.
 */
</MethodComment>
            <ReturnType>V</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fqn</ParamName>
                    <ParamType>Fqn</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>V</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>put</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>V</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fqn</ParamName>
                    <ParamType>Fqn</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>V</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>flags</ParamName>
                    <ParamType>Flag</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>put</MethodName>
            <MethodComment>/** 
 * Convenience method that takes a string representation of an Fqn.  Otherwise identical to  {@link #put(Fqn,Object,Object)}
 * @param fqn   String representation of the Fqn
 * @param key   key with which the specified value is to be associated.
 * @param value value to be associated with the specified key.
 * @return previous value associated with specified key, or &lt;code&gt;null&lt;/code&gt; if there was no mapping for key. A&lt;code&gt;null&lt;/code&gt; return can also indicate that the Node previously associated &lt;code&gt;null&lt;/code&gt; with the specified key, if the implementation supports null values.
 * @throws IllegalStateException if the cache is not in a started state
 */
</MethodComment>
            <ReturnType>V</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fqn</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>V</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>put</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>V</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fqn</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>V</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>flags</ParamName>
                    <ParamType>Flag</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>put</MethodName>
            <MethodComment>/** 
 * Copies all of the mappings from the specified map to a  {@link Node}.
 * @param fqn  &lt;b&gt;&lt;i&gt;absolute&lt;/i&gt;&lt;/b&gt; {@link Fqn} to the {@link Node} to copy the data to
 * @param data mappings to copy
 * @throws IllegalStateException if the cache is not in a started state
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fqn</ParamName>
                    <ParamType>Fqn</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>data</ParamName>
                    <ParamType>? extends K</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>put</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fqn</ParamName>
                    <ParamType>Fqn</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>data</ParamName>
                    <ParamType>? extends K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>flags</ParamName>
                    <ParamType>Flag</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>put</MethodName>
            <MethodComment>/** 
 * Convenience method that takes a string representation of an Fqn.  Otherwise identical to  {@link #put(Fqn,java.util.Map)}
 * @param fqn  String representation of the Fqn
 * @param data data map to insert
 * @throws IllegalStateException if the cache is not in a started state
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fqn</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>data</ParamName>
                    <ParamType>? extends K</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>put</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fqn</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>data</ParamName>
                    <ParamType>? extends K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>flags</ParamName>
                    <ParamType>Flag</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>remove</MethodName>
            <MethodComment>/** 
 * Removes the mapping for this key from a Node. Returns the value to which the Node previously associated the key, or &lt;code&gt;null&lt;/code&gt; if the Node contained no mapping for this key.
 * @param fqn &lt;b&gt;&lt;i&gt;absolute&lt;/i&gt;&lt;/b&gt; {@link Fqn} to the {@link Node} to be accessed.
 * @param key key whose mapping is to be removed from the Node
 * @return previous value associated with specified Node's key
 * @throws IllegalStateException if the cache is not in a started state
 */
</MethodComment>
            <ReturnType>V</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fqn</ParamName>
                    <ParamType>Fqn</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>remove</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>V</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fqn</ParamName>
                    <ParamType>Fqn</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>flags</ParamName>
                    <ParamType>Flag</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>remove</MethodName>
            <MethodComment>/** 
 * Convenience method that takes a string representation of an Fqn.  Otherwise identical to  {@link #remove(Fqn,Object)}
 * @param fqn string representation of the Fqn to retrieve
 * @param key key to remove
 * @return old value removed, or null if the fqn does not exist
 * @throws IllegalStateException if the cache is not in a started state
 */
</MethodComment>
            <ReturnType>V</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fqn</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>remove</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>V</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fqn</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>flags</ParamName>
                    <ParamType>Flag</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeNode</MethodName>
            <MethodComment>/** 
 * Removes a  {@link Node} indicated by absolute {@link Fqn}.
 * @param fqn {@link Node} to remove
 * @return true if the node was removed, false if the node was not found
 * @throws IllegalStateException if the cache is not in a started state
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fqn</ParamName>
                    <ParamType>Fqn</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fqn</ParamName>
                    <ParamType>Fqn</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>flags</ParamName>
                    <ParamType>Flag</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeNode</MethodName>
            <MethodComment>/** 
 * Convenience method that takes a string representation of an Fqn.  Otherwise identical to  {@link #removeNode(Fqn)}
 * @param fqn string representation of the Fqn to retrieve
 * @return true if the node was found and removed, false otherwise
 * @throws IllegalStateException if the cache is not in a started state
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fqn</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fqn</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>flags</ParamName>
                    <ParamType>Flag</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNode</MethodName>
            <MethodComment>/** 
 * A convenience method to retrieve a node directly from the cache.  Equivalent to calling cache.getRoot().getChild(fqn).
 * @param fqn fqn of the node to retrieve
 * @return a Node object, or a null if the node does not exist.
 * @throws IllegalStateException if the cache is not in a started state
 */
</MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fqn</ParamName>
                    <ParamType>Fqn</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fqn</ParamName>
                    <ParamType>Fqn</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>flags</ParamName>
                    <ParamType>Flag</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNode</MethodName>
            <MethodComment>/** 
 * Convenience method that takes a string representation of an Fqn.  Otherwise identical to  {@link #getNode(Fqn)}
 * @param fqn string representation of the Fqn to retrieve
 * @return node, or null if the node does not exist
 * @throws IllegalStateException if the cache is not in a started state
 */
</MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fqn</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fqn</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>flags</ParamName>
                    <ParamType>Flag</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>get</MethodName>
            <MethodComment>/** 
 * Convenience method that allows for direct access to the data in a  {@link Node}.
 * @param fqn &lt;b&gt;&lt;i&gt;absolute&lt;/i&gt;&lt;/b&gt; {@link Fqn} to the {@link Node} to be accessed.
 * @param key key under which value is to be retrieved.
 * @return returns data held under specified key in {@link Node} denoted by specified Fqn.
 * @throws IllegalStateException if the cache is not in a started state
 */
</MethodComment>
            <ReturnType>V</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fqn</ParamName>
                    <ParamType>Fqn</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>get</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>V</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fqn</ParamName>
                    <ParamType>Fqn</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>flags</ParamName>
                    <ParamType>Flag</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>get</MethodName>
            <MethodComment>/** 
 * Convenience method that takes a string representation of an Fqn.  Otherwise identical to  {@link #get(Fqn,Object)}
 * @param fqn string representation of the Fqn to retrieve
 * @param key key to fetch
 * @return value, or null if the fqn does not exist.
 * @throws IllegalStateException if the cache is not in a started state
 */
</MethodComment>
            <ReturnType>V</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fqn</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>get</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>V</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fqn</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>flags</ParamName>
                    <ParamType>Flag</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>move</MethodName>
            <MethodComment>/** 
 * Moves a part of the cache to a different subtree. &lt;p/&gt; E.g.: &lt;p/&gt; assume a cache structure such as: &lt;p/&gt; &lt;pre&gt; /a/b/c /a/b/d /a/b/e &lt;p/&gt; &lt;p/&gt; Fqn f1 = Fqn.fromString("/a/b/c"); Fqn f2 = Fqn.fromString("/a/b/d"); &lt;p/&gt; cache.move(f1, f2); &lt;/pre&gt; &lt;p/&gt; Will result in: &lt;pre&gt; &lt;p/&gt; /a/b/d/c /a/b/e &lt;p/&gt; &lt;/pre&gt; &lt;p/&gt; and now &lt;p/&gt; &lt;pre&gt; Fqn f3 = Fqn.fromString("/a/b/e"); Fqn f4 = Fqn.fromString("/a"); cache.move(f3, f4); &lt;/pre&gt; &lt;p/&gt; will result in: &lt;pre&gt; /a/b/d/c /a/e &lt;/pre&gt; No-op if the node to be moved is the root node. &lt;p/&gt; &lt;b&gt;Note&lt;/b&gt;: As of 3.0.0 and when using MVCC locking, more specific behaviour is defined as follows: &lt;ul&gt; &lt;li&gt;A no-op if the node is moved unto itself.  E.g., &lt;tt&gt;move(fqn, fqn.getParent())&lt;/tt&gt; will not do anything.&lt;/li&gt; &lt;li&gt;If a target node does not exist it will be created silently, to be more consistent with other APIs such as &lt;tt&gt;put()&lt;/tt&gt; on a nonexistent node.&lt;/li&gt; &lt;li&gt;If the source node does not exist this is a no-op, to be more consistent with other APIs such as &lt;tt&gt;get()&lt;/tt&gt; on a nonexistent node.&lt;/li&gt; &lt;/ul&gt;
 * @param nodeToMove the Fqn of the node to move.
 * @param newParent  new location under which to attach the node being moved.
 * @throws NodeNotExistsException may throw one of these if the target node does not exist or if a different threadhas moved this node elsewhere already.
 * @throws IllegalStateException  if {@link Cache#getStatus()} would not return {@link ComponentStatus#RUNNING}.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>nodeToMove</ParamName>
                    <ParamType>Fqn</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>newParent</ParamName>
                    <ParamType>Fqn</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>NodeNotExistsException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>move</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>nodeToMove</ParamName>
                    <ParamType>Fqn</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>newParent</ParamName>
                    <ParamType>Fqn</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>flags</ParamName>
                    <ParamType>Flag</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>NodeNotExistsException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>move</MethodName>
            <MethodComment>/** 
 * Convenience method that takes in string representations of Fqns.  Otherwise identical to  {@link #move(Fqn,Fqn)}
 * @throws IllegalStateException if {@link Cache#getStatus()} would not return {@link ComponentStatus#RUNNING}.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>nodeToMove</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>newParent</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>NodeNotExistsException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>move</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>nodeToMove</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>newParent</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>flags</ParamName>
                    <ParamType>Flag</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>NodeNotExistsException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getData</MethodName>
            <MethodComment>/** 
 * Retrieves a defensively copied data map of the underlying node.  A convenience method to retrieving a node and getting data from the node directly.
 * @param fqn
 * @return map of data, or an empty map
 * @throws CacheException
 * @throws IllegalStateException if {@link Cache#getStatus()} would not return {@link ComponentStatus#RUNNING}.
 */
</MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fqn</ParamName>
                    <ParamType>Fqn</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getData</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fqn</ParamName>
                    <ParamType>Fqn</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>flags</ParamName>
                    <ParamType>Flag</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getKeys</MethodName>
            <MethodComment>/** 
 * Convenience method that takes in a String represenation of the Fqn.  Otherwise identical to  {@link #getKeys(Fqn)}.
 */
</MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fqn</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getKeys</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fqn</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>flags</ParamName>
                    <ParamType>Flag</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getKeys</MethodName>
            <MethodComment>/** 
 * Returns a set of attribute keys for the Fqn. Returns null if the node is not found, otherwise a Set. The set is a copy of the actual keys for this node. &lt;p/&gt; A convenience method to retrieving a node and getting keys from the node directly.
 * @param fqn name of the node
 * @throws IllegalStateException if {@link Cache#getStatus()} would not return {@link ComponentStatus#RUNNING}.
 */
</MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fqn</ParamName>
                    <ParamType>Fqn</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getKeys</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fqn</ParamName>
                    <ParamType>Fqn</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>flags</ParamName>
                    <ParamType>Flag</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clearData</MethodName>
            <MethodComment>/** 
 * Convenience method that takes in a String represenation of the Fqn.  Otherwise identical to  {@link #clearData(Fqn)}.
 * @throws IllegalStateException if {@link Cache#getStatus()} would not return {@link ComponentStatus#RUNNING}.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fqn</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clearData</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fqn</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>flags</ParamName>
                    <ParamType>Flag</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clearData</MethodName>
            <MethodComment>/** 
 * Removes the keys and properties from a named node. &lt;p/&gt; A convenience method to retrieving a node and getting keys from the node directly.
 * @param fqn name of the node
 * @throws IllegalStateException if {@link Cache#getStatus()} would not return {@link ComponentStatus#RUNNING}.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fqn</ParamName>
                    <ParamType>Fqn</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clearData</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fqn</ParamName>
                    <ParamType>Fqn</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>flags</ParamName>
                    <ParamType>Flag</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCache</MethodName>
            <MethodComment>/** 
 * @return a reference to the underlying cache instance
 */
</MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>exists</MethodName>
            <MethodComment>/** 
 * Tests if an Fqn exists.  Convenience method for  {@link #exists(Fqn)}
 * @param fqn string representation of an Fqn
 * @return true if the fqn exists, false otherwise
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fqn</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>exists</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fqn</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>flags</ParamName>
                    <ParamType>Flag</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>exists</MethodName>
            <MethodComment>/** 
 * Tests if an Fqn exists.
 * @param fqn Fqn to test
 * @return true if the fqn exists, false otherwise
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fqn</ParamName>
                    <ParamType>Fqn</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>exists</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fqn</ParamName>
                    <ParamType>Fqn</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>flags</ParamName>
                    <ParamType>Flag</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>