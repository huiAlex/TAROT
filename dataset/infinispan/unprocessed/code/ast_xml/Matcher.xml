<Class>
    <Id>327</Id>
    <Package>org.infinispan.objectfilter</Package>
    <ClassName>Matcher</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Matcher  /** 
 * An object matcher able to test a given object against multiple registered filters specified either as Ickle queries (a JP-QL subset with full-text support) or using the query DSL (see  {@link org.infinispan.query.dsl}). The matching filters are notified via a callback supplied when registering the filter. The filter will have to specify the fully qualified type name of the matching entity type because simple names cannot be easily resolved as it would happen in the case of an  {@link javax.persistence.EntityManager} which has knowledge of all types in advance and is able totranslate simple names to fully qualified names unambiguously. &lt;p&gt; Full-text predicates are not supported at the moment. &lt;p&gt; This is a low-level interface which should not be directly used by Infinispan users.
 * @author anistor@redhat.com
 * @since 7.0
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>registerFilter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>FilterSubscription</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>query</ParamName>
                    <ParamType>Query</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>callback</ParamName>
                    <ParamType>FilterCallback</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>eventType</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>registerFilter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>FilterSubscription</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>queryString</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>namedParameters</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>callback</ParamName>
                    <ParamType>FilterCallback</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>eventType</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>registerFilter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>FilterSubscription</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>queryString</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>callback</ParamName>
                    <ParamType>FilterCallback</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>eventType</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>registerFilter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>FilterSubscription</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>query</ParamName>
                    <ParamType>Query</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>callback</ParamName>
                    <ParamType>FilterCallback</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isDeltaFilter</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>eventType</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>registerFilter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>FilterSubscription</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>queryString</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>namedParameters</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>callback</ParamName>
                    <ParamType>FilterCallback</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isDeltaFilter</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>eventType</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>registerFilter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>FilterSubscription</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>queryString</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>callback</ParamName>
                    <ParamType>FilterCallback</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isDeltaFilter</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>eventType</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>unregisterFilter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>filterSubscription</ParamName>
                    <ParamType>FilterSubscription</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>match</MethodName>
            <MethodComment>/** 
 * Test the given instance against all the subscribed filters and notify all callbacks registered for instances of the same instance type. The  {@code isDelta} parameter of the callback will be {@code false}.
 * @param userContext an optional user provided object to be passed to matching subscribers along with the matchinginstance; can be  {@code null}
 * @param eventType   on optional event type discriminator that is matched against the event type specified when thefilter was registered; can be  {@code null}
 * @param instance    the object to test against the registered filters; never {@code null}
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>userContext</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>eventType</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>instance</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>matchDelta</MethodName>
            <MethodComment>/** 
 * Test two instances (which are actually before/after snapshots of the same instance) against all the subscribed filters and notify all callbacks registered for instances of the same instance type. The  {@code isDelta} parameterof the callback will be  {@code true}.
 * @param userContext an optional user provided object to be passed to matching subscribers along with the matchinginstance; can be  {@code null}
 * @param eventType   on optional event type discriminator that is matched against the event type specified when thefilter was registered; can be  {@code null}
 * @param instanceOld the 'before' object to test against the registered filters; never {@code null}
 * @param instanceNew the 'after' object to test against the registered filters; never {@code null}
 * @param joinEvent   the event to generate if the instance joins the matching set
 * @param updateEvent the event to generate if a matching instance is updated and continues to the match
 * @param leaveEvent  the event to generate if the instance leaves the matching set
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>userContext</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>eventType</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>instanceOld</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>instanceNew</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>joinEvent</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>updateEvent</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>leaveEvent</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getObjectFilter</MethodName>
            <MethodComment>/** 
 * Obtains an ObjectFilter instance that is capable of testing a single filter condition.
 * @param filterSubscription a filter subscription previously registered with this Matcher; the newly createdObjectFilter will be based on the same filter condition
 * @return the single-filter
 */
</MethodComment>
            <ReturnType>ObjectFilter</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>filterSubscription</ParamName>
                    <ParamType>FilterSubscription</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getObjectFilter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ObjectFilter</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>query</ParamName>
                    <ParamType>Query</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getObjectFilter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ObjectFilter</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>queryString</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getObjectFilter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ObjectFilter</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>queryString</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>acc</ParamName>
                    <ParamType>FieldAccumulator</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>