<Class>
    <Id>2218</Id>
    <Package>org.infinispan.functional.impl</Package>
    <ClassName>Params</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Params  /** 
 * Internal class that encapsulates collection of parameters used to tweak functional map operations. &lt;p&gt;Internally, parameters are stored in an array which is indexed by a parameter's  {@link Param#id()}&lt;p&gt;All parameters have default values which are stored in a static array field in  {@link Params} class, which are used to as base collectionwhen adding or overriding parameters.
 * @since 8.0
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>DEFAULTS</FieldName>
            <FieldType>Param&lt;?&gt;[]</FieldType>
        </Field>
        <Field>
            <FieldName>DEFAULT_INSTANCE</FieldName>
            <FieldType>Params</FieldType>
        </Field>
        <Field>
            <FieldName>params</FieldName>
            <FieldType>Param&lt;?&gt;[]</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>Params</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>params</ParamName>
                    <ParamType>Param&lt;?&gt;[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>containsAll</MethodName>
            <MethodComment>/** 
 * Checks whether all the parameters passed in are already present in the current parameters. This method can be used to optimise the decision on whether the parameters collection needs updating at all.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ps</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;Param&lt;?&gt;&gt; [paramsToCheck=Arrays.asList(ps)]</InnerVar>
                <InnerVar>List&lt;Param&lt;?&gt;&gt; [paramsCurrent=Arrays.asList(params)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addAll</MethodName>
            <MethodComment>/** 
 * Adds all parameters and returns a new parameter collection.
 */
</MethodComment>
            <ReturnType>Params</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ps</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;Param&lt;?&gt;&gt; [paramsToAdd=Arrays.asList(ps)]</InnerVar>
                <InnerVar>Param&lt;?&gt;[] [paramsAll=Arrays.copyOf(params,params.length)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>paramsToAdd;forEach;[p -&gt; paramsAll[p.id()]=p]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addAll</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Params</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ps</ParamName>
                    <ParamType>Params</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Param&lt;?&gt;[] [paramsAll=Arrays.copyOf(params,params.length)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>get</MethodName>
            <MethodComment>/** 
 * Retrieve a param given its identifier. Callers are expected to know the exact type of parameter that will be returned. Such assumption is possible because as indicated in  {@link Param} implementations willonly come from Infinispan itself.
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>index</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toFlagsBitSet</MethodName>
            <MethodComment>/** 
 * Bridging method between flags and params, provided for efficient checks.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>PersistenceMode [persistenceMode=(PersistenceMode)params[PersistenceMode.ID].get()]</InnerVar>
                <InnerVar>LockingMode [lockingMode=(LockingMode)params[LockingMode.ID].get()]</InnerVar>
                <InnerVar>ExecutionMode [executionMode=(ExecutionMode)params[ExecutionMode.ID].get()]</InnerVar>
                <InnerVar>long [flagsBitSet=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fromFlagsBitSet</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Params</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>flagsBitSet</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Params [params=create()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>create</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Params</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>from</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Params</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ps</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;Param&lt;?&gt;&gt; [paramsToAdd=Arrays.asList(ps)]</InnerVar>
                <InnerVar>List&lt;Param&lt;?&gt;&gt; [paramsDefaults=Arrays.asList(DEFAULTS)]</InnerVar>
                <InnerVar>Param&lt;?&gt;[] [paramsAll=Arrays.copyOf(DEFAULTS,DEFAULTS.length)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>paramsToAdd;forEach;[p -&gt; paramsAll[p.id()]=p]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeObject</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>output</ParamName>
                    <ParamType>ObjectOutput</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>params</ParamName>
                    <ParamType>Params</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PersistenceMode [persistenceMode=(PersistenceMode)params.get(PersistenceMode.ID).get()]</InnerVar>
                <InnerVar>LockingMode [lockingMode=(LockingMode)params.get(LockingMode.ID).get()]</InnerVar>
                <InnerVar>ExecutionMode [executionMode=(ExecutionMode)params.get(ExecutionMode.ID).get()]</InnerVar>
                <InnerVar>int [paramBits=persistenceMode.ordinal() | (lockingMode.ordinal() &lt;&lt; 1) | (executionMode.ordinal() &lt;&lt; 2)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>output;writeByte;[paramBits]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readObject</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Params</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>ObjectInput</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [paramBits=input.readByte()]</InnerVar>
                <InnerVar>PersistenceMode [persistenceMode=PersistenceMode.valueOf(paramBits &amp; 1)]</InnerVar>
                <InnerVar>LockingMode [lockingMode=LockingMode.valueOf((paramBits &gt;&gt;&gt; 1) &amp; 1)]</InnerVar>
                <InnerVar>ExecutionMode [executionMode=ExecutionMode.valueOf((paramBits &gt;&gt;&gt; 2) &amp; 3)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>ClassNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>