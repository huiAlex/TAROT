<Class>
    <Id>3883</Id>
    <Package>org.infinispan.transaction.tm</Package>
    <ClassName>DummyTransaction</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Transaction</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>DummyTransaction  /** 
 * @author bela
 * @since 4.0
 * @deprecated use {@link EmbeddedTransaction}
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>trace</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>FORCE_ROLLBACK_MESSAGE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>xid</FieldName>
            <FieldType>Xid</FieldType>
        </Field>
        <Field>
            <FieldName>status</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>syncs</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>syncs</FieldName>
            <FieldType>Synchronization</FieldType>
        </Field>
        <Field>
            <FieldName>resources</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>resources</FieldName>
            <FieldType>Map.Entry&lt;XAResource,Integer&gt;</FieldType>
        </Field>
        <Field>
            <FieldName>firstRollbackException</FieldName>
            <FieldType>RollbackException</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>DummyTransaction</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tm</ParamName>
                    <ParamType>DummyBaseTransactionManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isRollbackCode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ex</ParamName>
                    <ParamType>XAException</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newRollbackException</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>RollbackException</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>message</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cause</ParamName>
                    <ParamType>Throwable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>RollbackException [exception=new RollbackException(message)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>exception;initCause;[cause]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>commit</MethodName>
            <MethodComment>/** 
 * Attempt to commit this transaction.
 * @throws RollbackException          If the transaction was marked for rollback only, the transaction is rolled backand this exception is thrown.
 * @throws SystemException            If the transaction service fails in an unexpected way.
 * @throws HeuristicMixedException    If a heuristic decision was made and some some parts of the transaction havebeen committed while other parts have been rolled back.
 * @throws HeuristicRollbackException If a heuristic decision to roll back the transaction was made.
 * @throws SecurityException          If the caller is not allowed to commit this transaction.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;runPrepare;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;runCommit;[false]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>RollbackException</ExceptionType>
                <ExceptionType>HeuristicMixedException</ExceptionType>
                <ExceptionType>HeuristicRollbackException</ExceptionType>
                <ExceptionType>SecurityException</ExceptionType>
                <ExceptionType>SystemException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rollback</MethodName>
            <MethodComment>/** 
 * Rolls back this transaction.
 * @throws IllegalStateException If the transaction is in a state where it cannot be rolled back. This could bebecause the transaction is no longer active, or because it is in the  {@link Status#STATUS_PREPARED prepared state}.
 * @throws SystemException       If the transaction service fails in an unexpected way.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IllegalStateException</ExceptionType>
                <ExceptionType>SystemException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setRollbackOnly</MethodName>
            <MethodComment>/** 
 * Mark the transaction so that the only possible outcome is a rollback.
 * @throws IllegalStateException If the transaction is not in an active state.
 * @throws SystemException       If the transaction service fails in an unexpected way.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;markRollbackOnly;[new RollbackException("Transaction marked as rollback only.")]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IllegalStateException</ExceptionType>
                <ExceptionType>SystemException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStatus</MethodName>
            <MethodComment>/** 
 * Get the status of the transaction.
 * @return The status of the transaction. This is one of the {@link Status} constants.
 * @throws SystemException If the transaction service fails in an unexpected way.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SystemException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>enlistResource</MethodName>
            <MethodComment>/** 
 * Enlist an XA resource with this transaction.
 * @return &lt;code&gt;true&lt;/code&gt; if the resource could be enlisted with this transaction, otherwise &lt;code&gt;false&lt;/code&gt;.
 * @throws RollbackException     If the transaction is marked for rollback only.
 * @throws IllegalStateException If the transaction is in a state where resources cannot be enlisted. This could bebecause the transaction is no longer active, or because it is in the  {@link Status#STATUS_PREPARED prepared state}.
 * @throws SystemException       If the transaction service fails in an unexpected way.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>resource</ParamName>
                    <ParamType>XAResource</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkStatusBeforeRegister;["resource"]</InnerMethodInvoke>
                <InnerMethodInvoke>resources;add;[new AbstractMap.SimpleEntry&lt;&gt;(resource,null)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>RollbackException</ExceptionType>
                <ExceptionType>IllegalStateException</ExceptionType>
                <ExceptionType>SystemException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>delistResource</MethodName>
            <MethodComment>/** 
 * De-list an XA resource from this transaction.
 * @return &lt;code&gt;true&lt;/code&gt; if the resource could be de-listed from this transaction, otherwise &lt;code&gt;false&lt;/code&gt;.
 * @throws IllegalStateException If the transaction is in a state where resources cannot be de-listed. This could bebecause the transaction is no longer active.
 * @throws SystemException       If the transaction service fails in an unexpected way.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xaRes</ParamName>
                    <ParamType>XAResource</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>flag</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IllegalStateException</ExceptionType>
                <ExceptionType>SystemException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>registerSynchronization</MethodName>
            <MethodComment>/** 
 * Register a  {@link Synchronization} callback with this transaction.
 * @throws RollbackException     If the transaction is marked for rollback only.
 * @throws IllegalStateException If the transaction is in a state where {@link Synchronization} callbacks cannot beregistered. This could be because the transaction is no longer active, or because it is in the  {@link Status#STATUS_PREPARED prepared state}.
 * @throws SystemException       If the transaction service fails in an unexpected way.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sync</ParamName>
                    <ParamType>Synchronization</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkStatusBeforeRegister;["synchronization"]</InnerMethodInvoke>
                <InnerMethodInvoke>syncs;add;[sync]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>RollbackException</ExceptionType>
                <ExceptionType>IllegalStateException</ExceptionType>
                <ExceptionType>SystemException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEnlistedResources</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>XAResource</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>runPrepare</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;notifyBeforeCompletion;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;endResources;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>runCommit</MethodName>
            <MethodComment>/** 
 * Runs the second phase of two-phase-commit protocol. If  {@code forceRollback} is {@code true}, then a  {@link RollbackException} is thrown with the message {@link #FORCE_ROLLBACK_MESSAGE}.
 * @param forceRollback force the transaction to rollback.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>forceRollback</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [notifyAfterStatus=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;throwRollbackExceptionIfAny;[forceRollback]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>HeuristicMixedException</ExceptionType>
                <ExceptionType>HeuristicRollbackException</ExceptionType>
                <ExceptionType>RollbackException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>firstEnlistedResource</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>XAResource</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getXid</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Xid</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEnlistedSynchronization</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Synchronization</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hashCode</MethodName>
            <MethodComment>/** 
 * Must be defined for increased performance
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>equals</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>obj</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>throwRollbackExceptionIfAny</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>forceRollback</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>RollbackException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>markRollbackOnly</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>e</ParamName>
                    <ParamType>RollbackException</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>finishResource</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>commit</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [ok=false]</InnerVar>
                <InnerVar>boolean [heuristic=false]</InnerVar>
                <InnerVar>boolean [error=false]</InnerVar>
                <InnerVar>Exception [cause=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>resources;clear;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>HeuristicRollbackException</ExceptionType>
                <ExceptionType>HeuristicMixedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>commitResources</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>HeuristicRollbackException</ExceptionType>
                <ExceptionType>HeuristicMixedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rollbackResources</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>HeuristicRollbackException</ExceptionType>
                <ExceptionType>HeuristicMixedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>notifyBeforeCompletion</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>notifyAfterCompletion</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>status</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>syncs;clear;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>endResources</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkStatusBeforeRegister</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>component</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>RollbackException</ExceptionType>
                <ExceptionType>IllegalStateException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isDone</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>