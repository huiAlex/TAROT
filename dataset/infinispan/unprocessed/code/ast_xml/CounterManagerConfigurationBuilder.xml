<Class>
    <Id>64</Id>
    <Package>org.infinispan.counter.configuration</Package>
    <ClassName>CounterManagerConfigurationBuilder</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Builder</SuperInterface>
        <SuperInterface>CounterManagerConfiguration</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>CounterManagerConfigurationBuilder  /** 
 * The  {@link org.infinispan.counter.api.CounterManager} configuration builder.&lt;p&gt; It configures the number of owner and the  {@link Reliability} mode. It allow to configure the default counteravailable on startup.
 * @author Pedro Ruivo
 * @since 9.0
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>DEFAULT</FieldName>
            <FieldType>CounterManagerConfiguration</FieldType>
        </Field>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>attributes</FieldName>
            <FieldType>AttributeSet</FieldType>
        </Field>
        <Field>
            <FieldName>defaultCounters</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>defaultCounters</FieldName>
            <FieldType>AbstractCounterConfigurationBuilder</FieldType>
        </Field>
        <Field>
            <FieldName>builder</FieldName>
            <FieldType>GlobalConfigurationBuilder</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>CounterManagerConfigurationBuilder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>builder</ParamName>
                    <ParamType>GlobalConfigurationBuilder</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>defaultConfiguration</MethodName>
            <MethodComment>/** 
 * @return the default {@link CounterManagerConfiguration}.
 */
</MethodComment>
            <ReturnType>CounterManagerConfiguration</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>numOwner</MethodName>
            <MethodComment>/** 
 * Sets the number of copies of the counter's value available in the cluster. &lt;p&gt; A higher value will provide better availability at the cost of more expensive updates. &lt;p&gt; Default value is 2.
 * @param numOwners the number of copies.
 */
</MethodComment>
            <ReturnType>CounterManagerConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>numOwners</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>attributes.attribute(CounterManagerConfiguration.NUM_OWNERS);set;[numOwners]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reliability</MethodName>
            <MethodComment>/** 
 * Sets the  {@link Reliability} mode.&lt;p&gt; Default value is  {@link Reliability#AVAILABLE}.
 * @param reliability the {@link Reliability} mode.
 * @see Reliability
 */
</MethodComment>
            <ReturnType>CounterManagerConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>reliability</ParamName>
                    <ParamType>Reliability</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>attributes.attribute(CounterManagerConfiguration.RELIABILITY);set;[reliability]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addStrongCounter</MethodName>
            <MethodComment>/** 
 * @return a new {@link StrongCounterConfigurationBuilder} to configure a strong consistent counters.
 */
</MethodComment>
            <ReturnType>StrongCounterConfigurationBuilder</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>StrongCounterConfigurationBuilder [builder=new StrongCounterConfigurationBuilder(this)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>defaultCounters;add;[builder]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addWeakCounter</MethodName>
            <MethodComment>/** 
 * @return a new {@link WeakCounterConfigurationBuilder} to configure weak consistent counters.
 */
</MethodComment>
            <ReturnType>WeakCounterConfigurationBuilder</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>WeakCounterConfigurationBuilder [builder=new WeakCounterConfigurationBuilder(this)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>defaultCounters;add;[builder]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>validate</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Set&lt;String&gt; [counterNames=new HashSet&lt;&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>attributes.attributes();forEach;[Attribute::validate]</InnerMethodInvoke>
                <InnerMethodInvoke>defaultCounters;forEach;[AbstractCounterConfigurationBuilder::validate]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>create</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>CounterManagerConfiguration</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>List&lt;AbstractCounterConfiguration&gt; [counters=new ArrayList&lt;&gt;(defaultCounters.size())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>read</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>template</ParamName>
                    <ParamType>CounterManagerConfiguration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.attributes;read;[template.attributes()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clearCounters</MethodName>
            <MethodComment>/** 
 * Clears all the configured counters.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>defaultCounters;clear;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isGlobalStateEnabled</MethodName>
            <MethodComment>/** 
 * @return {@code true} if global state is enabled, {@link false} otherwise.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>