<Class>
    <Id>3862</Id>
    <Package>org.infinispan.context</Package>
    <ClassName>InvocationContextFactory</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>InvocationContextFactory  /** 
 * Factory for  {@link InvocationContext} objects.
 * @author Manik Surtani (manik AT infinispan DOT org)
 * @author Mircea.Markus@jboss.com
 * @author Dan Berindei
 * @since 7.0
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>UNBOUNDED</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>createInvocationContext</MethodName>
            <MethodComment>/** 
 * If we are in a tx scope this will return an  {@link org.infinispan.context.impl.TxInvocationContext}. Otherwise it will return an  {@link org.infinispan.context.impl.NonTxInvocationContext}. Either way, both context will be marked as local, i.e.  {@link org.infinispan.context.InvocationContext#isOriginLocal()} will be true.
 */
</MethodComment>
            <ReturnType>InvocationContext</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>isWrite</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>keyCount</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createInvocationContext</MethodName>
            <MethodComment>/** 
 * Creates an invocation context
 */
</MethodComment>
            <ReturnType>InvocationContext</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tx</ParamName>
                    <ParamType>Transaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>implicitTransaction</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createNonTxInvocationContext</MethodName>
            <MethodComment>/** 
 * Will create an  {@link org.infinispan.context.impl.NonTxInvocationContext} with the {@link org.infinispan.context.impl.NonTxInvocationContext#isOriginLocal()} returning true.
 */
</MethodComment>
            <ReturnType>NonTxInvocationContext</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createSingleKeyNonTxInvocationContext</MethodName>
            <MethodComment>/** 
 * Will create an  {@link org.infinispan.context.impl.NonTxInvocationContext} with the {@link org.infinispan.context.impl.NonTxInvocationContext#isOriginLocal()} returning true.
 */
</MethodComment>
            <ReturnType>InvocationContext</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createClearNonTxInvocationContext</MethodName>
            <MethodComment>/** 
 * Will create an  {@link ClearInvocationContext} with the {@link ClearInvocationContext#isOriginLocal()} returning true.
 */
</MethodComment>
            <ReturnType>InvocationContext</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createTxInvocationContext</MethodName>
            <MethodComment>/** 
 * Returns a  {@link org.infinispan.context.impl.LocalTxInvocationContext}.
 */
</MethodComment>
            <ReturnType>LocalTxInvocationContext</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>localTransaction</ParamName>
                    <ParamType>LocalTransaction</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createRemoteTxInvocationContext</MethodName>
            <MethodComment>/** 
 * Returns an  {@link org.infinispan.context.impl.RemoteTxInvocationContext}.
 * @param tx remote transaction
 * @param origin the origin of the command, or null if local
 */
</MethodComment>
            <ReturnType>RemoteTxInvocationContext</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tx</ParamName>
                    <ParamType>RemoteTransaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>origin</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createRemoteInvocationContext</MethodName>
            <MethodComment>/** 
 * Returns an  {@link org.infinispan.context.impl.NonTxInvocationContext} whose {@link org.infinispan.context.impl.NonTxInvocationContext#isOriginLocal()} flag will be true.
 * @param origin the origin of the command, or null if local
 */
</MethodComment>
            <ReturnType>InvocationContext</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>origin</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createRemoteInvocationContextForCommand</MethodName>
            <MethodComment>/** 
 * As  {@link #createRemoteInvocationContext(org.infinispan.remoting.transport.Address)}, but returning the flags to the context from the Command if any Flag was set.
 * @param cacheCommand the remote command
 * @param origin       the origin of the command, or null if local
 */
</MethodComment>
            <ReturnType>InvocationContext</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheCommand</ParamName>
                    <ParamType>VisitableCommand</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>origin</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>