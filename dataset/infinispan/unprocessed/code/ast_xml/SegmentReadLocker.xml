<Class>
    <Id>274</Id>
    <Package>org.infinispan.lucene.readlocks</Package>
    <ClassName>SegmentReadLocker</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>SegmentReadLocker  /** 
 * &lt;p&gt;SegmentReadLocker implementations have to make sure that segments are not deleted while they are being used by an IndexReader.&lt;/p&gt; &lt;p&gt;When an  {@link org.infinispan.lucene.impl.InfinispanIndexInput} is opened on a file which is split in smaller chunks,{@link #acquireReadLock(String)} is invoked; then the {@link #deleteOrReleaseReadLock(String)} isinvoked when the stream is closed.&lt;/p&gt; &lt;p&gt;The same  {@link #deleteOrReleaseReadLock(String)} is invoked when a file is deleted, so if this invocation is not balancinga lock acquire this implementation must delete all segment chunks and the associated metadata.&lt;/p&gt; &lt;p&gt;Note that if you can use and tune the  {@link org.apache.lucene.index.LogByteSizeMergePolicy} you could avoid the needfor readlocks by setting a maximum segment size to equal the chunk size used by the InfinispanDirectory; readlocks will be skipped automatically when not needed, so it's advisable to still configure an appropriate SegmentReadLocker for the cases you might want to tune the chunk size.&lt;/p&gt;
 * @author Sanne Grinovero
 * @since 4.1
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>deleteOrReleaseReadLock</MethodName>
            <MethodComment>/** 
 * It will release a previously acquired readLock, or if no readLock was acquired it will mark the file to be deleted as soon as all pending locks are releases. If it's invoked on a file without pending locks the file is deleted.
 * @param fileName of the file to release or delete
 * @see org.apache.lucene.store.Directory#deleteFile(String)
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fileName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>acquireReadLock</MethodName>
            <MethodComment>/** 
 * Acquires a readlock, in order to prevent other invocations to  {@link #deleteOrReleaseReadLock(String)}from deleting the file.
 * @param filename of the file to acquire the lock at
 * @return true if the lock was acquired, false if the implementationdetects the file does not exist, or that it's being deleted by some other thread.
 * @see org.apache.lucene.store.Directory#openInput
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>filename</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>