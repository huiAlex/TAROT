<Class>
    <Id>1277</Id>
    <Package>org.infinispan.commons.hash</Package>
    <ClassName>Hash</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Hash  /** 
 * Interface that governs implementations
 * @author Manik Surtani
 * @author Patrick McFarland
 * @see MurmurHash2
 * @see MurmurHash3
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>hash</MethodName>
            <MethodComment>/** 
 * Hashes a byte array efficiently.
 * @param payload a byte array to hash
 * @return a hash code for the byte array
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>payload</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hash</MethodName>
            <MethodComment>/** 
 * An incremental version of the hash function, that spreads a pre-calculated hash code, such as one derived from  {@link Object#hashCode()}.
 * @param hashcode an object's hashcode
 * @return a spread and hashed version of the hashcode
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>hashcode</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hash</MethodName>
            <MethodComment>/** 
 * A helper that calculates the hashcode of an object, choosing the optimal mechanism of hash calculation after considering the type of the object (byte array, String or Object).
 * @param o object to hash
 * @return a hashcode
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>o</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>