<Class>
    <Id>1391</Id>
    <Package>org.infinispan.distribution</Package>
    <ClassName>LocalizedCacheTopology</ClassName>
    <SuperClass>CacheTopology</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>LocalizedCacheTopology  /** 
 * Extends  {@link CacheTopology} with information about keys owned by the local node.
 * @author Dan Berindei
 * @since 9.0
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>localAddress</FieldName>
            <FieldType>Address</FieldType>
        </Field>
        <Field>
            <FieldName>keyPartitioner</FieldName>
            <FieldType>KeyPartitioner</FieldType>
        </Field>
        <Field>
            <FieldName>isDistributed</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>allLocal</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>isSegmented</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>numSegments</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>maxOwners</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>distributionInfos</FieldName>
            <FieldType>DistributionInfo[]</FieldType>
        </Field>
        <Field>
            <FieldName>isScattered</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>makeSingletonTopology</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>LocalizedCacheTopology</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheMode</ParamName>
                    <ParamType>CacheMode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>localAddress</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;Address&gt; [members=Collections.singletonList(localAddress)]</InnerVar>
                <InnerVar>ConsistentHash [ch=new ReplicatedConsistentHash(MurmurHash3.getInstance(),members,new int[]{0})]</InnerVar>
                <InnerVar>CacheTopology [cacheTopology=new CacheTopology(0,0,ch,null,Phase.NO_REBALANCE,members,null)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>LocalizedCacheTopology</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheMode</ParamName>
                    <ParamType>CacheMode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cacheTopology</ParamName>
                    <ParamType>CacheTopology</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>keyPartitioner</ParamName>
                    <ParamType>KeyPartitioner</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>localAddress</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ConsistentHash [readCH=getReadConsistentHash()]</InnerVar>
                <InnerVar>ConsistentHash [writeCH=getWriteConsistentHash()]</InnerVar>
                <InnerVar>boolean [isReplicated=cacheMode.isReplicated()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isReadOwner</MethodName>
            <MethodComment>/** 
 * @return {@code true} iff key {@code key} can be read without going remote.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [segmentId=keyPartitioner.getSegment(key)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isWriteOwner</MethodName>
            <MethodComment>/** 
 * @return {@code true} iff writing a value for key {@code key} will update it on the local node.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [segmentId=keyPartitioner.getSegment(key)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSegment</MethodName>
            <MethodComment>/** 
 * @return The consistent hash segment of key {@code key}
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDistributionForSegment</MethodName>
            <MethodComment>/** 
 * @return Information about the ownership of segment {@code segment}, including the primary owner.
 */
</MethodComment>
            <ReturnType>DistributionInfo</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>segmentId</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDistribution</MethodName>
            <MethodComment>/** 
 * @return Information about the ownership of key {@code key}, including the primary owner.
 */
</MethodComment>
            <ReturnType>DistributionInfo</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [segmentId=isSegmented ? keyPartitioner.getSegment(key) : 0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getWriteOwners</MethodName>
            <MethodComment>/** 
 * @return An unordered collection with the write owners of {@code key}.
 */
</MethodComment>
            <ReturnType>Address</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [segmentId=isDistributed || isScattered ? keyPartitioner.getSegment(key) : 0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getWriteOwners</MethodName>
            <MethodComment>/** 
 * @return An unordered collection with the write owners of {@code keys}.
 */
</MethodComment>
            <ReturnType>Address</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>keys</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLocalAddress</MethodName>
            <MethodComment>/** 
 * @return The address of the local node.
 */
</MethodComment>
            <ReturnType>Address</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>