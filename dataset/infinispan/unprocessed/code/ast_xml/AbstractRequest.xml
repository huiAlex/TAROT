<Class>
    <Id>3288</Id>
    <Package>org.infinispan.remoting.transport</Package>
    <ClassName>AbstractRequest</ClassName>
    <SuperClass>CompletableFuture</SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Callable</SuperInterface>
        <SuperInterface>Void</SuperInterface>
        <SuperInterface>Request</SuperInterface>
        <SuperInterface>T</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>AbstractRequest  /** 
 * A remote invocation request. &lt;p&gt;Thread-safety: This class and its sub-classes are thread-safe. They use the  {@code ResponseCollector}'s monitor for synchronization, so that collectors usually don't need any explicit synchronization.&lt;/p&gt;
 * @author Dan Berindei
 * @since 9.1
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>responseCollector</FieldName>
            <FieldType>ResponseCollector</FieldType>
        </Field>
        <Field>
            <FieldName>responseCollector</FieldName>
            <FieldType>T</FieldType>
        </Field>
        <Field>
            <FieldName>requestId</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>repository</FieldName>
            <FieldType>RequestRepository</FieldType>
        </Field>
        <Field>
            <FieldName>timeoutFuture</FieldName>
            <FieldType>Future</FieldType>
        </Field>
        <Field>
            <FieldName>timeoutFuture</FieldName>
            <FieldType>?</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>AbstractRequest</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>requestId</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>responseCollector</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>repository</ParamName>
                    <ParamType>RequestRepository</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onTimeout</MethodName>
            <MethodComment>/** 
 * Called when the timeout task scheduled with  {@link #setTimeout(ScheduledExecutorService,long,TimeUnit)} expires.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRequestId</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setTimeout</MethodName>
            <MethodComment>/** 
 * Schedule a timeout task on the given executor, and complete the request with a  {@link org.infinispan.util.concurrent.TimeoutException}when the task runs. If a timeout task was already registered with this request, it is cancelled.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>timeoutExecutor</ParamName>
                    <ParamType>ScheduledExecutorService</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>timeout</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>unit</ParamName>
                    <ParamType>TimeUnit</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ScheduledFuture&lt;Void&gt; [timeoutFuture=timeoutExecutor.schedule(this,timeout,unit)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;cancelTimeoutTask;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setTimeoutFuture;[timeoutFuture]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cancel</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>exception</ParamName>
                    <ParamType>Exception</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;completeExceptionally;[exception]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>complete</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;cancelTimeoutTask;[]</InnerMethodInvoke>
                <InnerMethodInvoke>repository;removeRequest;[requestId]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>completeExceptionally</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ex</ParamName>
                    <ParamType>Throwable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;cancelTimeoutTask;[]</InnerMethodInvoke>
                <InnerMethodInvoke>repository;removeRequest;[requestId]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cancel</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mayInterruptIfRunning</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;cancelTimeoutTask;[]</InnerMethodInvoke>
                <InnerMethodInvoke>repository;removeRequest;[requestId]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>call</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;onTimeout;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setTimeoutFuture</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>timeoutFuture</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cancelTimeoutTask</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>