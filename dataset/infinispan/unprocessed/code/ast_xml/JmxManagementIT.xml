<Class>
    <Id>1314</Id>
    <Package>org.infinispan.server.test.jmx.management</Package>
    <ClassName>JmxManagementIT</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>JmxManagementIT  /** 
 * Test that JMX statistics/operations are available for an Infinispan server instance. &lt;p/&gt; TODO: operations/attributes of Transactions MBean  - Transactions are only available in embedded mode (to be impl. for HotRod later: ISPN-375) &lt;p/&gt; operations/attributes of RecoveryAdmin MBean - the same as above
 * @author &lt;a href="mailto:mgencur@redhat.com"&gt;Martin Gencur&lt;/a&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>JMX_DOMAIN</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>distCachePrefix</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>memcachedCachePrefix</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>distCacheMBean</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>distributionManagerMBean</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>distributionStateTransferManagerMBean</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>lockManagerMBean</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>rpcManagerMBean</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>distCacheStatisticsMBean</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>memcachedCacheStatisticsMBean</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>newExtraCacheMBean</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>managerPrefix</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>cacheManagerMBean</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>hotRodServerMBean</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>memCachedServerMBean</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>protocolMBeanPrefix</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>server1</FieldName>
            <FieldType>RemoteInfinispanServer</FieldType>
        </Field>
        <Field>
            <FieldName>server2</FieldName>
            <FieldType>RemoteInfinispanServer</FieldType>
        </Field>
        <Field>
            <FieldName>provider</FieldName>
            <FieldType>MBeanServerConnectionProvider</FieldType>
        </Field>
        <Field>
            <FieldName>provider2</FieldName>
            <FieldType>MBeanServerConnectionProvider</FieldType>
        </Field>
        <Field>
            <FieldName>manager</FieldName>
            <FieldType>RemoteCacheManager</FieldType>
        </Field>
        <Field>
            <FieldName>distCache</FieldName>
            <FieldType>RemoteCache</FieldType>
        </Field>
        <Field>
            <FieldName>mc</FieldName>
            <FieldType>MemcachedClient</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>setUp</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;resetCacheStatistics;[]</InnerMethodInvoke>
                <InnerMethodInvoke>distCache;clear;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>resetCacheStatistics</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;invokeOperation;[provider, memcachedCacheStatisticsMBean, "resetStatistics", null, null]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNumberOfGlobalConnections</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>provider</ParamName>
                    <ParamType>MBeanServerConnectionProvider</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mbean</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNumberOfLocalConnections</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>provider</ParamName>
                    <ParamType>MBeanServerConnectionProvider</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mbean</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testHotRodConnectionCount</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [initialLocal=getNumberOfLocalConnections(provider,hotRodServerMBean)]</InnerVar>
                <InnerVar>int [initialGlobal=getNumberOfGlobalConnections(provider,hotRodServerMBean)]</InnerVar>
                <InnerVar>Configuration [conf=new ConfigurationBuilder().addServer().host(server1.getHotrodEndpoint().getInetAddress().getHostAddress()).port(server1.getHotrodEndpoint().getPort()).build()]</InnerVar>
                <InnerVar>RemoteCacheManager [manager2=new RemoteCacheManager(conf)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertEquals;["Number of global connections obtained from node1 and node2 is not the same", initialGlobal, getNumberOfGlobalConnections(provider2,hotRodServerMBean)]</InnerMethodInvoke>
                <InnerMethodInvoke>manager2.getCache();put;["key", "value"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[initialLocal + 1, getNumberOfLocalConnections(provider,hotRodServerMBean)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[initialGlobal + 2, getNumberOfGlobalConnections(provider,hotRodServerMBean)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[initialGlobal + 2, getNumberOfGlobalConnections(provider2,hotRodServerMBean)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testMemCachedConnectionCount</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [initialLocal=getNumberOfLocalConnections(provider,memCachedServerMBean)]</InnerVar>
                <InnerVar>int [initialGlobal=getNumberOfGlobalConnections(provider,memCachedServerMBean)]</InnerVar>
                <InnerVar>MemcachedClient [mc2=new MemcachedClient("UTF-8",server1.getMemcachedEndpoint().getInetAddress().getHostName(),server1.getMemcachedEndpoint().getPort(),10000)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertEquals;["Number of global connections obtained from node1 and node2 is not the same", initialGlobal, getNumberOfGlobalConnections(provider2,memCachedServerMBean)]</InnerMethodInvoke>
                <InnerMethodInvoke>mc2;set;["key", "value"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[initialLocal + 1, getNumberOfLocalConnections(provider,memCachedServerMBean)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[initialGlobal + 1, getNumberOfGlobalConnections(provider,memCachedServerMBean)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[initialGlobal + 1, getNumberOfGlobalConnections(provider2,memCachedServerMBean)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testHotRodServerAttributes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>distCache;put;["key1", new byte[]{1,2,3,4,5}]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotEquals;[0, Integer.parseInt(getAttribute(provider,hotRodServerMBean,"TotalBytesRead"))]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotEquals;[0, Integer.parseInt(getAttribute(provider,hotRodServerMBean,"TotalBytesWritten"))]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[11222, Integer.parseInt(getAttribute(provider,hotRodServerMBean,"Port"))]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[Boolean.TRUE, Boolean.parseBoolean(getAttribute(provider,hotRodServerMBean,"tcpNoDelay"))]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[0, Integer.parseInt(getAttribute(provider,hotRodServerMBean,"ReceiveBufferSize"))]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[-1, Integer.parseInt(getAttribute(provider,hotRodServerMBean,"IdleTimeout"))]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[0, Integer.parseInt(getAttribute(provider,hotRodServerMBean,"SendBufferSize"))]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotEquals;[0, Integer.parseInt(getAttribute(provider,hotRodServerMBean,"NumberWorkerThreads"))]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotEquals;[0, getAttribute(provider,hotRodServerMBean,"HostName").length()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testMemcachedServerAttributes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;set;["key1", "value1"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotEquals;[0, Integer.parseInt(getAttribute(provider,memCachedServerMBean,"TotalBytesRead"))]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotEquals;[0, Integer.parseInt(getAttribute(provider,memCachedServerMBean,"TotalBytesWritten"))]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[11211, Integer.parseInt(getAttribute(provider,memCachedServerMBean,"Port"))]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[Boolean.TRUE, Boolean.parseBoolean(getAttribute(provider,memCachedServerMBean,"tcpNoDelay"))]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[0, Integer.parseInt(getAttribute(provider,memCachedServerMBean,"ReceiveBufferSize"))]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[-1, Integer.parseInt(getAttribute(provider,memCachedServerMBean,"IdleTimeout"))]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[0, Integer.parseInt(getAttribute(provider,memCachedServerMBean,"SendBufferSize"))]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotEquals;[0, Integer.parseInt(getAttribute(provider,memCachedServerMBean,"NumberWorkerThreads"))]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotEquals;[0, getAttribute(provider,memCachedServerMBean,"HostName").length()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testCacheManagerAttributes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [names=getAttribute(provider,cacheManagerMBean,"DefinedCacheNames")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertEquals;[2, Integer.parseInt(getAttribute(provider,cacheManagerMBean,"CreatedCacheCount"))]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[4, Integer.parseInt(getAttribute(provider,cacheManagerMBean,"DefinedCacheCount"))]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["clustered", getAttribute(provider,cacheManagerMBean,"Name")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[2, Integer.parseInt(getAttribute(provider,cacheManagerMBean,"ClusterSize"))]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["RUNNING", getAttribute(provider,cacheManagerMBean,"CacheManagerStatus")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotEquals;[0, getAttribute(provider,cacheManagerMBean,"ClusterMembers").length()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotEquals;[0, getAttribute(provider,cacheManagerMBean,"NodeAddress").length()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[2, Integer.parseInt(getAttribute(provider,cacheManagerMBean,"RunningCacheCount"))]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotEquals;[0, getAttribute(provider,cacheManagerMBean,"PhysicalAddresses").length()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[Version.getVersion(), getAttribute(provider,cacheManagerMBean,"Version")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;[names.contains("default") &amp;&amp; names.contains("memcachedCache")]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testDefaultCacheAttributes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertTrue;[getAttribute(provider,distCacheMBean,"CacheName").contains("default")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["RUNNING", getAttribute(provider,distCacheMBean,"CacheStatus")]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testDefaultCacheOperations</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertEquals;["RUNNING", getAttribute(provider,distCacheMBean,"CacheStatus")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;invokeOperation;[provider, distCacheMBean, "stop", null, null]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["TERMINATED", getAttribute(provider,distCacheMBean,"CacheStatus")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;invokeOperation;[provider, distCacheMBean, "start", null, null]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["RUNNING", getAttribute(provider,distCacheMBean,"CacheStatus")]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testDistributionStateTransferManagerAttributes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertEquals;[Boolean.FALSE, Boolean.parseBoolean(getAttribute(provider,distributionStateTransferManagerMBean,"StateTransferInProgress"))]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[Boolean.TRUE, Boolean.parseBoolean(getAttribute(provider,distributionStateTransferManagerMBean,"JoinComplete"))]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testDistributionManagerOperations</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Object [keyLocation=invokeOperation(provider,distributionManagerMBean,"locateKey",new Object[]{"key1"},new String[]{"java.lang.String"})]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>distCache;put;["key2", "value1"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[Boolean.FALSE, Boolean.parseBoolean(invokeOperation(provider,distributionManagerMBean,"isAffectedByRehash",new Object[]{"key2"},new String[]{"java.lang.Object"}).toString())]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[Boolean.TRUE, Boolean.parseBoolean(invokeOperation(provider,distributionManagerMBean,"isLocatedLocally",new Object[]{"key2"},new String[]{"java.lang.String"}).toString())]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;[keyLocation instanceof List]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testLockManagerAttributes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertEquals;[0, Integer.parseInt(getAttribute(provider,lockManagerMBean,"NumberOfLocksHeld"))]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[0, Integer.parseInt(getAttribute(provider,lockManagerMBean,"NumberOfLocksAvailable"))]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[1000, Integer.parseInt(getAttribute(provider,lockManagerMBean,"ConcurrencyLevel"))]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testCacheStatisticsAttributes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;set;["key1", "value1"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;set;["key2", "value2"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;get;["key1"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[2, Integer.parseInt(getAttribute(provider,memcachedCacheStatisticsMBean,"NumberOfEntries"))]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[1, Integer.parseInt(getAttribute(provider,memcachedCacheStatisticsMBean,"NumberOfEntriesInMemory"))]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;delete;["key1"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[2, Integer.parseInt(getAttribute(provider,memcachedCacheStatisticsMBean,"Evictions"))]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[0, Integer.parseInt(getAttribute(provider,memcachedCacheStatisticsMBean,"RemoveMisses"))]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotEquals;[0.0, Double.parseDouble(getAttribute(provider,memcachedCacheStatisticsMBean,"ReadWriteRatio"))]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotEquals;[0, Integer.parseInt(getAttribute(provider,memcachedCacheStatisticsMBean,"Hits"))]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[Boolean.TRUE, Boolean.parseBoolean(getAttribute(provider,memcachedCacheStatisticsMBean,"StatisticsEnabled"))]</InnerMethodInvoke>
                <InnerMethodInvoke>null;sleepForSecs;[2]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotEquals;[0, Integer.parseInt(getAttribute(provider,memcachedCacheStatisticsMBean,"TimeSinceReset"))]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotEquals;[0, Integer.parseInt(getAttribute(provider,memcachedCacheStatisticsMBean,"ElapsedTime"))]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[0, Integer.parseInt(getAttribute(provider,memcachedCacheStatisticsMBean,"Misses"))]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotEquals;[0, Integer.parseInt(getAttribute(provider,memcachedCacheStatisticsMBean,"RemoveHits"))]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotEquals;[null, getAttribute(provider,memcachedCacheStatisticsMBean,"AverageWriteTime")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotEquals;[0, Integer.parseInt(getAttribute(provider,memcachedCacheStatisticsMBean,"Stores"))]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;[1.0 == Double.parseDouble(getAttribute(provider,memcachedCacheStatisticsMBean,"HitRatio"))]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotEquals;[null, getAttribute(provider,memcachedCacheStatisticsMBean,"AverageReadTime")]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testCacheStatisticsOperations</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;resetCacheStatistics;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;set;["key1", "value1"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[1, Integer.parseInt(getAttribute(provider,memcachedCacheStatisticsMBean,"Stores"))]</InnerMethodInvoke>
                <InnerMethodInvoke>null;resetCacheStatistics;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[0, Integer.parseInt(getAttribute(provider,memcachedCacheStatisticsMBean,"Stores"))]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testRpcManagerAttributes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>distCache;put;["key1", "value1"]</InnerMethodInvoke>
                <InnerMethodInvoke>distCache;put;["key2", "value2"]</InnerMethodInvoke>
                <InnerMethodInvoke>distCache;put;["key3", "value3"]</InnerMethodInvoke>
                <InnerMethodInvoke>Integer;parseInt;[getAttribute(provider,rpcManagerMBean,"AverageReplicationTime")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;[1.0 == Double.parseDouble(getAttribute(provider,rpcManagerMBean,"SuccessRatioFloatingPoint"))]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[0, Integer.parseInt(getAttribute(provider,rpcManagerMBean,"ReplicationFailures"))]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[Boolean.TRUE, Boolean.parseBoolean(getAttribute(provider,rpcManagerMBean,"StatisticsEnabled"))]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotEquals;[0, Integer.parseInt(getAttribute(provider,rpcManagerMBean,"ReplicationCount"))]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["100%", getAttribute(provider,rpcManagerMBean,"SuccessRatio")]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testRpcManagerOperations</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertNotEquals;[0, Integer.parseInt(getAttribute(provider,rpcManagerMBean,"ReplicationCount"))]</InnerMethodInvoke>
                <InnerMethodInvoke>null;invokeOperation;[provider, rpcManagerMBean, "resetStatistics", null, null]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[0, Integer.parseInt(getAttribute(provider,rpcManagerMBean,"ReplicationCount"))]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testJGroupsChannelMBeanAvailable</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertTrue;[provider.getConnection().isRegistered(new ObjectName("jgroups:type=channel,cluster=\"cluster\""))]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>