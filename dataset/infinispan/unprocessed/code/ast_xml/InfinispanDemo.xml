<Class>
    <Id>3838</Id>
    <Package>org.infinispan.demo</Package>
    <ClassName>InfinispanDemo</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>InfinispanDemo  /** 
 * Run it with -Djgroups.bind_addr=127.0.0.1 -Djava.net.preferIPv4Stack=true
 * @author Manik Surtani
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>frame</FieldName>
            <FieldType>JFrame</FieldType>
        </Field>
        <Field>
            <FieldName>mainPane</FieldName>
            <FieldType>JTabbedPane</FieldType>
        </Field>
        <Field>
            <FieldName>panel1</FieldName>
            <FieldType>JPanel</FieldType>
        </Field>
        <Field>
            <FieldName>cacheStatus</FieldName>
            <FieldType>JLabel</FieldType>
        </Field>
        <Field>
            <FieldName>dataGeneratorTab</FieldName>
            <FieldType>JPanel</FieldType>
        </Field>
        <Field>
            <FieldName>clusterViewTab</FieldName>
            <FieldType>JPanel</FieldType>
        </Field>
        <Field>
            <FieldName>dataViewTab</FieldName>
            <FieldType>JPanel</FieldType>
        </Field>
        <Field>
            <FieldName>controlPanelTab</FieldName>
            <FieldType>JPanel</FieldType>
        </Field>
        <Field>
            <FieldName>clusterTable</FieldName>
            <FieldType>JTable</FieldType>
        </Field>
        <Field>
            <FieldName>actionButton</FieldName>
            <FieldType>JButton</FieldType>
        </Field>
        <Field>
            <FieldName>configFileName</FieldName>
            <FieldType>JLabel</FieldType>
        </Field>
        <Field>
            <FieldName>cacheStatusProgressBar</FieldName>
            <FieldType>JProgressBar</FieldType>
        </Field>
        <Field>
            <FieldName>keyTextField</FieldName>
            <FieldType>JTextField</FieldType>
        </Field>
        <Field>
            <FieldName>valueTextField</FieldName>
            <FieldType>JTextField</FieldType>
        </Field>
        <Field>
            <FieldName>putEntryRadioButton</FieldName>
            <FieldType>JRadioButton</FieldType>
        </Field>
        <Field>
            <FieldName>removeEntryRadioButton</FieldName>
            <FieldType>JRadioButton</FieldType>
        </Field>
        <Field>
            <FieldName>getEntryRadioButton</FieldName>
            <FieldType>JRadioButton</FieldType>
        </Field>
        <Field>
            <FieldName>goButton</FieldName>
            <FieldType>JButton</FieldType>
        </Field>
        <Field>
            <FieldName>randomGeneratorButton</FieldName>
            <FieldType>JButton</FieldType>
        </Field>
        <Field>
            <FieldName>cacheClearButton</FieldName>
            <FieldType>JButton</FieldType>
        </Field>
        <Field>
            <FieldName>configFileContents</FieldName>
            <FieldType>JTextArea</FieldType>
        </Field>
        <Field>
            <FieldName>cacheConfigFile</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>cache</FieldName>
            <FieldType>Cache</FieldType>
        </Field>
        <Field>
            <FieldName>cache</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>startCacheButtonLabel</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>stopCacheButtonLabel</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>statusStarting</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>statusStarted</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>statusStopping</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>statusStopped</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>asyncExecutor</FieldName>
            <FieldType>ExecutorService</FieldType>
        </Field>
        <Field>
            <FieldName>tableUpdateExecutor</FieldName>
            <FieldType>ExecutorService</FieldType>
        </Field>
        <Field>
            <FieldName>dataTable</FieldName>
            <FieldType>JTable</FieldType>
        </Field>
        <Field>
            <FieldName>generateSlider</FieldName>
            <FieldType>JSlider</FieldType>
        </Field>
        <Field>
            <FieldName>lifespanSpinner</FieldName>
            <FieldType>JSpinner</FieldType>
        </Field>
        <Field>
            <FieldName>maxIdleSpinner</FieldName>
            <FieldType>JSpinner</FieldType>
        </Field>
        <Field>
            <FieldName>refreshButton</FieldName>
            <FieldType>JButton</FieldType>
        </Field>
        <Field>
            <FieldName>dataViewControlPanel</FieldName>
            <FieldType>JPanel</FieldType>
        </Field>
        <Field>
            <FieldName>cacheContentsSizeLabel</FieldName>
            <FieldType>JLabel</FieldType>
        </Field>
        <Field>
            <FieldName>r</FieldName>
            <FieldType>Random</FieldType>
        </Field>
        <Field>
            <FieldName>clusterTableModel</FieldName>
            <FieldType>ClusterTableModel</FieldType>
        </Field>
        <Field>
            <FieldName>cachedDataTableModel</FieldName>
            <FieldType>CachedDataTableModel</FieldType>
        </Field>
        <Field>
            <FieldName>cacheManager</FieldName>
            <FieldType>DefaultCacheManager</FieldType>
        </Field>
        <Field>
            <FieldName>c1</FieldName>
            <FieldType>Color</FieldType>
        </Field>
        <Field>
            <FieldName>c2</FieldName>
            <FieldType>Color</FieldType>
        </Field>
        <Field>
            <FieldName>members</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>members</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>memberStates</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>memberStates</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>serialVersionUID</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>data</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>data</FieldName>
            <FieldType>InternalCacheEntry</FieldType>
        </Field>
        <Field>
            <FieldName>serialVersionUID</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>key</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>value</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>lifespan</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>maxIdle</FieldName>
            <FieldType>long</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>main</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [cfgFileName=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>frame;setContentPane;[new InfinispanDemo(cfgFileName).panel1]</InnerMethodInvoke>
                <InnerMethodInvoke>frame;setDefaultCloseOperation;[JFrame.EXIT_ON_CLOSE]</InnerMethodInvoke>
                <InnerMethodInvoke>frame;pack;[]</InnerMethodInvoke>
                <InnerMethodInvoke>frame;setVisible;[true]</InnerMethodInvoke>
                <InnerMethodInvoke>frame;setResizable;[true]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>InfinispanDemo</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cfgFileName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cacheStatusProgressBar;setVisible;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>cacheStatusProgressBar;setEnabled;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>configFileName;setText;[cacheConfigFile]</InnerMethodInvoke>
                <InnerMethodInvoke>clusterTable;setModel;[clusterTableModel]</InnerMethodInvoke>
                <InnerMethodInvoke>dataTable;setModel;[cachedDataTableModel]</InnerMethodInvoke>
                <InnerMethodInvoke>actionButton;setText;[startCacheButtonLabel]</InnerMethodInvoke>
                <InnerMethodInvoke>cacheStatus;setText;[statusStopped]</InnerMethodInvoke>
                <InnerMethodInvoke>actionButton;addActionListener;[new ActionListener(){
  @Override public void actionPerformed(  ActionEvent e){
    if (actionButton.getText().equals(startCacheButtonLabel)) {
      startCache();
    }
 else     if (actionButton.getText().equals(stopCacheButtonLabel)) {
      stopCache();
    }
  }
}
]</InnerMethodInvoke>
                <InnerMethodInvoke>goButton;addActionListener;[new ActionListener(){
  @Override public void actionPerformed(  ActionEvent e){
    processAction(goButton,true);
    asyncExecutor.execute(new Runnable(){
      @Override public void run(){
        try {
          if (putEntryRadioButton.isSelected()) {
            cache.put(keyTextField.getText(),valueTextField.getText(),lifespan(),TimeUnit.MILLISECONDS,maxIdle(),TimeUnit.MILLISECONDS);
          }
 else           if (removeEntryRadioButton.isSelected()) {
            cache.remove(keyTextField.getText());
          }
 else           if (getEntryRadioButton.isSelected()) {
            cache.get(keyTextField.getText());
          }
        }
 catch (        Throwable t) {
        }
 finally {
          dataViewTab.repaint();
          processAction(goButton,false);
        }
        lifespanSpinner.setValue(cache.getCacheConfiguration().expiration().lifespan());
        maxIdleSpinner.setValue(cache.getCacheConfiguration().expiration().maxIdle());
        mainPane.setSelectedIndex(1);
      }
      private long lifespan(){
        try {
          String s=lifespanSpinner.getValue().toString();
          return Long.parseLong(s);
        }
 catch (        Exception e) {
          return cache.getCacheConfiguration().expiration().lifespan();
        }
      }
      private long maxIdle(){
        try {
          String s=maxIdleSpinner.getValue().toString();
          return Long.parseLong(s);
        }
 catch (        Exception e) {
          return cache.getCacheConfiguration().expiration().maxIdle();
        }
      }
    }
);
  }
}
]</InnerMethodInvoke>
                <InnerMethodInvoke>removeEntryRadioButton;addActionListener;[new ActionListener(){
  @Override public void actionPerformed(  ActionEvent e){
    keyTextField.setEnabled(true);
    valueTextField.setEnabled(false);
    lifespanSpinner.setEnabled(false);
    maxIdleSpinner.setEnabled(false);
  }
}
]</InnerMethodInvoke>
                <InnerMethodInvoke>putEntryRadioButton;addActionListener;[new ActionListener(){
  @Override public void actionPerformed(  ActionEvent e){
    keyTextField.setEnabled(true);
    valueTextField.setEnabled(true);
    lifespanSpinner.setEnabled(true);
    maxIdleSpinner.setEnabled(true);
  }
}
]</InnerMethodInvoke>
                <InnerMethodInvoke>getEntryRadioButton;addActionListener;[new ActionListener(){
  @Override public void actionPerformed(  ActionEvent e){
    keyTextField.setEnabled(true);
    valueTextField.setEnabled(false);
    lifespanSpinner.setEnabled(false);
    maxIdleSpinner.setEnabled(false);
  }
}
]</InnerMethodInvoke>
                <InnerMethodInvoke>generateSlider;addChangeListener;[new ChangeListener(){
  @Override public void stateChanged(  ChangeEvent e){
    randomGeneratorButton.setText("Generate " + generateSlider.getValue() + " Random Entries");
  }
}
]</InnerMethodInvoke>
                <InnerMethodInvoke>randomGeneratorButton;setText;["Generate " + generateSlider.getValue() + " Random Entries"]</InnerMethodInvoke>
                <InnerMethodInvoke>randomGeneratorButton;addActionListener;[new ActionListener(){
  @Override public void actionPerformed(  ActionEvent e){
    processAction(randomGeneratorButton,true);
    asyncExecutor.execute(new Runnable(){
      @Override public void run(){
        int entries=generateSlider.getValue();
        if (entries &gt; 1000) {
          for (int i=0; i &lt; entries / 1000; i++) {
            Map&lt;String,String&gt; rand=new HashMap&lt;String,String&gt;();
            while (rand.size() &lt; 1000)             rand.put(randomString(),randomString());
            cache.putAll(rand);
          }
          entries=entries % 1000;
        }
        Map&lt;String,String&gt; rand=new HashMap&lt;String,String&gt;();
        while (rand.size() &lt; entries)         rand.put(randomString(),randomString());
        cache.putAll(rand);
        processAction(randomGeneratorButton,false);
        generateSlider.setValue(50);
        mainPane.setSelectedIndex(1);
      }
    }
);
  }
  private String randomString(){
    return Integer.toHexString(r.nextInt(Integer.MAX_VALUE)).toUpperCase();
  }
}
]</InnerMethodInvoke>
                <InnerMethodInvoke>cacheClearButton;addActionListener;[new ActionListener(){
  @Override public void actionPerformed(  ActionEvent e){
    processAction(cacheClearButton,true);
    asyncExecutor.execute(new Runnable(){
      @Override public void run(){
        cache.clear();
        processAction(cacheClearButton,false);
        mainPane.setSelectedIndex(1);
      }
    }
);
  }
}
]</InnerMethodInvoke>
                <InnerMethodInvoke>refreshButton;addActionListener;[new ActionListener(){
  @Override public void actionPerformed(  ActionEvent e){
    processAction(refreshButton,true);
    asyncExecutor.execute(new Runnable(){
      @Override public void run(){
        InfinispanDemo.this.updateCachedDataTable();
        processAction(refreshButton,false);
        mainPane.setSelectedIndex(1);
      }
    }
);
  }
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>actionPerformed</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>e</ParamName>
                    <ParamType>ActionEvent</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>actionPerformed</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>e</ParamName>
                    <ParamType>ActionEvent</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;processAction;[goButton, true]</InnerMethodInvoke>
                <InnerMethodInvoke>asyncExecutor;execute;[new Runnable(){
  @Override public void run(){
    try {
      if (putEntryRadioButton.isSelected()) {
        cache.put(keyTextField.getText(),valueTextField.getText(),lifespan(),TimeUnit.MILLISECONDS,maxIdle(),TimeUnit.MILLISECONDS);
      }
 else       if (removeEntryRadioButton.isSelected()) {
        cache.remove(keyTextField.getText());
      }
 else       if (getEntryRadioButton.isSelected()) {
        cache.get(keyTextField.getText());
      }
    }
 catch (    Throwable t) {
    }
 finally {
      dataViewTab.repaint();
      processAction(goButton,false);
    }
    lifespanSpinner.setValue(cache.getCacheConfiguration().expiration().lifespan());
    maxIdleSpinner.setValue(cache.getCacheConfiguration().expiration().maxIdle());
    mainPane.setSelectedIndex(1);
  }
  private long lifespan(){
    try {
      String s=lifespanSpinner.getValue().toString();
      return Long.parseLong(s);
    }
 catch (    Exception e) {
      return cache.getCacheConfiguration().expiration().lifespan();
    }
  }
  private long maxIdle(){
    try {
      String s=maxIdleSpinner.getValue().toString();
      return Long.parseLong(s);
    }
 catch (    Exception e) {
      return cache.getCacheConfiguration().expiration().maxIdle();
    }
  }
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>lifespanSpinner;setValue;[cache.getCacheConfiguration().expiration().lifespan()]</InnerMethodInvoke>
                <InnerMethodInvoke>maxIdleSpinner;setValue;[cache.getCacheConfiguration().expiration().maxIdle()]</InnerMethodInvoke>
                <InnerMethodInvoke>mainPane;setSelectedIndex;[1]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>lifespan</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>maxIdle</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>actionPerformed</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>e</ParamName>
                    <ParamType>ActionEvent</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>keyTextField;setEnabled;[true]</InnerMethodInvoke>
                <InnerMethodInvoke>valueTextField;setEnabled;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>lifespanSpinner;setEnabled;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>maxIdleSpinner;setEnabled;[false]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>actionPerformed</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>e</ParamName>
                    <ParamType>ActionEvent</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>keyTextField;setEnabled;[true]</InnerMethodInvoke>
                <InnerMethodInvoke>valueTextField;setEnabled;[true]</InnerMethodInvoke>
                <InnerMethodInvoke>lifespanSpinner;setEnabled;[true]</InnerMethodInvoke>
                <InnerMethodInvoke>maxIdleSpinner;setEnabled;[true]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>actionPerformed</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>e</ParamName>
                    <ParamType>ActionEvent</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>keyTextField;setEnabled;[true]</InnerMethodInvoke>
                <InnerMethodInvoke>valueTextField;setEnabled;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>lifespanSpinner;setEnabled;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>maxIdleSpinner;setEnabled;[false]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>stateChanged</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>e</ParamName>
                    <ParamType>ChangeEvent</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>randomGeneratorButton;setText;["Generate " + generateSlider.getValue() + " Random Entries"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>actionPerformed</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>e</ParamName>
                    <ParamType>ActionEvent</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;processAction;[randomGeneratorButton, true]</InnerMethodInvoke>
                <InnerMethodInvoke>asyncExecutor;execute;[new Runnable(){
  @Override public void run(){
    int entries=generateSlider.getValue();
    if (entries &gt; 1000) {
      for (int i=0; i &lt; entries / 1000; i++) {
        Map&lt;String,String&gt; rand=new HashMap&lt;String,String&gt;();
        while (rand.size() &lt; 1000)         rand.put(randomString(),randomString());
        cache.putAll(rand);
      }
      entries=entries % 1000;
    }
    Map&lt;String,String&gt; rand=new HashMap&lt;String,String&gt;();
    while (rand.size() &lt; entries)     rand.put(randomString(),randomString());
    cache.putAll(rand);
    processAction(randomGeneratorButton,false);
    generateSlider.setValue(50);
    mainPane.setSelectedIndex(1);
  }
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [entries=generateSlider.getValue()]</InnerVar>
                <InnerVar>Map&lt;String,String&gt; [rand=new HashMap&lt;String,String&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cache;putAll;[rand]</InnerMethodInvoke>
                <InnerMethodInvoke>null;processAction;[randomGeneratorButton, false]</InnerMethodInvoke>
                <InnerMethodInvoke>generateSlider;setValue;[50]</InnerMethodInvoke>
                <InnerMethodInvoke>mainPane;setSelectedIndex;[1]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>randomString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>actionPerformed</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>e</ParamName>
                    <ParamType>ActionEvent</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;processAction;[cacheClearButton, true]</InnerMethodInvoke>
                <InnerMethodInvoke>asyncExecutor;execute;[new Runnable(){
  @Override public void run(){
    cache.clear();
    processAction(cacheClearButton,false);
    mainPane.setSelectedIndex(1);
  }
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cache;clear;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;processAction;[cacheClearButton, false]</InnerMethodInvoke>
                <InnerMethodInvoke>mainPane;setSelectedIndex;[1]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>actionPerformed</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>e</ParamName>
                    <ParamType>ActionEvent</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;processAction;[refreshButton, true]</InnerMethodInvoke>
                <InnerMethodInvoke>asyncExecutor;execute;[new Runnable(){
  @Override public void run(){
    InfinispanDemo.this.updateCachedDataTable();
    processAction(refreshButton,false);
    mainPane.setSelectedIndex(1);
  }
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>InfinispanDemo.this;updateCachedDataTable;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;processAction;[refreshButton, false]</InnerMethodInvoke>
                <InnerMethodInvoke>mainPane;setSelectedIndex;[1]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>moveCacheToState</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>state</ParamName>
                    <ParamType>ComponentStatus</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controlPanelTab;repaint;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>processAction</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>button</ParamName>
                    <ParamType>JButton</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>start</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>button;setEnabled;[!start]</InnerMethodInvoke>
                <InnerMethodInvoke>cacheStatusProgressBar;setVisible;[start]</InnerMethodInvoke>
                <InnerMethodInvoke>cacheStatusProgressBar;setEnabled;[start]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readContents</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>is</ParamName>
                    <ParamType>InputStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BufferedReader [r=new BufferedReader(new InputStreamReader(is))]</InnerVar>
                <InnerVar>String [s]</InnerVar>
                <InnerVar>StringBuilder [sb=new StringBuilder()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startCache</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;moveCacheToState;[ComponentStatus.INITIALIZING]</InnerMethodInvoke>
                <InnerMethodInvoke>asyncExecutor;execute;[new Runnable(){
  @Override public void run(){
    try {
      URL resource=FileLookupFactory.newInstance().lookupFileLocation(cacheConfigFile,getClass().getClassLoader());
      if (resource == null)       resource=new URL(cacheConfigFile);
      if (cacheManager == null) {
        InputStream stream=resource.openStream();
        try {
          cacheManager=new DefaultCacheManager(stream);
        }
  finally {
          Util.close(stream);
        }
      }
      cache=cacheManager.getCache();
      cache.start();
      configFileName.setText(resource.toString());
      configFileName.repaint();
      InputStream is=null;
      try {
        is=resource.openStream();
        configFileContents.setText(readContents(is));
        configFileContents.setEditable(false);
      }
 catch (      Exception e) {
        log.warn("Unable to open config file [" + cacheConfigFile + "] for display",e);
      }
 finally {
        Util.close(is);
      }
      configFileContents.repaint();
      CacheListener cl=new CacheListener();
      cache.addListener(cl);
      EmbeddedCacheManager cacheManager=cache.getCacheManager();
      cacheManager.addListener(cl);
      updateClusterTable(cacheManager.getMembers());
      lifespanSpinner.setValue(cache.getCacheConfiguration().expiration().lifespan());
      maxIdleSpinner.setValue(cache.getCacheConfiguration().expiration().maxIdle());
      cacheContentsSizeLabel.setText("Cache contains " + cache.size() + " entries");
      moveCacheToState(ComponentStatus.RUNNING);
    }
 catch (    Exception e) {
      log.error("Unable to start cache!",e);
      throw new RuntimeException(e);
    }
  }
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>stopCache</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;moveCacheToState;[ComponentStatus.STOPPING]</InnerMethodInvoke>
                <InnerMethodInvoke>asyncExecutor;execute;[new Runnable(){
  @Override public void run(){
    if (cache != null) {
      cache.stop();
      cache=null;
    }
    if (cacheManager != null) {
      cacheManager.stop();
      cacheManager=null;
    }
    cachedDataTableModel.reset();
    configFileContents.setText("");
    configFileContents.repaint();
    configFileName.setText("");
    configFileName.repaint();
    moveCacheToState(ComponentStatus.TERMINATED);
  }
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cachedDataTableModel;reset;[]</InnerMethodInvoke>
                <InnerMethodInvoke>configFileContents;setText;[""]</InnerMethodInvoke>
                <InnerMethodInvoke>configFileContents;repaint;[]</InnerMethodInvoke>
                <InnerMethodInvoke>configFileName;setText;[""]</InnerMethodInvoke>
                <InnerMethodInvoke>configFileName;repaint;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;moveCacheToState;[ComponentStatus.TERMINATED]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setCacheTabsStatus</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>enabled</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [numTabs=mainPane.getTabCount()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>panel1;repaint;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>updateClusterTable</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>members</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>log;debug;["Updating cluster table with new member list " + members]</InnerMethodInvoke>
                <InnerMethodInvoke>clusterTableModel;setMembers;[members]</InnerMethodInvoke>
                <InnerMethodInvoke>null;updateTitleBar;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>updateTitleBar</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [title="Infinispan GUI Demo"]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>frame;setTitle;[title]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLocalAddress</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>EmbeddedCacheManager [cacheManager=(EmbeddedCacheManager)cache.getCacheManager()]</InnerVar>
                <InnerVar>Address [a=cacheManager.getAddress()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getClusterSize</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>EmbeddedCacheManager [cacheManager=(EmbeddedCacheManager)cache.getCacheManager()]</InnerVar>
                <InnerVar>List&lt;Address&gt; [members=cacheManager.getMembers()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createUIComponents</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>colorForRow</MethodName>
            <MethodComment>/** 
 * Returns the appropriate background color for the given row.
 */
</MethodComment>
            <ReturnType>Color</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>prepareRenderer</MethodName>
            <MethodComment>/** 
 * Shades alternate rows in different colors.
 */
</MethodComment>
            <ReturnType>Component</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>renderer</ParamName>
                    <ParamType>TableCellRenderer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>column</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Component [c=super.prepareRenderer(renderer,row,column)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>viewChangeEvent</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>e</ParamName>
                    <ParamType>ViewChangedEvent</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;updateClusterTable;[e.getNewMembers()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removed</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>e</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>updateCachedDataTable</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>tableUpdateExecutor;execute;[new Runnable(){
  @Override public void run(){
    cachedDataTableModel.update();
  }
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cachedDataTableModel;update;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setMembers</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>m</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;fireTableDataChanged;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRowCount</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getColumnCount</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getValueAt</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rowIndex</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columnIndex</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getColumnName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRowCount</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getColumnCount</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getValueAt</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rowIndex</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columnIndex</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getColumnName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>update</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>long [currentTimeMillis=System.currentTimeMillis()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>data;clear;[]</InnerMethodInvoke>
                <InnerMethodInvoke>cacheContentsSizeLabel;setText;["Cache contains " + data.size() + " entries"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;fireTableDataChanged;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reset</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>data;clear;[]</InnerMethodInvoke>
                <InnerMethodInvoke>cacheContentsSizeLabel;setText;["Cache contains " + data.size() + " entries"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;fireTableDataChanged;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>equals</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>o</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CachedEntry [that=(CachedEntry)o]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hashCode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [result=key != null ? key.hashCode() : 0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>