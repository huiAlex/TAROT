<Class>
    <Id>666</Id>
    <Package>org.infinispan.factories.annotations</Package>
    <ClassName>Inject</ClassName>
    <ClassComment>Inject  /** 
 * Used to annotate a method as one that is used to inject a registered component into another component.  The component to be constructed must be built using the  {@link AbstractComponentFactory#construct(Class)} method, or if your objectthat needs components injected into it already exists, it can be built using the  {@link ComponentRegistry#wireDependencies(Object)} method.&lt;p/&gt; Usage example: &lt;pre&gt; public class MyClass { private TransactionManager tm; private BuddyManager bm; private Notifier n; &lt;p/&gt; &amp;amp;Inject public void setTransactionManager(TransactionManager tm) { this.tm = tm; } &lt;p/&gt; &amp;amp;Inject public void injectMoreStuff(BuddyManager bm, Notifier n) { this.bm = bm; this.n = n; } } &lt;p/&gt; &lt;/pre&gt; and an instance of this class can be constructed and wired using &lt;pre&gt; MyClass myClass = componentFactory.construct(MyClass.class); // instance will have dependencies injected. &lt;/pre&gt; Methods annotated with this Inject annotation should *only* set class fields. They should do nothing else. If you need to do some work to prepare the component for use, do it in a  {@link @Start} method since this is onlycalled once when a component starts.
 * @author Manik Surtani
 * @since 4.0
 */
</ClassComment>
    <FieldList/>
    <MethodList/>
</Class>