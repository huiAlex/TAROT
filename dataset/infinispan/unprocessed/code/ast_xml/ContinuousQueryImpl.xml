<Class>
    <Id>492</Id>
    <Package>org.infinispan.client.hotrod.event</Package>
    <ClassName>ContinuousQueryImpl</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>ContinuousQuery</SuperInterface>
        <SuperInterface>K</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ContinuousQueryImpl  /** 
 * A container of continuous query listeners for a cache. &lt;p&gt;This class is not threadsafe.
 * @author anistor@redhat.com
 * @since 8.2
 * @private
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>cache</FieldName>
            <FieldType>RemoteCache</FieldType>
        </Field>
        <Field>
            <FieldName>cache</FieldName>
            <FieldType>K</FieldType>
        </Field>
        <Field>
            <FieldName>serializationContext</FieldName>
            <FieldType>SerializationContext</FieldType>
        </Field>
        <Field>
            <FieldName>listeners</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>listeners</FieldName>
            <FieldType>ClientEntryListener&lt;K,?&gt;</FieldType>
        </Field>
        <Field>
            <FieldName>serializationContext</FieldName>
            <FieldType>SerializationContext</FieldType>
        </Field>
        <Field>
            <FieldName>listener</FieldName>
            <FieldType>ContinuousQueryListener</FieldType>
        </Field>
        <Field>
            <FieldName>listener</FieldName>
            <FieldType>K</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ContinuousQueryImpl</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cache</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addContinuousQueryListener</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>queryString</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>listener</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;addContinuousQueryListener;[queryString, null, listener]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addContinuousQueryListener</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>queryString</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>namedParameters</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>listener</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClientEntryListener&lt;K,?&gt; [eventListener=new ClientEntryListener&lt;&gt;(serializationContext,listener)]</InnerVar>
                <InnerVar>Object[] [factoryParams=Filters.makeFactoryParams(queryString,namedParameters)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cache;addClientListener;[eventListener, factoryParams, null]</InnerMethodInvoke>
                <InnerMethodInvoke>listeners;add;[eventListener]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addContinuousQueryListener</MethodName>
            <MethodComment>/** 
 * Registers a continuous query listener that uses a query DSL based filter. The listener will receive notifications when a cache entry joins or leaves the matching set defined by the query.
 * @param listener the continuous query listener instance
 * @param query    the query to be used for determining the matching set
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>query</ParamName>
                    <ParamType>Query</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>listener</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BaseQuery [baseQuery=(BaseQuery)query]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;addContinuousQueryListener;[baseQuery.getQueryString(), baseQuery.getParameters(), listener]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeContinuousQueryListener</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>listener</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getListeners</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ContinuousQueryListener&lt;K,?&gt;</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>List&lt;ContinuousQueryListener&lt;K,?&gt;&gt; [queryListeners=new ArrayList&lt;&gt;(listeners.size())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeAllListeners</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>listeners;clear;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ClientEntryListener</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>serializationContext</ParamName>
                    <ParamType>SerializationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>listener</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>handleEvent</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>event</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>byte[] [eventData=event.getEventData()]</InnerVar>
                <InnerVar>ContinuousQueryResult [cqr=ProtobufUtil.fromWrappedByteArray(serializationContext,eventData)]</InnerVar>
                <InnerVar>Object [key=ProtobufUtil.fromWrappedByteArray(serializationContext,cqr.getKey())]</InnerVar>
                <InnerVar>Object [value=cqr.getValue() != null ? ProtobufUtil.fromWrappedByteArray(serializationContext,cqr.getValue()) : cqr.getProjection()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>