<Class>
    <Id>3526</Id>
    <Package>org.infinispan.notifications.cachelistener.event</Package>
    <ClassName>DataRehashedEvent</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Event</SuperInterface>
        <SuperInterface>K</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>DataRehashedEvent  /** 
 * An event passed in to methods annotated with  {@link DataRehashed}. &lt;p&gt;The result of the  {@link #getNewTopologyId()} method is not guaranteed to be the same for the "pre"and the "post" notification, either. However, the "post" value is guaranteed to be greater than or equal to the "pre" value.&lt;/p&gt;
 * @author Manik Surtani
 * @author Dan Berindei
 * @since 5.0
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getMembersAtStart</MethodName>
            <MethodComment>/** 
 * @return Retrieves the list of members before rehashing started.
 */
</MethodComment>
            <ReturnType>Address</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMembersAtEnd</MethodName>
            <MethodComment>/** 
 * @return Retrieves the list of members after rehashing ended.
 */
</MethodComment>
            <ReturnType>Address</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getConsistentHashAtStart</MethodName>
            <MethodComment>/** 
 * @return The current consistent hash that was installed prior to the rehash.It is used both for reading and writing before the rebalance.
 */
</MethodComment>
            <ReturnType>ConsistentHash</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getConsistentHashAtEnd</MethodName>
            <MethodComment>/** 
 * @return The consistent hash that will be installed after the rebalance.It will be used both for reading and writing once the rebalance is complete.
 */
</MethodComment>
            <ReturnType>ConsistentHash</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getUnionConsistentHash</MethodName>
            <MethodComment>/** 
 * @return The union of the current and future consistent hashes.
 * @deprecated Since 9.0
 */
</MethodComment>
            <ReturnType>ConsistentHash</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNewTopologyId</MethodName>
            <MethodComment>/** 
 * @return Retrieves the new topology id after rehashing was triggered.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>