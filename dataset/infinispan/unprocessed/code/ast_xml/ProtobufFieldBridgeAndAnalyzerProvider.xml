<Class>
    <Id>2066</Id>
    <Package>org.infinispan.query.remote.impl</Package>
    <ClassName>ProtobufFieldBridgeAndAnalyzerProvider</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>LuceneQueryMaker.FieldBridgeAndAnalyzerProvider</SuperInterface>
        <SuperInterface>Descriptor</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ProtobufFieldBridgeAndAnalyzerProvider  /** 
 * @author anistor@redhat.com
 * @since 9.0
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>LUCENE_STRING_NULL_MARKER_CODEC</FieldName>
            <FieldType>LuceneStringNullMarkerCodec</FieldType>
        </Field>
        <Field>
            <FieldName>DOUBLE_FIELD_BRIDGE</FieldName>
            <FieldType>FieldBridge</FieldType>
        </Field>
        <Field>
            <FieldName>FLOAT_FIELD_BRIDGE</FieldName>
            <FieldType>FieldBridge</FieldType>
        </Field>
        <Field>
            <FieldName>LONG_FIELD_BRIDGE</FieldName>
            <FieldType>FieldBridge</FieldType>
        </Field>
        <Field>
            <FieldName>INT_FIELD_BRIDGE</FieldName>
            <FieldType>FieldBridge</FieldType>
        </Field>
        <Field>
            <FieldName>STRING_FIELD_BRIDGE</FieldName>
            <FieldType>FieldBridge</FieldType>
        </Field>
        <Field>
            <FieldName>BOOL_FIELD_BRIDGE</FieldName>
            <FieldType>FieldBridge</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ProtobufFieldBridgeAndAnalyzerProvider</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFieldBridge</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>FieldBridge</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>typeMetadata</ParamName>
                    <ParamType>Descriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>propertyPath</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>FieldDescriptor [fd=getFieldDescriptor(typeMetadata,propertyPath)]</InnerVar>
                <InnerVar>IndexingMetadata [indexingMetadata=fd.getContainingMessage().getProcessedAnnotation(IndexingMetadata.INDEXED_ANNOTATION)]</InnerVar>
                <InnerVar>FieldMapping [fieldMapping=indexingMetadata != null ? indexingMetadata.getFieldMapping(fd.getName()) : null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFieldDescriptor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>FieldDescriptor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>typeMetadata</ParamName>
                    <ParamType>Descriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>propertyPath</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Descriptor [messageDescriptor=typeMetadata]</InnerVar>
                <InnerVar>FieldDescriptor [fd=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAnalyzer</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Analyzer</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>searchIntegrator</ParamName>
                    <ParamType>SearchIntegrator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>typeMetadata</ParamName>
                    <ParamType>Descriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>propertyPath</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [analyzerName=getAnalyzerName(typeMetadata,propertyPath,true)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAnalyzerName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>typeMetadata</ParamName>
                    <ParamType>Descriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>propertyPath</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>complain</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Descriptor [messageDescriptor=typeMetadata]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>overrideAnalyzers</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parsingResult</ParamName>
                    <ParamType>Descriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>entityContext</ParamName>
                    <ParamType>EntityContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>collectAnalyzer</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>propertyValueExpr</ParamName>
                    <ParamType>PropertyValueExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [analyzerName=getAnalyzerName(parsingResult.getTargetEntityMetadata(),propertyValueExpr.getPropertyPath().asArrayPath(),false)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BooleanExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fullTextBoostExpr</ParamName>
                    <ParamType>FullTextBoostExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>fullTextBoostExpr.getChild();acceptVisitor;[this]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BooleanExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fullTextOccurExpr</ParamName>
                    <ParamType>FullTextOccurExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>fullTextOccurExpr.getChild();acceptVisitor;[this]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BooleanExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fullTextTermExpr</ParamName>
                    <ParamType>FullTextTermExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PropertyValueExpr [propertyValueExpr=(PropertyValueExpr)fullTextTermExpr.getChild()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;collectAnalyzer;[propertyValueExpr]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BooleanExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fullTextRegexpExpr</ParamName>
                    <ParamType>FullTextRegexpExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PropertyValueExpr [propertyValueExpr=(PropertyValueExpr)fullTextRegexpExpr.getChild()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;collectAnalyzer;[propertyValueExpr]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BooleanExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fullTextRangeExpr</ParamName>
                    <ParamType>FullTextRangeExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PropertyValueExpr [propertyValueExpr=(PropertyValueExpr)fullTextRangeExpr.getChild()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;collectAnalyzer;[propertyValueExpr]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BooleanExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>notExpr</ParamName>
                    <ParamType>NotExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>notExpr.getChild();acceptVisitor;[this]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BooleanExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>orExpr</ParamName>
                    <ParamType>OrExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BooleanExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>andExpr</ParamName>
                    <ParamType>AndExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BooleanExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>constantBooleanExpr</ParamName>
                    <ParamType>ConstantBooleanExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BooleanExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>isNullExpr</ParamName>
                    <ParamType>IsNullExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PropertyValueExpr [propertyValueExpr=(PropertyValueExpr)isNullExpr.getChild()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;collectAnalyzer;[propertyValueExpr]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BooleanExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>comparisonExpr</ParamName>
                    <ParamType>ComparisonExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PropertyValueExpr [propertyValueExpr=(PropertyValueExpr)comparisonExpr.getLeftChild()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;collectAnalyzer;[propertyValueExpr]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BooleanExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>likeExpr</ParamName>
                    <ParamType>LikeExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PropertyValueExpr [propertyValueExpr=(PropertyValueExpr)likeExpr.getChild()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;collectAnalyzer;[propertyValueExpr]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ValueExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>constantValueExpr</ParamName>
                    <ParamType>ConstantValueExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ValueExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>propertyValueExpr</ParamName>
                    <ParamType>PropertyValueExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ValueExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>aggregationExpr</ParamName>
                    <ParamType>AggregationExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>