<Class>
    <Id>2478</Id>
    <Package>org.infinispan.server.router.router.impl.hotrod.handlers</Package>
    <ClassName>SniHandlerInitializer</ClassName>
    <SuperClass>ChannelInitializer</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>SniHandlerInitializer  /** 
 * Initializer for SNI Handlers.
 * @author Sebastian ≈Åaskawiec
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>logger</FieldName>
            <FieldType>RouterLogger</FieldType>
        </Field>
        <Field>
            <FieldName>routingTable</FieldName>
            <FieldType>RoutingTable</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>SniHandlerInitializer</MethodName>
            <MethodComment>/** 
 * Creates new  {@link SniHandlerInitializer} based on the routing table.
 * @param routingTable {@link RoutingTable} for supplying the {@link org.infinispan.server.router.routes.Route}s.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>routingTable</ParamName>
                    <ParamType>RoutingTable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initChannel</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>channel</ParamName>
                    <ParamType>Channel</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>SslContext [defaultContext=SslUtils.INSTANCE.toNettySslContext(Optional.empty())]</InnerVar>
                <InnerVar>DomainMappingBuilder&lt;SslContext&gt; [domainMappingBuilder=new DomainMappingBuilder&lt;&gt;(defaultContext)]</InnerVar>
                <InnerVar>DomainNameMapping&lt;SslContext&gt; [domainNameMapping=domainMappingBuilder.build()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>routingTable.streamRoutes(SniRouteSource.class,RouteDestination.class).map(r -&gt; r.getRouteSource());forEach;[r -&gt; domainMappingBuilder.add(r.getSniHostName(),SslUtils.INSTANCE.toNettySslContext(Optional.of(r.getSslContext())))]</InnerMethodInvoke>
                <InnerMethodInvoke>logger;initializedSni;[domainNameMapping]</InnerMethodInvoke>
                <InnerMethodInvoke>channel.pipeline();addLast;[new SniRouteHandler(domainNameMapping,routingTable)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>