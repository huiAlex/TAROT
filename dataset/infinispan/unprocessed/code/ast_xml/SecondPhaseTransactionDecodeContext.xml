<Class>
    <Id>3215</Id>
    <Package>org.infinispan.server.hotrod.tx</Package>
    <ClassName>SecondPhaseTransactionDecodeContext</ClassName>
    <SuperClass>TransactionDecodeContext</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>SecondPhaseTransactionDecodeContext  /** 
 * A base decode context to handle rollback or commit request from a client.
 * @author Pedro Ruivo
 * @since 9.1
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>cacheName</FieldName>
            <FieldType>ByteString</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>SecondPhaseTransactionDecodeContext</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cache</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>xid</ParamName>
                    <ParamType>XidImpl</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>perform</MethodName>
            <MethodComment>/** 
 * Commits or Rollbacks the transaction.
 * @throws HeuristicMixedException    If a heuristic decision was made and some some parts of the transaction havebeen committed while other parts have been rolled back.
 * @throws HeuristicRollbackException If a heuristic decision to roll back the transaction was made.
 * @throws RollbackException          If the transaction was marked for rollback only, the transaction is rolled backand this exception is thrown.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Address [originator=txState.getOriginator()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>HeuristicRollbackException</ExceptionType>
                <ExceptionType>HeuristicMixedException</ExceptionType>
                <ExceptionType>RollbackException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>log</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Log</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isTrace</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>performRemote</MethodName>
            <MethodComment>/** 
 * Commits or rollbacks the transaction as a remote transaction since the member who executed the transaction left the cluster
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>performLocal</MethodName>
            <MethodComment>/** 
 * Commits or rollbacks a local transaction.
 * @throws HeuristicMixedException    If a heuristic decision was made and some some parts of the transaction havebeen committed while other parts have been rolled back.
 * @throws HeuristicRollbackException If a heuristic decision to roll back the transaction was made.
 * @throws RollbackException          If the transaction was marked for rollback only, the transaction is rolled backand this exception is thrown.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>HeuristicRollbackException</ExceptionType>
                <ExceptionType>HeuristicMixedException</ExceptionType>
                <ExceptionType>RollbackException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildForwardCommand</MethodName>
            <MethodComment>/** 
 * Creates a forward commit or rollback commands to send to the member who executed the transaction.
 */
</MethodComment>
            <ReturnType>CacheRpcCommand</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheName</ParamName>
                    <ParamType>ByteString</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>forwardToOriginator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>CacheRpcCommand [forwardCommand=buildForwardCommand(cacheName)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rpcManager;invokeRemotely;[Collections.singleton(txState.getOriginator()), forwardCommand, rpcManager.getDefaultRpcOptions(true)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>