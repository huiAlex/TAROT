<Class>
    <Id>81</Id>
    <Package>org.infinispan.spring.support.remote</Package>
    <ClassName>InfinispanRemoteCacheManagerFactoryBean</ClassName>
    <SuperClass>AbstractRemoteCacheManagerFactory</SuperClass>
    <SuperInterfaceList>
        <SuperInterface>FactoryBean</SuperInterface>
        <SuperInterface>RemoteCacheManager</SuperInterface>
        <SuperInterface>InitializingBean</SuperInterface>
        <SuperInterface>DisposableBean</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>InfinispanRemoteCacheManagerFactoryBean  /** 
 * &lt;p&gt; A  {@link org.springframework.beans.factory.FactoryBean &lt;code&gt;FactoryBean&lt;/code&gt;} for creating an{@link org.infinispan.client.hotrod.RemoteCacheManager &lt;code&gt;Infinispan RemoteCacheManager&lt;/code&gt;} instance.&lt;/p&gt; &lt;strong&gt;Configuration&lt;/strong&gt;&lt;br/&gt; &lt;p&gt; A &lt;code&gt;RemoteCacheManager&lt;/code&gt; is configured through a  {@link java.util.Properties &lt;code&gt;Properties&lt;/code&gt;} object. For an exhaustive list of valid properties to be used see&lt;code&gt;RemoteCacheManager&lt;/code&gt;'s  {@link org.infinispan.client.hotrod.RemoteCacheManager javadocs}. This &lt;code&gt;FactoryBean&lt;/code&gt; provides means to either {@link #setConfigurationProperties(Properties) inject} a user-defined &lt;code&gt;Properties&lt;/code&gt;instance or to {@link #setConfigurationPropertiesFileLocation(org.springframework.core.io.Resource) set} thelocation of a properties file to load those properties from. Note that it is &lt;em&gt;illegal&lt;/em&gt; to use both mechanisms simultaneously. &lt;/p&gt; &lt;p&gt; Alternatively or in combination with {@link #setConfigurationPropertiesFileLocation(org.springframework.core.io.Resource) setting} thelocation of a &lt;code&gt;Properties&lt;/code&gt; file to load the configuration from, this &lt;code&gt;FactoryBean&lt;/code&gt; provides (typed) setters for all configuration settings. Settings thus defined take precedence over those defined in the injected &lt;code&gt;Properties&lt;/code&gt; instance. This flexibility enables users to use e.g. a company-wide &lt;code&gt;Properties&lt;/code&gt; file containing default settings while simultaneously overriding select settings whenever special requirements warrant this.&lt;br/&gt; Note that it is illegal to use setters in conjunction with {@link #setConfigurationProperties(Properties) injecting} a &lt;code&gt;Properties&lt;/code&gt; instance.&lt;/p&gt; &lt;p&gt; In addition to creating a &lt;code&gt;RemoteCacheManager&lt;/code&gt; this &lt;code&gt;FactoryBean&lt;/code&gt; does also control that &lt;code&gt;RemoteCacheManagers&lt;/code&gt;'s lifecycle by shutting it down when the enclosing Spring application context is closed. It is therefore advisable to &lt;em&gt;always&lt;/em&gt; use this &lt;code&gt;FactoryBean&lt;/code&gt; when creating a &lt;code&gt;RemoteCacheManager&lt;/code&gt;. &lt;/p&gt;
 * @author &lt;a href="mailto:olaf DOT bergner AT gmx DOT de"&gt;Olaf Bergner&lt;/a&gt;
 * @see org.infinispan.client.hotrod.RemoteCacheManager
 * @see #destroy()
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>nativeRemoteCacheManager</FieldName>
            <FieldType>RemoteCacheManager</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>afterPropertiesSet</MethodName>
            <MethodComment>/** 
 * @see org.springframework.beans.factory.InitializingBean#afterPropertiesSet()
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Properties [configurationPropertiesToUse=configurationProperties()]</InnerVar>
                <InnerVar>org.infinispan.client.hotrod.configuration.ConfigurationBuilder [clientBuilder=new org.infinispan.client.hotrod.configuration.ConfigurationBuilder()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertCorrectlyConfigured;[]</InnerMethodInvoke>
                <InnerMethodInvoke>this.logger;info;["Creating new instance of RemoteCacheManager ..."]</InnerMethodInvoke>
                <InnerMethodInvoke>clientBuilder;withProperties;[configurationPropertiesToUse]</InnerMethodInvoke>
                <InnerMethodInvoke>this.logger;info;["Finished creating new instance of RemoteCacheManager"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getObject</MethodName>
            <MethodComment>/** 
 * @see org.springframework.beans.factory.FactoryBean#getObject()
 */
</MethodComment>
            <ReturnType>RemoteCacheManager</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getObjectType</MethodName>
            <MethodComment>/** 
 * @see org.springframework.beans.factory.FactoryBean#getObjectType()
 */
</MethodComment>
            <ReturnType>? extends RemoteCacheManager</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isSingleton</MethodName>
            <MethodComment>/** 
 * Always return &lt;code&gt;true&lt;/code&gt;.
 * @see org.springframework.beans.factory.FactoryBean#isSingleton()
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>destroy</MethodName>
            <MethodComment>/** 
 * {@link org.infinispan.client.hotrod.RemoteCacheManager#stop() &lt;code&gt;stop&lt;/code&gt;} the&lt;code&gt;RemoteCacheManager&lt;/code&gt; created by this factory.
 * @see org.springframework.beans.factory.DisposableBean#destroy()
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>