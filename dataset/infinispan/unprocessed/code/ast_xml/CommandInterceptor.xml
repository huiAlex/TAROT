<Class>
    <Id>485</Id>
    <Package>org.infinispan.interceptors.base</Package>
    <ClassName>CommandInterceptor</ClassName>
    <SuperClass>AbstractVisitor</SuperClass>
    <SuperInterfaceList>
        <SuperInterface>AsyncInterceptor</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>CommandInterceptor  /** 
 * This is the base class for all interceptors to extend, and implements the  {@link Visitor} interface allowing it tointercept invocations on  {@link VisitableCommand}s. &lt;p/&gt; Commands are either created by the  {@link CacheImpl} (for invocations on the {@link Cache} public interface), orby the  {@link org.infinispan.remoting.inboundhandler.InboundInvocationHandler} for remotely originating invocations, and are passed up the interceptor chainby using the  {@link InterceptorChain} helper class.&lt;p/&gt; When writing interceptors, authors can either override a specific visitXXX() method (such as  {@link #visitGetKeyValueCommand(InvocationContext,GetKeyValueCommand)}) or the more generic  {@link #handleDefault(InvocationContext,VisitableCommand)} which is the default behaviour of any visit method, as definedin  {@link AbstractVisitor#handleDefault(InvocationContext,VisitableCommand)}. &lt;p/&gt; The preferred approach is to override the specific visitXXX() methods that are of interest rather than to override {@link #handleDefault(InvocationContext,VisitableCommand)} and then write a series of if statements or a switchblock, if command-specific behaviour is needed. &lt;p/&gt;
 * @author Mircea.Markus@jboss.com
 * @see VisitableCommand
 * @see Visitor
 * @see InterceptorChain
 * @deprecated Since 9.0, please extend {@link BaseAsyncInterceptor} instead.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>interceptorChain</FieldName>
            <FieldType>AsyncInterceptorChain</FieldType>
        </Field>
        <Field>
            <FieldName>cacheConfiguration</FieldName>
            <FieldType>Configuration</FieldType>
        </Field>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>nextInterceptor</FieldName>
            <FieldType>AsyncInterceptor</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getLog</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Log</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>injectConfiguration</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>configuration</ParamName>
                    <ParamType>Configuration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>interceptorChain</ParamName>
                    <ParamType>AsyncInterceptorChain</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNext</MethodName>
            <MethodComment>/** 
 * Retrieves the next interceptor in the chain. Since 9.0, it returns  {@code null} if the next interceptor does not extend {@code CommandInterceptor}.
 * @return the next interceptor in the chain.
 */
</MethodComment>
            <ReturnType>CommandInterceptor</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>List&lt;AsyncInterceptor&gt; [interceptors=interceptorChain.getInterceptors()]</InnerVar>
                <InnerVar>int [myIndex=interceptors.indexOf(this)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasNext</MethodName>
            <MethodComment>/** 
 * Note: Unlike  {@link #getNext()}, this method does not ignore interceptors that do not extend {@code CommandInterceptor}
 * @return true if there is another interceptor in the chain after this; false otherwise.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>List&lt;AsyncInterceptor&gt; [interceptors=interceptorChain.getInterceptors()]</InnerVar>
                <InnerVar>int [myIndex=interceptors.indexOf(this)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setNext</MethodName>
            <MethodComment>/** 
 * Does nothing since 9.0.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ignored</ParamName>
                    <ParamType>CommandInterceptor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setNextInterceptor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>interceptorStage</ParamName>
                    <ParamType>AsyncInterceptor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>invokeNextInterceptor</MethodName>
            <MethodComment>/** 
 * Invokes the next interceptor in the chain.  This is how interceptor implementations should pass a call up the chain to the next interceptor.
 * @param ctx     invocation context
 * @param command command to pass up the chain.
 * @return return value of the invocation
 * @throws Throwable in the event of problems
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>InvocationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>command</ParamName>
                    <ParamType>VisitableCommand</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Object [maybeStage=nextInterceptor.visitCommand(ctx,command)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Throwable</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>handleDefault</MethodName>
            <MethodComment>/** 
 * The default behaviour of the visitXXX methods, which is to ignore the call and pass the call up to the next interceptor in the chain.
 * @param ctx     invocation context
 * @param command command to invoke
 * @return return value
 * @throws Throwable in the event of problems
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>InvocationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>command</ParamName>
                    <ParamType>VisitableCommand</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Throwable</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLockAcquisitionTimeout</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>command</ParamName>
                    <ParamType>FlagAffectedCommand</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>skipLocking</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasSkipLocking</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>command</ParamName>
                    <ParamType>FlagAffectedCommand</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCacheWithFlags</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cache</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>command</ParamName>
                    <ParamType>FlagAffectedCommand</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>long [flags=command.getFlagsBitSet()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitCommand</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>InvocationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>command</ParamName>
                    <ParamType>VisitableCommand</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Throwable</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>