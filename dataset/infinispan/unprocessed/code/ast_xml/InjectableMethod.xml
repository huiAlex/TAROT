<Class>
    <Id>3635</Id>
    <Package>org.infinispan.cdi.common.util</Package>
    <ClassName>InjectableMethod</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>InjectableMethod  /** 
 * &lt;p&gt; Allows an  {@link AnnotatedMethod} to be injected using the CDI type saferesolution rules. &lt;/p&gt; &lt;p/&gt; &lt;p&gt; {@link ParameterValueRedefiner} allows the default value to be overridden bythe caller of {@link #invoke(Object,CreationalContext,ParameterValueRedefiner)}. &lt;/p&gt;
 * @param &lt; X &gt; the declaring type
 * @author Pete Muir
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>method</FieldName>
            <FieldType>AnnotatedMethod</FieldType>
        </Field>
        <Field>
            <FieldName>method</FieldName>
            <FieldType>X</FieldType>
        </Field>
        <Field>
            <FieldName>parameters</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>parameters</FieldName>
            <FieldType>InjectionPoint</FieldType>
        </Field>
        <Field>
            <FieldName>beanManager</FieldName>
            <FieldType>BeanManager</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>InjectableMethod</MethodName>
            <MethodComment>/** 
 * Instantiate a new  {@link InjectableMethod}.
 * @param method      the method which will be injected upon a call to{@link #invoke(Object,CreationalContext)}
 * @param bean        the bean which defines the injectable method
 * @param beanManager the {@link BeanManager} to use to obtain the parametervalues
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>method</ParamName>
                    <ParamType>X</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>declaringBean</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>beanManager</ParamName>
                    <ParamType>BeanManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>InjectableMethod</MethodName>
            <MethodComment>/** 
 * Instantiate a new  {@link InjectableMethod}.
 * @param method      the method which will be injected upon a call to{@link #invoke(Object,CreationalContext)}
 * @param parameters  a collection of injection points representing theparameters of the method
 * @param beanManager the {@link BeanManager} to use to obtain the parametervalues
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>method</ParamName>
                    <ParamType>X</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parameters</ParamName>
                    <ParamType>InjectionPoint</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>beanManager</ParamName>
                    <ParamType>BeanManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBeanManager</MethodName>
            <MethodComment>/** 
 * Get the bean manager used by this injectable method.
 * @return the bean manager in use
 */
</MethodComment>
            <ReturnType>BeanManager</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getParameters</MethodName>
            <MethodComment>/** 
 * Get the injectable parameters of this method.
 * @return a collection of injection points representing the parameters ofthis method
 */
</MethodComment>
            <ReturnType>InjectionPoint</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>invoke</MethodName>
            <MethodComment>/** 
 * Invoke the method, causing all parameters to be injected according to the CDI type safe resolution rules.
 * @param &lt; T &gt;               the return type of the method
 * @param receiver          the instance upon which to call the method
 * @param creationalContext the creational context to use to obtaininjectable references for each parameter
 * @return the result of invoking the method or null if the method's returntype is void
 * @throws RuntimeException            if this &lt;code&gt;Method&lt;/code&gt; object enforces Javalanguage access control and the underlying method is inaccessible or if the underlying method throws an exception or if the initialization provoked by this method fails.
 * @throws IllegalArgumentException    if the method is an instance method andthe specified &lt;code&gt;receiver&lt;/code&gt; argument is not an instance of the class or interface declaring the underlying method (or of a subclass or implementor thereof); if an unwrapping conversion for primitive arguments fails; or if, after possible unwrapping, a parameter value cannot be converted to the corresponding formal parameter type by a method invocation conversion.
 * @throws NullPointerException        if the specified &lt;code&gt;receiver&lt;/code&gt; isnull and the method is an instance method.
 * @throws ExceptionInInitializerError if the initialization provoked by thismethod fails.
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>receiver</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>creationalContext</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>invoke</MethodName>
            <MethodComment>/** 
 * Invoke the method, calling the parameter redefiner for each parameter, allowing the caller to override the default value obtained via the CDI type safe resolver.
 * @param &lt; T &gt;               the return type of the method
 * @param receiver          the instance upon which to call the method
 * @param creationalContext the creational context to use to obtaininjectable references for each parameter
 * @return the result of invoking the method or null if the method's returntype is void
 * @throws RuntimeException            if this &lt;code&gt;Method&lt;/code&gt; object enforces Javalanguage access control and the underlying method is inaccessible or if the underlying method throws an exception or if the initialization provoked by this method fails.
 * @throws IllegalArgumentException    if the method is an instance method andthe specified &lt;code&gt;receiver&lt;/code&gt; argument is not an instance of the class or interface declaring the underlying method (or of a subclass or implementor thereof); if an unwrapping conversion for primitive arguments fails; or if, after possible unwrapping, a parameter value cannot be converted to the corresponding formal parameter type by a method invocation conversion.
 * @throws NullPointerException        if the specified &lt;code&gt;receiver&lt;/code&gt; isnull and the method is an instance method.
 * @throws ExceptionInInitializerError if the initialization provoked by thismethod fails.
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>receiver</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>creationalContext</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>redefinition</ParamName>
                    <ParamType>ParameterValueRedefiner</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;Object&gt; [parameterValues=new ArrayList&lt;Object&gt;()]</InnerVar>
                <InnerVar>T [result=(T)Reflections.invokeMethod(true,method.getJavaMember(),receiver,parameterValues.toArray(Reflections.EMPTY_OBJECT_ARRAY))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>