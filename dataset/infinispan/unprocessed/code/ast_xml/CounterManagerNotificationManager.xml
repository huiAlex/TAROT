<Class>
    <Id>2969</Id>
    <Package>org.infinispan.counter.impl.listener</Package>
    <ClassName>CounterManagerNotificationManager</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>CounterManagerNotificationManager  /** 
 * It manages all the caches events and handles them. Also, it handles the user-specific  {@link CounterListener}. &lt;p&gt; When a particular key is updated, its update is send to the counter, via  {@link CounterEventGenerator#generate(CounterKey,CounterValue)}, and the result  {@link CounterEvent} is used to notify theusers  {@link CounterListener}. &lt;p&gt; Also listens to topology changes in the cache to update the  {@link WeakCounter} preferred keys, via {@link TopologyChangeListener#topologyChanged()}. &lt;p&gt; An user's  {@link CounterListener} is invoked in sequence (i.e. only the next update is invoked when the previous oneis handled) but it can be invoked in different thread.
 * @author Pedro Ruivo
 * @since 9.2
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>counters</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>counters</FieldName>
            <FieldType>ByteString</FieldType>
        </Field>
        <Field>
            <FieldName>userListenerExecutor</FieldName>
            <FieldType>Executor</FieldType>
        </Field>
        <Field>
            <FieldName>listenersRegistered</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>generator</FieldName>
            <FieldType>CounterEventGenerator</FieldType>
        </Field>
        <Field>
            <FieldName>userListeners</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>userListeners</FieldName>
            <FieldType>CounterListenerResponse&lt;?&gt;</FieldType>
        </Field>
        <Field>
            <FieldName>topologyChangeListener</FieldName>
            <FieldType>TopologyChangeListener</FieldType>
        </Field>
        <Field>
            <FieldName>listener</FieldName>
            <FieldType>T</FieldType>
        </Field>
        <Field>
            <FieldName>holder</FieldName>
            <FieldType>Holder</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>CounterManagerNotificationManager</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>useExecutor</MethodName>
            <MethodComment>/** 
 * The executor to use where the user's  {@link CounterListener} is invoked.
 * @param asyncExecutor The {@link Executor} implementation.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>asyncExecutor</ParamName>
                    <ParamType>Executor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>registerCounter</MethodName>
            <MethodComment>/** 
 * It registers a new counter created locally.
 * @param counterName            The counter's name.
 * @param generator              The counter's {@link CounterEvent} generator.
 * @param topologyChangeListener The counter's listener to topology change. It can be {@code null}.
 * @throws IllegalStateException If the counter with that name is already registered.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>counterName</ParamName>
                    <ParamType>ByteString</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>generator</ParamName>
                    <ParamType>CounterEventGenerator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>topologyChangeListener</ParamName>
                    <ParamType>TopologyChangeListener</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>registerUserListener</MethodName>
            <MethodComment>/** 
 * It registers an user's  {@link CounterListener} for a specific counter.
 * @param counterName  The counter's name to listen.
 * @param userListener The {@link CounterListener} to be invoked.
 * @return The {@link Handle} for the {@link CounterListener}.
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>counterName</ParamName>
                    <ParamType>ByteString</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>userListener</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ByRef&lt;Handle&lt;T&gt;&gt; [handleByRef=new ByRef&lt;&gt;(null)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>counters;computeIfPresent;[counterName, (name,holder) -&gt; holder.addListener(userListener,handleByRef)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>listenOn</MethodName>
            <MethodComment>/** 
 * It registers the cache listeners if they aren't already registered.
 * @param cache The {@link Cache} to register the listener.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cache</ParamName>
                    <ParamType>? extends CounterKey</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>Holder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>generator</ParamName>
                    <ParamType>CounterEventGenerator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>topologyChangeListener</ParamName>
                    <ParamType>TopologyChangeListener</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addListener</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Holder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>userListener</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>handleByRef</ParamName>
                    <ParamType>Handle&lt;T&gt;</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CounterListenerResponse&lt;T&gt; [handle=new CounterListenerResponse&lt;&gt;(userListener,this)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>userListeners;add;[handle]</InnerMethodInvoke>
                <InnerMethodInvoke>handleByRef;set;[handle]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeListener</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>userListener</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>userListeners;remove;[userListener]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTopologyChangeListener</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>TopologyChangeListener</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>CounterListenerResponse</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>listener</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>holder</ParamName>
                    <ParamType>Holder</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCounterListener</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>remove</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>holder;removeListener;[this]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onUpdate</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>event</ParamName>
                    <ParamType>CounterEvent</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>equals</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>o</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CounterListenerResponse&lt;?&gt; [that=(CounterListenerResponse&lt;?&gt;)o]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hashCode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>updateState</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>event</ParamName>
                    <ParamType>? extends CounterKey</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CounterKey [key=event.getKey()]</InnerVar>
                <InnerVar>Holder [holder=counters.get(key.getCounterName())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;triggerUserListener;[holder.userListeners, holder.generator.generate(key,event.getValue())]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>triggerUserListener</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>userListeners</ParamName>
                    <ParamType>CounterListenerResponse&lt;?&gt;</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>event</ParamName>
                    <ParamType>CounterEvent</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>userListenerExecutor;execute;[() -&gt; userListeners.parallelStream().forEach(l -&gt; l.onUpdate(event))]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>topologyChanged</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>event</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>counters.values().parallelStream().map(Holder::getTopologyChangeListener).filter(Objects::nonNull);forEach;[TopologyChangeListener::topologyChanged]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>