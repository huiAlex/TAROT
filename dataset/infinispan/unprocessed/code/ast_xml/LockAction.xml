<Class>
    <Id>631</Id>
    <Package>org.infinispan.remoting.inboundhandler.action</Package>
    <ClassName>LockAction</ClassName>
    <SuperClass>BaseLockingAction</SuperClass>
    <SuperInterfaceList>
        <SuperInterface>LockListener</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>LockAction  /** 
 * An  {@link Action} implementation that acquire the locks.&lt;p/&gt; It returns  {@link ActionStatus#READY} when the locks are available to acquired or the acquisition failed (timeout ordeadlock).
 * @author Pedro Ruivo
 * @since 8.0
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>lockManager</FieldName>
            <FieldType>LockManager</FieldType>
        </Field>
        <Field>
            <FieldName>notifier</FieldName>
            <FieldType>CompletableFuture</FieldType>
        </Field>
        <Field>
            <FieldName>notifier</FieldName>
            <FieldType>Void</FieldType>
        </Field>
        <Field>
            <FieldName>lockPromise</FieldName>
            <FieldType>LockPromise</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>LockAction</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lockManager</ParamName>
                    <ParamType>LockManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>clusteringDependentLogic</ParamName>
                    <ParamType>ClusteringDependentLogic</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checking</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ActionStatus</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ignored</ParamName>
                    <ParamType>ActionState</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LockPromise [promise=lockPromise]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>init</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ActionStatus</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>state</ParamName>
                    <ParamType>ActionState</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Object [lockOwner=getLockOwner(state)]</InnerVar>
                <InnerVar>long [timeout=state.getTimeout()]</InnerVar>
                <InnerVar>List&lt;Object&gt; [keysToLock=getAndUpdateFilteredKeys(state)]</InnerVar>
                <InnerVar>TxInvocationContext [context=createContext(state)]</InnerVar>
                <InnerVar>LockPromise [promise=keysToLock.size() == 1 ? lockManager.lock(keysToLock.get(0),lockOwner,timeout,TimeUnit.MILLISECONDS) : lockManager.lockAll(keysToLock,lockOwner,timeout,TimeUnit.MILLISECONDS)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLockOwner</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>state</ParamName>
                    <ParamType>ActionState</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>RemoteLockCommand [command=state.getCommand()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addListener</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>listener</ParamName>
                    <ParamType>ActionListener</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>notifier;thenRun;[listener::onComplete]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onException</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>state</ParamName>
                    <ParamType>ActionState</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Object [lockOwner=getLockOwner(state)]</InnerVar>
                <InnerVar>List&lt;Object&gt; [keysToLock=getAndUpdateFilteredKeys(state)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>lockManager;unlockAll;[keysToLock, lockOwner]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onEvent</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>state</ParamName>
                    <ParamType>LockState</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>notifier;complete;[null]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createContext</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>state</ParamName>
                    <ParamType>ActionState</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>RemoteLockCommand [command=state.getCommand()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>