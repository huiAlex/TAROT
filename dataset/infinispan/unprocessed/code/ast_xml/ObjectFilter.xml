<Class>
    <Id>1246</Id>
    <Package>org.infinispan.objectfilter</Package>
    <ClassName>ObjectFilter</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ObjectFilter  /** 
 * A filter that tests if an object matches a pre-defined condition and returns either the original instance or the projection, depending on how the filter was created. The projection is represented as an Object[]. If the given instance does not match the filter will just return null.
 * @author anistor@redhat.com
 * @since 7.0
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getEntityTypeName</MethodName>
            <MethodComment>/** 
 * The fully qualified entity type name accepted by this filter.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getProjection</MethodName>
            <MethodComment>/** 
 * The array of '.' separated path names of the projected fields if any, or  {@code null} otherwise.
 */
</MethodComment>
            <ReturnType>String[]</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getProjectionTypes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Class&lt;?&gt;[]</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getParameterNames</MethodName>
            <MethodComment>/** 
 * Returns the parameter names or an empty Set if there are no parameters.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getParameters</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>withParameters</MethodName>
            <MethodComment>/** 
 * Creates a new ObjectFilter based on current one and the given parameters.
 */
</MethodComment>
            <ReturnType>ObjectFilter</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>namedParameters</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSortFields</MethodName>
            <MethodComment>/** 
 * The array of sort specifications if defined, or  {@code null} otherwise.
 */
</MethodComment>
            <ReturnType>SortField[]</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getComparator</MethodName>
            <MethodComment>/** 
 * The comparator corresponding to the 'order by' clause, if any.
 * @return the Comparator or {@code null} if no 'order by' was specified ({@link #getSortFields()} also returns {@code null})
 */
</MethodComment>
            <ReturnType>Comparable[]</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>filter</MethodName>
            <MethodComment>/** 
 * Tests if an object instance matches the filter.
 * @param instance the instance to test; this is never {@code null}
 * @return a {@code FilterResult} if there is a match or {@code null} otherwise
 */
</MethodComment>
            <ReturnType>FilterResult</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>instance</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getInstance</MethodName>
            <MethodComment>/** 
 * Returns the matched object. This is non-null unless projections are present.
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getProjection</MethodName>
            <MethodComment>/** 
 * Returns the projection, if a projection was requested or  {@code null} otherwise.
 */
</MethodComment>
            <ReturnType>Object[]</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSortProjection</MethodName>
            <MethodComment>/** 
 * Returns the projection of fields used for sorting, if sorting was requested or  {@code null} otherwise.
 */
</MethodComment>
            <ReturnType>Comparable[]</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>