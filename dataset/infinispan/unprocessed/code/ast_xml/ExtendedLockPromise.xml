<Class>
    <Id>3077</Id>
    <Package>org.infinispan.util.concurrent.locks</Package>
    <ClassName>ExtendedLockPromise</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>LockPromise</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ExtendedLockPromise  /** 
 * An extended  {@link LockPromise} interface that allows a better control over it.
 * @author Pedro Ruivo
 * @since 8.0
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>cancel</MethodName>
            <MethodComment>/** 
 * It cancels the  {@link LockPromise} if possible.
 * @param cause the cancellation cause. The possible values are {@link LockState#DEADLOCKED} and {@link LockState#TIMED_OUT}.
 * @throws IllegalArgumentException if the argument {@code cause} is not valid.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cause</ParamName>
                    <ParamType>LockState</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRequestor</MethodName>
            <MethodComment>/** 
 * @return the lock owner associated to this {@link LockPromise}.
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOwner</MethodName>
            <MethodComment>/** 
 * @return the current lock owner.
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>