<Class>
    <Id>1490</Id>
    <Package>org.infinispan.notifications.cachelistener.event</Package>
    <ClassName>CacheEntryRemovedEvent</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>CacheEntryEvent</SuperInterface>
        <SuperInterface>K</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>CacheEntryRemovedEvent  /** 
 * This event subtype is passed in to any method annotated with  {@link org.infinispan.notifications.cachelistener.annotation.CacheEntryRemoved}. &lt;p /&gt; The  {@link #getValue()} method would return the &lt;i&gt;old&lt;/i&gt; value prior to deletion, if &lt;tt&gt;isPre()&lt;/tt&gt; is &lt;tt&gt;true&lt;/tt&gt;.If &lt;tt&gt;isPre()&lt;/tt&gt; is &lt;tt&gt;false&lt;/tt&gt;,  {@link #getValue()} will return &lt;tt&gt;null&lt;/tt&gt;.
 * @author Manik Surtani
 * @since 4.0
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getValue</MethodName>
            <MethodComment>/** 
 * Retrieves the value of the entry being deleted. &lt;p /&gt;
 * @return the value of the entry being deleted, if &lt;tt&gt;isPre()&lt;/tt&gt; is &lt;tt&gt;true&lt;/tt&gt;.  &lt;tt&gt;null&lt;/tt&gt; otherwise.
 */
</MethodComment>
            <ReturnType>V</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOldValue</MethodName>
            <MethodComment>/** 
 * Regardless of whether &lt;tt&gt;isPre()&lt;/tt&gt; is &lt;tt&gt;true&lt;/tt&gt; or is &lt;tt&gt;false&lt;/tt&gt;, this method returns the value of the entry being deleted. This method is useful for situations where cache listeners need to know what the old value being deleted is when getting &lt;tt&gt;isPre()&lt;/tt&gt; is &lt;tt&gt;false&lt;/tt&gt; callbacks.
 * @return the value of the entry being deleted, regardless of&lt;tt&gt;isPre()&lt;/tt&gt; value
 */
</MethodComment>
            <ReturnType>V</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isCommandRetried</MethodName>
            <MethodComment>/** 
 * This will be true if the write command that caused this had to be retried again due to a topology change.  This could be a sign that this event has been duplicated or another event was dropped and replaced (eg: ModifiedEvent replaced CreateEvent)
 * @return Whether the command that caused this event was retried
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>