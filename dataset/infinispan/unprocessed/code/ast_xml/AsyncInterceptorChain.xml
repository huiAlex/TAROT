<Class>
    <Id>2668</Id>
    <Package>org.infinispan.interceptors</Package>
    <ClassName>AsyncInterceptorChain</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>AsyncInterceptorChain  /** 
 * Interceptor chain using  {@link AsyncInterceptor}s. Experimental: The ability to modify the interceptors at runtime may be removed in future versions.
 * @author Dan Berindei
 * @since 9.0
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getInterceptors</MethodName>
            <MethodComment>/** 
 * @return An immutable list of the current interceptors.
 */
</MethodComment>
            <ReturnType>AsyncInterceptor</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addInterceptor</MethodName>
            <MethodComment>/** 
 * Inserts the given interceptor at the specified position in the chain (0 based indexing).
 * @throws IllegalArgumentException if the position is invalid (e.g. 5 and there are only 2 interceptorsin the chain)
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>interceptor</ParamName>
                    <ParamType>AsyncInterceptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>position</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeInterceptor</MethodName>
            <MethodComment>/** 
 * Removes the interceptor at the given position.
 * @throws IllegalArgumentException if the position is invalid (e.g. 5 and there are only 2 interceptorsin the chain)
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>position</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>size</MethodName>
            <MethodComment>/** 
 * Returns the number of interceptors in the chain.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeInterceptor</MethodName>
            <MethodComment>/** 
 * Removes all the occurrences of supplied interceptor type from the chain.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>? extends AsyncInterceptor</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addInterceptorAfter</MethodName>
            <MethodComment>/** 
 * Adds a new interceptor in list after an interceptor of a given type.
 * @return true if the interceptor was added; i.e. the {@code afterInterceptor} exists
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>toAdd</ParamName>
                    <ParamType>AsyncInterceptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>afterInterceptor</ParamName>
                    <ParamType>? extends AsyncInterceptor</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addInterceptorBefore</MethodName>
            <MethodComment>/** 
 * Adds a new interceptor in list before an interceptor of a given type.
 * @return true if the interceptor was added; i.e. the {@code beforeInterceptor} exists
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>toAdd</ParamName>
                    <ParamType>AsyncInterceptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>beforeInterceptor</ParamName>
                    <ParamType>? extends AsyncInterceptor</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>replaceInterceptor</MethodName>
            <MethodComment>/** 
 * Replaces an existing interceptor of the given type in the interceptor chain with a new interceptor instance passed as parameter.
 * @param replacingInterceptor        the interceptor to add to the interceptor chain
 * @param toBeReplacedInterceptorType the type of interceptor that should be swapped with the new one
 * @return true if the interceptor was replaced
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>replacingInterceptor</ParamName>
                    <ParamType>AsyncInterceptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>toBeReplacedInterceptorType</ParamName>
                    <ParamType>? extends AsyncInterceptor</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>appendInterceptor</MethodName>
            <MethodComment>/** 
 * Appends at the end.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ci</ParamName>
                    <ParamType>AsyncInterceptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isCustom</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>invoke</MethodName>
            <MethodComment>/** 
 * Walks the command through the interceptor chain. The received ctx is being passed in. &lt;p&gt;Note: Reusing the context for multiple invocations is allowed, however most context implementations are not thread-safe.&lt;/p&gt;
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>InvocationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>command</ParamName>
                    <ParamType>VisitableCommand</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>invokeAsync</MethodName>
            <MethodComment>/** 
 * Walks the command through the interceptor chain. The received ctx is being passed in.
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>InvocationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>command</ParamName>
                    <ParamType>VisitableCommand</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findInterceptorExtending</MethodName>
            <MethodComment>/** 
 * Returns the first interceptor extending the given class, or  {@code null} if there is none.
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>interceptorClass</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findInterceptorWithClass</MethodName>
            <MethodComment>/** 
 * Returns the first interceptor with the given class, or  {@code null} if there is none.
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>interceptorClass</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>containsInstance</MethodName>
            <MethodComment>/** 
 * Checks whether the chain contains the supplied interceptor instance.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>interceptor</ParamName>
                    <ParamType>AsyncInterceptor</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>containsInterceptorType</MethodName>
            <MethodComment>/** 
 * Checks whether the chain contains an interceptor with the given class.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>interceptorType</ParamName>
                    <ParamType>? extends AsyncInterceptor</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>containsInterceptorType</MethodName>
            <MethodComment>/** 
 * Checks whether the chain contains an interceptor with the given class, or a subclass.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>interceptorType</ParamName>
                    <ParamType>? extends AsyncInterceptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>alsoMatchSubClasses</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>