<Class>
    <Id>1960</Id>
    <Package>org.infinispan.atomic</Package>
    <ClassName>AtomicMapLookup</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>AtomicMapLookup  /** 
 * A helper that locates or safely constructs and registers atomic maps with a given cache.  This should be the &lt;b&gt;only&lt;/b&gt; way AtomicMaps are created/retrieved, to prevent concurrent creation, registration and possibly overwriting of such a map within the cache.
 * @author Manik Surtani
 * @see AtomicMap
 * @since 4.0
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getAtomicMap</MethodName>
            <MethodComment>/** 
 * Retrieves an atomic map from a given cache, stored under a given key.  If an atomic map did not exist, one is created and registered in an atomic fashion.
 * @param cache underlying cache
 * @param key   key under which the atomic map exists
 * @param &lt; MK &gt;  key param of the cache
 * @param &lt; K &gt;   key param of the AtomicMap
 * @param &lt; V &gt;   value param of the AtomicMap
 * @return an AtomicMap
 */
</MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cache</ParamName>
                    <ParamType>MK</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>MK</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFineGrainedAtomicMap</MethodName>
            <MethodComment>/** 
 * Retrieves a fine grained atomic map from a given cache, stored under a given key. If a fine grained atomic map did not exist, one is created and registered in an atomic fashion.
 * @param cache underlying cache
 * @param key   key under which the atomic map exists
 * @param &lt; MK &gt;  key param of the cache
 * @param &lt; K &gt;   key param of the AtomicMap
 * @param &lt; V &gt;   value param of the AtomicMap
 * @return an AtomicMap
 */
</MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cache</ParamName>
                    <ParamType>MK</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>MK</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAtomicMap</MethodName>
            <MethodComment>/** 
 * Retrieves an atomic map from a given cache, stored under a given key.
 * @param cache          underlying cache
 * @param key            key under which the atomic map exists
 * @param createIfAbsent if true, a new atomic map is created if one doesn't exist; otherwise null is returned if themap didn't exist.
 * @param &lt; MK &gt;           key param of the cache
 * @param &lt; K &gt;            key param of the AtomicMap
 * @param &lt; V &gt;            value param of the AtomicMap
 * @return an AtomicMap, or null if one did not exist.
 */
</MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cache</ParamName>
                    <ParamType>MK</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>MK</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>createIfAbsent</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFineGrainedAtomicMap</MethodName>
            <MethodComment>/** 
 * Retrieves an atomic map from a given cache, stored under a given key.
 * @param cache          underlying cache
 * @param key            key under which the atomic map exists
 * @param createIfAbsent if true, a new atomic map is created if one doesn't exist; otherwise null is returned if themap didn't exist.
 * @param &lt; MK &gt;           key param of the cache
 * @param &lt; K &gt;            key param of the AtomicMap
 * @param &lt; V &gt;            value param of the AtomicMap
 * @return an AtomicMap, or null if one did not exist.
 */
</MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cache</ParamName>
                    <ParamType>MK</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>MK</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>createIfAbsent</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMap</MethodName>
            <MethodComment>/** 
 * Retrieves an atomic map from a given cache, stored under a given key.
 * @param cache          underlying cache
 * @param key            key under which the atomic map exists
 * @param createIfAbsent if true, a new atomic map is created if one doesn't exist; otherwise null is returned if themap didn't exist.
 * @param fineGrained    if true, and createIfAbsent is true then created atomic map will be fine grained.
 * @return an AtomicMap, or null if one did not exist.
 */
</MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cache</ParamName>
                    <ParamType>MK</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>MK</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>createIfAbsent</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fineGrained</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getReadOnlyAtomicMap</MethodName>
            <MethodComment>/** 
 * Retrieves an atomic map from a given cache, stored under a given key, for reading only.  The atomic map returned will not support updates, and if the map did not in fact exist, an empty map is returned.
 * @param cache underlying cache
 * @param key   key under which the atomic map exists
 * @param &lt; MK &gt;  key param of the cache
 * @param &lt; K &gt;   key param of the AtomicMap
 * @param &lt; V &gt;   value param of the AtomicMap
 * @return an immutable, read-only map
 */
</MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cache</ParamName>
                    <ParamType>MK</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>MK</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AtomicMap&lt;K,V&gt; [am=getAtomicMap(cache,key,false)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeAtomicMap</MethodName>
            <MethodComment>/** 
 * Removes the atomic map associated with the given key from the underlying cache.
 * @param cache underlying cache
 * @param key   key under which the atomic map exists
 * @param &lt; MK &gt;  key param of the cache
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cache</ParamName>
                    <ParamType>MK</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>MK</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>FineGrainedAtomicMapProxyImpl;removeMap;[(Cache&lt;Object,Object&gt;)cache, key]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>