<Class>
    <Id>2058</Id>
    <Package>org.infinispan.context</Package>
    <ClassName>InvocationContextContainer</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>InvocationContextContainer  /** 
 * Manages the association between an  {@link org.infinispan.context.InvocationContext} and the calling thread.
 * @author Manik Surtani (manik AT infinispan DOT org)
 * @author Mircea.Markus@jboss.com
 * @deprecated Since 9.0, this interface is going to be moved to an internal package.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getInvocationContext</MethodName>
            <MethodComment>/** 
 * Returns the  {@link InvocationContext} that is currently associated with the calling thread. Important:implementations of this method are most likely expensive, involving thread locals. It is recommended to cache the result of this method rather than repeating the call.
 * @throws IllegalStateException if there is no context associated with the current thread.
 * @param quiet
 */
</MethodComment>
            <ReturnType>InvocationContext</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>quiet</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setThreadLocal</MethodName>
            <MethodComment>/** 
 * Associate the InvocationContext parameter with the calling thread.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>InvocationContext</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clearThreadLocal</MethodName>
            <MethodComment>/** 
 * Remove the stored InvocationContext from the calling thread. Must be called as each thread exists the interceptor chain.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clearThreadLocal</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>InvocationContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;clearThreadLocal;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>