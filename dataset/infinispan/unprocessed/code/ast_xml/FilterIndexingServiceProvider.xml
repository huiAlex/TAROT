<Class>
    <Id>3191</Id>
    <Package>org.infinispan.notifications.cachelistener.filter</Package>
    <ClassName>FilterIndexingServiceProvider</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>FilterIndexingServiceProvider  /** 
 * A service provider for filter indexing services. This is supposed to perform the filtering operation in a more efficient way than directly executing the filter by calling the  {@link org.infinispan.notifications.cachelistener.filter.CacheEventFilterConverter#filterAndConvert(Object,Object,Metadata,Object,Metadata,EventType)} method. Implementations are discovered via the {@link java.util.ServiceLoader} or {@link org.infinispan.commons.util.ServiceFinder} mechanism. Implementations may havetheir dependencies injected using the  {@link org.infinispan.factories.annotations.Inject} annotation.
 * @author anistor@redhat.com
 * @since 7.2
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>start</MethodName>
            <MethodComment>/** 
 * Start the provider. This is called after the dependencies are injected.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>supportsFilter</MethodName>
            <MethodComment>/** 
 * Reports whether this provider supports the given filter type.
 * @param indexedFilter an indexable filter
 * @return {@code true} if the filter is supported, {@code false} otherwise
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>indexedFilter</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>interceptListenerInvocation</MethodName>
            <MethodComment>/** 
 * Starts handling an invocation that uses an  {@link IndexedFilter}.
 * @param invocation the invocation to handle
 * @param &lt; K &gt;        cache key type
 * @param &lt; V &gt;        cache value type
 * @return the wrapped invocation
 */
</MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>invocation</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>registerListenerInvocations</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>isClustered</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isPrimaryOnly</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>filterAndConvert</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indexedFilter</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>listeners</ParamName>
                    <ParamType>Class&lt;? extends Annotation&gt;</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>keyDataConversion</ParamName>
                    <ParamType>DataConversion</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>valueDataConversion</ParamName>
                    <ParamType>DataConversion</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>stop</MethodName>
            <MethodComment>/** 
 * Stop the provider.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>