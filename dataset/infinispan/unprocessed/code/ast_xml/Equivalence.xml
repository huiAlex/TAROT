<Class>
    <Id>2312</Id>
    <Package>org.infinispan.commons.equivalence</Package>
    <ClassName>Equivalence</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Serializable</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Equivalence  /** 
 * An interface that allows custom implementations for objects that are comparable based on equality, hash code calculations, or according to {@link Comparable} rules, but where the behaviour provided by the JDK, orexternal libraries, cannot be modified, for example: arrays. The interface is marked to be  {@link Serializable} because multiplecollection extensions within the Infinispan code base contain references to them, and since these are potentially  {@link Serializable}, they might be persisted somehow.
 * @author Galder Zamarre√±o
 * @since 5.3
 * @Deprecated Since 9.0, Equivalence is to be removed (byte[] are directly supported)
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>hashCode</MethodName>
            <MethodComment>/** 
 * Returns a hash code value for the object passed. As an example, implementors can provide an alternative implementation for the hash code calculation for arrays. So, instead of relying on {@link Object#hashCode()}, call  {@link java.util.Arrays#hashCode()}.
 * @param obj instance to calculate hash code for
 * @return a hash code value for the object passed as parameter
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>obj</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>equals</MethodName>
            <MethodComment>/** 
 * Indicates whether the objects passed are "equal to" each other. As an example, implementors can provide an alternative implementation for the equals for arrays. So, instead of relying on {@link Object#equals(Object)}}, call  {@link java.util.Arrays#equals(Object[],Object[])}.
 * @param obj to be compared with second parameter
 * @param otherObj to be compared with first parameter
 * @return &lt;code&gt;true&lt;/code&gt; if both objects are the same;&lt;code&gt;false&lt;/code&gt; otherwise
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>obj</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>otherObj</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment>/** 
 * Returns a string representation of the given object.
 * @param obj whose string representation is to be returned
 * @return a string representation of the passed object
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>obj</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isComparable</MethodName>
            <MethodComment>/** 
 * Returns whether the given object is comparable. In other words, if given an instance of the object, a sensible comparison can be computed using  {@link #compare(Object,Object)} method.
 * @param obj instance to check if it's comparable
 * @return &lt;code&gt;true&lt;/code&gt; if the object is comparable;&lt;code&gt;false&lt;/code&gt; otherwise
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>obj</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compare</MethodName>
            <MethodComment>/** 
 * Compares the two given objects for order. Returns a negative integer, zero, or a positive integer as the first object is less than, equal to, or greater than the second object.
 * @param obj first object to be compared
 * @param otherObj second object to be compared
 * @return a negative integer, zero, or a positive integer as thefirst object is less than, equal to, or greater than the second object
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>obj</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>otherObj</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>