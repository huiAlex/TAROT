<Class>
    <Id>2710</Id>
    <Package>org.infinispan.server.core.admin.embeddedserver</Package>
    <ClassName>CacheCreateTask</ClassName>
    <SuperClass>AdminServerTask</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>CacheCreateTask  /** 
 * Admin operation to create a cache Parameters: &lt;ul&gt; &lt;li&gt;&lt;strong&gt;name&lt;/strong&gt; the name of the cache to remove&lt;/li&gt; &lt;li&gt;&lt;strong&gt;flags&lt;/strong&gt; &lt;/li&gt; &lt;/ul&gt;
 * @author Tristan Tarrant
 * @since 9.1
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>PARAMETERS</FieldName>
            <FieldType>Set</FieldType>
        </Field>
        <Field>
            <FieldName>PARAMETERS</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getTaskContextName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTaskOperationName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getParameters</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>execute</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheManager</ParamName>
                    <ParamType>EmbeddedCacheManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parameters</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>flags</ParamName>
                    <ParamType>AdminFlag</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [name=requireParameter(parameters,"name")]</InnerVar>
                <InnerVar>String [template=getParameter(parameters,"template")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cacheManager.executor().submitConsumer(localManager -&gt; {
  ConfigurationBuilder builder=new ConfigurationBuilder();
  if (template != null) {
    builder.read(localManager.getCacheConfiguration(template));
  }
 else {
    Configuration parent=localManager.getDefaultCacheConfiguration();
    if (parent != null)     builder.read(parent);
  }
  builder.template(false);
  localManager.defineConfiguration(name,builder.build());
  localManager.getCache(name);
  return null;
}
,(address,value,throwable) -&gt; {
  if (throwable != null) {
    log.fatal("Cache startup encountered exception on node " + address,throwable);
  }
}
);join;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>