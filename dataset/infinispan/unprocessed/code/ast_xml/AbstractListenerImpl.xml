<Class>
    <Id>3938</Id>
    <Package>org.infinispan.notifications.impl</Package>
    <ClassName>AbstractListenerImpl</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>AbstractListenerImpl  /** 
 * Functionality common to both  {@link org.infinispan.notifications.cachemanagerlistener.CacheManagerNotifierImpl} and{@link org.infinispan.notifications.cachelistener.CacheNotifierImpl}
 * @param &lt; T &gt; Defines the type of event that will be used by the subclass
 * @param &lt; L &gt; Defines the type of ListenerInvocations that the subclasses use
 * @author Manik Surtani
 * @author William Burns
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>listenersMap</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>listenersMap</FieldName>
            <FieldType>Class&lt;? extends Annotation&gt;</FieldType>
        </Field>
        <Field>
            <FieldName>target</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>method</FieldName>
            <FieldType>Method</FieldType>
        </Field>
        <Field>
            <FieldName>annotation</FieldName>
            <FieldType>Class</FieldType>
        </Field>
        <Field>
            <FieldName>annotation</FieldName>
            <FieldType>? extends Annotation</FieldType>
        </Field>
        <Field>
            <FieldName>sync</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>classLoader</FieldName>
            <FieldType>ClassLoader</FieldType>
        </Field>
        <Field>
            <FieldName>subject</FieldName>
            <FieldType>Subject</FieldType>
        </Field>
        <Field>
            <FieldName>syncProcessor</FieldName>
            <FieldType>ExecutorService</FieldType>
        </Field>
        <Field>
            <FieldName>asyncProcessor</FieldName>
            <FieldType>ExecutorService</FieldType>
        </Field>
        <Field>
            <FieldName>target</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>method</FieldName>
            <FieldType>Method</FieldType>
        </Field>
        <Field>
            <FieldName>sync</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>classLoader</FieldName>
            <FieldType>WeakReference</FieldType>
        </Field>
        <Field>
            <FieldName>classLoader</FieldName>
            <FieldType>ClassLoader</FieldType>
        </Field>
        <Field>
            <FieldName>subject</FieldName>
            <FieldType>Subject</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getTarget</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMethod</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Method</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setAnnotation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>AbstractInvocationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>annotation</ParamName>
                    <ParamType>? extends Annotation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isSync</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getClassLoader</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClassLoader</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSubject</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Subject</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setTarget</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>AbstractInvocationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>target</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setMethod</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>AbstractInvocationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>method</ParamName>
                    <ParamType>Method</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setSync</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>AbstractInvocationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sync</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setClassLoader</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>AbstractInvocationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classLoader</ParamName>
                    <ParamType>ClassLoader</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setSubject</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>AbstractInvocationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>subject</ParamName>
                    <ParamType>Subject</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>build</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>L</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>injectExecutor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>executor</ParamName>
                    <ParamType>ExecutorService</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>start</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>stop</MethodName>
            <MethodComment>/** 
 * Removes all listeners from the notifier
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLog</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Log</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAllowedMethodAnnotations</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Class&lt;? extends Annotation&gt;</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>l</ParamName>
                    <ParamType>Listener</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getListenerCollectionForAnnotation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>L</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>annotation</ParamName>
                    <ParamType>? extends Annotation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;L&gt; [list=listenersMap.get(annotation)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeListener</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>listener</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeListenerInvocation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>L</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>annotation</ParamName>
                    <ParamType>? extends Annotation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>listener</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;L&gt; [l=getListenerCollectionForAnnotation(annotation)]</InnerVar>
                <InnerVar>Set&lt;L&gt; [markedForRemoval=new HashSet&lt;L&gt;(4)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>l;removeAll;[markedForRemoval]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getListeners</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Set&lt;Object&gt; [result=new HashSet&lt;Object&gt;(listenersMap.size())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>validateAndAddListenerInvocations</MethodName>
            <MethodComment>/** 
 * Loops through all valid methods on the object passed in, and caches the relevant methods as  {@link ListenerInvocation} for invocation by reflection.The builder provided will be used to create the listener invocations.  This method will set the target, subject sync, and methods as needed.  If other values are needed to be set they should be invoked before passing to this method.
 * @param listener object to be considered as a listener.
 * @param builder The builder to use to build the invocation
 * @return {@code true} if annotated listener methods were found or {@code false} otherwise
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>listener</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>builder</ParamName>
                    <ParamType>AbstractInvocationBuilder</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Listener [l=testListenerClassValidity(listener.getClass())]</InnerVar>
                <InnerVar>boolean [foundMethods=false]</InnerVar>
                <InnerVar>Map&lt;Class&lt;? extends Annotation&gt;,Class&lt;?&gt;&gt; [allowedListeners=getAllowedMethodAnnotations(l)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>builder;setTarget;[listener]</InnerMethodInvoke>
                <InnerMethodInvoke>builder;setSubject;[Security.getSubject()]</InnerMethodInvoke>
                <InnerMethodInvoke>builder;setSync;[l.sync()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>validateAndAddFilterListenerInvocations</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>listener</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>builder</ParamName>
                    <ParamType>AbstractInvocationBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>filterAnnotations</ParamName>
                    <ParamType>Class&lt;? extends Annotation&gt;</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Listener [l=testListenerClassValidity(listener.getClass())]</InnerVar>
                <InnerVar>boolean [foundMethods=false]</InnerVar>
                <InnerVar>Map&lt;Class&lt;? extends Annotation&gt;,Class&lt;?&gt;&gt; [allowedListeners=getAllowedMethodAnnotations(l)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>builder;setTarget;[listener]</InnerMethodInvoke>
                <InnerMethodInvoke>builder;setSubject;[Security.getSubject()]</InnerMethodInvoke>
                <InnerMethodInvoke>builder;setSync;[l.sync()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>canApply</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>filterAnnotations</ParamName>
                    <ParamType>Class&lt;? extends Annotation&gt;</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>annotationClass</ParamName>
                    <ParamType>? extends Annotation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findListenerCallbacks</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Class&lt;? extends Annotation&gt;</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>listener</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Set&lt;Class&lt;? extends Annotation&gt;&gt; [listenerInterests=new HashSet&lt;&gt;()]</InnerVar>
                <InnerVar>Listener [l=testListenerClassValidity(listener.getClass())]</InnerVar>
                <InnerVar>Map&lt;Class&lt;? extends Annotation&gt;,Class&lt;?&gt;&gt; [allowedListeners=getAllowedMethodAnnotations(l)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testListenerClassValidity</MethodName>
            <MethodComment>/** 
 * Tests if a class is properly annotated as a CacheListener and returns the Listener annotation.
 * @param listenerClass class to inspect
 * @return the Listener annotation
 */
</MethodComment>
            <ReturnType>Listener</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>listenerClass</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Listener [l=ReflectionUtil.getAnnotation(listenerClass,Listener.class)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testListenerMethodValidity</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>m</ParamName>
                    <ParamType>Method</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>allowedParameter</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>annotationName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>suspendIfNeeded</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Transaction</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>resumeIfNeeded</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>transaction</ParamName>
                    <ParamType>Transaction</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ListenerInvocationImpl</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>target</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>method</ParamName>
                    <ParamType>Method</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sync</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classLoader</ParamName>
                    <ParamType>ClassLoader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>subject</ParamName>
                    <ParamType>Subject</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>invoke</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>event</ParamName>
                    <ParamType>A</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Runnable [r=() -&gt; {
  ClassLoader contextClassLoader=null;
  Transaction transaction=suspendIfNeeded();
  if (classLoader.get() != null) {
    contextClassLoader=SecurityActions.setContextClassLoader(classLoader.get());
  }
  try {
    if (subject != null) {
      try {
        Security.doAs(subject,(PrivilegedExceptionAction&lt;Void&gt;)() -&gt; {
          getLog().tracef("Invoking listener: %s passing event %s using subject",target,event);
          method.invoke(target,event);
          return null;
        }
);
      }
 catch (      PrivilegedActionException e) {
        Throwable cause=e.getCause();
        if (cause instanceof InvocationTargetException) {
          throw (InvocationTargetException)cause;
        }
 else         if (cause instanceof IllegalAccessException) {
          throw (IllegalAccessException)cause;
        }
 else {
          throw new InvocationTargetException(cause);
        }
      }
    }
 else {
      getLog().tracef("Invoking listener: %s passing event %s",target,event);
      method.invoke(target,event);
    }
  }
 catch (  InvocationTargetException exception) {
    Throwable cause=getRealException(exception);
    if (sync) {
      throw getLog().exceptionInvokingListener(cause.getClass().getName(),method,target,cause);
    }
 else {
      getLog().unableToInvokeListenerMethod(method,target,cause);
    }
  }
catch (  IllegalAccessException exception) {
    getLog().unableToInvokeListenerMethodAndRemoveListener(method,target,exception);
    removeListener(target);
  }
 finally {
    if (classLoader.get() != null) {
      SecurityActions.setContextClassLoader(contextClassLoader);
    }
    resumeIfNeeded(transaction);
  }
}
]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTarget</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRealException</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Throwable</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>re</ParamName>
                    <ParamType>Throwable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Throwable [cause=re.getCause()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>