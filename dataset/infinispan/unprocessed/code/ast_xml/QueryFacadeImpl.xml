<Class>
    <Id>813</Id>
    <Package>org.infinispan.query.remote.impl</Package>
    <ClassName>QueryFacadeImpl</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>QueryFacade</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>QueryFacadeImpl  /** 
 * A query facade implementation for both Lucene based queries and non-indexed in-memory queries. All work is delegated to  {@link RemoteQueryEngine}.
 * @author anistor@redhat.com
 * @since 6.0
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>TYPE_FIELD_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>query</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>byte[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cache</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>query</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AuthorizationManager [authorizationManager=SecurityActions.getCacheAuthorizationManager(cache)]</InnerVar>
                <InnerVar>BaseRemoteQueryEngine [queryEngine=SecurityActions.getCacheComponentRegistry(cache).getComponent(BaseRemoteQueryEngine.class)]</InnerVar>
                <InnerVar>Marshaller [compatMarshaller=null]</InnerVar>
                <InnerVar>Configuration [cacheConfiguration=SecurityActions.getCacheConfiguration(cache)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeResponse</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>QueryResponse</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>query</ParamName>
                    <ParamType>BaseQuery</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;?&gt; [list=query.list()]</InnerVar>
                <InnerVar>int [numResults=list.size()]</InnerVar>
                <InnerVar>String[] [projection=query.getProjection()]</InnerVar>
                <InnerVar>int [projSize=projection != null ? projection.length : 0]</InnerVar>
                <InnerVar>List&lt;WrappedMessage&gt; [results=new ArrayList&lt;&gt;(projSize == 0 ? numResults : numResults * projSize)]</InnerVar>
                <InnerVar>QueryResponse [response=new QueryResponse()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>response;setTotalResults;[query.getResultSize()]</InnerMethodInvoke>
                <InnerMethodInvoke>response;setNumResults;[numResults]</InnerMethodInvoke>
                <InnerMethodInvoke>response;setProjectionSize;[projSize]</InnerMethodInvoke>
                <InnerMethodInvoke>response;setResults;[results]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>