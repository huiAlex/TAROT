<Class>
    <Id>608</Id>
    <Package>org.infinispan.server.test.query</Package>
    <ClassName>ProtobufMetadataManagerDMROperationsIT</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ProtobufMetadataManagerDMROperationsIT  /** 
 * Exercise all DMR ops exposed for ProtobufMetadataManager.
 * @author anistor@redhat.com
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>containerName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>server</FieldName>
            <FieldType>RemoteInfinispanServer</FieldType>
        </Field>
        <Field>
            <FieldName>controller</FieldName>
            <FieldType>ModelControllerClient</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>setUp</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>tearDown</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testOperations</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>ModelNode [op=getOperation("get-proto-schema-names")]</InnerVar>
                <InnerVar>ModelNode [result=controller.execute(op)]</InnerVar>
                <InnerVar>ModelNode [urlList=new ModelNode().add(getClass().getResource("/sample_bank_account/bank.proto").toString())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertEquals;[SUCCESS, result.get(OUTCOME).asString()]</InnerMethodInvoke>
                <InnerMethodInvoke>op.get("file-names");set;[result.get(RESULT).asList()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[SUCCESS, result.get(OUTCOME).asString()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[SUCCESS, result.get(OUTCOME).asString()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["[]", result.get(RESULT).asString()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[SUCCESS, result.get(OUTCOME).asString()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["[]", result.get(RESULT).asString()]</InnerMethodInvoke>
                <InnerMethodInvoke>op.get("file-names");set;[new ModelNode().add("test1.proto")]</InnerMethodInvoke>
                <InnerMethodInvoke>op.get("file-contents");set;[new ModelNode().add("package test;")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[SUCCESS, result.get(OUTCOME).asString()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[SUCCESS, result.get(OUTCOME).asString()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["[\"test1.proto\"]", result.get(RESULT).asString()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[SUCCESS, result.get(OUTCOME).asString()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["[]", result.get(RESULT).asString()]</InnerMethodInvoke>
                <InnerMethodInvoke>op.get("file-name");set;["test1.proto"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[SUCCESS, result.get(OUTCOME).asString()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["package test;", result.get(RESULT).asString()]</InnerMethodInvoke>
                <InnerMethodInvoke>op.get("file-names");set;[new ModelNode().add("test2.proto")]</InnerMethodInvoke>
                <InnerMethodInvoke>op.get("file-urls");set;[urlList]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[SUCCESS, result.get(OUTCOME).asString()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[SUCCESS, result.get(OUTCOME).asString()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["[\"test1.proto\",\"test2.proto\"]", result.get(RESULT).asString()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[SUCCESS, result.get(OUTCOME).asString()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["[]", result.get(RESULT).asString()]</InnerMethodInvoke>
                <InnerMethodInvoke>op.get("file-names");set;[new ModelNode().add("test3.proto")]</InnerMethodInvoke>
                <InnerMethodInvoke>op.get("file-contents");set;[new ModelNode().add("kabooom")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[SUCCESS, result.get(OUTCOME).asString()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[SUCCESS, result.get(OUTCOME).asString()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["[\"test1.proto\",\"test2.proto\",\"test3.proto\"]", result.get(RESULT).asString()]</InnerMethodInvoke>
                <InnerMethodInvoke>op.get("file-name");set;["test3.proto"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[SUCCESS, result.get(OUTCOME).asString()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["kabooom", result.get(RESULT).asString()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[SUCCESS, result.get(OUTCOME).asString()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["[\"test3.proto\"]", result.get(RESULT).asString()]</InnerMethodInvoke>
                <InnerMethodInvoke>op.get("file-name");set;["test3.proto"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[SUCCESS, result.get(OUTCOME).asString()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["java.lang.IllegalStateException: Syntax error in test3.proto at 1:8: unexpected label: kabooom", result.get(RESULT).asString()]</InnerMethodInvoke>
                <InnerMethodInvoke>op.get("file-names");set;[new ModelNode().add("test3.proto")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[SUCCESS, result.get(OUTCOME).asString()]</InnerMethodInvoke>
                <InnerMethodInvoke>op.get("file-name");set;["test3.proto"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[FAILED, result.get(OUTCOME).asString()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["DGISPN0118: Failed to invoke operation: File does not exist : test3.proto", result.get(FAILURE_DESCRIPTION).asString()]</InnerMethodInvoke>
                <InnerMethodInvoke>op.get("file-name");set;["test3.proto"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[FAILED, result.get(OUTCOME).asString()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["DGISPN0118: Failed to invoke operation: File does not exist : test3.proto", result.get(FAILURE_DESCRIPTION).asString()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[SUCCESS, result.get(OUTCOME).asString()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["[]", result.get(RESULT).asString()]</InnerMethodInvoke>
                <InnerMethodInvoke>op.get("file-names");set;[new ModelNode().add("test1.proto").add("test2.proto")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[SUCCESS, result.get(OUTCOME).asString()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOperation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ModelNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>operationName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PathAddress [address=PathAddress.pathAddress(PathElement.pathElement(ModelDescriptionConstants.SUBSYSTEM,InfinispanExtension.SUBSYSTEM_NAME)).append("cache-container",containerName)]</InnerVar>
                <InnerVar>ModelNode [op=new ModelNode()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>op.get(OP);set;[operationName]</InnerMethodInvoke>
                <InnerMethodInvoke>op.get(OP_ADDR);set;[address.toModelNode()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>