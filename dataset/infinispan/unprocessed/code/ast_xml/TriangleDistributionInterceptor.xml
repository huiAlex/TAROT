<Class>
    <Id>718</Id>
    <Package>org.infinispan.interceptors.distribution</Package>
    <ClassName>TriangleDistributionInterceptor</ClassName>
    <SuperClass>NonTxDistributionInterceptor</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>TriangleDistributionInterceptor  /** 
 * Non-transactional interceptor used by distributed caches that supports concurrent writes. &lt;p&gt; It is implemented based on the Triangle algorithm. &lt;p&gt; The  {@link GetKeyValueCommand} reads the value locally if it is available (the node is an owner or the value isstored in L1). If it isn't available, a remote request is made. The  {@link DataWriteCommand} is performed as follow:&lt;ul&gt; &lt;li&gt;The command if forwarded to the primary owner of the key.&lt;/li&gt; &lt;li&gt;The primary owner locks the key and executes the operation; sends the  {@link BackupWriteRpcCommand} to the backup owners; releases the lock; sends the{@link SuccessfulResponse} or {@link UnsuccessfulResponse} back to the originator.&lt;/li&gt;&lt;li&gt;The backup owner applies the update and sends a  {@link BackupAckCommand} back to the originator.&lt;/li&gt; &lt;li&gt;The originator collects the ack from all the owners andreturns.&lt;/li&gt; &lt;/ul&gt; The  {@link PutMapCommand} is performed in a similar way: &lt;ul&gt; &lt;li&gt;The subset of the map is splitby primary owner.&lt;/li&gt; &lt;li&gt;The primary owner locks the key and executes the command; splits the keys by backup owner and send them; and replies to the originator.&lt;/li&gt; &lt;li&gt;The backup owner applies the update and sends back the  {@link BackupMultiKeyAckCommand} to the originator.&lt;/li&gt; &lt;li&gt;The originator collects all the acknowledges from all ownersand returns.&lt;/li&gt; &lt;/ul&gt; The acknowledges management is done by the  {@link CommandAckCollector}. &lt;p&gt; If a topology changes while a command is executed, an  {@link OutdatedTopologyException} is thrown. The {@link StateTransferInterceptor} will catch it and retries the command.&lt;p&gt; TODO: finish the wiki page and add a link to it!
 * @author Pedro Ruivo
 * @since 9.0
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>trace</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>commandAckCollector</FieldName>
            <FieldType>CommandAckCollector</FieldType>
        </Field>
        <Field>
            <FieldName>commandsFactory</FieldName>
            <FieldType>CommandsFactory</FieldType>
        </Field>
        <Field>
            <FieldName>triangleOrderManager</FieldName>
            <FieldType>TriangleOrderManager</FieldType>
        </Field>
        <Field>
            <FieldName>localAddress</FieldName>
            <FieldType>Address</FieldType>
        </Field>
        <Field>
            <FieldName>backups</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>backups</FieldName>
            <FieldType>Address</FieldType>
        </Field>
        <Field>
            <FieldName>primaries</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>primaries</FieldName>
            <FieldType>Address</FieldType>
        </Field>
        <Field>
            <FieldName>cacheTopology</FieldName>
            <FieldType>LocalizedCacheTopology</FieldType>
        </Field>
        <Field>
            <FieldName>entryCount</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>perSegmentKeyValue</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>perSegmentKeyValue</FieldName>
            <FieldType>Integer</FieldType>
        </Field>
        <Field>
            <FieldName>cacheTopology</FieldName>
            <FieldType>LocalizedCacheTopology</FieldType>
        </Field>
        <Field>
            <FieldName>entryCount</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>mergeMaps</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>responses</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>resultMap</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Map&lt;Object,Object&gt; [remoteMap=(Map&lt;Object,Object&gt;)((SuccessfulResponse)responses.values().iterator().next()).getResponseValue()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>inject</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>commandAckCollector</ParamName>
                    <ParamType>CommandAckCollector</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>commandsFactory</ParamName>
                    <ParamType>CommandsFactory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>triangleOrderManager</ParamName>
                    <ParamType>TriangleOrderManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>start</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitPutKeyValueCommand</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>InvocationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>command</ParamName>
                    <ParamType>PutKeyValueCommand</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Throwable</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitPutMapCommand</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>InvocationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>command</ParamName>
                    <ParamType>PutMapCommand</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Throwable</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitRemoveCommand</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>InvocationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>command</ParamName>
                    <ParamType>RemoveCommand</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Throwable</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitReplaceCommand</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>InvocationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>command</ParamName>
                    <ParamType>ReplaceCommand</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Throwable</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitComputeCommand</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>InvocationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>command</ParamName>
                    <ParamType>ComputeCommand</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Throwable</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitComputeIfAbsentCommand</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>InvocationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>command</ParamName>
                    <ParamType>ComputeIfAbsentCommand</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Throwable</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>handleRemotePutMapCommand</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>InvocationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>command</ParamName>
                    <ParamType>PutMapCommand</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LocalizedCacheTopology [cacheTopology=checkTopologyId(command)]</InnerVar>
                <InnerVar>VisitableCommand.LoadType [loadType=command.loadType()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;sendToBackups;[command, command.getMap(), cacheTopology]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sendToBackups</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>command</ParamName>
                    <ParamType>PutMapCommand</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>entries</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cacheTopology</ParamName>
                    <ParamType>LocalizedCacheTopology</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BackupOwnerClassifier [filter=new BackupOwnerClassifier(cacheTopology,entries.size())]</InnerVar>
                <InnerVar>int [topologyId=command.getTopologyId()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>entries.entrySet();forEach;[filter::add]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>handleLocalPutMapCommand</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>InvocationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>command</ParamName>
                    <ParamType>PutMapCommand</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LocalizedCacheTopology [cacheTopology=checkTopologyId(command)]</InnerVar>
                <InnerVar>PrimaryOwnerClassifier [filter=new PrimaryOwnerClassifier(cacheTopology,command.getMap().size())]</InnerVar>
                <InnerVar>boolean [sync=isSynchronous(command)]</InnerVar>
                <InnerVar>VisitableCommand.LoadType [loadType=command.loadType()]</InnerVar>
                <InnerVar>Map&lt;Object,Object&gt; [localEntries=filter.primaries.remove(localAddress)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>command.getMap().entrySet();forEach;[filter::add]</InnerMethodInvoke>
                <InnerMethodInvoke>null;forwardToPrimaryOwners;[command, filter]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkRemoteGetIfNeeded</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>InvocationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>command</ParamName>
                    <ParamType>C</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>keys</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cacheTopology</ParamName>
                    <ParamType>LocalizedCacheTopology</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>needsPreviousValue</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;CompletableFuture&lt;?&gt;&gt; [futureList=new ArrayList&lt;&gt;(keys.size())]</InnerVar>
                <InnerVar>int [size=futureList.size()]</InnerVar>
                <InnerVar>CompletableFuture[] [array=new CompletableFuture[size]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>futureList;toArray;[array]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>wrapKeyExternally</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>InvocationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>command</ParamName>
                    <ParamType>C</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>futureList</ParamName>
                    <ParamType>CompletableFuture&lt;?&gt;</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>forwardToPrimaryOwners</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>command</ParamName>
                    <ParamType>PutMapCommand</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>splitter</ParamName>
                    <ParamType>PrimaryOwnerClassifier</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>forwardToPrimaryOwners</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Map&lt;Object,Object&gt;</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>command</ParamName>
                    <ParamType>PutMapCommand</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>splitter</ParamName>
                    <ParamType>PrimaryOwnerClassifier</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>localResult</ParamName>
                    <ParamType>Map&lt;Object,Object&gt;</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CompletableFuture&lt;Map&lt;Object,Object&gt;&gt; [future=localResult]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>handleDataWriteCommand</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>InvocationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>command</ParamName>
                    <ParamType>AbstractDataWriteCommand</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LocalizedCacheTopology [topology=checkTopologyId(command)]</InnerVar>
                <InnerVar>DistributionInfo [distributionInfo=topology.getDistribution(command.getKey())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>remoteBackupOwnerWrite</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>InvocationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>command</ParamName>
                    <ParamType>DataWriteCommand</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CacheEntry [entry=context.lookupEntry(command.getKey())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>localPrimaryOwnerWrite</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>InvocationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>command</ParamName>
                    <ParamType>DataWriteCommand</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>distributionInfo</ParamName>
                    <ParamType>DistributionInfo</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>remotePrimaryOwnerWrite</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>InvocationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>command</ParamName>
                    <ParamType>DataWriteCommand</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>distributionInfo</ParamName>
                    <ParamType>DistributionInfo</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sendToBackups</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>distributionInfo</ParamName>
                    <ParamType>DistributionInfo</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>command</ParamName>
                    <ParamType>DataWriteCommand</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>backupOwners</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CommandInvocationId [id=command.getCommandInvocationId()]</InnerVar>
                <InnerVar>int [segmentId=distributionInfo.segmentId()]</InnerVar>
                <InnerVar>long [sequenceNumber=triangleOrderManager.next(segmentId,command.getTopologyId())]</InnerVar>
                <InnerVar>BackupWriteRpcCommand [backupWriteRpcCommand=commandsFactory.buildBackupWriteRpcCommand(command)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>backupWriteRpcCommand;setSequence;[sequenceNumber]</InnerMethodInvoke>
                <InnerMethodInvoke>rpcManager;sendToMany;[backupOwners, backupWriteRpcCommand, DeliverOrder.NONE]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>localWriteInvocation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>InvocationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>command</ParamName>
                    <ParamType>DataWriteCommand</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>distributionInfo</ParamName>
                    <ParamType>DistributionInfo</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CommandInvocationId [invocationId=command.getCommandInvocationId()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>forwardToPrimary</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>command</ParamName>
                    <ParamType>DataWriteCommand</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>distributionInfo</ParamName>
                    <ParamType>DistributionInfo</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>collector</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CompletableFuture&lt;Map&lt;Address,Response&gt;&gt; [remoteInvocation=rpcManager.invokeRemotelyAsync(Collections.singletonList(distributionInfo.primary()),command,defaultSyncOptions)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>remoteInvocation;handle;[(responses,throwable) -&gt; {
  if (throwable != null) {
    collector.primaryException(CompletableFutures.extractException(throwable));
  }
 else {
    ValidResponse response=(ValidResponse)responses.values().iterator().next();
    if (!response.isSuccessful()) {
      command.fail();
    }
    collector.primaryResult(response.getResponseValue(),response.isSuccessful());
  }
  return null;
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkTopologyId</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>topologyId</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>collector</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [currentTopologyId=stateTransferManager.getCacheTopology().getTopologyId()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PrimaryOwnerClassifier</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheTopology</ParamName>
                    <ParamType>LocalizedCacheTopology</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>entryCount</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [memberSize=cacheTopology.getMembers().size()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>add</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>entry</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [segment=cacheTopology.getSegment(entry.getKey())]</InnerVar>
                <InnerVar>DistributionInfo [distributionInfo=cacheTopology.getDistributionForSegment(segment)]</InnerVar>
                <InnerVar>Address [primaryOwner=distributionInfo.primary()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>primaries.computeIfAbsent(primaryOwner,address -&gt; new HashMap&lt;&gt;(entryCount));put;[entry.getKey(), entry.getValue()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>BackupOwnerClassifier</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheTopology</ParamName>
                    <ParamType>LocalizedCacheTopology</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>entryCount</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>add</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>entry</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>perSegmentKeyValue.computeIfAbsent(cacheTopology.getSegment(entry.getKey()),address -&gt; new HashMap&lt;&gt;(entryCount));put;[entry.getKey(), entry.getValue()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>