<Class>
    <Id>136</Id>
    <Package>org.infinispan.persistence.spi</Package>
    <ClassName>AdvancedCacheWriter</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>CacheWriter</SuperInterface>
        <SuperInterface>K</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>AdvancedCacheWriter  /** 
 * Defines advanced functionality for persisting data to an external storage.
 * @author Mircea Markus
 * @since 6.0
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>clear</MethodName>
            <MethodComment>/** 
 * Removes all the data from the storage.
 * @throws PersistenceException in case of an error, e.g. communicating with the external storage
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>purge</MethodName>
            <MethodComment>/** 
 * Using the thread in the pool, removed all the expired data from the persistence storage. For each removed entry, the supplied listener is invoked. &lt;p&gt; When this method returns all entries will be purged and no tasks will be running due to this loader in the provided executor.  If however an exception is thrown there could be tasks still pending or running in the executor.
 * @throws PersistenceException in case of an error, e.g. communicating with the external storage
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>threadPool</ParamName>
                    <ParamType>Executor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>listener</ParamName>
                    <ParamType>? super K</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>entryPurged</MethodName>
            <MethodComment>/** 
 * Optional. If possible,  {@link AdvancedCacheWriter} implementors should invoke this method for every entry thatis purged from the store. One of the side effects of not implementing this method is that listeners do not receive  {@link org.infinispan.notifications.cachelistener.annotation.CacheEntryExpired} for the entries thatare removed from the persistent store directly.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>