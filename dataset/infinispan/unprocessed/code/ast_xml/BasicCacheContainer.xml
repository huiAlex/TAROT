<Class>
    <Id>1597</Id>
    <Package>org.infinispan.commons.api</Package>
    <ClassName>BasicCacheContainer</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Lifecycle</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>BasicCacheContainer  /** 
 * &lt;tt&gt;BasicCacheContainer&lt;/tt&gt; defines the methods used to obtain a  {@link org.infinispan.api.BasicCache}. &lt;p/&gt;
 * @see org.infinispan.manager.EmbeddedCacheManager
 * @see org.infinispan.client.hotrod.RemoteCacheManager
 * @author Manik Surtani (&lt;a href="mailto:manik@jboss.org"&gt;manik@jboss.org&lt;/a&gt;)
 * @author Galder Zamarre√±o
 * @author Mircea.Markus@jboss.com
 * @since 4.0
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>DEFAULT_CACHE_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getCache</MethodName>
            <MethodComment>/** 
 * Retrieves the default cache associated with this cache container. &lt;p/&gt; As such, this method is always guaranteed to return the default cache, unless one has not been supplied to the cache container. &lt;p /&gt; &lt;b&gt;NB:&lt;/b&gt; Shared caches are supported (and in fact encouraged) but if they are used it's the users responsibility to ensure that &lt;i&gt;at least one&lt;/i&gt; but &lt;i&gt;only one&lt;/i&gt; caller calls stop() on the cache, and it does so with the awareness that others may be using the cache.
 * @return the default cache.
 */
</MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCache</MethodName>
            <MethodComment>/** 
 * Retrieves a named cache from the system.  If the cache has been previously created with the same name, the running cache instance is returned.  Otherwise, this method attempts to create the cache first. &lt;p/&gt; In the case of a  {@link org.infinispan.manager.EmbeddedCacheManager}: when creating a new cache, this method will use the configuration passed in to the EmbeddedCacheManager on construction, as a template, and then optionally apply any overrides previously defined for the named cache using the  {@link EmbeddedCacheManager#defineConfiguration(String,org.infinispan.config.Configuration)}or  {@link EmbeddedCacheManager#defineConfiguration(String,String,org.infinispan.config.Configuration)}methods, or declared in the configuration file. &lt;p /&gt; &lt;b&gt;NB:&lt;/b&gt; Shared caches are supported (and in fact encouraged) but if they are used it's the users responsibility to ensure that &lt;i&gt;at least one&lt;/i&gt; but &lt;i&gt;only one&lt;/i&gt; caller calls stop() on the cache, and it does so with the awareness that others may be using the cache.
 * @param cacheName name of cache to retrieve
 * @return a cache instance identified by cacheName
 */
</MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>