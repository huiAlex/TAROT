<Class>
    <Id>3678</Id>
    <Package>org.infinispan.util.concurrent</Package>
    <ClassName>SynchronizedRestarter</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>SynchronizedRestarter  /** 
 * A class that handles restarts of components via multiple threads.  Specifically, if a component needs to be restarted and several threads may demand a restart but only one thread should be allowed to restart the component, then use this class. &lt;p/&gt; What this class guarantees is that several threads may come in while a component is being restarted, but they will block until the restart is complete. &lt;p/&gt; This is different from other techniques in that: &lt;ul&gt; &lt;li&gt;A simple compare-and-swap to check whether another thread is already performing a restart will result in the requesting thread returning immediately and potentially attempting to use the resource being restarted.&lt;/li&gt; &lt;li&gt;A synchronized method or use of a lock would result in the thread waiting for the restart to complete, but on completion will attempt to restart the component again.&lt;/li&gt; &lt;/ul&gt; This implementation combines a compare-and-swap to detect a concurrent restart, as well as registering for notification for when the restart completes and then parking the thread if the CAS variable still indicates a restart in progress, and finally deregistering itself in the end.
 * @author Manik Surtani
 * @since 4.0
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>restartInProgress</FieldName>
            <FieldType>AtomicBoolean</FieldType>
        </Field>
        <Field>
            <FieldName>restartWaiters</FieldName>
            <FieldType>ConcurrentHashSet</FieldType>
        </Field>
        <Field>
            <FieldName>restartWaiters</FieldName>
            <FieldType>Thread</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>restartComponent</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>component</ParamName>
                    <ParamType>Lifecycle</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>