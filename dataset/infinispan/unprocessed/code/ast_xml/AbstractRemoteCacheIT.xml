<Class>
    <Id>405</Id>
    <Package>org.infinispan.server.test.client.hotrod</Package>
    <ClassName>AbstractRemoteCacheIT</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>AbstractRemoteCacheIT  /** 
 * Tests for HotRod client and its RemoteCache API. Subclasses must provide a way to get the list of remote HotRod servers and to assert the cache is empty. &lt;p/&gt; Subclasses may be used in Client-Server mode or Hybrid mode where HotRod server runs as a library deployed in an application server.
 * @author Richard Achmatowicz
 * @author Martin Gencur
 * @author Jozef Vilkolak
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>testCache</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>remoteCacheManager</FieldName>
            <FieldType>RemoteCacheManager</FieldType>
        </Field>
        <Field>
            <FieldName>remoteCache</FieldName>
            <FieldType>RemoteCache</FieldType>
        </Field>
        <Field>
            <FieldName>ASYNC_OPS_ENTRY_LOAD</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>name</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>id</FieldName>
            <FieldType>byte</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getServers</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>RemoteInfinispanServer</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initialize</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>remoteCache;clear;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>release</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createFilterArchive</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createConverterArchive</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createFilterConverterArchive</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createKeyValueFilterConverterArchive</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createRemoteCacheManagerConfiguration</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Configuration</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>hotrodPortOverrides</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ConfigurationBuilder [config=new ConfigurationBuilder()]</InnerVar>
                <InnerVar>int [index=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>config.balancingStrategy("org.infinispan.server.test.client.hotrod.HotRodTestRequestBalancingStrategy").balancingStrategy("org.infinispan.client.hotrod.impl.transport.tcp.RoundRobinBalancingStrategy").forceReturnValues(false).tcpNoDelay(true).transportFactory("org.infinispan.client.hotrod.impl.transport.tcp.TcpTransportFactory").marshaller(new GenericJBossMarshaller(Thread.currentThread().getContextClassLoader())).asyncExecutorFactory().factoryClass("org.infinispan.client.hotrod.impl.async.DefaultAsyncExecutorFactory").addExecutorProperty("infinispan.client.hotrod.default_executor_factory.pool_size","10").addExecutorProperty("infinispan.client.hotrod.default_executor_factory.queue_size","100000").keySizeEstimate(64);valueSizeEstimate;[512]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>numEntriesOnServer</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>serverIndex</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testReplaceWithVersionWithLifespan</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [lifespanInSecs=1]</InnerVar>
                <InnerVar>VersionedValue [valueBinary=remoteCache.getVersioned("aKey")]</InnerVar>
                <InnerVar>VersionedValue [entry2=remoteCache.getVersioned("aKey")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertNull;[remoteCache.replace("aKey","aValue")]</InnerMethodInvoke>
                <InnerMethodInvoke>remoteCache;put;["aKey", "aValue"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;[remoteCache.replaceWithVersion("aKey","aNewValue",valueBinary.getVersion(),lifespanInSecs)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotEquals;[entry2.getVersion(), valueBinary.getVersion()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["aNewValue", entry2.getValue()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;sleepForSecs;[lifespanInSecs + 1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNull;[remoteCache.getVersioned("aKey")]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testReplaceOldValue</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>VersionedValue [previous=remoteCache.getWithMetadata("aKey")]</InnerVar>
                <InnerVar>VersionedValue [entry2=remoteCache.getWithMetadata("aKey")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>remoteCache;put;["aKey", "aValue"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;[remoteCache.replace("aKey","aValue","aNewValue")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotEquals;[entry2.getVersion(), previous.getVersion()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["aNewValue", entry2.getValue()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testReplaceOldValueWithLifespan</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [lifespanInMillis=10]</InnerVar>
                <InnerVar>VersionedValue [previous=remoteCache.getWithMetadata("aKey")]</InnerVar>
                <InnerVar>VersionedValue [entry2=remoteCache.getWithMetadata("aKey")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>remoteCache;put;["aKey", "aValue"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;[remoteCache.replace("aKey","aValue","aNewValue",lifespanInMillis,TimeUnit.MILLISECONDS)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotEquals;[entry2.getVersion(), previous.getVersion()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["aNewValue", entry2.getValue()]</InnerMethodInvoke>
                <InnerMethodInvoke>Thread;sleep;[2 * lifespanInMillis]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNull;[remoteCache.getWithMetadata("aKey")]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testReplaceOldValueWithLifespanAndExpiration</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [lifespanInMillis=10]</InnerVar>
                <InnerVar>VersionedValue [previous=remoteCache.getWithMetadata("aKey")]</InnerVar>
                <InnerVar>VersionedValue [entry2=remoteCache.getWithMetadata("aKey")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>remoteCache;put;["aKey", "aValue"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;[remoteCache.replace("aKey","aValue","aNewValue",lifespanInMillis,TimeUnit.MINUTES,lifespanInMillis,TimeUnit.MILLISECONDS)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotEquals;[entry2.getVersion(), previous.getVersion()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["aNewValue", entry2.getValue()]</InnerMethodInvoke>
                <InnerMethodInvoke>Thread;sleep;[2 * lifespanInMillis]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNull;[remoteCache.getWithMetadata("aKey")]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testPut</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertNull;[remoteCache.put("aKey","aValue")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;[remoteCache.containsKey("aKey")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[remoteCache.get("aKey"), "aValue"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testPutWithLifespan</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>long [lifespanInSecs=1]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>remoteCache;put;["lkey", "value", lifespanInSecs, TimeUnit.SECONDS]</InnerMethodInvoke>
                <InnerMethodInvoke>null;sleepForSecs;[lifespanInSecs + 1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNull;[remoteCache.get("lkey")]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testSize</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertEquals;[0, remoteCache.size()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNull;[remoteCache.put("aKey","aValue")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;[remoteCache.containsKey("aKey")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[remoteCache.size(), 1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[remoteCache.size(), 1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNull;[remoteCache.put("anotherKey","anotherValue")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;[remoteCache.containsKey("anotherKey")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[remoteCache.size(), 2]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNull;[remoteCache.remove("anotherKey")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;[!remoteCache.containsKey("anotherKey")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[remoteCache.size(), 1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNull;[remoteCache.remove("aKey")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;[!remoteCache.containsKey("aKey")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[remoteCache.size(), 0]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testIsEmpty</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertTrue;[remoteCache.isEmpty()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNull;[remoteCache.put("aKey","aValue")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;[remoteCache.containsKey("aKey")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;[!remoteCache.isEmpty()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNull;[remoteCache.remove("aKey")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;[!remoteCache.containsKey("aKey")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;[remoteCache.isEmpty()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testContains</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertTrue;[!remoteCache.containsKey("aKey")]</InnerMethodInvoke>
                <InnerMethodInvoke>remoteCache;put;["aKey", "aValue"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;[remoteCache.containsKey("aKey")]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testContainsValue</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertTrue;[!remoteCache.containsValue("aValue")]</InnerMethodInvoke>
                <InnerMethodInvoke>remoteCache;put;["aKey", "aValue"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;[remoteCache.containsValue("aValue")]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testWithFlags</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertNull;[remoteCache.put("aKey","aValue")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;[remoteCache.containsKey("aKey")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["aValue", remoteCache.get("aKey")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNull;[remoteCache.put("aKey","anotherValue")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["anotherValue", remoteCache.get("aKey")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["anotherValue", remoteCache.withFlags(Flag.FORCE_RETURN_VALUE).put("aKey","yetAnotherValue")]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testBulkOperations</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Map&lt;String,String&gt; [mapIn]</InnerVar>
                <InnerVar>Map&lt;String,String&gt; [mapOut=new HashMap&lt;String,String&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mapOut;put;["aKey", "aValue"]</InnerMethodInvoke>
                <InnerMethodInvoke>mapOut;put;["bKey", "bValue"]</InnerMethodInvoke>
                <InnerMethodInvoke>mapOut;put;["cKey", "cValue"]</InnerMethodInvoke>
                <InnerMethodInvoke>remoteCache;putAll;[mapOut]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[mapIn, mapOut]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testBulkOperationsWithLifespan</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>long [lifespanInSecs=1]</InnerVar>
                <InnerVar>Map&lt;String,String&gt; [mapIn=new HashMap&lt;String,String&gt;()]</InnerVar>
                <InnerVar>Map&lt;String,String&gt; [mapOut=new HashMap&lt;String,String&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mapOut;put;["aKey", "aValue"]</InnerMethodInvoke>
                <InnerMethodInvoke>mapOut;put;["bKey", "bValue"]</InnerMethodInvoke>
                <InnerMethodInvoke>mapOut;put;["cKey", "cValue"]</InnerMethodInvoke>
                <InnerMethodInvoke>remoteCache;putAll;[mapOut, lifespanInSecs, TimeUnit.SECONDS]</InnerMethodInvoke>
                <InnerMethodInvoke>null;sleepForSecs;[lifespanInSecs + 1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[mapIn.size(), 0]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testGetBulkWithLimit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Map&lt;String,String&gt; [mapIn]</InnerVar>
                <InnerVar>Map&lt;String,String&gt; [mapOut=new HashMap&lt;String,String&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mapOut;put;["aKey", "aValue"]</InnerMethodInvoke>
                <InnerMethodInvoke>mapOut;put;["bKey", "bValue"]</InnerMethodInvoke>
                <InnerMethodInvoke>mapOut;put;["cKey", "cValue"]</InnerMethodInvoke>
                <InnerMethodInvoke>remoteCache;putAll;[mapOut]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[mapIn.size(), 2]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testGetName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertEquals;[testCache, remoteCache.getName()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testKeySet</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Set&lt;String&gt; [expectedKeySet=new HashSet&lt;String&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>remoteCache;put;["k1", "v1"]</InnerMethodInvoke>
                <InnerMethodInvoke>remoteCache;put;["k2", "v2"]</InnerMethodInvoke>
                <InnerMethodInvoke>remoteCache;put;["k3", "v3"]</InnerMethodInvoke>
                <InnerMethodInvoke>expectedKeySet;add;["k1"]</InnerMethodInvoke>
                <InnerMethodInvoke>expectedKeySet;add;["k2"]</InnerMethodInvoke>
                <InnerMethodInvoke>expectedKeySet;add;["k3"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[expectedKeySet, remoteCache.keySet()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testEntrySet</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Set&lt;Map.Entry&lt;String,String&gt;&gt; [expectedEntrySet=new HashSet&lt;&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>remoteCache;put;["k1", "v1"]</InnerMethodInvoke>
                <InnerMethodInvoke>remoteCache;put;["k2", "v2"]</InnerMethodInvoke>
                <InnerMethodInvoke>remoteCache;put;["k3", "v3"]</InnerMethodInvoke>
                <InnerMethodInvoke>expectedEntrySet;add;[new AbstractMap.SimpleEntry&lt;&gt;("k1","v1")]</InnerMethodInvoke>
                <InnerMethodInvoke>expectedEntrySet;add;[new AbstractMap.SimpleEntry&lt;&gt;("k2","v2")]</InnerMethodInvoke>
                <InnerMethodInvoke>expectedEntrySet;add;[new AbstractMap.SimpleEntry&lt;&gt;("k3","v3")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[expectedEntrySet, remoteCache.entrySet()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testValues</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>List&lt;String&gt; [values=((RemoteCache&lt;?,String&gt;)remoteCache).values().stream().collect(Collectors.toList())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>remoteCache;put;["k1", "v1"]</InnerMethodInvoke>
                <InnerMethodInvoke>remoteCache;put;["k2", "v2"]</InnerMethodInvoke>
                <InnerMethodInvoke>remoteCache;put;["k3", "v3"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[3, values.size()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;[values.contains("v1")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;[values.contains("v2")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;[values.contains("v3")]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testGetWithMetadata</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>MetadataValue&lt;String&gt; [k1=remoteCache.getWithMetadata("k1")]</InnerVar>
                <InnerVar>MetadataValue&lt;String&gt; [k2=remoteCache.getWithMetadata("k2")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>remoteCache;put;["k1", "v1", 10000000, TimeUnit.MICROSECONDS]</InnerMethodInvoke>
                <InnerMethodInvoke>remoteCache;put;["k2", "v2", 10, TimeUnit.SECONDS, 10, TimeUnit.SECONDS]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[k1.getValue(), "v1"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[k1.getLifespan(), 10]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[k1.getMaxIdle(), -1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[k2.getValue(), "v2"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[k2.getLifespan(), 10]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[k2.getMaxIdle(), 10]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testRemoveAsync</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Set&lt;Future&lt;?&gt;&gt; [futures=new HashSet&lt;Future&lt;?&gt;&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertEquals;[0, numEntriesOnServer(0)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testReplaceAsync</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Set&lt;Future&lt;?&gt;&gt; [futures=new HashSet&lt;Future&lt;?&gt;&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>remoteCache;clear;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testGetVersionedCacheEntry</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>VersionedValue [value=remoteCache.getVersioned("aKey")]</InnerVar>
                <InnerVar>VersionedValue [valueBinary=remoteCache.getVersioned("aKey")]</InnerVar>
                <InnerVar>VersionedValue [entry2=remoteCache.getVersioned("aKey")]</InnerVar>
                <InnerVar>VersionedValue [entry3=remoteCache.getVersioned("aKey")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertNull;["expected null but received: " + value, remoteCache.getVersioned("aKey")]</InnerMethodInvoke>
                <InnerMethodInvoke>remoteCache;put;["aKey", "aValue"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["aValue", remoteCache.get("aKey")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotNull;[valueBinary]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[valueBinary.getValue(), "aValue"]</InnerMethodInvoke>
                <InnerMethodInvoke>remoteCache;put;["aKey", "aValue"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[entry2.getValue(), "aValue"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotEquals;[entry2.getVersion(), valueBinary.getVersion()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotEquals;[valueBinary, entry2]</InnerMethodInvoke>
                <InnerMethodInvoke>remoteCache;put;["aKey", "anotherValue"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[entry3.getValue(), "anotherValue"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotEquals;[entry3.getVersion(), entry2.getVersion()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotEquals;[entry3, entry2]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testReplace</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertNull;[remoteCache.replace("aKey","anotherValue")]</InnerMethodInvoke>
                <InnerMethodInvoke>remoteCache;put;["aKey", "aValue"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNull;[remoteCache.replace("aKey","anotherValue")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[remoteCache.get("aKey"), "anotherValue"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testReplaceWithVersion</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>VersionedValue [valueBinary=remoteCache.getVersioned("aKey")]</InnerVar>
                <InnerVar>VersionedValue [entry2=remoteCache.getVersioned("aKey")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertNull;[remoteCache.replace("aKey","aValue")]</InnerMethodInvoke>
                <InnerMethodInvoke>remoteCache;put;["aKey", "aValue"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;[remoteCache.replaceWithVersion("aKey","aNewValue",valueBinary.getVersion())]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotEquals;[entry2.getVersion(), valueBinary.getVersion()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[entry2.getValue(), "aNewValue"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;[!remoteCache.replaceWithVersion("aKey","aNewValue",valueBinary.getVersion())]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testRemove</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertNull;[remoteCache.put("aKey","aValue")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[remoteCache.get("aKey"), "aValue"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNull;[remoteCache.remove("aKey")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;[!remoteCache.containsKey("aKey")]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testRemoveConditional</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertNull;[remoteCache.put("aKey","aValue")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[remoteCache.get("aKey"), "aValue"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertFalse;[remoteCache.remove("aKey","aValue2")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;[remoteCache.containsKey("aKey")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;[remoteCache.remove("aKey","aValue")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertFalse;[remoteCache.containsKey("aKey")]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testRemoveWithVersion</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>VersionedValue [valueBinary=remoteCache.getVersioned("aKey")]</InnerVar>
                <InnerVar>VersionedValue [entry2=remoteCache.getVersioned("aKey")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertTrue;[!remoteCache.removeWithVersion("aKey",12321212l)]</InnerMethodInvoke>
                <InnerMethodInvoke>remoteCache;put;["aKey", "aValue"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;[remoteCache.removeWithVersion("aKey",valueBinary.getVersion())]</InnerMethodInvoke>
                <InnerMethodInvoke>remoteCache;put;["aKey", "aNewValue"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotEquals;[entry2.getVersion(), valueBinary.getVersion()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[entry2.getValue(), "aNewValue"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;[!remoteCache.removeWithVersion("aKey",valueBinary.getVersion())]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testPutIfAbsent</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>remoteCache;putIfAbsent;["aKey", "aValue"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[remoteCache.size(), 1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[remoteCache.get("aKey"), "aValue"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNull;[remoteCache.putIfAbsent("aKey","anotherValue")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[remoteCache.get("aKey"), "aValue"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testPutIfAbsentWithLifespan</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [lifespanInSecs=1]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>remoteCache;putIfAbsent;["aKey", "aValue", lifespanInSecs, TimeUnit.SECONDS, -1, TimeUnit.SECONDS]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[1, remoteCache.size()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["aValue", remoteCache.get("aKey")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;sleepForSecs;[lifespanInSecs + 1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[null, remoteCache.get("akey")]</InnerMethodInvoke>
                <InnerMethodInvoke>remoteCache;putIfAbsent;["aKey", "aValue"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[1, remoteCache.size()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["aValue", remoteCache.get("aKey")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[null, remoteCache.putIfAbsent("aKey","anotherValue",lifespanInSecs,TimeUnit.SECONDS,-1,TimeUnit.SECONDS)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;sleepForSecs;[lifespanInSecs + 1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["aValue", remoteCache.get("aKey")]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testClear</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>remoteCache;put;["aKey", "aValue"]</InnerMethodInvoke>
                <InnerMethodInvoke>remoteCache;put;["aKey2", "aValue"]</InnerMethodInvoke>
                <InnerMethodInvoke>remoteCache;clear;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;[!remoteCache.containsKey("aKey")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;[!remoteCache.containsKey("aKey2")]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testGetRemoteCacheManager</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>RemoteCacheManager [manager=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertEquals;["getRemoteCachemanager() returned incorrect value", manager, remoteCacheManager]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testStats</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>ServerStatistics [remoteStats=remoteCache.stats()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertNotNull;[remoteStats]</InnerMethodInvoke>
                <InnerMethodInvoke>log;tracef;["named stats = %s", remoteStats.getStatsMap()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testUnsupportedOperations</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testClearAsync</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>CompletableFuture&lt;Void&gt; [future=remoteCache.clearAsync()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;fill;[remoteCache, ASYNC_OPS_ENTRY_LOAD]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[ASYNC_OPS_ENTRY_LOAD, numEntriesOnServer(0)]</InnerMethodInvoke>
                <InnerMethodInvoke>future;get;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[0, numEntriesOnServer(0)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testPutAsync</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Future&lt;String&gt; [f=remoteCache.putAsync("k","v")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertNull;[remoteCache.get("k")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertFalse;[f.isCancelled()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNull;[f.get()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;[f.isDone()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["v", remoteCache.get("k")]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testPutWithLifespanAsync</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>long [lifespanInSecs=2]</InnerVar>
                <InnerVar>Set&lt;Future&lt;?&gt;&gt; [futures=new HashSet&lt;Future&lt;?&gt;&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertEquals;[ASYNC_OPS_ENTRY_LOAD, numEntriesOnServer(0)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;sleepForSecs;[lifespanInSecs + 1]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testPutIfAbsentAsync</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Set&lt;Future&lt;?&gt;&gt; [futures=new HashSet&lt;Future&lt;?&gt;&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertEquals;[ASYNC_OPS_ENTRY_LOAD, numEntriesOnServer(0)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["value" + (ASYNC_OPS_ENTRY_LOAD - 1), remoteCache.get("key" + (ASYNC_OPS_ENTRY_LOAD - 1))]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testPutIfAbsentWithLifespanAsync</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>long [lifespanInSecs=2]</InnerVar>
                <InnerVar>Set&lt;Future&lt;?&gt;&gt; [futures=new HashSet&lt;Future&lt;?&gt;&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertEquals;[ASYNC_OPS_ENTRY_LOAD, numEntriesOnServer(0)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["value" + (ASYNC_OPS_ENTRY_LOAD - 1), remoteCache.get("key" + (ASYNC_OPS_ENTRY_LOAD - 1))]</InnerMethodInvoke>
                <InnerMethodInvoke>null;sleepForSecs;[lifespanInSecs + 1]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testReplaceWithVersionWithLifespanAsync</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [lifespanInSecs=2]</InnerVar>
                <InnerVar>VersionedValue [valueBinary=remoteCache.getVersioned("aKey")]</InnerVar>
                <InnerVar>CompletableFuture&lt;Boolean&gt; [future=remoteCache.replaceWithVersionAsync("aKey","aNewValue",valueBinary.getVersion(),lifespanInSecs)]</InnerVar>
                <InnerVar>VersionedValue [entry2=remoteCache.getVersioned("aKey")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertNull;[remoteCache.replace("aKey","aValue")]</InnerMethodInvoke>
                <InnerMethodInvoke>remoteCache;put;["aKey", "aValue"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;[future.get()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotEquals;[entry2.getVersion(), valueBinary.getVersion()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["aNewValue", entry2.getValue()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;sleepForSecs;[lifespanInSecs + 1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNull;[remoteCache.getVersioned("aKey")]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testGetAsync</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Set&lt;Future&lt;?&gt;&gt; [futures=new HashSet&lt;Future&lt;?&gt;&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;fill;[remoteCache, ASYNC_OPS_ENTRY_LOAD]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[ASYNC_OPS_ENTRY_LOAD, numEntriesOnServer(0)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testBulkOperationsAsync</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Map&lt;String,String&gt; [mapIn=new HashMap&lt;String,String&gt;()]</InnerVar>
                <InnerVar>Map&lt;String,String&gt; [mapOut=new HashMap&lt;String,String&gt;()]</InnerVar>
                <InnerVar>CompletableFuture&lt;Void&gt; [future=remoteCache.putAllAsync(mapOut)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;fill;[mapOut, ASYNC_OPS_ENTRY_LOAD]</InnerMethodInvoke>
                <InnerMethodInvoke>future;get;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[mapOut, mapIn]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testBulkOperationsWithLifespanAsync</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>long [lifespanInSecs=3]</InnerVar>
                <InnerVar>Map&lt;String,String&gt; [mapIn=new HashMap&lt;String,String&gt;()]</InnerVar>
                <InnerVar>Map&lt;String,String&gt; [mapOut=new HashMap&lt;String,String&gt;()]</InnerVar>
                <InnerVar>CompletableFuture&lt;Void&gt; [future=remoteCache.putAllAsync(mapOut,lifespanInSecs,TimeUnit.SECONDS)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;fill;[mapOut, ASYNC_OPS_ENTRY_LOAD]</InnerMethodInvoke>
                <InnerMethodInvoke>future;get;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;sleepForSecs;[lifespanInSecs + 2]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[0, mapIn.size()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testReplaceWithVersionAsync</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>VersionedValue [valueBinary=remoteCache.getVersioned("aKey")]</InnerVar>
                <InnerVar>CompletableFuture&lt;Boolean&gt; [future=remoteCache.replaceWithVersionAsync("aKey","aNewValue",valueBinary.getVersion())]</InnerVar>
                <InnerVar>VersionedValue [entry2=remoteCache.getVersioned("aKey")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertNull;[remoteCache.replace("aKey","aValue")]</InnerMethodInvoke>
                <InnerMethodInvoke>remoteCache;put;["aKey", "aValue"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;[future.get()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotEquals;[entry2.getVersion(), valueBinary.getVersion()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["aNewValue", entry2.getValue()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertFalse;[future.get()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testRemoveWithVersionAsync</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>CompletableFuture&lt;Boolean&gt; [future=null]</InnerVar>
                <InnerVar>VersionedValue [valueBinary=remoteCache.getVersioned("aKey")]</InnerVar>
                <InnerVar>VersionedValue [entry2=remoteCache.getVersioned("aKey")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertTrue;[!future.get()]</InnerMethodInvoke>
                <InnerMethodInvoke>remoteCache;put;["aKey", "aValue"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;[future.get()]</InnerMethodInvoke>
                <InnerMethodInvoke>remoteCache;put;["aKey", "aNewValue"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotEquals;[entry2.getVersion(), valueBinary.getVersion()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[entry2.getValue(), "aNewValue"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;[!future.get()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testGetProtocolVersion</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertEquals;["HotRod client, protocol version: 2.6", remoteCache.getProtocolVersion()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testPutGetCustomObject</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Person [p=new Person("Martin")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>remoteCache;put;["k1", p]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[p, remoteCache.get("k1")]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testEventReceiveBasic</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>EventLogListener [eventListener=new EventLogListener()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>remoteCache;addClientListener;[eventListener]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testEventReceiveConditional</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>EventLogListener [eventListener=new EventLogListener()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>remoteCache;addClientListener;[eventListener]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testEventFilteringStatic</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>StaticFilteredEventLogListener [eventListener=new StaticFilteredEventLogListener()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>remoteCache;addClientListener;[eventListener]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testEventFilteringDynamic</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>DynamicFilteredEventLogListener [eventListener=new DynamicFilteredEventLogListener()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>remoteCache;addClientListener;[eventListener, new Object[]{3}, null]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testCustomEvents</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>StaticCustomEventLogListener [eventListener=new StaticCustomEventLogListener()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>remoteCache;addClientListener;[eventListener]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testCustomEventsDynamic</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>DynamicCustomEventLogListener [eventListener=new DynamicCustomEventLogListener()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>remoteCache;addClientListener;[eventListener, null, new Object[]{2}]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testCustomFilterEvents</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>FilterCustomEventLogListener [eventListener=new FilterCustomEventLogListener()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>remoteCache;addClientListener;[eventListener, new Object[]{3}, null]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testIterationWithCustomClasses</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Map&lt;Object,Object&gt; [entryMap=new HashMap&lt;&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>remoteCache;put;["1", new SampleEntity("value1,value2")]</InnerMethodInvoke>
                <InnerMethodInvoke>remoteCache;put;["2", new SampleEntity("value3,value2")]</InnerMethodInvoke>
                <InnerMethodInvoke>remoteCache;put;["ignore", new SampleEntity("whatever")]</InnerMethodInvoke>
                <InnerMethodInvoke>remoteCache;put;["3", new SampleEntity("value7,value8")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[3, entryMap.size()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[Arrays.asList("value1","value2"), ((Summary)entryMap.get("1")).getAttributes()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[Arrays.asList("value3","value2"), ((Summary)entryMap.get("2")).getAttributes()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[Arrays.asList("value7","value8"), ((Summary)entryMap.get("3")).getAttributes()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>accept</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>e</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>entryMap;put;[e.getKey(), e.getValue()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testEventFilteringCustomPojo</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>CustomPojoFilteredEventLogListener [eventListener=new CustomPojoFilteredEventLogListener()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>remoteCache;addClientListener;[eventListener, new Object[]{"two"}, null]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testCustomEventsCustomPojo</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>CustomPojoCustomEventLogListener [eventListener=new CustomPojoCustomEventLogListener()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>remoteCache;addClientListener;[eventListener, null, new Object[]{new Person("two")}]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testCustomFilterEventsCustomPojo</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>CustomPojoFilterCustomEventLogListener [eventListener=new CustomPojoFilterCustomEventLogListener()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>remoteCache;addClientListener;[eventListener, new Object[]{new Id(3)}, null]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>expectOnlyCreatedEvent</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>eventListener</ParamName>
                    <ParamType>EventLogListener</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;expectSingleEvent;[key, eventListener, ClientEvent.Type.CLIENT_CACHE_ENTRY_CREATED]</InnerMethodInvoke>
                <InnerMethodInvoke>null;expectNoEvents;[eventListener, ClientEvent.Type.CLIENT_CACHE_ENTRY_MODIFIED]</InnerMethodInvoke>
                <InnerMethodInvoke>null;expectNoEvents;[eventListener, ClientEvent.Type.CLIENT_CACHE_ENTRY_REMOVED]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>expectOnlyModifiedEvent</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>eventListener</ParamName>
                    <ParamType>EventLogListener</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;expectSingleEvent;[key, eventListener, ClientEvent.Type.CLIENT_CACHE_ENTRY_MODIFIED]</InnerMethodInvoke>
                <InnerMethodInvoke>null;expectNoEvents;[eventListener, ClientEvent.Type.CLIENT_CACHE_ENTRY_CREATED]</InnerMethodInvoke>
                <InnerMethodInvoke>null;expectNoEvents;[eventListener, ClientEvent.Type.CLIENT_CACHE_ENTRY_REMOVED]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>expectOnlyRemovedEvent</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>eventListener</ParamName>
                    <ParamType>EventLogListener</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;expectSingleEvent;[key, eventListener, ClientEvent.Type.CLIENT_CACHE_ENTRY_REMOVED]</InnerMethodInvoke>
                <InnerMethodInvoke>null;expectNoEvents;[eventListener, ClientEvent.Type.CLIENT_CACHE_ENTRY_CREATED]</InnerMethodInvoke>
                <InnerMethodInvoke>null;expectNoEvents;[eventListener, ClientEvent.Type.CLIENT_CACHE_ENTRY_MODIFIED]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>expectSingleEvent</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>eventListener</ParamName>
                    <ParamType>EventLogListener</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>ClientEvent.Type</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertEquals;[0, eventListener.queue(type).size()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>expectNoEvents</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>eventListener</ParamName>
                    <ParamType>EventLogListener</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;expectNoEvents;[eventListener, ClientEvent.Type.CLIENT_CACHE_ENTRY_CREATED]</InnerMethodInvoke>
                <InnerMethodInvoke>null;expectNoEvents;[eventListener, ClientEvent.Type.CLIENT_CACHE_ENTRY_MODIFIED]</InnerMethodInvoke>
                <InnerMethodInvoke>null;expectNoEvents;[eventListener, ClientEvent.Type.CLIENT_CACHE_ENTRY_REMOVED]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>expectNoEvents</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>eventListener</ParamName>
                    <ParamType>EventLogListener</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>ClientEvent.Type</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>Person</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>equals</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>o</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Person [person=(Person)o]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hashCode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>Id</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>id</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>equals</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>o</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Id [id1=(Id)o]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hashCode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fill</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>map</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>entryCount</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>