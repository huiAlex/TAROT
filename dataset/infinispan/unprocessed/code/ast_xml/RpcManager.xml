<Class>
    <Id>1072</Id>
    <Package>org.infinispan.remoting.rpc</Package>
    <ClassName>RpcManager</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>RpcManager  /** 
 * Provides a mechanism for communicating with other caches in the cluster, by formatting and passing requests down to the registered  {@link Transport}.
 * @author Manik Surtani
 * @author Mircea.Markus@jboss.com
 * @since 4.0
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>invokeRemotelyAsync</MethodName>
            <MethodComment>/** 
 * Invokes a command on remote nodes.
 * @param recipients A list of nodes, or {@code null} to invoke the command on all the members of the cluster
 * @param rpc The command to invoke
 * @param options The invocation options
 * @return A future that, when completed, returns the responses from the remote nodes.
 */
</MethodComment>
            <ReturnType>Map&lt;Address,Response&gt;</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>recipients</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rpc</ParamName>
                    <ParamType>ReplicableCommand</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>options</ParamName>
                    <ParamType>RpcOptions</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>invokeRemotely</MethodName>
            <MethodComment>/** 
 * Invokes an RPC call on other caches in the cluster.
 * @param recipients a list of Addresses to invoke the call on.  If this is {@code null}, the call is broadcast to the entire cluster.
 * @param rpc        command to execute remotely.
 * @param options    it configures the invocation. The same instance can be re-used since {@link RpcManager} doesnot change it. Any change in  {@link RpcOptions} during a remote invocation can lead tounpredictable behavior.
 * @return  a map of responses from each member contacted.
 */
</MethodComment>
            <ReturnType>Address</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>recipients</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rpc</ParamName>
                    <ParamType>ReplicableCommand</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>options</ParamName>
                    <ParamType>RpcOptions</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>invokeRemotely</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Address</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rpcs</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>options</ParamName>
                    <ParamType>RpcOptions</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sendTo</MethodName>
            <MethodComment>/** 
 * Asynchronously sends the  {@link ReplicableCommand} to the destination using the specified {@link DeliverOrder}.
 * @param destination  the destination's {@link Address}.
 * @param command      the {@link ReplicableCommand} to send.
 * @param deliverOrder the {@link DeliverOrder} to use.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>destination</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>command</ParamName>
                    <ParamType>ReplicableCommand</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>deliverOrder</ParamName>
                    <ParamType>DeliverOrder</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sendToMany</MethodName>
            <MethodComment>/** 
 * Asynchronously sends the  {@link ReplicableCommand} to the set of destination using the specified {@link DeliverOrder}.
 * @param destinations the collection of destination's {@link Address}. If  {@code null}, it sends to all the members in the cluster.
 * @param command      the {@link ReplicableCommand} to send.
 * @param deliverOrder the {@link DeliverOrder} to use.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>destinations</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>command</ParamName>
                    <ParamType>ReplicableCommand</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>deliverOrder</ParamName>
                    <ParamType>DeliverOrder</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTransport</MethodName>
            <MethodComment>/** 
 * @return a reference to the underlying transport.
 */
</MethodComment>
            <ReturnType>Transport</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMembers</MethodName>
            <MethodComment>/** 
 * Returns members of a cluster scoped to the cache owning this RpcManager. Note that this List is always a subset of  {@link Transport#getMembers()}
 * @return a list of cache scoped cluster members
 */
</MethodComment>
            <ReturnType>Address</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAddress</MethodName>
            <MethodComment>/** 
 * Returns the address associated with this RpcManager or null if not part of the cluster.
 */
</MethodComment>
            <ReturnType>Address</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTopologyId</MethodName>
            <MethodComment>/** 
 * Returns the current topology id. As opposed to the viewId which is updated whenever the cluster changes, the topologyId is updated when a new cache instance is started or removed - this doesn't necessarily coincide with a node being added/removed to the cluster.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRpcOptionsBuilder</MethodName>
            <MethodComment>/** 
 * Creates a new  {@link org.infinispan.remoting.rpc.RpcOptionsBuilder}. &lt;p/&gt; The  {@link org.infinispan.remoting.rpc.RpcOptionsBuilder} is configured with the {@link org.infinispan.remoting.rpc.ResponseMode} and with{@link org.infinispan.remoting.inboundhandler.DeliverOrder#NONE} if the {@link org.infinispan.remoting.rpc.ResponseMode} is synchronous otherwise, with {@link org.infinispan.remoting.inboundhandler.DeliverOrder#PER_SENDER} if asynchronous.
 * @param responseMode the {@link org.infinispan.remoting.rpc.ResponseMode}.
 * @return a new {@link RpcOptionsBuilder} with the default options. The response and deliver mode are set asdescribed.
 */
</MethodComment>
            <ReturnType>RpcOptionsBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>responseMode</ParamName>
                    <ParamType>ResponseMode</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRpcOptionsBuilder</MethodName>
            <MethodComment>/** 
 * Creates a new  {@link org.infinispan.remoting.rpc.RpcOptionsBuilder}.
 * @param responseMode the {@link org.infinispan.remoting.rpc.ResponseMode}.
 * @param deliverOrder  the {@link org.infinispan.remoting.inboundhandler.DeliverOrder}.
 * @return a new {@link RpcOptionsBuilder} with the default options and the response mode and deliver mode set by theparameters.
 */
</MethodComment>
            <ReturnType>RpcOptionsBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>responseMode</ParamName>
                    <ParamType>ResponseMode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>deliverOrder</ParamName>
                    <ParamType>DeliverOrder</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDefaultRpcOptions</MethodName>
            <MethodComment>/** 
 * Creates a new  {@link org.infinispan.remoting.rpc.RpcOptionsBuilder}. &lt;p/&gt; The  {@link org.infinispan.remoting.rpc.RpcOptionsBuilder} is configured with {@link org.infinispan.remoting.inboundhandler.DeliverOrder#NONE} if the {@param sync} is {@code true} otherwise, with{@link org.infinispan.remoting.inboundhandler.DeliverOrder#PER_SENDER}.
 * @param sync {@code true} for Synchronous RpcOptions
 * @return the default Synchronous/Asynchronous RpcOptions
 */
</MethodComment>
            <ReturnType>RpcOptions</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sync</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDefaultRpcOptions</MethodName>
            <MethodComment>/** 
 * Creates a new  {@link org.infinispan.remoting.rpc.RpcOptionsBuilder}.
 * @param sync        {@code true} for Synchronous RpcOptions
 * @param deliverOrder the {@link org.infinispan.remoting.inboundhandler.DeliverOrder} to use.
 * @return the default Synchronous/Asynchronous RpcOptions with the deliver order set by the parameter.
 */
</MethodComment>
            <ReturnType>RpcOptions</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sync</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>deliverOrder</ParamName>
                    <ParamType>DeliverOrder</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>