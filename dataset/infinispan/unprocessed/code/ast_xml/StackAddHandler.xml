<Class>
    <Id>842</Id>
    <Package>org.infinispan.server.jgroups.subsystem</Package>
    <ClassName>StackAddHandler</ClassName>
    <SuperClass>AbstractAddStepHandler</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>StackAddHandler  /** 
 * @author Paul Ferraro
 * @author Richard Achmatowicz
 * @author Radoslav Husar
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>performRuntime</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>OperationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>operation</ParamName>
                    <ParamType>ModelNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>model</ParamName>
                    <ParamType>ModelNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;installRuntimeServices;[context, operation, Resource.Tools.readModel(context.readResource(PathAddress.EMPTY_ADDRESS))]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>OperationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>installRuntimeServices</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>OperationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>operation</ParamName>
                    <ParamType>ModelNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>model</ParamName>
                    <ParamType>ModelNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [name=context.getCurrentAddressValue()]</InnerVar>
                <InnerVar>ServiceTarget [target=context.getServiceTarget()]</InnerVar>
                <InnerVar>Property [property=model.get(TransportResourceDefinition.WILDCARD_PATH.getKey()).asProperty()]</InnerVar>
                <InnerVar>String [type=property.getName()]</InnerVar>
                <InnerVar>ModelNode [transport=property.getValue()]</InnerVar>
                <InnerVar>String [machine=ModelNodes.asString(TransportResourceDefinition.MACHINE.resolveModelAttribute(context,transport))]</InnerVar>
                <InnerVar>String [rack=ModelNodes.asString(TransportResourceDefinition.RACK.resolveModelAttribute(context,transport))]</InnerVar>
                <InnerVar>String [site=ModelNodes.asString(TransportResourceDefinition.SITE.resolveModelAttribute(context,transport))]</InnerVar>
                <InnerVar>JChannelFactoryBuilder [builder=new JChannelFactoryBuilder(name)]</InnerVar>
                <InnerVar>TransportConfigurationBuilder [transportBuilder=builder.setTransport(type).setModule(ModelNodes.asModuleIdentifier(ProtocolResourceDefinition.MODULE.resolveModelAttribute(context,transport))).setShared(TransportResourceDefinition.SHARED.resolveModelAttribute(context,transport).asBoolean()).setTopology(site,rack,machine).setSocketBinding(ModelNodes.asString(ProtocolResourceDefinition.SOCKET_BINDING.resolveModelAttribute(context,transport))).setDiagnosticsSocket(ModelNodes.asString(TransportResourceDefinition.DIAGNOSTICS_SOCKET_BINDING.resolveModelAttribute(context,transport)))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;addProtocolProperties;[context, transport, transportBuilder]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addThreadPoolConfigurationProperties;[ThreadPoolResourceDefinition.DEFAULT, "thread_pool", context, transport, transportBuilder]</InnerMethodInvoke>
                <InnerMethodInvoke>transportBuilder.build(target);install;[]</InnerMethodInvoke>
                <InnerMethodInvoke>builder.build(target);install;[]</InnerMethodInvoke>
                <InnerMethodInvoke>new BinderServiceBuilder&lt;&gt;(JGroupsBindingFactory.createChannelFactoryBinding(name),ProtocolStackServiceName.CHANNEL_FACTORY.getServiceName(name),ChannelFactory.class).build(target);install;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>OperationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeRuntimeServices</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>OperationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>operation</ParamName>
                    <ParamType>ModelNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>model</ParamName>
                    <ParamType>ModelNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [name=context.getCurrentAddressValue()]</InnerVar>
                <InnerVar>Property [transport=model.get(TransportResourceDefinition.WILDCARD_PATH.getKey()).asProperty()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>context;removeService;[JGroupsBindingFactory.createChannelFactoryBinding(name).getBinderServiceName()]</InnerMethodInvoke>
                <InnerMethodInvoke>context;removeService;[ProtocolStackServiceName.CHANNEL_FACTORY.getServiceName(name)]</InnerMethodInvoke>
                <InnerMethodInvoke>context;removeService;[new TransportConfigurationBuilder(name,transport.getName()).getServiceName()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addProtocolProperties</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>B</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>OperationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>protocol</ParamName>
                    <ParamType>ModelNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>builder</ParamName>
                    <ParamType>B</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>OperationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addThreadPoolConfigurationProperties</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>B</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pool</ParamName>
                    <ParamType>ThreadPoolResourceDefinition</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>propertyPrefix</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>OperationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>transport</ParamName>
                    <ParamType>ModelNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>builder</ParamName>
                    <ParamType>B</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ModelNode [threadModel=transport.get(pool.getPathElement().getKeyValuePair())]</InnerVar>
                <InnerVar>long [keepaliveTime=pool.getKeepaliveTime().resolveModelAttribute(context,threadModel).asLong()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>builder.addProperty(propertyPrefix + ".min_threads",pool.getMinThreads().resolveModelAttribute(context,threadModel).asString());addProperty;[propertyPrefix + ".max_threads", pool.getMaxThreads().resolveModelAttribute(context,threadModel).asString()]</InnerMethodInvoke>
                <InnerMethodInvoke>builder;addProperty;[propertyPrefix + ".keep_alive_time", String.valueOf(keepaliveTime)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>OperationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>