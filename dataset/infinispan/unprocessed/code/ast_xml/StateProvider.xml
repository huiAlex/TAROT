<Class>
    <Id>422</Id>
    <Package>org.infinispan.statetransfer</Package>
    <ClassName>StateProvider</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>StateProvider  /** 
 * Handles outbound state transfers.
 * @author anistor@redhat.com
 * @since 5.2
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>isStateTransferInProgress</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onTopologyUpdate</MethodName>
            <MethodComment>/** 
 * Receive notification of topology changes. Cancels all outbound transfers to destinations that are no longer members. The other outbound transfers remain unaffected.
 * @param cacheTopology
 * @param isRebalance
 */
</MethodComment>
            <ReturnType>Void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheTopology</ParamName>
                    <ParamType>CacheTopology</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isRebalance</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTransactionsForSegments</MethodName>
            <MethodComment>/** 
 * Gets the list of transactions that affect keys from the given segments. This is invoked in response to a StateRequestCommand of type StateRequestCommand.Type.GET_TRANSACTIONS.
 * @param destination the address of the requester
 * @param topologyId
 * @param segments
 * @return list transactions and locks for the given segments
 */
</MethodComment>
            <ReturnType>TransactionInfo</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>destination</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>topologyId</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>segments</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getClusterListenersToInstall</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DistributedCallable</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startOutboundTransfer</MethodName>
            <MethodComment>/** 
 * Start to send cache entries that belong to the given set of segments. This is invoked in response to a StateRequestCommand of type StateRequestCommand.Type.START_STATE_TRANSFER. If the applyState field is set to false, then upon delivery at the destination the cache entries are processed by a  {@link StateReceiver} and are not applied to the local cache.
 * @param destination the address of the requester
 * @param topologyId
 * @param segments
 * @param applyState
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>destination</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>topologyId</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>segments</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>applyState</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cancelOutboundTransfer</MethodName>
            <MethodComment>/** 
 * Cancel sending of cache entries that belong to the given set of segments. This is invoked in response to a StateRequestCommand of type StateRequestCommand.Type.CANCEL_STATE_TRANSFER.
 * @param destination the address of the requester
 * @param topologyId
 * @param segments    the segments that we have to cancel transfer for
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>destination</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>topologyId</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>segments</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>start</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>stop</MethodName>
            <MethodComment>/** 
 * Cancels all outbound state transfers. This is executed when the cache is shutting down.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>