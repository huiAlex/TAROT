<Class>
    <Id>3522</Id>
    <Package>org.infinispan.query</Package>
    <ClassName>CacheQuery</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Iterable</SuperInterface>
        <SuperInterface>E</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>CacheQuery  /** 
 * A cache-query is what will be returned when the getQuery() method is run on  {@link org.infinispan.query.impl.SearchManagerImpl}. This object can have methods such as list, setFirstResult,setMaxResults, setFetchSize, getResultSize and setSort. &lt;p/&gt;
 * @author Manik Surtani
 * @author Navin Surtani
 * @author Sanne Grinovero &lt;sanne@hibernate.org&gt; (C) 2011 Red Hat Inc.
 * @author Marko Luksa
 * @see org.infinispan.query.impl.SearchManagerImpl#getQuery(org.apache.lucene.search.Query,Class...)
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>list</MethodName>
            <MethodComment>/** 
 * Returns the results of a search as a list.
 * @return list of objects that were found from the search.
 */
</MethodComment>
            <ReturnType>E</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>iterator</MethodName>
            <MethodComment>/** 
 * Returns the results of a search as a  {@link ResultIterator}. Warning: the return type is an extension of  {@link java.util.Iterator} which introduces a {@link ResultIterator#close()}method. This close method needs to be invoked when the iteration is complete to avoid resource leakage.
 * @param fetchOptions how to fetch results (see @link FetchOptions)
 * @return a QueryResultIterator which can be used to iterate through the results that were found.
 */
</MethodComment>
            <ReturnType>E</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fetchOptions</ParamName>
                    <ParamType>FetchOptions</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>iterator</MethodName>
            <MethodComment>/** 
 * Returns the results of a search as a  {@link ResultIterator}. This calls  {@link CacheQuery#iterator(FetchOptions fetchOptions)}with default FetchOptions; this implies eager loading of all results.
 * @return a ResultIterator which can be used to iterate through the results that were found.
 */
</MethodComment>
            <ReturnType>E</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>firstResult</MethodName>
            <MethodComment>/** 
 * Sets a result with a given index to the first result.
 * @param index of result to be set to the first.
 * @throws IllegalArgumentException if the index given is less than zero.
 */
</MethodComment>
            <ReturnType>E</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>index</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>maxResults</MethodName>
            <MethodComment>/** 
 * Sets the maximum number of results to the number passed in as a parameter.
 * @param numResults that are to be set to the maxResults.
 */
</MethodComment>
            <ReturnType>E</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>numResults</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFacetManager</MethodName>
            <MethodComment>/** 
 * @return return the manager for all faceting related operations
 */
</MethodComment>
            <ReturnType>FacetManager</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getResultSize</MethodName>
            <MethodComment>/** 
 * Gets the total number of results matching the query, ignoring pagination (firstResult, maxResult).
 * @return total number of results.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>explain</MethodName>
            <MethodComment>/** 
 * Return the Lucene  {@link org.apache.lucene.search.Explanation}object describing the score computation for the matching object/document in the current query
 * @param documentId Lucene Document id to be explain. This is NOT the object key
 * @return Lucene Explanation
 */
</MethodComment>
            <ReturnType>Explanation</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>documentId</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sort</MethodName>
            <MethodComment>/** 
 * Allows lucene to sort the results. Integers are sorted in descending order.
 * @param s - lucene sort object
 */
</MethodComment>
            <ReturnType>E</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>Sort</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>projection</MethodName>
            <MethodComment>/** 
 * Defines the Lucene field names projected and returned in a query result Each field is converted back to it's object representation, an Object[] being returned for each "row" &lt;p/&gt; A projectable field must be stored in the Lucene index and use a  {@link org.hibernate.search.bridge.TwoWayFieldBridge}Unless notified in their JavaDoc, all built-in bridges are two-way. All @DocumentId fields are projectable by design. &lt;p/&gt; If the projected field is not a projectable field, null is returned in the object[]
 * @param fields the projected field names
 * @return {@code this} to allow for method chaining, but the type parameter now becomes {@code Object[]}
 */
</MethodComment>
            <ReturnType>Object[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fields</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>enableFullTextFilter</MethodName>
            <MethodComment>/** 
 * Enable a given filter by its name.
 * @param name of filter.
 * @return a FullTextFilter object.
 */
</MethodComment>
            <ReturnType>FullTextFilter</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>disableFullTextFilter</MethodName>
            <MethodComment>/** 
 * Disable a given filter by its name.
 * @param name of filter.
 */
</MethodComment>
            <ReturnType>E</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>filter</MethodName>
            <MethodComment>/** 
 * Allows lucene to filter the results.
 * @param f - lucene filter
 */
</MethodComment>
            <ReturnType>E</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>f</ParamName>
                    <ParamType>Filter</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>timeout</MethodName>
            <MethodComment>/** 
 * Set the timeout for this query. If the query hasn't finished processing before the timeout, an exception will be thrown.
 * @param timeout the timeout duration
 * @param timeUnit the time unit of the timeout parameter
 * @return
 */
</MethodComment>
            <ReturnType>E</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>timeout</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>timeUnit</ParamName>
                    <ParamType>TimeUnit</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>