<Class>
    <Id>3827</Id>
    <Package>org.infinispan.server.websocket</Package>
    <ClassName>ChannelUtils</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ChannelUtils  /** 
 * Channel Utilities.
 * @author &lt;a href="mailto:tom.fennelly@gmail.com"&gt;tom.fennelly@gmail.com&lt;/a&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>logger</FieldName>
            <FieldType>Log</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>pushCacheValue</MethodName>
            <MethodComment>/** 
 * Push a cache entry value out onto the websocket channel (to the browser).
 * @param key   The cache entry key whose value is to be pushed to the browser.
 * @param cache The cache containing the key.
 * @param ctx   The channel context associated with the browser websocket channel..
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cache</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>ChannelHandlerContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Object [value=cache.get(key)]</InnerVar>
                <InnerVar>JsonObject [responseObject=toJSON(key,value,cache.getName())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ctx.channel();writeAndFlush;[new TextWebSocketFrame(responseObject.toString()), ctx.channel().voidPromise()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>pushErrorMessage</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>errorMessage</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>ChannelHandlerContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>JsonObject [errorObject=JsonObject.createNew()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>errorObject;put;[OpHandler.ERROR, errorMessage]</InnerMethodInvoke>
                <InnerMethodInvoke>ctx.channel();writeAndFlush;[new TextWebSocketFrame(errorObject.toString()), ctx.channel().voidPromise()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toJSON</MethodName>
            <MethodComment>/** 
 * Cache key, value and cache-name to JSON string. &lt;p&gt; Note that value objects (like String, Numbers, Characters) are not being converted. &lt;/p&gt;
 * @param key       The cache key.
 * @param value     The cache value.
 * @param cacheName The cache name.
 * @return JSON Object representing a cache entry payload for transmission to the browser channel.
 * @throws java.lang.IllegalStateException In case of complex object which can not be converted to JSON.
 */
</MethodComment>
            <ReturnType>JsonObject</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cacheName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>JsonObject [jsonObject=JsonObject.createNew()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>jsonObject;put;[OpHandler.CACHE_NAME, cacheName]</InnerMethodInvoke>
                <InnerMethodInvoke>jsonObject;put;[OpHandler.KEY, key]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getJsonObject</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>JsonObject</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>JsonObject [valueObject]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>needsJsonConversion</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>