<Class>
    <Id>2976</Id>
    <Package>org.infinispan.it.osgi.util</Package>
    <ClassName>CustomPaxExamRunner</ClassName>
    <SuperClass>PaxExam</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>CustomPaxExamRunner  /** 
 * Custom runner to work around https://issues.apache.org/jira/browse/SUREFIRE-1374
 * @author Dan Berindei
 * @since 9.1
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>savedIn</FieldName>
            <FieldType>InputStream</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>CustomPaxExamRunner</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>klass</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>InitializationError</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>replaceSystemIn</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>klass</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>System;setIn;[new ByteArrayInputStream(new byte[0])]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>notifier</ParamName>
                    <ParamType>RunNotifier</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>notifier;addListener;[new RunListener(){
  @Override public void testStarted(  Description description) throws Exception {
    Class&lt;?&gt; testClass=description.getTestClass();
    if (testClass == null)     return;
    Category categoryAnnotation=testClass.getAnnotation(Category.class);
    if (categoryAnnotation == null)     throw new IllegalStateException("Class " + testClass.getName() + " doesn't have a @Category annotation. "+ "All tests in the integrationtests/osgi module must have "+ "matching @Category and @ExamReactorStrategy annotations.");
    ExamReactorStrategy reactorStrategyAnnotation=testClass.getAnnotation(ExamReactorStrategy.class);
    if (reactorStrategyAnnotation == null) {
      throw new IllegalStateException("Class " + testClass.getName() + " doesn't have a @ExamReactorStrategy annotation. "+ "All tests in the integrationtests/osgi module must have "+ "matching @Category and @ExamReactorStrategy annotations.");
    }
    if (!Arrays.equals(categoryAnnotation.value(),reactorStrategyAnnotation.value())) {
      throw new IllegalStateException("The @Category and @ExamReactorStrategy annotations in class " + testClass.getName() + " do not match.");
    }
  }
  @Override public void testRunStarted(  Description description) throws Exception {
    super.testRunStarted(description);
  }
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testStarted</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>description</ParamName>
                    <ParamType>Description</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Class&lt;?&gt; [testClass=description.getTestClass()]</InnerVar>
                <InnerVar>Category [categoryAnnotation=testClass.getAnnotation(Category.class)]</InnerVar>
                <InnerVar>ExamReactorStrategy [reactorStrategyAnnotation=testClass.getAnnotation(ExamReactorStrategy.class)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testRunStarted</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>description</ParamName>
                    <ParamType>Description</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>