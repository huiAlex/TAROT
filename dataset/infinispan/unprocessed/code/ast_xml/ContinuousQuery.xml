<Class>
    <Id>3084</Id>
    <Package>org.infinispan.query.api.continuous</Package>
    <ClassName>ContinuousQuery</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ContinuousQuery  /** 
 * A container of continuous query listeners for a cache. &lt;p&gt; Implementations are not expected to be threadsafe.
 * @author anistor@redhat.com
 * @since 8.2
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>addContinuousQueryListener</MethodName>
            <MethodComment>/** 
 * Add a listener for a continuous query.
 * @param queryString the query
 * @param listener    the listener
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>queryString</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>listener</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addContinuousQueryListener</MethodName>
            <MethodComment>/** 
 * Add a listener for a continuous query.
 * @param queryString     the query
 * @param namedParameters the query parameters
 * @param listener        the listener
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>queryString</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>namedParameters</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>listener</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addContinuousQueryListener</MethodName>
            <MethodComment>/** 
 * Add a listener for a continuous query.
 * @param query    the query object
 * @param listener the listener
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>query</ParamName>
                    <ParamType>Query</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>listener</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeContinuousQueryListener</MethodName>
            <MethodComment>/** 
 * Remove a continuous query listener.
 * @param listener the listener to remove
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>listener</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getListeners</MethodName>
            <MethodComment>/** 
 * Get the list of currently registered listeners.
 */
</MethodComment>
            <ReturnType>ContinuousQueryListener&lt;K,?&gt;</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeAllListeners</MethodName>
            <MethodComment>/** 
 * Unregisters all listeners.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>