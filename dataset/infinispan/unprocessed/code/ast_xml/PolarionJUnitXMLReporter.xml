<Class>
    <Id>4039</Id>
    <Package>org.infinispan.commons.test</Package>
    <ClassName>PolarionJUnitXMLReporter</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>IResultListener2</SuperInterface>
        <SuperInterface>ISuiteListener</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>PolarionJUnitXMLReporter  /** 
 * A JUnit XML report generator for Polarion based on the JUnitXMLReporter
 * @author &lt;a href='mailto:afield[at]redhat[dot]com'&gt;Alan Field&lt;/a&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>ENTITY</FieldName>
            <FieldType>Pattern</FieldType>
        </Field>
        <Field>
            <FieldName>LESS</FieldName>
            <FieldType>Pattern</FieldType>
        </Field>
        <Field>
            <FieldName>GREATER</FieldName>
            <FieldType>Pattern</FieldType>
        </Field>
        <Field>
            <FieldName>SINGLE_QUOTE</FieldName>
            <FieldType>Pattern</FieldType>
        </Field>
        <Field>
            <FieldName>QUOTE</FieldName>
            <FieldType>Pattern</FieldType>
        </Field>
        <Field>
            <FieldName>ATTR_ESCAPES</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>ATTR_ESCAPES</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>m_numFailed</FieldName>
            <FieldType>AtomicInteger</FieldType>
        </Field>
        <Field>
            <FieldName>m_numSkipped</FieldName>
            <FieldType>AtomicInteger</FieldType>
        </Field>
        <Field>
            <FieldName>m_allTests</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>m_allTests</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>beforeConfiguration</MethodName>
            <MethodComment>/** 
 * @see org.testng.IConfigurationListener2#beforeConfiguration(ITestResult)
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tr</ParamName>
                    <ParamType>ITestResult</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onTestStart</MethodName>
            <MethodComment>/** 
 * @see org.testng.ITestListener#onTestStart(ITestResult)
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>result</ParamName>
                    <ParamType>ITestResult</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onTestSuccess</MethodName>
            <MethodComment>/** 
 * @see org.testng.ITestListener#onTestSuccess(ITestResult)
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tr</ParamName>
                    <ParamType>ITestResult</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkDuplicatesAndAdd;[tr]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onTestFailure</MethodName>
            <MethodComment>/** 
 * @see org.testng.ITestListener#onTestFailure(ITestResult)
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tr</ParamName>
                    <ParamType>ITestResult</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkDuplicatesAndAdd;[tr]</InnerMethodInvoke>
                <InnerMethodInvoke>m_numFailed;incrementAndGet;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onTestFailedButWithinSuccessPercentage</MethodName>
            <MethodComment>/** 
 * @see org.testng.ITestListener#onTestFailedButWithinSuccessPercentage(ITestResult)
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tr</ParamName>
                    <ParamType>ITestResult</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkDuplicatesAndAdd;[tr]</InnerMethodInvoke>
                <InnerMethodInvoke>m_numFailed;incrementAndGet;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onTestSkipped</MethodName>
            <MethodComment>/** 
 * @see org.testng.ITestListener#onTestSkipped(ITestResult)
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tr</ParamName>
                    <ParamType>ITestResult</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkDuplicatesAndAdd;[tr]</InnerMethodInvoke>
                <InnerMethodInvoke>m_numSkipped;incrementAndGet;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onStart</MethodName>
            <MethodComment>/** 
 * @see org.testng.ITestListener#onStart(ITestContext)
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>ITestContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onFinish</MethodName>
            <MethodComment>/** 
 * @see org.testng.ITestListener#onFinish(ITestContext)
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>ITestContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onStart</MethodName>
            <MethodComment>/** 
 * @see org.testng.ISuiteListener#onStart(ISuite)
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>suite</ParamName>
                    <ParamType>ISuite</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;resetAll;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onFinish</MethodName>
            <MethodComment>/** 
 * @see org.testng.ISuiteListener#onFinish(ISuite)
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>suite</ParamName>
                    <ParamType>ISuite</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;generateReport;[suite]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onConfigurationFailure</MethodName>
            <MethodComment>/** 
 * @see org.testng.IConfigurationListener#onConfigurationFailure(org.testng.ITestResult)
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tr</ParamName>
                    <ParamType>ITestResult</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkDuplicatesAndAdd;[tr]</InnerMethodInvoke>
                <InnerMethodInvoke>m_numFailed;incrementAndGet;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onConfigurationSkip</MethodName>
            <MethodComment>/** 
 * @see org.testng.IConfigurationListener#onConfigurationSkip(org.testng.ITestResult)
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tr</ParamName>
                    <ParamType>ITestResult</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onConfigurationSuccess</MethodName>
            <MethodComment>/** 
 * @see org.testng.IConfigurationListener#onConfigurationSuccess(org.testng.ITestResult)
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>itr</ParamName>
                    <ParamType>ITestResult</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateReport</MethodName>
            <MethodComment>/** 
 * generate the XML report given what we know from all the test results
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>suite</ParamName>
                    <ParamType>ISuite</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>XMLStringBuffer [document=new XMLStringBuffer()]</InnerVar>
                <InnerVar>long [elapsedTime=0]</InnerVar>
                <InnerVar>long [testCount=0]</InnerVar>
                <InnerVar>Properties [attrs=new Properties()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>document;addComment;["Generated by " + getClass().getName()]</InnerMethodInvoke>
                <InnerMethodInvoke>attrs;setProperty;[XMLConstants.ATTR_TESTS, "" + testCount]</InnerMethodInvoke>
                <InnerMethodInvoke>attrs;setProperty;[XMLConstants.ATTR_TIME, "" + elapsedTime / 1000.0]</InnerMethodInvoke>
                <InnerMethodInvoke>attrs;setProperty;[XMLConstants.ATTR_NAME, getModuleSuffix()]</InnerMethodInvoke>
                <InnerMethodInvoke>attrs;setProperty;["skipped", "" + m_numSkipped]</InnerMethodInvoke>
                <InnerMethodInvoke>attrs;setProperty;[XMLConstants.ATTR_ERRORS, "0"]</InnerMethodInvoke>
                <InnerMethodInvoke>attrs;setProperty;[XMLConstants.ATTR_FAILURES, "" + (m_numFailed.get())]</InnerMethodInvoke>
                <InnerMethodInvoke>document;push;[XMLConstants.TESTSUITE, attrs]</InnerMethodInvoke>
                <InnerMethodInvoke>null;showProperties;[document]</InnerMethodInvoke>
                <InnerMethodInvoke>document;addComment;["Tests results"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;createElementFromTestResults;[document, m_allTests.values()]</InnerMethodInvoke>
                <InnerMethodInvoke>document;pop;[]</InnerMethodInvoke>
                <InnerMethodInvoke>Utils;writeUtf8File;[suite.getOutputDirectory().replaceAll(".Surefire suite",""), generateFileName(suite) + ".xml", document.toXML()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createElementFromTestResults</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>document</ParamName>
                    <ParamType>XMLStringBuffer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>results</ParamName>
                    <ParamType>List&lt;ITestResult&gt;</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createElement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>doc</ParamName>
                    <ParamType>XMLStringBuffer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tr</ParamName>
                    <ParamType>ITestResult</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Properties [attrs=new Properties()]</InnerVar>
                <InnerVar>long [elapsedTimeMillis=tr.getEndMillis() - tr.getStartMillis()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>attrs;setProperty;[XMLConstants.ATTR_NAME, testName(tr)]</InnerMethodInvoke>
                <InnerMethodInvoke>attrs;setProperty;[XMLConstants.ATTR_CLASSNAME, tr.getTestClass().getRealClass().getName()]</InnerMethodInvoke>
                <InnerMethodInvoke>attrs;setProperty;[XMLConstants.ATTR_TIME, "" + (((double)elapsedTimeMillis) / 1000)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createFailureElement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>doc</ParamName>
                    <ParamType>XMLStringBuffer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tr</ParamName>
                    <ParamType>ITestResult</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Properties [attrs=new Properties()]</InnerVar>
                <InnerVar>Throwable [t=tr.getThrowable()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createSkipElement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>doc</ParamName>
                    <ParamType>XMLStringBuffer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tr</ParamName>
                    <ParamType>ITestResult</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>doc;addEmptyElement;["skipped"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>encodeAttr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>attr</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [result=replaceAmpersand(attr,ENTITY)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>replaceAmpersand</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>str</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pattern</ParamName>
                    <ParamType>Pattern</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [start=0]</InnerVar>
                <InnerVar>int [idx=str.indexOf('&amp;',start)]</InnerVar>
                <InnerVar>StringBuilder [result=new StringBuilder()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>result;append;[str.substring(start)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>resetAll</MethodName>
            <MethodComment>/** 
 * Reset all member variables for next test.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>m_numFailed;set;[0]</InnerMethodInvoke>
                <InnerMethodInvoke>m_numSkipped;set;[0]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateFileName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>suite</ParamName>
                    <ParamType>ISuite</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [name=getModuleSuffix()]</InnerVar>
                <InnerVar>Collection&lt;ISuiteResult&gt; [suiteResults=suite.getResults().values()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>res</ParamName>
                    <ParamType>ITestResult</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuilder [result=new StringBuilder(res.getMethod().getMethodName())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>showProperties</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>report</ParamName>
                    <ParamType>XMLStringBuffer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>report;push;[XMLConstants.PROPERTIES]</InnerMethodInvoke>
                <InnerMethodInvoke>report;addComment;["Java System properties"]</InnerMethodInvoke>
                <InnerMethodInvoke>report;addComment;["Environment variables"]</InnerMethodInvoke>
                <InnerMethodInvoke>report;pop;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getModuleSuffix</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkDuplicatesAndAdd</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tr</ParamName>
                    <ParamType>ITestResult</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [key=tr.getTestClass().getRealClass().getName() + "." + testName(tr)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>