<Class>
    <Id>3490</Id>
    <Package>org.infinispan.commons.dataconversion</Package>
    <ClassName>Encoder</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Encoder  /** 
 * Used to convert data between read/write format and storage format.
 * @since 9.1
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>toStorage</MethodName>
            <MethodComment>/** 
 * Convert data in the read/write format to the storage format.
 * @param content data to be converted, never null.
 * @return Object in the storage format.
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>content</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fromStorage</MethodName>
            <MethodComment>/** 
 * Convert from storage format to the read/write format.
 * @param content data as stored in the cache, never null.
 * @return data in the read/write format
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>content</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isStorageFormatFilterable</MethodName>
            <MethodComment>/** 
 * @return if true, will perform stream and related operation in the storage format.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>id</MethodName>
            <MethodComment>/** 
 * Each encoder is associated with an unique id in order to optimize serialization. Known ids are kept in  {@link EncoderIds}.
 * @return unique identifier for this encoder
 */
</MethodComment>
            <ReturnType>short</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>