<Class>
    <Id>613</Id>
    <Package>org.infinispan.xsite.statetransfer</Package>
    <ClassName>XSiteStateTransferManager</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>XSiteStateTransferManager  /** 
 * It manages the state transfer between sites.
 * @author Pedro Ruivo
 * @since 7.0
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>STATUS_OK</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>STATUS_ERROR</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>STATUS_SENDING</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>STATUS_CANCELED</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>notifyStatePushFinished</MethodName>
            <MethodComment>/** 
 * It receives the notifications from local site when some node finishes pushing the state to the remote site.
 * @param siteName the remote site name
 * @param node     the {@link org.infinispan.remoting.transport.Address} from the node that finishes.
 * @param statusOk {@code true} if no error or exception occurred during the state transfer.
 * @throws Throwable If some unexpected behavior occurs.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>siteName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>statusOk</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>Throwable</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startPushState</MethodName>
            <MethodComment>/** 
 * It notifies all nodes from local site to start transfer the state to the remote site.
 * @param siteName the remote site name
 * @throws Throwable If some unexpected behavior occurs.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>siteName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>Throwable</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cancelPushState</MethodName>
            <MethodComment>/** 
 * It cancels a running state transfer.
 * @param siteName the site name to where the state is being sent.
 * @throws Throwable if some exception occurs during the remote invocation with the local cluster or remote site.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>siteName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>Throwable</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRunningStateTransfers</MethodName>
            <MethodComment>/** 
 * @return a list of site names in which this cache is pushing state.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStatus</MethodName>
            <MethodComment>/** 
 * @return the completed state transfer status for which this node is the coordinator.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clearStatus</MethodName>
            <MethodComment>/** 
 * Clears the completed state transfer status.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getClusterStatus</MethodName>
            <MethodComment>/** 
 * @return the completed state transfer status from all the coordinators in the cluster.
 * @throws Exception if some exception during the remote invocation occurs.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clearClusterStatus</MethodName>
            <MethodComment>/** 
 * Clears the completed state transfer status in all the cluster.
 * @throws Exception if some exception occurs during the remote invocation.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSendingSiteName</MethodName>
            <MethodComment>/** 
 * @return {@code null} if this node is not receiving state or the site name which is sending the state.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cancelReceive</MethodName>
            <MethodComment>/** 
 * Sets the cluster to normal state. &lt;p/&gt; The main use for this method is when the link between the sites is broken and the receiver site keeps it state transfer state forever.
 * @param siteName the site name which is sending the state.
 * @throws Exception if some exception occurs during the remote invocation.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>siteName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>becomeCoordinator</MethodName>
            <MethodComment>/** 
 * Makes this node the coordinator for the state transfer to the site name. &lt;p/&gt; This method is invoked when the coordinator dies and this node receives a late start state transfer request.
 * @param siteName the site name.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>siteName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>