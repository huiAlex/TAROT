<Class>
    <Id>3584</Id>
    <Package>org.infinispan.server.test.cs.jdbc.multinode</Package>
    <ClassName>StringBasedStoreMultinodeIT</ClassName>
    <SuperClass>AbstractJdbcStoreMultinodeIT</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>StringBasedStoreMultinodeIT  /** 
 * Tests fetch-state and singleton attributes of a string-based jdbc cache store.
 * @author &lt;a href="mailto:mgencur@redhat.com"&gt;Martin Gencur&lt;/a&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>CONFIG_FETCH_STATE_1</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>CONFIG_FETCH_STATE_2</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>CONFIG_SINGLETON_1</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>CONFIG_SINGLETON_2</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>MANAGER_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>CACHE_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>TABLE_NAME_PREFIX1</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>TABLE_NAME_PREFIX2</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>testFetchState</MethodName>
            <MethodComment>/** 
 * When a node joins a cluster, it should fetch state from other caches in the cluster and also its underlying cache store should contain the same state immediately. This is ensured by fetch-state attribute.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testSingleton</MethodName>
            <MethodComment>/** 
 * The singleton attribute ensures that only a coordinator in a cluster works with its underlying cache store. So even if a key is stored to a cache on server2 only server1 should store it into its underlying cache store as server1 is the coordinator.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>assertCleanCacheAndStore1</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc1;delete;["k1"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc1;delete;["k2"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[0, server1.getCacheManager(MANAGER_NAME).getCache(CACHE_NAME).getNumberOfEntries()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNull;[dbServer1.stringTable.getValueByKey("k1")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNull;[dbServer1.stringTable.getValueByKey("k2")]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isSatisfied</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>assertCleanCacheAndStore2</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc2;delete;["k1"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc2;delete;["k2"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc2;delete;["k3"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>dBServers</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>managerName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cacheName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>