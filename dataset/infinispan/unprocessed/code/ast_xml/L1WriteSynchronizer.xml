<Class>
    <Id>2884</Id>
    <Package>org.infinispan.interceptors.distribution</Package>
    <ClassName>L1WriteSynchronizer</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>L1WriteSynchronizer  /** 
 * A write synchronizer that allows for a single thread to run the L1 update while others can block until it is completed.  Also allows for someone to attempt to cancel the write to the L1.  If they are unable to, they should really wait until the L1 write has completed so they can guarantee their update will be ordered properly.
 * @author wburns
 * @since 6.0
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Logger</FieldType>
        </Field>
        <Field>
            <FieldName>sync</FieldName>
            <FieldType>L1WriteSync</FieldType>
        </Field>
        <Field>
            <FieldName>l1Lifespan</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>dc</FieldName>
            <FieldType>DataContainer</FieldType>
        </Field>
        <Field>
            <FieldName>dc</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>stateTransferLock</FieldName>
            <FieldType>StateTransferLock</FieldType>
        </Field>
        <Field>
            <FieldName>cdl</FieldName>
            <FieldType>ClusteringDependentLogic</FieldType>
        </Field>
        <Field>
            <FieldName>READY</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>RUNNING</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SKIP</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>COMPLETED</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>result</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>exception</FieldName>
            <FieldType>Throwable</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>L1WriteSynchronizer</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dc</ParamName>
                    <ParamType>DataContainer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>l1Lifespan</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stateTransferLock</ParamName>
                    <ParamType>StateTransferLock</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cdl</ParamName>
                    <ParamType>ClusteringDependentLogic</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>tryAcquireShared</MethodName>
            <MethodComment>/** 
 * Implements AQS base acquire to succeed when completed
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ignore</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>tryReleaseShared</MethodName>
            <MethodComment>/** 
 * Implements AQS base release to always signal after setting value
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ignore</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>attemptUpdateToRunning</MethodName>
            <MethodComment>/** 
 * Attempt to update the sync to signal that we want to update L1 with value
 * @return whether it should continue with running L1 update
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>attemptToSkipFullRun</MethodName>
            <MethodComment>/** 
 * Attempt to update the sync to signal that we want to cancel the L1 update
 * @return whether the L1 run was skipped
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>innerGet</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;acquireSharedInterruptibly;[0]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>InterruptedException</ExceptionType>
                <ExceptionType>ExecutionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>innerGet</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>time</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>unit</ParamName>
                    <ParamType>TimeUnit</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>InterruptedException</ExceptionType>
                <ExceptionType>TimeoutException</ExceptionType>
                <ExceptionType>ExecutionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>innerSet</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>innerException</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Throwable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>get</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>InterruptedException</ExceptionType>
                <ExceptionType>ExecutionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>get</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>time</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>unit</ParamName>
                    <ParamType>TimeUnit</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>TimeoutException</ExceptionType>
                <ExceptionType>InterruptedException</ExceptionType>
                <ExceptionType>ExecutionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>trySkipL1Update</MethodName>
            <MethodComment>/** 
 * Attempts to mark the L1 update to only retrieve the value and not to actually update the L1 cache. If the L1 skipping is not successful, that means it is currently running, which means for consistency any writes should wait until this update completes since the update doesn't acquire any locks
 * @return Whether or not it was successful in skipping L1 update
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>retrievalEncounteredException</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Throwable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>sync;innerException;[t]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>runL1UpdateIfPossible</MethodName>
            <MethodComment>/** 
 * Attempts to the L1 update and set the value.  If the L1 update was marked as being skipped this will instead just set the value to release blockers. A null value can be provided which will not run the L1 update but will just alert other waiters that a null was given.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ice</ParamName>
                    <ParamType>InternalCacheEntry</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>