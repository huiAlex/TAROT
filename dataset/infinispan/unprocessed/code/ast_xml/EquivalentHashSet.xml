<Class>
    <Id>1589</Id>
    <Package>org.infinispan.commons.equivalence</Package>
    <ClassName>EquivalentHashSet</ClassName>
    <SuperClass>AbstractSet</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>EquivalentHashSet  /** 
 * Custom hash-based set which accepts no null values, where equality and hash code calculations are done based on passed {@link org.infinispan.commons.equivalence.Equivalence} function implementations for values,as opposed to relying on their own equals/hashCode/toString implementations. This is handy when using key/values whose mentioned methods cannot be overriden, i.e. arrays, and in situations where users want to avoid using wrapper objects.
 * @author Galder Zamarre√±o
 * @since 5.3
 * @deprecated
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>entryEq</FieldName>
            <FieldType>Equivalence</FieldType>
        </Field>
        <Field>
            <FieldName>entryEq</FieldName>
            <FieldType>? super E</FieldType>
        </Field>
        <Field>
            <FieldName>m</FieldName>
            <FieldType>EquivalentHashMap</FieldType>
        </Field>
        <Field>
            <FieldName>m</FieldName>
            <FieldType>E</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>EquivalentHashSet</MethodName>
            <MethodComment>/** 
 * Constructs a new, empty set, with a given equivalence function
 * @param entryEq the Equivalence function to be used to compare entriesin this set.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>entryEq</ParamName>
                    <ParamType>? super E</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>EquivalentHashSet</MethodName>
            <MethodComment>/** 
 * Constructs a new, empty set, with a given initial capacity and a particular equivalence function to compare entries.
 * @param initialCapacity this set's initial capacity
 * @param entryEq the Equivalence function to be used to compare entriesin this set.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>initialCapacity</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>entryEq</ParamName>
                    <ParamType>? super E</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>iterator</MethodName>
            <MethodComment>/** 
 * Returns an iterator over the elements in this set.
 * @return an iterator over the elements in this set
 */
</MethodComment>
            <ReturnType>E</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>size</MethodName>
            <MethodComment>/** 
 * Returns the number of elements in this set.  If this set contains more than  {@code Integer.MAX_VALUE} elements, itreturns  {@code Integer.MAX_VALUE}.
 * @return  the number of elements in this set
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isEmpty</MethodName>
            <MethodComment>/** 
 * Returns  {@code true} if this set contains no elements.
 * @return {@code true} if this set contains no elements
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>contains</MethodName>
            <MethodComment>/** 
 * Returns  {@code true} if this set contains the specified element.
 * @param o the object to be checked for containment in this set
 * @return {@code true} if this set contains the specified element
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>o</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>add</MethodName>
            <MethodComment>/** 
 * Adds the specified element to this set if it is not already present.
 * @param o element to be added to this set
 * @return {@code true} if the set did not already contain the specifiedelement
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>o</ParamName>
                    <ParamType>E</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>remove</MethodName>
            <MethodComment>/** 
 * Removes the specified element from this set if it is present.
 * @param o object to be removed from this set, if present
 * @return {@code true} if the set contained the specified element
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>o</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clear</MethodName>
            <MethodComment>/** 
 * Removes all of the elements from this set.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>m;clear;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hashCode</MethodName>
            <MethodComment>/** 
 * Returns the hash code value for this set using the  {@link Equivalence}function associated with it.  The hash code of a set is defined to be the sum of the hash codes of the elements in the set, where the hash code of a &lt;tt&gt;null&lt;/tt&gt; element is defined to be zero. This ensures that {@link Equivalence#equals(Object s1,Object s2)} implies that{@link Equivalence#hashCode(Object s1)}== {@link Equivalence#hashCode(Object s2)}for any two sets &lt;tt&gt;s1&lt;/tt&gt; and &lt;tt&gt;s2&lt;/tt&gt;, as required by the general contract of  {@link Object#hashCode}. &lt;p&gt;This implementation iterates over the set, calling the &lt;tt&gt;hashCode&lt;/tt&gt; method on each element in the set, and adding up the results.
 * @return the hash code value for this set
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [h=0]</InnerVar>
                <InnerVar>Iterator&lt;E&gt; [i=iterator()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>