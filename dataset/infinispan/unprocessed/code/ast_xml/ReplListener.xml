<Class>
    <Id>1334</Id>
    <Package>org.infinispan.test</Package>
    <ClassName>ReplListener</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ReplListener  /** 
 * A listener that listens for replication events on a cache it is watching.  Typical usage: &lt;code&gt; ReplListener r = attachReplicationListener(cache); r.expect(RemoveCommand.class); // ... r.waitForRPC(); &lt;/code&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>c</FieldName>
            <FieldType>Cache</FieldType>
        </Field>
        <Field>
            <FieldName>c</FieldName>
            <FieldType>?</FieldType>
        </Field>
        <Field>
            <FieldName>expectedCommands</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>expectedCommands</FieldName>
            <FieldType>Predicate&lt;VisitableCommand&gt;</FieldType>
        </Field>
        <Field>
            <FieldName>eagerCommands</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>eagerCommands</FieldName>
            <FieldType>VisitableCommand</FieldType>
        </Field>
        <Field>
            <FieldName>recordCommandsEagerly</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>watchLocal</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>expectationSetupLock</FieldName>
            <FieldType>Lock</FieldType>
        </Field>
        <Field>
            <FieldName>latch</FieldName>
            <FieldType>CountDownLatch</FieldType>
        </Field>
        <Field>
            <FieldName>sawAtLeastOneInvocation</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>expectAny</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ReplListener</MethodName>
            <MethodComment>/** 
 * This listener attaches itself to a cache and when  {@link #expect(Class[])} is invoked, will start checking forinvocations of the command on the cache, waiting for all expected commands to be received in  {@link #waitForRpc()}.
 * @param c cache on which to attach listener
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ReplListener</MethodName>
            <MethodComment>/** 
 * As  {@link #ReplListener(org.infinispan.Cache)} except that you can optionally configure whether command recordingis eager (false by default). &lt;p/&gt; If &lt;tt&gt;recordCommandsEagerly&lt;/tt&gt; is true, then commands are recorded from the moment the listener is attached to the cache, even before  {@link #expect(Class[])} is invoked.  As such, when {@link #expect(Class[])} is called, thelist of commands to wait for will take into account commands already seen thanks to eager recording.
 * @param c                     cache on which to attach listener
 * @param recordCommandsEagerly whether to record commands eagerly
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>recordCommandsEagerly</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ReplListener</MethodName>
            <MethodComment>/** 
 * Same as  {@link #ReplListener(org.infinispan.Cache,boolean)} except that this constructor allows you to set thewatchLocal parameter.  If true, even local events are recorded (not just ones that originate remotely).
 * @param c                     cache on which to attach listener
 * @param recordCommandsEagerly whether to record commands eagerly
 * @param watchLocal            if true, local events are watched for as well
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>recordCommandsEagerly</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>watchLocal</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.c.getAdvancedCache();addInterceptor;[new ReplListenerInterceptor(), 1]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>expectAny</MethodName>
            <MethodComment>/** 
 * Expects any commands.  The moment a single command is detected, the  {@link #waitForRpc()} command will beunblocked.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;expect;[new Predicate[0]]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>expectWithTx</MethodName>
            <MethodComment>/** 
 * Expects a specific set of commands, within transactional scope (i.e., as a payload to a PrepareCommand).  If the cache mode is synchronous, a CommitCommand is expected as well.
 * @param commands commands to expect (not counting transaction boundary commands like PrepareCommand andCommitCommand)
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>commands</ParamName>
                    <ParamType>? extends VisitableCommand</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;Class&lt;? extends VisitableCommand&gt;&gt; [cmdsToExpect=new ArrayList&lt;Class&lt;? extends VisitableCommand&gt;&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cmdsToExpect;add;[PrepareCommand.class]</InnerMethodInvoke>
                <InnerMethodInvoke>null;expect;[cmdsToExpect.toArray(new Class[cmdsToExpect.size()])]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>expectAnyWithTx</MethodName>
            <MethodComment>/** 
 * Expects any commands, within transactional scope (i.e., as a payload to a PrepareCommand).  If the cache mode is synchronous, a CommitCommand is expected as well.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>List&lt;Class&lt;? extends VisitableCommand&gt;&gt; [cmdsToExpect=new ArrayList&lt;Class&lt;? extends VisitableCommand&gt;&gt;(2)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cmdsToExpect;add;[PrepareCommand.class]</InnerMethodInvoke>
                <InnerMethodInvoke>null;expect;[cmdsToExpect.toArray(new Class[cmdsToExpect.size()])]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>expect</MethodName>
            <MethodComment>/** 
 * Expects a specific set of commands.   {@link #waitForRpc()} will block until all of these commands are detected.
 * @param expectedCommands commands to expect
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expectedCommands</ParamName>
                    <ParamType>? extends VisitableCommand</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Function&lt;Class&lt;? extends VisitableCommand&gt;,Predicate&lt;VisitableCommand&gt;&gt; [predicateGenerator=clazz -&gt; clazz::isInstance]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;expect;[Stream.of(expectedCommands).map(predicateGenerator).collect(Collectors.toList())]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>expect</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expectedCommand</ParamName>
                    <ParamType>? extends VisitableCommand</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;expect;[Collections.singleton(expectedCommand::isInstance)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>expect</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>predicate</ParamName>
                    <ParamType>VisitableCommand</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;expect;[Collections.singleton(predicate)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>expect</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>predicates</ParamName>
                    <ParamType>VisitableCommand</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;expect;[Arrays.asList(predicates)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>expect</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>predicates</ParamName>
                    <ParamType>Predicate&lt;VisitableCommand&gt;</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>expectationSetupLock;lock;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>info</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>str</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>log;info;[" [" + c + "] "+ str]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>waitForRpc</MethodName>
            <MethodComment>/** 
 * Blocks for a predefined amount of time (120 Seconds) until commands defined in any of the expect*() methods have been detected.  If the commands have not been detected by this time, an exception is thrown.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;waitForRpc;[30, TimeUnit.SECONDS]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>waitForRpc</MethodName>
            <MethodComment>/** 
 * The same as  {@link #waitForRpc()} except that you are allowed to specify the max wait time.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>time</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>unit</ParamName>
                    <ParamType>TimeUnit</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCache</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>resetEager</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>eagerCommands;clear;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reconfigureListener</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>recordCommandsEagerly</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>watchLocal</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isPrimaryOwner</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cmd</ParamName>
                    <ParamType>VisitableCommand</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>handleDefault</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>InvocationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cmd</ParamName>
                    <ParamType>VisitableCommand</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Object [o]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Throwable</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitPrepareCommand</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>TxInvocationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cmd</ParamName>
                    <ParamType>PrepareCommand</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Object [o=invokeNextInterceptor(ctx,cmd)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Throwable</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>markAsVisited</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cmd</ParamName>
                    <ParamType>VisitableCommand</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>expectationSetupLock;lock;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>