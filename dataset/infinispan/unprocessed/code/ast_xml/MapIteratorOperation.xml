<Class>
    <Id>2087</Id>
    <Package>org.infinispan.stream.impl.termop.object</Package>
    <ClassName>MapIteratorOperation</ClassName>
    <SuperClass>BaseTerminalOperation</SuperClass>
    <SuperInterfaceList>
        <SuperInterface>KeyTrackingTerminalOperation</SuperInterface>
        <SuperInterface>K</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>MapIteratorOperation  /** 
 * Terminal rehash aware operation that handles an iterator when a map intermediate operation was performed on the stream.  This is important due to the fact that we need to figure out the keys that map to each entry still. This class assumes the stream is composed of  {@link java.util.Map.Entry} instances where the key is typed the sameas defined K type.
 * @param &lt; K &gt; key type
 * @param &lt; V &gt; unused type
 * @param &lt; V2 &gt; resulting type from the operation
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>batchSize</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>MapIteratorOperation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>intermediateOperations</ParamName>
                    <ParamType>IntermediateOperation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>supplier</ParamName>
                    <ParamType>Stream&lt;CacheEntry&gt;</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>batchSize</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>lostSegment</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>stopIfLost</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>performOperation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>V</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>response</ParamName>
                    <ParamType>Collection&lt;V&gt;</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>performOperationRehashAware</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>CacheEntry&lt;K,V2&gt;</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>response</ParamName>
                    <ParamType>Collection&lt;CacheEntry&lt;K,V2&gt;&gt;</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BaseStream&lt;?,?&gt; [stream=supplier.get().sequential()]</InnerVar>
                <InnerVar>List&lt;CacheEntry&lt;K,V2&gt;&gt; [collectedValues=new ArrayList(batchSize)]</InnerVar>
                <InnerVar>ByRef&lt;Object&gt; [ref=new ByRef&lt;&gt;(null)]</InnerVar>
                <InnerVar>Stream&lt;V&gt; [convertedStream=((Stream&lt;V&gt;)stream)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>convertedStream;forEach;[v -&gt; {
  collectedValues.add(new ImmortalCacheEntry(ref.get(),v));
  if (collectedValues.size() &gt;= batchSize) {
    response.sendDataResonse(collectedValues);
    collectedValues.clear();
  }
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBatchSize</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>