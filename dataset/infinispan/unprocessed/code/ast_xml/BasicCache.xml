<Class>
    <Id>593</Id>
    <Package>org.infinispan.commons.api</Package>
    <ClassName>BasicCache</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>AsyncCache</SuperInterface>
        <SuperInterface>K</SuperInterface>
        <SuperInterface>ConcurrentMap</SuperInterface>
        <SuperInterface>K</SuperInterface>
        <SuperInterface>Lifecycle</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>BasicCache  /** 
 * BasicCache provides the common building block for the two different types of caches that Infinispan provides: embedded and remote. &lt;p/&gt; For convenience, BasicCache extends  {@link ConcurrentMap} and implements all methods accordingly, although methods like{@link ConcurrentMap#keySet()},  {@link ConcurrentMap#values()} and {@link ConcurrentMap#entrySet()} are expensive(prohibitively so when using a distributed cache) and frequent use of these methods is not recommended. &lt;p /&gt; Other methods such as  {@link #size()} provide an approximation-only, and should not be relied on for an accurate pictureas to the size of the entire, distributed cache.  Remote nodes are &lt;i&gt;not&lt;/i&gt; queried and in-fly transactions are not taken into account, even if  {@link #size()} is invoked from within such a transaction.&lt;p/&gt; Also, like many  {@link ConcurrentMap} implementations, BasicCache does not support the use of &lt;tt&gt;null&lt;/tt&gt; keys orvalues. &lt;p/&gt; &lt;h3&gt;Unsupported operations&lt;/h3&gt; &lt;p&gt; {@link #containsValue(Object)}&lt;/p&gt; Please see the &lt;a href="http://www.jboss.org/infinispan/docs"&gt;Infinispan documentation&lt;/a&gt; and/or the &lt;a href="https://docs.jboss.org/author/display/ISPN/Getting+Started+Guide#GettingStartedGuide-5minutetutorial"&gt;5 Minute Usage Tutorial&lt;/a&gt; for more details. &lt;p/&gt;
 * @author Mircea.Markus@jboss.com
 * @author Manik Surtani
 * @author Galder Zamarre√±o
 * @author Tristan Tarrant
 * @see org.infinispan.manager.CacheContainer
 * @see DefaultCacheManager
 * @see &lt;a href="http://www.jboss.org/infinispan/docs"&gt;Infinispan documentation&lt;/a&gt;
 * @see &lt;a href="http://www.jboss.org/community/wiki/5minutetutorialonInfinispan"&gt;5 Minute Usage Tutorial&lt;/a&gt;
 * @since 5.1
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getName</MethodName>
            <MethodComment>/** 
 * Retrieves the name of the cache
 * @return the name of the cache
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getVersion</MethodName>
            <MethodComment>/** 
 * Retrieves the version of Infinispan
 * @return a version string
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>put</MethodName>
            <MethodComment>/** 
 * {@inheritDoc}If the return value of this operation will be ignored by the application, the user is strongly encouraged to use the  {@link org.infinispan.context.Flag#IGNORE_RETURN_VALUES}flag when invoking this method in order to make it behave as efficiently as possible (i.e. avoiding needless remote or network calls).
 */
</MethodComment>
            <ReturnType>V</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>V</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>put</MethodName>
            <MethodComment>/** 
 * An overloaded form of  {@link #put(Object,Object)}, which takes in lifespan parameters.
 * @param key      key to use
 * @param value    value to store
 * @param lifespan lifespan of the entry.  Negative values are interpreted as unlimited lifespan.
 * @param unit     unit of measurement for the lifespan
 * @return the value being replaced, or null if nothing is being replaced.
 */
</MethodComment>
            <ReturnType>V</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>V</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lifespan</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>unit</ParamName>
                    <ParamType>TimeUnit</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>putIfAbsent</MethodName>
            <MethodComment>/** 
 * An overloaded form of  {@link #putIfAbsent(Object,Object)}, which takes in lifespan parameters.
 * @param key      key to use
 * @param value    value to store
 * @param lifespan lifespan of the entry.  Negative values are interpreted as unlimited lifespan.
 * @param unit     unit of measurement for the lifespan
 * @return the value being replaced, or null if nothing is being replaced.
 */
</MethodComment>
            <ReturnType>V</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>V</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lifespan</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>unit</ParamName>
                    <ParamType>TimeUnit</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>putAll</MethodName>
            <MethodComment>/** 
 * An overloaded form of  {@link #putAll(Map)}, which takes in lifespan parameters.  Note that the lifespan is applied to all mappings in the map passed in.
 * @param map      map containing mappings to enter
 * @param lifespan lifespan of the entry.  Negative values are interpreted as unlimited lifespan.
 * @param unit     unit of measurement for the lifespan
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>map</ParamName>
                    <ParamType>? extends K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lifespan</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>unit</ParamName>
                    <ParamType>TimeUnit</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>replace</MethodName>
            <MethodComment>/** 
 * An overloaded form of  {@link #replace(Object,Object)}, which takes in lifespan parameters.
 * @param key      key to use
 * @param value    value to store
 * @param lifespan lifespan of the entry.  Negative values are interpreted as unlimited lifespan.
 * @param unit     unit of measurement for the lifespan
 * @return the value being replaced, or null if nothing is being replaced.
 */
</MethodComment>
            <ReturnType>V</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>V</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lifespan</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>unit</ParamName>
                    <ParamType>TimeUnit</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>replace</MethodName>
            <MethodComment>/** 
 * An overloaded form of  {@link #replace(Object,Object,Object)}, which takes in lifespan parameters.
 * @param key      key to use
 * @param oldValue value to replace
 * @param value    value to store
 * @param lifespan lifespan of the entry.  Negative values are interpreted as unlimited lifespan.
 * @param unit     unit of measurement for the lifespan
 * @return true if the value was replaced, false otherwise
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>oldValue</ParamName>
                    <ParamType>V</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>V</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lifespan</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>unit</ParamName>
                    <ParamType>TimeUnit</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>put</MethodName>
            <MethodComment>/** 
 * An overloaded form of  {@link #put(Object,Object)}, which takes in lifespan parameters.
 * @param key             key to use
 * @param value           value to store
 * @param lifespan        lifespan of the entry.  Negative values are interpreted as unlimited lifespan.
 * @param lifespanUnit    time unit for lifespan
 * @param maxIdleTime     the maximum amount of time this key is allowed to be idle for before it is considered asexpired
 * @param maxIdleTimeUnit time unit for max idle time
 * @return the value being replaced, or null if nothing is being replaced.
 */
</MethodComment>
            <ReturnType>V</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>V</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lifespan</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lifespanUnit</ParamName>
                    <ParamType>TimeUnit</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>maxIdleTime</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>maxIdleTimeUnit</ParamName>
                    <ParamType>TimeUnit</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>putIfAbsent</MethodName>
            <MethodComment>/** 
 * An overloaded form of  {@link #putIfAbsent(Object,Object)}, which takes in lifespan parameters.
 * @param key             key to use
 * @param value           value to store
 * @param lifespan        lifespan of the entry.  Negative values are interpreted as unlimited lifespan.
 * @param lifespanUnit    time unit for lifespan
 * @param maxIdleTime     the maximum amount of time this key is allowed to be idle for before it is considered asexpired
 * @param maxIdleTimeUnit time unit for max idle time
 * @return the value being replaced, or null if nothing is being replaced.
 */
</MethodComment>
            <ReturnType>V</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>V</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lifespan</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lifespanUnit</ParamName>
                    <ParamType>TimeUnit</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>maxIdleTime</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>maxIdleTimeUnit</ParamName>
                    <ParamType>TimeUnit</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>putAll</MethodName>
            <MethodComment>/** 
 * An overloaded form of  {@link #putAll(Map)}, which takes in lifespan parameters.  Note that the lifespan is applied to all mappings in the map passed in.
 * @param map             map containing mappings to enter
 * @param lifespan        lifespan of the entry.  Negative values are interpreted as unlimited lifespan.
 * @param lifespanUnit    time unit for lifespan
 * @param maxIdleTime     the maximum amount of time this key is allowed to be idle for before it is considered asexpired
 * @param maxIdleTimeUnit time unit for max idle time
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>map</ParamName>
                    <ParamType>? extends K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lifespan</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lifespanUnit</ParamName>
                    <ParamType>TimeUnit</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>maxIdleTime</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>maxIdleTimeUnit</ParamName>
                    <ParamType>TimeUnit</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>replace</MethodName>
            <MethodComment>/** 
 * An overloaded form of  {@link #replace(Object,Object)}, which takes in lifespan parameters.
 * @param key             key to use
 * @param value           value to store
 * @param lifespan        lifespan of the entry.  Negative values are interpreted as unlimited lifespan.
 * @param lifespanUnit    time unit for lifespan
 * @param maxIdleTime     the maximum amount of time this key is allowed to be idle for before it is considered asexpired
 * @param maxIdleTimeUnit time unit for max idle time
 * @return the value being replaced, or null if nothing is being replaced.
 */
</MethodComment>
            <ReturnType>V</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>V</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lifespan</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lifespanUnit</ParamName>
                    <ParamType>TimeUnit</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>maxIdleTime</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>maxIdleTimeUnit</ParamName>
                    <ParamType>TimeUnit</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>replace</MethodName>
            <MethodComment>/** 
 * An overloaded form of  {@link #replace(Object,Object,Object)}, which takes in lifespan parameters.
 * @param key             key to use
 * @param oldValue        value to replace
 * @param value           value to store
 * @param lifespan        lifespan of the entry.  Negative values are interpreted as unlimited lifespan.
 * @param lifespanUnit    time unit for lifespan
 * @param maxIdleTime     the maximum amount of time this key is allowed to be idle for before it is considered asexpired
 * @param maxIdleTimeUnit time unit for max idle time
 * @return true if the value was replaced, false otherwise
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>oldValue</ParamName>
                    <ParamType>V</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>V</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lifespan</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lifespanUnit</ParamName>
                    <ParamType>TimeUnit</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>maxIdleTime</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>maxIdleTimeUnit</ParamName>
                    <ParamType>TimeUnit</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>remove</MethodName>
            <MethodComment>/** 
 * {@inheritDoc}If the return value of this operation will be ignored by the application, the user is strongly encouraged to use the  {@link org.infinispan.context.Flag#IGNORE_RETURN_VALUES}flag when invoking this method in order to make it behave as efficiently as possible (i.e. avoiding needless remote or network calls).
 */
</MethodComment>
            <ReturnType>V</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>