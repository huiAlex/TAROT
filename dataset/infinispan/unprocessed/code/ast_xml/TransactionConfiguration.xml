<Class>
    <Id>3440</Id>
    <Package>org.infinispan.configuration.cache</Package>
    <ClassName>TransactionConfiguration</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>TransactionConfiguration  /** 
 * Defines transactional (JTA) characteristics of the cache.
 * @author pmuir
 * @author Pedro Ruivo
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>AUTO_COMMIT</FieldName>
            <FieldType>AttributeDefinition</FieldType>
        </Field>
        <Field>
            <FieldName>AUTO_COMMIT</FieldName>
            <FieldType>Boolean</FieldType>
        </Field>
        <Field>
            <FieldName>CACHE_STOP_TIMEOUT</FieldName>
            <FieldType>AttributeDefinition</FieldType>
        </Field>
        <Field>
            <FieldName>CACHE_STOP_TIMEOUT</FieldName>
            <FieldType>Long</FieldType>
        </Field>
        <Field>
            <FieldName>LOCKING_MODE</FieldName>
            <FieldType>AttributeDefinition</FieldType>
        </Field>
        <Field>
            <FieldName>LOCKING_MODE</FieldName>
            <FieldType>LockingMode</FieldType>
        </Field>
        <Field>
            <FieldName>TRANSACTION_MANAGER_LOOKUP</FieldName>
            <FieldType>AttributeDefinition</FieldType>
        </Field>
        <Field>
            <FieldName>TRANSACTION_MANAGER_LOOKUP</FieldName>
            <FieldType>TransactionManagerLookup</FieldType>
        </Field>
        <Field>
            <FieldName>TRANSACTION_SYNCHRONIZATION_REGISTRY_LOOKUP</FieldName>
            <FieldType>AttributeDefinition</FieldType>
        </Field>
        <Field>
            <FieldName>TRANSACTION_SYNCHRONIZATION_REGISTRY_LOOKUP</FieldName>
            <FieldType>TransactionSynchronizationRegistryLookup</FieldType>
        </Field>
        <Field>
            <FieldName>TRANSACTION_MODE</FieldName>
            <FieldType>AttributeDefinition</FieldType>
        </Field>
        <Field>
            <FieldName>TRANSACTION_MODE</FieldName>
            <FieldType>TransactionMode</FieldType>
        </Field>
        <Field>
            <FieldName>USE_SYNCHRONIZATION</FieldName>
            <FieldType>AttributeDefinition</FieldType>
        </Field>
        <Field>
            <FieldName>USE_SYNCHRONIZATION</FieldName>
            <FieldType>Boolean</FieldType>
        </Field>
        <Field>
            <FieldName>USE_1_PC_FOR_AUTO_COMMIT_TRANSACTIONS</FieldName>
            <FieldType>AttributeDefinition</FieldType>
        </Field>
        <Field>
            <FieldName>USE_1_PC_FOR_AUTO_COMMIT_TRANSACTIONS</FieldName>
            <FieldType>Boolean</FieldType>
        </Field>
        <Field>
            <FieldName>REAPER_WAKE_UP_INTERVAL</FieldName>
            <FieldType>AttributeDefinition</FieldType>
        </Field>
        <Field>
            <FieldName>REAPER_WAKE_UP_INTERVAL</FieldName>
            <FieldType>Long</FieldType>
        </Field>
        <Field>
            <FieldName>COMPLETED_TX_TIMEOUT</FieldName>
            <FieldType>AttributeDefinition</FieldType>
        </Field>
        <Field>
            <FieldName>COMPLETED_TX_TIMEOUT</FieldName>
            <FieldType>Long</FieldType>
        </Field>
        <Field>
            <FieldName>TRANSACTION_PROTOCOL</FieldName>
            <FieldType>AttributeDefinition</FieldType>
        </Field>
        <Field>
            <FieldName>TRANSACTION_PROTOCOL</FieldName>
            <FieldType>TransactionProtocol</FieldType>
        </Field>
        <Field>
            <FieldName>NOTIFICATIONS</FieldName>
            <FieldType>AttributeDefinition</FieldType>
        </Field>
        <Field>
            <FieldName>NOTIFICATIONS</FieldName>
            <FieldType>Boolean</FieldType>
        </Field>
        <Field>
            <FieldName>autoCommit</FieldName>
            <FieldType>Attribute</FieldType>
        </Field>
        <Field>
            <FieldName>autoCommit</FieldName>
            <FieldType>Boolean</FieldType>
        </Field>
        <Field>
            <FieldName>cacheStopTimeout</FieldName>
            <FieldType>Attribute</FieldType>
        </Field>
        <Field>
            <FieldName>cacheStopTimeout</FieldName>
            <FieldType>Long</FieldType>
        </Field>
        <Field>
            <FieldName>lockingMode</FieldName>
            <FieldType>Attribute</FieldType>
        </Field>
        <Field>
            <FieldName>lockingMode</FieldName>
            <FieldType>LockingMode</FieldType>
        </Field>
        <Field>
            <FieldName>transactionManagerLookup</FieldName>
            <FieldType>Attribute</FieldType>
        </Field>
        <Field>
            <FieldName>transactionManagerLookup</FieldName>
            <FieldType>TransactionManagerLookup</FieldType>
        </Field>
        <Field>
            <FieldName>transactionSynchronizationRegistryLookup</FieldName>
            <FieldType>Attribute</FieldType>
        </Field>
        <Field>
            <FieldName>transactionSynchronizationRegistryLookup</FieldName>
            <FieldType>TransactionSynchronizationRegistryLookup</FieldType>
        </Field>
        <Field>
            <FieldName>transactionMode</FieldName>
            <FieldType>Attribute</FieldType>
        </Field>
        <Field>
            <FieldName>transactionMode</FieldName>
            <FieldType>TransactionMode</FieldType>
        </Field>
        <Field>
            <FieldName>useSynchronization</FieldName>
            <FieldType>Attribute</FieldType>
        </Field>
        <Field>
            <FieldName>useSynchronization</FieldName>
            <FieldType>Boolean</FieldType>
        </Field>
        <Field>
            <FieldName>use1PcForAutoCommitTransactions</FieldName>
            <FieldType>Attribute</FieldType>
        </Field>
        <Field>
            <FieldName>use1PcForAutoCommitTransactions</FieldName>
            <FieldType>Boolean</FieldType>
        </Field>
        <Field>
            <FieldName>reaperWakeUpInterval</FieldName>
            <FieldType>Attribute</FieldType>
        </Field>
        <Field>
            <FieldName>reaperWakeUpInterval</FieldName>
            <FieldType>Long</FieldType>
        </Field>
        <Field>
            <FieldName>completedTxTimeout</FieldName>
            <FieldType>Attribute</FieldType>
        </Field>
        <Field>
            <FieldName>completedTxTimeout</FieldName>
            <FieldType>Long</FieldType>
        </Field>
        <Field>
            <FieldName>transactionProtocol</FieldName>
            <FieldType>Attribute</FieldType>
        </Field>
        <Field>
            <FieldName>transactionProtocol</FieldName>
            <FieldType>TransactionProtocol</FieldType>
        </Field>
        <Field>
            <FieldName>notifications</FieldName>
            <FieldType>Attribute</FieldType>
        </Field>
        <Field>
            <FieldName>notifications</FieldName>
            <FieldType>Boolean</FieldType>
        </Field>
        <Field>
            <FieldName>attributes</FieldName>
            <FieldType>AttributeSet</FieldType>
        </Field>
        <Field>
            <FieldName>recovery</FieldName>
            <FieldType>RecoveryConfiguration</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>attributeDefinitionSet</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>AttributeSet</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>TransactionConfiguration</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>attributes</ParamName>
                    <ParamType>AttributeSet</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>recovery</ParamName>
                    <ParamType>RecoveryConfiguration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>autoCommit</MethodName>
            <MethodComment>/** 
 * If the cache is transactional (i.e.  {@link #transactionMode()} == TransactionMode.TRANSACTIONAL)and transactionAutoCommit is enabled then for single operation transactions the user doesn't need to manually start a transaction, but a transactions is injected by the system. Defaults to true.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cacheStopTimeout</MethodName>
            <MethodComment>/** 
 * If there are any ongoing transactions when a cache is stopped, Infinispan waits for ongoing remote and local transactions to finish. The amount of time to wait for is defined by the cache stop timeout. It is recommended that this value does not exceed the transaction timeout because even if a new transaction was started just before the cache was stopped, this could only last as long as the transaction timeout allows it.
 */
</MethodComment>
            <ReturnType>TransactionConfiguration</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>l</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cacheStopTimeout;set;[l]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cacheStopTimeout</MethodName>
            <MethodComment>/** 
 * If there are any ongoing transactions when a cache is stopped, Infinispan waits for ongoing remote and local transactions to finish. The amount of time to wait for is defined by the cache stop timeout. It is recommended that this value does not exceed the transaction timeout because even if a new transaction was started just before the cache was stopped, this could only last as long as the transaction timeout allows it.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>lockingMode</MethodName>
            <MethodComment>/** 
 * Configures whether the cache uses optimistic or pessimistic locking. If the cache is not transactional then the locking mode is ignored.
 * @see TransactionConfiguration#transactionMode()
 */
</MethodComment>
            <ReturnType>LockingMode</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>lockingMode</MethodName>
            <MethodComment>/** 
 * Configures whether the cache uses optimistic or pessimistic locking. If the cache is not transactional then the locking mode is ignored.
 * @see TransactionConfiguration#transactionMode()
 */
</MethodComment>
            <ReturnType>TransactionConfiguration</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lockingMode</ParamName>
                    <ParamType>LockingMode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.lockingMode;set;[lockingMode]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>syncCommitPhase</MethodName>
            <MethodComment>/** 
 * If true, the cluster-wide commit phase in two-phase commit (2PC) transactions will be synchronous, so Infinispan will wait for responses from all nodes to which the commit was sent. Otherwise, the commit phase will be asynchronous. Keeping it as false improves performance of 2PC transactions, but it can lead to inconsistencies when the primary owner releases the lock before the backup commits the change.
 * @deprecated since 9.0. no longer supported
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>syncCommitPhase</MethodName>
            <MethodComment>/** 
 * If true, the cluster-wide commit phase in two-phase commit (2PC) transactions will be synchronous, so Infinispan will wait for responses from all nodes to which the commit was sent. Otherwise, the commit phase will be asynchronous. Keeping it as false improves performance of 2PC transactions, but it can lead to inconsistencies when the primary owner releases the lock before the backup commits the change.
 * @deprecated The syncRollbackPhase setting can no longer be modified at runtime. It must be the same on all nodes.
 */
</MethodComment>
            <ReturnType>TransactionConfiguration</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>b</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>syncRollbackPhase</MethodName>
            <MethodComment>/** 
 * If true, the cluster-wide rollback phase in two-phase commit (2PC) transactions will be synchronous, so Infinispan will wait for responses from all nodes to which the rollback was sent. Otherwise, the rollback phase will be asynchronous. Keeping it as false improves performance of 2PC transactions.
 * @deprecated since 9.0. no longer supported
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>syncRollbackPhase</MethodName>
            <MethodComment>/** 
 * If true, the cluster-wide rollback phase in two-phase commit (2PC) transactions will be synchronous, so Infinispan will wait for responses from all nodes to which the rollback was sent.
 * @deprecated The syncRollbackPhase setting can no longer be modified at runtime. It must be the same on all nodes.
 */
</MethodComment>
            <ReturnType>TransactionConfiguration</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>b</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>transactionManagerLookup</MethodName>
            <MethodComment>/** 
 * Configure Transaction manager lookup directly using an instance of TransactionManagerLookup. Calling this method marks the cache as transactional.
 */
</MethodComment>
            <ReturnType>TransactionManagerLookup</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>transactionManagerLookup</MethodName>
            <MethodComment>/** 
 * @deprecated since 9.0. The transaction manager is only looked up once, during cache startup.
 */
</MethodComment>
            <ReturnType>TransactionConfiguration</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>transactionManagerLookup</ParamName>
                    <ParamType>TransactionManagerLookup</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.transactionManagerLookup;set;[transactionManagerLookup]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>transactionSynchronizationRegistryLookup</MethodName>
            <MethodComment>/** 
 * Configure Transaction Synchronization Registry lookup directly using an instance of TransactionManagerLookup. Calling this method marks the cache as transactional.
 */
</MethodComment>
            <ReturnType>TransactionSynchronizationRegistryLookup</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>transactionMode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>TransactionMode</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>useSynchronization</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>recovery</MethodName>
            <MethodComment>/** 
 * This method allows configuration of the transaction recovery cache. When this method is called, it automatically enables recovery. So, if you want it to be disabled, make sure you call  {@link RecoveryConfigurationBuilder#enabled(boolean)} with false as parameter
 */
</MethodComment>
            <ReturnType>RecoveryConfiguration</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reaperWakeUpInterval</MethodName>
            <MethodComment>/** 
 * @see TransactionConfigurationBuilder#reaperWakeUpInterval(long)
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>completedTxTimeout</MethodName>
            <MethodComment>/** 
 * @see TransactionConfigurationBuilder#completedTxTimeout(long)
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>use1PcForAutoCommitTransactions</MethodName>
            <MethodComment>/** 
 * Before Infinispan 5.1 you could access the cache both transactionally and non-transactionally. Naturally the non-transactional access is faster and offers less consistency guarantees. From Infinispan 5.1 onwards, mixed access is no longer supported, so if you wanna speed up transactional caches and you're ready to trade some consistency guarantees, you can enable use1PcForAutoCommitTransactions. &lt;p/&gt; What this configuration option does is force an induced transaction, that has been started by Infinispan as a result of enabling autoCommit, to commit in a single phase. So only 1 RPC instead of 2RPCs as in the case of a full 2 Phase Commit (2PC). &lt;p/&gt; &lt;b&gt;N.B.&lt;/b&gt; this option should NOT be used when modifying the same key from multiple transactions as 1PC does not offer any consistency guarantees under concurrent access.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>transactionProtocol</MethodName>
            <MethodComment>/** 
 * @return the transaction protocol in use (2PC or Total Order)
 */
</MethodComment>
            <ReturnType>TransactionProtocol</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>notifications</MethodName>
            <MethodComment>/** 
 * @return are transactional notifications ({@link org.infinispan.notifications.cachelistener.annotation.TransactionRegistered} and{@link org.infinispan.notifications.cachelistener.annotation.TransactionCompleted}) triggered?
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>attributes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>AttributeSet</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>equals</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>obj</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>TransactionConfiguration [other=(TransactionConfiguration)obj]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hashCode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [prime=31]</InnerVar>
                <InnerVar>int [result=1]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>