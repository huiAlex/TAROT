<Class>
    <Id>1215</Id>
    <Package>org.infinispan.spring.support.embedded</Package>
    <ClassName>InfinispanNamedEmbeddedCacheFactoryBean</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>FactoryBean</SuperInterface>
        <SuperInterface>Cache&lt;K,V&gt;</SuperInterface>
        <SuperInterface>BeanNameAware</SuperInterface>
        <SuperInterface>InitializingBean</SuperInterface>
        <SuperInterface>DisposableBean</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>InfinispanNamedEmbeddedCacheFactoryBean  /** 
 * &lt;p&gt; A  {@link org.springframework.beans.factory.FactoryBean &lt;code&gt;FactoryBean&lt;/code&gt;} for creating anative  {@link #setCacheName(String) named} Infinispan {@link org.infinispan.Cache &lt;code&gt;org.infinispan.Cache&lt;/code&gt;}, delegating to a {@link #setInfinispanEmbeddedCacheManager(EmbeddedCacheManager) &lt;code&gt;configurable&lt;/code&gt;}{@link org.infinispan.manager.EmbeddedCacheManager &lt;code&gt;org.infinispan.manager.EmbeddedCacheManager&lt;/code&gt;}. If no cache name is explicitly set, this &lt;code&gt;FactoryBean&lt;/code&gt;'s  {@link #setBeanName(String) &lt;code&gt;beanName&lt;/code&gt;} will be usedinstead. &lt;/p&gt; &lt;p&gt; Beyond merely creating named &lt;code&gt;Cache&lt;/code&gt; instances, this &lt;code&gt;FactoryBean&lt;/code&gt; offers great flexibility in configuring those &lt;code&gt;Caches&lt;/code&gt;. It has setters for all non-global configuration settings, i.e. all settings that are specific to a single &lt;code&gt;Cache&lt;/code&gt;. The configuration settings thus defined override those settings obtained from the &lt;code&gt;EmbeddedCacheManager&lt;/code&gt;. &lt;/p&gt; &lt;p&gt; There are different configuration  {@link #setConfigurationTemplateMode(String) &lt;code&gt;modes&lt;/code&gt;} that control with what &lt;code&gt;Configuration&lt;/code&gt; to start before furthercustomizing it as described above: &lt;ul&gt; &lt;li&gt; &lt;code&gt;NONE&lt;/code&gt;: Configuration starts with a new &lt;code&gt;Configuration&lt;/code&gt; instance. Note that this mode may only be used if no named configuration having the same name as the &lt;code&gt;Cache&lt;/code&gt; to be created already exists. It is therefore illegal to use this mode to create a &lt;code&gt;Cache&lt;/code&gt; named, say, &amp;quot;cacheName&amp;quot; if the configuration file used to configure the &lt;code&gt;EmbeddedCacheManager&lt;/code&gt; contains a configuration section named &amp;quot;cacheName&amp;quot;.&lt;/li&gt; &lt;li&gt; &lt;code&gt;DEFAULT&lt;/code&gt;: Configuration starts with the &lt;code&gt;EmbeddedCacheManager&lt;/code&gt;'s &lt;em&gt;default&lt;/em&gt; &lt;code&gt;Configuration&lt;/code&gt; instance, i.e. the configuration settings defined in its configuration file's default section. Note that this mode may only be used if no named configuration having the same name as the &lt;code&gt;Cache&lt;/code&gt; to be created already exists. It is therefore illegal to use this mode to create a &lt;code&gt;Cache&lt;/code&gt; named, say, &amp;quot;cacheName&amp;quot; if the configuration file used to configure the &lt;code&gt;EmbeddedCacheManager&lt;/code&gt; contains a configuration section named &amp;quot;cacheName&amp;quot;.&lt;/li&gt; &lt;li&gt; &lt;code&gt;CUSTOM&lt;/code&gt;: This is where a user will provide a custom-built &lt;code&gt;ConfigurationBuilder&lt;/code&gt; object which will be used to configure a &lt;code&gt;Cache&lt;/code&gt; instance. If a  {@link #setCacheName(String)} hasalready been called, then that name will be used. &lt;/li&gt; &lt;li&gt; &lt;code&gt;NAMED&lt;/code&gt;: Configuration starts with the &lt;code&gt;EmbeddedCacheManager&lt;/code&gt;'s &lt;code&gt;Configuration&lt;/code&gt; instance having the same name as the &lt;code&gt;Cache&lt;/code&gt; to be created. For a &lt;code&gt;Cache&lt;/code&gt; named, say, &amp;quot;cacheName&amp;quot; this is the configuration section named &amp;quot;cacheName&amp;quot; as defined in the &lt;code&gt;EmbeddedCacheManager&lt;/code&gt;'s configuration file. Note that this mode is only useful if such a named configuration section does indeed exist. Otherwise, it is equivalent to using &lt;code&gt;DEFAULT&lt;/code&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt; &lt;p&gt; In addition to creating a named &lt;code&gt;Cache&lt;/code&gt; this &lt;code&gt;FactoryBean&lt;/code&gt; does also control that &lt;code&gt;Cache&lt;/code&gt;'  {@link org.infinispan.commons.api.Lifecycle lifecycle} by shuttingit down when the enclosing Spring application context is closed. It is therefore advisable to &lt;em&gt;always&lt;/em&gt; use this &lt;code&gt;FactoryBean&lt;/code&gt; when creating a named &lt;code&gt;Cache&lt;/code&gt;. &lt;/p&gt;
 * @author &lt;a href="mailto:olaf DOT bergner AT gmx DOT de"&gt;Olaf Bergner&lt;/a&gt;
 * @author Marius Bogoevici
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>logger</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>infinispanEmbeddedCacheManager</FieldName>
            <FieldType>EmbeddedCacheManager</FieldType>
        </Field>
        <Field>
            <FieldName>configurationTemplateMode</FieldName>
            <FieldType>ConfigurationTemplateMode</FieldType>
        </Field>
        <Field>
            <FieldName>cacheName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>beanName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>infinispanCache</FieldName>
            <FieldType>Cache</FieldType>
        </Field>
        <Field>
            <FieldName>infinispanCache</FieldName>
            <FieldType>K</FieldType>
        </Field>
        <Field>
            <FieldName>builder</FieldName>
            <FieldType>ConfigurationBuilder</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>afterPropertiesSet</MethodName>
            <MethodComment>/** 
 * @see org.springframework.beans.factory.InitializingBean#afterPropertiesSet()
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [effectiveCacheName=obtainEffectiveCacheName()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.logger;info;["Initializing named Infinispan embedded cache ..."]</InnerMethodInvoke>
                <InnerMethodInvoke>this.logger;info;["New Infinispan embedded cache [" + this.infinispanCache + "] initialized"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>configureAndCreateNamedCache</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>obtainEffectiveCacheName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getObject</MethodName>
            <MethodComment>/** 
 * @see org.springframework.beans.factory.FactoryBean#getObject()
 */
</MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getObjectType</MethodName>
            <MethodComment>/** 
 * @see org.springframework.beans.factory.FactoryBean#getObjectType()
 */
</MethodComment>
            <ReturnType>? extends Cache</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isSingleton</MethodName>
            <MethodComment>/** 
 * Always returns &lt;code&gt;true&lt;/code&gt;.
 * @return Always &lt;code&gt;true&lt;/code&gt;
 * @see org.springframework.beans.factory.FactoryBean#isSingleton()
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setBeanName</MethodName>
            <MethodComment>/** 
 * @see org.springframework.beans.factory.BeanNameAware#setBeanName(java.lang.String)
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>destroy</MethodName>
            <MethodComment>/** 
 * Shuts down the &lt;code&gt;org.infinispan.Cache&lt;/code&gt; created by this &lt;code&gt;FactoryBean&lt;/code&gt;.
 * @see org.springframework.beans.factory.DisposableBean#destroy()
 * @see org.infinispan.Cache#stop()
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setCacheName</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Sets the  {@link org.infinispan.Cache#getName() name} of the {@link org.infinispan.Cache &lt;code&gt;org.infinispan.Cache&lt;/code&gt;} to be created. If no explicit &lt;code&gt;cacheName&lt;/code&gt; isset, this &lt;code&gt;FactoryBean&lt;/code&gt; will use its  {@link #setBeanName(String) &lt;code&gt;beanName&lt;/code&gt;} as the &lt;code&gt;cacheName&lt;/code&gt;.&lt;/p&gt;
 * @param cacheName The  {@link org.infinispan.Cache#getName() name} of the {@link org.infinispan.Cache &lt;code&gt;org.infinispan.Cache&lt;/code&gt;} to be created
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setInfinispanEmbeddedCacheManager</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Sets the  {@link org.infinispan.manager.EmbeddedCacheManager &lt;code&gt;org.infinispan.manager.EmbeddedCacheManager&lt;/code&gt;} to be used for creating our{@link org.infinispan.Cache &lt;code&gt;Cache&lt;/code&gt;} instance. Note that this is a&lt;strong&gt;mandatory&lt;/strong&gt; property. &lt;/p&gt;
 * @param infinispanEmbeddedCacheManager The  {@link org.infinispan.manager.EmbeddedCacheManager &lt;code&gt;org.infinispan.manager.EmbeddedCacheManager&lt;/code&gt;} to be used for creatingour  {@link org.infinispan.Cache &lt;code&gt;Cache&lt;/code&gt;} instance
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>infinispanEmbeddedCacheManager</ParamName>
                    <ParamType>EmbeddedCacheManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setConfigurationTemplateMode</MethodName>
            <MethodComment>/** 
 * @param configurationTemplateMode
 * @throws IllegalArgumentException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>configurationTemplateMode</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IllegalArgumentException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addCustomConfiguration</MethodName>
            <MethodComment>/** 
 * API to introduce a customised  {@link ConfigurationBuilder} that will override the default configurationswhich are already available on this class. This can &lt;strong&gt;only&lt;/strong&gt; be used if  {@link #setConfigurationTemplateMode(String)} has been set to &lt;code&gt;CUSTOM&lt;/code&gt;.
 * @param builder
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>builder</ParamName>
                    <ParamType>ConfigurationBuilder</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>