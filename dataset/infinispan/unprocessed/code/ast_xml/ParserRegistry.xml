<Class>
    <Id>414</Id>
    <Package>org.infinispan.configuration.parsing</Package>
    <ClassName>ParserRegistry</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>NamespaceMappingParser</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ParserRegistry  /** 
 * ParserRegistry is a namespace-mapping-aware meta-parser which provides a way to delegate the parsing of multi-namespace XML files to appropriate parsers, defined by the {@link ConfigurationParser} interface. A registry of available parsers is built using the{@link ServiceLoader} system. Implementations of {@link ConfigurationParser} should include aMETA-INF/services/org.infinispan.configuration.parsing.ConfigurationParser file containing a list of available parsers.
 * @author Tristan Tarrant
 * @since 5.2
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>cl</FieldName>
            <FieldType>WeakReference</FieldType>
        </Field>
        <Field>
            <FieldName>cl</FieldName>
            <FieldType>ClassLoader</FieldType>
        </Field>
        <Field>
            <FieldName>parserMappings</FieldName>
            <FieldType>ConcurrentMap</FieldType>
        </Field>
        <Field>
            <FieldName>parserMappings</FieldName>
            <FieldType>QName</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ParserRegistry</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ParserRegistry</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classLoader</ParamName>
                    <ParamType>ClassLoader</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ParserRegistry</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classLoader</ParamName>
                    <ParamType>ClassLoader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>defaultOnly</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Collection&lt;ConfigurationParser&gt; [parsers=ServiceFinder.load(ConfigurationParser.class,cl.get(),ParserRegistry.class.getClassLoader())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseFile</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ConfigurationBuilderHolder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>filename</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>FileLookup [fileLookup=FileLookupFactory.newInstance()]</InnerVar>
                <InnerVar>InputStream [is=fileLookup.lookupFile(filename,cl.get())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parse</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ConfigurationBuilderHolder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>is</ParamName>
                    <ParamType>InputStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parse</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>is</ParamName>
                    <ParamType>InputStream</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>holder</ParamName>
                    <ParamType>ConfigurationBuilderHolder</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BufferedInputStream [input=new BufferedInputStream(is)]</InnerVar>
                <InnerVar>XMLStreamReader [subReader=XMLInputFactory.newInstance().createXMLStreamReader(input)]</InnerVar>
                <InnerVar>XMLExtendedStreamReader [reader=new XMLExtendedStreamReaderImpl(this,subReader)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;parse;[reader, holder]</InnerMethodInvoke>
                <InnerMethodInvoke>subReader;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>XMLStreamException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parse</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>reader</ParamName>
                    <ParamType>XMLExtendedStreamReader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>holder</ParamName>
                    <ParamType>ConfigurationBuilderHolder</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>XMLStreamException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseElement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>reader</ParamName>
                    <ParamType>XMLExtendedStreamReader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>holder</ParamName>
                    <ParamType>ConfigurationBuilderHolder</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>QName [name=reader.getName()]</InnerVar>
                <InnerVar>ConfigurationParser [parser=parserMappings.get(name)]</InnerVar>
                <InnerVar>Schema [oldSchema=reader.getSchema()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>reader;setSchema;[Schema.fromNamespaceURI(name.getNamespaceURI())]</InnerMethodInvoke>
                <InnerMethodInvoke>parser;readElement;[reader, holder]</InnerMethodInvoke>
                <InnerMethodInvoke>reader;setSchema;[oldSchema]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>XMLStreamException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>serialize</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>os</ParamName>
                    <ParamType>OutputStream</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>globalConfiguration</ParamName>
                    <ParamType>GlobalConfiguration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>configurations</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BufferedOutputStream [output=new BufferedOutputStream(os)]</InnerVar>
                <InnerVar>XMLStreamWriter [subWriter=XMLOutputFactory.newInstance().createXMLStreamWriter(output)]</InnerVar>
                <InnerVar>XMLExtendedStreamWriter [writer=new XMLExtendedStreamWriterImpl(subWriter)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;serialize;[writer, globalConfiguration, configurations]</InnerMethodInvoke>
                <InnerMethodInvoke>subWriter;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>XMLStreamException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>serialize</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>writer</ParamName>
                    <ParamType>XMLExtendedStreamWriter</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>globalConfiguration</ParamName>
                    <ParamType>GlobalConfiguration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>configurations</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Serializer [serializer=new Serializer()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>writer;writeStartDocument;[]</InnerMethodInvoke>
                <InnerMethodInvoke>writer;writeStartElement;["infinispan"]</InnerMethodInvoke>
                <InnerMethodInvoke>serializer;serialize;[writer, new ConfigurationHolder(globalConfiguration,configurations)]</InnerMethodInvoke>
                <InnerMethodInvoke>writer;writeEndElement;[]</InnerMethodInvoke>
                <InnerMethodInvoke>writer;writeEndDocument;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>XMLStreamException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>