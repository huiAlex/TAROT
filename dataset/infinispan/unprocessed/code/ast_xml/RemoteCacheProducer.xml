<Class>
    <Id>1615</Id>
    <Package>org.infinispan.cdi.remote</Package>
    <ClassName>RemoteCacheProducer</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>RemoteCacheProducer  /** 
 * The  {@link RemoteCache} producer.
 * @author Kevin Pollet &lt;kevin.pollet@serli.com&gt; (C) 2011 SERLI
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>defaultRemoteCacheManager</FieldName>
            <FieldType>RemoteCacheManager</FieldType>
        </Field>
        <Field>
            <FieldName>cacheManagers</FieldName>
            <FieldType>Instance</FieldType>
        </Field>
        <Field>
            <FieldName>cacheManagers</FieldName>
            <FieldType>RemoteCacheManager</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getRemoteCache</MethodName>
            <MethodComment>/** 
 * Produces the remote cache.
 * @param injectionPoint the injection point.
 * @param &lt; K &gt;            the type of the key.
 * @param &lt; V &gt;            the type of the value.
 * @return the remote cache instance.
 */
</MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>injectionPoint</ParamName>
                    <ParamType>InjectionPoint</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Set&lt;Annotation&gt; [qualifiers=injectionPoint.getQualifiers()]</InnerVar>
                <InnerVar>RemoteCacheManager [cacheManager=getRemoteCacheManager(qualifiers.toArray(new Annotation[0]))]</InnerVar>
                <InnerVar>Remote [remote=getRemoteAnnotation(injectionPoint.getAnnotated())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRemoteCacheManager</MethodName>
            <MethodComment>/** 
 * Retrieves the  {@link RemoteCacheManager} bean with the following qualifiers.
 * @param qualifiers the qualifiers.
 * @return the {@link RemoteCacheManager} qualified or the default one if no bean with the given qualifiers has beenfound.
 */
</MethodComment>
            <ReturnType>RemoteCacheManager</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>qualifiers</ParamName>
                    <ParamType>Annotation[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Instance&lt;RemoteCacheManager&gt; [specificCacheManager=cacheManagers.select(qualifiers)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRemoteAnnotation</MethodName>
            <MethodComment>/** 
 * Retrieves the  {@link Remote} annotation instance on the given annotated element.
 * @param annotated the annotated element.
 * @return the {@link Remote} annotation instance or {@code null} if not found.
 */
</MethodComment>
            <ReturnType>Remote</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>annotated</ParamName>
                    <ParamType>Annotated</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Remote [remote=annotated.getAnnotation(Remote.class)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>