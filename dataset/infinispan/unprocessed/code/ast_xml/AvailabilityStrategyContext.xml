<Class>
    <Id>1575</Id>
    <Package>org.infinispan.partitionhandling.impl</Package>
    <ClassName>AvailabilityStrategyContext</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>AvailabilityStrategyContext  /** 
 * Contains information about the current state of the cache. Also allows  {@link AvailabilityStrategy} to proceed with a rebalance, a membership update, or an availability mode change.
 * @author Mircea Markus
 * @author Dan Berindei
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getCacheName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getJoinInfo</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>CacheJoinInfo</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCapacityFactors</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Address</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCurrentTopology</MethodName>
            <MethodComment>/** 
 * @return The current cache topology.
 */
</MethodComment>
            <ReturnType>CacheTopology</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStableTopology</MethodName>
            <MethodComment>/** 
 * Whenever a new cache topology without a  {@code pendingCH} and with at least {@code numOwners} owners for eachsegment is installed, and the cache is  {@link AvailabilityMode#AVAILABLE}, the current cache topology is marked as the stable topology. The same happens when a rebalance is scheduled to start, but it doesn't do anything because the current topology is already balanced.
 * @return The last stable cache topology. May be {@code null}.
 */
</MethodComment>
            <ReturnType>CacheTopology</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAvailabilityMode</MethodName>
            <MethodComment>/** 
 * @return The current availability mode.
 */
</MethodComment>
            <ReturnType>AvailabilityMode</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getExpectedMembers</MethodName>
            <MethodComment>/** 
 * The members of the cache. Includes nodes which have tried to join the cache but are not yet part of the current  {@code CacheTopology}. Does not include nodes which have left the cluster (either gracefully or abruptly) but are still in the current topology.
 */
</MethodComment>
            <ReturnType>Address</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>queueRebalance</MethodName>
            <MethodComment>/** 
 * Queue (or start) a rebalance. Use the configured  {@link ConsistentHashFactory} to create a new balanced consistent hashwith the given members. If there is no rebalance in progress, start a rebalance right away. If there is a rebalance in progress, queue another rebalance. If there is a rebalance in the queue as well, it will be replaced with the new one. If  {@code newConsistentHash == null}, remove any queued rebalance.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>newMembers</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>updateCurrentTopology</MethodName>
            <MethodComment>/** 
 * Use the configured  {@link ConsistentHashFactory} to create a new CHwith the given  {@code members}, but do not start a rebalance. Members missing from the current topology are ignored.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>newMembers</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>updateAvailabilityMode</MethodName>
            <MethodComment>/** 
 * Enter a new availability mode.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>actualMembers</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mode</ParamName>
                    <ParamType>AvailabilityMode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cancelRebalance</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>updateTopologiesAfterMerge</MethodName>
            <MethodComment>/** 
 * Updates both the stable and the current topologies. Does not install the current topology on the cache members.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>currentTopology</ParamName>
                    <ParamType>CacheTopology</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stableTopology</ParamName>
                    <ParamType>CacheTopology</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>availabilityMode</ParamName>
                    <ParamType>AvailabilityMode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>resolveConflicts</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>