<Class>
    <Id>1348</Id>
    <Package>org.infinispan.distribution</Package>
    <ClassName>L1Manager</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>L1Manager  /** 
 * Manages the L1 Cache, in particular recording anyone who is going to cache an a command that a node responds to so that a unicast invalidation can be sent later if needed.
 * @author Pete Muir
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>addRequestor</MethodName>
            <MethodComment>/** 
 * Records a request that will be cached in another nodes L1
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>requestor</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>flushCache</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>origin</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>assumeOriginKeptEntryInL1</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>registerL1WriteSynchronizer</MethodName>
            <MethodComment>/** 
 * Registers the given write synchronizer to be notified whenever a remote value is looked up for the given key. If the synchronizer is no longer needed to be signaled, the user should unregister it using {@link L1Manager#unregisterL1WriteSynchronizer(Object,org.infinispan.interceptors.distribution.L1WriteSynchronizer)}
 * @param key The key that that when looked up will trigger the synchronizer
 * @param sync The synchronizer to run the update when the key is looked up
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sync</ParamName>
                    <ParamType>L1WriteSynchronizer</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>unregisterL1WriteSynchronizer</MethodName>
            <MethodComment>/** 
 * Unregister the given write synchronizer if present.  Note the synchronizer is only unregistered if it matches using instance equality (==) due to possibly concurrent usage of write synchronizers
 * @param key The key to unregister the given synchronizer for.
 * @param sync The synchronizer to be removed if it is still present.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sync</ParamName>
                    <ParamType>L1WriteSynchronizer</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>