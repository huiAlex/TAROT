<Class>
    <Id>460</Id>
    <Package>org.infinispan.lucene.profiling</Package>
    <ClassName>LuceneWriterExclusiveThread</ClassName>
    <SuperClass>LuceneUserThread</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>LuceneWriterExclusiveThread  /** 
 * Similar to LuceneWriterThread, except the IndexWriter isn't being closed in each loop iteration but is being reused. This simulates the configuration option exclusive_index_use as applied by Hibernate Search and Infinispan Query.
 * @author Sanne Grinovero
 * @since 7.0
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>iwriter</FieldName>
            <FieldType>IndexWriter</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>LuceneWriterExclusiveThread</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dir</ParamName>
                    <ParamType>Directory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>state</ParamName>
                    <ParamType>SharedState</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>beforeLoop</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testLoop</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Set&lt;String&gt; [strings=new HashSet&lt;String&gt;()]</InnerVar>
                <InnerVar>int [numElements=state.stringsOutOfIndex.drainTo(strings,5)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>iwriter;commit;[]</InnerMethodInvoke>
                <InnerMethodInvoke>state.stringsInIndex;addAll;[strings]</InnerMethodInvoke>
                <InnerMethodInvoke>state;incrementIndexWriterTaskCount;[numElements]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cleanup</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>iwriter;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>