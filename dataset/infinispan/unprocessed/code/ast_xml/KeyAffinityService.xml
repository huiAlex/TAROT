<Class>
    <Id>2997</Id>
    <Package>org.infinispan.affinity</Package>
    <ClassName>KeyAffinityService</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Lifecycle</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>KeyAffinityService  /** 
 * Defines a service that generates keys to be mapped to specific nodes in a distributed(vs. replicated) cluster. The service is instantiated through through one of the factory methods from  {@link org.infinispan.affinity.KeyAffinityServiceFactory}. &lt;p/&gt; Sample usage: &lt;p/&gt; &lt;pre&gt;&lt;code&gt; Cache&amp;lt;String, Long&amp;gt; cache = getDistributedCache(); KeyAffinityService&amp;lt;String&amp;gt; service = KeyAffinityServiceFactory.newKeyAffinityService(cache, 100); ... String sessionId = sessionObject.getId(); String newCollocatedSession = service.getCollocatedKey(sessionId); //this will reside on the same node in the cluster cache.put(newCollocatedSession, someInfo); &lt;/code&gt;&lt;/pre&gt; &lt;p/&gt; Uniqueness: the service does not guarantee that the generated keys are unique. It relies on an {@link org.infinispan.affinity.KeyGenerator} for obtaining and distributing the generated keys. If key uniqueness isneeded that should be enforced in the generator. &lt;p/&gt; The service might also drop key generated through the  {@link org.infinispan.affinity.KeyGenerator}.
 * @see org.infinispan.affinity.KeyAffinityServiceFactory
 * @author Mircea.Markus@jboss.com
 * @since 4.1
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getKeyForAddress</MethodName>
            <MethodComment>/** 
 * Returns a key that will be distributed on the cluster node identified by address.
 * @param address identifying the cluster node.
 * @return a key object
 * @throws IllegalStateException if the service has not been started or it is shutdown
 */
</MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>address</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCollocatedKey</MethodName>
            <MethodComment>/** 
 * Returns a key that will be distributed on the same node as the supplied key.
 * @param otherKey the key for which we need a collocation
 * @return a key object
 * @throws IllegalStateException if the service has not been started or it is shutdown
 */
</MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>otherKey</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isStarted</MethodName>
            <MethodComment>/** 
 * Checks weather or not the service is started.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>