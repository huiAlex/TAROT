<Class>
    <Id>145</Id>
    <Package>org.infinispan.server.test.transport</Package>
    <ClassName>TransportStackConfigurationIT</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>TransportStackConfigurationIT  /** 
 * Test the stack attribute of the transport element. The stack attribute is set to UDP.
 * @author &lt;a href="mailto:mgencur@redhat.com"&gt;Martin Gencur&lt;/a&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>server1</FieldName>
            <FieldType>RemoteInfinispanServer</FieldType>
        </Field>
        <Field>
            <FieldName>server2</FieldName>
            <FieldType>RemoteInfinispanServer</FieldType>
        </Field>
        <Field>
            <FieldName>controller</FieldName>
            <FieldType>ContainerController</FieldType>
        </Field>
        <Field>
            <FieldName>provider</FieldName>
            <FieldType>MBeanServerConnectionProvider</FieldType>
        </Field>
        <Field>
            <FieldName>udpProtocolMBean</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>tcpProtocolMBean</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>testUDPStackAttributes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertMBeanAttributes;[provider, udpProtocolMBean]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testTCPStackAttributes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertMBeanAttributes;[provider, tcpProtocolMBean]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>assertMBeanAttributes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>provider</ParamName>
                    <ParamType>MBeanServerConnectionProvider</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>protocolMBean</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertEquals;[true, Boolean.parseBoolean(getAttribute(provider,protocolMBean,"log_discard_msgs"))]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[true, Boolean.parseBoolean(getAttribute(provider,protocolMBean,"thread_pool.enabled"))]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[0, Integer.parseInt(getAttribute(provider,protocolMBean,"thread_pool.min_threads"))]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[200, Integer.parseInt(getAttribute(provider,protocolMBean,"thread_pool.max_threads"))]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[60000, Integer.parseInt(getAttribute(provider,protocolMBean,"thread_pool.keep_alive_time"))]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testExecutorAttribute</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [dumpServicesBean="jboss.msc:type=container,name=jboss-as"]</InnerVar>
                <InnerVar>String [dumpServicesOp="dumpServicesToString"]</InnerVar>
                <InnerVar>String [services=provider.getConnection().invoke(new ObjectName(dumpServicesBean),dumpServicesOp,null,null).toString()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertTrue;[isTestInfinispanTransportSpecified(services)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isTestInfinispanTransportSpecified</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>services</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Scanner [s=new Scanner(services).useDelimiter("\n")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startContainerWithStack</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>containerName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nodeName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>portOffset</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stack</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller;start;[containerName, new Config().add("javaVmArguments",System.getProperty("server.jvm.args") + " -Djboss.node.name=" + nodeName+ " -Djboss.socket.binding.port-offset="+ portOffset+ " -Djboss.default.jgroups.stack="+ stack).map()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>stopContainers</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>containerNames</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>