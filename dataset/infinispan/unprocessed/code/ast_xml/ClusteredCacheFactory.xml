<Class>
    <Id>1560</Id>
    <Package>org.infinispan.lucene.testutils</Package>
    <ClassName>ClusteredCacheFactory</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ClusteredCacheFactory  /** 
 * CacheFactory useful to create clustered caches on-demand in several tests. The same thread is used to actually create each cache, making it possible to create several connected caches even though the testing suite in Infinispan isolates different threads.
 * @author Sanne Grinovero
 * @since 4.0
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>requests</FieldName>
            <FieldType>BlockingQueue</FieldType>
        </Field>
        <Field>
            <FieldName>requests</FieldName>
            <FieldType>ConfigurationBuilder</FieldType>
        </Field>
        <Field>
            <FieldName>results</FieldName>
            <FieldType>BlockingQueue</FieldType>
        </Field>
        <Field>
            <FieldName>results</FieldName>
            <FieldType>Cache</FieldType>
        </Field>
        <Field>
            <FieldName>executor</FieldName>
            <FieldType>ExecutorService</FieldType>
        </Field>
        <Field>
            <FieldName>cfg</FieldName>
            <FieldType>ConfigurationBuilder</FieldType>
        </Field>
        <Field>
            <FieldName>started</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>stopped</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ClusteredCacheFactory</MethodName>
            <MethodComment>/** 
 * Create a new ClusteredCacheFactory.
 * @param cfg defines the configuration used to build the caches
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cfg</ParamName>
                    <ParamType>ConfigurationBuilder</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createClusteredCache</MethodName>
            <MethodComment>/** 
 * Create a cache using default configuration
 * @throws InterruptedException if interrupted while waiting for the cache construction
 */
</MethodComment>
            <ReturnType>Cache</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>requests;put;[cfg]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createClusteredCacheWaitingForNodesView</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Cache</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expectedGroupSize</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Cache [cache=createClusteredCache()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>TestingUtil;blockUntilViewReceived;[cache, expectedGroupSize, 10000, false]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>start</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>executor;execute;[new Worker()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>stop</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>executor;shutdownNow;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>