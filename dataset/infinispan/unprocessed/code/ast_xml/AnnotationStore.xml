<Class>
    <Id>1913</Id>
    <Package>org.infinispan.cdi.common.util.annotatedtypebuilder</Package>
    <ClassName>AnnotationStore</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>AnnotationStore  /** 
 * A helper class used to hold annotations on a type or member.
 * @author Stuart Douglas
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>annotationMap</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>annotationMap</FieldName>
            <FieldType>Class&lt;? extends Annotation&gt;</FieldType>
        </Field>
        <Field>
            <FieldName>annotationSet</FieldName>
            <FieldType>Set</FieldType>
        </Field>
        <Field>
            <FieldName>annotationSet</FieldName>
            <FieldType>Annotation</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>AnnotationStore</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>annotationMap</ParamName>
                    <ParamType>Class&lt;? extends Annotation&gt;</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>annotationSet</ParamName>
                    <ParamType>Annotation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>AnnotationStore</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAnnotation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>annotationType</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAnnotations</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Annotation</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isAnnotationPresent</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>annotationType</ParamName>
                    <ParamType>? extends Annotation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>