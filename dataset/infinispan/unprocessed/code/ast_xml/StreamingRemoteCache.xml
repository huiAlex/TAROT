<Class>
    <Id>1031</Id>
    <Package>org.infinispan.client.hotrod</Package>
    <ClassName>StreamingRemoteCache</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>StreamingRemoteCache  /** 
 * StreamingRemoteCache implements streaming versions of most  {@link RemoteCache} methods
 * @author Tristan Tarrant
 * @since 9.0
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>get</MethodName>
            <MethodComment>/** 
 * Retrieves the value of the specified key as an  {@link InputStream}. It is up to the application to ensure that the stream is consumed and closed. The marshaller is ignored, i.e. all data will be read in its raw binary form. The returned input stream implements the  {@link VersionedMetadata} interface.The returned input stream is not thread-safe.
 * @param key      key to use
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>put</MethodName>
            <MethodComment>/** 
 * Initiates a streaming put operation. It is up to the application to write to the returned  {@link OutputStream}and close it when there is no more data to write. The marshaller is ignored, i.e. all data will be written in its raw binary form. The returned output stream is not thread-safe.
 * @param key      key to use
 */
</MethodComment>
            <ReturnType>OutputStream</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>put</MethodName>
            <MethodComment>/** 
 * An overloaded form of  {@link #put(Object)}, which takes in lifespan parameters. The returned output stream is not thread-safe.
 * @param key      key to use
 * @param lifespan lifespan of the entry.  Negative values are interpreted as unlimited lifespan.
 * @param lifespanUnit     unit of measurement for the lifespan
 */
</MethodComment>
            <ReturnType>OutputStream</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lifespan</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lifespanUnit</ParamName>
                    <ParamType>TimeUnit</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>put</MethodName>
            <MethodComment>/** 
 * An overloaded form of  {@link #put(Object)}, which takes in lifespan and maxIdle parameters. The returned output stream is not thread-safe.
 * @param key      key to use
 * @param lifespan lifespan of the entry
 * @param lifespanUnit {@link java.util.concurrent.TimeUnit} for lifespan
 * @param maxIdle the maximum amount of time this key is allowedto be idle for before it is considered as expired
 * @param maxIdleUnit {@link java.util.concurrent.TimeUnit} for maxIdle
 */
</MethodComment>
            <ReturnType>OutputStream</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lifespan</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lifespanUnit</ParamName>
                    <ParamType>TimeUnit</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>maxIdle</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>maxIdleUnit</ParamName>
                    <ParamType>TimeUnit</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>putIfAbsent</MethodName>
            <MethodComment>/** 
 * A conditional form of put which inserts an entry into the cache only if no mapping for the key is already present. The operation is atomic. The server only performs the operation once the stream has been closed. The returned output stream is not thread-safe.
 * @param key     key to use
 */
</MethodComment>
            <ReturnType>OutputStream</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>putIfAbsent</MethodName>
            <MethodComment>/** 
 * An overloaded form of  {@link #putIfAbsent(Object)} which takes in lifespan parameters.The returned output stream is not thread-safe.
 * @param key      key to use
 * @param lifespan lifespan of the entry
 * @param lifespanUnit {@link java.util.concurrent.TimeUnit} for lifespan
 */
</MethodComment>
            <ReturnType>OutputStream</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lifespan</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lifespanUnit</ParamName>
                    <ParamType>TimeUnit</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>putIfAbsent</MethodName>
            <MethodComment>/** 
 * An overloaded form of  {@link #putIfAbsent(Object)} which takes in lifespan and maxIdle parameters.The returned output stream is not thread-safe.
 * @param key      key to use
 * @param lifespan lifespan of the entry
 * @param lifespanUnit {@link java.util.concurrent.TimeUnit} for lifespan
 * @param maxIdle the maximum amount of time this key is allowedto be idle for before it is considered as expired
 * @param maxIdleUnit {@link java.util.concurrent.TimeUnit} for maxIdle
 */
</MethodComment>
            <ReturnType>OutputStream</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lifespan</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lifespanUnit</ParamName>
                    <ParamType>TimeUnit</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>maxIdle</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>maxIdleUnit</ParamName>
                    <ParamType>TimeUnit</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>replaceWithVersion</MethodName>
            <MethodComment>/** 
 * A form of  {@link #put(Object)}, which takes in a version. The value will be replaced on the server only if the existing entry's version matches. The returned output stream is not thread-safe.
 * @param key      key to use
 * @param version  the version to check for
 */
</MethodComment>
            <ReturnType>OutputStream</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>version</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>replaceWithVersion</MethodName>
            <MethodComment>/** 
 * An overloaded form of  {@link #replaceWithVersion(Object,long)} which takes in lifespan parameters.The returned output stream is not thread-safe.
 * @param key      key to use
 * @param version  the version to check for
 * @param lifespan lifespan of the entry
 * @param lifespanUnit {@link java.util.concurrent.TimeUnit} for lifespan
 */
</MethodComment>
            <ReturnType>OutputStream</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>version</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lifespan</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lifespanUnit</ParamName>
                    <ParamType>TimeUnit</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>replaceWithVersion</MethodName>
            <MethodComment>/** 
 * An overloaded form of  {@link #replaceWithVersion(Object,long)} which takes in lifespan and maxIdle parameters.The returned output stream is not thread-safe.
 * @param key      key to use
 * @param version  the version to check for
 * @param lifespan lifespan of the entry
 * @param lifespanUnit {@link java.util.concurrent.TimeUnit} for lifespan
 * @param maxIdle the maximum amount of time this key is allowedto be idle for before it is considered as expired
 * @param maxIdleUnit {@link java.util.concurrent.TimeUnit} for maxIdle
 */
</MethodComment>
            <ReturnType>OutputStream</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>version</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lifespan</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lifespanUnit</ParamName>
                    <ParamType>TimeUnit</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>maxIdle</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>maxIdleUnit</ParamName>
                    <ParamType>TimeUnit</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>