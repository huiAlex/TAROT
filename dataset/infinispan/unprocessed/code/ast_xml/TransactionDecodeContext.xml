<Class>
    <Id>1047</Id>
    <Package>org.infinispan.server.hotrod.tx</Package>
    <ClassName>TransactionDecodeContext</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>TransactionDecodeContext  /** 
 * A base decode context to handle prepare, commit and rollback requests from a client.
 * @author Pedro Ruivo
 * @since 9.1
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>xid</FieldName>
            <FieldType>XidImpl</FieldType>
        </Field>
        <Field>
            <FieldName>serverTransactionTable</FieldName>
            <FieldType>ServerTransactionTable</FieldType>
        </Field>
        <Field>
            <FieldName>rpcManager</FieldName>
            <FieldType>RpcManager</FieldType>
        </Field>
        <Field>
            <FieldName>localAddress</FieldName>
            <FieldType>Address</FieldType>
        </Field>
        <Field>
            <FieldName>transactionTable</FieldName>
            <FieldType>TransactionTable</FieldType>
        </Field>
        <Field>
            <FieldName>commandsFactory</FieldName>
            <FieldType>CommandsFactory</FieldType>
        </Field>
        <Field>
            <FieldName>clusteringDependentLogic</FieldName>
            <FieldType>ClusteringDependentLogic</FieldType>
        </Field>
        <Field>
            <FieldName>txState</FieldName>
            <FieldType>TxState</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>TransactionDecodeContext</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cache</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>xid</ParamName>
                    <ParamType>XidImpl</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ComponentRegistry [registry=cache.getComponentRegistry()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTxState</MethodName>
            <MethodComment>/** 
 * @return The current {@link TxState} associated to the transaction.
 */
</MethodComment>
            <ReturnType>TxState</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isAlive</MethodName>
            <MethodComment>/** 
 * @return {@code true} if the {@code address} is still in the cluster.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>address</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rollbackRemoteTransaction</MethodName>
            <MethodComment>/** 
 * Rollbacks a transaction that is remove in all the cluster members.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>advance</MethodName>
            <MethodComment>/** 
 * Advances the  {@link TxState}.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>update</ParamName>
                    <ParamType>TxState</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>forgetTransaction</MethodName>
            <MethodComment>/** 
 * Forgets the transaction cluster-wise and from global and local transaction tables.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>TxCompletionNotificationCommand [cmd=commandsFactory.buildTxCompletionNotificationCommand(xid,txState.getGlobalTransaction())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rpcManager;invokeRemotelyAsync;[null, cmd, rpcManager.getDefaultRpcOptions(false,DeliverOrder.NONE)]</InnerMethodInvoke>
                <InnerMethodInvoke>serverTransactionTable;removeGlobalState;[xid]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isLocalMode</MethodName>
            <MethodComment>/** 
 * @return {@code true} if the cache mode is local.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>