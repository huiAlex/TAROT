<Class>
    <Id>3654</Id>
    <Package>org.infinispan.spring.session</Package>
    <ClassName>AbstractApplicationPublisherBridge</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>ApplicationEventPublisherAware</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>AbstractApplicationPublisherBridge  /** 
 * A bridge for passing events between Infinispan (both embedded and remote) and Spring.
 * @author Sebastian ≈Åaskawiec
 * @since 9.0
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>logger</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>eventSource</FieldName>
            <FieldType>SpringCache</FieldType>
        </Field>
        <Field>
            <FieldName>springEventsPublisher</FieldName>
            <FieldType>Optional</FieldType>
        </Field>
        <Field>
            <FieldName>springEventsPublisher</FieldName>
            <FieldType>ApplicationEventPublisher</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>AbstractApplicationPublisherBridge</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>eventSource</ParamName>
                    <ParamType>SpringCache</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>Objects;requireNonNull;[eventSource]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>registerListener</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>unregisterListener</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>emitSessionCreatedEvent</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sessionId</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>logger;debugf;["Emitting session created %s", sessionId]</InnerMethodInvoke>
                <InnerMethodInvoke>springEventsPublisher;ifPresent;[p -&gt; p.publishEvent(new SessionCreatedEvent(eventSource,sessionId))]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>emitSessionExpiredEvent</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sessionId</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>logger;debugf;["Emitting session expired %s", sessionId]</InnerMethodInvoke>
                <InnerMethodInvoke>springEventsPublisher;ifPresent;[p -&gt; p.publishEvent(new SessionExpiredEvent(eventSource,sessionId))]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>emitSessionDestroyedEvent</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sessionId</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>logger;debugf;["Emitting session destroyed %s", sessionId]</InnerMethodInvoke>
                <InnerMethodInvoke>springEventsPublisher;ifPresent;[p -&gt; p.publishEvent(new SessionDestroyedEvent(eventSource,sessionId))]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>emitSessionDeletedEvent</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sessionId</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>logger;debugf;["Emitting session deleted %s", sessionId]</InnerMethodInvoke>
                <InnerMethodInvoke>springEventsPublisher;ifPresent;[p -&gt; p.publishEvent(new SessionDeletedEvent(eventSource,sessionId))]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setApplicationEventPublisher</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>applicationEventPublisher</ParamName>
                    <ParamType>ApplicationEventPublisher</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>