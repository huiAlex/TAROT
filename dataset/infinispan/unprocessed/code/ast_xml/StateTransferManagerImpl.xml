<Class>
    <Id>3208</Id>
    <Package>org.infinispan.statetransfer</Package>
    <ClassName>StateTransferManagerImpl</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>StateTransferManager</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>StateTransferManagerImpl  /** 
 * {@link StateTransferManager} implementation.
 * @author anistor@redhat.com
 * @since 5.2
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>trace</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>stateConsumer</FieldName>
            <FieldType>StateConsumer</FieldType>
        </Field>
        <Field>
            <FieldName>stateProvider</FieldName>
            <FieldType>StateProvider</FieldType>
        </Field>
        <Field>
            <FieldName>partitionHandlingManager</FieldName>
            <FieldType>PartitionHandlingManager</FieldType>
        </Field>
        <Field>
            <FieldName>distributionManager</FieldName>
            <FieldType>DistributionManager</FieldType>
        </Field>
        <Field>
            <FieldName>cacheName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>cacheNotifier</FieldName>
            <FieldType>CacheNotifier</FieldType>
        </Field>
        <Field>
            <FieldName>configuration</FieldName>
            <FieldType>Configuration</FieldType>
        </Field>
        <Field>
            <FieldName>globalConfiguration</FieldName>
            <FieldType>GlobalConfiguration</FieldType>
        </Field>
        <Field>
            <FieldName>rpcManager</FieldName>
            <FieldType>RpcManager</FieldType>
        </Field>
        <Field>
            <FieldName>localTopologyManager</FieldName>
            <FieldType>LocalTopologyManager</FieldType>
        </Field>
        <Field>
            <FieldName>persistentStateChecksum</FieldName>
            <FieldType>Optional</FieldType>
        </Field>
        <Field>
            <FieldName>persistentStateChecksum</FieldName>
            <FieldType>Integer</FieldType>
        </Field>
        <Field>
            <FieldName>initialStateTransferComplete</FieldName>
            <FieldType>CountDownLatch</FieldType>
        </Field>
        <Field>
            <FieldName>firstTopologyAsMember</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>keyPartitioner</FieldName>
            <FieldType>KeyPartitioner</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>StateTransferManagerImpl</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>init</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>stateConsumer</ParamName>
                    <ParamType>StateConsumer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stateProvider</ParamName>
                    <ParamType>StateProvider</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cache</ParamName>
                    <ParamType>Cache</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cacheNotifier</ParamName>
                    <ParamType>CacheNotifier</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>configuration</ParamName>
                    <ParamType>Configuration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>globalConfiguration</ParamName>
                    <ParamType>GlobalConfiguration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rpcManager</ParamName>
                    <ParamType>RpcManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>keyPartitioner</ParamName>
                    <ParamType>KeyPartitioner</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>localTopologyManager</ParamName>
                    <ParamType>LocalTopologyManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>partitionHandlingManager</ParamName>
                    <ParamType>PartitionHandlingManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>globalStateManager</ParamName>
                    <ParamType>GlobalStateManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>distributionManager</ParamName>
                    <ParamType>DistributionManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>start</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>CacheJoinInfo [joinInfo=new CacheJoinInfo(pickConsistentHashFactory(),configuration.clustering().hash().hash(),configuration.clustering().hash().numSegments(),configuration.clustering().hash().numOwners(),configuration.clustering().stateTransfer().timeout(),configuration.transaction().transactionProtocol().isTotalOrder(),configuration.clustering().cacheMode(),configuration.clustering().partitionHandling().enabled(),configuration.clustering().hash().capacityFactor(),localTopologyManager.getPersistentUUID(),persistentStateChecksum)]</InnerVar>
                <InnerVar>CacheTopology [initialTopology=localTopologyManager.join(cacheName,joinInfo,new CacheTopologyHandler(){
  @Override public void updateConsistentHash(  CacheTopology cacheTopology){
    doTopologyUpdate(cacheTopology,false);
  }
  @Override public void rebalance(  CacheTopology cacheTopology){
    doTopologyUpdate(cacheTopology,true);
  }
}
,partitionHandlingManager)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>updateConsistentHash</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheTopology</ParamName>
                    <ParamType>CacheTopology</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;doTopologyUpdate;[cacheTopology, false]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rebalance</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheTopology</ParamName>
                    <ParamType>CacheTopology</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;doTopologyUpdate;[cacheTopology, true]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>pickConsistentHashFactory</MethodName>
            <MethodComment>/** 
 * If no ConsistentHashFactory was explicitly configured we choose a suitable one based on cache mode.
 */
</MethodComment>
            <ReturnType>ConsistentHashFactory</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>ConsistentHashFactory [factory=configuration.clustering().hash().consistentHashFactory()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addPartitioner</MethodName>
            <MethodComment>/** 
 * Decorates the given cache topology to add a key partitioner. The key partitioner may include support for grouping as well.
 */
</MethodComment>
            <ReturnType>CacheTopology</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheTopology</ParamName>
                    <ParamType>CacheTopology</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ConsistentHash [currentCH=cacheTopology.getCurrentCH()]</InnerVar>
                <InnerVar>ConsistentHash [pendingCH=cacheTopology.getPendingCH()]</InnerVar>
                <InnerVar>ConsistentHash [unionCH=cacheTopology.getUnionCH()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>doTopologyUpdate</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>newCacheTopology</ParamName>
                    <ParamType>CacheTopology</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isRebalance</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CacheTopology [oldCacheTopology=stateConsumer.getCacheTopology()]</InnerVar>
                <InnerVar>int [newTopologyId=newCacheTopology.getTopologyId()]</InnerVar>
                <InnerVar>int [newRebalanceId=newCacheTopology.getRebalanceId()]</InnerVar>
                <InnerVar>CacheTopology.Phase [phase=newCacheTopology.getPhase()]</InnerVar>
                <InnerVar>CompletableFuture&lt;Void&gt; [consumerFuture=stateConsumer.onTopologyUpdate(newCacheTopology,isRebalance)]</InnerVar>
                <InnerVar>CompletableFuture&lt;Void&gt; [providerFuture=stateProvider.onTopologyUpdate(newCacheTopology,isRebalance)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cacheNotifier;notifyTopologyChanged;[oldCacheTopology, newCacheTopology, newTopologyId, true]</InnerMethodInvoke>
                <InnerMethodInvoke>CompletableFuture.allOf(consumerFuture,providerFuture);thenRun;[() -&gt; {
switch (phase) {
case TRANSITORY:
case READ_OLD_WRITE_ALL:
case READ_ALL_WRITE_ALL:
case READ_NEW_WRITE_ALL:
    localTopologyManager.confirmRebalancePhase(cacheName,newTopologyId,newRebalanceId,null);
}
}
]</InnerMethodInvoke>
                <InnerMethodInvoke>cacheNotifier;notifyTopologyChanged;[oldCacheTopology, newCacheTopology, newTopologyId, false]</InnerMethodInvoke>
                <InnerMethodInvoke>partitionHandlingManager;onTopologyUpdate;[newCacheTopology]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>waitForInitialStateTransferToComplete</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>stop</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>initialStateTransferComplete;countDown;[]</InnerMethodInvoke>
                <InnerMethodInvoke>localTopologyManager;leave;[cacheName]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isJoinComplete</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRebalancingStatus</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isStateTransferInProgress</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isStateTransferInProgressForKey</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCacheTopology</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>CacheTopology</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>forwardCommandIfNeeded</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Address</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>command</ParamName>
                    <ParamType>TopologyAffectedCommand</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>affectedKeys</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>origin</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LocalizedCacheTopology [cacheTopology=distributionManager.getCacheTopology()]</InnerVar>
                <InnerVar>int [cmdTopologyId=command.getTopologyId()]</InnerVar>
                <InnerVar>int [localTopologyId=cacheTopology.getTopologyId()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ownsData</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFirstTopologyAsMember</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>