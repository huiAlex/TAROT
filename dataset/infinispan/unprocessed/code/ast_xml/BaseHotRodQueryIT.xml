<Class>
    <Id>3335</Id>
    <Package>org.infinispan.test.integration.as.client</Package>
    <ClassName>BaseHotRodQueryIT</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>BaseHotRodQueryIT  /** 
 * @since 9.0
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>rcm</FieldName>
            <FieldType>RemoteCacheManager</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>createCacheManager</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>RemoteCacheManager</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createConfiguration</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Configuration</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>ConfigurationBuilder [config=new ConfigurationBuilder()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>config.addServer();host;["127.0.0.1"]</InnerMethodInvoke>
                <InnerMethodInvoke>config;marshaller;[new ProtoStreamMarshaller()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cleanUp</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testRemoteQuery</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>SerializationContext [serializationContext=ProtoStreamMarshaller.getSerializationContext(rcm)]</InnerVar>
                <InnerVar>ProtoSchemaBuilder [protoSchemaBuilder=new ProtoSchemaBuilder()]</InnerVar>
                <InnerVar>String [protoFile=protoSchemaBuilder.fileName("test.proto").addClass(Person.class).build(serializationContext)]</InnerVar>
                <InnerVar>RemoteCache&lt;String,String&gt; [metadataCache=rcm.getCache(ProtobufMetadataManagerConstants.PROTOBUF_METADATA_CACHE_NAME)]</InnerVar>
                <InnerVar>RemoteCache&lt;String,Person&gt; [cache=rcm.getCache()]</InnerVar>
                <InnerVar>QueryFactory [qf=Search.getQueryFactory(cache)]</InnerVar>
                <InnerVar>Query [query=qf.from(Person.class).having("name").eq("Adrian").build()]</InnerVar>
                <InnerVar>List&lt;Person&gt; [list=query.list()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>metadataCache;put;["test.proto", protoFile]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertFalse;[metadataCache.containsKey(ProtobufMetadataManagerConstants.ERRORS_KEY_SUFFIX)]</InnerMethodInvoke>
                <InnerMethodInvoke>cache;clear;[]</InnerMethodInvoke>
                <InnerMethodInvoke>cache;put;["Adrian", new Person("Adrian")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;[cache.containsKey("Adrian")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotNull;[list]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[1, list.size()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[Person.class, list.get(0).getClass()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["Adrian", list.get(0).name]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testUninverting</MethodName>
            <MethodComment>/** 
 * Sorting on a field that does not contain DocValues so Hibernate Search is forced to uninvert it.
 * @see &lt;a href="https://issues.jboss.org/browse/ISPN-5729"&gt;https://issues.jboss.org/browse/ISPN-5729&lt;/a&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>SerializationContext [serializationContext=ProtoStreamMarshaller.getSerializationContext(rcm)]</InnerVar>
                <InnerVar>ProtoSchemaBuilder [protoSchemaBuilder=new ProtoSchemaBuilder()]</InnerVar>
                <InnerVar>String [protoFile=protoSchemaBuilder.fileName("test.proto").addClass(Person.class).build(serializationContext)]</InnerVar>
                <InnerVar>RemoteCache&lt;String,String&gt; [metadataCache=rcm.getCache(ProtobufMetadataManagerConstants.PROTOBUF_METADATA_CACHE_NAME)]</InnerVar>
                <InnerVar>RemoteCache&lt;String,Person&gt; [cache=rcm.getCache()]</InnerVar>
                <InnerVar>QueryFactory [qf=Search.getQueryFactory(cache)]</InnerVar>
                <InnerVar>Query [query=qf.from(Person.class).having("name").eq("John").orderBy("id").build()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>metadataCache;put;["test.proto", protoFile]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertFalse;[metadataCache.containsKey(ProtobufMetadataManagerConstants.ERRORS_KEY_SUFFIX)]</InnerMethodInvoke>
                <InnerMethodInvoke>cache;clear;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[0, query.list().size()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>