<Class>
    <Id>3231</Id>
    <Package>org.infinispan.test.concurrent</Package>
    <ClassName>GlobalComponentSequencerAction</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>GlobalComponentSequencerAction  /** 
 * Replaces a global component with a dynamic proxy that can interact with a  {@link StateSequencer} when a method thatmatches a  {@link InvocationMatcher} is called.
 * @author Dan Berindei
 * @since 7.0
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>stateSequencer</FieldName>
            <FieldType>StateSequencer</FieldType>
        </Field>
        <Field>
            <FieldName>cacheManager</FieldName>
            <FieldType>EmbeddedCacheManager</FieldType>
        </Field>
        <Field>
            <FieldName>componentClass</FieldName>
            <FieldType>Class</FieldType>
        </Field>
        <Field>
            <FieldName>componentClass</FieldName>
            <FieldType>T</FieldType>
        </Field>
        <Field>
            <FieldName>matcher</FieldName>
            <FieldType>InvocationMatcher</FieldType>
        </Field>
        <Field>
            <FieldName>ourHandler</FieldName>
            <FieldType>ProxyInvocationHandler</FieldType>
        </Field>
        <Field>
            <FieldName>originalComponent</FieldName>
            <FieldType>T</FieldType>
        </Field>
        <Field>
            <FieldName>wrappedInstance</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>stateSequencer</FieldName>
            <FieldType>StateSequencer</FieldType>
        </Field>
        <Field>
            <FieldName>matcher</FieldName>
            <FieldType>InvocationMatcher</FieldType>
        </Field>
        <Field>
            <FieldName>statesBefore</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>statesBefore</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>statesAfter</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>statesAfter</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>GlobalComponentSequencerAction</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>stateSequencer</ParamName>
                    <ParamType>StateSequencer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cacheManager</ParamName>
                    <ParamType>EmbeddedCacheManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>componentClass</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>matcher</ParamName>
                    <ParamType>InvocationMatcher</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>before</MethodName>
            <MethodComment>/** 
 * Set up a list of sequencer states before interceptor  {@code interceptorClass} is called.&lt;p/&gt; Each invocation accepted by  {@code matcher} will enter/exit the next state from the list, and does nothing after the list is exhausted.
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>state1</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>additionalStates</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;replaceComponent;[]</InnerMethodInvoke>
                <InnerMethodInvoke>ourHandler;beforeStates;[StateSequencerUtil.concat(state1,additionalStates)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>replaceComponent</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createComponentProxy</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>componentClass</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>handler</ParamName>
                    <ParamType>InvocationHandler</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>after</MethodName>
            <MethodComment>/** 
 * Set up a list of sequencer states after interceptor  {@code interceptorClass} has returned.&lt;p/&gt; Each invocation accepted by  {@code matcher} will enter/exit the next state from the list, and does nothing after the list is exhausted.
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>state1</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>additionalStates</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;replaceComponent;[]</InnerMethodInvoke>
                <InnerMethodInvoke>ourHandler;afterStates;[StateSequencerUtil.concat(state1,additionalStates)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOriginalComponent</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ProxyInvocationHandler</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>wrappedInstance</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stateSequencer</ParamName>
                    <ParamType>StateSequencer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>matcher</ParamName>
                    <ParamType>InvocationMatcher</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>beforeStates</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>states</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>afterStates</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>states</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>invoke</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>proxy</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>method</ParamName>
                    <ParamType>Method</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>Object[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [matches=matcher.accept(wrappedInstance,method.getName(),args)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>StateSequencerUtil;advanceMultiple;[stateSequencer, matches, statesBefore]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Throwable</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>