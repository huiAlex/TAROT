<Class>
    <Id>2491</Id>
    <Package>org.infinispan.commons.marshall.jboss</Package>
    <ClassName>GenericJBossMarshaller</ClassName>
    <SuperClass>AbstractJBossMarshaller</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>GenericJBossMarshaller  /** 
 * A marshaller that makes use of &lt;a href="http://www.jboss.org/jbossmarshalling"&gt;JBoss Marshalling&lt;/a&gt; to serialize and deserialize objects. This marshaller is oriented at external, non-core Infinispan use, such as the Java Hot Rod client.
 * @author Manik Surtani
 * @version 4.1
 * @see &lt;a href="http://www.jboss.org/jbossmarshalling"&gt;JBoss Marshalling&lt;/a&gt;
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>GenericJBossMarshaller</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>baseCfg;setClassResolver;[new DefaultContextClassResolver(this.getClass().getClassLoader())]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>GenericJBossMarshaller</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classLoader</ParamName>
                    <ParamType>ClassLoader</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>baseCfg;setClassResolver;[new DefaultContextClassResolver(classLoader != null ? classLoader : this.getClass().getClassLoader())]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>