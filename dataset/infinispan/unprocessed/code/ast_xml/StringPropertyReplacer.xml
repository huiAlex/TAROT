<Class>
    <Id>3183</Id>
    <Package>org.infinispan.commons.util</Package>
    <ClassName>StringPropertyReplacer</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>StringPropertyReplacer  /** 
 * A utility class for replacing properties in strings.
 * @author &lt;a href="mailto:jason@planet57.com"&gt;Jason Dillon&lt;/a&gt;
 * @author &lt;a href="Scott.Stark@jboss.org"&gt;Scott Stark&lt;/a&gt;
 * @author &lt;a href="claudio.vesco@previnet.it"&gt;Claudio Vesco&lt;/a&gt;
 * @author &lt;a href="mailto:adrian@jboss.com"&gt;Adrian Brock&lt;/a&gt;
 * @author &lt;a href="mailto:dimitris@jboss.org"&gt;Dimitris Andreadis&lt;/a&gt;
 * @since 4.2
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>NEWLINE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>FILE_SEPARATOR</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>PATH_SEPARATOR</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>FILE_SEPARATOR_ALIAS</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>PATH_SEPARATOR_ALIAS</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>NORMAL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SEEN_DOLLAR</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>IN_BRACKET</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>replaceProperties</MethodName>
            <MethodComment>/** 
 * Go through the input string and replace any occurance of ${p} with the System.getProperty(p) value. If there is no such property p defined, then the ${p} reference will remain unchanged. &lt;p/&gt; If the property reference is of the form ${p:v} and there is no such property p, then the default value v will be returned. &lt;p/&gt; If the property reference is of the form ${p1,p2} or ${p1,p2:v} then the primary and the secondary properties will be tried in turn, before returning either the unchanged input, or the default value. &lt;p/&gt; The property ${/} is replaced with System.getProperty("file.separator") value and the property ${:} is replaced with System.getProperty("path.separator").
 * @param string - the string with possible ${} references
 * @return the input string with all property references replaced if any. Ifthere are no valid references the input string will be returned.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>string</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>replaceProperties</MethodName>
            <MethodComment>/** 
 * Go through the input string and replace any occurance of ${p} with the props.getProperty(p) value. If there is no such property p defined, then the ${p} reference will remain unchanged. &lt;p/&gt; If the property reference is of the form ${p:v} and there is no such property p, then the default value v will be returned. &lt;p/&gt; If the property reference is of the form ${p1,p2} or ${p1,p2:v} then the primary and the secondary properties will be tried in turn, before returning either the unchanged input, or the default value. &lt;p/&gt; The property ${/} is replaced with System.getProperty("file.separator") value and the property ${:} is replaced with System.getProperty("path.separator").
 * @param string - the string with possible ${} references
 * @param props  - the source for ${x} property ref values, null means useSystem.getProperty()
 * @return the input string with all property references replaced if any. Ifthere are no valid references the input string will be returned.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>string</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>props</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>char[] [chars=string.toCharArray()]</InnerVar>
                <InnerVar>StringBuilder [buffer=new StringBuilder()]</InnerVar>
                <InnerVar>boolean [properties=false]</InnerVar>
                <InnerVar>int [state=NORMAL]</InnerVar>
                <InnerVar>int [start=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>resolveCompositeKey</MethodName>
            <MethodComment>/** 
 * Try to resolve a "key" from the provided properties by checking if it is actually a "key1,key2", in which case try first "key1", then "key2". If all fails, return null. &lt;p/&gt; It also accepts "key1," and ",key2".
 * @param key   the key to resolve
 * @param props the properties to use
 * @return the resolved key or null
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>props</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [value=null]</InnerVar>
                <InnerVar>int [comma=key.indexOf(',')]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>