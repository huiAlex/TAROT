<Class>
    <Id>735</Id>
    <Package>org.infinispan.topology</Package>
    <ClassName>LocalTopologyManager</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>LocalTopologyManager  /** 
 * Runs on every node and handles the communication with the  {@link ClusterTopologyManager}.
 * @author Dan Berindei
 * @since 5.2
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>join</MethodName>
            <MethodComment>/** 
 * Forwards the join request to the coordinator.
 * @return The current consistent hash.
 */
</MethodComment>
            <ReturnType>CacheTopology</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>joinInfo</ParamName>
                    <ParamType>CacheJoinInfo</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stm</ParamName>
                    <ParamType>CacheTopologyHandler</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>phm</ParamName>
                    <ParamType>PartitionHandlingManager</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>leave</MethodName>
            <MethodComment>/** 
 * Forwards the leave request to the coordinator.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>confirmRebalancePhase</MethodName>
            <MethodComment>/** 
 * Confirm that the local cache  {@code cacheName} has finished receiving the new data for topology{@code topologyId}. &lt;p&gt;The coordinator can change during the state transfer, so we make the rebalance RPC async and we send the response as a different command.
 * @param cacheName the name of the cache
 * @param topologyId the current topology id of the node at the time the rebalance is completed. This must be &gt;= than the one when rebalance starts.
 * @param rebalanceId
 * @param throwable {@code null} unless local rebalance ended because of an error.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>topologyId</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rebalanceId</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>throwable</ParamName>
                    <ParamType>Throwable</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>handleStatusRequest</MethodName>
            <MethodComment>/** 
 * Recovers the current topology information for all running caches and returns it to the coordinator.
 * @param viewId
 */
</MethodComment>
            <ReturnType>ManagerStatusResponse</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>viewId</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>handleTopologyUpdate</MethodName>
            <MethodComment>/** 
 * Updates the current and/or pending consistent hash, without transferring any state.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cacheTopology</ParamName>
                    <ParamType>CacheTopology</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>availabilityMode</ParamName>
                    <ParamType>AvailabilityMode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>viewId</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sender</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>handleStableTopologyUpdate</MethodName>
            <MethodComment>/** 
 * Update the stable cache topology. Mostly needed for backup, so that a new coordinator can recover the stable topology of the cluster.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cacheTopology</ParamName>
                    <ParamType>CacheTopology</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sender</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>viewId</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>handleRebalance</MethodName>
            <MethodComment>/** 
 * Performs the state transfer.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cacheTopology</ParamName>
                    <ParamType>CacheTopology</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>viewId</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sender</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCacheTopology</MethodName>
            <MethodComment>/** 
 * @return the current topology for a cache.
 */
</MethodComment>
            <ReturnType>CacheTopology</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStableCacheTopology</MethodName>
            <MethodComment>/** 
 * @return the last stable topology for a cache.
 */
</MethodComment>
            <ReturnType>CacheTopology</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isTotalOrderCache</MethodName>
            <MethodComment>/** 
 * Checks if the cache defined by  {@code cacheName} is using total order.&lt;p/&gt; If this component is not running or the  {@code cacheName} is not defined, it returns {@code false}.
 * @return {@code true} if the cache is using the total order protocol, {@code false} otherwise.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isRebalancingEnabled</MethodName>
            <MethodComment>/** 
 * Checks whether rebalancing is enabled for the entire cluster.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isCacheRebalancingEnabled</MethodName>
            <MethodComment>/** 
 * Checks whether rebalancing is enabled for the specified cache.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setRebalancingEnabled</MethodName>
            <MethodComment>/** 
 * Enable or disable rebalancing in the entire cluster.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>enabled</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setCacheRebalancingEnabled</MethodName>
            <MethodComment>/** 
 * Enable or disable rebalancing for the specified cache.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>enabled</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRebalancingStatus</MethodName>
            <MethodComment>/** 
 * Retrieve the rebalancing status for the specified cache
 */
</MethodComment>
            <ReturnType>RebalancingStatus</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCacheAvailability</MethodName>
            <MethodComment>/** 
 * Retrieves the availability state of a cache.
 */
</MethodComment>
            <ReturnType>AvailabilityMode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setCacheAvailability</MethodName>
            <MethodComment>/** 
 * Updates the availability state of a cache (for the entire cluster).
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>availabilityMode</ParamName>
                    <ParamType>AvailabilityMode</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPersistentUUID</MethodName>
            <MethodComment>/** 
 * Returns the local UUID of this node. If global state persistence is enabled, this UUID will be saved and reused across restarts
 */
</MethodComment>
            <ReturnType>PersistentUUID</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cacheShutdown</MethodName>
            <MethodComment>/** 
 * Initiates a cluster-wide cache shutdown for the specified cache
 * @throws Exception
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>handleCacheShutdown</MethodName>
            <MethodComment>/** 
 * Handles the local operations related to gracefully shutting down a cache
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>