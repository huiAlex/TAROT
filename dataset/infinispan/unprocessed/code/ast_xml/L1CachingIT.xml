<Class>
    <Id>2156</Id>
    <Package>org.infinispan.server.test.l1</Package>
    <ClassName>L1CachingIT</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>L1CachingIT  /** 
 * Tests for L1 caching.
 * @author &lt;a href="mailto:tsykora@redhat.com"&gt;Tomas Sykora&lt;/a&gt;
 * @author &lt;a href="mailto:wburns@redhat.com"&gt;William Burns&lt;/a&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>CONTAINER1</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>CONTAINER2</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>server1</FieldName>
            <FieldType>RemoteInfinispanServer</FieldType>
        </Field>
        <Field>
            <FieldName>server2</FieldName>
            <FieldType>RemoteInfinispanServer</FieldType>
        </Field>
        <Field>
            <FieldName>ENCODING</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>mc1</FieldName>
            <FieldType>MemcachedClient</FieldType>
        </Field>
        <Field>
            <FieldName>mc2</FieldName>
            <FieldType>MemcachedClient</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>setUp</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc1;delete;["KeyA"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc2;delete;["KeyA"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc1;delete;["KeyB"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc2;delete;["KeyB"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc2;delete;["KeyBB"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc2;delete;["KeyBB"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc1;delete;["KeyC"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc2;delete;["KeyC"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>tearDown</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testL1CachingEnabled</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [numKeys=10]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assumeTrue;["Distribution of entries is wrong (at least unexpected).", server1.getCacheManager("clustered").getCache("memcachedCache").getNumberOfEntries() &gt; 0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assumeTrue;["Distribution of entries is wrong (at least unexpected).", server2.getCacheManager("clustered").getCache("memcachedCache").getNumberOfEntries() &gt; 0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["More entries in caches than expected.", numKeys, server1.getCacheManager("clustered").getCache("memcachedCache").getNumberOfEntries() + server2.getCacheManager("clustered").getCache("memcachedCache").getNumberOfEntries()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["Number of hits on server 1 is wrong.", 0, server1.getCacheManager("clustered").getCache("memcachedCache").getHits()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["Number of hits on server 2 is wrong.", numKeys, server2.getCacheManager("clustered").getCache("memcachedCache").getHits()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["Number of stores on server 1 is wrong.", numKeys, server1.getCacheManager("clustered").getCache("memcachedCache").getStores()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["Number of stores on server 2 is wrong.", 0, server2.getCacheManager("clustered").getCache("memcachedCache").getStores()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;["The are no entries in L1 cache! L1 seems to be disabled! Check TRACE [org.infinispan" + ".factories.ComponentRegistry] output.", server1.getCacheManager("clustered").getCache("memcachedCache").getNumberOfEntries() + server2.getCacheManager("clustered").getCache("memcachedCache").getNumberOfEntries() &gt; numKeys]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["Number of hits on server 1 is wrong.", numKeys, server1.getCacheManager("clustered").getCache("memcachedCache").getHits()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["Number of hits on server 2 is wrong.", numKeys, server2.getCacheManager("clustered").getCache("memcachedCache").getHits()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["Number of stores on server 1 is wrong.", numKeys, server1.getCacheManager("clustered").getCache("memcachedCache").getStores()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["Number of stores on server 2 is wrong.", 0, server2.getCacheManager("clustered").getCache("memcachedCache").getStores()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["The are no entries in L1 cache! L1 seems to be disabled! Check TRACE [org.infinispan" + ".factories.ComponentRegistry] output.", 2 * numKeys, server1.getCacheManager("clustered").getCache("memcachedCache").getNumberOfEntries() + server2.getCacheManager("clustered").getCache("memcachedCache").getNumberOfEntries()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>