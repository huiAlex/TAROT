<Class>
    <Id>1132</Id>
    <Package>org.infinispan.test.hibernate.cache.functional.classloader</Package>
    <ClassName>SelectedClassnameClassLoader</ClassName>
    <SuperClass>ClassLoader</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>SelectedClassnameClassLoader  /** 
 * A ClassLoader that loads classes whose classname begins with one of a given set of strings, without attempting first to delegate to its parent loader. &lt;p&gt; This class is intended to allow emulation of 2 different types of common J2EE classloading situations. &lt;ul&gt; &lt;li&gt;Servlet-style child-first classloading, where this class is the child loader.&lt;/li&gt; &lt;li&gt;Parent-first classloading where the parent does not have access to certain classes&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt; &lt;p&gt; This class can also be configured to raise a ClassNotFoundException if asked to load certain classes, thus allowing classes on the classpath to be hidden from a test environment. &lt;/p&gt;
 * @author Brian Stansberry
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Logger</FieldType>
        </Field>
        <Field>
            <FieldName>includedClasses</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>excludedClasses</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>notFoundClasses</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>classes</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>classes</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>SelectedClassnameClassLoader</MethodName>
            <MethodComment>/** 
 * Creates a new classloader that loads the given classes.
 * @param includedClasses array of class or package names that should be directly loaded by this loader. Classes whose namestarts with any of the strings in this array will be loaded by this class, unless their name appears in &lt;code&gt;excludedClasses&lt;/code&gt;. Can be &lt;code&gt;null&lt;/code&gt;
 * @param excludedClasses array of class or package names that should NOT be directly loaded by this loader. Loading of classeswhose name starts with any of the strings in this array will be delegated to &lt;code&gt;parent&lt;/code&gt;, even if the classes package or classname appears in &lt;code&gt;includedClasses&lt;/code&gt;. Typically this parameter is used to exclude loading one or more classes in a package whose other classes are loaded by this object.
 * @param parent ClassLoader to which loading of classes should be delegated if necessary
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>includedClasses</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>excludedClasses</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parent</ParamName>
                    <ParamType>ClassLoader</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>SelectedClassnameClassLoader</MethodName>
            <MethodComment>/** 
 * Creates a new classloader that loads the given classes.
 * @param includedClasses array of class or package names that should be directly loaded by this loader. Classes whose namestarts with any of the strings in this array will be loaded by this class, unless their name appears in &lt;code&gt;excludedClasses&lt;/code&gt;. Can be &lt;code&gt;null&lt;/code&gt;
 * @param excludedClasses array of class or package names that should NOT be directly loaded by this loader. Loading of classeswhose name starts with any of the strings in this array will be delegated to &lt;code&gt;parent&lt;/code&gt;, even if the classes package or classname appears in &lt;code&gt;includedClasses&lt;/code&gt;. Typically this parameter is used to exclude loading one or more classes in a package whose other classes are loaded by this object.
 * @param notFoundClasses array of class or package names for which this should raise a ClassNotFoundException
 * @param parent ClassLoader to which loading of classes should be delegated if necessary
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>includedClasses</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>excludedClasses</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>notFoundClasses</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parent</ParamName>
                    <ParamType>ClassLoader</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>log;debug;["created " + this]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>loadClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>resolve</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>log;trace;["loadClass(" + name + ","+ resolve+ ")"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ClassNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Class [result=classes.get(name)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>log;trace;["findClass(" + name + ")"]</InnerMethodInvoke>
                <InnerMethodInvoke>classes;put;[name, result]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ClassNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Class</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>log;info;["createClass(" + name + ")"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ClassFormatError</ExceptionType>
                <ExceptionType>ClassNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isIncluded</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>className</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isExcluded</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>className</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isNotFound</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>className</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [s=getClass().getName()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>listClasses</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classes</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [s=""]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>