<Class>
    <Id>1942</Id>
    <Package>org.infinispan.counter.api</Package>
    <ClassName>StrongCounter</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>StrongCounter  /** 
 * The strong consistent counter interface. &lt;p&gt; It provides atomic updates for the counter. All the operations are perform asynchronously and they complete the {@link CompletableFuture} when completed.&lt;p&gt; The implementation may support weakly consistent reads via  {@link #weakGetValue()}.
 * @author Pedro Ruivo
 * @since 9.0
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getName</MethodName>
            <MethodComment>/** 
 * @return The counter name.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getValue</MethodName>
            <MethodComment>/** 
 * It fetches the current value. &lt;p&gt; It may go remotely to fetch the current value.
 * @return The current value.
 */
</MethodComment>
            <ReturnType>Long</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>incrementAndGet</MethodName>
            <MethodComment>/** 
 * Atomically increments the counter and returns the new value.
 * @return The new value.
 */
</MethodComment>
            <ReturnType>Long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>decrementAndGet</MethodName>
            <MethodComment>/** 
 * Atomically decrements the counter and returns the new value
 * @return The new value.
 */
</MethodComment>
            <ReturnType>Long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addAndGet</MethodName>
            <MethodComment>/** 
 * Atomically adds the given value and return the new value.
 * @param delta The non-zero value to add. It can be negative.
 * @return The new value.
 */
</MethodComment>
            <ReturnType>Long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>delta</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reset</MethodName>
            <MethodComment>/** 
 * Resets the counter to its initial value.
 */
</MethodComment>
            <ReturnType>Void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addListener</MethodName>
            <MethodComment>/** 
 * Registers a  {@link CounterListener} to this counter.
 * @param listener The listener to register.
 * @param &lt; T &gt;      The concrete type of the listener. It must implement {@link CounterListener}.
 * @return A {@link Handle} that allows to remove the listener via {@link Handle#remove()}.
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>listener</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compareAndSet</MethodName>
            <MethodComment>/** 
 * Atomically sets the value to the given updated value if the current value  {@code ==} the expected value.
 * @param expect the expected value
 * @param update the new value
 * @return {@code true} if successful, {@code false} otherwise.
 */
</MethodComment>
            <ReturnType>Boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expect</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>update</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getConfiguration</MethodName>
            <MethodComment>/** 
 * @return the {@link CounterConfiguration} used by this counter.
 */
</MethodComment>
            <ReturnType>CounterConfiguration</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>