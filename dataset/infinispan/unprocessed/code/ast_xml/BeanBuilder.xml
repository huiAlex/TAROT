<Class>
    <Id>2344</Id>
    <Package>org.infinispan.cdi.common.util</Package>
    <ClassName>BeanBuilder</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>BeanBuilder  /** 
 * &lt;p&gt; A builder class for creating immutable beans. The builder can create {@link PassivationCapable} beans, using{@link Annotateds#createTypeId(AnnotatedType)} to generate the id.&lt;/p&gt; &lt;p/&gt; &lt;p&gt; The builder can read from an  {@link AnnotatedType} and have any attributemodified. This class is not thread-safe, but the bean created by calling {@link #create()} is.&lt;/p&gt; &lt;p/&gt; &lt;p&gt; It is advised that a new bean builder is instantiated for each bean created. &lt;/p&gt;
 * @author Stuart Douglas
 * @author Pete Muir
 * @see ImmutableBean
 * @see ImmutablePassivationCapableBean
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>beanManager</FieldName>
            <FieldType>BeanManager</FieldType>
        </Field>
        <Field>
            <FieldName>beanClass</FieldName>
            <FieldType>Class</FieldType>
        </Field>
        <Field>
            <FieldName>beanClass</FieldName>
            <FieldType>?</FieldType>
        </Field>
        <Field>
            <FieldName>name</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>qualifiers</FieldName>
            <FieldType>Set</FieldType>
        </Field>
        <Field>
            <FieldName>qualifiers</FieldName>
            <FieldType>Annotation</FieldType>
        </Field>
        <Field>
            <FieldName>scope</FieldName>
            <FieldType>Class</FieldType>
        </Field>
        <Field>
            <FieldName>scope</FieldName>
            <FieldType>? extends Annotation</FieldType>
        </Field>
        <Field>
            <FieldName>stereotypes</FieldName>
            <FieldType>Set</FieldType>
        </Field>
        <Field>
            <FieldName>stereotypes</FieldName>
            <FieldType>Class&lt;? extends Annotation&gt;</FieldType>
        </Field>
        <Field>
            <FieldName>types</FieldName>
            <FieldType>Set</FieldType>
        </Field>
        <Field>
            <FieldName>types</FieldName>
            <FieldType>Type</FieldType>
        </Field>
        <Field>
            <FieldName>injectionPoints</FieldName>
            <FieldType>Set</FieldType>
        </Field>
        <Field>
            <FieldName>injectionPoints</FieldName>
            <FieldType>InjectionPoint</FieldType>
        </Field>
        <Field>
            <FieldName>alternative</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>nullable</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>beanLifecycle</FieldName>
            <FieldType>ContextualLifecycle</FieldType>
        </Field>
        <Field>
            <FieldName>beanLifecycle</FieldName>
            <FieldType>T</FieldType>
        </Field>
        <Field>
            <FieldName>passivationCapable</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>id</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>toString</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>BeanBuilder</MethodName>
            <MethodComment>/** 
 * Instantiate a new bean builder.
 * @param beanManager the bean manager to use for creating injection targetsand determining if annotations are qualifiers, scopes or stereotypes.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>beanManager</ParamName>
                    <ParamType>BeanManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readFromType</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Read the  {@link AnnotatedType}, creating a bean from the class and it's annotations. &lt;/p&gt; &lt;p/&gt; &lt;p&gt; By default the bean lifecycle will wrap the result of calling {@link BeanManager#createInjectionTarget(AnnotatedType)}. &lt;/p&gt; &lt;p/&gt; &lt;p&gt; {@link BeanBuilder} does &lt;em&gt;not&lt;/em&gt; support reading members of the classto create producers or observer methods. &lt;/p&gt;
 * @param type the type to read
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>InjectionTarget&lt;T&gt; [injectionTarget]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>qualifiers;add;[AnyLiteral.INSTANCE]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>create</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Use the bean builder's current state to define the bean. &lt;/p&gt;
 * @return the bean
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getQualifiers</MethodName>
            <MethodComment>/** 
 * Qualifiers currently defined for bean creation.
 * @return the qualifiers current defined
 */
</MethodComment>
            <ReturnType>Annotation</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>qualifiers</MethodName>
            <MethodComment>/** 
 * Define the qualifiers used for bean creation.
 * @param qualifiers the qualifiers to use
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>qualifiers</ParamName>
                    <ParamType>Annotation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>qualifiers</MethodName>
            <MethodComment>/** 
 * Define the qualifiers used for bean creation.
 * @param qualifiers the qualifiers to use
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>qualifiers</ParamName>
                    <ParamType>Annotation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addQualifier</MethodName>
            <MethodComment>/** 
 * Add to the qualifiers used for bean creation.
 * @param qualifiers the additional qualifier to use
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>qualifier</ParamName>
                    <ParamType>Annotation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.qualifiers;add;[qualifier]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addQualifiers</MethodName>
            <MethodComment>/** 
 * Add to the qualifiers used for bean creation.
 * @param qualifiers the additional qualifiers to use
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>qualifiers</ParamName>
                    <ParamType>Annotation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.qualifiers;addAll;[Arrays2.asSet(qualifiers)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addQualifiers</MethodName>
            <MethodComment>/** 
 * Add to the qualifiers used for bean creation.
 * @param qualifiers the additional qualifiers to use
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>qualifiers</ParamName>
                    <ParamType>Annotation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.qualifiers;addAll;[qualifiers]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getScope</MethodName>
            <MethodComment>/** 
 * Scope currently defined for bean creation.
 * @return the scope currently defined
 */
</MethodComment>
            <ReturnType>? extends Annotation</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>scope</MethodName>
            <MethodComment>/** 
 * Define the scope used for bean creation.
 * @param scope the scope to use
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>scope</ParamName>
                    <ParamType>? extends Annotation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStereotypes</MethodName>
            <MethodComment>/** 
 * Stereotypes currently defined for bean creation.
 * @return the stereotypes currently defined
 */
</MethodComment>
            <ReturnType>Class&lt;? extends Annotation&gt;</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>stereotypes</MethodName>
            <MethodComment>/** 
 * Define the stereotypes used for bean creation.
 * @param stereotypes the stereotypes to use
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>stereotypes</ParamName>
                    <ParamType>Class&lt;? extends Annotation&gt;</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTypes</MethodName>
            <MethodComment>/** 
 * Type closure currently defined for bean creation.
 * @return the type closure currently defined
 */
</MethodComment>
            <ReturnType>Type</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>types</MethodName>
            <MethodComment>/** 
 * Define the type closure used for bean creation.
 * @param types the type closure to use
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>types</ParamName>
                    <ParamType>Type</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>types</MethodName>
            <MethodComment>/** 
 * Define the type closure used for bean creation.
 * @param types the type closure to use
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>types</ParamName>
                    <ParamType>Type</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addType</MethodName>
            <MethodComment>/** 
 * Add to the type closure used for bean creation.
 * @param type additional type to use
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>Type</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.types;add;[type]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addTypes</MethodName>
            <MethodComment>/** 
 * Add to the type closure used for bean creation.
 * @param types the additional types to use
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>types</ParamName>
                    <ParamType>Type</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.types;addAll;[Arrays2.asSet(types)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addTypes</MethodName>
            <MethodComment>/** 
 * Add to the type closure used for bean creation.
 * @param types the additional types to use
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>types</ParamName>
                    <ParamType>Type</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.types;addAll;[types]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isAlternative</MethodName>
            <MethodComment>/** 
 * Whether the created bean will be an alternative.
 * @return &lt;code&gt;true&lt;/code&gt; if the created bean will be an alternative,otherwise &lt;code&gt;false&lt;/code&gt;
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>alternative</MethodName>
            <MethodComment>/** 
 * Define that the created bean will (or will not) be an alternative.
 * @param alternative &lt;code&gt;true&lt;/code&gt; if the created bean should be analternative, otherwise &lt;code&gt;false&lt;/code&gt;
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>alternative</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isNullable</MethodName>
            <MethodComment>/** 
 * Whether the created bean will be nullable.
 * @return &lt;code&gt;true&lt;/code&gt; if the created bean will be nullable, otherwise&lt;code&gt;false&lt;/code&gt;
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nullable</MethodName>
            <MethodComment>/** 
 * Define that the created bean will (or will not) be nullable.
 * @param nullable &lt;code&gt;true&lt;/code&gt; if the created bean should be nullable,otherwise &lt;code&gt;false&lt;/code&gt;
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>nullable</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBeanLifecycle</MethodName>
            <MethodComment>/** 
 * The  {@link ContextualLifecycle} currently defined for bean creation.
 * @return the bean lifecycle currently defined
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>beanLifecycle</MethodName>
            <MethodComment>/** 
 * Define the  {@link ContextualLifecycle} used for bean creation.
 * @param beanLifecycle the {@link ContextualLifecycle} to use for beancreation.
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>beanLifecycle</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBeanClass</MethodName>
            <MethodComment>/** 
 * The bean class currently defined for bean creation.
 * @return the bean class currently defined.
 */
</MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>beanClass</MethodName>
            <MethodComment>/** 
 * Define the bean class used for bean creation.
 * @param beanClass the bean class to use
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>beanClass</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBeanManager</MethodName>
            <MethodComment>/** 
 * The bean manager in use. This cannot be changed for this {@link BeanBuilder}.
 * @return the bean manager in use
 */
</MethodComment>
            <ReturnType>BeanManager</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getName</MethodName>
            <MethodComment>/** 
 * The name of the bean currently defined for bean creation.
 * @return the name of the bean or &lt;code&gt;null&lt;/code&gt; if the bean has no name
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>name</MethodName>
            <MethodComment>/** 
 * Define the name of the bean used for bean creation.
 * @param name the name of the bean to use or &lt;code&gt;null&lt;/code&gt; if the beanshould have no name
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isPassivationCapable</MethodName>
            <MethodComment>/** 
 * Whether the created bean will be passivation capable.
 * @return &lt;code&gt;true&lt;/code&gt; if the created bean will be passivation capable,otherwise &lt;code&gt;false&lt;/code&gt;
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>passivationCapable</MethodName>
            <MethodComment>/** 
 * Define that the created bean will (or will not) be passivation capable.
 * @param nullable &lt;code&gt;true&lt;/code&gt; if the created bean should bepassivation capable, otherwise &lt;code&gt;false&lt;/code&gt;
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>passivationCapable</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getId</MethodName>
            <MethodComment>/** 
 * The id currently defined for bean creation.
 * @return the id currently defined.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>id</MethodName>
            <MethodComment>/** 
 * Define the id used for bean creation.
 * @param id the id to use
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>id</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getInjectionPoints</MethodName>
            <MethodComment>/** 
 * The injection points currently defined for bean creation.
 * @return the injection points currently defined.
 */
</MethodComment>
            <ReturnType>InjectionPoint</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>injectionPoints</MethodName>
            <MethodComment>/** 
 * Define the injection points used for bean creation.
 * @param injectionPoints the injection points to use
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>injectionPoints</ParamName>
                    <ParamType>InjectionPoint</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment>/** 
 * Define the string used when  {@link #toString()} is called on the bean.
 * @param toString the string to use
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>toString</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getToString</MethodName>
            <MethodComment>/** 
 * The string used when  {@link #toString()} is called on the bean.
 * @return the string currently defined
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>