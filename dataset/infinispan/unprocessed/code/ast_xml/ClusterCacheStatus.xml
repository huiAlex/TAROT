<Class>
    <Id>3474</Id>
    <Package>org.infinispan.topology</Package>
    <ClassName>ClusterCacheStatus</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>AvailabilityStrategyContext</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ClusterCacheStatus  /** 
 * Keeps track of a cache's status: members, current/pending consistent hashes, and rebalance status
 * @author Dan Berindei
 * @since 5.2
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>INITIAL_TOPOLOGY_ID</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>INITIAL_REBALANCE_ID</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>trace</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>cacheManager</FieldName>
            <FieldType>EmbeddedCacheManager</FieldType>
        </Field>
        <Field>
            <FieldName>cacheName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>availabilityStrategy</FieldName>
            <FieldType>AvailabilityStrategy</FieldType>
        </Field>
        <Field>
            <FieldName>clusterTopologyManager</FieldName>
            <FieldType>ClusterTopologyManager</FieldType>
        </Field>
        <Field>
            <FieldName>persistentUUIDManager</FieldName>
            <FieldType>PersistentUUIDManager</FieldType>
        </Field>
        <Field>
            <FieldName>resolveConflictsOnMerge</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>rebalanceType</FieldName>
            <FieldType>RebalanceType</FieldType>
        </Field>
        <Field>
            <FieldName>transport</FieldName>
            <FieldType>Transport</FieldType>
        </Field>
        <Field>
            <FieldName>initialTopologyId</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>joinInfo</FieldName>
            <FieldType>CacheJoinInfo</FieldType>
        </Field>
        <Field>
            <FieldName>expectedMembers</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>expectedMembers</FieldName>
            <FieldType>Address</FieldType>
        </Field>
        <Field>
            <FieldName>capacityFactors</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>capacityFactors</FieldName>
            <FieldType>Address</FieldType>
        </Field>
        <Field>
            <FieldName>joiners</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>joiners</FieldName>
            <FieldType>Address</FieldType>
        </Field>
        <Field>
            <FieldName>persistentState</FieldName>
            <FieldType>Optional</FieldType>
        </Field>
        <Field>
            <FieldName>persistentState</FieldName>
            <FieldType>ScopedPersistentState</FieldType>
        </Field>
        <Field>
            <FieldName>currentTopology</FieldName>
            <FieldType>CacheTopology</FieldType>
        </Field>
        <Field>
            <FieldName>stableTopology</FieldName>
            <FieldType>CacheTopology</FieldType>
        </Field>
        <Field>
            <FieldName>availabilityMode</FieldName>
            <FieldType>AvailabilityMode</FieldType>
        </Field>
        <Field>
            <FieldName>queuedRebalanceMembers</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>queuedRebalanceMembers</FieldName>
            <FieldType>Address</FieldType>
        </Field>
        <Field>
            <FieldName>rebalancingEnabled</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>rebalanceInProgress</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>rebalanceConfirmationCollector</FieldName>
            <FieldType>RebalanceConfirmationCollector</FieldType>
        </Field>
        <Field>
            <FieldName>status</FieldName>
            <FieldType>ComponentStatus</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ClusterCacheStatus</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheManager</ParamName>
                    <ParamType>EmbeddedCacheManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cacheName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>availabilityStrategy</ParamName>
                    <ParamType>AvailabilityStrategy</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rebalanceType</ParamName>
                    <ParamType>RebalanceType</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>clusterTopologyManager</ParamName>
                    <ParamType>ClusterTopologyManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>transport</ParamName>
                    <ParamType>Transport</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>state</ParamName>
                    <ParamType>ScopedPersistentState</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>persistentUUIDManager</ParamName>
                    <ParamType>PersistentUUIDManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>resolveConflictsOnMerge</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>state;ifPresent;[scopedPersistentState -&gt; {
  rebalancingEnabled=false;
  availabilityMode=AvailabilityMode.DEGRADED_MODE;
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getJoinInfo</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>CacheJoinInfo</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getExpectedMembers</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Address</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>queueRebalance</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>newMembers</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isTotalOrder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isDistributed</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCapacityFactors</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Address</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCurrentTopology</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>CacheTopology</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStableTopology</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>CacheTopology</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAvailabilityMode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>AvailabilityMode</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>updateAvailabilityMode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>actualMembers</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>newAvailabilityMode</ParamName>
                    <ParamType>AvailabilityMode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cancelRebalance</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [modeChanged=setAvailabilityMode(newAvailabilityMode)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>updateTopologiesAfterMerge</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>currentTopology</ParamName>
                    <ParamType>CacheTopology</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stableTopology</ParamName>
                    <ParamType>CacheTopology</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>availabilityMode</ParamName>
                    <ParamType>AvailabilityMode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>resolveConflicts</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>log;debugf;["Updating topologies after merge for cache %s, current topology = %s, stable topology = %s, " + "availability mode = %s, resolveConflicts = %s", cacheName, currentTopology, stableTopology, availabilityMode, resolveConflicts]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addMember</MethodName>
            <MethodComment>/** 
 * @return {@code true} if the joiner was not already a member, {@code false} otherwise
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>joiner</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>joinInfo</ParamName>
                    <ParamType>CacheJoinInfo</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>HashMap&lt;Address,Float&gt; [newCapacityFactors=new HashMap&lt;Address,Float&gt;(capacityFactors)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>newCapacityFactors;put;[joiner, joinInfo.getCapacityFactor()]</InnerMethodInvoke>
                <InnerMethodInvoke>persistentUUIDManager;addPersistentAddressMapping;[joiner, joinInfo.getPersistentUUID()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeMember</MethodName>
            <MethodComment>/** 
 * @return {@code true} if the leaver was a member, {@code false} otherwise
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>leaver</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>HashMap&lt;Address,Float&gt; [newCapacityFactors=new HashMap&lt;Address,Float&gt;(capacityFactors)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>newCapacityFactors;remove;[leaver]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>retainMembers</MethodName>
            <MethodComment>/** 
 * @return {@code true} if the members list has changed, {@code false} otherwise
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>newClusterMembers</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setCurrentTopology</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>newTopology</ParamName>
                    <ParamType>CacheTopology</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setStableTopology</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>newTopology</ParamName>
                    <ParamType>CacheTopology</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>needConsistentHashUpdate</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>pruneInvalidMembers</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Address</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>possibleMembers</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isRebalanceInProgress</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRebalancingStatus</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>RebalancingStatus</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>confirmRebalancePhase</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>member</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>receivedTopologyId</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rebalanceConfirmationCollector;confirmPhase;[member, receivedTopologyId]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>updateMembers</MethodName>
            <MethodComment>/** 
 * Should be called after the members list was updated in any other way ( {@link #removeMember(Address)}, {@link #retainMembers} etc.)
 * @return {@code true} if the rebalance was confirmed with this update, {@code false} if more confirmations areneeded or if the rebalance was already confirmed in another way (e.g. the last member confirmed)
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>doHandleClusterView</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>List&lt;Address&gt; [newClusterMembers=transport.getMembers()]</InnerVar>
                <InnerVar>boolean [cacheMembersModified=retainMembers(newClusterMembers)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>availabilityStrategy;onClusterViewChange;[this, newClusterMembers]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>endRebalance</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>CacheTopology [newTopology]</InnerVar>
                <InnerVar>CacheTopology [currentTopology=getCurrentTopology()]</InnerVar>
                <InnerVar>int [currentTopologyId=currentTopology.getTopologyId()]</InnerVar>
                <InnerVar>List&lt;Address&gt; [members=currentTopology.getMembers()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>CLUSTER;clusterWideRebalanceCompleted;[cacheName, currentTopologyId]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setCurrentTopology;[newTopology]</InnerMethodInvoke>
                <InnerMethodInvoke>availabilityStrategy;onRebalanceEnd;[this]</InnerMethodInvoke>
                <InnerMethodInvoke>clusterTopologyManager;broadcastTopologyUpdate;[cacheName, newTopology, availabilityMode, isTotalOrder(), isDistributed()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>endReadAllPhase</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>CacheTopology [newTopology]</InnerVar>
                <InnerVar>CacheTopology [currentTopology=getCurrentTopology()]</InnerVar>
                <InnerVar>List&lt;Address&gt; [members=currentTopology.getMembers()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setCurrentTopology;[newTopology]</InnerMethodInvoke>
                <InnerMethodInvoke>clusterTopologyManager;broadcastTopologyUpdate;[cacheName, newTopology, availabilityMode, isTotalOrder(), isDistributed()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>endReadNewPhase</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>CacheTopology [newTopology]</InnerVar>
                <InnerVar>CacheTopology [currentTopology=getCurrentTopology()]</InnerVar>
                <InnerVar>List&lt;Address&gt; [members=currentTopology.getMembers()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setCurrentTopology;[newTopology]</InnerMethodInvoke>
                <InnerMethodInvoke>clusterTopologyManager;broadcastTopologyUpdate;[cacheName, newTopology, availabilityMode, isTotalOrder(), isDistributed()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;startQueuedRebalance;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>updateCurrentTopology</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>newMembers</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ConsistentHashFactory&lt;ConsistentHash&gt; [consistentHashFactory=getJoinInfo().getConsistentHashFactory()]</InnerVar>
                <InnerVar>int [topologyId=currentTopology.getTopologyId()]</InnerVar>
                <InnerVar>int [rebalanceId=currentTopology.getRebalanceId()]</InnerVar>
                <InnerVar>ConsistentHash [currentCH=currentTopology.getCurrentCH()]</InnerVar>
                <InnerVar>ConsistentHash [pendingCH=currentTopology.getPendingCH()]</InnerVar>
                <InnerVar>List&lt;Address&gt; [newCurrentMembers=pruneInvalidMembers(currentCH.getMembers())]</InnerVar>
                <InnerVar>ConsistentHash [newCurrentCH, newPendingCH=null]</InnerVar>
                <InnerVar>CacheTopology.Phase [newPhase=CacheTopology.Phase.NO_REBALANCE]</InnerVar>
                <InnerVar>List&lt;Address&gt; [actualMembers]</InnerVar>
                <InnerVar>CacheTopology [newTopology=new CacheTopology(topologyId + 1,rebalanceId,newCurrentCH,newPendingCH,newPhase,actualMembers,persistentUUIDManager.mapAddresses(actualMembers))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setCurrentTopology;[newTopology]</InnerMethodInvoke>
                <InnerMethodInvoke>clusterTopologyManager;broadcastTopologyUpdate;[cacheName, newTopology, availabilityMode, isTotalOrder(), isDistributed()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setAvailabilityMode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>newAvailabilityMode</ParamName>
                    <ParamType>AvailabilityMode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>log;tracef;["Cache %s availability changed: %s -&gt; %s", cacheName, availabilityMode, newAvailabilityMode]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>immutableAdd</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>list</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>element</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;T&gt; [result=new ArrayList&lt;T&gt;(list)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>result;add;[element]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>immutableRemove</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>list</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>element</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;T&gt; [result=new ArrayList&lt;T&gt;(list)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>result;remove;[element]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>immutableRemoveAll</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>list</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>otherList</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;T&gt; [result=new ArrayList&lt;T&gt;(list)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>result;removeAll;[otherList]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>immutableRetainAll</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>list</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>otherList</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;T&gt; [result=new ArrayList&lt;T&gt;(list)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>result;retainAll;[otherList]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>doMergePartitions</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>statusResponses</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>recoverMembers</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>joinInfos</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>currentTopologies</ParamName>
                    <ParamType>CacheTopology</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stableTopologies</ParamName>
                    <ParamType>CacheTopology</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addMembers</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>membersToAdd</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>joinInfos</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCacheName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>doJoin</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>CacheStatusResponse</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>joiner</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>joinInfo</ParamName>
                    <ParamType>CacheJoinInfo</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [isFirstMember=getCurrentTopology() == null]</InnerVar>
                <InnerVar>boolean [memberJoined=addMember(joiner,joinInfo)]</InnerVar>
                <InnerVar>CacheTopology [topologyBeforeRebalance=getCurrentTopology()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>restoreCacheTopology</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>CacheTopology</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>state</ParamName>
                    <ParamType>ScopedPersistentState</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ConsistentHash [persistedCH=joinInfo.getConsistentHashFactory().fromPersistentState(state).remapAddresses(persistentUUIDManager.persistentUUIDToAddress())]</InnerVar>
                <InnerVar>CacheTopology [initialTopology=new CacheTopology(initialTopologyId,INITIAL_REBALANCE_ID,persistedCH,null,CacheTopology.Phase.NO_REBALANCE,persistedCH.getMembers(),persistentUUIDManager.mapAddresses(persistedCH.getMembers()))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setCurrentTopology;[initialTopology]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setStableTopology;[initialTopology]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createInitialCacheTopology</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>CacheTopology</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>List&lt;Address&gt; [initialMembers=getExpectedMembers()]</InnerVar>
                <InnerVar>ConsistentHash [initialCH=joinInfo.getConsistentHashFactory().create(joinInfo.getHashFunction(),joinInfo.getNumOwners(),joinInfo.getNumSegments(),initialMembers,getCapacityFactors())]</InnerVar>
                <InnerVar>CacheTopology [initialTopology=new CacheTopology(initialTopologyId,INITIAL_REBALANCE_ID,initialCH,null,CacheTopology.Phase.NO_REBALANCE,initialMembers,persistentUUIDManager.mapAddresses(initialMembers))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>log;tracef;["Initializing status for cache %s", cacheName]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setCurrentTopology;[initialTopology]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setStableTopology;[initialTopology]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>doLeave</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>leaver</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [actualLeaver=removeMember(leaver)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>availabilityStrategy;onGracefulLeave;[this, leaver]</InnerMethodInvoke>
                <InnerMethodInvoke>null;updateMembers;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startQueuedRebalance</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>CacheTopology [cacheTopology=getCurrentTopology()]</InnerVar>
                <InnerVar>List&lt;Address&gt; [newMembers=new ArrayList&lt;Address&gt;(queuedRebalanceMembers)]</InnerVar>
                <InnerVar>int [newTopologyId=cacheTopology.getTopologyId() + 1]</InnerVar>
                <InnerVar>int [newRebalanceId=cacheTopology.getRebalanceId() + 1]</InnerVar>
                <InnerVar>ConsistentHash [currentCH=cacheTopology.getCurrentCH()]</InnerVar>
                <InnerVar>ConsistentHashFactory [chFactory=getJoinInfo().getConsistentHashFactory()]</InnerVar>
                <InnerVar>ConsistentHash [updatedMembersCH=chFactory.updateMembers(currentCH,newMembers,getCapacityFactors())]</InnerVar>
                <InnerVar>ConsistentHash [balancedCH=chFactory.rebalance(updatedMembersCH)]</InnerVar>
                <InnerVar>boolean [updateTopology=false]</InnerVar>
                <InnerVar>boolean [rebalance=false]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>log;tracef;["Rebalancing consistent hash for cache %s, members are %s", cacheName, newMembers]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isRebalanceEnabled</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setRebalanceEnabled</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>enabled</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>forceRebalance</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;queueRebalance;[getCurrentTopology().getMembers()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;startQueuedRebalance;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>forceAvailabilityMode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>newAvailabilityMode</ParamName>
                    <ParamType>AvailabilityMode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>availabilityStrategy;onManualAvailabilityChange;[this, newAvailabilityMode]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>shutdownCache</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setInitialTopologyId</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>initialTopologyId</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>