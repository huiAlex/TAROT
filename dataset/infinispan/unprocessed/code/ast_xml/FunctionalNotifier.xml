<Class>
    <Id>1702</Id>
    <Package>org.infinispan.functional.impl</Package>
    <ClassName>FunctionalNotifier</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>ReadWriteListeners</SuperInterface>
        <SuperInterface>K</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>FunctionalNotifier  /** 
 * Listener notifier.
 * @since 8.0
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>notifyOnCreate</MethodName>
            <MethodComment>/** 
 * Notify registered  {@link ReadWriteListener} instances of the created entry.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>created</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>notifyOnModify</MethodName>
            <MethodComment>/** 
 * Notify registered  {@link ReadWriteListener} instances of the modifiedentry passing the previous and new value.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>before</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>after</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>notifyOnRemove</MethodName>
            <MethodComment>/** 
 * Notify registered  {@link ReadWriteListener} instances of the removedentry passing in the removed entry.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>removed</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>notifyOnWrite</MethodName>
            <MethodComment>/** 
 * Notify registered  {@link WriteListener} instances of the written entry.
 * @apiNote By using a {@link Supplier} the entry view can be computed lazilyonly if any listeners has been registered.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>write</ParamName>
                    <ParamType>ReadEntryView&lt;K,V&gt;</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>