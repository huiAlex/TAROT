<Class>
    <Id>1880</Id>
    <Package>org.infinispan.notifications</Package>
    <ClassName>FilteringListenable</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Listenable</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>FilteringListenable  /** 
 * A Listable that can also filter events based on key
 * @author Manik Surtani
 * @since 6.0
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>addListener</MethodName>
            <MethodComment>/** 
 * Adds a listener to the component.  Typically, listeners would need to be annotated with  {@link org.infinispan.notifications.Listener} andfurther to that, contain methods annotated appropriately, otherwise the listener will not be registered. &lt;p/&gt; See the  {@link org.infinispan.notifications.Listener} annotation for more information.&lt;p/&gt;
 * @param listener must not be null.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>listener</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>filter</ParamName>
                    <ParamType>? super K</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addListener</MethodName>
            <MethodComment>/** 
 * Registers a listener that will be notified on events that pass the filter condition.  The value presented in the notifications will be first converted using the provided converter if there is one. &lt;p&gt; Some implementations may provide optimizations when a {@link org.infinispan.notifications.cachelistener.filter.CacheEventFilterConverter} is provided as both argumentsto the &lt;b&gt;filter&lt;/b&gt; and &lt;b&gt;converter&lt;/b&gt; arguments.  Note the provided object must have reference equality ie. (==) to be recognized.  This allows for the filter and conversion step to take place in the same method call reducing possible overhead.
 * @param listener The listener to callback upon event notifications.  Must not be null.
 * @param filter The filter to see if the notification should be sent to the listener.  Can be null.
 * @param converter The converter to apply to the entry before being sent to the listener.  Can be null.
 * @param &lt; C &gt; The type of the resultant value after being converted
 * @throws NullPointerException if the specified listener is null
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>listener</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>filter</ParamName>
                    <ParamType>? super K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>converter</ParamName>
                    <ParamType>? super K</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addFilteredListener</MethodName>
            <MethodComment>/** 
 * Registers a listener limiting the cache-entry specific events only to annotations that are passed in as parameter. &lt;p/&gt; For example, if the listener passed in contains callbacks for {@link CacheEntryCreated} and {@link CacheEntryModified}, and filtered annotations contains only  {@link CacheEntryCreated}, then the listener will be registered only for  {@link CacheEntryCreated}callbacks. &lt;p/&gt; Callback filtering only applies to  {@link CacheEntryCreated}, {@link CacheEntryModified},  {@link CacheEntryRemoved}and  {@link CacheEntryExpired} annotations.If the listener contains other annotations, these are preserved. &lt;p/&gt; This methods enables dynamic registration of listener interests at runtime without the need to create several different listener classes.
 * @param listener The listener to callback upon event notifications.  Must not be null.
 * @param filter The filter to see if the notification should be sent to the listener.  Can be null.
 * @param converter The converter to apply to the entry before being sent to the listener.  Can be null.
 * @param filterAnnotations cache-entry annotations to allow listener to be registered on. Must not be null.
 * @param &lt; C &gt; The type of the resultant value after being converted
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>listener</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>filter</ParamName>
                    <ParamType>? super K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>converter</ParamName>
                    <ParamType>? super K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>filterAnnotations</ParamName>
                    <ParamType>Class&lt;? extends Annotation&gt;</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>