<Class>
    <Id>2961</Id>
    <Package>org.infinispan.distribution</Package>
    <ClassName>DistributionManager</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>DistributionManager  /** 
 * A component that manages the distribution of elements across a cache cluster
 * @author Manik Surtani
 * @author Mircea.Markus@jboss.com
 * @author Vladimir Blagojevic
 * @author anistor@redhat.com
 * @since 4.0
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getLocality</MethodName>
            <MethodComment>/** 
 * Returns the data locality characteristics of a given key.
 * @param key key to test
 * @return a DataLocality that allows you to test whether a key is mapped to the local node or not, and the degree ofcertainty of such a result.
 * @deprecated Since 9.0, please use {@code getCacheTopology().getDistributionInfo(key)} instead.
 */
</MethodComment>
            <ReturnType>DataLocality</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>locate</MethodName>
            <MethodComment>/** 
 * Locates a key in a cluster.  The returned addresses &lt;i&gt;may not&lt;/i&gt; be owners of the keys if a rehash happens to be in progress or is pending, so when querying these servers, invalid responses should be checked for and the next address checked accordingly.
 * @param key key to test
 * @return a list of addresses where the key may reside
 * @deprecated Since 9.0, please use {@code getCacheTopology().getDistributionInfo(key)} instead.
 */
</MethodComment>
            <ReturnType>Address</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPrimaryLocation</MethodName>
            <MethodComment>/** 
 * Returns the first Address containing the key.  Equivalent to returning the first element of  {@link #locate(Object)}
 * @param key key to test
 * @return the first address on which the key may reside
 * @deprecated Since 9.0, please use {@code getCacheTopology().getDistributionInfo(key)} instead.
 */
</MethodComment>
            <ReturnType>Address</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>locateAll</MethodName>
            <MethodComment>/** 
 * Locates a list of keys in a cluster.  Like  {@link #locate(Object)} the returned addresses &lt;i&gt;may not&lt;/i&gt; be ownersof the keys if a rehash happens to be in progress or is pending, so when querying these servers, invalid responses should be checked for and the next address checked accordingly.
 * @param keys list of keys to locate
 * @return all the nodes that would need to write a copy of one of the keys.
 * @deprecated Since 9.0, no direct replacement.
 */
</MethodComment>
            <ReturnType>Address</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>keys</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getConsistentHash</MethodName>
            <MethodComment>/** 
 * @return the consistent hash used for writing.
 * @deprecated Since 9.0, please use {@link #getWriteConsistentHash()} instead.
 */
</MethodComment>
            <ReturnType>ConsistentHash</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getReadConsistentHash</MethodName>
            <MethodComment>/** 
 * @return the consistent hash used for reading.
 */
</MethodComment>
            <ReturnType>ConsistentHash</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getWriteConsistentHash</MethodName>
            <MethodComment>/** 
 * @return the consistent hash used for writing.
 */
</MethodComment>
            <ReturnType>ConsistentHash</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isAffectedByRehash</MethodName>
            <MethodComment>/** 
 * Tests whether a given key is affected by a rehash that may be in progress.  If no rehash is in progress, this method returns false.  Helps determine whether additional steps are necessary in handling an operation with a given key.
 * @param key key to test
 * @return whether a key is affected by a rehash
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isRehashInProgress</MethodName>
            <MethodComment>/** 
 * Tests whether a rehash is in progress
 * @return true if a rehash is in progress, false otherwise
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isJoinComplete</MethodName>
            <MethodComment>/** 
 * Tests whether the current instance has completed joining the cluster
 * @return true if join is in progress, false otherwise
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCacheTopology</MethodName>
            <MethodComment>/** 
 * @return the current cache topology, which includes the read and write consistent hashes.
 */
</MethodComment>
            <ReturnType>LocalizedCacheTopology</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setCacheTopology</MethodName>
            <MethodComment>/** 
 * @deprecated Internal only.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheTopology</ParamName>
                    <ParamType>CacheTopology</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createLocalizedCacheTopology</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>LocalizedCacheTopology</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheTopology</ParamName>
                    <ParamType>CacheTopology</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>