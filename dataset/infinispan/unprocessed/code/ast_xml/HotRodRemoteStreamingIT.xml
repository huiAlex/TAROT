<Class>
    <Id>3966</Id>
    <Package>org.infinispan.server.test.client.hotrod</Package>
    <ClassName>HotRodRemoteStreamingIT</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>HotRodRemoteStreamingIT  /** 
 * The basic set of tests for Streaming API over HottRod client
 * @author zhostasa
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>SERVER_1_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>SERVER_2_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>USED_MEMORY_KEY</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>server1</FieldName>
            <FieldType>RemoteInfinispanServer</FieldType>
        </Field>
        <Field>
            <FieldName>rcm1</FieldName>
            <FieldType>RemoteCacheManager</FieldType>
        </Field>
        <Field>
            <FieldName>server2</FieldName>
            <FieldType>RemoteInfinispanServer</FieldType>
        </Field>
        <Field>
            <FieldName>rcm2</FieldName>
            <FieldType>RemoteCacheManager</FieldType>
        </Field>
        <Field>
            <FieldName>src1</FieldName>
            <FieldType>StreamingRemoteCache</FieldType>
        </Field>
        <Field>
            <FieldName>src1</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>src2</FieldName>
            <FieldType>StreamingRemoteCache</FieldType>
        </Field>
        <Field>
            <FieldName>src2</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>controller</FieldName>
            <FieldType>ContainerController</FieldType>
        </Field>
        <Field>
            <FieldName>conf1</FieldName>
            <FieldType>Configuration</FieldType>
        </Field>
        <Field>
            <FieldName>conf2</FieldName>
            <FieldType>Configuration</FieldType>
        </Field>
        <Field>
            <FieldName>finalized</FieldName>
            <FieldType>Boolean</FieldType>
        </Field>
        <Field>
            <FieldName>random</FieldName>
            <FieldType>Random</FieldType>
        </Field>
        <Field>
            <FieldName>seed</FieldName>
            <FieldType>Long</FieldType>
        </Field>
        <Field>
            <FieldName>size</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>randForData</FieldName>
            <FieldType>Random</FieldType>
        </Field>
        <Field>
            <FieldName>cache1</FieldName>
            <FieldType>StreamingRemoteCache</FieldType>
        </Field>
        <Field>
            <FieldName>cache1</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>cache2</FieldName>
            <FieldType>StreamingRemoteCache</FieldType>
        </Field>
        <Field>
            <FieldName>cache2</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>outStream</FieldName>
            <FieldType>OutputStream</FieldType>
        </Field>
        <Field>
            <FieldName>inStream</FieldName>
            <FieldType>InputStream</FieldType>
        </Field>
        <Field>
            <FieldName>count</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>state</FieldName>
            <FieldType>Boolean</FieldType>
        </Field>
        <Field>
            <FieldName>min</FieldName>
            <FieldType>Long</FieldType>
        </Field>
        <Field>
            <FieldName>max</FieldName>
            <FieldType>Long</FieldType>
        </Field>
        <Field>
            <FieldName>average</FieldName>
            <FieldType>Long</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>setUp</MethodName>
            <MethodComment>/** 
 * Refresh the resources for each test
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkServers</MethodName>
            <MethodComment>/** 
 * Check the server status for tests which involve shutting servers down
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testBasicFunctionality</MethodName>
            <MethodComment>/** 
 * Test for basic functionality on multiple streams
 * @throws Exception
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [streamCount=100]</InnerVar>
                <InnerVar>List&lt;RandomInserter&gt; [inserterList=new ArrayList&lt;RandomInserter&gt;()]</InnerVar>
                <InnerVar>boolean [result=true]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testGCOpenStream</MethodName>
            <MethodComment>/** 
 * Test behaviour of cache if stream object if garbageCollected
 * @throws Exception
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Long [seed=random.nextLong()]</InnerVar>
                <InnerVar>RandomInserter [ri=new RandomInserter(seed,src1,src1)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ri;process;[]</InnerMethodInvoke>
                <InnerMethodInvoke>ri;process;[]</InnerMethodInvoke>
                <InnerMethodInvoke>System;gc;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNull;["Partial object found in cache1", src1.get(seed)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNull;["Partial object found in cache2", src2.get(seed)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testNegativeOneInStream</MethodName>
            <MethodComment>/** 
 * Test stream reaction on negative one value in stream
 * @throws IOException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Long [seed=random.nextLong()]</InnerVar>
                <InnerVar>byte[] [ba=new byte[1000]]</InnerVar>
                <InnerVar>OutputStream [out=src1.put(seed)]</InnerVar>
                <InnerVar>InputStream [in=src2.get(seed)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>random;nextBytes;[ba]</InnerMethodInvoke>
                <InnerMethodInvoke>out;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>in;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testKeyConcurency</MethodName>
            <MethodComment>/** 
 * Test cache behaviour if same key is being manipulated multiple times
 * @throws IOException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [val1=123, val2=234]</InnerVar>
                <InnerVar>Long [seed=random.nextLong()]</InnerVar>
                <InnerVar>OutputStream [out1=src1.put(seed)]</InnerVar>
                <InnerVar>OutputStream [out2=src2.put(seed)]</InnerVar>
                <InnerVar>InputStream [in=src1.get(seed)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>out1;write;[val1]</InnerMethodInvoke>
                <InnerMethodInvoke>out2;write;[val2]</InnerMethodInvoke>
                <InnerMethodInvoke>out1;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>out2;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["", val2, in.read()]</InnerMethodInvoke>
                <InnerMethodInvoke>in;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>out1;write;[val1]</InnerMethodInvoke>
                <InnerMethodInvoke>out2;write;[val2]</InnerMethodInvoke>
                <InnerMethodInvoke>out1;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>out2;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["", val1, in.read()]</InnerMethodInvoke>
                <InnerMethodInvoke>in;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>RCMStopTest</MethodName>
            <MethodComment>/** 
 * Test correct behaviour for RemoteCacheManagers start/stop function &lt;br&gt; Current operations can be completed, but no new operations are supposed to be issued
 * @throws IOException
 * @throws InterruptedException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>byte[] [value=new byte[100]]</InnerVar>
                <InnerVar>byte[] [ret=new byte[100]]</InnerVar>
                <InnerVar>Long [key=random.nextLong()]</InnerVar>
                <InnerVar>OutputStream [out=src1.put(key)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>random;nextBytes;[value]</InnerMethodInvoke>
                <InnerMethodInvoke>out;write;[value, 0, 50]</InnerMethodInvoke>
                <InnerMethodInvoke>rcm1;stop;[]</InnerMethodInvoke>
                <InnerMethodInvoke>out;write;[value, 50, 50]</InnerMethodInvoke>
                <InnerMethodInvoke>out;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>rcm1;start;[]</InnerMethodInvoke>
                <InnerMethodInvoke>src1.get(key);read;[ret]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;["Returned value incorrect", Arrays.equals(ret,value)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>serverShutdownTest</MethodName>
            <MethodComment>/** 
 * Test behaviour if one server is gracefully shutdown
 * @throws IOException
 * @throws InterruptedException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>byte[] [value=new byte[5000]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>random;nextBytes;[value]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>serverKillTest</MethodName>
            <MethodComment>/** 
 * Test behaviour if one server is killed
 * @throws IOException
 * @throws InterruptedException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>byte[] [value=new byte[5000]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>random;nextBytes;[value]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>performanceTest</MethodName>
            <MethodComment>/** 
 * Test basic memory consumption difference between standard API and streaming API
 * @throws Exception
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isFinalized</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setFinalized</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>finalized</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>killServer</MethodName>
            <MethodComment>/** 
 * Convenience method for killing servers according to number parity
 * @param i
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>i</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>stopServer</MethodName>
            <MethodComment>/** 
 * Convenience method for stopping servers according to number parity
 * @param i
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>i</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startServer</MethodName>
            <MethodComment>/** 
 * Convenience method for starting servers according to number parity
 * @param i
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>i</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setUp;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>RandomInserter</MethodName>
            <MethodComment>/** 
 * Both cache instances can be identical
 * @param seed seed for object data, can be null
 * @param cache1 cache to put object to
 * @param cache2 cache to get object from
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>seed</ParamName>
                    <ParamType>Long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cache1</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cache2</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>process</MethodName>
            <MethodComment>/** 
 * @return true if the test was finished successfully, false otherwise
 * @throws Exception Exception is to be considered a failed test
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>finalize</MethodName>
            <MethodComment>/** 
 * Sets finalized flag in parent class for GC test
 * @throws Throwable
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setFinalized;[true]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Throwable</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>randomBytes</MethodName>
            <MethodComment>/** 
 * Because Random.nextBytes(byte[]) will drop bytes between calls
 * @param ba byte[] to fill
 * @param count number or bytes to fill in
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ba</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>count</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>MemoryUsage</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>startValue</ParamName>
                    <ParamType>Long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>MemoryUsage</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>min</ParamName>
                    <ParamType>Long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>max</ParamName>
                    <ParamType>Long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>average</ParamName>
                    <ParamType>Long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>update</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>Long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setMax;[value]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setMin;[value]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addToAverage;[value]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMax</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setMax</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>max</ParamName>
                    <ParamType>Long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMin</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setMin</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>min</ParamName>
                    <ParamType>Long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAverage</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addToAverage</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>average</ParamName>
                    <ParamType>Long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>StringBuilder [sb=new StringBuilder()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>sb;append;["MemoryStats:\n"]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;["Max memory: " + getMax() + "\n"]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;["Min memory: " + getMin() + "\n"]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;["Avg memory: " + getAverage() + "\n"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>