<Class>
    <Id>1997</Id>
    <Package>org.infinispan.util</Package>
    <ClassName>UserRaisedFunctionalException</ClassName>
    <SuperClass>RuntimeException</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>UserRaisedFunctionalException  /** 
 * Thrown when client's code passed as a labda expression in commands such as  {@link org.infinispan.commands.write.ComputeIfAbsentCommand}raises a exception. We don't want to convert this excepton into a  {@link org.infinispan.commons.CacheException} butinstead just propagate it to the user as it is.
 * @author karesti@redhat.com
 * @since 9.1
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>UserRaisedFunctionalException</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cause</ParamName>
                    <ParamType>Throwable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>UserRaisedFunctionalException</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>msg</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cause</ParamName>
                    <ParamType>Throwable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>