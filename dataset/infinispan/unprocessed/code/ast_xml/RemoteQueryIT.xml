<Class>
    <Id>3534</Id>
    <Package>org.infinispan.server.test.query</Package>
    <ClassName>RemoteQueryIT</ClassName>
    <SuperClass>RemoteQueryBaseIT</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>RemoteQueryIT  /** 
 * Tests for remote queries over HotRod on a local cache using RAM directory.
 * @author Adrian Nistor
 * @author Martin Gencur
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>server</FieldName>
            <FieldType>RemoteInfinispanServer</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>RemoteQueryIT</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>RemoteQueryIT</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheContainerName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cacheName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getServer</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>RemoteInfinispanServer</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testAttributeQuery</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>User [fromCache=remoteCache.get(1)]</InnerVar>
                <InnerVar>QueryFactory [qf=Search.getQueryFactory(remoteCache)]</InnerVar>
                <InnerVar>Query [query=qf.from(User.class).having("name").eq("Tom").build()]</InnerVar>
                <InnerVar>List&lt;User&gt; [list=query.list()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>remoteCache;put;[1, createUser1()]</InnerMethodInvoke>
                <InnerMethodInvoke>remoteCache;put;[2, createUser2()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertUser;[fromCache]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotNull;[list]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[1, list.size()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[User.class, list.get(0).getClass()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertUser;[list.get(0)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testEmbeddedAttributeQuery</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>QueryFactory [qf=Search.getQueryFactory(remoteCache)]</InnerVar>
                <InnerVar>Query [query=qf.from(User.class).having("addresses.postCode").eq("1234").build()]</InnerVar>
                <InnerVar>List&lt;User&gt; [list=query.list()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>remoteCache;put;[1, createUser1()]</InnerMethodInvoke>
                <InnerMethodInvoke>remoteCache;put;[2, createUser2()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotNull;[list]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[1, list.size()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[User.class, list.get(0).getClass()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertUser;[list.get(0)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testProjections</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>User [fromCache=remoteCache.get(1)]</InnerVar>
                <InnerVar>QueryFactory [qf=Search.getQueryFactory(remoteCache)]</InnerVar>
                <InnerVar>Query [query=qf.from(User.class).select("name","surname").having("name").eq("Tom").build()]</InnerVar>
                <InnerVar>List&lt;Object[]&gt; [list=query.list()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>remoteCache;put;[1, createUser1()]</InnerMethodInvoke>
                <InnerMethodInvoke>remoteCache;put;[2, createUser2()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertUser;[fromCache]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotNull;[list]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[1, list.size()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[Object[].class, list.get(0).getClass()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["Tom", list.get(0)[0]]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["Cat", list.get(0)[1]]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testUninverting</MethodName>
            <MethodComment>/** 
 * Sorting on a field that does not contain DocValues so Hibernate Search is forced to uninvert it.
 * @see &lt;a href="https://issues.jboss.org/browse/ISPN-5729"&gt;https://issues.jboss.org/browse/ISPN-5729&lt;/a&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>QueryFactory [qf=Search.getQueryFactory(remoteCache)]</InnerVar>
                <InnerVar>Query [query=qf.from(User.class).having("name").eq("John").orderBy("id").build()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>remoteCache;put;[1, createUser1()]</InnerMethodInvoke>
                <InnerMethodInvoke>remoteCache;put;[2, createUser2()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[0, query.list().size()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testIteratorWithQuery</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>QueryFactory [qf=Search.getQueryFactory(remoteCache)]</InnerVar>
                <InnerVar>Query [simpleQuery=qf.from(User.class).having("name").eq("Tom").build()]</InnerVar>
                <InnerVar>List&lt;Map.Entry&lt;Object,Object&gt;&gt; [entries=new ArrayList&lt;&gt;(1)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>remoteCache;put;[1, createUser1()]</InnerMethodInvoke>
                <InnerMethodInvoke>remoteCache;put;[2, createUser2()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[1, entries.size()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["Cat", ((User)entries.get(0).getValue()).getSurname()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testIteratorWithQueryAndProjections</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>QueryFactory [qf=Search.getQueryFactory(remoteCache)]</InnerVar>
                <InnerVar>Query [simpleQuery=qf.from(User.class).select("surname","name").having("name").eq("Tom").build()]</InnerVar>
                <InnerVar>List&lt;Map.Entry&lt;Object,Object&gt;&gt; [entries=new ArrayList&lt;&gt;(1)]</InnerVar>
                <InnerVar>Object[] [projections=(Object[])entries.get(0).getValue()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>remoteCache;put;[1, createUser1()]</InnerMethodInvoke>
                <InnerMethodInvoke>remoteCache;put;[2, createUser2()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[1, entries.size()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["Cat", projections[0]]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["Tom", projections[1]]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createUser1</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>User</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>User [user=new User()]</InnerVar>
                <InnerVar>Address [address=new Address()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>user;setId;[1]</InnerMethodInvoke>
                <InnerMethodInvoke>user;setName;["Tom"]</InnerMethodInvoke>
                <InnerMethodInvoke>user;setSurname;["Cat"]</InnerMethodInvoke>
                <InnerMethodInvoke>user;setGender;[User.Gender.MALE]</InnerMethodInvoke>
                <InnerMethodInvoke>user;setAccountIds;[Collections.singleton(12)]</InnerMethodInvoke>
                <InnerMethodInvoke>address;setStreet;["Dark Alley"]</InnerMethodInvoke>
                <InnerMethodInvoke>address;setPostCode;["1234"]</InnerMethodInvoke>
                <InnerMethodInvoke>user;setAddresses;[Collections.singletonList(address)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createUser2</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>User</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>User [user=new User()]</InnerVar>
                <InnerVar>Address [address=new Address()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>user;setId;[2]</InnerMethodInvoke>
                <InnerMethodInvoke>user;setName;["Adrian"]</InnerMethodInvoke>
                <InnerMethodInvoke>user;setSurname;["Nistor"]</InnerMethodInvoke>
                <InnerMethodInvoke>user;setGender;[User.Gender.MALE]</InnerMethodInvoke>
                <InnerMethodInvoke>address;setStreet;["Old Street"]</InnerMethodInvoke>
                <InnerMethodInvoke>address;setPostCode;["XYZ"]</InnerMethodInvoke>
                <InnerMethodInvoke>user;setAddresses;[Collections.singletonList(address)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>assertUser</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>user</ParamName>
                    <ParamType>User</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertNotNull;[user]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[1, user.getId()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["Tom", user.getName()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["Cat", user.getSurname()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[User.Gender.MALE, user.getGender()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotNull;[user.getAccountIds()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[1, user.getAccountIds().size()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;[user.getAccountIds().contains(12)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotNull;[user.getAddresses()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[1, user.getAddresses().size()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["Dark Alley", user.getAddresses().get(0).getStreet()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["1234", user.getAddresses().get(0).getPostCode()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>