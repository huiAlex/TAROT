<Class>
    <Id>2677</Id>
    <Package>org.infinispan.jcache.annotation</Package>
    <ClassName>AbstractCacheRemoveAllInterceptor</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Serializable</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>AbstractCacheRemoveAllInterceptor  /** 
 * &lt;p&gt; {@link javax.cache.annotation.CacheRemoveAll} interceptor implementation. This interceptor uses the following algorithm describes inJSR-107.&lt;/p&gt; &lt;p&gt;The interceptor that intercepts method annotated with  {@code @CacheRemoveAll} must do the following, remove allentries associated with the cache. The removeAll occurs after the method body is executed. This can be overridden by specifying a afterInvocation attribute value of false. If afterInvocation is true and the annotated method throws an exception, the removeAll will not happen.&lt;/p&gt;
 * @author Kevin Pollet &lt;kevin.pollet@serli.com&gt; (C) 2011 SERLI
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>trace</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>serialVersionUID</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>cacheResolver</FieldName>
            <FieldType>CacheResolver</FieldType>
        </Field>
        <Field>
            <FieldName>contextFactory</FieldName>
            <FieldType>CacheKeyInvocationContextFactory</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>AbstractCacheRemoveAllInterceptor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheResolver</ParamName>
                    <ParamType>CacheResolver</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>contextFactory</ParamName>
                    <ParamType>CacheKeyInvocationContextFactory</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cacheRemoveAll</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>invocationContext</ParamName>
                    <ParamType>InvocationContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CacheKeyInvocationContext&lt;CacheRemoveAll&gt; [cacheKeyInvocationContext=contextFactory.getCacheKeyInvocationContext(invocationContext)]</InnerVar>
                <InnerVar>CacheRemoveAll [cacheRemoveAll=cacheKeyInvocationContext.getCacheAnnotation()]</InnerVar>
                <InnerVar>Cache&lt;GeneratedCacheKey,Object&gt; [cache=cacheResolver.resolveCache(cacheKeyInvocationContext)]</InnerVar>
                <InnerVar>Object [result=invocationContext.proceed()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLog</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Log</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>