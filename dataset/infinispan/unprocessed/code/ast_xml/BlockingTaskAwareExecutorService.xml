<Class>
    <Id>2188</Id>
    <Package>org.infinispan.util.concurrent</Package>
    <ClassName>BlockingTaskAwareExecutorService</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>ExecutorService</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>BlockingTaskAwareExecutorService  /** 
 * Executor service that is aware of  {@code BlockingRunnable} and only dispatch the runnable to a thread when it has low(or no) probability of blocking the thread. &lt;p/&gt; However, it is not aware of the changes in the state so you must invoke  {@link #checkForReadyTasks()} to notifythis that some runnable may be ready to be processed.
 * @author Pedro Ruivo
 * @since 5.3
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>execute</MethodName>
            <MethodComment>/** 
 * Executes the given command at some time in the future when the command is less probably to block a thread.
 * @param runnable the command to execute
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>runnable</ParamName>
                    <ParamType>BlockingRunnable</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkForReadyTasks</MethodName>
            <MethodComment>/** 
 * It checks for tasks ready to be processed in this  {@link ExecutorService}. The invocation is done asynchronously, so the invoker is never blocked.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>