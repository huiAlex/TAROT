<Class>
    <Id>3294</Id>
    <Package>org.infinispan.transaction.xa.recovery</Package>
    <ClassName>RecoveryManager</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>RecoveryManager  /** 
 * RecoveryManager is the component responsible with managing recovery related information and the functionality associated with it. Refer to &lt;a href="http://community.jboss.org/wiki/Transactionrecoverydesign"&gt;this&lt;/a&gt; document for details on the design of recovery.
 * @author Mircea.Markus@jboss.com
 * @since 5.0
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>NOTHING</FieldName>
            <FieldType>Xid[]</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getPreparedTransactionsFromCluster</MethodName>
            <MethodComment>/** 
 * Returns the list of transactions in prepared state from both local and remote cluster nodes. Implementation can take advantage of several optimisations: &lt;ul&gt; &lt;li&gt;in order to get all tx from the cluster a broadcast is performed. This can be performed only once (assuming the call is successful), the first time this method is called. After that a local, cached list of tx prepared on this node is returned.&lt;/li&gt; &lt;li&gt;during the broadcast just return the list of prepared transactions that are not originated on other active nodes of the cluster.&lt;/li&gt; &lt;/ul&gt;
 */
</MethodComment>
            <ReturnType>RecoveryIterator</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getInDoubtTransactionInfoFromCluster</MethodName>
            <MethodComment>/** 
 * Returns a  {@link Set} containing all the in-doubt transactions from the cluster, including the local node. Thisdoes not include transactions that are prepared successfully and for which the originator is still in the cluster.
 * @see InDoubtTxInfo
 */
</MethodComment>
            <ReturnType>InDoubtTxInfo</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getInDoubtTransactionInfo</MethodName>
            <MethodComment>/** 
 * Same as  {@link #getInDoubtTransactionInfoFromCluster()}, but only returns transactions from the local node.
 */
</MethodComment>
            <ReturnType>InDoubtTxInfo</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeRecoveryInformation</MethodName>
            <MethodComment>/** 
 * Removes from the specified nodes (or all nodes if the value of 'where' is null) the recovery information associated with these Xids.
 * @param skipTxCompletionCommand {@code true} if it must skip the {@link org.infinispan.commands.remote.recovery.TxCompletionNotificationCommand}. Used when a partition happens.
 * @param where                   on which nodes should this be executed.
 * @param xid                     the list of xids to be removed.
 * @param sync                    execute sync or async (false)
 * @param gtx                     the global transaction
 * @param fromCluster
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>where</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>xid</ParamName>
                    <ParamType>Xid</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sync</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>gtx</ParamName>
                    <ParamType>GlobalTransaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fromCluster</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeRecoveryInformationFromCluster</MethodName>
            <MethodComment>/** 
 * Same as  {@link #removeRecoveryInformation(java.util.Collection,javax.transaction.xa.Xid,boolean,org.infinispan.transaction.xa.GlobalTransaction,boolean)} but the transaction is identified by its internal id,and not by its xid.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>where</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>internalId</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sync</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getInDoubtTransactions</MethodName>
            <MethodComment>/** 
 * Local call that returns a list containing: &lt;pre&gt; - all the remote transactions prepared on this node for which the originator(i.e. the node where the tx stared) is no longer part of the cluster. AND - all the locally originated transactions which are prepared and for which the commit failed &lt;/pre&gt;
 * @see RecoveryAwareRemoteTransaction#isInDoubt()
 */
</MethodComment>
            <ReturnType>Xid</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPreparedTransaction</MethodName>
            <MethodComment>/** 
 * Local call returning the remote transaction identified by the supplied xid or null.
 */
</MethodComment>
            <ReturnType>RecoveryAwareTransaction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xid</ParamName>
                    <ParamType>Xid</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>forceTransactionCompletion</MethodName>
            <MethodComment>/** 
 * Replays the given transaction by re-running the prepare and commit. This call expects the transaction to exist on this node either as a local or remote transaction.
 * @param xid    tx to commit or rollback
 * @param commit if true tx is committed, if false it is rolled back
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xid</ParamName>
                    <ParamType>Xid</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>commit</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>forceTransactionCompletionFromCluster</MethodName>
            <MethodComment>/** 
 * This method invokes  {@link #forceTransactionCompletion(javax.transaction.xa.Xid,boolean)} on the specified node.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xid</ParamName>
                    <ParamType>Xid</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>where</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>commit</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isTransactionPrepared</MethodName>
            <MethodComment>/** 
 * Checks both internal state and transaction table's state for the given tx. If it finds it, returns true if tx is prepared.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>globalTx</ParamName>
                    <ParamType>GlobalTransaction</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeRecoveryInformation</MethodName>
            <MethodComment>/** 
 * Same as  {@link #removeRecoveryInformation(javax.transaction.xa.Xid)} but identifies the tx by its internal id.
 */
</MethodComment>
            <ReturnType>RecoveryAwareTransaction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>internalId</ParamName>
                    <ParamType>Long</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeRecoveryInformation</MethodName>
            <MethodComment>/** 
 * Remove recovery information stored on this node (doesn't involve rpc).
 * @param xid@see #removeRecoveryInformation(java.util.Collection, javax.transaction.xa.Xid, boolean)
 */
</MethodComment>
            <ReturnType>RecoveryAwareTransaction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xid</ParamName>
                    <ParamType>Xid</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>registerInDoubtTransaction</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tx</ParamName>
                    <ParamType>RecoveryAwareRemoteTransaction</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>all</MethodName>
            <MethodComment>/** 
 * Exhaust the iterator. After this call,  {@link #hasNext()} returns false.
 */
</MethodComment>
            <ReturnType>Xid[]</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getXid</MethodName>
            <MethodComment>/** 
 * Transaction's id.
 */
</MethodComment>
            <ReturnType>Xid</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getInternalId</MethodName>
            <MethodComment>/** 
 * Each xid has a unique long object associated to it. It makes possible the invocation of recovery operations.
 */
</MethodComment>
            <ReturnType>Long</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStatus</MethodName>
            <MethodComment>/** 
 * The value represent transaction's state as described by the  {@code status} field. Multiple values are returnedas it is possible for an in-doubt transaction to be at the same time e.g. prepared on one node and committed on the other.
 */
</MethodComment>
            <ReturnType>Integer</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOwners</MethodName>
            <MethodComment>/** 
 * Returns the set of nodes where this transaction information is maintained.
 */
</MethodComment>
            <ReturnType>Address</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isLocal</MethodName>
            <MethodComment>/** 
 * Returns true if the transaction information is also present on this node.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>