<Class>
    <Id>596</Id>
    <Package>org.infinispan.query.dsl.embedded.impl</Package>
    <ClassName>QueryEngine</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>QueryEngine  /** 
 * @author anistor@redhat.com
 * @since 7.2
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>MAX_EXPANSION_COFACTORS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>cache</FieldName>
            <FieldType>AdvancedCache</FieldType>
        </Field>
        <Field>
            <FieldName>cache</FieldName>
            <FieldType>?</FieldType>
        </Field>
        <Field>
            <FieldName>isIndexed</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>matcher</FieldName>
            <FieldType>Matcher</FieldType>
        </Field>
        <Field>
            <FieldName>matcherImplClass</FieldName>
            <FieldType>Class</FieldType>
        </Field>
        <Field>
            <FieldName>matcherImplClass</FieldName>
            <FieldType>? extends Matcher</FieldType>
        </Field>
        <Field>
            <FieldName>propertyHelper</FieldName>
            <FieldType>ObjectPropertyHelper</FieldType>
        </Field>
        <Field>
            <FieldName>propertyHelper</FieldName>
            <FieldType>TypeMetadata</FieldType>
        </Field>
        <Field>
            <FieldName>fieldBridgeAndAnalyzerProvider</FieldName>
            <FieldType>LuceneQueryMaker.FieldBridgeAndAnalyzerProvider</FieldType>
        </Field>
        <Field>
            <FieldName>fieldBridgeAndAnalyzerProvider</FieldName>
            <FieldType>TypeMetadata</FieldType>
        </Field>
        <Field>
            <FieldName>queryCache</FieldName>
            <FieldType>QueryCache</FieldType>
        </Field>
        <Field>
            <FieldName>searchManager</FieldName>
            <FieldType>SearchManager</FieldType>
        </Field>
        <Field>
            <FieldName>searchFactory</FieldName>
            <FieldType>SearchIntegrator</FieldType>
        </Field>
        <Field>
            <FieldName>booleanFilterNormalizer</FieldName>
            <FieldType>BooleanFilterNormalizer</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>QueryEngine</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cache</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isIndexed</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>matcherImplClass</ParamName>
                    <ParamType>? extends Matcher</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fieldBridgeAndAnalyzerProvider</ParamName>
                    <ParamType>TypeMetadata</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>wrapCache</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cache</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isIndexed</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSearchManager</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>SearchManager</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSearchFactory</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>SearchIntegrator</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildQuery</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BaseQuery</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>queryFactory</ParamName>
                    <ParamType>QueryFactory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parsingResult</ParamName>
                    <ParamType>TypeMetadata</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>namedParameters</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>startOffset</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>maxResults</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BaseQuery [query=parsingResult.hasGroupingOrAggregations() ? buildQueryWithAggregations(queryFactory,parsingResult.getQueryString(),namedParameters,startOffset,maxResults,parsingResult) : buildQueryNoAggregations(queryFactory,parsingResult.getQueryString(),namedParameters,startOffset,maxResults,parsingResult)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>query;validateNamedParameters;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildQueryWithAggregations</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BaseQuery</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>queryFactory</ParamName>
                    <ParamType>QueryFactory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>queryString</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>namedParameters</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>startOffset</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>maxResults</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parsingResult</ParamName>
                    <ParamType>TypeMetadata</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LinkedHashMap&lt;PropertyPath,RowPropertyHelper.ColumnMetadata&gt; [columns=new LinkedHashMap&lt;&gt;()]</InnerVar>
                <InnerVar>int [noOfGroupingColumns=columns.size()]</InnerVar>
                <InnerVar>String [havingClause=null]</InnerVar>
                <InnerVar>LinkedHashMap&lt;String,Integer&gt; [inColumns=new LinkedHashMap&lt;&gt;()]</InnerVar>
                <InnerVar>List&lt;FieldAccumulator&gt; [accumulators=new LinkedList&lt;&gt;()]</InnerVar>
                <InnerVar>RowPropertyHelper.ColumnMetadata[] [_columns=new RowPropertyHelper.ColumnMetadata[columns.size()]]</InnerVar>
                <InnerVar>StringBuilder [firstPhaseQuery=new StringBuilder()]</InnerVar>
                <InnerVar>StringBuilder [secondPhaseQuery=new StringBuilder()]</InnerVar>
                <InnerVar>String [firstPhaseQueryStr=firstPhaseQuery.toString()]</InnerVar>
                <InnerVar>BaseQuery [baseQuery=buildQueryNoAggregations(queryFactory,firstPhaseQueryStr,namedParameters,-1,-1,parse(firstPhaseQueryStr))]</InnerVar>
                <InnerVar>String [secondPhaseQueryStr=secondPhaseQuery.toString()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>firstPhaseQuery;append;["SELECT "]</InnerMethodInvoke>
                <InnerMethodInvoke>firstPhaseQuery.append(" FROM ").append(parsingResult.getTargetEntityName()).append(' ');append;[QueryStringCreator.DEFAULT_ALIAS]</InnerMethodInvoke>
                <InnerMethodInvoke>secondPhaseQuery;append;["SELECT "]</InnerMethodInvoke>
                <InnerMethodInvoke>secondPhaseQuery;append;[" FROM Row "]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>swapVariables</MethodName>
            <MethodComment>/** 
 * Swaps all occurrences of PropertyPaths in given expression tree (the HAVING clause) with new PropertyPaths according to the mapping found in  {@code columns} map.
 */
</MethodComment>
            <ReturnType>BooleanExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expr</ParamName>
                    <ParamType>BooleanExpr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>targetEntityMetadata</ParamName>
                    <ParamType>TypeMetadata</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columns</ParamName>
                    <ParamType>PropertyPath</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>namedParameters</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>propertyHelper</ParamName>
                    <ParamType>TypeMetadata</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BooleanExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>notExpr</ParamName>
                    <ParamType>NotExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BooleanExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>orExpr</ParamName>
                    <ParamType>OrExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;BooleanExpr&gt; [visitedChildren=new ArrayList&lt;&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BooleanExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>andExpr</ParamName>
                    <ParamType>AndExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;BooleanExpr&gt; [visitedChildren=new ArrayList&lt;&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BooleanExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>constantBooleanExpr</ParamName>
                    <ParamType>ConstantBooleanExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BooleanExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>isNullExpr</ParamName>
                    <ParamType>IsNullExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BooleanExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>comparisonExpr</ParamName>
                    <ParamType>ComparisonExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BooleanExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>likeExpr</ParamName>
                    <ParamType>LikeExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ValueExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>constantValueExpr</ParamName>
                    <ParamType>ConstantValueExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ValueExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>propertyValueExpr</ParamName>
                    <ParamType>PropertyValueExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>RowPropertyHelper.ColumnMetadata [c=columns.get(propertyValueExpr.getPropertyPath())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ValueExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>aggregationExpr</ParamName>
                    <ParamType>AggregationExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>RowPropertyHelper.ColumnMetadata [c=columns.get(aggregationExpr.getPropertyPath())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildQueryWithRepeatedAggregations</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BaseQuery</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>queryFactory</ParamName>
                    <ParamType>QueryFactory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>queryString</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>namedParameters</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>startOffset</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>maxResults</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parsingResult</ParamName>
                    <ParamType>TypeMetadata</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>havingClause</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columns</ParamName>
                    <ParamType>PropertyPath</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>noOfGroupingColumns</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuilder [firstPhaseQuery=new StringBuilder()]</InnerVar>
                <InnerVar>String [firstPhaseQueryStr=firstPhaseQuery.toString()]</InnerVar>
                <InnerVar>BaseQuery [baseQuery=buildQueryNoAggregations(queryFactory,firstPhaseQueryStr,namedParameters,-1,-1,parse(firstPhaseQueryStr))]</InnerVar>
                <InnerVar>List&lt;FieldAccumulator&gt; [secondPhaseAccumulators=new LinkedList&lt;&gt;()]</InnerVar>
                <InnerVar>List&lt;FieldAccumulator&gt; [thirdPhaseAccumulators=new LinkedList&lt;&gt;()]</InnerVar>
                <InnerVar>RowPropertyHelper.ColumnMetadata[] [_columns=new RowPropertyHelper.ColumnMetadata[columns.size()]]</InnerVar>
                <InnerVar>StringBuilder [secondPhaseQuery=new StringBuilder()]</InnerVar>
                <InnerVar>String [secondPhaseQueryStr=secondPhaseQuery.toString()]</InnerVar>
                <InnerVar>HybridQuery [projectingAggregatingQuery=new HybridQuery(queryFactory,cache,secondPhaseQueryStr,namedParameters,getObjectFilter(matcher,secondPhaseQueryStr,namedParameters,secondPhaseAccumulators),-1,-1,baseQuery)]</InnerVar>
                <InnerVar>StringBuilder [thirdPhaseQuery=new StringBuilder()]</InnerVar>
                <InnerVar>String [thirdPhaseQueryStr=thirdPhaseQuery.toString()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>firstPhaseQuery.append("FROM ").append(parsingResult.getTargetEntityName()).append(' ');append;[QueryStringCreator.DEFAULT_ALIAS]</InnerMethodInvoke>
                <InnerMethodInvoke>secondPhaseQuery;append;["SELECT "]</InnerMethodInvoke>
                <InnerMethodInvoke>secondPhaseQuery.append(" FROM ").append(parsingResult.getTargetEntityName()).append(' ');append;[QueryStringCreator.DEFAULT_ALIAS]</InnerMethodInvoke>
                <InnerMethodInvoke>thirdPhaseQuery;append;["SELECT "]</InnerMethodInvoke>
                <InnerMethodInvoke>thirdPhaseQuery;append;[" FROM Row "]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildQueryNoAggregations</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BaseQuery</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>queryFactory</ParamName>
                    <ParamType>QueryFactory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>queryString</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>namedParameters</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>startOffset</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>maxResults</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parsingResult</ParamName>
                    <ParamType>TypeMetadata</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [isFullTextQuery]</InnerVar>
                <InnerVar>BooleanExpr [normalizedWhereClause=booleanFilterNormalizer.normalize(parsingResult.getWhereClause())]</InnerVar>
                <InnerVar>IndexedFieldProvider.FieldIndexingMetadata [fieldIndexingMetadata=propertyHelper.getIndexedFieldProvider().get(parsingResult.getTargetEntityMetadata())]</InnerVar>
                <InnerVar>boolean [allProjectionsAreStored=true]</InnerVar>
                <InnerVar>LinkedHashMap&lt;PropertyPath,List&lt;Integer&gt;&gt; [projectionsMap=null]</InnerVar>
                <InnerVar>boolean [allSortFieldsAreStored=true]</InnerVar>
                <InnerVar>SortField[] [sortFields=parsingResult.getSortFields()]</InnerVar>
                <InnerVar>BooleShannonExpansion [bse=new BooleShannonExpansion(MAX_EXPANSION_COFACTORS,fieldIndexingMetadata)]</InnerVar>
                <InnerVar>BooleanExpr [expansion=bse.expand(normalizedWhereClause)]</InnerVar>
                <InnerVar>IckleParsingResult&lt;TypeMetadata&gt; [fpr=makeFilterParsingResult(parsingResult,expansion,null,null,null)]</InnerVar>
                <InnerVar>Query [expandedQuery=new EmbeddedLuceneQuery&lt;&gt;(this,queryFactory,namedParameters,fpr,null,makeResultProcessor(null),-1,-1)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeFilterParsingResult</MethodName>
            <MethodComment>/** 
 * Make a new FilterParsingResult after normalizing the query. This FilterParsingResult is not supposed to have grouping/aggregation.
 */
</MethodComment>
            <ReturnType>TypeMetadata</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parsingResult</ParamName>
                    <ParamType>TypeMetadata</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>normalizedWhereClause</ParamName>
                    <ParamType>BooleanExpr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>projection</ParamName>
                    <ParamType>PropertyPath[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>projectedTypes</ParamName>
                    <ParamType>Class&lt;?&gt;[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sortFields</ParamName>
                    <ParamType>SortField[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [queryString=SyntaxTreePrinter.printTree(parsingResult.getTargetEntityName(),projection,normalizedWhereClause,sortFields)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeResultProcessor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>in</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeProjectionProcessor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>RowProcessor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>projectedTypes</ParamName>
                    <ParamType>Class&lt;?&gt;[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parse</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>TypeMetadata</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>queryString</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getObjectFilter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ObjectFilter</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>matcher</ParamName>
                    <ParamType>Matcher</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>queryString</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>namedParameters</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>accumulators</ParamName>
                    <ParamType>FieldAccumulator</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ObjectFilter [objectFilter=queryCache != null ? queryCache.get(queryString,accumulators,matcher.getClass(),matcher::getObjectFilter) : matcher.getObjectFilter(queryString,accumulators)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createAndWireFilter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>IckleFilterAndConverter</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>queryString</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>namedParameters</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>IckleFilterAndConverter [filter=createFilter(queryString,namedParameters)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>SecurityActions.getCacheComponentRegistry(cache);wireDependencies;[filter]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createFilter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>IckleFilterAndConverter</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>queryString</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>namedParameters</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildLuceneQuery</MethodName>
            <MethodComment>/** 
 * Build a Lucene index query.
 */
</MethodComment>
            <ReturnType>E</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ickleParsingResult</ParamName>
                    <ParamType>TypeMetadata</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>namedParameters</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>startOffset</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>maxResults</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LuceneQueryParsingResult [luceneParsingResult=transformParsingResult(ickleParsingResult,namedParameters)]</InnerVar>
                <InnerVar>org.apache.lucene.search.Query [luceneQuery=makeTypeQuery(luceneParsingResult.getQuery(),luceneParsingResult.getTargetEntityName())]</InnerVar>
                <InnerVar>CacheQuery&lt;?&gt; [cacheQuery=makeCacheQuery(ickleParsingResult,luceneQuery)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>transformParsingResult</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>TypeMetadata</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parsingResult</ParamName>
                    <ParamType>TypeMetadata</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>namedParameters</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>transformToLuceneQueryParsingResult</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>TypeMetadata</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parsingResult</ParamName>
                    <ParamType>TypeMetadata</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>namedParameters</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeTypeQuery</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>org.apache.lucene.search.Query</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>query</ParamName>
                    <ParamType>org.apache.lucene.search.Query</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>targetEntityName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTargetedClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parsingResult</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeCacheQuery</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ickleParsingResult</ParamName>
                    <ParamType>TypeMetadata</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>luceneQuery</ParamName>
                    <ParamType>org.apache.lucene.search.Query</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>