<Class>
    <Id>713</Id>
    <Package>org.infinispan.commands</Package>
    <ClassName>CommandsFactory</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>CommandsFactory  /** 
 * A factory to build commands, initializing and injecting dependencies accordingly.  Commands built for a specific, named cache instance cannot be reused on a different cache instance since most commands contain the cache name it was built for along with references to other named-cache scoped components.
 * @author Manik Surtani
 * @author Mircea.Markus@jboss.com
 * @author Galder Zamarre√±o
 * @since 4.0
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>buildPutKeyValueCommand</MethodName>
            <MethodComment>/** 
 * Builds a PutKeyValueCommand
 * @param key key to put
 * @param value value to put
 * @param metadata metadata of entry
 * @param flagsBitSet Command flags provided by cache
 * @return a PutKeyValueCommand
 */
</MethodComment>
            <ReturnType>PutKeyValueCommand</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>metadata</ParamName>
                    <ParamType>Metadata</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>flagsBitSet</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildRemoveCommand</MethodName>
            <MethodComment>/** 
 * Builds a RemoveCommand
 * @param key key to remove
 * @param value value to check for ina  conditional remove, or null for an unconditional remove.
 * @param flagsBitSet Command flags provided by cache
 * @return a RemoveCommand
 */
</MethodComment>
            <ReturnType>RemoveCommand</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>flagsBitSet</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildInvalidateCommand</MethodName>
            <MethodComment>/** 
 * Builds an InvalidateCommand
 * @param flagsBitSet Command flags provided by cache
 * @param keys keys to invalidate
 * @return an InvalidateCommand
 */
</MethodComment>
            <ReturnType>InvalidateCommand</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>flagsBitSet</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>keys</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildInvalidateFromL1Command</MethodName>
            <MethodComment>/** 
 * Builds an InvalidateFromL1Command
 * @param flagsBitSet Command flags provided by cache
 * @param keys keys to invalidate
 * @return an InvalidateFromL1Command
 */
</MethodComment>
            <ReturnType>InvalidateCommand</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>flagsBitSet</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>keys</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildInvalidateFromL1Command</MethodName>
            <MethodComment>/** 
 * @see #buildInvalidateFromL1Command(long,Collection)
 */
</MethodComment>
            <ReturnType>InvalidateCommand</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>origin</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>flagsBitSet</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>keys</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildRemoveExpiredCommand</MethodName>
            <MethodComment>/** 
 * Builds an expired remove command that is used to remove only a specific expired entry
 * @param key the key of the expired entry
 * @param value the value of the entry when it was expired
 * @param lifespan the lifespan that expired from the command
 * @return a RemovedExpiredCommand
 */
</MethodComment>
            <ReturnType>RemoveExpiredCommand</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lifespan</ParamName>
                    <ParamType>Long</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildReplaceCommand</MethodName>
            <MethodComment>/** 
 * Builds a ReplaceCommand
 * @param key key to replace
 * @param oldValue existing value to check for if conditional, null if unconditional.
 * @param newValue value to replace with
 * @param metadata metadata of entry
 * @param flagsBitSet Command flags provided by cache
 * @return a ReplaceCommand
 */
</MethodComment>
            <ReturnType>ReplaceCommand</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>oldValue</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>newValue</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>metadata</ParamName>
                    <ParamType>Metadata</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>flagsBitSet</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildComputeCommand</MethodName>
            <MethodComment>/** 
 * Builds a ComputeCommand
 * @param key key to compute if this key is absent
 * @param mappingFunction BiFunction for the key and the value
 * @param computeIfPresent flag to apply as computeIfPresent mode
 * @param metadata metadata of entry
 * @param flagsBitSet Command flags provided by cache
 * @return a ComputeCommand
 */
</MethodComment>
            <ReturnType>ComputeCommand</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mappingFunction</ParamName>
                    <ParamType>BiFunction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>computeIfPresent</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>metadata</ParamName>
                    <ParamType>Metadata</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>flagsBitSet</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildComputeIfAbsentCommand</MethodName>
            <MethodComment>/** 
 * Builds a ComputeIfAbsentCommand
 * @param key key to compute if this key is absent
 * @param mappingFunction mappingFunction for the key
 * @param metadata metadata of entry
 * @param flagsBitSet Command flags provided by cache
 * @return a ComputeCommand
 */
</MethodComment>
            <ReturnType>ComputeIfAbsentCommand</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mappingFunction</ParamName>
                    <ParamType>Function</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>metadata</ParamName>
                    <ParamType>Metadata</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>flagsBitSet</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildSizeCommand</MethodName>
            <MethodComment>/** 
 * Builds a SizeCommand
 * @param flagsBitSet Command flags provided by cache
 * @return a SizeCommand
 */
</MethodComment>
            <ReturnType>SizeCommand</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>flagsBitSet</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildGetKeyValueCommand</MethodName>
            <MethodComment>/** 
 * Builds a GetKeyValueCommand
 * @param key key to get
 * @param flagsBitSet Command flags provided by cache
 * @return a GetKeyValueCommand
 */
</MethodComment>
            <ReturnType>GetKeyValueCommand</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>flagsBitSet</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildGetCacheEntryCommand</MethodName>
            <MethodComment>/** 
 * Builds a GetCacheEntryCommand
 * @param key key to get
 * @param flagsBitSet Command flags provided by cache
 * @return a GetCacheEntryCommand
 */
</MethodComment>
            <ReturnType>GetCacheEntryCommand</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>flagsBitSet</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildGetAllCommand</MethodName>
            <MethodComment>/** 
 * Builds a GetAllCommand
 * @param keys keys to get
 * @param flagsBitSet Command flags provided by cache
 * @param returnEntries boolean indicating whether entire cache entries arereturned, otherwise return just the value parts
 * @return a GetKeyValueCommand
 */
</MethodComment>
            <ReturnType>GetAllCommand</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>keys</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>flagsBitSet</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>returnEntries</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildKeySetCommand</MethodName>
            <MethodComment>/** 
 * Builds a KeySetCommand
 * @param flagsBitSet Command flags provided by cache
 * @return a KeySetCommand
 */
</MethodComment>
            <ReturnType>KeySetCommand</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>flagsBitSet</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildEntrySetCommand</MethodName>
            <MethodComment>/** 
 * Builds a EntrySetCommand
 * @param flagsBitSet Command flags provided by cache
 * @return a EntrySetCommand
 */
</MethodComment>
            <ReturnType>EntrySetCommand</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>flagsBitSet</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildPutMapCommand</MethodName>
            <MethodComment>/** 
 * Builds a PutMapCommand
 * @param map map containing key/value entries to put
 * @param metadata metadata of entry
 * @param flagsBitSet Command flags provided by cache
 * @return a PutMapCommand
 */
</MethodComment>
            <ReturnType>PutMapCommand</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>map</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>metadata</ParamName>
                    <ParamType>Metadata</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>flagsBitSet</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildClearCommand</MethodName>
            <MethodComment>/** 
 * Builds a ClearCommand
 * @param flagsBitSet Command flags provided by cache
 * @return a ClearCommand
 */
</MethodComment>
            <ReturnType>ClearCommand</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>flagsBitSet</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildEvictCommand</MethodName>
            <MethodComment>/** 
 * Builds an EvictCommand
 * @param key key to evict
 * @param flagsBitSet Command flags provided by cache
 * @return an EvictCommand
 */
</MethodComment>
            <ReturnType>EvictCommand</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>flagsBitSet</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildPrepareCommand</MethodName>
            <MethodComment>/** 
 * Builds a PrepareCommand
 * @param gtx global transaction associated with the prepare
 * @param modifications list of modifications
 * @param onePhaseCommit is this a one-phase or two-phase transaction?
 * @return a PrepareCommand
 */
</MethodComment>
            <ReturnType>PrepareCommand</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>gtx</ParamName>
                    <ParamType>GlobalTransaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>modifications</ParamName>
                    <ParamType>WriteCommand</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>onePhaseCommit</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildVersionedPrepareCommand</MethodName>
            <MethodComment>/** 
 * Builds a VersionedPrepareCommand
 * @param gtx global transaction associated with the prepare
 * @param modifications list of modifications
 * @param onePhase
 * @return a VersionedPrepareCommand
 */
</MethodComment>
            <ReturnType>VersionedPrepareCommand</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>gtx</ParamName>
                    <ParamType>GlobalTransaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>modifications</ParamName>
                    <ParamType>WriteCommand</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>onePhase</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildCommitCommand</MethodName>
            <MethodComment>/** 
 * Builds a CommitCommand
 * @param gtx global transaction associated with the commit
 * @return a CommitCommand
 */
</MethodComment>
            <ReturnType>CommitCommand</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>gtx</ParamName>
                    <ParamType>GlobalTransaction</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildVersionedCommitCommand</MethodName>
            <MethodComment>/** 
 * Builds a VersionedCommitCommand
 * @param gtx global transaction associated with the commit
 * @return a VersionedCommitCommand
 */
</MethodComment>
            <ReturnType>VersionedCommitCommand</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>gtx</ParamName>
                    <ParamType>GlobalTransaction</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildRollbackCommand</MethodName>
            <MethodComment>/** 
 * Builds a RollbackCommand
 * @param gtx global transaction associated with the rollback
 * @return a RollbackCommand
 */
</MethodComment>
            <ReturnType>RollbackCommand</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>gtx</ParamName>
                    <ParamType>GlobalTransaction</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initializeReplicableCommand</MethodName>
            <MethodComment>/** 
 * Initializes a  {@link org.infinispan.commands.ReplicableCommand} read from a data stream with components specificto the target cache instance. &lt;p/&gt; Implementations should also be deep, in that if the command contains other commands, these should be recursed into. &lt;p/&gt;
 * @param command command to initialize.  Cannot be null.
 * @param isRemote
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>command</ParamName>
                    <ParamType>ReplicableCommand</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isRemote</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildSingleRpcCommand</MethodName>
            <MethodComment>/** 
 * Builds a SingleRpcCommand "envelope" containing a single ReplicableCommand
 * @param call ReplicableCommand to include in the envelope
 * @return a SingleRpcCommand
 */
</MethodComment>
            <ReturnType>SingleRpcCommand</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>call</ParamName>
                    <ParamType>ReplicableCommand</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildClusteredGetCommand</MethodName>
            <MethodComment>/** 
 * Builds a ClusteredGetCommand, which is a remote lookup command
 * @param key key to look up
 * @param flagsBitSet Command flags provided by cache
 * @return a ClusteredGetCommand
 */
</MethodComment>
            <ReturnType>ClusteredGetCommand</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>flagsBitSet</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildClusteredGetCommand</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClusteredGetCommand</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>flagsBitSet</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>acquireRemoteLock</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>gtx</ParamName>
                    <ParamType>GlobalTransaction</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildClusteredGetAllCommand</MethodName>
            <MethodComment>/** 
 * Builds a ClusteredGetAllCommand, which is a remote lookup command
 * @param keys key to look up
 * @param flagsBitSet Command flags provided by cache
 * @return a ClusteredGetAllCommand
 */
</MethodComment>
            <ReturnType>ClusteredGetAllCommand</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>keys</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>flagsBitSet</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>gtx</ParamName>
                    <ParamType>GlobalTransaction</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildLockControlCommand</MethodName>
            <MethodComment>/** 
 * Builds a LockControlCommand to control explicit remote locking
 * @param keys keys to lock
 * @param flagsBitSet Command flags provided by cache
 * @param gtx
 * @return a LockControlCommand
 */
</MethodComment>
            <ReturnType>LockControlCommand</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>keys</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>flagsBitSet</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>gtx</ParamName>
                    <ParamType>GlobalTransaction</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildLockControlCommand</MethodName>
            <MethodComment>/** 
 * Same as  {@link #buildLockControlCommand(Object,long,GlobalTransaction)}but for locking a single key vs a collection of keys.
 */
</MethodComment>
            <ReturnType>LockControlCommand</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>flagsBitSet</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>gtx</ParamName>
                    <ParamType>GlobalTransaction</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildLockControlCommand</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>LockControlCommand</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>keys</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>flagsBitSet</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildStateRequestCommand</MethodName>
            <MethodComment>/** 
 * Builds a StateRequestCommand used for requesting transactions and locks and for starting or canceling transfer of cache entries.
 */
</MethodComment>
            <ReturnType>StateRequestCommand</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>subtype</ParamName>
                    <ParamType>StateRequestCommand.Type</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sender</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>topologyId</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>segments</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildStateResponseCommand</MethodName>
            <MethodComment>/** 
 * Builds a StateResponseCommand used for pushing cache entries to another node in response to a StateRequestCommand.
 */
</MethodComment>
            <ReturnType>StateResponseCommand</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sender</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>viewId</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stateChunks</ParamName>
                    <ParamType>StateChunk</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>applyState</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pushTransfer</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCacheName</MethodName>
            <MethodComment>/** 
 * Retrieves the cache name this CommandFactory is set up to construct commands for.
 * @return the name of the cache this CommandFactory is set up to construct commands for.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildGetInDoubtTransactionsCommand</MethodName>
            <MethodComment>/** 
 * Builds a  {@link org.infinispan.commands.remote.recovery.GetInDoubtTransactionsCommand}.
 */
</MethodComment>
            <ReturnType>GetInDoubtTransactionsCommand</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildTxCompletionNotificationCommand</MethodName>
            <MethodComment>/** 
 * Builds a  {@link org.infinispan.commands.remote.recovery.TxCompletionNotificationCommand}.
 */
</MethodComment>
            <ReturnType>TxCompletionNotificationCommand</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xid</ParamName>
                    <ParamType>Xid</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>globalTransaction</ParamName>
                    <ParamType>GlobalTransaction</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildDistributedExecuteCommand</MethodName>
            <MethodComment>/** 
 * Builds a DistributedExecuteCommand used for migration and execution of distributed Callables and Runnables.
 * @param callable the callable task
 * @param sender sender's Address
 * @param keys keys used in Callable
 * @return a DistributedExecuteCommand
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>callable</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sender</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>keys</ParamName>
                    <ParamType>Collection</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildGetInDoubtTxInfoCommand</MethodName>
            <MethodComment>/** 
 * @see GetInDoubtTxInfoCommand
 */
</MethodComment>
            <ReturnType>GetInDoubtTxInfoCommand</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildCompleteTransactionCommand</MethodName>
            <MethodComment>/** 
 * Builds a CompleteTransactionCommand command.
 * @param xid the xid identifying the transaction we want to complete.
 * @param commit commit(true) or rollback(false)?
 */
</MethodComment>
            <ReturnType>CompleteTransactionCommand</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xid</ParamName>
                    <ParamType>Xid</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>commit</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildTxCompletionNotificationCommand</MethodName>
            <MethodComment>/** 
 * @param internalId the internal id identifying the transaction to be removed.
 * @see org.infinispan.commands.remote.recovery.TxCompletionNotificationCommand
 */
</MethodComment>
            <ReturnType>TxCompletionNotificationCommand</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>internalId</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildApplyDeltaCommand</MethodName>
            <MethodComment>/** 
 * Builds a ApplyDeltaCommand used for applying Delta objects to DeltaAware containers stored in cache
 * @return ApplyDeltaCommand instance
 * @see ApplyDeltaCommand
 * @deprecated since 9.1
 */
</MethodComment>
            <ReturnType>ApplyDeltaCommand</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>deltaAwareValueKey</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>delta</ParamName>
                    <ParamType>Delta</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>keys</ParamName>
                    <ParamType>Collection</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildCreateCacheCommand</MethodName>
            <MethodComment>/** 
 * Same as  {@code buildCreateCacheCommand(cacheName, cacheConfigurationName, false, 0)}.
 */
</MethodComment>
            <ReturnType>CreateCacheCommand</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cacheConfigurationName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildCreateCacheCommand</MethodName>
            <MethodComment>/** 
 * Builds a CreateCacheCommand used to create/start cache around Infinispan cluster
 * @param size If {@code size &gt; 0}, the command will wait until the cache runs on at least  {@code size} nodes.
 */
</MethodComment>
            <ReturnType>CreateCacheCommand</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tmpCacheName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>defaultTmpCacheConfigurationName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>size</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildCancelCommandCommand</MethodName>
            <MethodComment>/** 
 * Builds CancelCommandCommand used to cancel other commands executing on Infinispan cluster
 * @param commandUUID UUID for command to cancel
 * @return created CancelCommandCommand
 */
</MethodComment>
            <ReturnType>CancelCommand</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>commandUUID</ParamName>
                    <ParamType>UUID</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildXSiteStateTransferControlCommand</MethodName>
            <MethodComment>/** 
 * Builds XSiteStateTransferControlCommand used to control the-cross site state transfer.
 * @param control  the control operation
 * @param siteName the site name, needed for some control operations.
 * @return the XSiteStateTransferControlCommand created
 */
</MethodComment>
            <ReturnType>XSiteStateTransferControlCommand</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>control</ParamName>
                    <ParamType>StateTransferControl</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>siteName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildXSiteAdminCommand</MethodName>
            <MethodComment>/** 
 * Builds XSiteAdminCommand used to perform system administrator operations.
 * @return the XSiteAdminCommand created
 */
</MethodComment>
            <ReturnType>XSiteAdminCommand</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>siteName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>op</ParamName>
                    <ParamType>AdminOperation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>afterFailures</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>minTimeToWait</ParamName>
                    <ParamType>Long</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildXSiteStatePushCommand</MethodName>
            <MethodComment>/** 
 * Builds XSiteStatePushCommand used to transfer a single chunk of data between sites.
 * @param chunk         the data chunk
 * @param timeoutMillis timeout in milliseconds, for the retries in the receiver site.
 * @return the XSiteStatePushCommand created
 */
</MethodComment>
            <ReturnType>XSiteStatePushCommand</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>chunk</ParamName>
                    <ParamType>XSiteState[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>timeoutMillis</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildSingleXSiteRpcCommand</MethodName>
            <MethodComment>/** 
 * Builds SingleRpcCommand used to perform  {@link org.infinispan.commands.VisitableCommand} on the backup site,
 * @param command the visitable command.
 * @return the SingleXSiteRpcCommand created
 */
</MethodComment>
            <ReturnType>SingleXSiteRpcCommand</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>command</ParamName>
                    <ParamType>VisitableCommand</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildGetKeysInGroupCommand</MethodName>
            <MethodComment>/** 
 * Builds  {@link org.infinispan.commands.remote.GetKeysInGroupCommand} used to fetch all the keys belonging to a group.
 * @param flagsBitSet Command flags provided by cache
 * @param groupName the group name.
 * @return the GetKeysInGroup created.
 */
</MethodComment>
            <ReturnType>GetKeysInGroupCommand</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>flagsBitSet</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>groupName</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildStreamRequestCommand</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>id</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parallelStream</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>StreamRequestCommand.Type</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>segments</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>keys</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>excludedKeys</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>includeLoader</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>terminalOperation</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildStreamResponseCommand</MethodName>
            <MethodComment>/** 
 * Builds  {@link StreamResponseCommand} used to send back a response either intermediate or complete to theoriginating node with the information for the stream request.
 * @param identifier the unique identifier for the stream request
 * @param complete whether or not this is an intermediate or final response from this node for the given id
 * @param lostSegments what segments that were lost during processing
 * @param response the actual response
 * @param &lt; R &gt; type of response
 * @return the command to send back the response
 */
</MethodComment>
            <ReturnType>R</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>identifier</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>complete</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lostSegments</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>response</ParamName>
                    <ParamType>R</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildReadOnlyKeyCommand</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>f</ParamName>
                    <ParamType>ReadEntryView&lt;K,V&gt;</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>params</ParamName>
                    <ParamType>Params</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>keyDataConversion</ParamName>
                    <ParamType>DataConversion</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>valueDataConversion</ParamName>
                    <ParamType>DataConversion</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildReadOnlyManyCommand</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>keys</ParamName>
                    <ParamType>? extends K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>f</ParamName>
                    <ParamType>ReadEntryView&lt;K,V&gt;</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>params</ParamName>
                    <ParamType>Params</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>keyDataConversion</ParamName>
                    <ParamType>DataConversion</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>valueDataConversion</ParamName>
                    <ParamType>DataConversion</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildWriteOnlyKeyCommand</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>f</ParamName>
                    <ParamType>WriteEntryView&lt;V&gt;</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>params</ParamName>
                    <ParamType>Params</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>keyDataConversion</ParamName>
                    <ParamType>DataConversion</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>valueDataConversion</ParamName>
                    <ParamType>DataConversion</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildReadWriteKeyValueCommand</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>V</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>f</ParamName>
                    <ParamType>V</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>params</ParamName>
                    <ParamType>Params</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>keyDataConversion</ParamName>
                    <ParamType>DataConversion</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>valueDataConversion</ParamName>
                    <ParamType>DataConversion</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildReadWriteKeyCommand</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>f</ParamName>
                    <ParamType>ReadWriteEntryView&lt;K,V&gt;</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>params</ParamName>
                    <ParamType>Params</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>keyDataConversion</ParamName>
                    <ParamType>DataConversion</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>valueDataConversion</ParamName>
                    <ParamType>DataConversion</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildWriteOnlyManyEntriesCommand</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>entries</ParamName>
                    <ParamType>? extends K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>f</ParamName>
                    <ParamType>V</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>params</ParamName>
                    <ParamType>Params</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>keyDataConversion</ParamName>
                    <ParamType>DataConversion</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>valueDataConversion</ParamName>
                    <ParamType>DataConversion</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildWriteOnlyKeyValueCommand</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>V</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>f</ParamName>
                    <ParamType>V</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>params</ParamName>
                    <ParamType>Params</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>keyDataConversion</ParamName>
                    <ParamType>DataConversion</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>valueDataConversion</ParamName>
                    <ParamType>DataConversion</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildWriteOnlyManyCommand</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>keys</ParamName>
                    <ParamType>? extends K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>f</ParamName>
                    <ParamType>WriteEntryView&lt;V&gt;</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>params</ParamName>
                    <ParamType>Params</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>keyDataConversion</ParamName>
                    <ParamType>DataConversion</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>valueDataConversion</ParamName>
                    <ParamType>DataConversion</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildReadWriteManyCommand</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>keys</ParamName>
                    <ParamType>? extends K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>f</ParamName>
                    <ParamType>ReadWriteEntryView&lt;K,V&gt;</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>params</ParamName>
                    <ParamType>Params</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>keyDataConversion</ParamName>
                    <ParamType>DataConversion</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>valueDataConversion</ParamName>
                    <ParamType>DataConversion</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildReadWriteManyEntriesCommand</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>entries</ParamName>
                    <ParamType>? extends K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>f</ParamName>
                    <ParamType>V</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>params</ParamName>
                    <ParamType>Params</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>keyDataConversion</ParamName>
                    <ParamType>DataConversion</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>valueDataConversion</ParamName>
                    <ParamType>DataConversion</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildBackupAckCommand</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BackupAckCommand</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>id</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>topologyId</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildBackupMultiKeyAckCommand</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BackupMultiKeyAckCommand</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>id</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>segment</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>topologyId</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildExceptionAckCommand</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ExceptionAckCommand</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>id</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>throwable</ParamName>
                    <ParamType>Throwable</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>topologyId</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildBackupWriteRpcCommand</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BackupWriteRpcCommand</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>command</ParamName>
                    <ParamType>DataWriteCommand</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildBackupPutMapRpcCommand</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BackupPutMapRpcCommand</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>command</ParamName>
                    <ParamType>PutMapCommand</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildInvalidateVersionsCommand</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>InvalidateVersionsCommand</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>topologyId</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>keys</ParamName>
                    <ParamType>Object[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>topologyIds</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>versions</ParamName>
                    <ParamType>long[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>removed</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>