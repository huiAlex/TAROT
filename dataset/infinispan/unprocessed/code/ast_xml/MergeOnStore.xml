<Class>
    <Id>7</Id>
    <Package>org.infinispan.container</Package>
    <ClassName>MergeOnStore</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>MergeOnStore  /** 
 * This interface is &lt;strong&gt;not&lt;/strong&gt; a public API. &lt;p&gt;A value implementing this interface is merged with the actual value when storing into  {@link org.infinispan.container.DataContainer}. As the merge operation is synchronized externally, the implementation of this interface does not need to be thread-safe. Note that the value in context (last written value) needs to implement  {@link MergeOnStore}, if the cache already containing such instance is overwritten by a non-implementor, the merge does not happen. &lt;p&gt;The intended use is when executing a command with  {@link org.infinispan.context.Flag#SKIP_LOCKING}; in that case we may have two different instances in context at one moment and the writes may be applied in any order, even in a different order on different owners. Therefore it's strongly recommended that all operations on such entry are commutative (order-independent). &lt;p&gt;As the atomicity of load &amp; store into persistence layer cannot be guaranteed, it is recommended to use such values only with  {@link org.infinispan.context.Flag#SKIP_CACHE_LOAD} and{@link org.infinispan.context.Flag#SKIP_CACHE_STORE} or implementing a custom externalizer that will deal with this.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>merge</MethodName>
            <MethodComment>/** 
 * @param other Actual value stored in the cache, or &lt;code&gt;null&lt;/code&gt; if the entry does not exist.
 * @return Value that will be stored in the cache, or null if it should be removed.
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>other</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>