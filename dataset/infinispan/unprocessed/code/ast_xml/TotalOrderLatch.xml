<Class>
    <Id>1161</Id>
    <Package>org.infinispan.transaction.totalorder</Package>
    <ClassName>TotalOrderLatch</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>TotalOrderLatch  /** 
 * Behaves as a latch between  {@code org.infinispan.commands.tx.PrepareCommand} delivered in total order to coordinateconflicting transactions and between  {@code org.infinispan.commands.tx.PrepareCommand} and state transfer (blockingthe prepare until the state transfer is finished and blocking the state transfer until all the prepared transactions has finished)
 * @author Pedro Ruivo
 * @since 5.3
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>isBlocked</MethodName>
            <MethodComment>/** 
 * @return true if this synchronization block is blocked
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>unBlock</MethodName>
            <MethodComment>/** 
 * Unblocks this synchronization block
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>awaitUntilUnBlock</MethodName>
            <MethodComment>/** 
 * It waits for this synchronization block to be unblocked.
 * @throws InterruptedException if interrupted while waiting.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>