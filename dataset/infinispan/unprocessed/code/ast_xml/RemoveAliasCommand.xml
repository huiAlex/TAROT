<Class>
    <Id>1393</Id>
    <Package>org.jboss.as.clustering.infinispan.subsystem</Package>
    <ClassName>RemoveAliasCommand</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>OperationStepHandler</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>RemoveAliasCommand  /** 
 * Custom command to remove an alias for a cache-container.
 * @author Richard Achmatowicz (c) 2011 Red Hat Inc.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>INSTANCE</FieldName>
            <FieldType>RemoveAliasCommand</FieldType>
        </Field>
        <Field>
            <FieldName>nameValidator</FieldName>
            <FieldType>ParametersValidator</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>execute</MethodName>
            <MethodComment>/** 
 * An attribute write handler which performs special processing for ALIAS attributes.
 * @param context the operation context
 * @param operation the operation being executed
 * @throws org.jboss.as.controller.OperationFailedException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>OperationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>operation</ParamName>
                    <ParamType>ModelNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [aliasToRemove=operation.require(NAME).asString()]</InnerVar>
                <InnerVar>ModelNode [submodel=context.readResourceForUpdate(PathAddress.EMPTY_ADDRESS).getModel()]</InnerVar>
                <InnerVar>ModelNode [currentValue=submodel.get(CacheContainerResource.ALIASES.getName()).clone()]</InnerVar>
                <InnerVar>ModelNode [newValue=removeAliasFromList(currentValue,aliasToRemove)]</InnerVar>
                <InnerVar>ModelNode [syntheticOp=new ModelNode()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>nameValidator;validate;[operation]</InnerMethodInvoke>
                <InnerMethodInvoke>syntheticOp.get(CacheContainerResource.ALIASES.getName());set;[newValue]</InnerMethodInvoke>
                <InnerMethodInvoke>CacheContainerResource.ALIASES;validateAndSet;[syntheticOp, submodel]</InnerMethodInvoke>
                <InnerMethodInvoke>context;stepCompleted;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>OperationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>execute</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>OperationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>operation</ParamName>
                    <ParamType>ModelNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>context;reloadRequired;[]</InnerMethodInvoke>
                <InnerMethodInvoke>context;completeStep;[OperationContext.RollbackHandler.REVERT_RELOAD_REQUIRED_ROLLBACK_HANDLER]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>OperationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>requiresRuntime</MethodName>
            <MethodComment>/** 
 * Gets whether a  {@link org.jboss.as.controller.OperationContext.Stage#RUNTIME} handler should be added. This default implementationreturns  {@code true} if the {@link org.jboss.as.controller.OperationContext#getProcessType()} process type} is aserver and  {@link org.jboss.as.controller.OperationContext#isBooting() context.isBooting()} returns {@code false}.
 * @param context operation context
 * @return {@code true} if a runtime stage handler should be added; {@code false} otherwise.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>OperationContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeAliasFromList</MethodName>
            <MethodComment>/** 
 * Remove an alias from a LIST ModelNode of existing aliases.
 * @param list LIST ModelNode of aliases
 * @param alias
 * @return LIST ModelNode with the alias removed
 */
</MethodComment>
            <ReturnType>ModelNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>list</ParamName>
                    <ParamType>ModelNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>alias</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ModelNode [newList=new ModelNode()]</InnerVar>
                <InnerVar>List&lt;ModelNode&gt; [listElements=list.asList()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>OperationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>