<Class>
    <Id>2028</Id>
    <Package>org.infinispan.atomic</Package>
    <ClassName>AtomicObjectFactory</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>AtomicObjectFactory  /** 
 * @author Pierre Sutra
 * @since 7.2
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>factories</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>factories</FieldName>
            <FieldType>Cache&lt;?,?&gt;</FieldType>
        </Field>
        <Field>
            <FieldName>MAX_CONTAINERS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>updateMethods</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>updateMethods</FieldName>
            <FieldType>Class&lt;?&gt;</FieldType>
        </Field>
        <Field>
            <FieldName>cache</FieldName>
            <FieldType>Cache</FieldType>
        </Field>
        <Field>
            <FieldName>cache</FieldName>
            <FieldType>?</FieldType>
        </Field>
        <Field>
            <FieldName>registeredContainers</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>registeredContainers</FieldName>
            <FieldType>ContainerSignature</FieldType>
        </Field>
        <Field>
            <FieldName>maxSize</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>evictionExecutor</FieldName>
            <FieldType>ExecutorService</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>forCache</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>AtomicObjectFactory</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cache</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>AtomicObjectFactory</MethodName>
            <MethodComment>/** 
 * Returns an object factory built on top of cache &lt;i&gt;c&lt;/i&gt; with a bounded amount &lt;i&gt;m&lt;/i&gt; of containers in it. Upon the removal of a container, the object is stored persistently in the cache.
 * @param c it must be synchronous.and transactional (with autoCommit set to true, its default value).
 * @param m max amount of containers kept by this factory.
 * @throws InvalidCacheUsageException
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>m</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>InvalidCacheUsageException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeEldestEntry</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>eldest</ParamName>
                    <ParamType>ContainerSignature</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>call</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>AtomicObjectFactory</MethodName>
            <MethodComment>/** 
 * Return an AtomicObjectFactory built on top of cache &lt;i&gt;c&lt;/i&gt;.
 * @param c a cache,  it must be synchronous.and transactional (with autoCommit set to true, its default value).
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>InvalidCacheUsageException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getInstanceOf</MethodName>
            <MethodComment>/** 
 * Returns an atomic object of class &lt;i&gt;clazz&lt;/i&gt;. The class of this object must be initially serializable, as well as all the parameters of its methods. Furthermore, the class must be deterministic.
 * @param clazz a class object
 * @param key to use in order to store the object.
 * @return an object of the class &lt;i&gt;clazz&lt;/i&gt;
 * @throws InvalidCacheUsageException
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>InvalidCacheUsageException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getInstanceOf</MethodName>
            <MethodComment>/** 
 * Returns an object of class &lt;i&gt;clazz&lt;/i&gt;. The class of this object must be initially serializable, as well as all the parameters of its methods. Furthermore, the class must be deterministic. The object is atomic if &lt;i&gt;withReadOptimization&lt;/i&gt; equals false; otherwise it is sequentially consistent.. In more details, if &lt;i&gt;withReadOptimization&lt;/i&gt;  is set, every call to the object is first executed locally on a copy of the object, and in case the call does not modify the state of the object, the value returned is the result of this tentative execution.
 * @param clazz a class object
 * @param key the key to use in order to store the object.
 * @param withReadOptimization set the read optimization on/off.
 * @return an object of the class &lt;i&gt;clazz&lt;/i&gt;
 * @throws InvalidCacheUsageException
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>withReadOptimization</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>InvalidCacheUsageException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getInstanceOf</MethodName>
            <MethodComment>/** 
 * Returns an object of class &lt;i&gt;clazz&lt;/i&gt;. The class of this object must be initially serializable, as well as all the parameters of its methods. Furthermore, the class must be deterministic. The object is atomic if &lt;i&gt;withReadOptimization&lt;/i&gt; equals false; otherwise it is sequentially consistent.. In more details, if &lt;i&gt;withReadOptimization&lt;/i&gt;  is set, every call to the object is executed locally on a copy of the object, and in case the call does not modify the state of the object, the value returned is the result of this tentative execution. If the method &lt;i&gt;equalsMethod&lt;/i&gt;  is not null, it overrides the default &lt;i&gt;clazz.equals()&lt;/i&gt; when testing that the state of the object and its copy are identical.
 * @param clazz a class object
 * @param key the key to use in order to store the object.
 * @param withReadOptimization set the read optimization on/off.
 * @param equalsMethod overriding the default &lt;i&gt;clazz.equals()&lt;/i&gt;.
 * @param forceNew force the creation of the object, even if it exists already in the cache
 * @return an object of the class &lt;i&gt;clazz&lt;/i&gt;
 * @throws InvalidCacheUsageException
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>withReadOptimization</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>equalsMethod</ParamName>
                    <ParamType>Method</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>forceNew</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>initArgs</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ContainerSignature [signature=new ContainerSignature(clazz,key)]</InnerVar>
                <InnerVar>Container [container]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>InvalidCacheUsageException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>disposeInstanceOf</MethodName>
            <MethodComment>/** 
 * Remove the object stored at &lt;i&gt;key&lt;/i&gt;from the local state. If flag &lt;i&gt;keepPersistent&lt;/i&gt; is set, a persistent copy of the current state of the object is also stored in the cache.
 * @param clazz a class object
 * @param key the key to use in order to store the object.
 * @param keepPersistent indicates that a persistent copy is stored in the cache or not.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>keepPersistent</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ContainerSignature [signature=new ContainerSignature(clazz,key)]</InnerVar>
                <InnerVar>Container [container]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>InvalidCacheUsageException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>