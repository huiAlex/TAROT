<Class>
    <Id>2577</Id>
    <Package>org.infinispan.cdi.common.util</Package>
    <ClassName>AbstractImmutableBean</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Bean</SuperInterface>
        <SuperInterface>T</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>AbstractImmutableBean  /** 
 * &lt;p&gt; A base class for implementing  {@link Bean}. The attributes are immutable, and collections are defensively copied on instantiation. It uses the defaults from the specification for properties if not specified. &lt;/p&gt; &lt;p/&gt; &lt;p&gt; This class does not provide any bean lifecycle operations &lt;/p&gt;
 * @author Pete Muir
 * @see ImmutableBean
 * @see ImmutableNarrowingBean
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>beanClass</FieldName>
            <FieldType>Class</FieldType>
        </Field>
        <Field>
            <FieldName>beanClass</FieldName>
            <FieldType>?</FieldType>
        </Field>
        <Field>
            <FieldName>name</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>qualifiers</FieldName>
            <FieldType>Set</FieldType>
        </Field>
        <Field>
            <FieldName>qualifiers</FieldName>
            <FieldType>Annotation</FieldType>
        </Field>
        <Field>
            <FieldName>scope</FieldName>
            <FieldType>Class</FieldType>
        </Field>
        <Field>
            <FieldName>scope</FieldName>
            <FieldType>? extends Annotation</FieldType>
        </Field>
        <Field>
            <FieldName>stereotypes</FieldName>
            <FieldType>Set</FieldType>
        </Field>
        <Field>
            <FieldName>stereotypes</FieldName>
            <FieldType>Class&lt;? extends Annotation&gt;</FieldType>
        </Field>
        <Field>
            <FieldName>types</FieldName>
            <FieldType>Set</FieldType>
        </Field>
        <Field>
            <FieldName>types</FieldName>
            <FieldType>Type</FieldType>
        </Field>
        <Field>
            <FieldName>alternative</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>nullable</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>injectionPoints</FieldName>
            <FieldType>Set</FieldType>
        </Field>
        <Field>
            <FieldName>injectionPoints</FieldName>
            <FieldType>InjectionPoint</FieldType>
        </Field>
        <Field>
            <FieldName>toString</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>AbstractImmutableBean</MethodName>
            <MethodComment>/** 
 * Create a new, immutable bean. All arguments passed as collections are defensively copied.
 * @param beanClass       The Bean class, may not be null
 * @param name            The bean name
 * @param qualifiers      The bean's qualifiers, if null, a singleton set of{@link Default} is used
 * @param scope           The bean's scope, if null, the default scope of{@link Dependent} is used
 * @param stereotypes     The bean's stereotypes, if null, an empty set is used
 * @param types           The bean's types, if null, the beanClass and {@link Object}will be used
 * @param alternative     True if the bean is an alternative
 * @param nullable        True if the bean is nullable
 * @param injectionPoints the bean's injection points, if null an empty setis used
 * @param beanLifecycle   Handler for {@link #create(CreationalContext)} and{@link #destroy(Object,CreationalContext)}
 * @throws IllegalArgumentException if the beanClass is null
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>beanClass</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>qualifiers</ParamName>
                    <ParamType>Annotation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>scope</ParamName>
                    <ParamType>? extends Annotation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stereotypes</ParamName>
                    <ParamType>Class&lt;? extends Annotation&gt;</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>types</ParamName>
                    <ParamType>Type</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>alternative</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nullable</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>injectionPoints</ParamName>
                    <ParamType>InjectionPoint</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>toString</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBeanClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getInjectionPoints</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>InjectionPoint</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getQualifiers</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Annotation</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getScope</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>? extends Annotation</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStereotypes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Class&lt;? extends Annotation&gt;</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTypes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Type</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isAlternative</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isNullable</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>