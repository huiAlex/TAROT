<Class>
    <Id>3465</Id>
    <Package>org.infinispan.cli.interpreter.session</Package>
    <ClassName>Session</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getCacheManager</MethodName>
            <MethodComment>/** 
 * Obtains the CacheManager to which this session is attached
 */
</MethodComment>
            <ReturnType>EmbeddedCacheManager</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCurrentCache</MethodName>
            <MethodComment>/** 
 * Obtains the currently selected cache. If none has been selected, the default cache is returned
 */
</MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCurrentCacheName</MethodName>
            <MethodComment>/** 
 * Returns the name of the currently selected cache. If none has been selected, the default cache is returned
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCache</MethodName>
            <MethodComment>/** 
 * Returns a named cache. If the cacheName parameter is null, the current cache is returned
 * @param cacheName
 * @return the cache identified by cacheName
 */
</MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setCurrentCache</MethodName>
            <MethodComment>/** 
 * Sets the current cache.
 * @param cacheName
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createCache</MethodName>
            <MethodComment>/** 
 * Creates a new cache
 * @param cacheName the name of the new cache
 * @param baseCacheName the existing named cache to use for defaults
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>baseCacheName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reset</MethodName>
            <MethodComment>/** 
 * Resets the session, by aborting any dangling batches and transactions and updating the timestamp
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTimestamp</MethodName>
            <MethodComment>/** 
 * Returns the time the session was last accessed
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getId</MethodName>
            <MethodComment>/** 
 * Returns the unique id of this session
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setCodec</MethodName>
            <MethodComment>/** 
 * Sets the codec to use for encoding/decoding keys/values
 * @param encoding the name of the codec to use
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>encoding</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>CodecException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCodecs</MethodName>
            <MethodComment>/** 
 * Returns the list of available key/value codecs
 */
</MethodComment>
            <ReturnType>Codec</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCodec</MethodName>
            <MethodComment>/** 
 * Returns the currently active codec used to encode/decode keys/values
 */
</MethodComment>
            <ReturnType>Codec</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCodec</MethodName>
            <MethodComment>/** 
 * Returns a specific codec
 * @throws CodecException
 */
</MethodComment>
            <ReturnType>Codec</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parameter</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>CodecException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>