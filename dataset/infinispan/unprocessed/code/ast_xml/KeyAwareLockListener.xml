<Class>
    <Id>980</Id>
    <Package>org.infinispan.util.concurrent.locks</Package>
    <ClassName>KeyAwareLockListener</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>KeyAwareLockListener  /** 
 * A listener for  {@link KeyAwareLockPromise}. &lt;p&gt; This event contains the key that the lock owner is try to acquire.
 * @author Pedro Ruivo
 * @since 8.0
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>onEvent</MethodName>
            <MethodComment>/** 
 * Invoked when the lock is available.
 * @param key   the key associated to this lock.
 * @param state the lock state. Possible values are {@link LockState#ACQUIRED},  {@link LockState#TIMED_OUT} or{@link LockState#DEADLOCKED}.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>state</ParamName>
                    <ParamType>LockState</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>