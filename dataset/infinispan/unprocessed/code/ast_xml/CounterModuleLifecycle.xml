<Class>
    <Id>3411</Id>
    <Package>org.infinispan.counter.impl</Package>
    <ClassName>CounterModuleLifecycle</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>ModuleLifecycle</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>CounterModuleLifecycle  /** 
 * It register a  {@link EmbeddedCounterManager} to each {@link EmbeddedCacheManager} started and starts the cache on it.
 * @author Pedro Ruivo
 * @since 9.0
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>COUNTER_CACHE_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>COUNTER_CONFIGURATION_CACHE_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>createCounterCacheConfiguration</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Configuration</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>config</ParamName>
                    <ParamType>CounterManagerConfiguration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ConfigurationBuilder [builder=new ConfigurationBuilder()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>builder.clustering().cacheMode(CacheMode.DIST_SYNC).hash().numOwners(config.numOwners()).stateTransfer().fetchInMemoryState(true).l1().disable().partitionHandling().whenSplit(config.reliability() == Reliability.CONSISTENT ? PartitionHandling.DENY_READ_WRITES : PartitionHandling.ALLOW_READ_WRITES).transaction().transactionMode(TransactionMode.NON_TRANSACTIONAL).customInterceptors().addInterceptor().after(EntryWrappingInterceptor.class);interceptor;[new CounterInterceptor()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createCounterConfigurationCacheConfiguration</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Configuration</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>ConfigurationBuilder [builder=new ConfigurationBuilder()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>builder.clustering().cacheMode(CacheMode.REPL_SYNC).l1().disable().stateTransfer().fetchInMemoryState(true).partitionHandling().whenSplit(PartitionHandling.DENY_READ_WRITES).transaction().transactionMode(TransactionMode.NON_TRANSACTIONAL).customInterceptors().addInterceptor().after(EntryWrappingInterceptor.class);interceptor;[new CounterConfigurationInterceptor()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addAdvancedExternalizer</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>map</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ext</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>map;put;[ext.getId(), ext]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>extractConfiguration</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>CounterManagerConfiguration</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>globalComponentRegistry</ParamName>
                    <ParamType>GlobalComponentRegistry</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CounterManagerConfiguration [config=globalComponentRegistry.getGlobalConfiguration().module(CounterManagerConfiguration.class)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>registerCounterManager</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>registry</ParamName>
                    <ParamType>GlobalComponentRegistry</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>future</ParamName>
                    <ParamType>CacheHolder</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>registerCounterCache</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>registry</ParamName>
                    <ParamType>InternalCacheRegistry</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>config</ParamName>
                    <ParamType>CounterManagerConfiguration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>registry;registerInternalCache;[COUNTER_CACHE_NAME, createCounterCacheConfiguration(config), EnumSet.of(InternalCacheRegistry.Flag.EXCLUSIVE,InternalCacheRegistry.Flag.PERSISTENT)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>registerConfigurationCache</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>registry</ParamName>
                    <ParamType>InternalCacheRegistry</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>registry;registerInternalCache;[COUNTER_CONFIGURATION_CACHE_NAME, createCounterConfigurationCacheConfiguration(), EnumSet.of(InternalCacheRegistry.Flag.EXCLUSIVE,InternalCacheRegistry.Flag.PERSISTENT)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startCaches</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>CacheHolder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheManager</ParamName>
                    <ParamType>EmbeddedCacheManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>defaultCounters</ParamName>
                    <ParamType>AbstractCounterConfiguration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CompletableFuture&lt;CacheHolder&gt; [future=new CompletableFuture&lt;&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>new Thread(() -&gt; {
  try {
    Cache&lt;String,CounterConfiguration&gt; configCache=cacheManager.getCache(COUNTER_CONFIGURATION_CACHE_NAME);
    Cache&lt;? extends CounterKey,CounterValue&gt; counterCache=cacheManager.getCache(COUNTER_CACHE_NAME);
    future.complete(new CacheHolder(configCache.getAdvancedCache(),counterCache.getAdvancedCache(),defaultCounters));
  }
 catch (  Throwable throwable) {
    future.completeExceptionally(throwable);
  }
}
);start;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cacheManagerStarting</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>gcr</ParamName>
                    <ParamType>GlobalComponentRegistry</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>globalConfiguration</ParamName>
                    <ParamType>GlobalConfiguration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Map&lt;Integer,AdvancedExternalizer&lt;?&gt;&gt; [externalizerMap=globalConfiguration.serialization().advancedExternalizers()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;addAdvancedExternalizer;[externalizerMap, ResetFunction.EXTERNALIZER]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addAdvancedExternalizer;[externalizerMap, CounterKeyFilter.EXTERNALIZER]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addAdvancedExternalizer;[externalizerMap, StrongCounterKey.EXTERNALIZER]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addAdvancedExternalizer;[externalizerMap, WeakCounterKey.EXTERNALIZER]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addAdvancedExternalizer;[externalizerMap, ReadFunction.EXTERNALIZER]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addAdvancedExternalizer;[externalizerMap, CounterConfiguration.EXTERNALIZER]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addAdvancedExternalizer;[externalizerMap, CounterValue.EXTERNALIZER]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addAdvancedExternalizer;[externalizerMap, InitializeCounterFunction.EXTERNALIZER]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addAdvancedExternalizer;[externalizerMap, ConfigurationMetadata.EXTERNALIZER]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addAdvancedExternalizer;[externalizerMap, AddFunction.EXTERNALIZER]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addAdvancedExternalizer;[externalizerMap, CompareAndSetFunction.EXTERNALIZER]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addAdvancedExternalizer;[externalizerMap, CounterState.EXTERNALIZER]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cacheManagerStarted</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>gcr</ParamName>
                    <ParamType>GlobalComponentRegistry</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>EmbeddedCacheManager [cacheManager=gcr.getComponent(EmbeddedCacheManager.class)]</InnerVar>
                <InnerVar>InternalCacheRegistry [internalCacheRegistry=gcr.getComponent(InternalCacheRegistry.class)]</InnerVar>
                <InnerVar>CounterManagerConfiguration [counterManagerConfiguration=extractConfiguration(gcr)]</InnerVar>
                <InnerVar>CompletableFuture&lt;CacheHolder&gt; [future=startCaches(cacheManager,counterManagerConfiguration.counters())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;registerCounterCache;[internalCacheRegistry, counterManagerConfiguration]</InnerMethodInvoke>
                <InnerMethodInvoke>null;registerConfigurationCache;[internalCacheRegistry]</InnerMethodInvoke>
                <InnerMethodInvoke>null;registerCounterManager;[gcr, future]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>