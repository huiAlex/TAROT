<Class>
    <Id>3817</Id>
    <Package>org.infinispan.stream.impl.termop</Package>
    <ClassName>SegmentRetryingOperation</ClassName>
    <SuperClass>BaseTerminalOperation</SuperClass>
    <SuperInterfaceList>
        <SuperInterface>TerminalOperation</SuperInterface>
        <SuperInterface>E</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>SegmentRetryingOperation  /** 
 * A terminal based operation that runs the provided function to evaluate the operation.  If a segment is lost during the evaluation of the function the function results will be ignored and subsequently retried with the new stable segments.  This is repeated until either a full stable run is completed of the function or if the lost segment states that there are no more segments left.
 * @param &lt; E &gt; output type of the function
 * @param &lt; T &gt; type of the stream entries
 * @param &lt; S &gt; type of the stream itself
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>EMPTY</FieldName>
            <FieldType>BaseStream</FieldType>
        </Field>
        <Field>
            <FieldName>EMPTY</FieldName>
            <FieldType>?</FieldType>
        </Field>
        <Field>
            <FieldName>function</FieldName>
            <FieldType>Function</FieldType>
        </Field>
        <Field>
            <FieldName>function</FieldName>
            <FieldType>? super S2</FieldType>
        </Field>
        <Field>
            <FieldName>streamRef</FieldName>
            <FieldType>AtomicReference</FieldType>
        </Field>
        <Field>
            <FieldName>streamRef</FieldName>
            <FieldType>BaseStream&lt;?,?&gt;</FieldType>
        </Field>
        <Field>
            <FieldName>continueTrying</FieldName>
            <FieldType>AtomicBoolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>SegmentRetryingOperation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>intermediateOperations</ParamName>
                    <ParamType>IntermediateOperation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>supplier</ParamName>
                    <ParamType>? extends Stream&lt;?&gt;</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>function</ParamName>
                    <ParamType>? super S2</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>lostSegment</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>stopIfLost</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BaseStream&lt;?,?&gt; [oldStream=streamRef.get()]</InnerVar>
                <InnerVar>boolean [affected]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>continueTrying;set;[!stopIfLost]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>innerPerformOperation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>E</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>stream</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>performOperation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>E</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>boolean [keepTrying=true]</InnerVar>
                <InnerVar>BaseStream&lt;?,?&gt; [stream]</InnerVar>
                <InnerVar>E [value]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>log;tracef;["Operation now done, due to try denial: " + !keepTrying]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFunction</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>? super S2</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>