<Class>
    <Id>2227</Id>
    <Package>org.infinispan.persistence.async</Package>
    <ClassName>AsyncCacheWriter</ClassName>
    <SuperClass>DelegatingCacheWriter</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>AsyncCacheWriter  /** 
 * The AsyncCacheWriter is a delegating CacheStore that buffers changes and writes them asynchronously to the underlying CacheStore. &lt;p/&gt; Read operations are done synchronously, taking into account the current state of buffered changes. &lt;p/&gt; There is no provision for exception handling for problems encountered with the underlying store during a write operation, and the exception is just logged. &lt;p/&gt; When configuring the loader, use the following element: &lt;p/&gt; &lt;code&gt; &amp;lt;async enabled="true" /&amp;gt; &lt;/code&gt; &lt;p/&gt; to define whether cache loader operations are to be asynchronous. If not specified, a cache loader operation is assumed synchronous and this decorator is not applied. &lt;p/&gt; Write operations affecting same key are now coalesced so that only the final state is actually stored. &lt;p/&gt;
 * @author Manik Surtani
 * @author Galder Zamarre√±o
 * @author Sanne Grinovero
 * @author Karsten Blees
 * @author Mircea Markus
 * @since 4.0
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>trace</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>executor</FieldName>
            <FieldType>ExecutorService</FieldType>
        </Field>
        <Field>
            <FieldName>coordinator</FieldName>
            <FieldType>Thread</FieldType>
        </Field>
        <Field>
            <FieldName>concurrencyLevel</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>cacheName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>nodeName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>stateLock</FieldName>
            <FieldType>BufferLock</FieldType>
        </Field>
        <Field>
            <FieldName>state</FieldName>
            <FieldType>AtomicReference</FieldType>
        </Field>
        <Field>
            <FieldName>state</FieldName>
            <FieldType>State</FieldType>
        </Field>
        <Field>
            <FieldName>stopped</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>asyncConfiguration</FieldName>
            <FieldType>AsyncStoreConfiguration</FieldType>
        </Field>
        <Field>
            <FieldName>modifications</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>modifications</FieldName>
            <FieldType>Modification</FieldType>
        </Field>
        <Field>
            <FieldName>myState</FieldName>
            <FieldType>State</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>AsyncCacheWriter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>delegate</ParamName>
                    <ParamType>CacheWriter</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>init</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>InitializationContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Cache [cache=ctx.getCache()]</InnerVar>
                <InnerVar>Configuration [cacheCfg=cache != null ? cache.getCacheConfiguration() : null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>start</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [poolSize=asyncConfiguration.threadPoolSize()]</InnerVar>
                <InnerVar>DefaultThreadFactory [processorThreadFactory=new DefaultThreadFactory(null,Thread.NORM_PRIORITY,DefaultThreadFactory.DEFAULT_PATTERN,nodeName,"AsyncStoreProcessor")]</InnerVar>
                <InnerVar>DefaultThreadFactory [coordinatorThreadFactory=new DefaultThreadFactory(null,Thread.NORM_PRIORITY,DefaultThreadFactory.DEFAULT_PATTERN,nodeName,"AsyncStoreCoordinator")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>log;debugf;["Async cache loader starting %s", this]</InnerMethodInvoke>
                <InnerMethodInvoke>state;set;[newState(false,null)]</InnerMethodInvoke>
                <InnerMethodInvoke>((ThreadPoolExecutor)executor);allowCoreThreadTimeOut;[true]</InnerMethodInvoke>
                <InnerMethodInvoke>coordinator;start;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>stop</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>stateLock;writeLock;[0]</InnerMethodInvoke>
                <InnerMethodInvoke>stateLock;writeUnlock;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>write</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>entry</ParamName>
                    <ParamType>MarshalledEntry</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;put;[new Store(entry.getKey(),entry), 1]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeBatch</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>entries</ParamName>
                    <ParamType>Iterable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;putAll;[StreamSupport.stream((Spliterator&lt;MarshalledEntry&gt;)entries.spliterator(),false).map(me -&gt; new Store(me.getKey(),me)).collect(Collectors.toList())]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>deleteBatch</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>keys</ParamName>
                    <ParamType>Iterable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;putAll;[StreamSupport.stream((Spliterator&lt;Object&gt;)keys.spliterator(),false).map(Remove::new).collect(Collectors.toList())]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>delete</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;put;[new Remove(key), 1]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>applyModificationsSync</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mods</ParamName>
                    <ParamType>Modification</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>actual;writeBatch;[() -&gt; StreamSupport.stream(Spliterators.spliterator(mods,Spliterator.NONNULL),false).filter(m -&gt; m.getType() == Modification.Type.STORE).map(Store.class::cast).map(Store::getStoredValue).iterator()]</InnerMethodInvoke>
                <InnerMethodInvoke>actual;deleteBatch;[() -&gt; StreamSupport.stream(Spliterators.spliterator(mods,Spliterator.NONNULL),false).filter(m -&gt; m.getType() == Modification.Type.REMOVE).map(Remove.class::cast).map(Remove::getKey).iterator()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>PersistenceException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newState</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>State</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clear</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>next</ParamName>
                    <ParamType>State</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ConcurrentMap&lt;Object,Modification&gt; [map=CollectionFactory.makeConcurrentMap(64,concurrencyLevel)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>assertNotStopped</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>CacheException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>put</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mod</ParamName>
                    <ParamType>Modification</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>count</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>stateLock;writeLock;[count]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>putAll</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mods</ParamName>
                    <ParamType>Modification</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>stateLock;writeLock;[mods.size()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getState</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>State</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clearStore</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>LogFactory;pushNDC;[cacheName, trace]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createProcessors</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>AsyncStoreProcessor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>state</ParamName>
                    <ParamType>State</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mods</ParamName>
                    <ParamType>Modification</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;AsyncStoreProcessor&gt; [result=new ArrayList&lt;&gt;()]</InnerVar>
                <InnerVar>int [threads=Math.min(mods.size(),asyncConfiguration.threadPoolSize())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>AsyncStoreProcessor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>modifications</ParamName>
                    <ParamType>Modification</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>myState</ParamName>
                    <ParamType>State</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>retryWork</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>maxRetries</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>log;unableToProcessAsyncModifications;[maxRetries]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>