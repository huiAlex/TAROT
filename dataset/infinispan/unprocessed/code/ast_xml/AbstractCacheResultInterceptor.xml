<Class>
    <Id>2527</Id>
    <Package>org.infinispan.jcache.annotation</Package>
    <ClassName>AbstractCacheResultInterceptor</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Serializable</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>AbstractCacheResultInterceptor  /** 
 * &lt;p&gt; {@link javax.cache.annotation.CacheResult} interceptor implementation. This interceptor uses the following algorithm describes inJSR-107.&lt;/p&gt; &lt;p&gt;When a method annotated with  {@link javax.cache.annotation.CacheResult} is invoked the following must occur.&lt;ol&gt; &lt;li&gt;Generate a key based on InvocationContext using the specified  {@linkplain javax.cache.annotation.CacheKeyGenerator}.&lt;/li&gt; &lt;li&gt;Use this key to look up the entry in the cache.&lt;/li&gt; &lt;li&gt;If an entry is found return it as the result and do not call the annotated method.&lt;/li&gt; &lt;li&gt;If no entry is found invoke the method.&lt;/li&gt; &lt;li&gt;Use the result to populate the cache with this key/result pair.&lt;/li&gt; &lt;/ol&gt; There is a skipGet attribute which if set to true will cause the method body to always be invoked and the return value put into the cache. The cache is not checked for the key before method body invocation, skipping steps 2 and 3 from the list above. This can be used for annotating methods that do a cache.put() with no other consequences.&lt;/p&gt;
 * @author Kevin Pollet &lt;kevin.pollet@serli.com&gt; (C) 2011 SERLI
 * @author Galder Zamarre√±o
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>trace</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>serialVersionUID</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>cacheResolver</FieldName>
            <FieldType>CacheResolver</FieldType>
        </Field>
        <Field>
            <FieldName>contextFactory</FieldName>
            <FieldType>CacheKeyInvocationContextFactory</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>AbstractCacheResultInterceptor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheResolver</ParamName>
                    <ParamType>CacheResolver</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>contextFactory</ParamName>
                    <ParamType>CacheKeyInvocationContextFactory</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cacheResult</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>invocationContext</ParamName>
                    <ParamType>InvocationContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CacheKeyInvocationContext&lt;CacheResult&gt; [cacheKeyInvocationContext=contextFactory.getCacheKeyInvocationContext(invocationContext)]</InnerVar>
                <InnerVar>CacheKeyGenerator [cacheKeyGenerator=cacheKeyInvocationContext.unwrap(CacheKeyInvocationContextImpl.class).getCacheKeyGenerator()]</InnerVar>
                <InnerVar>CacheResult [cacheResult=cacheKeyInvocationContext.getCacheAnnotation()]</InnerVar>
                <InnerVar>GeneratedCacheKey [cacheKey=cacheKeyGenerator.generateCacheKey(cacheKeyInvocationContext)]</InnerVar>
                <InnerVar>Cache&lt;GeneratedCacheKey,Object&gt; [cache=cacheResolver.resolveCache(cacheKeyInvocationContext)]</InnerVar>
                <InnerVar>Object [result=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLog</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Log</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>