<Class>
    <Id>1840</Id>
    <Package>org.infinispan.util.logging.events</Package>
    <ClassName>EventLog</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Comparable</SuperInterface>
        <SuperInterface>EventLog</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>EventLog  /** 
 * EventLog describes an event log's attributes.
 * @author Tristan Tarrant
 * @since 8.2
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getWhen</MethodName>
            <MethodComment>/** 
 * @return the instant when the event occurred
 */
</MethodComment>
            <ReturnType>Instant</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLevel</MethodName>
            <MethodComment>/** 
 * @return the level of this event's severity
 */
</MethodComment>
            <ReturnType>EventLogLevel</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMessage</MethodName>
            <MethodComment>/** 
 * @return the message of the event.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCategory</MethodName>
            <MethodComment>/** 
 * @return the category of the event
 */
</MethodComment>
            <ReturnType>EventLogCategory</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDetail</MethodName>
            <MethodComment>/** 
 * @return the detail of the event, e.g. a stack trace.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getWho</MethodName>
            <MethodComment>/** 
 * @return the name of the principal if the event occurred within a security context.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getContext</MethodName>
            <MethodComment>/** 
 * @return the context of the event (e.g. the name of a cache).
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getScope</MethodName>
            <MethodComment>/** 
 * @return the scope of the event. If the event is specific to a node in the cluster, then thiswill be the node's address. If the event is global to the entire cluster this will be {@link Optional#empty()}
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>