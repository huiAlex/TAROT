<Class>
    <Id>3843</Id>
    <Package>org.infinispan.spring.provider.sample.dao</Package>
    <ClassName>BaseBookDao</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>BaseBookDao  /** 
 * &lt;p&gt; A simple, woefully incomplete  {@code DAO} for storing, retrieving and removing {@link org.infinispan.spring.provider.sample.entity.Book &lt;code&gt;Books&lt;/code&gt;}. &lt;/p&gt;
 * @author &lt;a href="mailto:olaf DOT bergner AT gmx DOT de"&gt;Olaf Bergner&lt;/a&gt;
 * @since 5.1
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>findBook</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Look up and return the  {@code Book} identified by the supplied {@code bookId}, or  {@code null}if no such book exists. &lt;/p&gt;
 * @param bookId
 * @return The {@code Book} identified by the supplied {@code bookId}, or  {@code null}
 */
</MethodComment>
            <ReturnType>Book</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>bookId</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>deleteBook</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Remove the  {@code Book} identified by the supplied {@code bookId} from this store.&lt;/p&gt;
 * @param bookId
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>bookId</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>updateBook</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Update provided  {@code book} and return its updated version.&lt;/p&gt;
 * @param book The book to update
 * @return Updated book
 */
</MethodComment>
            <ReturnType>Book</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>book</ParamName>
                    <ParamType>Book</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createBook</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Create new book and return it. If the book already exists, throw exception. &lt;/p&gt;
 * @param book The book to create
 * @return Created book.
 */
</MethodComment>
            <ReturnType>Book</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>book</ParamName>
                    <ParamType>Book</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>