<Class>
    <Id>1900</Id>
    <Package>org.infinispan.server.core.transport</Package>
    <ClassName>NettyChannelInitializer</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>NettyInitializer</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>NettyChannelInitializer  /** 
 * Pipeline factory for Netty based channels. For each pipeline created, a new decoder is created which means that each incoming connection deals with a unique decoder instance. Since the encoder does not maintain any state, a single encoder instance is shared by all incoming connections, if and only if, the protocol mandates an encoder.
 * @author Galder Zamarreño
 * @author Sebastian Łaskawiec
 * @since 4.1
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>server</FieldName>
            <FieldType>ProtocolServer</FieldType>
        </Field>
        <Field>
            <FieldName>server</FieldName>
            <FieldType>A</FieldType>
        </Field>
        <Field>
            <FieldName>transport</FieldName>
            <FieldType>NettyTransport</FieldType>
        </Field>
        <Field>
            <FieldName>encoder</FieldName>
            <FieldType>ChannelOutboundHandler</FieldType>
        </Field>
        <Field>
            <FieldName>decoder</FieldName>
            <FieldType>ChannelInboundHandler</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>NettyChannelInitializer</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>server</ParamName>
                    <ParamType>A</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>transport</ParamName>
                    <ParamType>NettyTransport</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>encoder</ParamName>
                    <ParamType>ChannelOutboundHandler</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>decoder</ParamName>
                    <ParamType>ChannelInboundHandler</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initializeChannel</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ch</ParamName>
                    <ParamType>Channel</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ChannelPipeline [pipeline=ch.pipeline()]</InnerVar>
                <InnerVar>SslConfiguration [ssl=server.getConfiguration().ssl()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAlpnConfiguration</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ApplicationProtocolConfig</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>