<Class>
    <Id>3199</Id>
    <Package>org.infinispan.container.entries</Package>
    <ClassName>InternalCacheEntry</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>CacheEntry</SuperInterface>
        <SuperInterface>K</SuperInterface>
        <SuperInterface>Cloneable</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>InternalCacheEntry  /** 
 * Interface for internal cache entries that expose whether an entry has expired.
 * @author Manik Surtani
 * @author Sanne Grinovero
 * @since 4.0
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>isExpired</MethodName>
            <MethodComment>/** 
 * @param now the current time as defined by {@link System#currentTimeMillis()} or {@link org.infinispan.util.TimeService#wallClockTime()}
 * @return true if the entry has expired; false otherwise
 * @since 5.1
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>now</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isExpired</MethodName>
            <MethodComment>/** 
 * @return true if the entry has expired; false otherwise
 * @deprecated use {@link #isExpired(long)}
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>canExpire</MethodName>
            <MethodComment>/** 
 * @return true if the entry can expire, false otherwise
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getExpiryTime</MethodName>
            <MethodComment>/** 
 * Only used with entries that have a lifespan, this determines when an entry is due to expire.
 * @return timestamp when the entry is due to expire, or -1 if it doesn't have a lifespan
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>touch</MethodName>
            <MethodComment>/** 
 * Updates access timestamps on this instance
 * @deprecated use {@link #touch(long)}
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>touch</MethodName>
            <MethodComment>/** 
 * Updates access timestamps on this instance to a specified time
 * @param currentTimeMillis the current time as defined by {@link System#currentTimeMillis()} or {@link org.infinispan.util.TimeService#wallClockTime()}
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>currentTimeMillis</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reincarnate</MethodName>
            <MethodComment>/** 
 * "Reincarnates" an entry.  Essentially, resets the 'created' timestamp of the entry to the current time.
 * @deprecated use {@link #reincarnate(long)}
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reincarnate</MethodName>
            <MethodComment>/** 
 * "Reincarnates" an entry.  Essentially, resets the 'created' timestamp of the entry to the current time.
 * @param now the current time as defined by {@link System#currentTimeMillis()} or {@link org.infinispan.util.TimeService#wallClockTime()}
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>now</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isL1Entry</MethodName>
            <MethodComment>/** 
 * @return {@code true} if the entry is a L1 entry.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toInternalCacheValue</MethodName>
            <MethodComment>/** 
 * Creates a representation of this entry as an  {@link org.infinispan.container.entries.InternalCacheValue}. The main purpose of this is to provide a representation that does &lt;i&gt;not&lt;/i&gt; have a reference to the key. This is useful in situations where the key is already known or stored elsewhere, making serialization and deserialization more efficient. &lt;p/&gt; Note that this should not be used to optimize memory overhead, since the saving of an additional reference to a key (a single object reference) does not warrant the cost of constructing an InternalCacheValue.  This &lt;i&gt;only&lt;/i&gt; makes sense when marshalling is involved, since the cost of marshalling the key again can be sidestepped using an InternalCacheValue if the key is already known/marshalled. &lt;p/&gt;
 * @return a new InternalCacheValue encapsulating this InternalCacheEntry's value and expiration information.
 */
</MethodComment>
            <ReturnType>V</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clone</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>