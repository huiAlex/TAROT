<Class>
    <Id>3171</Id>
    <Package>org.infinispan.it.osgi.util</Package>
    <ClassName>IspnKarafOptions</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>PROP_VERSION_KARAF</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>PROP_VERSION_PAX_EXAM</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>PROP_VERSION_MOCKITO</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>PROP_VERSION_OBJENESIS</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>PROP_VERSION_BYTEBUDDY</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>PROP_VERBOSE_KARAF</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>PROP_UBER_JAR</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>PATTERN_HEADER</FieldName>
            <FieldType>Pattern</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>karafVersion</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [karafVersion=System.getProperty(PROP_VERSION_KARAF)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>verboseKaraf</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Option</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>LogLevel [logLevel=Boolean.getBoolean(PROP_VERBOSE_KARAF) ? LogLevel.TRACE : LogLevel.INFO]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>runWithoutConsole</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Option</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>karafContainer</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Option</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [karafVersion=karafVersion()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>featureIspnCore</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Option</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>featureIspnCoreAndTests</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Option</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>featureRocksDBJNI</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Option</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>featureRemoteStore</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Option</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>featureJdbcStore</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Option</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>featureJdbcStoreAndTests</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Option</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>bundleTestNG</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Option</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>bundleLog4J</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Option</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>bundleTestAnnotations</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Option</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>featureJpaStore</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Option</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>featureJpaStoreAndTests</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Option</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>featureEmbeddedUberJarAndTests</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Option</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>bundleMockito</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Option</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [versionMockito=MavenUtils.getProperties().getProperty(PROP_VERSION_MOCKITO)]</InnerVar>
                <InnerVar>String [versionObjenesis=MavenUtils.getProperties().getProperty(PROP_VERSION_OBJENESIS)]</InnerVar>
                <InnerVar>String [versionByteBuddy=MavenUtils.getProperties().getProperty(PROP_VERSION_BYTEBUDDY)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>featureKarafJNDI</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Option</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [karafVersion=karafVersion()]</InnerVar>
                <InnerVar>String [groupId=String.format("org.apache.karaf.%sfeatures",karafVersion.startsWith("2") ? "assemblies." : "")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>bundleH2Database</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Option</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>mvnFeature</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Option</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>groupId</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>artifactId</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>feature</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testJarAsStreamBundle</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>UrlProvisionOption</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>groupId</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>artifactId</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>mvnTestsAsFragmentBundle</MethodName>
            <MethodComment>/** 
 * Wraps the specified test jars as bundles fragments and attaches them to the specified host bundle. The host bundle must be the one exporting the packages contained in the test jar.
 * @param groupId
 * @param artifactId
 * @param hostBundle
 * @return
 * @throws Exception
 */
</MethodComment>
            <ReturnType>WrappedUrlProvisionOption</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>groupId</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>artifactId</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>hostBundle</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>instructions</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>UrlProvisionOption [testBundle=asStreamBundle(testJarAsStreamBundle(groupId,artifactId),"assembly:%s!/!org/infinispan/test/fwk/**")]</InnerVar>
                <InnerVar>String[] [allInstructions=Arrays.copyOf(instructions,instructions.length + 1)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>PaxURLUtils;registerURLHandlers;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>emptyBundle</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>UrlProvisionOption</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>headers</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Manifest [manifest=new Manifest()]</InnerVar>
                <InnerVar>Attributes [mainAttributes=manifest.getMainAttributes()]</InnerVar>
                <InnerVar>ByteArrayOutputStream [buf=new ByteArrayOutputStream()]</InnerVar>
                <InnerVar>JarOutputStream [jar=new JarOutputStream(buf,manifest)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mainAttributes;put;[Attributes.Name.MANIFEST_VERSION, "1.0"]</InnerMethodInvoke>
                <InnerMethodInvoke>mainAttributes;putValue;["Bundle-ManifestVersion", "2"]</InnerMethodInvoke>
                <InnerMethodInvoke>jar;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>bundleSplitTestPackages</MethodName>
            <MethodComment>/** 
 * Some test packages are split across several Maven modules this option repackages them and exposes them through a single bundle.
 * @return
 * @throws Exception
 */
</MethodComment>
            <ReturnType>Option</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>UrlProvisionOption [splitCoreBundle=asStreamBundle(testJarAsStreamBundle("org.infinispan","infinispan-core"),"assembly:%s!/org/infinispan/test/fwk/**")]</InnerVar>
                <InnerVar>UrlProvisionOption [splitJDBCBundle=asStreamBundle(testJarAsStreamBundle("org.infinispan","infinispan-cachestore-jdbc"),"assembly:%s!/org/infinispan/test/fwk/**")]</InnerVar>
                <InnerVar>WrappedUrlProvisionOption [wrappedSplitCoreBundle=wrappedBundle(splitCoreBundle).bundleSymbolicName("split-test-core").instructions("Export-Package=org.infinispan.test.fwk;partial=true;mandatory:=partial")]</InnerVar>
                <InnerVar>WrappedUrlProvisionOption [wrappedSplitJDBCBundle=wrappedBundle(splitJDBCBundle).bundleSymbolicName("split-test-jdbc").instructions("Export-Package=org.infinispan.test.fwk;partial=true;mandatory:=partial")]</InnerVar>
                <InnerVar>UrlProvisionOption [wrappedSplitTestBundle=emptyBundle("Bundle-SymbolicName=split-test","Export-Package=org.infinispan.test.fwk","Require-Bundle=split-test-core,split-test-jdbc")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>PaxURLUtils;registerURLHandlers;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>asStreamBundle</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>UrlProvisionOption</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>option</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>newURLFormat</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>MalformedURLException</ExceptionType>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>asStreamBundle</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>UrlProvisionOption</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>url</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>MalformedURLException</ExceptionType>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>asStreamBundle</MethodName>
            <MethodComment>/** 
 * Some PAX-URL protocols are not supported by Karaf. This method can be used when one of the unsupported protocol is required. The URLs are resolved outside Karaf and the bundles are provided as stream bundles.
 * @param newURLFormat
 * @param args
 * @return
 * @throws MalformedURLException
 * @throws IOException
 */
</MethodComment>
            <ReturnType>UrlProvisionOption</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>url</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>newURLFormat</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>InputStream [in=new URL(String.format(newURLFormat,url,args)).openStream()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>MalformedURLException</ExceptionType>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>localRepoForPAXUrl</MethodName>
            <MethodComment>/** 
 * PAX URL needs to know the location of the local maven repo to resolve mvn: URLs. When running the tests on the CI machine TeamCity passes a custom local repo location using -Dmaven.repo.local to isolate the build targets and PAX URL is not aware there's a custom repo to be used and tries to load from the default local repo location. &lt;p/&gt; This option will pass the location specified using -Dmaven.repo.local to the appropriate system property of the container.
 * @return an Option or null if no custom repo location is specified by the maven build.
 * @throws Exception
 */
</MethodComment>
            <ReturnType>Option</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [localRepo=MavenUtils.getLocalRepository()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hibernatePersistenceH2</MethodName>
            <MethodComment>/** 
 * Sets the system variables used inside persistence.xml to use H2.
 */
</MethodComment>
            <ReturnType>Option</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>bundlePaxExamSpi</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Option</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [version=MavenUtils.getProperties().getProperty(PROP_VERSION_PAX_EXAM)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>featurePaxUrlWrap</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Option</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>MavenUrlReference [karafStandardRepo=maven().groupId("org.apache.karaf.features").artifactId("standard").version(karafVersion()).classifier("features").type("xml")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>commonOptions</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Option</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>perSuiteOptions</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Option</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>useUberJar</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [uberJar=System.getProperty(PROP_UBER_JAR)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>