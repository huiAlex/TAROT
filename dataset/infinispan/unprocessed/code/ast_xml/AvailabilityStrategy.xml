<Class>
    <Id>1137</Id>
    <Package>org.infinispan.partitionhandling.impl</Package>
    <ClassName>AvailabilityStrategy</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>AvailabilityStrategy  /** 
 * Implementations decide what to do when the cache membership changes, either because new nodes joined, nodes left, or there was a merge. The decision is then applied by calling one of the  {@link AvailabilityStrategyContext} methods.The strategy can also queue actions until the current rebalance ends, and execute them on {@link #onRebalanceEnd(AvailabilityStrategyContext)}. Method invocations are synchronized, so it's not possible to have concurrent invocations.
 * @author Mircea Markus
 * @author Dan Berindei
 * @since 7.0
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>onJoin</MethodName>
            <MethodComment>/** 
 * Called when a node joins.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>AvailabilityStrategyContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>joiner</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onGracefulLeave</MethodName>
            <MethodComment>/** 
 * Called when a node leaves gracefully.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>AvailabilityStrategyContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>leaver</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onClusterViewChange</MethodName>
            <MethodComment>/** 
 * Called when the cluster view changed (e.g. because one or more nodes left abruptly).
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>AvailabilityStrategyContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>clusterMembers</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onPartitionMerge</MethodName>
            <MethodComment>/** 
 * Called when two or more partitions merge, to compute the stable and current cache topologies for the merged cluster.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>AvailabilityStrategyContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>statusResponseMap</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onRebalanceEnd</MethodName>
            <MethodComment>/** 
 * Called when a rebalance ends. Can be used to re-assess the state of the cache and apply pending changes.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>AvailabilityStrategyContext</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onManualAvailabilityChange</MethodName>
            <MethodComment>/** 
 * Called when the administrator manually changes the availability status.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>AvailabilityStrategyContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>newAvailabilityMode</ParamName>
                    <ParamType>AvailabilityMode</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>