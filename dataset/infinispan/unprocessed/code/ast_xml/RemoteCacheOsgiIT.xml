<Class>
    <Id>2453</Id>
    <Package>org.infinispan.server.test.client.hotrod.osgi</Package>
    <ClassName>RemoteCacheOsgiIT</ClassName>
    <SuperClass>KarafTestSupport</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>RemoteCacheOsgiIT  /** 
 * Simple test for RemoteCache running in OSGi (Karaf). Both basic put/get operations and remote queries are tested.
 * @author mgencur
 * @author anistor@redhat.com
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>SERVER_HOST</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>HOTROD_PORT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>DEFAULT_CACHE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>INDEXED_CACHE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>KARAF_VERSION</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>RESOURCES_DIR</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>builder</FieldName>
            <FieldType>ConfigurationBuilder</FieldType>
        </Field>
        <Field>
            <FieldName>manager</FieldName>
            <FieldType>RemoteCacheManager</FieldType>
        </Field>
        <Field>
            <FieldName>name</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>config</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Option[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>exportTestPackages</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>TestProbeBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>probeBuilder</ParamName>
                    <ParamType>TestProbeBuilder</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>probeBuilder;setHeader;["Export-Package", RemoteCacheOsgiIT.class.getPackage().getName()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setUp</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>builder.addServer().host(SERVER_HOST);port;[HOTROD_PORT]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>tearDown</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testCustomObjectPutGet</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Person [p=new Person("Martin")]</InnerVar>
                <InnerVar>RemoteCache&lt;Object,Object&gt; [cache=manager.getCache(DEFAULT_CACHE)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cache;put;["k1", p]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[p, cache.get("k1")]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testAttributeQuery</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>RemoteCache&lt;Integer,Object&gt; [cache=manager.getCache(INDEXED_CACHE)]</InnerVar>
                <InnerVar>String [bankSchemaFile=Util.read(bundleContext.getBundle().getResource("/sample_bank_account/bank.proto").openStream())]</InnerVar>
                <InnerVar>FileDescriptorSource [fds=new FileDescriptorSource()]</InnerVar>
                <InnerVar>SerializationContext [ctx=ProtoStreamMarshaller.getSerializationContext(manager)]</InnerVar>
                <InnerVar>ProtoSchemaBuilder [protoSchemaBuilder=new ProtoSchemaBuilder()]</InnerVar>
                <InnerVar>String [testSchemaFile=protoSchemaBuilder.fileName("test.proto").addClass(Note.class).build(ctx)]</InnerVar>
                <InnerVar>RemoteCache&lt;String,String&gt; [metadataCache=manager.getCache(ProtobufMetadataManagerConstants.PROTOBUF_METADATA_CACHE_NAME)]</InnerVar>
                <InnerVar>User [userFromCache=(User)cache.get(1)]</InnerVar>
                <InnerVar>Note [noteFromCache=(Note)cache.get(3)]</InnerVar>
                <InnerVar>QueryFactory [qf=Search.getQueryFactory(cache)]</InnerVar>
                <InnerVar>Query [query=qf.from(User.class).having("name").eq("Tom").build()]</InnerVar>
                <InnerVar>List [list=query.list()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>builder;marshaller;[new ProtoStreamMarshaller()]</InnerMethodInvoke>
                <InnerMethodInvoke>fds;addProtoFile;["sample_bank_account/bank.proto", bankSchemaFile]</InnerMethodInvoke>
                <InnerMethodInvoke>ctx;registerProtoFiles;[fds]</InnerMethodInvoke>
                <InnerMethodInvoke>ctx;registerMarshaller;[new UserMarshaller()]</InnerMethodInvoke>
                <InnerMethodInvoke>ctx;registerMarshaller;[new GenderMarshaller()]</InnerMethodInvoke>
                <InnerMethodInvoke>ctx;registerMarshaller;[new AddressMarshaller()]</InnerMethodInvoke>
                <InnerMethodInvoke>ctx;registerMarshaller;[new AccountMarshaller()]</InnerMethodInvoke>
                <InnerMethodInvoke>ctx;registerMarshaller;[new LimitsMarshaller()]</InnerMethodInvoke>
                <InnerMethodInvoke>ctx;registerMarshaller;[new TransactionMarshaller()]</InnerMethodInvoke>
                <InnerMethodInvoke>metadataCache;put;["sample_bank_account/bank.proto", bankSchemaFile]</InnerMethodInvoke>
                <InnerMethodInvoke>metadataCache;put;["test.proto", testSchemaFile]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertFalse;[metadataCache.containsKey(ProtobufMetadataManagerConstants.ERRORS_KEY_SUFFIX)]</InnerMethodInvoke>
                <InnerMethodInvoke>cache;put;[1, createUser1()]</InnerMethodInvoke>
                <InnerMethodInvoke>cache;put;[2, createUser2()]</InnerMethodInvoke>
                <InnerMethodInvoke>cache;put;[3, createNote()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertUser;[userFromCache]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNote;[noteFromCache]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotNull;[list]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[1, list.size()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[User.class, list.get(0).getClass()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertUser;[(User)list.get(0)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotNull;[list]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[1, list.size()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[Note.class, list.get(0).getClass()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNote;[(Note)list.get(0)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createNote</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Note</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Note [note=new Note()]</InnerVar>
                <InnerVar>User [author=new User()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>note;setText;["testing 123"]</InnerMethodInvoke>
                <InnerMethodInvoke>author;setId;[20]</InnerMethodInvoke>
                <InnerMethodInvoke>author;setName;["name"]</InnerMethodInvoke>
                <InnerMethodInvoke>author;setSurname;["surname"]</InnerMethodInvoke>
                <InnerMethodInvoke>note;setAuthor;[author]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>assertNote</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>note</ParamName>
                    <ParamType>Note</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertNotNull;[note]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["testing 123", note.getText()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotNull;[note.getAuthor()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[20, note.getAuthor().getId()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["name", note.getAuthor().getName()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["surname", note.getAuthor().getSurname()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createUser1</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>User</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>User [user=new User()]</InnerVar>
                <InnerVar>Address [address=new Address()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>user;setId;[1]</InnerMethodInvoke>
                <InnerMethodInvoke>user;setName;["Tom"]</InnerMethodInvoke>
                <InnerMethodInvoke>user;setSurname;["Cat"]</InnerMethodInvoke>
                <InnerMethodInvoke>user;setGender;[User.Gender.MALE]</InnerMethodInvoke>
                <InnerMethodInvoke>user;setAccountIds;[Collections.singleton(12)]</InnerMethodInvoke>
                <InnerMethodInvoke>address;setStreet;["Dark Alley"]</InnerMethodInvoke>
                <InnerMethodInvoke>address;setPostCode;["1234"]</InnerMethodInvoke>
                <InnerMethodInvoke>user;setAddresses;[Collections.singletonList(address)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createUser2</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>User</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>User [user=new User()]</InnerVar>
                <InnerVar>Address [address=new Address()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>user;setId;[2]</InnerMethodInvoke>
                <InnerMethodInvoke>user;setName;["Adrian"]</InnerMethodInvoke>
                <InnerMethodInvoke>user;setSurname;["Nistor"]</InnerMethodInvoke>
                <InnerMethodInvoke>user;setGender;[User.Gender.MALE]</InnerMethodInvoke>
                <InnerMethodInvoke>address;setStreet;["Old Street"]</InnerMethodInvoke>
                <InnerMethodInvoke>address;setPostCode;["XYZ"]</InnerMethodInvoke>
                <InnerMethodInvoke>user;setAddresses;[Collections.singletonList(address)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>assertUser</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>user</ParamName>
                    <ParamType>User</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertNotNull;[user]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[1, user.getId()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["Tom", user.getName()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["Cat", user.getSurname()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[User.Gender.MALE, user.getGender()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotNull;[user.getAccountIds()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[1, user.getAccountIds().size()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;[user.getAccountIds().contains(12)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotNull;[user.getAddresses()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[1, user.getAddresses().size()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["Dark Alley", user.getAddresses().get(0).getStreet()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["1234", user.getAddresses().get(0).getPostCode()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>Person</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>equals</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>o</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Person [person=(Person)o]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hashCode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>