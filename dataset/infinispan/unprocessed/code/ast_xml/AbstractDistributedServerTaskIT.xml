<Class>
    <Id>3608</Id>
    <Package>org.infinispan.server.test.task</Package>
    <ClassName>AbstractDistributedServerTaskIT</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>AbstractDistributedServerTaskIT  /** 
 * Abstract class holding tests for Remote Task Execution in Distributed mode.
 * @author amanukya
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>exceptionRule</FieldName>
            <FieldType>ExpectedException</FieldType>
        </Field>
        <Field>
            <FieldName>managers</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>managers</FieldName>
            <FieldType>RemoteCacheManager</FieldType>
        </Field>
        <Field>
            <FieldName>expectedServerList</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>expectedServerList</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>CACHE_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>CACHE_NAME_TX</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getServers</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>RemoteInfinispanServer</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setUp</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>release</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createJavaArchive</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>JavaArchive</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>JavaArchive [jar=ShrinkWrap.create(JavaArchive.class)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>jar;addClass;[DistributedTestServerTask.class]</InnerMethodInvoke>
                <InnerMethodInvoke>jar;addClass;[DistributedCacheUsingTask.class]</InnerMethodInvoke>
                <InnerMethodInvoke>jar;addClass;[DistributedMapReduceServerTask.class]</InnerMethodInvoke>
                <InnerMethodInvoke>jar;addClass;[DistributedJSExecutingServerTask.class]</InnerMethodInvoke>
                <InnerMethodInvoke>jar;addClass;[LocalMapReduceServerTask.class]</InnerMethodInvoke>
                <InnerMethodInvoke>jar;addClass;[JSExecutingServerTask.class]</InnerMethodInvoke>
                <InnerMethodInvoke>jar;addAsServiceProvider;[ServerTask.class, DistributedTestServerTask.class, DistributedCacheUsingTask.class, DistributedMapReduceServerTask.class, DistributedJSExecutingServerTask.class]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>shouldGatherNodeNamesInRemoteTasks</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Object [resultObject=managers.get(0).getCache().execute(DistributedTestServerTask.NAME,Collections.emptyMap())]</InnerVar>
                <InnerVar>List&lt;String&gt; [result=(List&lt;String&gt;)resultObject]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertNotNull;[resultObject]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[2, result.size()]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["The RESULT IS: " + result]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;["result list does not contain expected items.", result.containsAll(expectedServerList)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>shouldThrowExceptionInRemoteTasks</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Map&lt;String,Boolean&gt; [params=new HashMap&lt;String,Boolean&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>params;put;["throwException", true]</InnerMethodInvoke>
                <InnerMethodInvoke>exceptionRule;expect;[HotRodClientException.class]</InnerMethodInvoke>
                <InnerMethodInvoke>exceptionRule;expectMessage;["Intentionally Thrown Exception"]</InnerMethodInvoke>
                <InnerMethodInvoke>managers.get(0).getCache();execute;[DistributedTestServerTask.NAME, params]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>shouldPutNewValueInRemoteCache</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [key="key"]</InnerVar>
                <InnerVar>String [value="value"]</InnerVar>
                <InnerVar>String [paramValue="parameter"]</InnerVar>
                <InnerVar>Map&lt;String,String&gt; [params=new HashMap&lt;&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>params;put;[DistributedCacheUsingTask.PARAM_KEY, paramValue]</InnerMethodInvoke>
                <InnerMethodInvoke>managers.get(1);getCache;[CACHE_NAME_TX]</InnerMethodInvoke>
                <InnerMethodInvoke>managers.get(0).getCache(CACHE_NAME_TX);put;[key, value]</InnerMethodInvoke>
                <InnerMethodInvoke>managers.get(0).getCache(CACHE_NAME_TX);execute;[DistributedCacheUsingTask.NAME, params]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["modified:modified:value:parameter:parameter", managers.get(0).getCache(CACHE_NAME_TX).get(key)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>shouldExecuteMapReduceOnReplCacheViaTask</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>RemoteCache [remoteCache=managers.get(1).getCache(DistributedMapReduceServerTask.CACHE_NAME)]</InnerVar>
                <InnerVar>List&lt;Map&lt;String,Long&gt;&gt; [result=(List&lt;Map&lt;String,Long&gt;&gt;)remoteCache.execute(DistributedMapReduceServerTask.NAME,Collections.emptyMap())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>remoteCache;put;[1, "word1 word2 word3"]</InnerMethodInvoke>
                <InnerMethodInvoke>remoteCache;put;[2, "word1 word2"]</InnerMethodInvoke>
                <InnerMethodInvoke>remoteCache;put;[3, "word1"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[2, result.size()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;verifyMapReduceResult;[result.get(0)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;verifyMapReduceResult;[result.get(1)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>shouldExecuteMapReduceViaJavaScriptInTask</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>RemoteCache [remoteCache=managers.get(1).getCache(DistributedJSExecutingServerTask.CACHE_NAME)]</InnerVar>
                <InnerVar>List&lt;Map&lt;String,Long&gt;&gt; [result=(List&lt;Map&lt;String,Long&gt;&gt;)remoteCache.execute(DistributedJSExecutingServerTask.NAME,Collections.emptyMap())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>remoteCache;put;[1, "word1 word2 word3"]</InnerMethodInvoke>
                <InnerMethodInvoke>remoteCache;put;[2, "word1 word2"]</InnerMethodInvoke>
                <InnerMethodInvoke>remoteCache;put;[3, "word1"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[2, result.size()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;verifyMapReduceResult;[result.get(0)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;verifyMapReduceResult;[result.get(1)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>verifyMapReduceResult</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>result</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertEquals;[3, result.size()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[3, result.get("word1").intValue()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[2, result.get("word2").intValue()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[1, result.get("word3").intValue()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>