<Class>
    <Id>1926</Id>
    <Package>org.infinispan.server.test.query</Package>
    <ClassName>RemoteQueryKeySetIT</ClassName>
    <SuperClass>RemoteQueryBaseIT</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>RemoteQueryKeySetIT  /** 
 * Tests for keySet() method on a distributed remote cache that uses protobuf marshalling.
 * @author anistor@redhat.com
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>server</FieldName>
            <FieldType>RemoteInfinispanServer</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>RemoteQueryKeySetIT</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getServer</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>RemoteInfinispanServer</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testDistributedKeySet</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Set&lt;Integer&gt; [keys=remoteCache.keySet()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>remoteCache;put;[1, createUser(1)]</InnerMethodInvoke>
                <InnerMethodInvoke>remoteCache;put;[2, createUser(2)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotNull;[keys]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[2, keys.size()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;[keys.contains(1)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;[keys.contains(2)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createUser</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>User</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>id</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>User [user=new User()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>user;setId;[id]</InnerMethodInvoke>
                <InnerMethodInvoke>user;setName;["John " + id]</InnerMethodInvoke>
                <InnerMethodInvoke>user;setSurname;["Doe"]</InnerMethodInvoke>
                <InnerMethodInvoke>user;setGender;[User.Gender.MALE]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>