<Class>
    <Id>2770</Id>
    <Package>org.infinispan.interceptors</Package>
    <ClassName>InterceptorChain</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>InterceptorChain  /** 
 * Knows how to build and manage an chain of interceptors. Also in charge with invoking methods on the chain.
 * @author Mircea.Markus@jboss.com
 * @author Galder Zamarre√±o
 * @since 4.0
 * @deprecated Since 9.0, use {@link AsyncInterceptorChain} instead. Some methods will ignore theinterceptors that do not extend  {@link CommandInterceptor}.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>asyncInterceptorChain</FieldName>
            <FieldType>AsyncInterceptorChain</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>InterceptorChain</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>asyncInterceptorChain</ParamName>
                    <ParamType>AsyncInterceptorChain</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addInterceptor</MethodName>
            <MethodComment>/** 
 * Inserts the given interceptor at the specified position in the chain (o based indexing).
 * @throws IllegalArgumentException if the position is invalid (e.g. 5 and there are only 2 interceptors in thechain)
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>interceptor</ParamName>
                    <ParamType>CommandInterceptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>position</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>asyncInterceptorChain;addInterceptor;[interceptor, position]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeInterceptor</MethodName>
            <MethodComment>/** 
 * Removes the interceptor at the given postion.
 * @throws IllegalArgumentException if the position is invalid (e.g. 5 and there are only 2 interceptors in thechain)
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>position</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>asyncInterceptorChain;removeInterceptor;[position]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>size</MethodName>
            <MethodComment>/** 
 * Returns the number of interceptors in the chain.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>asList</MethodName>
            <MethodComment>/** 
 * Returns an unmofiable list with all the interceptors in sequence. If first in chain is null an empty list is returned.
 */
</MethodComment>
            <ReturnType>CommandInterceptor</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>ArrayList&lt;CommandInterceptor&gt; [list=new ArrayList&lt;&gt;(asyncInterceptorChain.getInterceptors().size())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>asyncInterceptorChain.getInterceptors();forEach;[ci -&gt; {
  if (ci instanceof CommandInterceptor) {
    list.add((CommandInterceptor)ci);
  }
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeInterceptor</MethodName>
            <MethodComment>/** 
 * Removes all the occurences of supplied interceptor type from the chain.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>? extends CommandInterceptor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>asyncInterceptorChain;removeInterceptor;[clazz]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addInterceptorAfter</MethodName>
            <MethodComment>/** 
 * Adds a new interceptor in list after an interceptor of a given type.
 * @return true if the interceptor was added; i.e. the afterInterceptor exists
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>toAdd</ParamName>
                    <ParamType>CommandInterceptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>afterInterceptor</ParamName>
                    <ParamType>? extends CommandInterceptor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addInterceptorBefore</MethodName>
            <MethodComment>/** 
 * @deprecated Use {@link #addInterceptorBefore(CommandInterceptor,Class)} instead.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>toAdd</ParamName>
                    <ParamType>CommandInterceptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>beforeInterceptor</ParamName>
                    <ParamType>? extends CommandInterceptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isCustom</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addInterceptorBefore</MethodName>
            <MethodComment>/** 
 * Adds a new interceptor in list after an interceptor of a given type.
 * @return true if the interceptor was added; i.e. the afterInterceptor exists
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>toAdd</ParamName>
                    <ParamType>CommandInterceptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>beforeInterceptor</ParamName>
                    <ParamType>? extends CommandInterceptor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>replaceInterceptor</MethodName>
            <MethodComment>/** 
 * Replaces an existing interceptor of the given type in the interceptor chain with a new interceptor instance passed as parameter.
 * @param replacingInterceptor        the interceptor to add to the interceptor chain
 * @param toBeReplacedInterceptorType the type of interceptor that should be swapped with the new one
 * @return true if the interceptor was replaced
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>replacingInterceptor</ParamName>
                    <ParamType>CommandInterceptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>toBeReplacedInterceptorType</ParamName>
                    <ParamType>? extends CommandInterceptor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>appendInterceptor</MethodName>
            <MethodComment>/** 
 * Appends at the end.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ci</ParamName>
                    <ParamType>CommandInterceptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isCustom</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>asyncInterceptorChain;appendInterceptor;[ci, isCustom]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>invoke</MethodName>
            <MethodComment>/** 
 * Walks the command through the interceptor chain. The received ctx is being passed in. &lt;p&gt;Note: Reusing the context for multiple invocations is allowed. However, the two invocations must not overlap, so calling  {@code invoke(ctx, command)} from an interceptor is not allowed.If an interceptor needs to invoke a new command through the entire chain, it must first copy the invocation context with  {@link InvocationContext#clone()}.&lt;/p&gt;
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>InvocationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>command</ParamName>
                    <ParamType>VisitableCommand</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFirstInChain</MethodName>
            <MethodComment>/** 
 * @return the first {@code CommandInterceptor} in the chain.Since 9.0, there will likely be other  {@link AsyncInterceptor}s before it.
 */
</MethodComment>
            <ReturnType>CommandInterceptor</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setFirstInChain</MethodName>
            <MethodComment>/** 
 * Mainly used by unit tests to replace the interceptor chain with the starting point passed in.
 * @param interceptor interceptor to be used as the first interceptor in the chain.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>interceptor</ParamName>
                    <ParamType>CommandInterceptor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;addInterceptor;[interceptor, 0]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getInterceptorsWhichExtend</MethodName>
            <MethodComment>/** 
 * Returns all interceptors which extend the given command interceptor.
 */
</MethodComment>
            <ReturnType>CommandInterceptor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>interceptorClass</ParamName>
                    <ParamType>? extends CommandInterceptor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ArrayList&lt;CommandInterceptor&gt; [list=new ArrayList&lt;&gt;(asyncInterceptorChain.getInterceptors().size())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>asyncInterceptorChain.getInterceptors();forEach;[ci -&gt; {
  if (interceptorClass.isInstance(ci)) {
    list.add((CommandInterceptor)ci);
  }
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getInterceptorsWithClass</MethodName>
            <MethodComment>/** 
 * Returns all the interceptors that have the fully qualified name of their class equal with the supplied class name.
 */
</MethodComment>
            <ReturnType>CommandInterceptor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>Class</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ArrayList&lt;CommandInterceptor&gt; [list=new ArrayList&lt;&gt;(asyncInterceptorChain.getInterceptors().size())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>asyncInterceptorChain.getInterceptors();forEach;[ci -&gt; {
  if (clazz == ci.getClass()) {
    list.add((CommandInterceptor)ci);
  }
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>containsInstance</MethodName>
            <MethodComment>/** 
 * Checks whether the chain contains the supplied interceptor instance.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>interceptor</ParamName>
                    <ParamType>CommandInterceptor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>containsInterceptorType</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>interceptorType</ParamName>
                    <ParamType>? extends CommandInterceptor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>containsInterceptorType</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>interceptorType</ParamName>
                    <ParamType>? extends CommandInterceptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>alsoMatchSubClasses</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>