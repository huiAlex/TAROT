<Class>
    <Id>2720</Id>
    <Package>org.infinispan.partitionhandling.impl</Package>
    <ClassName>PreferAvailabilityStrategy</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>AvailabilityStrategy</SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>RESPONSE_COMPARATOR</FieldName>
            <FieldType>Comparator</FieldType>
        </Field>
        <Field>
            <FieldName>RESPONSE_COMPARATOR</FieldName>
            <FieldType>CacheStatusResponse</FieldType>
        </Field>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>eventLogManager</FieldName>
            <FieldType>EventLogManager</FieldType>
        </Field>
        <Field>
            <FieldName>persistentUUIDManager</FieldName>
            <FieldType>PersistentUUIDManager</FieldType>
        </Field>
        <Field>
            <FieldName>lostDataCheck</FieldName>
            <FieldType>LostDataCheck</FieldType>
        </Field>
        <Field>
            <FieldName>resolveConflictsOnMerge</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>PreferAvailabilityStrategy</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>eventLogManager</ParamName>
                    <ParamType>EventLogManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>persistentUUIDManager</ParamName>
                    <ParamType>PersistentUUIDManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lostDataCheck</ParamName>
                    <ParamType>LostDataCheck</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>resolveConflictsOnMerge</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onJoin</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>AvailabilityStrategyContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>joiner</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>context;queueRebalance;[context.getExpectedMembers()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onGracefulLeave</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>AvailabilityStrategyContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>leaver</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CacheTopology [currentTopology=context.getCurrentTopology()]</InnerVar>
                <InnerVar>List&lt;Address&gt; [newMembers=new ArrayList&lt;&gt;(currentTopology.getMembers())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>newMembers;remove;[leaver]</InnerMethodInvoke>
                <InnerMethodInvoke>context;updateCurrentTopology;[newMembers]</InnerMethodInvoke>
                <InnerMethodInvoke>context;queueRebalance;[newMembers]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onClusterViewChange</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>AvailabilityStrategyContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>clusterMembers</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CacheTopology [currentTopology=context.getCurrentTopology()]</InnerVar>
                <InnerVar>List&lt;Address&gt; [newMembers=new ArrayList&lt;&gt;(currentTopology.getMembers())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkForLostData;[context, newMembers]</InnerMethodInvoke>
                <InnerMethodInvoke>context;updateCurrentTopology;[newMembers]</InnerMethodInvoke>
                <InnerMethodInvoke>context;queueRebalance;[newMembers]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkForLostData</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>AvailabilityStrategyContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>newMembers</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CacheTopology [stableTopology=context.getStableTopology()]</InnerVar>
                <InnerVar>List&lt;Address&gt; [stableMembers=stableTopology.getMembers()]</InnerVar>
                <InnerVar>List&lt;Address&gt; [lostMembers=new ArrayList&lt;&gt;(stableMembers)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>lostMembers;removeAll;[newMembers]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onPartitionMerge</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>AvailabilityStrategyContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>statusResponseMap</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;CacheStatusResponse&gt; [statusResponses=statusResponseMap.values().stream().sorted(RESPONSE_COMPARATOR).collect(Collectors.toList())]</InnerVar>
                <InnerVar>CacheTopology [maxStableTopology=null]</InnerVar>
                <InnerVar>CacheTopology [maxTopology=null]</InnerVar>
                <InnerVar>int [maxTopologyId=0]</InnerVar>
                <InnerVar>int [maxRebalanceId=0]</InnerVar>
                <InnerVar>CacheTopology [mergedTopology=null]</InnerVar>
                <InnerVar>List&lt;Address&gt; [newMembers=context.getExpectedMembers()]</InnerVar>
                <InnerVar>boolean [resolveConflicts=resolveConflictsOnMerge &amp;&amp; isSplitBrainHealing(context,maxTopology,maxStableTopology)]</InnerVar>
                <InnerVar>List&lt;Address&gt; [survivingMembers=new ArrayList&lt;&gt;(newMembers)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>context;updateTopologiesAfterMerge;[mergedTopology, maxStableTopology, null, resolveConflicts]</InnerMethodInvoke>
                <InnerMethodInvoke>context;updateCurrentTopology;[survivingMembers]</InnerMethodInvoke>
                <InnerMethodInvoke>context;queueRebalance;[newMembers]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isSplitBrainHealing</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>AvailabilityStrategyContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>maxTopology</ParamName>
                    <ParamType>CacheTopology</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>maxStableTopology</ParamName>
                    <ParamType>CacheTopology</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [isNewCoordinator=maxTopology != null &amp;&amp; maxTopology.getMembers().size() == 1]</InnerVar>
                <InnerVar>boolean [membershipIncreased=!isNewCoordinator &amp;&amp; maxStableTopology != null &amp;&amp; context.getExpectedMembers().size() &gt; maxStableTopology.getMembers().size()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onRebalanceEnd</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>AvailabilityStrategyContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onManualAvailabilityChange</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>AvailabilityStrategyContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>newAvailabilityMode</ParamName>
                    <ParamType>AvailabilityMode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>