<Class>
    <Id>2814</Id>
    <Package>org.infinispan.client.hotrod.event</Package>
    <ClassName>ClientCacheEntryCreatedEvent</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>ClientEvent</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ClientCacheEntryCreatedEvent  /** 
 * Client side cache entry created events provide information on the created key, and the version of the entry. This version can be used to invoke conditional operations on the server, such as {@link org.infinispan.client.hotrod.RemoteCache#replaceWithVersion(Object,Object,long)}or  {@link org.infinispan.client.hotrod.RemoteCache#removeWithVersion(Object,long)}
 * @param &lt; K &gt; type of key created.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getKey</MethodName>
            <MethodComment>/** 
 * Created cache entry's key.
 * @return an instance of the key with which a cache entry has beencreated in the remote server(s).
 */
</MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getVersion</MethodName>
            <MethodComment>/** 
 * Provides access to the version of the created cache entry. This version can be used to invoke conditional operations on the server, such as {@link org.infinispan.client.hotrod.RemoteCache#replaceWithVersion(Object,Object,long)}or  {@link org.infinispan.client.hotrod.RemoteCache#removeWithVersion(Object,long)}
 * @return a long containing the version of the created cache entry.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isCommandRetried</MethodName>
            <MethodComment>/** 
 * This will be true if the write command that caused this had to be retried again due to a topology change.  This could be a sign that this event has been duplicated or another event was dropped and replaced (eg: ModifiedEvent replaced CreateEvent)
 * @return Whether the command that caused this event was retried
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>