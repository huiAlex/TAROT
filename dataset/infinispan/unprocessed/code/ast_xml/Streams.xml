<Class>
    <Id>3402</Id>
    <Package>org.infinispan.util.stream</Package>
    <ClassName>Streams</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Streams  /** 
 * A collection of stream related utility methods. &lt;p/&gt; &lt;p&gt;Exceptions that are thrown and not explicitly declared are ignored.
 * @author &lt;a href="mailto:jason@planet57.com"&gt;Jason Dillon&lt;/a&gt;
 * @since 4.2
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>trace</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>DEFAULT_BUFFER_SIZE</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>close</MethodName>
            <MethodComment>/** 
 * Attempt to close an &lt;tt&gt;InputStream&lt;/tt&gt;.
 * @param stream &lt;tt&gt;InputStream&lt;/tt&gt; to attempt to close.
 * @return &lt;tt&gt;True&lt;/tt&gt; if stream was closed (or stream was null), or&lt;tt&gt;false&lt;/tt&gt; if an exception was thrown.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>stream</ParamName>
                    <ParamType>InputStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [success=true]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>close</MethodName>
            <MethodComment>/** 
 * Attempt to close an &lt;tt&gt;OutputStream&lt;/tt&gt;.
 * @param stream &lt;tt&gt;OutputStream&lt;/tt&gt; to attempt to close.
 * @return &lt;tt&gt;True&lt;/tt&gt; if stream was closed (or stream was null), or&lt;tt&gt;false&lt;/tt&gt; if an exception was thrown.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>stream</ParamName>
                    <ParamType>OutputStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [success=true]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>close</MethodName>
            <MethodComment>/** 
 * Attempt to close an &lt;tt&gt;InputStream&lt;/tt&gt; or &lt;tt&gt;OutputStream&lt;/tt&gt;.
 * @param stream Stream to attempt to close.
 * @return &lt;tt&gt;True&lt;/tt&gt; if stream was closed (or stream was null), or&lt;tt&gt;false&lt;/tt&gt; if an exception was thrown.
 * @throws IllegalArgumentException Stream is not an &lt;tt&gt;InputStream&lt;/tt&gt; or&lt;tt&gt;OuputStream&lt;/tt&gt;.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>stream</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [success]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>close</MethodName>
            <MethodComment>/** 
 * Attempt to close an array of &lt;tt&gt;InputStream&lt;/tt&gt;s.
 * @param streams Array of &lt;tt&gt;InputStream&lt;/tt&gt;s to attempt to close.
 * @return &lt;tt&gt;True&lt;/tt&gt; if all streams were closed, or &lt;tt&gt;false&lt;/tt&gt; if anexception was thrown.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>streams</ParamName>
                    <ParamType>InputStream[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [success=true]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>close</MethodName>
            <MethodComment>/** 
 * Attempt to close an array of &lt;tt&gt;OutputStream&lt;/tt&gt;s.
 * @param streams Array of &lt;tt&gt;OutputStream&lt;/tt&gt;s to attempt to close.
 * @return &lt;tt&gt;True&lt;/tt&gt; if all streams were closed, or &lt;tt&gt;false&lt;/tt&gt; if anexception was thrown.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>streams</ParamName>
                    <ParamType>OutputStream[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [success=true]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>close</MethodName>
            <MethodComment>/** 
 * Attempt to close an array of &lt;tt&gt;InputStream&lt;/tt&gt;a and/or &lt;tt&gt;OutputStream&lt;/tt&gt;s.
 * @param streams Array of streams to attempt to close.
 * @return &lt;tt&gt;True&lt;/tt&gt; if all streams were closed, or &lt;tt&gt;false&lt;/tt&gt; if anexception was thrown.
 * @throws IllegalArgumentException Stream is not an &lt;tt&gt;InputStream&lt;/tt&gt; or&lt;tt&gt;OuputStream&lt;/tt&gt;.  Closing stops at the last valid stream object in this case.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>streams</ParamName>
                    <ParamType>Object[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [success=true]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fclose</MethodName>
            <MethodComment>/** 
 * Attempt to flush and close an &lt;tt&gt;OutputStream&lt;/tt&gt;.
 * @param stream &lt;tt&gt;OutputStream&lt;/tt&gt; to attempt to flush and close.
 * @return &lt;tt&gt;True&lt;/tt&gt; if stream was flushed and closed, or &lt;tt&gt;false&lt;/tt&gt;if an exception was thrown.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>stream</ParamName>
                    <ParamType>OutputStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fclose</MethodName>
            <MethodComment>/** 
 * Attempt to flush and close an array of &lt;tt&gt;OutputStream&lt;/tt&gt;s.
 * @param streams &lt;tt&gt;OutputStream&lt;/tt&gt;s to attempt to flush and close.
 * @return &lt;tt&gt;True&lt;/tt&gt; if all streams were flushed and closed, or&lt;tt&gt;false&lt;/tt&gt; if an exception was thrown.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>streams</ParamName>
                    <ParamType>OutputStream[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [success=true]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>flush</MethodName>
            <MethodComment>/** 
 * Attempt to flush an &lt;tt&gt;OutputStream&lt;/tt&gt;.
 * @param stream &lt;tt&gt;OutputStream&lt;/tt&gt; to attempt to flush.
 * @return &lt;tt&gt;True&lt;/tt&gt; if stream was flushed (or stream was null), or&lt;tt&gt;false&lt;/tt&gt; if an exception was thrown.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>stream</ParamName>
                    <ParamType>OutputStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [success=true]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>flush</MethodName>
            <MethodComment>/** 
 * Attempt to flush an array of &lt;tt&gt;OutputStream&lt;/tt&gt;s.
 * @param streams &lt;tt&gt;OutputStream&lt;/tt&gt;s to attempt to flush.
 * @return &lt;tt&gt;True&lt;/tt&gt; if all streams were flushed, or &lt;tt&gt;false&lt;/tt&gt; ifan exception was thrown.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>streams</ParamName>
                    <ParamType>OutputStream[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [success=true]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>copy</MethodName>
            <MethodComment>/** 
 * Copy all of the bytes from the input stream to the output stream.
 * @param input  Stream to read bytes from.
 * @param output Stream to write bytes to.
 * @param buffer The buffer to use while copying.
 * @return The total number of bytes copied.
 * @throws IOException Failed to copy bytes.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>InputStream</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>output</ParamName>
                    <ParamType>OutputStream</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>buffer</ParamName>
                    <ParamType>byte</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>long [total=0]</InnerVar>
                <InnerVar>int [read]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>copy</MethodName>
            <MethodComment>/** 
 * Copy all of the bytes from the input stream to the output stream.
 * @param input  Stream to read bytes from.
 * @param output Stream to write bytes to.
 * @param size   The size of the buffer to use while copying.
 * @return The total number of bytes copied.
 * @throws IOException Failed to copy bytes.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>InputStream</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>output</ParamName>
                    <ParamType>OutputStream</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>size</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>copy</MethodName>
            <MethodComment>/** 
 * Copy all of the bytes from the input stream to the output stream.
 * @param input  Stream to read bytes from.
 * @param output Stream to write bytes to.
 * @return The total number of bytes copied.
 * @throws IOException Failed to copy bytes.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>InputStream</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>output</ParamName>
                    <ParamType>OutputStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>copyb</MethodName>
            <MethodComment>/** 
 * Copy all of the bytes from the input stream to the output stream wrapping streams in buffers as needed.
 * @param input  Stream to read bytes from.
 * @param output Stream to write bytes to.
 * @return The total number of bytes copied.
 * @throws IOException Failed to copy bytes.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>InputStream</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>output</ParamName>
                    <ParamType>OutputStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>long [bytes=copy(input,output,DEFAULT_BUFFER_SIZE)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>output;flush;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>copySome</MethodName>
            <MethodComment>/** 
 * Copy a limited number of bytes from the input stream to the output stream.
 * @param input  Stream to read bytes from.
 * @param output Stream to write bytes to.
 * @param buffer The buffer to use while copying.
 * @param length The maximum number of bytes to copy.
 * @return The total number of bytes copied.
 * @throws IOException Failed to copy bytes.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>InputStream</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>output</ParamName>
                    <ParamType>OutputStream</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>buffer</ParamName>
                    <ParamType>byte</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>length</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>long [total=0]</InnerVar>
                <InnerVar>int [read]</InnerVar>
                <InnerVar>int [readLength]</InnerVar>
                <InnerVar>boolean [trace=Streams.trace]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>copySome</MethodName>
            <MethodComment>/** 
 * Copy a limited number of bytes from the input stream to the output stream.
 * @param input  Stream to read bytes from.
 * @param output Stream to write bytes to.
 * @param size   The size of the buffer to use while copying.
 * @param length The maximum number of bytes to copy.
 * @return The total number of bytes copied.
 * @throws IOException Failed to copy bytes.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>InputStream</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>output</ParamName>
                    <ParamType>OutputStream</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>size</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>length</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>copySome</MethodName>
            <MethodComment>/** 
 * Copy a limited number of bytes from the input stream to the output stream.
 * @param input  Stream to read bytes from.
 * @param output Stream to write bytes to.
 * @param length The maximum number of bytes to copy.
 * @return The total number of bytes copied.
 * @throws IOException Failed to copy bytes.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>InputStream</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>output</ParamName>
                    <ParamType>OutputStream</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>length</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>