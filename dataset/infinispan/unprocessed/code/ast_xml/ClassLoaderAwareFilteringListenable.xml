<Class>
    <Id>3458</Id>
    <Package>org.infinispan.notifications</Package>
    <ClassName>ClassLoaderAwareFilteringListenable</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>FilteringListenable</SuperInterface>
        <SuperInterface>K</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ClassLoaderAwareFilteringListenable  /** 
 * Interface that enhances  {@link FilteringListenable} with the possibility of specifying the{@link ClassLoader} which should be set as the context class loader for the invokedlistener method
 * @author Manik Surtani
 * @since 6.0
 * @see ClassLoaderAwareListenable
 * @see FilteringListenable
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>addListener</MethodName>
            <MethodComment>/** 
 * Adds a listener to the component.  Typically, listeners would need to be annotated with  {@link org.infinispan.notifications.Listener} andfurther to that, contain methods annotated appropriately, otherwise the listener will not be registered. &lt;p/&gt; See the  {@link org.infinispan.notifications.Listener} annotation for more information.&lt;p/&gt;
 * @param listener must not be null.
 * @param classLoader class loader
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>listener</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>filter</ParamName>
                    <ParamType>? super K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classLoader</ParamName>
                    <ParamType>ClassLoader</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addListener</MethodName>
            <MethodComment>/** 
 * Adds a listener with the provided filter and converter and using a given classloader when invoked.  See {@link org.infinispan.notifications.FilteringListenable#addListener(Object,org.infinispan.notifications.cachelistener.filter.CacheEventFilter,org.infinispan.notifications.cachelistener.filter.CacheEventConverter)}for more details. &lt;p/&gt;
 * @param listener must not be null.  The listener to callback on when an event is raised
 * @param filter The filter to apply for the entry to see if the event should be raised
 * @param converter The converter to convert the filtered entry to a new value
 * @param classLoader The class loader to use when the event is fired
 * @param &lt; C &gt; The type that the converter returns.  The listener must handle this type in any methods that handleevents being returned
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>listener</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>filter</ParamName>
                    <ParamType>? super K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>converter</ParamName>
                    <ParamType>? super K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classLoader</ParamName>
                    <ParamType>ClassLoader</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>