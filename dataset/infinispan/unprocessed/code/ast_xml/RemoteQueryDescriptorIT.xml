<Class>
    <Id>3088</Id>
    <Package>org.infinispan.server.test.query</Package>
    <ClassName>RemoteQueryDescriptorIT</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>RemoteQueryDescriptorIT  /** 
 * Tests for Remote Query descriptors propagation across nodes.
 * @author gustavonalle
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>server1</FieldName>
            <FieldType>RemoteInfinispanServer</FieldType>
        </Field>
        <Field>
            <FieldName>server2</FieldName>
            <FieldType>RemoteInfinispanServer</FieldType>
        </Field>
        <Field>
            <FieldName>MBEAN</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>testDescriptorPropagation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;registerProtoOnServer1;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertRegisteredOn;[server1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertRegisteredOn;[server2]</InnerMethodInvoke>
                <InnerMethodInvoke>null;populateCache;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[1, queryResultsIn(server1)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[1, queryResultsIn(server2)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>registerProtoOnServer1</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String[] [fileNames={"sample_bank_account/bank.proto"}]</InnerVar>
                <InnerVar>String[] [fileContents={Util.getResourceAsString("/sample_bank_account/bank.proto",getClass().getClassLoader())}]</InnerVar>
                <InnerVar>Object [errors=getAttribute(getJmxConnection(server1),"filesWithErrors")]</InnerVar>
                <InnerVar>Object [protofileNames=getAttribute(getJmxConnection(server1),"protofileNames")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;invoke;[getJmxConnection(server1), "registerProtofiles", fileNames, fileContents]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNull;[errors]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;[protofileNames instanceof String[]]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;[Arrays.asList((String[])protofileNames).contains("sample_bank_account/bank.proto")]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>assertRegisteredOn</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>server</ParamName>
                    <ParamType>RemoteInfinispanServer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Object [proto=invoke(getJmxConnection(server),"getProtofile","sample_bank_account/bank.proto")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertTrue;[proto.toString().contains("message User")]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAttribute</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>provider</ParamName>
                    <ParamType>MBeanServerConnectionProvider</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>attrName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>invoke</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>provider</ParamName>
                    <ParamType>MBeanServerConnectionProvider</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>opName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>params</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String[] [types=new String[params.length]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getJmxConnection</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>MBeanServerConnectionProvider</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>server</ParamName>
                    <ParamType>RemoteInfinispanServer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>queryResultsIn</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>server</ParamName>
                    <ParamType>RemoteInfinispanServer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ConfigurationBuilder [configurationBuilder=configurationBuilder(server)]</InnerVar>
                <InnerVar>RemoteCacheManager [remoteCacheManager=new RemoteCacheManagerFactory().createManager(configurationBuilder)]</InnerVar>
                <InnerVar>RemoteCache&lt;Integer,User&gt; [remoteCache=remoteCacheManager.getCache("repl_descriptor")]</InnerVar>
                <InnerVar>Query [query=Search.getQueryFactory(remoteCache).from(User.class).build()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>MarshallerRegistration;registerMarshallers;[ProtoStreamMarshaller.getSerializationContext(remoteCacheManager)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>configurationBuilder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>server</ParamName>
                    <ParamType>RemoteInfinispanServer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>populateCache</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>ConfigurationBuilder [clientBuilder=configurationBuilder(server1)]</InnerVar>
                <InnerVar>User [user=new User()]</InnerVar>
                <InnerVar>RemoteCacheManager [manager=new RemoteCacheManagerFactory().createManager(clientBuilder)]</InnerVar>
                <InnerVar>RemoteCache&lt;Object,Object&gt; [cache=manager.getCache("repl_descriptor")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>user;setId;[0]</InnerMethodInvoke>
                <InnerMethodInvoke>user;setName;["user1"]</InnerMethodInvoke>
                <InnerMethodInvoke>user;setSurname;["surname"]</InnerMethodInvoke>
                <InnerMethodInvoke>MarshallerRegistration;registerMarshallers;[ProtoStreamMarshaller.getSerializationContext(manager)]</InnerMethodInvoke>
                <InnerMethodInvoke>cache;put;[1, user]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>