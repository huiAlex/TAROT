<Class>
    <Id>2053</Id>
    <Package>org.infinispan.objectfilter.impl.syntax.parser</Package>
    <ClassName>ObjectPropertyHelper</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ObjectPropertyHelper  /** 
 * Provides property metadata when dealing with entities.
 * @author anistor@redhat.com
 * @since 7.0
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>primitives</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>primitives</FieldName>
            <FieldType>Class&lt;?&gt;</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ObjectPropertyHelper</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEntityMetadata</MethodName>
            <MethodComment>/** 
 * Lookup a type by name and return the metadata that represents it.
 * @param typeName the fully qualified type name
 * @return the metadata representation
 */
</MethodComment>
            <ReturnType>TypeMetadata</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>typeName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>convertToPropertyType</MethodName>
            <MethodComment>/** 
 * Returns the given value converted into the type of the given property as determined via the field bridge of the property.
 * @param value        the value to convert
 * @param entityType   the type hosting the property
 * @param propertyPath the name of the property
 * @return the given value converted into the type of the given property
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>entityType</ParamName>
                    <ParamType>TypeMetadata</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>propertyPath</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Class&lt;?&gt; [propertyType=getPrimitivePropertyType(entityType,propertyPath)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPrimitivePropertyType</MethodName>
            <MethodComment>/** 
 * Returns the type of the primitive property.
 * @param entityType   the TypeMetadata of the entity
 * @param propertyPath the path of the property
 * @return the {@link Class} or {@code null} if not present or not a primitive property
 */
</MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>entityType</ParamName>
                    <ParamType>TypeMetadata</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>propertyPath</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasProperty</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>entityType</ParamName>
                    <ParamType>TypeMetadata</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>propertyPath</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasEmbeddedProperty</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>entityType</ParamName>
                    <ParamType>TypeMetadata</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>propertyPath</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isRepeatedProperty</MethodName>
            <MethodComment>/** 
 * Tests if the attribute path contains repeated (collection/array) attributes.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>entityType</ParamName>
                    <ParamType>TypeMetadata</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>propertyPath</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getIndexedFieldProvider</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>TypeMetadata</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>mapPropertyNamePathToFieldIdPath</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>TypeMetadata</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>propertyPath</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>convertToBackendType</MethodName>
            <MethodComment>/** 
 * Converts the given property value (usually a String representation coming right from the user's query string) into the type expected by the query backend.
 * @param entityType   the entity type owning the property
 * @param propertyPath the path from the entity to the property (will only contain more than one element in case theentity is hosted on an embedded entity).
 * @param value        the value of the property
 * @return the property value, converted into the type expected by the query backend
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>entityType</ParamName>
                    <ParamType>TypeMetadata</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>propertyPath</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>