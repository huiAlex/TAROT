<Class>
    <Id>1460</Id>
    <Package>org.infinispan.server.test.client.memcached</Package>
    <ClassName>AbstractMemcachedClusteredIT</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>AbstractMemcachedClusteredIT  /** 
 * Tests for Memcached endpoint. Subclasses must provide a way to get the list of remote infinispan servers. &lt;p/&gt; Subclasses may be used in Client-Server mode or Hybrid mode where Memcached server runs as a library deployed in an application server.
 * @author Michal Linhard
 * @author Martin Gencur
 * @author Jozef Vilkolak
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>ENCODING</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>KEY_A</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>KEY_B</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>KEY_C</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>mc1</FieldName>
            <FieldType>MemcachedClient</FieldType>
        </Field>
        <Field>
            <FieldName>mc2</FieldName>
            <FieldType>MemcachedClient</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getServers</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>RemoteInfinispanServer</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMemcachedPort1</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMemcachedPort2</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setUp</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc1;delete;[KEY_A]</InnerMethodInvoke>
                <InnerMethodInvoke>mc1;delete;[KEY_B]</InnerMethodInvoke>
                <InnerMethodInvoke>mc1;delete;[KEY_C]</InnerMethodInvoke>
                <InnerMethodInvoke>mc2;delete;[KEY_A]</InnerMethodInvoke>
                <InnerMethodInvoke>mc2;delete;[KEY_B]</InnerMethodInvoke>
                <InnerMethodInvoke>mc2;delete;[KEY_C]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNull;[mc1.get(KEY_A)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNull;[mc1.get(KEY_B)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNull;[mc1.get(KEY_C)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNull;[mc2.get(KEY_A)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNull;[mc2.get(KEY_B)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNull;[mc2.get(KEY_C)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>tearDown</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc1;delete;[KEY_A]</InnerMethodInvoke>
                <InnerMethodInvoke>mc1;delete;[KEY_B]</InnerMethodInvoke>
                <InnerMethodInvoke>mc1;delete;[KEY_C]</InnerMethodInvoke>
                <InnerMethodInvoke>mc2;delete;[KEY_A]</InnerMethodInvoke>
                <InnerMethodInvoke>mc2;delete;[KEY_B]</InnerMethodInvoke>
                <InnerMethodInvoke>mc2;delete;[KEY_C]</InnerMethodInvoke>
                <InnerMethodInvoke>mc1;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mc2;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testReplicatedSet</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc1;set;[KEY_A, "A"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["A", mc2.get(KEY_A)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testReplicatedGetMultipleKeys</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc1;set;[KEY_A, "A"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc1;set;[KEY_B, "B"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc1;set;[KEY_C, "C"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc2;writeln;["get " + KEY_A + " "+ KEY_B+ " "+ KEY_C]</InnerMethodInvoke>
                <InnerMethodInvoke>mc2;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["VALUE " + KEY_A + " 0 1", mc2.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["A", mc2.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["VALUE " + KEY_B + " 0 1", mc2.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["B", mc2.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["VALUE " + KEY_C + " 0 1", mc2.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["C", mc2.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["END", mc2.readln()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testReplicatedAdd</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [data="testAdd"]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc1;writeln;["add " + KEY_A + " 0 0 "+ data.getBytes(ENCODING).length]</InnerMethodInvoke>
                <InnerMethodInvoke>mc1;writeln;[data]</InnerMethodInvoke>
                <InnerMethodInvoke>mc1;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["STORED", mc1.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[data, mc2.get(KEY_A)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testReplicatedReplace</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc1;set;[KEY_A, "data1"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["data1", mc2.get(KEY_A)]</InnerMethodInvoke>
                <InnerMethodInvoke>mc1;writeln;["replace " + KEY_A + " 0 0 "+ "data2".getBytes(ENCODING).length]</InnerMethodInvoke>
                <InnerMethodInvoke>mc1;writeln;["data2"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc1;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["STORED", mc1.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["data2", mc2.get(KEY_A)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testReplicatedAppend</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc1;set;[KEY_A, "Hello"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["Hello", mc2.get(KEY_A)]</InnerMethodInvoke>
                <InnerMethodInvoke>mc2;writeln;["append " + KEY_A + " 0 0 "+ ", World!".getBytes(ENCODING).length]</InnerMethodInvoke>
                <InnerMethodInvoke>mc2;writeln;[", World!"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc2;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["STORED", mc2.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["Hello, World!", mc1.get(KEY_A)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testReplicatedPrepend</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc1;set;[KEY_A, "World!"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["World!", mc1.get(KEY_A)]</InnerMethodInvoke>
                <InnerMethodInvoke>mc2;writeln;["prepend " + KEY_A + " 0 0 "+ "Hello, ".getBytes(ENCODING).length]</InnerMethodInvoke>
                <InnerMethodInvoke>mc2;writeln;["Hello, "]</InnerMethodInvoke>
                <InnerMethodInvoke>mc2;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["STORED", mc2.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["Hello, World!", mc1.get(KEY_A)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testReplicatedCas</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [casId=mc2.getCasId(KEY_A)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc1;set;[KEY_A, "A"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc2;writeln;["cas " + KEY_A + " 0 0 1 "+ casId]</InnerMethodInvoke>
                <InnerMethodInvoke>mc2;writeln;["B"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc2;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["STORED", mc2.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["B", mc1.get(KEY_A)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testReplicatedCasExists</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [casId=mc2.getCasId(KEY_A)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc1;set;[KEY_A, "A"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc2;writeln;["cas " + KEY_A + " 0 0 1 1"+ casId]</InnerMethodInvoke>
                <InnerMethodInvoke>mc2;writeln;["B"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc2;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["EXISTS", mc2.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["A", mc1.get(KEY_A)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testReplicatedCasExists2</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [casId1=mc1.getCasId(KEY_A)]</InnerVar>
                <InnerVar>String [casId2=mc2.getCasId(KEY_A)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc1;set;[KEY_A, "A"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[casId1, casId2]</InnerMethodInvoke>
                <InnerMethodInvoke>mc2;writeln;["cas " + KEY_A + " 0 0 2 "+ casId1]</InnerMethodInvoke>
                <InnerMethodInvoke>mc2;writeln;["B2"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc2;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["STORED", mc2.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>mc1;writeln;["cas " + KEY_A + " 0 0 2 "+ casId1]</InnerMethodInvoke>
                <InnerMethodInvoke>mc1;writeln;["B1"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc1;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["EXISTS", mc1.readln()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testReplicatedDelete</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc1;set;[KEY_A, "A"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["A", mc2.get(KEY_A)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["DELETED", mc1.delete(KEY_A)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNull;[mc2.get(KEY_A)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testReplicatedIncrement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc1;set;[KEY_A, "0"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc2;writeln;["incr " + KEY_A + " 1"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc2;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["1", mc2.readln()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testReplicatedDecrement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc1;set;[KEY_A, "1"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc2;writeln;["decr " + KEY_A + " 1"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc2;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["0", mc2.readln()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testReplicatedFlushAll</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc1;set;[KEY_A, "1"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc1;set;[KEY_B, "2"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc1;set;[KEY_C, "3"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc2;writeln;["flush_all"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc2;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["OK", mc2.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNull;[mc1.get(KEY_A)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNull;[mc1.get(KEY_B)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNull;[mc1.get(KEY_C)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>