<Class>
    <Id>3130</Id>
    <Package>org.infinispan.notifications.cachelistener</Package>
    <ClassName>DistributedQueueingSegmentListener</ClassName>
    <SuperClass>BaseQueueingSegmentListener</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>DistributedQueueingSegmentListener  /** 
 * This handler is to be used with a clustered distributed cache.  This handler does special optimizations to alllow for queueing to occur per segment.  This way we don't retain all new events in memory unlike {@link QueueingAllSegmentListener} until the iteration is complete.
 * @author wburns
 * @since 7.0
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>queues</FieldName>
            <FieldType>AtomicReferenceArray</FieldType>
        </Field>
        <Field>
            <FieldName>queues</FieldName>
            <FieldType>Queue&lt;KeyValuePair&lt;CacheEntryEvent&lt;K,V&gt;,ListenerInvocation&lt;Event&lt;K,V&gt;&gt;&gt;&gt;</FieldType>
        </Field>
        <Field>
            <FieldName>distributionManager</FieldName>
            <FieldType>DistributionManager</FieldType>
        </Field>
        <Field>
            <FieldName>entryFactory</FieldName>
            <FieldType>InternalEntryFactory</FieldType>
        </Field>
        <Field>
            <FieldName>justCompletedSegments</FieldName>
            <FieldType>Stream</FieldType>
        </Field>
        <Field>
            <FieldName>justCompletedSegments</FieldName>
            <FieldType>Integer</FieldType>
        </Field>
        <Field>
            <FieldName>completeSegment</FieldName>
            <FieldType>Consumer</FieldType>
        </Field>
        <Field>
            <FieldName>completeSegment</FieldName>
            <FieldType>Integer</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>DistributedQueueingSegmentListener</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>entryFactory</ParamName>
                    <ParamType>InternalEntryFactory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>distributionManager</ParamName>
                    <ParamType>DistributionManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>handleEvent</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>wrapped</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>invocation</ParamName>
                    <ParamType>Event&lt;K,V&gt;</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>K [key=wrapped.getKey()]</InnerVar>
                <InnerVar>boolean [enqueued=!completed.get()]</InnerVar>
                <InnerVar>CacheEntryEvent&lt;K,V&gt; [event=wrapped.getEvent()]</InnerVar>
                <InnerVar>CacheEntry&lt;K,V&gt; [cacheEntry=entryFactory.create(event.getKey(),event.getValue(),event.getMetadata())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>transferComplete</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>justCompletedSegments;forEach;[completeSegment]</InnerMethodInvoke>
                <InnerMethodInvoke>completed;set;[true]</InnerMethodInvoke>
                <InnerMethodInvoke>notifiedKeys;clear;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>markKeyAsProcessing</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>notifiedKey</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>justCompletedSegments;forEach;[completeSegment]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>completeSegment</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>segment</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Queue&lt;KeyValuePair&lt;CacheEntryEvent&lt;K,V&gt;,ListenerInvocation&lt;Event&lt;K,V&gt;&gt;&gt;&gt; [queue=queues.get(segment)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>segmentCompleted</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>segments</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>