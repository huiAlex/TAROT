<Class>
    <Id>1079</Id>
    <Package>org.infinispan.commons.api</Package>
    <ClassName>BatchingCache</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>BatchingCache  /** 
 * The BatchingCache is implemented by all caches which support batching
 * @author Tristan Tarrant
 * @since 6.0
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>startBatch</MethodName>
            <MethodComment>/** 
 * Starts a batch.  All operations on the current client thread are performed as a part of this batch, with locks held for the duration of the batch and any remote calls delayed till the end of the batch. &lt;p/&gt;
 * @return true if a batch was successfully started; false if one was available and already running.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>endBatch</MethodName>
            <MethodComment>/** 
 * Completes a batch if one has been started using  {@link #startBatch()}.  If no batch has been started, this is a no-op. &lt;p/&gt;
 * @param successful if true, the batch completes, otherwise the batch is aborted and changes are not committed.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>successful</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>