<Class>
    <Id>2172</Id>
    <Package>org.infinispan.objectfilter.impl.syntax</Package>
    <ClassName>BooleShannonExpansion</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>BooleShannonExpansion  /** 
 * Expands an input filter expression composed of indexed and unindexed fields into a superset of it (matching the set of the input filter plus some more false positives), using only indexed fields. The expanded expression is computed by applying &lt;a href="http://en.wikipedia.org/wiki/Boole%27s_expansion_theorem"&gt;Boole's expansion theorem&lt;/a&gt; to all non-indexed fields and then ignoring the non-indexed fields from the resulting product. The resulting product is a more complex expression but it can be executed fully indexed. In some exterme cases it can become a tautology (TRUE), indicating that the filter should be executed fully non-indexed by doing a full scan.
 * @author anistor@redhat.com
 * @since 8.0
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>maxExpansionCofactors</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>fieldIndexingMetadata</FieldName>
            <FieldType>IndexedFieldProvider.FieldIndexingMetadata</FieldType>
        </Field>
        <Field>
            <FieldName>foundIndexed</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>predicatesToRemove</FieldName>
            <FieldType>Set</FieldType>
        </Field>
        <Field>
            <FieldName>predicatesToRemove</FieldName>
            <FieldType>PrimaryPredicateExpr</FieldType>
        </Field>
        <Field>
            <FieldName>toReplace</FieldName>
            <FieldType>PrimaryPredicateExpr</FieldType>
        </Field>
        <Field>
            <FieldName>with</FieldName>
            <FieldType>ConstantBooleanExpr</FieldType>
        </Field>
        <Field>
            <FieldName>found</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>BooleShannonExpansion</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>maxExpansionCofactors</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fieldIndexingMetadata</ParamName>
                    <ParamType>IndexedFieldProvider.FieldIndexingMetadata</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BooleanExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fullTextBoostExpr</ParamName>
                    <ParamType>FullTextBoostExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>fullTextBoostExpr.getChild();acceptVisitor;[this]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BooleanExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fullTextOccurExpr</ParamName>
                    <ParamType>FullTextOccurExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>fullTextOccurExpr.getChild();acceptVisitor;[this]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BooleanExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fullTextTermExpr</ParamName>
                    <ParamType>FullTextTermExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PropertyValueExpr [propertyValueExpr=(PropertyValueExpr)fullTextTermExpr.getChild()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BooleanExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fullTextRegexpExpr</ParamName>
                    <ParamType>FullTextRegexpExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PropertyValueExpr [propertyValueExpr=(PropertyValueExpr)fullTextRegexpExpr.getChild()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BooleanExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fullTextRangeExpr</ParamName>
                    <ParamType>FullTextRangeExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PropertyValueExpr [propertyValueExpr=(PropertyValueExpr)fullTextRangeExpr.getChild()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BooleanExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>notExpr</ParamName>
                    <ParamType>NotExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>notExpr.getChild();acceptVisitor;[this]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BooleanExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>orExpr</ParamName>
                    <ParamType>OrExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BooleanExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>andExpr</ParamName>
                    <ParamType>AndExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BooleanExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>constantBooleanExpr</ParamName>
                    <ParamType>ConstantBooleanExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BooleanExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>isNullExpr</ParamName>
                    <ParamType>IsNullExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PropertyValueExpr [propertyValueExpr=(PropertyValueExpr)isNullExpr.getChild()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BooleanExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>comparisonExpr</ParamName>
                    <ParamType>ComparisonExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PropertyValueExpr [propertyValueExpr=(PropertyValueExpr)comparisonExpr.getLeftChild()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BooleanExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>likeExpr</ParamName>
                    <ParamType>LikeExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PropertyValueExpr [propertyValueExpr=(PropertyValueExpr)likeExpr.getChild()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ValueExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>constantValueExpr</ParamName>
                    <ParamType>ConstantValueExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ValueExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>propertyValueExpr</ParamName>
                    <ParamType>PropertyValueExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ValueExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>aggregationExpr</ParamName>
                    <ParamType>AggregationExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>Replacer</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>toReplace</ParamName>
                    <ParamType>PrimaryPredicateExpr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>with</ParamName>
                    <ParamType>ConstantBooleanExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BooleanExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>notExpr</ParamName>
                    <ParamType>NotExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BooleanExpr [transformedChild=notExpr.getChild().acceptVisitor(this)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BooleanExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>orExpr</ParamName>
                    <ParamType>OrExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;BooleanExpr&gt; [newChildren=new ArrayList&lt;&gt;(orExpr.getChildren().size())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>PredicateOptimisations;optimizePredicates;[newChildren, false]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BooleanExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>andExpr</ParamName>
                    <ParamType>AndExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;BooleanExpr&gt; [newChildren=new ArrayList&lt;&gt;(andExpr.getChildren().size())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>PredicateOptimisations;optimizePredicates;[newChildren, true]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BooleanExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>constantBooleanExpr</ParamName>
                    <ParamType>ConstantBooleanExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BooleanExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>isNullExpr</ParamName>
                    <ParamType>IsNullExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BooleanExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>comparisonExpr</ParamName>
                    <ParamType>ComparisonExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BooleanExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>likeExpr</ParamName>
                    <ParamType>LikeExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ValueExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>constantValueExpr</ParamName>
                    <ParamType>ConstantValueExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ValueExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>propertyValueExpr</ParamName>
                    <ParamType>PropertyValueExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ValueExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>aggregationExpr</ParamName>
                    <ParamType>AggregationExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>replacePredicate</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BooleanExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>primaryPredicateExpr</ParamName>
                    <ParamType>PrimaryPredicateExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>expand</MethodName>
            <MethodComment>/** 
 * Creates a less restrictive (expanded) query that matches the same objects as the input query plus potentially some more (false positives). This query can be executed fully indexed and the result can be filtered in a second pass to remove the false positives. This method can eventually return TRUE and in that case the expansion is useless and it is better to just run the entire query unindexed (full scan). &lt;p&gt; If all fields used by the input query are indexed then the expansion is identical to the input query.
 * @param booleanExpr the expression to expand
 * @return the expanded query if some of the fields are non-indexed or the input query if all fields are indexed
 */
</MethodComment>
            <ReturnType>BooleanExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>booleanExpr</ParamName>
                    <ParamType>BooleanExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Collector [collector=new Collector()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>booleanExpr;acceptVisitor;[collector]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>