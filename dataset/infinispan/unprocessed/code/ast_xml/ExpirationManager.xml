<Class>
    <Id>2753</Id>
    <Package>org.infinispan.expiration</Package>
    <ClassName>ExpirationManager</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ExpirationManager  /** 
 * Central component that deals with expiration of cache entries. &lt;p /&gt; Typically,  {@link #processExpiration()} is called periodically by the expiration thread (which can be configured using{@link ExpirationConfigurationBuilder#wakeUpInterval(long)} and {@link GlobalConfigurationBuilder#expirationThreadPool()}). &lt;p /&gt; If the expiration thread is disabled - by setting  {@link ExpirationConfigurationBuilder#wakeUpInterval(long)} to &lt;tt&gt;0&lt;/tt&gt; -then this method could be called directly, perhaps by any other maintenance thread that runs periodically in the application. &lt;p /&gt;
 * @author William Burns
 * @since 7.2
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>processExpiration</MethodName>
            <MethodComment>/** 
 * Processes the expiration event queue.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isEnabled</MethodName>
            <MethodComment>/** 
 * @return true if expiration reaper thread is enabled, false otherwise
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>handleInMemoryExpiration</MethodName>
            <MethodComment>/** 
 * This should be invoked passing in an entry that is now expired.  This method may attempt to lock this key to preserve atomicity.
 * @param entry entry that is now expired
 * @param currentTime the current time in milliseconds
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>entry</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>currentTime</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>handleInStoreExpiration</MethodName>
            <MethodComment>/** 
 * This is to be invoked when a store entry expires.  This method may attempt to lock this key to preserve atomicity. &lt;p&gt; Note this method doesn't currently take a  {@link InternalCacheEntry} and this is due to a limitation in thecache store API.  This may cause some values to be removed if they were updated at the same time.
 * @param key the key of the expired entry
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>handleInStoreExpiration</MethodName>
            <MethodComment>/** 
 * This is to be invoked when a store entry expires and the value and/or metadata is available to be used.  This method is preferred over  {@link ExpirationManager#handleInStoreExpiration(Object)} as it allows for morespecific expiration to possibly occur.
 * @param marshalledEntry the entry that can be unmarshalled as needed
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>marshalledEntry</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>registerWriteIncoming</MethodName>
            <MethodComment>/** 
 * This is to be invoked with a when a write is known to occur to prevent expiration from happening.  This way we won't have a swarm of remote calls required.
 * @param key the key to use
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>unregisterWrite</MethodName>
            <MethodComment>/** 
 * This should always be invoked after registering write but after performing any operations required.
 * @param key the key to use
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>