<Class>
    <Id>263</Id>
    <Package>org.infinispan.interceptors</Package>
    <ClassName>AsyncInterceptor</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>AsyncInterceptor  /** 
 * Interface for sequential interceptors.
 * @author Dan Berindei
 * @since 9.0
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>visitCommand</MethodName>
            <MethodComment>/** 
 * Perform some work for a command invocation. The interceptor is responsible for invoking the next interceptor in the chain, using {@link BaseAsyncInterceptor#invokeNext(InvocationContext,VisitableCommand)} or the other methods in{@link BaseAsyncInterceptor}.
 * @return Either a regular value, or an {@link InvocationStage} created by the {@link BaseAsyncInterceptor} methods.
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>InvocationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>command</ParamName>
                    <ParamType>VisitableCommand</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>Throwable</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setNextInterceptor</MethodName>
            <MethodComment>/** 
 * Sets up the interceptor. Do not call explicitly.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>interceptorStage</ParamName>
                    <ParamType>AsyncInterceptor</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>