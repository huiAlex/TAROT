<Class>
    <Id>3147</Id>
    <Package>org.infinispan.cdi.common.util</Package>
    <ClassName>ImmutableInjectionPoint</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>InjectionPoint</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ImmutableInjectionPoint  /** 
 * &lt;p&gt; A base class for implementing  {@link InjectionPoint}. The attributes are immutable, and collections are defensively copied on instantiation. &lt;/p&gt;
 * @author Stuart Douglas
 * @author Pete Muir
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>annotated</FieldName>
            <FieldType>Annotated</FieldType>
        </Field>
        <Field>
            <FieldName>member</FieldName>
            <FieldType>Member</FieldType>
        </Field>
        <Field>
            <FieldName>declaringBean</FieldName>
            <FieldType>Bean</FieldType>
        </Field>
        <Field>
            <FieldName>declaringBean</FieldName>
            <FieldType>?</FieldType>
        </Field>
        <Field>
            <FieldName>qualifiers</FieldName>
            <FieldType>Set</FieldType>
        </Field>
        <Field>
            <FieldName>qualifiers</FieldName>
            <FieldType>Annotation</FieldType>
        </Field>
        <Field>
            <FieldName>type</FieldName>
            <FieldType>Type</FieldType>
        </Field>
        <Field>
            <FieldName>_transient</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>delegate</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ImmutableInjectionPoint</MethodName>
            <MethodComment>/** 
 * Instantiate a new  {@link InjectionPoint} based upon an{@link AnnotatedField}.
 * @param field         the field for which to create the injection point
 * @param qualifiers    the qualifiers on the injection point
 * @param declaringBean the declaringBean declaring the injection point
 * @param _transient    &lt;code&gt;true&lt;/code&gt; if the injection point is transient
 * @param delegate      &lt;code&gt;true&lt;/code&gt; if the injection point is a delegateinjection point on a decorator
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>field</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>qualifiers</ParamName>
                    <ParamType>Annotation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>declaringBean</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>_transient</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>delegate</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ImmutableInjectionPoint</MethodName>
            <MethodComment>/** 
 * Instantiate a new  {@link InjectionPoint} based upon an{@link AnnotatedField}, reading the qualifiers from the annotations declared on the field.
 * @param field         the field for which to create the injection point
 * @param declaringBean the declaringBean declaring the injection point
 * @param _transient    &lt;code&gt;true&lt;/code&gt; if the injection point is transient
 * @param delegate      &lt;code&gt;true&lt;/code&gt; if the injection point is a delegateinjection point on a decorator
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>field</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>beanManager</ParamName>
                    <ParamType>BeanManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>declaringBean</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>_transient</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>delegate</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ImmutableInjectionPoint</MethodName>
            <MethodComment>/** 
 * Instantiate a new  {@link InjectionPoint} based upon an{@link AnnotatedParameter}.
 * @param parameter     the parameter for which to create the injection point
 * @param qualifiers    the qualifiers on the injection point
 * @param declaringBean the declaringBean declaring the injection point
 * @param _transient    &lt;code&gt;true&lt;/code&gt; if the injection point is transient
 * @param delegate      &lt;code&gt;true&lt;/code&gt; if the injection point is a delegateinjection point on a decorator
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parameter</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>qualifiers</ParamName>
                    <ParamType>Annotation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>declaringBean</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>_transient</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>delegate</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ImmutableInjectionPoint</MethodName>
            <MethodComment>/** 
 * Instantiate a new  {@link InjectionPoint} based upon an{@link AnnotatedParameter}, reading the qualifiers from the annotations declared on the parameter.
 * @param parameter     the parameter for which to create the injection point
 * @param declaringBean the declaringBean declaring the injection point
 * @param _transient    &lt;code&gt;true&lt;/code&gt; if the injection point is transient
 * @param delegate      &lt;code&gt;true&lt;/code&gt; if the injection point is a delegateinjection point on a decorator
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parameter</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>beanManager</ParamName>
                    <ParamType>BeanManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>declaringBean</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>_transient</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>delegate</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAnnotated</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Annotated</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBean</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMember</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Member</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getQualifiers</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Annotation</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getType</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Type</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isDelegate</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isTransient</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>