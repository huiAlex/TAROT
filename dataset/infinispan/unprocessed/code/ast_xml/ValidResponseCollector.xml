<Class>
    <Id>1096</Id>
    <Package>org.infinispan.remoting.transport</Package>
    <ClassName>ValidResponseCollector</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>ResponseCollector</SuperInterface>
        <SuperInterface>T</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ValidResponseCollector  /** 
 * Base class for response collectors, splitting responses into valid responses, exception responses, and target missing. Returning a non- {@code null} value or throwing an exception from any of the{@link #addValidResponse(Address,ValidResponse)},  {@link #addException(Address,Exception)}, or {@link #addTargetNotFound(Address)} methods will complete the request.If all invocations return  {@code null}, the request will be completed with the result of  {@link #finish()}.
 * @author Dan Berindei
 * @since 9.1
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>addResponse</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sender</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>response</ParamName>
                    <ParamType>Response</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>finish</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addValidResponse</MethodName>
            <MethodComment>/** 
 * Process a valid response from a target.
 * @return {@code null} to continue waiting for response, non-{@code null} to complete with that value.
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sender</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>response</ParamName>
                    <ParamType>ValidResponse</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addTargetNotFound</MethodName>
            <MethodComment>/** 
 * Process a target leaving the cluster or stopping the cache.
 * @return {@code null} to continue waiting for response, non-{@code null} to complete with that value.
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sender</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addException</MethodName>
            <MethodComment>/** 
 * Process an exception from a target.
 * @return {@code null} to continue waiting for responses (the default), non-{@code null} to complete with thatvalue.
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sender</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>exception</ParamName>
                    <ParamType>Exception</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>