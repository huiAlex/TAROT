<Class>
    <Id>803</Id>
    <Package>org.infinispan.client.hotrod.impl.protocol</Package>
    <ClassName>Codec10</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Codec</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Codec10  /** 
 * A Hot Rod encoder/decoder for version 1.0 of the protocol.
 * @author Galder Zamarre√±o
 * @since 5.1
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>trace</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>MSG_ID</FieldName>
            <FieldType>AtomicLong</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>writeHeader</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>HeaderParams</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>transport</ParamName>
                    <ParamType>Transport</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>params</ParamName>
                    <ParamType>HeaderParams</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeClientListenerParams</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>transport</ParamName>
                    <ParamType>Transport</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>clientListener</ParamName>
                    <ParamType>ClientListener</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>filterFactoryParams</ParamName>
                    <ParamType>byte[][]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>converterFactoryParams</ParamName>
                    <ParamType>byte[][]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeExpirationParams</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>transport</ParamName>
                    <ParamType>Transport</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lifespan</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lifespanTimeUnit</ParamName>
                    <ParamType>TimeUnit</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>maxIdle</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>maxIdleTimeUnit</ParamName>
                    <ParamType>TimeUnit</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [lifespanSeconds=CodecUtils.toSeconds(lifespan,lifespanTimeUnit)]</InnerVar>
                <InnerVar>int [maxIdleSeconds=CodecUtils.toSeconds(maxIdle,maxIdleTimeUnit)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>transport;writeVInt;[lifespanSeconds]</InnerMethodInvoke>
                <InnerMethodInvoke>transport;writeVInt;[maxIdleSeconds]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeHeader</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>HeaderParams</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>transport</ParamName>
                    <ParamType>Transport</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>params</ParamName>
                    <ParamType>HeaderParams</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>version</ParamName>
                    <ParamType>byte</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [flagInt=params.flags &amp; Flag.FORCE_RETURN_VALUE.getFlagInt()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>transport;writeByte;[HotRodConstants.REQUEST_MAGIC]</InnerMethodInvoke>
                <InnerMethodInvoke>transport;writeVLong;[params.messageId(MSG_ID.incrementAndGet()).messageId]</InnerMethodInvoke>
                <InnerMethodInvoke>transport;writeByte;[version]</InnerMethodInvoke>
                <InnerMethodInvoke>transport;writeByte;[params.opCode]</InnerMethodInvoke>
                <InnerMethodInvoke>transport;writeArray;[params.cacheName]</InnerMethodInvoke>
                <InnerMethodInvoke>transport;writeVInt;[flagInt]</InnerMethodInvoke>
                <InnerMethodInvoke>transport;writeByte;[params.clientIntel]</InnerMethodInvoke>
                <InnerMethodInvoke>transport;writeVInt;[params.topologyId.get()]</InnerMethodInvoke>
                <InnerMethodInvoke>transport;writeByte;[params.txMarker]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readHeader</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>short</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>transport</ParamName>
                    <ParamType>Transport</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>params</ParamName>
                    <ParamType>HeaderParams</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>short [magic=transport.readByte()]</InnerVar>
                <InnerVar>Log [localLog=getLog()]</InnerVar>
                <InnerVar>long [receivedMessageId=transport.readVLong()]</InnerVar>
                <InnerVar>short [receivedOpCode=transport.readByte()]</InnerVar>
                <InnerVar>short [status=transport.readByte()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;readNewTopologyIfPresent;[transport, params]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readEvent</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClientEvent</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>transport</ParamName>
                    <ParamType>Transport</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>expectedListenerId</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>marshaller</ParamName>
                    <ParamType>Marshaller</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>whitelist</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readHeaderOrEvent</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Short</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>transport</ParamName>
                    <ParamType>Transport</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>params</ParamName>
                    <ParamType>HeaderParams</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>expectedListenerId</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>marshaller</ParamName>
                    <ParamType>Marshaller</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>whitelist</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>returnPossiblePrevValue</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>transport</ParamName>
                    <ParamType>Transport</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>status</ParamName>
                    <ParamType>short</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>flags</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>whitelist</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Marshaller [marshaller=transport.getTransportFactory().getMarshaller()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasForceReturn</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>flags</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLog</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Log</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readUnmarshallByteArray</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>transport</ParamName>
                    <ParamType>Transport</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>status</ParamName>
                    <ParamType>short</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>whitelist</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readAsStream</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>transport</ParamName>
                    <ParamType>Transport</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>versionedMetadata</ParamName>
                    <ParamType>VersionedMetadata</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>afterClose</ParamName>
                    <ParamType>Runnable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeAsStream</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>OutputStream</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>transport</ParamName>
                    <ParamType>Transport</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>afterClose</ParamName>
                    <ParamType>Runnable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeClientListenerInterests</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>transport</ParamName>
                    <ParamType>Transport</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classes</ParamName>
                    <ParamType>Class&lt;? extends Annotation&gt;</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkForErrorsInResponseStatus</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>transport</ParamName>
                    <ParamType>Transport</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>params</ParamName>
                    <ParamType>HeaderParams</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>status</ParamName>
                    <ParamType>short</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Log [localLog=getLog()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readNewTopologyIfPresent</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>transport</ParamName>
                    <ParamType>Transport</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>params</ParamName>
                    <ParamType>HeaderParams</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>short [topologyChangeByte=transport.readByte()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readNewTopologyAndHash</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>transport</ParamName>
                    <ParamType>Transport</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>topologyId</ParamName>
                    <ParamType>AtomicInteger</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cacheName</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Log [localLog=getLog()]</InnerVar>
                <InnerVar>int [newTopologyId=transport.readVInt()]</InnerVar>
                <InnerVar>int [numKeyOwners=transport.readUnsignedShort()]</InnerVar>
                <InnerVar>short [hashFunctionVersion=transport.readByte()]</InnerVar>
                <InnerVar>int [hashSpace=transport.readVInt()]</InnerVar>
                <InnerVar>int [clusterSize=transport.readVInt()]</InnerVar>
                <InnerVar>Map&lt;SocketAddress,Set&lt;Integer&gt;&gt; [servers2Hash=computeNewHashes(transport,localLog,newTopologyId,numKeyOwners,hashFunctionVersion,hashSpace,clusterSize)]</InnerVar>
                <InnerVar>Set&lt;SocketAddress&gt; [socketAddresses=servers2Hash.keySet()]</InnerVar>
                <InnerVar>int [topologyAge=transport.getTransportFactory().getTopologyAge()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>topologyId;set;[newTopologyId]</InnerMethodInvoke>
                <InnerMethodInvoke>transport.getTransportFactory();updateServers;[socketAddresses, cacheName, false]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>computeNewHashes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>SocketAddress</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>transport</ParamName>
                    <ParamType>Transport</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>localLog</ParamName>
                    <ParamType>Log</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>newTopologyId</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>numKeyOwners</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>hashFunctionVersion</ParamName>
                    <ParamType>short</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>hashSpace</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>clusterSize</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Map&lt;SocketAddress,Set&lt;Integer&gt;&gt; [servers2Hash=new LinkedHashMap&lt;SocketAddress,Set&lt;Integer&gt;&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>