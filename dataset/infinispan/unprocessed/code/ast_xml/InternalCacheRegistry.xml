<Class>
    <Id>3787</Id>
    <Package>org.infinispan.registry</Package>
    <ClassName>InternalCacheRegistry</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>InternalCacheRegistry  /** 
 * InternalCacheRegistry. Components which create caches for internal use should use this class to create/retrieve them
 * @author Tristan Tarrant
 * @since 7.2
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>registerInternalCache</MethodName>
            <MethodComment>/** 
 * Registers an internal cache. The cache will be marked as private and volatile
 * @param name The name of the cache
 * @param configuration The configuration for the cache
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>configuration</ParamName>
                    <ParamType>Configuration</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>registerInternalCache</MethodName>
            <MethodComment>/** 
 * Registers an internal cache with the specified flags.
 * @param name The name of the cache
 * @param configuration The configuration for the cache
 * @param flags The flags which determine the behaviour of the cache. See  {@link Flag}
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>configuration</ParamName>
                    <ParamType>Configuration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>flags</ParamName>
                    <ParamType>Flag</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>unregisterInternalCache</MethodName>
            <MethodComment>/** 
 * Unregisters  an internal cache
 * @param name The name of the cache
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isInternalCache</MethodName>
            <MethodComment>/** 
 * Returns whether the cache is internal, i.e. it has been registered using the {@link #registerInternalCache(String,Configuration)} method
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isPrivateCache</MethodName>
            <MethodComment>/** 
 * Returns whether the cache is private, i.e. it has been registered using the {@link #registerInternalCache(String, Configuration, EnumSet&lt;Flag&gt;)} method without the{@link Flag#USER} flag
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getInternalCacheNames</MethodName>
            <MethodComment>/** 
 * Retrieves the names of all the internal caches
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>filterPrivateCaches</MethodName>
            <MethodComment>/** 
 * Removes the private caches from the specified set of cache names
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>names</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>internalCacheHasFlag</MethodName>
            <MethodComment>/** 
 * Returns whether a particular internal cache has a specific flag
 * @param name the name of the internal cache
 * @param flag the flag to check
 * @return true if the internal cache has the flag, false otherwise
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>flag</ParamName>
                    <ParamType>Flag</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>