<Class>
    <Id>464</Id>
    <Package>org.infinispan.spring.session</Package>
    <ClassName>InfinispanApplicationPublishedBridgeTCK</ClassName>
    <SuperClass>AbstractInfinispanTest</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>springCache</FieldName>
            <FieldType>SpringCache</FieldType>
        </Field>
        <Field>
            <FieldName>sessionRepository</FieldName>
            <FieldType>AbstractInfinispanSessionRepository</FieldType>
        </Field>
        <Field>
            <FieldName>events</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>events</FieldName>
            <FieldType>ApplicationEvent</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>createSpringCache</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>SpringCache</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>callEviction</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createRepository</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>AbstractInfinispanSessionRepository</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>springCache</ParamName>
                    <ParamType>SpringCache</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>init</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testEventBridge</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>EventsCollector [eventsCollector=new EventsCollector()]</InnerVar>
                <InnerVar>MapSession [sessionToBeDeleted=sessionRepository.createSession()]</InnerVar>
                <InnerVar>MapSession [sessionToBeExpired=sessionRepository.createSession()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>sessionRepository;setApplicationEventPublisher;[eventsCollector]</InnerMethodInvoke>
                <InnerMethodInvoke>sessionToBeExpired;setMaxInactiveIntervalInSeconds;[1]</InnerMethodInvoke>
                <InnerMethodInvoke>sessionRepository;save;[sessionToBeExpired]</InnerMethodInvoke>
                <InnerMethodInvoke>sessionRepository;save;[sessionToBeDeleted]</InnerMethodInvoke>
                <InnerMethodInvoke>sessionRepository;delete;[sessionToBeDeleted.getId()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;sleepOneSecond;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;callEviction;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNull;[springCache.get(sessionToBeExpired.getId())]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNull;[springCache.get(sessionToBeDeleted.getId())]</InnerMethodInvoke>
                <InnerMethodInvoke>EventsWaiter;assertNumberOfEvents;[() -&gt; eventsCollector.getEvents(), SessionCreatedEvent.class, 2, 2, TimeUnit.SECONDS]</InnerMethodInvoke>
                <InnerMethodInvoke>EventsWaiter;assertNumberOfEvents;[() -&gt; eventsCollector.getEvents(), SessionDeletedEvent.class, 1, 2, TimeUnit.SECONDS]</InnerMethodInvoke>
                <InnerMethodInvoke>EventsWaiter;assertNumberOfEvents;[() -&gt; eventsCollector.getEvents(), SessionExpiredEvent.class, 1, 2, TimeUnit.SECONDS]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sleepOneSecond</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>long [oneSecondSleep=System.currentTimeMillis() + 1000]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;eventually;[() -&gt; System.currentTimeMillis() &gt; oneSecondSleep]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testUnregistration</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>EventsCollector [eventsCollector=new EventsCollector()]</InnerVar>
                <InnerVar>MapSession [sessionToBeExpired=sessionRepository.createSession()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>sessionRepository;setApplicationEventPublisher;[eventsCollector]</InnerMethodInvoke>
                <InnerMethodInvoke>sessionRepository;destroy;[]</InnerMethodInvoke>
                <InnerMethodInvoke>sessionRepository;save;[sessionToBeExpired]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[eventsCollector.getEvents().count(), 0]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>publishEvent</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>event</ParamName>
                    <ParamType>ApplicationEvent</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>events;add;[event]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>publishEvent</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>event</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;publishEvent;[new PayloadApplicationEvent&lt;&gt;(this,event)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEvents</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ApplicationEvent</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>