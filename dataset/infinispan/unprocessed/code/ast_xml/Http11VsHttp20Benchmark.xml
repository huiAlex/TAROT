<Class>
    <Id>1673</Id>
    <Package>org.infinispan.rest.profiling</Package>
    <ClassName>Http11VsHttp20Benchmark</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Http11VsHttp20Benchmark  /** 
 * This benchmark checks how faster is HTTP/2 compared to HTTP/1.1
 * @author Sebastian ≈Åaskawiec
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>MEASUREMENT_ITERATIONS_COUNT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>WARMUP_ITERATIONS_COUNT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEY_STORE_PATH</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>TRUST_STORE_PATH</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>EXISTING_KEY</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>NON_EXISTING_KEY</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>httpClientThreads</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>useTLS</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>useHttp2</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>restServer</FieldName>
            <FieldType>RestServerHelper</FieldType>
        </Field>
        <Field>
            <FieldName>client</FieldName>
            <FieldType>BenchmarkHttpClient</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>performHttp11VsHttp20Test</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Options [opt=new OptionsBuilder().include(this.getClass().getName() + ".*").mode(Mode.AverageTime).timeUnit(TimeUnit.MILLISECONDS).warmupIterations(WARMUP_ITERATIONS_COUNT).measurementIterations(MEASUREMENT_ITERATIONS_COUNT).threads(1).forks(1).shouldFailOnError(true).shouldDoGC(true).build()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>new Runner(opt);run;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setup</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>InternalLoggerFactory;setDefaultFactory;[JdkLoggerFactory.INSTANCE]</InnerMethodInvoke>
                <InnerMethodInvoke>System;setProperty;["infinispan.server.channel.epoll", "false"]</InnerMethodInvoke>
                <InnerMethodInvoke>restServer;start;[]</InnerMethodInvoke>
                <InnerMethodInvoke>restServer.getCacheManager().getCache();put;[EXISTING_KEY, "test"]</InnerMethodInvoke>
                <InnerMethodInvoke>client;start;[restServer.getHost(), restServer.getPort(), httpClientThreads, useHttp2]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>tearDown</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>restServer;stop;[]</InnerMethodInvoke>
                <InnerMethodInvoke>client;stop;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>measure_put</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>client;performPuts;[100]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>measure_get</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>client;performGets;[0, 100, EXISTING_KEY, NON_EXISTING_KEY]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>