<Class>
    <Id>1877</Id>
    <Package>org.infinispan.globalstate.impl</Package>
    <ClassName>GlobalStateManagerImpl</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>GlobalStateManager</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>GlobalStateManagerImpl  /** 
 * GlobalStateManagerImpl. This global component manages persistent state across restarts. The information is stored in a Properties file. On a graceful shutdown it persists the following information: version = full version (e.g. major.minor.micro.qualifier) timestamp = timestamp using ISO-8601 as well as any additional information contributed by registered  {@link GlobalStateProvider}s
 * @author Tristan Tarrant
 * @since 8.1
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>VERSION</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>TIMESTAMP</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>VERSION_MAJOR</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>globalConfiguration</FieldName>
            <FieldType>GlobalConfiguration</FieldType>
        </Field>
        <Field>
            <FieldName>stateProviders</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>stateProviders</FieldName>
            <FieldType>GlobalStateProvider</FieldType>
        </Field>
        <Field>
            <FieldName>timeService</FieldName>
            <FieldType>TimeService</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>inject</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>globalConfiguration</ParamName>
                    <ParamType>GlobalConfiguration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>timeService</ParamName>
                    <ParamType>TimeService</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cacheManager</ParamName>
                    <ParamType>EmbeddedCacheManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>start</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>File [stateFile=getStateFile(GLOBAL_SCOPE)]</InnerVar>
                <InnerVar>Optional&lt;ScopedPersistentState&gt; [globalState=readScopedState(GLOBAL_SCOPE)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>stop</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;writeGlobalState;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeGlobalState</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>ScopedPersistentState [state=new ScopedPersistentStateImpl(GLOBAL_SCOPE)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>state;setProperty;[VERSION, Version.getVersion()]</InnerMethodInvoke>
                <InnerMethodInvoke>state;setProperty;[VERSION_MAJOR, Version.getMajor()]</InnerMethodInvoke>
                <InnerMethodInvoke>state;setProperty;[TIMESTAMP, timeService.instant().toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>stateProviders;forEach;[provider -&gt; provider.prepareForPersist(state)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;writeScopedState;[state]</InnerMethodInvoke>
                <InnerMethodInvoke>log;globalStateWrite;[state.getProperty(VERSION), state.getProperty(TIMESTAMP)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeScopedState</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>state</ParamName>
                    <ParamType>ScopedPersistentState</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>File [stateFile=getStateFile(state.getScope())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readScopedState</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ScopedPersistentState</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>scope</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>File [stateFile=getStateFile(scope)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStateFile</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>File</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>scope</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>registerStateProvider</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>provider</ParamName>
                    <ParamType>GlobalStateProvider</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.stateProviders;add;[provider]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>