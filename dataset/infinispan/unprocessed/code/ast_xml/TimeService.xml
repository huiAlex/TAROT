<Class>
    <Id>2696</Id>
    <Package>org.infinispan.util</Package>
    <ClassName>TimeService</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>TimeService  /** 
 * Encapsulates all the time related logic in this interface.
 * @author Pedro Ruivo
 * @since 5.3
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>wallClockTime</MethodName>
            <MethodComment>/** 
 * @return the current clock time in milliseconds. Note that it depends of the system time.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>time</MethodName>
            <MethodComment>/** 
 * @return the current cpu time in nanoseconds. Note that some platforms do not provide nanosecond precision.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>instant</MethodName>
            <MethodComment>/** 
 * @return the current {@link Instant}. Similarly to  {@link #time()}, note that some platforms do not provide nanosecond precision.
 */
</MethodComment>
            <ReturnType>Instant</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>timeDuration</MethodName>
            <MethodComment>/** 
 * It is equivalent to  {@code timeDuration(startTime, time(), outputTimeUnit)}.
 * @param startTime      start cpu time in nanoseconds, usually returned by {@link #time()}.
 * @param outputTimeUnit the {@link TimeUnit} of the returned value.
 * @return the duration between the current cpu time and startTime. It returns zero if startTime is less than zero orif startTime is greater than the current cpu time.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>startTime</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>outputTimeUnit</ParamName>
                    <ParamType>TimeUnit</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>timeDuration</MethodName>
            <MethodComment>/** 
 * @param startTime      start cpu time in nanoseconds, usually returned by {@link #time()}.
 * @param endTime        end cpu time in nanoseconds, usually returned by {@link #time()}.
 * @param outputTimeUnit the {@link TimeUnit} of the returned value.
 * @return the duration between the endTime and startTime. It returns zero if startTime or endTime are less than zeroor if startTime is greater than the endTime.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>startTime</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>endTime</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>outputTimeUnit</ParamName>
                    <ParamType>TimeUnit</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isTimeExpired</MethodName>
            <MethodComment>/** 
 * @param endTime a cpu time in nanoseconds, usually returned by {@link #time()}
 * @return {@code true} if the endTime is less or equals than the current cpu time.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>endTime</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>remainingTime</MethodName>
            <MethodComment>/** 
 * @param endTime        the end cpu time in nanoseconds.
 * @param outputTimeUnit the {@link TimeUnit} of the returned value.
 * @return the remaining cpu time until the endTime is reached.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>endTime</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>outputTimeUnit</ParamName>
                    <ParamType>TimeUnit</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>expectedEndTime</MethodName>
            <MethodComment>/** 
 * @param duration      the duration.
 * @param inputTimeUnit the {@link TimeUnit} of the duration.
 * @return the expected end time in nano seconds. If duration is less or equals to zero, the current cpu time is returned ({@link #time()}).
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>duration</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>inputTimeUnit</ParamName>
                    <ParamType>TimeUnit</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>