<Class>
    <Id>2376</Id>
    <Package>org.infinispan.context.impl</Package>
    <ClassName>TxInvocationContext</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>InvocationContext</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>TxInvocationContext  /** 
 * Interface defining additional functionality for invocation contexts that propagate within a transaction's scope.
 * @author Mircea.Markus@jboss.com
 * @since 4.0
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>hasModifications</MethodName>
            <MethodComment>/** 
 * Checks if there are modifications performed within the tx's scope. Any modifications having Flag.CACHE_MODE_LOCAL are ignored.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAffectedKeys</MethodName>
            <MethodComment>/** 
 * Returns the set of keys that are affected by this transaction.  Used to generate appropriate recipient groups for cluster-wide prepare and commit calls.
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getGlobalTransaction</MethodName>
            <MethodComment>/** 
 * Returns the id of the transaction associated  with the current call.
 */
</MethodComment>
            <ReturnType>GlobalTransaction</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getModifications</MethodName>
            <MethodComment>/** 
 * Returns the modifications performed in the scope of the current transaction. Any modifications having Flag.CACHE_MODE_LOCAL are ignored. The returned list can be null.
 */
</MethodComment>
            <ReturnType>WriteCommand</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTransaction</MethodName>
            <MethodComment>/** 
 * Returns the tx associated with the current thread. This method MUST be guarded with a call to  {@link #isOriginLocal()}, as  {@link javax.transaction.Transaction} are not propagated from the node where tx wasstarted.
 * @throws IllegalStateException if the call is performed from a {@link #isOriginLocal()}==false context.
 */
</MethodComment>
            <ReturnType>Transaction</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addAllAffectedKeys</MethodName>
            <MethodComment>/** 
 * Registers a new participant with the transaction.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>keys</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addAffectedKey</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isTransactionValid</MethodName>
            <MethodComment>/** 
 * @return true if the current transaction is in a valid state to perform operations on (i.e.,RUNNING or PREPARING)or false otherwise.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isImplicitTransaction</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCacheTransaction</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>