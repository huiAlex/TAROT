<Class>
    <Id>124</Id>
    <Package>org.infinispan.configuration.parsing</Package>
    <ClassName>ParseUtils</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ParseUtils  /** 
 * @author &lt;a href="mailto:david.lloyd@redhat.com"&gt;David M. Lloyd&lt;/a&gt;
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>ParseUtils</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nextElement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Element</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>reader</ParamName>
                    <ParamType>XMLStreamReader</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>XMLStreamException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>unexpectedElement</MethodName>
            <MethodComment>/** 
 * Get an exception reporting an unexpected XML element.
 * @param reader the stream reader
 * @return the exception
 */
</MethodComment>
            <ReturnType>XMLStreamException</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>reader</ParamName>
                    <ParamType>XMLStreamReader</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>unexpectedEndElement</MethodName>
            <MethodComment>/** 
 * Get an exception reporting an unexpected end tag for an XML element.
 * @param reader the stream reader
 * @return the exception
 */
</MethodComment>
            <ReturnType>XMLStreamException</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>reader</ParamName>
                    <ParamType>XMLStreamReader</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>unexpectedAttribute</MethodName>
            <MethodComment>/** 
 * Get an exception reporting an unexpected XML attribute.
 * @param reader the stream reader
 * @param index the attribute index
 * @return the exception
 */
</MethodComment>
            <ReturnType>XMLStreamException</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>reader</ParamName>
                    <ParamType>XMLStreamReader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>index</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>unexpectedAttribute</MethodName>
            <MethodComment>/** 
 * Get an exception reporting an unexpected XML attribute.
 * @param reader the stream reader
 * @param name the attribute name
 * @return the exception
 */
</MethodComment>
            <ReturnType>XMLStreamException</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>reader</ParamName>
                    <ParamType>XMLStreamReader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>invalidAttributeValue</MethodName>
            <MethodComment>/** 
 * Get an exception reporting an invalid XML attribute value.
 * @param reader the stream reader
 * @param index the attribute index
 * @return the exception
 */
</MethodComment>
            <ReturnType>XMLStreamException</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>reader</ParamName>
                    <ParamType>XMLStreamReader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>index</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>missingRequired</MethodName>
            <MethodComment>/** 
 * Get an exception reporting a missing, required XML attribute.
 * @param reader the stream reader
 * @param required a set of enums whose toString method returns theattribute name
 * @return the exception
 */
</MethodComment>
            <ReturnType>XMLStreamException</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>reader</ParamName>
                    <ParamType>XMLStreamReader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>required</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuilder [b=new StringBuilder()]</InnerVar>
                <InnerVar>Iterator&lt;?&gt; [iterator=required.iterator()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>missingRequiredElement</MethodName>
            <MethodComment>/** 
 * Get an exception reporting a missing, required XML child element.
 * @param reader the stream reader
 * @param required a set of enums whose toString method returns theattribute name
 * @return the exception
 */
</MethodComment>
            <ReturnType>XMLStreamException</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>reader</ParamName>
                    <ParamType>XMLStreamReader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>required</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuilder [b=new StringBuilder()]</InnerVar>
                <InnerVar>Iterator&lt;?&gt; [iterator=required.iterator()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>requireNoAttributes</MethodName>
            <MethodComment>/** 
 * Checks that the current element has no attributes, throwing an {@link javax.xml.stream.XMLStreamException} if one is found.
 * @param reader the reader
 * @throws javax.xml.stream.XMLStreamException if an error occurs
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>reader</ParamName>
                    <ParamType>XMLStreamReader</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>XMLStreamException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>requireNoContent</MethodName>
            <MethodComment>/** 
 * Consumes the remainder of the current element, throwing an {@link javax.xml.stream.XMLStreamException} if it contains any childelements.
 * @param reader the reader
 * @throws javax.xml.stream.XMLStreamException if an error occurs
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>reader</ParamName>
                    <ParamType>XMLStreamReader</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>XMLStreamException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>duplicateAttribute</MethodName>
            <MethodComment>/** 
 * Get an exception reporting that an attribute of a given name has already been declared in this scope.
 * @param reader the stream reader
 * @param name the name that was redeclared
 * @return the exception
 */
</MethodComment>
            <ReturnType>XMLStreamException</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>reader</ParamName>
                    <ParamType>XMLStreamReader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>duplicateNamedElement</MethodName>
            <MethodComment>/** 
 * Get an exception reporting that an element of a given type and name has already been declared in this scope.
 * @param reader the stream reader
 * @param name the name that was redeclared
 * @return the exception
 */
</MethodComment>
            <ReturnType>XMLStreamException</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>reader</ParamName>
                    <ParamType>XMLStreamReader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readBooleanAttributeElement</MethodName>
            <MethodComment>/** 
 * Read an element which contains only a single boolean attribute.
 * @param reader the reader
 * @param attributeName the attribute name, usually "value"
 * @return the boolean value
 * @throws javax.xml.stream.XMLStreamException if an error occurs or if theelement does not contain the specified attribute, contains other attributes, or contains child elements.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>reader</ParamName>
                    <ParamType>XMLStreamReader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>attributeName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [value=Boolean.parseBoolean(reader.getAttributeValue(0))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;requireSingleAttribute;[reader, attributeName]</InnerMethodInvoke>
                <InnerMethodInvoke>null;requireNoContent;[reader]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>XMLStreamException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readStringAttributeElement</MethodName>
            <MethodComment>/** 
 * Read an element which contains only a single string attribute.
 * @param reader the reader
 * @param attributeName the attribute name, usually "value" or "name"
 * @return the string value
 * @throws javax.xml.stream.XMLStreamException if an error occurs or if theelement does not contain the specified attribute, contains other attributes, or contains child elements.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>reader</ParamName>
                    <ParamType>XMLStreamReader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>attributeName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [value=reader.getAttributeValue(0)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;requireSingleAttribute;[reader, attributeName]</InnerMethodInvoke>
                <InnerMethodInvoke>null;requireNoContent;[reader]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>XMLStreamException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>requireSingleAttribute</MethodName>
            <MethodComment>/** 
 * Require that the current element have only a single attribute with the given name.
 * @param reader the reader
 * @param attributeName the attribute name
 * @throws javax.xml.stream.XMLStreamException if an error occurs
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>reader</ParamName>
                    <ParamType>XMLStreamReader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>attributeName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [count=reader.getAttributeCount()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;requireNoNamespaceAttribute;[reader, 0]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>XMLStreamException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>requireAttributes</MethodName>
            <MethodComment>/** 
 * Require all the named attributes, returning their values in order.
 * @param reader the reader
 * @param attributeNames the attribute names
 * @return the attribute values in order
 * @throws javax.xml.stream.XMLStreamException if an error occurs
 */
</MethodComment>
            <ReturnType>String[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>reader</ParamName>
                    <ParamType>XMLStreamReader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>replace</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>attributeNames</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [length=attributeNames.length]</InnerVar>
                <InnerVar>String[] [result=new String[length]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>XMLStreamException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>requireAttributes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>reader</ParamName>
                    <ParamType>XMLStreamReader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>attributeNames</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>XMLStreamException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isNoNamespaceAttribute</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>reader</ParamName>
                    <ParamType>XMLStreamReader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>index</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [namespace=reader.getAttributeNamespace(index)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>requireNoNamespaceAttribute</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>reader</ParamName>
                    <ParamType>XMLStreamReader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>index</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>XMLStreamException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getWarningMessage</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>msg</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>location</ParamName>
                    <ParamType>Location</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNamespaceAnnotations</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Namespace[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cls</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Namespaces [namespacesAnnotation=cls.getAnnotation(Namespaces.class)]</InnerVar>
                <InnerVar>Namespace [namespaceAnnotation=cls.getAnnotation(Namespace.class)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getListAttributeValue</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>