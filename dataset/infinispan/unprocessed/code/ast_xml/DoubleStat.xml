<Class>
    <Id>73</Id>
    <Package>org.infinispan.objectfilter.impl.aggregation</Package>
    <ClassName>DoubleStat</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>DoubleStat  /** 
 * Computes the sum and average of doubles. The implementation uses compensated summation in order to reduce the error bound in the numerical sum compared to a simple summation of  {@code double} values, similar to the way {@link java.util.DoubleSummaryStatistics} works.
 * @author anistor@redhat.com
 * @since 8.1
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>count</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>sum</FieldName>
            <FieldType>double</FieldType>
        </Field>
        <Field>
            <FieldName>sumCompensation</FieldName>
            <FieldType>double</FieldType>
        </Field>
        <Field>
            <FieldName>simpleSum</FieldName>
            <FieldType>double</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>update</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>double</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;update;[value, 1]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>update</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>double</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>count</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>double [tmp=value - sumCompensation]</InnerVar>
                <InnerVar>double [velvel=sum + tmp]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSum</MethodName>
            <MethodComment>/** 
 * Returns the sum of seen values. If any value is a NaN or the sum is at any point a NaN then the average will be NaN. The average returned can vary depending upon the order in which values are seen.
 * @return the sum of values
 */
</MethodComment>
            <ReturnType>Double</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>double [tmp=sum + sumCompensation]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAvg</MethodName>
            <MethodComment>/** 
 * Returns the arithmetic mean of seen values, or null if no values have been seen. If any value is a NaN or the sum is at any point a NaN then the average will be NaN. The average returned can vary depending upon the order in which values are seen.
 * @return the arithmetic mean of values, or null if none
 */
</MethodComment>
            <ReturnType>Double</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCount</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>