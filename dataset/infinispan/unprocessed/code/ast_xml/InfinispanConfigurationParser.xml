<Class>
    <Id>574</Id>
    <Package>org.infinispan.hibernate.search.impl</Package>
    <ClassName>InfinispanConfigurationParser</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>InfinispanConfigurationParser  /** 
 * The Infinispan configuration is ClassLoader sensitive, this wrapper around the standard Parser is used to allow it to find resources in a modular classloading environment.
 * @author Sanne Grinovero
 * @since 4.3
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>configurationParser</FieldName>
            <FieldType>ParserRegistry</FieldType>
        </Field>
        <Field>
            <FieldName>ispnClassLoadr</FieldName>
            <FieldType>ClassLoader</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>InfinispanConfigurationParser</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseFile</MethodName>
            <MethodComment>/** 
 * Resolves an Infinispan configuration file but using the Hibernate Search classloader. The returned Infinispan configuration template also overrides Infinispan's runtime classloader to the one of Hibernate Search.
 * @param filename                  Infinispan configuration resource name
 * @param transportOverrideResource An alternative JGroups configuration file to be injected
 * @param serviceManager            the ServiceManager to load resources
 * @return
 * @throws IOException
 */
</MethodComment>
            <ReturnType>ConfigurationBuilderHolder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>filename</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>transportOverrideResource</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>serviceManager</ParamName>
                    <ParamType>ServiceManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassLoaderService [classLoaderService=serviceManager.requestService(ClassLoaderService.class)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseFile</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ConfigurationBuilderHolder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classLoaderService</ParamName>
                    <ParamType>ClassLoaderService</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>filename</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>transportOverrideResource</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>InputStream [is=classLoaderService.locateResourceStream(filename)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fixClassLoaders</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>builderHolder</ParamName>
                    <ParamType>ConfigurationBuilderHolder</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>builderHolder.getGlobalConfigurationBuilder();classLoader;[ispnClassLoadr]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>patchTransportConfiguration</MethodName>
            <MethodComment>/** 
 * After having parsed the Infinispan configuration file, we might want to override the specified JGroups configuration file.
 * @param builderHolder
 * @param transportOverrideResource The alternative JGroups configuration file to be used, or null
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>builderHolder</ParamName>
                    <ParamType>ConfigurationBuilderHolder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>transportOverrideResource</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>