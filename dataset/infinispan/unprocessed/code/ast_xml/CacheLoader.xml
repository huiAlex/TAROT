<Class>
    <Id>2399</Id>
    <Package>org.infinispan.persistence.spi</Package>
    <ClassName>CacheLoader</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Lifecycle</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>CacheLoader  /** 
 * Defines the logic for loading data from an external storage. The writing of data is optional and coordinated through a  {@link CacheWriter}.
 * @author Mircea Markus
 * @since 6.0
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>init</MethodName>
            <MethodComment>/** 
 * Used to initialize a cache loader.  Typically invoked by the  {@link org.infinispan.persistence.manager.PersistenceManager}when setting up cache loaders.
 * @throws PersistenceException in case of an error, e.g. communicating with the external storage
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>InitializationContext</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>load</MethodName>
            <MethodComment>/** 
 * Fetches an entry from the storage. If a  {@link MarshalledEntry} needs to be created here, {@link org.infinispan.persistence.spi.InitializationContext#getMarshalledEntryFactory()} and {@link InitializationContext#getByteBufferFactory()} should be used.
 * @return the entry, or null if the entry does not exist
 * @throws PersistenceException in case of an error, e.g. communicating with the external storage
 */
</MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>contains</MethodName>
            <MethodComment>/** 
 * Returns true if the storage contains an entry associated with the given key.
 * @throws PersistenceException in case of an error, e.g. communicating with the external storage
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>