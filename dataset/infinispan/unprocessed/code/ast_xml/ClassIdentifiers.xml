<Class>
    <Id>1328</Id>
    <Package>org.infinispan.marshall.core</Package>
    <ClassName>ClassIdentifiers</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>ClassIds</SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>classToId</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>classToId</FieldName>
            <FieldType>Class&lt;?&gt;</FieldType>
        </Field>
        <Field>
            <FieldName>internalIdToClass</FieldName>
            <FieldType>Class&lt;?&gt;[]</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>load</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClassIdentifiers</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>globalConfiguration</ParamName>
                    <ParamType>GlobalConfiguration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ClassIdentifiers</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;add;[Object.class, OBJECT]</InnerMethodInvoke>
                <InnerMethodInvoke>null;add;[String.class, STRING]</InnerMethodInvoke>
                <InnerMethodInvoke>null;add;[List.class, LIST]</InnerMethodInvoke>
                <InnerMethodInvoke>null;add;[Map.Entry.class, MAP_ENTRY]</InnerMethodInvoke>
                <InnerMethodInvoke>null;add;[InternalCacheValue.class, INTERNAL_CACHE_VALUE]</InnerMethodInvoke>
                <InnerMethodInvoke>classToId.entrySet().stream();forEach;[e -&gt; internalIdToClass[e.getValue().intValue()]=e.getKey()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>add</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>id</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Integer [prev=classToId.put(clazz,id)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getClass</MethodName>
            <MethodComment>/** 
 * This method throws IOException because it is assumed that we got the id from network.
 * @param id
 * @return
 * @throws IOException
 */
</MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>id</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Class&lt;?&gt; [clazz=internalIdToClass[id]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getId</MethodName>
            <MethodComment>/** 
 * @param clazz
 * @return -1 if the id for given class is not found
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Integer [id=classToId.get(clazz)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>