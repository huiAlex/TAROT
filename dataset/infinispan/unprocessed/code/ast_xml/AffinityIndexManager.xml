<Class>
    <Id>1509</Id>
    <Package>org.infinispan.query.affinity</Package>
    <ClassName>AffinityIndexManager</ClassName>
    <SuperClass>DirectoryBasedIndexManager</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>AffinityIndexManager  /** 
 * {@link org.hibernate.search.indexes.spi.IndexManager} that splits the index into shards.
 * @author gustavonalle
 * @since 8.2
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>POLL_WAIT</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>keyTransformationHandler</FieldName>
            <FieldType>KeyTransformationHandler</FieldType>
        </Field>
        <Field>
            <FieldName>cache</FieldName>
            <FieldType>Cache</FieldType>
        </Field>
        <Field>
            <FieldName>cache</FieldName>
            <FieldType>?</FieldType>
        </Field>
        <Field>
            <FieldName>flushLock</FieldName>
            <FieldType>ReadWriteLock</FieldType>
        </Field>
        <Field>
            <FieldName>writeLock</FieldName>
            <FieldType>Lock</FieldType>
        </Field>
        <Field>
            <FieldName>readLock</FieldName>
            <FieldType>Lock</FieldType>
        </Field>
        <Field>
            <FieldName>shardAllocatorManager</FieldName>
            <FieldType>ShardAllocatorManager</FieldType>
        </Field>
        <Field>
            <FieldName>transactionHelper</FieldName>
            <FieldType>TransactionHelper</FieldType>
        </Field>
        <Field>
            <FieldName>searchIntegrator</FieldName>
            <FieldType>SearchIntegrator</FieldType>
        </Field>
        <Field>
            <FieldName>shardId</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>isAsync</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>localShardAddress</FieldName>
            <FieldType>ShardAddress</FieldType>
        </Field>
        <Field>
            <FieldName>luceneWorkDispatcher</FieldName>
            <FieldType>LuceneWorkDispatcher</FieldType>
        </Field>
        <Field>
            <FieldName>workPartitioner</FieldName>
            <FieldType>WorkPartitioner</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>initialize</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>indexName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>properties</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>similarity</ParamName>
                    <ParamType>Similarity</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>buildContext</ParamName>
                    <ParamType>WorkerBuildContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ServiceManager [serviceManager=buildContext.getServiceManager()]</InnerVar>
                <InnerVar>ComponentRegistryService [componentRegistryService=serviceManager.requestService(ComponentRegistryService.class)]</InnerVar>
                <InnerVar>ComponentRegistry [componentRegistry=componentRegistryService.getComponentRegistry()]</InnerVar>
                <InnerVar>Transaction [tx=transactionHelper.suspendTxIfExists()]</InnerVar>
                <InnerVar>RpcManager [rpcManager=componentRegistry.getComponent(RpcManager.class)]</InnerVar>
                <InnerVar>ExecutorService [asyncExecutor=componentRegistry.getComponent(ExecutorService.class,ASYNC_OPERATIONS_EXECUTOR)]</InnerVar>
                <InnerVar>AffinityErrorHandler [errorHandler=(AffinityErrorHandler)searchIntegrator.getErrorHandler()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>errorHandler;initialize;[rpcManager, asyncExecutor]</InnerMethodInvoke>
                <InnerMethodInvoke>cache;addListener;[this]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>handleOwnershipLost</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>writeLock;lock;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>flushAndReleaseResources</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>InfinispanDirectoryProvider [directoryProvider=(InfinispanDirectoryProvider)this.getDirectoryProvider()]</InnerVar>
                <InnerVar>int [activeDeleteTasks=directoryProvider.pendingDeleteTasks()]</InnerVar>
                <InnerVar>boolean [wasInterrupted=false]</InnerVar>
                <InnerVar>long [endTime=System.nanoTime() + TimeUnit.MILLISECONDS.toNanos(POLL_WAIT)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>log;debugf;["Flushing directory provider at %s on %s", this.getIndexName(), localShardAddress]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>stringToKey</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLockHolder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Address</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>indexName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>affinityId</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Transaction [tx=transactionHelper.suspendTxIfExists()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>log;debugf;["Getting lock holder for %s", indexName]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLockHolder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Address</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>performOperations</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>workList</ParamName>
                    <ParamType>LuceneWork</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>monitor</ParamName>
                    <ParamType>IndexingMonitor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this;performOperations;[workList, monitor, true, false]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkOwnership</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Address [primaryOwner=shardAllocatorManager.getOwner(shardId)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>log;debugf;["Checking ownership at %s", localShardAddress]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>performOperations</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>workList</ParamName>
                    <ParamType>LuceneWork</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>monitor</ParamName>
                    <ParamType>IndexingMonitor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>originLocal</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isRetry</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>extractShardName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>indexName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [idx=indexName.lastIndexOf('.')]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createDirectoryProvider</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>indexName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cfg</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>buildContext</ParamName>
                    <ParamType>WorkerBuildContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>InfinispanDirectoryProvider [directoryProvider=new InfinispanDirectoryProvider(Integer.valueOf(shardId))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>directoryProvider;initialize;[indexName, cfg, buildContext]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLocalShardAddress</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ShardAddress</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getKeyTransformationHandler</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>KeyTransformationHandler</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCacheName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isAsync</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSearchIntegrator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>SearchIntegrator</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onTopologyChange</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tce</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [ownershipChanged=shardAllocatorManager.isOwnershipChanged(tce,this.getIndexName())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>log;debugf;["Topology changed notification for %s: %s", this.getIndexName(), tce]</InnerMethodInvoke>
                <InnerMethodInvoke>log;debugf;["Ownership changed? %s,", ownershipChanged]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>