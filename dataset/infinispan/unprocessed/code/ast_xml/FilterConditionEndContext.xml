<Class>
    <Id>663</Id>
    <Package>org.infinispan.query.dsl</Package>
    <ClassName>FilterConditionEndContext</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>FilterConditionEndContext  /** 
 * The context that ends a condition. Here we are expected to specify the right hand side of the filter condition, the operator and the operand, in order to complete the filter.
 * @author anistor@redhat.com
 * @since 6.0
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>in</MethodName>
            <MethodComment>/** 
 * Checks that the left operand is equal to one of the (fixed) list of values given as argument.
 * @param values the list of values
 * @return the completed context
 */
</MethodComment>
            <ReturnType>FilterConditionContextQueryBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>values</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>in</MethodName>
            <MethodComment>/** 
 * Checks that the left operand is equal to one of the elements from the Collection of values given as argument.
 * @param values the collection of values
 * @return the completed context
 */
</MethodComment>
            <ReturnType>FilterConditionContextQueryBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>values</ParamName>
                    <ParamType>Collection</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>like</MethodName>
            <MethodComment>/** 
 * Checks that the left argument (which is expected to be a String) matches a wildcard pattern that follows the JPA rules.
 * @param pattern the wildcard pattern
 * @return the completed context
 */
</MethodComment>
            <ReturnType>FilterConditionContextQueryBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pattern</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>contains</MethodName>
            <MethodComment>/** 
 * Checks that the left argument (which is expected to be an array or a Collection) contains the given element.
 * @param value the value to check
 * @return the completed context
 */
</MethodComment>
            <ReturnType>FilterConditionContextQueryBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>containsAll</MethodName>
            <MethodComment>/** 
 * Checks that the left argument (which is expected to be an array or a Collection) contains all of the the given elements, in any order.
 * @param values the list of elements to check
 * @return the completed context
 */
</MethodComment>
            <ReturnType>FilterConditionContextQueryBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>values</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>containsAll</MethodName>
            <MethodComment>/** 
 * Checks that the left argument (which is expected to be an array or a Collection) contains all the elements of the given collection, in any order.
 * @param values the Collection of elements to check
 * @return the completed context
 */
</MethodComment>
            <ReturnType>FilterConditionContextQueryBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>values</ParamName>
                    <ParamType>Collection</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>containsAny</MethodName>
            <MethodComment>/** 
 * Checks that the left argument (which is expected to be an array or a Collection) contains any of the the given elements.
 * @param values the list of elements to check
 * @return the completed context
 */
</MethodComment>
            <ReturnType>FilterConditionContextQueryBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>values</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>containsAny</MethodName>
            <MethodComment>/** 
 * Checks that the left argument (which is expected to be an array or a Collection) contains any of the elements of the given collection.
 * @param values the Collection of elements to check
 * @return the completed context
 */
</MethodComment>
            <ReturnType>FilterConditionContextQueryBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>values</ParamName>
                    <ParamType>Collection</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isNull</MethodName>
            <MethodComment>/** 
 * Checks that the left argument is null.
 * @return the completed context
 */
</MethodComment>
            <ReturnType>FilterConditionContextQueryBuilder</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>eq</MethodName>
            <MethodComment>/** 
 * Checks that the left argument is equal to the given value.
 * @param value the value to compare with
 * @return the completed context
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>equal</MethodName>
            <MethodComment>/** 
 * Alias for  {@link #eq(Object)}
 */
</MethodComment>
            <ReturnType>FilterConditionContextQueryBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>lt</MethodName>
            <MethodComment>/** 
 * Checks that the left argument is less than the given value.
 * @param value the value to compare with
 * @return the completed context
 */
</MethodComment>
            <ReturnType>FilterConditionContextQueryBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>lte</MethodName>
            <MethodComment>/** 
 * Checks that the left argument is less than or equal to the given value.
 * @param value the value to compare with
 * @return the completed context
 */
</MethodComment>
            <ReturnType>FilterConditionContextQueryBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>gt</MethodName>
            <MethodComment>/** 
 * Checks that the left argument is greater than the given value.
 * @param value the value to compare with
 * @return the completed context
 */
</MethodComment>
            <ReturnType>FilterConditionContextQueryBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>gte</MethodName>
            <MethodComment>/** 
 * Checks that the left argument is greater than or equal to the given value.
 * @param value the value to compare with
 * @return the completed context
 */
</MethodComment>
            <ReturnType>FilterConditionContextQueryBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>between</MethodName>
            <MethodComment>/** 
 * Checks that the left argument is between the given range limits. The limits are inclusive by default, but this can be changed using the methods from the returned  {@link RangeConditionContext}
 * @param from the start of the range
 * @param to   the end of the range
 * @return the RangeConditionContext context
 */
</MethodComment>
            <ReturnType>RangeConditionContextQueryBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>from</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>to</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>