<Class>
    <Id>3941</Id>
    <Package>org.infinispan.factories</Package>
    <ClassName>InterceptorChainFactory</ClassName>
    <SuperClass>AbstractNamedCacheComponentFactory</SuperClass>
    <SuperInterfaceList>
        <SuperInterface>AutoInstantiableFactory</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>InterceptorChainFactory  /** 
 * Factory class that builds an interceptor chain based on cache configuration. For backwards compatibility, the factory will register both a  {@link AsyncInterceptorChain} anda  {@link InterceptorChain} before initializing the interceptors.
 * @author &lt;a href="mailto:manik@jboss.org"&gt;Manik Surtani (manik@jboss.org)&lt;/a&gt;
 * @author Mircea.Markus@jboss.com
 * @author Marko Luksa
 * @author Pedro Ruivo
 * @since 4.0
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>createInterceptor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>AsyncInterceptor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>interceptor</ParamName>
                    <ParamType>AsyncInterceptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>interceptorType</ParamName>
                    <ParamType>? extends AsyncInterceptor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AsyncInterceptor [chainedInterceptor=componentRegistry.getComponent(interceptorType)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>register</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>? extends AsyncInterceptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>chainedInterceptor</ParamName>
                    <ParamType>AsyncInterceptor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildInterceptorChain</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>AsyncInterceptorChain</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>TransactionMode [transactionMode=configuration.transaction().transactionMode()]</InnerVar>
                <InnerVar>boolean [needsVersionAwareComponents=transactionMode.isTransactional() &amp;&amp; Configurations.isTxVersioned(configuration)]</InnerVar>
                <InnerVar>AsyncInterceptorChain [interceptorChain=new AsyncInterceptorChainImpl(componentRegistry.getComponentMetadataRepo())]</InnerVar>
                <InnerVar>boolean [invocationBatching=configuration.invocationBatching().enabled()]</InnerVar>
                <InnerVar>boolean [isTotalOrder=configuration.transaction().transactionProtocol().isTotalOrder()]</InnerVar>
                <InnerVar>CacheMode [cacheMode=configuration.clustering().cacheMode()]</InnerVar>
                <InnerVar>CompatibilityModeConfiguration [compatibility=configuration.compatibility()]</InnerVar>
                <InnerVar>AsyncInterceptor [callInterceptor=createInterceptor(new CallInterceptor(),CallInterceptor.class)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>componentRegistry;registerComponent;[interceptorChain, AsyncInterceptorChain.class]</InnerMethodInvoke>
                <InnerMethodInvoke>componentRegistry;registerComponent;[new InterceptorChain(interceptorChain), InterceptorChain.class]</InnerMethodInvoke>
                <InnerMethodInvoke>interceptorChain;appendInterceptor;[createInterceptor(new InvocationContextInterceptor(),InvocationContextInterceptor.class), false]</InnerMethodInvoke>
                <InnerMethodInvoke>interceptorChain;appendInterceptor;[callInterceptor, false]</InnerMethodInvoke>
                <InnerMethodInvoke>log;trace;["Finished building default interceptor chain."]</InnerMethodInvoke>
                <InnerMethodInvoke>null;buildCustomInterceptors;[interceptorChain, configuration.customInterceptors()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildCustomInterceptors</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>interceptorChain</ParamName>
                    <ParamType>AsyncInterceptorChain</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>customInterceptors</ParamName>
                    <ParamType>CustomInterceptorsConfiguration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasAsyncStore</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>List&lt;StoreConfiguration&gt; [loaderConfigs=configuration.persistence().stores()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>construct</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>componentType</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getInstance</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>InterceptorChainFactory</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>componentRegistry</ParamName>
                    <ParamType>ComponentRegistry</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>configuration</ParamName>
                    <ParamType>Configuration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>InterceptorChainFactory [icf=new InterceptorChainFactory()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>