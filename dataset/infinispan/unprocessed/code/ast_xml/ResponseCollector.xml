<Class>
    <Id>1848</Id>
    <Package>org.infinispan.remoting.transport</Package>
    <ClassName>ResponseCollector</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ResponseCollector  /** 
 * A representation of a request's responses. &lt;p&gt;Thread-safety: The request will invoke  {@link #addResponse(Address,Response)} and{@link #finish()} while holding the collector's monitor, soimplementations don't normally need explicit synchronization.&lt;/p&gt;
 * @author Dan Berindei
 * @since 9.1
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>addResponse</MethodName>
            <MethodComment>/** 
 * Called when a response is received, or when a target node becomes unavailable. &lt;p&gt;When a target node leaves the cluster, this method is called with a {@link org.infinispan.remoting.responses.CacheNotFoundResponse}.&lt;/p&gt; &lt;p&gt;Should return a non- {@code null} result if the request should complete, or {@code null}if it should wait for more responses. If the method throws an exception, the request will be completed with that exception. If the last response is received and  {@code addResponse()} still returns {@code null}, {@link #finish()} will also be called to obtain a result.&lt;p&gt;Thread safety:  {@code addResponse()} will *not* be called concurrently from multiple threads,and the request will not be completed while  {@code addResponse()} is running.&lt;/p&gt;
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sender</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>response</ParamName>
                    <ParamType>Response</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>finish</MethodName>
            <MethodComment>/** 
 * Called after  {@link #addResponse(Address,Response)} returns {@code null} for the last response.&lt;p&gt;If  {@code finish()} finishes normally, the request will complete with its return value(even if  {@code null}). If  {@code finish()} throws an exception, the request will complete exceptionally with that exception,wrapped in a  {@link java.util.concurrent.CompletionException} (unless the exception is already a{@link java.util.concurrent.CompletionException}). &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>