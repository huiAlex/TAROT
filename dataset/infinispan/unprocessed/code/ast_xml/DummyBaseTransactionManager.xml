<Class>
    <Id>3780</Id>
    <Package>org.infinispan.transaction.tm</Package>
    <ClassName>DummyBaseTransactionManager</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>TransactionManager</SuperInterface>
        <SuperInterface>Serializable</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>DummyBaseTransactionManager  /** 
 * @author bela
 * @since 4.0
 * @deprecated use {@link EmbeddedBaseTransactionManager}
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>thread_local</FieldName>
            <FieldType>ThreadLocal</FieldType>
        </Field>
        <Field>
            <FieldName>thread_local</FieldName>
            <FieldType>DummyTransaction</FieldType>
        </Field>
        <Field>
            <FieldName>serialVersionUID</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>trace</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>transactionManagerId</FieldName>
            <FieldType>UUID</FieldType>
        </Field>
        <Field>
            <FieldName>useXaXid</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>begin</MethodName>
            <MethodComment>/** 
 * Starts a new transaction, and associate it with the calling thread.
 * @throws javax.transaction.NotSupportedException If the calling thread is already associated with a transaction, and nested transactions are not supported.
 * @throws javax.transaction.SystemException If the transaction service fails in an unexpected way.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Transaction [currentTx]</InnerVar>
                <InnerVar>DummyTransaction [tx=new DummyTransaction(this)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setTransaction;[tx]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>NotSupportedException</ExceptionType>
                <ExceptionType>SystemException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>commit</MethodName>
            <MethodComment>/** 
 * Commit the transaction associated with the calling thread.
 * @throws javax.transaction.RollbackException If the transaction was marked for rollback only, the transaction is rolled back and this exception is thrown.
 * @throws IllegalStateException If the calling thread is not associated with a transaction.
 * @throws javax.transaction.SystemException If the transaction service fails in an unexpected way.
 * @throws javax.transaction.HeuristicMixedException If a heuristic decision was made and some some parts of the transaction have been committed while other parts have been rolled back.
 * @throws javax.transaction.HeuristicRollbackException If a heuristic decision to roll back the transaction was made.
 * @throws SecurityException     If the caller is not allowed to commit this transaction.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>DummyTransaction [tx=getTransaction()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>tx;commit;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setTransaction;[null]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>RollbackException</ExceptionType>
                <ExceptionType>HeuristicMixedException</ExceptionType>
                <ExceptionType>HeuristicRollbackException</ExceptionType>
                <ExceptionType>SecurityException</ExceptionType>
                <ExceptionType>IllegalStateException</ExceptionType>
                <ExceptionType>SystemException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rollback</MethodName>
            <MethodComment>/** 
 * Rolls back the transaction associated with the calling thread.
 * @throws IllegalStateException If the transaction is in a state where it cannot be rolled back. This could bebecause the calling thread is not associated with a transaction, or because it is in the  {@link javax.transaction.Status#STATUS_PREPARED prepared state}.
 * @throws SecurityException     If the caller is not allowed to roll back this transaction.
 * @throws javax.transaction.SystemException If the transaction service fails in an unexpected way.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Transaction [tx=getTransaction()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>tx;rollback;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setTransaction;[null]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IllegalStateException</ExceptionType>
                <ExceptionType>SecurityException</ExceptionType>
                <ExceptionType>SystemException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setRollbackOnly</MethodName>
            <MethodComment>/** 
 * Mark the transaction associated with the calling thread for rollback only.
 * @throws IllegalStateException If the transaction is in a state where it cannot be rolled back. This could bebecause the calling thread is not associated with a transaction, or because it is in the  {@link javax.transaction.Status#STATUS_PREPARED prepared state}.
 * @throws javax.transaction.SystemException If the transaction service fails in an unexpected way.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Transaction [tx=getTransaction()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>tx;setRollbackOnly;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IllegalStateException</ExceptionType>
                <ExceptionType>SystemException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStatus</MethodName>
            <MethodComment>/** 
 * Get the status of the transaction associated with the calling thread.
 * @return The status of the transaction. This is one of the {@link javax.transaction.Status} constants. If notransaction is associated with the calling thread,  {@link javax.transaction.Status#STATUS_NO_TRANSACTION}is returned.
 * @throws javax.transaction.SystemException If the transaction service fails in an unexpected way.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Transaction [tx=getTransaction()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SystemException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTransaction</MethodName>
            <MethodComment>/** 
 * Get the transaction associated with the calling thread.
 * @return The transaction associated with the calling thread, or &lt;code&gt;null&lt;/code&gt; if the calling thread is notassociated with a transaction.
 * @throws javax.transaction.SystemException If the transaction service fails in an unexpected way.
 */
</MethodComment>
            <ReturnType>DummyTransaction</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setTransactionTimeout</MethodName>
            <MethodComment>/** 
 * Change the transaction timeout for transactions started by the calling thread with the  {@link #begin()} method.
 * @param seconds The new timeout value, in seconds. If this parameter is &lt;code&gt;0&lt;/code&gt;, the timeout value is resetto the default value.
 * @throws javax.transaction.SystemException If the transaction service fails in an unexpected way.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>seconds</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SystemException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>suspend</MethodName>
            <MethodComment>/** 
 * Suspend the association the calling thread has to a transaction, and return the suspended transaction. When returning from this method, the calling thread is no longer associated with a transaction.
 * @return The transaction that the calling thread was associated with, or &lt;code&gt;null&lt;/code&gt; if the calling threadwas not associated with a transaction.
 * @throws javax.transaction.SystemException If the transaction service fails in an unexpected way.
 */
</MethodComment>
            <ReturnType>Transaction</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Transaction [retval=getTransaction()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setTransaction;[null]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SystemException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>resume</MethodName>
            <MethodComment>/** 
 * Resume the association of the calling thread with the given transaction.
 * @param tx The transaction to be associated with the calling thread.
 * @throws javax.transaction.InvalidTransactionException If the argument does not represent a valid transaction.
 * @throws IllegalStateException If the calling thread is already associated with a transaction.
 * @throws javax.transaction.SystemException If the transaction service fails in an unexpected way.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tx</ParamName>
                    <ParamType>Transaction</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setTransaction;[tx]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>InvalidTransactionException</ExceptionType>
                <ExceptionType>IllegalStateException</ExceptionType>
                <ExceptionType>SystemException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setTransaction</MethodName>
            <MethodComment>/** 
 * Just used for unit tests
 * @param tx
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tx</ParamName>
                    <ParamType>Transaction</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>thread_local;set;[(DummyTransaction)tx]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isUseXaXid</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setUseXaXid</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>useXaXid</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>