<Class>
    <Id>3028</Id>
    <Package>org.infinispan.server.test.client.rest</Package>
    <ClassName>RESTClientWithSniEncryptionIT</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>DEFAULT_TRUSTSTORE_PATH</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>DEFAULT_TRUSTSTORE_PASSWORD</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>ispnServer</FieldName>
            <FieldType>RemoteInfinispanServer</FieldType>
        </Field>
        <Field>
            <FieldName>rest</FieldName>
            <FieldType>RESTHelper</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>setup</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rest;addServer;[ispnServer.getRESTEndpoint().getInetAddress().getHostName(), ispnServer.getRESTEndpoint().getContextPath()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>release</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rest;clearServers;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testUnauthorizedAccessToDefaultSSLContext</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>SSLContext [sslContext=SslContextFactory.getContext(null,null,DEFAULT_TRUSTSTORE_PATH,DEFAULT_TRUSTSTORE_PASSWORD.toCharArray())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rest;setSni;[sslContext, Optional.empty()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testAuthorizedAccessThroughSni</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>SSLContext [sslContext=SslContextFactory.getContext(null,null,DEFAULT_TRUSTSTORE_PATH,DEFAULT_TRUSTSTORE_PASSWORD.toCharArray())]</InnerVar>
                <InnerVar>HttpResponse [response=rest.put(rest.toSsl(rest.fullPathKey("test")),"test","text/plain")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rest;setSni;[sslContext, Optional.of("sni")]</InnerMethodInvoke>
                <InnerMethodInvoke>Assert;assertEquals;[200, response.getStatusLine().getStatusCode()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>