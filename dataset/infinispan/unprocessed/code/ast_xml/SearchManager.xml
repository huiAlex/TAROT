<Class>
    <Id>599</Id>
    <Package>org.infinispan.query</Package>
    <ClassName>SearchManager</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>SearchManager  /** 
 * The SearchManager is the entry point to create full text queries on top of a cache.
 * @author Sanne Grinovero &lt;sanne@hibernate.org&gt; (C) 2011 Red Hat Inc.
 * @author Marko Luksa
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getQuery</MethodName>
            <MethodComment>/** 
 * This is a simple method that will just return a  {@link CacheQuery}, filtered according to a set of classes passed in.  If no classes are passed in, it is assumed that no type filtering is performed and so all known types will be searched.
 * @param luceneQuery - {@link org.apache.lucene.search.Query}
 * @param classes - optionally only return results of type that matches this list of acceptable types
 * @return the CacheQuery object which can be used to iterate through results
 */
</MethodComment>
            <ReturnType>E</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>luceneQuery</ParamName>
                    <ParamType>Query</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classes</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildQueryBuilderForClass</MethodName>
            <MethodComment>/** 
 * Experimental. Provides Hibernate Search DSL to build full text queries
 * @return
 */
</MethodComment>
            <ReturnType>EntityContext</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>entityType</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getClusteredQuery</MethodName>
            <MethodComment>/** 
 * Experimental! Use it to try out the newly introduced distributed queries.
 * @param luceneQuery
 * @param classes
 * @return
 */
</MethodComment>
            <ReturnType>E</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>luceneQuery</ParamName>
                    <ParamType>Query</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classes</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMassIndexer</MethodName>
            <MethodComment>/** 
 * The MassIndexer can be used to rebuild the Lucene indexes from the entries stored in Infinispan.
 * @return the MassIndexer component
 */
</MethodComment>
            <ReturnType>MassIndexer</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAnalyzer</MethodName>
            <MethodComment>/** 
 * Retrieve an analyzer instance by its definition name
 * @param name the name of the analyzer
 * @return analyzer with the specified name
 * @throws org.hibernate.search.exception.SearchException if the definition name is unknown
 * @since 7.0
 */
</MethodComment>
            <ReturnType>Analyzer</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStatistics</MethodName>
            <MethodComment>/** 
 * Get access to the Query specific statistics for this SearchManager instance
 * @return The statistics.
 * @since 7.0
 */
</MethodComment>
            <ReturnType>Statistics</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAnalyzer</MethodName>
            <MethodComment>/** 
 * Retrieves the scoped analyzer for a given class type.
 * @param clazz The class for which to retrieve the analyzer.
 * @return The scoped analyzer for the specified class.
 * @throws java.lang.IllegalArgumentException in case {@code clazz == null} or the specifiedclass is not an indexed entity.
 * @since 7.0
 */
</MethodComment>
            <ReturnType>Analyzer</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>purge</MethodName>
            <MethodComment>/** 
 * Remove all entities of particular class from the index.
 * @param entityType The class of the entity to remove.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>entityType</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>unwrap</MethodName>
            <MethodComment>/** 
 * This method gives access to internal Infinispan types, and should not be normally needed. The API of the internal types can (and probably will) change without notice.
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cls</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>