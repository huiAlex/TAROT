<Class>
    <Id>3063</Id>
    <Package>org.infinispan.jcache.annotation</Package>
    <ClassName>CacheLookupHelper</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>CacheLookupHelper  /** 
 * An helper class providing useful methods for cache lookup.
 * @author Kevin Pollet &lt;kevin.pollet@serli.com&gt; (C) 2011 SERLI
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>CacheLookupHelper</MethodName>
            <MethodComment>/** 
 * Disable instantiation.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCacheName</MethodName>
            <MethodComment>/** 
 * Resolves the cache name of a method annotated with a JCACHE annotation.
 * @param method                  the annotated method.
 * @param methodCacheName         the cache name defined on the JCACHE annotation.
 * @param cacheDefaultsAnnotation the {@link javax.cache.annotation.CacheDefaults} annotation instance.
 * @param generate                {@code true} if the default cache name has to be returned if none is specified.
 * @return the resolved cache name.
 * @throws NullPointerException if method or methodCacheName parameter is {@code null}.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>method</ParamName>
                    <ParamType>Method</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>methodCacheName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cacheDefaultsAnnotation</ParamName>
                    <ParamType>CacheDefaults</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>generate</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [cacheName=methodCacheName.trim()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertNotNull;[method, "method parameter must not be null"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotNull;[methodCacheName, "methodCacheName parameter must not be null"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCacheKeyGenerator</MethodName>
            <MethodComment>/** 
 * Resolves and creates an instance of  {@link javax.cache.annotation.CacheKeyGenerator}. To resolve the cache key generator class the algorithm defined in JCACHE specification is used.
 * @param beanManager                  the bean manager instance.
 * @param methodCacheKeyGeneratorClass the {@link javax.cache.annotation.CacheKeyGenerator} class declared in the cache annotation.
 * @param cacheDefaultsAnnotation      the {@link javax.cache.annotation.CacheDefaults} annotation instance.
 * @return the {@link javax.cache.annotation.CacheKeyGenerator} instance.
 * @throws NullPointerException if beanManager parameter is {@code null}.
 */
</MethodComment>
            <ReturnType>CacheKeyGenerator</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>beanManager</ParamName>
                    <ParamType>BeanManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>methodCacheKeyGeneratorClass</ParamName>
                    <ParamType>? extends CacheKeyGenerator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cacheDefaultsAnnotation</ParamName>
                    <ParamType>CacheDefaults</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Class&lt;? extends CacheKeyGenerator&gt; [cacheKeyGeneratorClass=DefaultCacheKeyGenerator.class]</InnerVar>
                <InnerVar>CreationalContext&lt;?&gt; [creationalContext=beanManager.createCreationalContext(null)]</InnerVar>
                <InnerVar>Set&lt;Bean&lt;?&gt;&gt; [beans=beanManager.getBeans(cacheKeyGeneratorClass)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertNotNull;[beanManager, "beanManager parameter must not be null"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDefaultMethodCacheName</MethodName>
            <MethodComment>/** 
 * Returns the default cache name associated to the given method according to JSR-107.
 * @param method the method.
 * @return the default cache name for the given method.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>method</ParamName>
                    <ParamType>Method</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [i=0]</InnerVar>
                <InnerVar>int [nbParameters=method.getParameterTypes().length]</InnerVar>
                <InnerVar>StringBuilder [cacheName=new StringBuilder().append(method.getDeclaringClass().getName()).append(".").append(method.getName()).append("(")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>