<Class>
    <Id>2449</Id>
    <Package>org.infinispan.cli.shell</Package>
    <ClassName>ShellImpl</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Shell</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ShellImpl  /** 
 * ShellImpl.
 * @author Tristan Tarrant
 * @since 5.2
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>SESSION_PING_TIMEOUT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>config</FieldName>
            <FieldType>Config</FieldType>
        </Field>
        <Field>
            <FieldName>console</FieldName>
            <FieldType>Console</FieldType>
        </Field>
        <Field>
            <FieldName>context</FieldName>
            <FieldType>Context</FieldType>
        </Field>
        <Field>
            <FieldName>mode</FieldName>
            <FieldType>ShellMode</FieldType>
        </Field>
        <Field>
            <FieldName>inputFile</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>sessionPingTask</FieldName>
            <FieldType>ScheduledFuture</FieldType>
        </Field>
        <Field>
            <FieldName>sessionPingTask</FieldName>
            <FieldType>?</FieldType>
        </Field>
        <Field>
            <FieldName>ping</FieldName>
            <FieldType>Ping</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>init</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [sopts="c:f:hv"]</InnerVar>
                <InnerVar>LongOpt[] [lopts=new LongOpt[]{new LongOpt("connect",LongOpt.REQUIRED_ARGUMENT,null,'c'),new LongOpt("file",LongOpt.REQUIRED_ARGUMENT,null,'f'),new LongOpt("help",LongOpt.NO_ARGUMENT,null,'h'),new LongOpt("version",LongOpt.NO_ARGUMENT,null,'v')}]</InnerVar>
                <InnerVar>Getopt [g=new Getopt("ispn-cli",args,sopts,lopts)]</InnerVar>
                <InnerVar>int [c]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>exitWithError</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>format</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>System.err;printf;[format, args]</InnerMethodInvoke>
                <InnerMethodInvoke>System.err;println;[]</InnerMethodInvoke>
                <InnerMethodInvoke>System;exit;[1]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>batchRun</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Reader [r="-".equals(inputFile) ? new InputStreamReader(System.in) : new FileReader(inputFile)]</InnerVar>
                <InnerVar>BufferedReader [br=new BufferedReader(r)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>interactiveRun</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>SettingsBuilder [settings=new SettingsBuilder()]</InnerVar>
                <InnerVar>ScheduledExecutorService [executor=Executors.newSingleThreadScheduledExecutor()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>config;load;[]</InnerMethodInvoke>
                <InnerMethodInvoke>settings.enableAlias(false).outputStream(System.out).outputStreamError(System.err);inputStream;[System.in]</InnerMethodInvoke>
                <InnerMethodInvoke>context;setOutputAdapter;[new ConsoleIOAdapter(console)]</InnerMethodInvoke>
                <InnerMethodInvoke>console;addCompletion;[new Completer(context)]</InnerMethodInvoke>
                <InnerMethodInvoke>console;setConsoleCallback;[new CLIConsoleCallback()]</InnerMethodInvoke>
                <InnerMethodInvoke>console;start;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>execute</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>line</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ProcessedCommand [parsed=new ProcessedCommand(line)]</InnerVar>
                <InnerVar>Command [command=context.getCommandRegistry().getCommand(parsed.getCommand())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPrompt</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>renderColor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>color</ParamName>
                    <ParamType>Color</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>output</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Ansi [ansi=new Ansi()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCWD</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>File [directory=new File(".")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getContext</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Context</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>help</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>System.out;println;["Usage: ispn-cli [OPTION]..."]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["Command-line interface for interacting with a running instance of Infinispan"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;[]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["Options:"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["  -c, --connect=URL       connects to a running instance of Infinispan. "]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["                          JMX over RMI jmx://[username[:password]]@host:port[/container[/cache]]"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["                          JMX over JBoss remoting remoting://[username[:password]]@host:port[/container[/cache]]"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["  -f, --file=FILE         reads input from the specified file instead of using "]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["                          interactive mode. If FILE is '-', then commands will be read"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["                          from stdin"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["  -h, --help              shows this help page"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["  -v, --version           shows version information"]</InnerMethodInvoke>
                <InnerMethodInvoke>System;exit;[0]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>version</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>System.out;println;["ispn-cli " + Version.class.getPackage().getImplementationVersion()]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["Copyright (C) 2009-2014 Red Hat Inc. and/or its affiliates and other contributors"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["License Apache License, v. 2.0. http://www.apache.org/licenses/LICENSE-2.0"]</InnerMethodInvoke>
                <InnerMethodInvoke>System;exit;[0]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>