<Class>
    <Id>1583</Id>
    <Package>org.infinispan.query.dsl</Package>
    <ClassName>QueryFactory</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>QueryFactory  /** 
 * Factory for query DSL objects. Query construction starts here, usually by invoking the  {@link #from} method whichreturns a  {@link QueryBuilder} capable of constructing {@link Query} objects. The other methods are use for creatingsub-conditions.
 * @author anistor@redhat.com
 * @since 6.0
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>create</MethodName>
            <MethodComment>/** 
 * Creates a Query based on an Ickle query string.
 * @return a query
 */
</MethodComment>
            <ReturnType>Query</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>queryString</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>from</MethodName>
            <MethodComment>/** 
 * Creates a QueryBuilder for the given entity type.
 * @param entityType the Class of the entity
 * @return a builder capable of creating queries for the specified entity type
 */
</MethodComment>
            <ReturnType>QueryBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>entityType</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>from</MethodName>
            <MethodComment>/** 
 * Creates a QueryBuilder for the given entity type.
 * @param entityType fully qualified entity type name
 * @return a builder capable of creating queries for the specified entity type
 */
</MethodComment>
            <ReturnType>QueryBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>entityType</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>having</MethodName>
            <MethodComment>/** 
 * Creates a condition on the given attribute path that is to be completed later by using it as a sub-condition.
 * @param expression a path Expression
 * @return the incomplete sub-condition
 */
</MethodComment>
            <ReturnType>FilterConditionEndContext</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>having</MethodName>
            <MethodComment>/** 
 * Creates a condition on the given attribute path that is to be completed later by using it as a sub-condition.
 * @param attributePath the attribute path
 * @return the incomplete sub-condition
 */
</MethodComment>
            <ReturnType>FilterConditionEndContext</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>attributePath</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>not</MethodName>
            <MethodComment>/** 
 * Creates a negated condition that is to be completed later by using it as a sub-condition.
 * @return the incomplete sub-condition
 */
</MethodComment>
            <ReturnType>FilterConditionBeginContext</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>not</MethodName>
            <MethodComment>/** 
 * Creates a negated condition based on a given sub-condition. The negation is grouped.
 * @return the incomplete sub-condition
 */
</MethodComment>
            <ReturnType>FilterConditionContext</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fcc</ParamName>
                    <ParamType>FilterConditionContext</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>