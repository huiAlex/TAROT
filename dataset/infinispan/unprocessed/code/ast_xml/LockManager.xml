<Class>
    <Id>392</Id>
    <Package>org.infinispan.util.concurrent.locks</Package>
    <ClassName>LockManager</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>LockManager  /** 
 * An interface to deal with all aspects of acquiring and releasing locks for cache entries.
 * @author Manik Surtani (&lt;a href="mailto:manik@jboss.org"&gt;manik@jboss.org&lt;/a&gt;)
 * @author Mircea.Markus@jboss.com
 * @author Pedro Ruivo
 * @since 4.0
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>lock</MethodName>
            <MethodComment>/** 
 * Attempts to lock the  {@code key} if the lock isn't already held by the {@code lockOwner}. &lt;p&gt; This method is non-blocking and return immediately a  {@link LockPromise}. The  {@link LockPromise} can (and should)be used by the invoker to check when the lock is really acquired by invoking  {@link LockPromise#lock()}.
 * @param key       key to lock.
 * @param lockOwner the owner of the lock.
 * @param time      the maximum time to wait for the lock
 * @param unit      the time unit of the {@code time} argument
 * @return the {@link KeyAwareLockPromise} associated to this keys.
 */
</MethodComment>
            <ReturnType>KeyAwareLockPromise</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lockOwner</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>time</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>unit</ParamName>
                    <ParamType>TimeUnit</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>lockAll</MethodName>
            <MethodComment>/** 
 * Same as  {@link #lock(Object,Object,long,TimeUnit)} but for multiple keys.&lt;p&gt; It ensures no deadlocks if the method is invoked by different lock owners for the same set (or subset) of keys.
 * @param keys      keys to lock.
 * @param lockOwner the owner of the lock.
 * @param time      the maximum time to wait for the lock
 * @param unit      the time unit of the {@code time} argument
 * @return the {@link KeyAwareLockPromise} associated to this keys.
 */
</MethodComment>
            <ReturnType>KeyAwareLockPromise</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>keys</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lockOwner</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>time</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>unit</ParamName>
                    <ParamType>TimeUnit</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>unlock</MethodName>
            <MethodComment>/** 
 * Releases the lock for the  {@code key} if the {@code lockOwner} is the lock owner.&lt;p&gt; Note this method &lt;b&gt;will&lt;/b&gt; unlock a lock where the key is the lockOwner &lt;/p&gt;
 * @param key       key to unlock.
 * @param lockOwner the owner of the lock.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lockOwner</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>unlockAll</MethodName>
            <MethodComment>/** 
 * Same as  {@link #unlock(Object,Object)} but for multiple keys.&lt;p&gt; Note this method will &lt;b&gt;not&lt;/b&gt; unlock a lock where the key is the lockOwner &lt;/p&gt;
 * @param keys      keys to unlock.
 * @param lockOwner the owner of the lock.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>keys</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lockOwner</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>unlockAll</MethodName>
            <MethodComment>/** 
 * Same as  {@code unlockAll(context.getLockedKeys(), context.getKeyLockOwner();}. &lt;p&gt; Note this method will &lt;b&gt;not&lt;/b&gt; unlock a lock where the key is the lockOwner &lt;/p&gt;
 * @param context the context with the locked keys and the lock owner.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>InvocationContext</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ownsLock</MethodName>
            <MethodComment>/** 
 * Tests if the  {@code lockOwner} owns a lock on the {@code key}.
 * @param key       key to test.
 * @param lockOwner the owner of the lock.
 * @return {@code true} if the owner does own the lock on the key, {@code false} otherwise.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lockOwner</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isLocked</MethodName>
            <MethodComment>/** 
 * Tests if the  {@code key} is locked.
 * @param key key to test.
 * @return {@code true} if the key is locked, {@code false} otherwise.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOwner</MethodName>
            <MethodComment>/** 
 * Retrieves the owner of the lock for the  {@code key}.
 * @return the owner of the lock, or {@code null} if not locked.
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>printLockInfo</MethodName>
            <MethodComment>/** 
 * Prints lock information for all locks.
 * @return the lock information
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNumberOfLocksHeld</MethodName>
            <MethodComment>/** 
 * @return the number of locks held.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLock</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>InfinispanLock</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>