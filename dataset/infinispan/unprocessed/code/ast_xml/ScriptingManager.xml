<Class>
    <Id>2830</Id>
    <Package>org.infinispan.scripting</Package>
    <ClassName>ScriptingManager</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ScriptingManager  /** 
 * ScriptingManager. Defines the operations that can be performed on scripts. Scripts are stored in a dedicated cache.
 * @author Tristan Tarrant
 * @since 7.2
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>SCRIPT_CACHE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>SCRIPT_MANAGER_ROLE</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>addScript</MethodName>
            <MethodComment>/** 
 * Adds a new named script.
 * @param name the name of the script. The name should contain an extension identifying its language
 * @param script the source of the script
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>script</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeScript</MethodName>
            <MethodComment>/** 
 * Removes a script.
 * @param name the name of the script ro remove
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>runScript</MethodName>
            <MethodComment>/** 
 * Runs a named script
 * @param scriptName The name of the script to run. Use {@link #addScript(String,String)} to add a script
 * @return a {@link CompletableFuture} which will return the result of the script execution
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>scriptName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>runScript</MethodName>
            <MethodComment>/** 
 * Runs a named script using the specified  {@link TaskContext}
 * @param scriptName The name of the script to run. Use {@link #addScript(String,String)} to add a script
 * @param context A {@link TaskContext} within which the script will be executed
 * @return a {@link CompletableFuture} which will return the result of the script execution
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>scriptName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>TaskContext</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getScript</MethodName>
            <MethodComment>/** 
 * Retrieves the source code of an existing script.
 * @param scriptName The name of the script
 * @return the source code of the script
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>scriptName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getScriptNames</MethodName>
            <MethodComment>/** 
 * Retrieves names of all available scripts.
 * @return {@link Set&lt;String&gt;} containing names of available scripts.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>