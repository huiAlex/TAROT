<Class>
    <Id>1019</Id>
    <Package>org.infinispan.cdi.common.util</Package>
    <ClassName>Reflections</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Reflections  /** 
 * Utility class for working with JDK Reflection and also CDI's {@link Annotated} metadata.
 * @author Stuart Douglas
 * @author Pete Muir
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>EMPTY_ANNOTATION_ARRAY</FieldName>
            <FieldType>Annotation[]</FieldType>
        </Field>
        <Field>
            <FieldName>EMPTY_OBJECT_ARRAY</FieldName>
            <FieldType>Object[]</FieldType>
        </Field>
        <Field>
            <FieldName>EMPTY_TYPES</FieldName>
            <FieldType>Type[]</FieldType>
        </Field>
        <Field>
            <FieldName>EMPTY_CLASSES</FieldName>
            <FieldType>Class&lt;?&gt;[]</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>cast</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Perform a runtime cast. Similar to  {@link Class#cast(Object)}, but useful when you do not have a  {@link Class} object for type you wish to cast to.&lt;/p&gt; &lt;p/&gt; &lt;p&gt; {@link Class#cast(Object)} should be used if possible&lt;/p&gt;
 * @param &lt; T &gt; the type to cast to
 * @param obj the object to perform the cast on
 * @return the casted object
 * @throws ClassCastException if the type T is not a subtype of the object
 * @see Class#cast(Object)
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>obj</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAllDeclaredMethods</MethodName>
            <MethodComment>/** 
 * Get all the declared methods on the class hierarchy. This &lt;b&gt;will&lt;/b&gt; return overridden methods.
 * @param clazz The class to search
 * @return the set of all declared methods or an empty set if there are none
 */
</MethodComment>
            <ReturnType>Method</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>HashSet&lt;Method&gt; [methods=new HashSet&lt;Method&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildInvokeMethodErrorMessage</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>method</ParamName>
                    <ParamType>Method</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>obj</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuilder [message=new StringBuilder(String.format("Exception invoking method [%s] on object [%s], using arguments [",method.getName(),obj))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>message;append;["]"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setAccessible</MethodName>
            <MethodComment>/** 
 * Set the accessibility flag on the  {@link AccessibleObject} as described in{@link AccessibleObject#setAccessible(boolean)} within the context ofa  {@link PrivilegedAction}.
 * @param &lt; A &gt;    member the accessible object type
 * @param member the accessible object
 * @return the accessible object after the accessible flag has been altered
 */
</MethodComment>
            <ReturnType>A</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>member</ParamName>
                    <ParamType>A</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>AccessController;doPrivileged;[new SetAccessiblePriviligedAction(member)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>invokeMethod</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Invoke the specified method on the provided instance, passing any additional arguments included in this method as arguments to the specified method. &lt;/p&gt; &lt;p/&gt; &lt;p&gt; This method attempts to set the accessible flag of the method in a {@link PrivilegedAction} before invoking the method if the first argumentis true. &lt;/p&gt; &lt;p/&gt; &lt;p&gt;This method provides the same functionality and throws the same exceptions as {@link Reflections#invokeMethod(boolean,Method,Class,Object,Object...)}, with the expected return type set to  {@link Object}.&lt;/p&gt;
 * @see Reflections#invokeMethod(boolean,Method,Class,Object,Object...)
 * @see Method#invoke(Object,Object...)
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>setAccessible</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>method</ParamName>
                    <ParamType>Method</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>instance</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>invokeMethod</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Invoke the specified method on the provided instance, passing any additional arguments included in this method as arguments to the specified method. &lt;/p&gt; &lt;p/&gt; &lt;p&gt;This method provides the same functionality and throws the same exceptions as {@link Reflections#invokeMethod(boolean,Method,Class,Object,Object...)}, with the expected return type set to  {@link Object} and honoring the accessibility ofthe method.&lt;/p&gt;
 * @see Reflections#invokeMethod(boolean,Method,Class,Object,Object...)
 * @see Method#invoke(Object,Object...)
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>method</ParamName>
                    <ParamType>Method</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>expectedReturnType</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>instance</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>invokeMethod</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Invoke the method on the instance, with any arguments specified, casting the result of invoking the method to the expected return type. &lt;/p&gt; &lt;p/&gt; &lt;p&gt; This method wraps  {@link Method#invoke(Object,Object...)}, converting the checked exceptions that  {@link Method#invoke(Object,Object...)} specifiesto runtime exceptions. &lt;/p&gt; &lt;p/&gt; &lt;p&gt; If instructed, this method attempts to set the accessible flag of the method in a {@link PrivilegedAction} before invoking the method.&lt;/p&gt;
 * @param setAccessible flag indicating whether method should first be set asaccessible
 * @param method        the method to invoke
 * @param instance      the instance to invoke the method
 * @param args          the arguments to the method
 * @return the result of invoking the method, or null if the method's returntype is void
 * @throws RuntimeException            if this &lt;code&gt;Method&lt;/code&gt; object enforces Javalanguage access control and the underlying method is inaccessible or if the underlying method throws an exception or if the initialization provoked by this method fails.
 * @throws IllegalArgumentException    if the method is an instance method andthe specified &lt;code&gt;instance&lt;/code&gt; argument is not an instance of the class or interface declaring the underlying method (or of a subclass or implementor thereof); if the number of actual and formal parameters differ; if an unwrapping conversion for primitive arguments fails; or if, after possible unwrapping, a parameter value cannot be converted to the corresponding formal parameter type by a method invocation conversion.
 * @throws NullPointerException        if the specified &lt;code&gt;instance&lt;/code&gt; isnull and the method is an instance method.
 * @throws ClassCastException          if the result of invoking the method cannot becast to the expectedReturnType
 * @throws ExceptionInInitializerError if the initialization provoked by thismethod fails.
 * @see Method#invoke(Object,Object...)
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>setAccessible</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>method</ParamName>
                    <ParamType>Method</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>expectedReturnType</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>instance</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildGetFieldValueErrorMessage</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>field</ParamName>
                    <ParamType>Field</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>obj</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFieldValue</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Get the value of the field, on the specified instance, casting the value of the field to the expected type. &lt;/p&gt; &lt;p/&gt; &lt;p&gt; This method wraps  {@link Field#get(Object)}, converting the checked exceptions that  {@link Field#get(Object)} specifies to runtime exceptions.&lt;/p&gt;
 * @param &lt; T &gt;          the type of the field's value
 * @param field        the field to operate on
 * @param instance     the instance from which to retrieve the value
 * @param expectedType the expected type of the field's value
 * @return the value of the field
 * @throws RuntimeException            if the underlying field is inaccessible.
 * @throws IllegalArgumentException    if the specified &lt;code&gt;instance&lt;/code&gt; is not aninstance of the class or interface declaring the underlying field (or a subclass or implementor thereof).
 * @throws NullPointerException        if the specified &lt;code&gt;instance&lt;/code&gt; is null and the fieldis an instance field.
 * @throws ExceptionInInitializerError if the initialization provoked by thismethod fails.
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>field</ParamName>
                    <ParamType>Field</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>instance</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>expectedType</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRawType</MethodName>
            <MethodComment>/** 
 * Extract the raw type, given a type.
 * @param &lt; T &gt;  the type
 * @param type the type to extract the raw type from
 * @return the raw type, or null if the raw type cannot be determined.
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>Type</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isSerializable</MethodName>
            <MethodComment>/** 
 * Check if a class is serializable.
 * @param clazz The class to check
 * @return true if the class implements serializable or is a primitive
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isAssignableFrom</MethodName>
            <MethodComment>/** 
 * Check the assignability of one type to another, taking into account the actual type arguements
 * @param rawType1             the raw type of the class to check
 * @param actualTypeArguments1 the actual type arguements to check, or anempty array if not a parameterized type
 * @param rawType2             the raw type of the class to check
 * @param actualTypeArguments2 the actual type arguements to check, or anempty array if not a parameterized type
 * @return
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rawType1</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>actualTypeArguments1</ParamName>
                    <ParamType>Type[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rawType2</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>actualTypeArguments2</ParamName>
                    <ParamType>Type[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>matches</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rawType1</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>actualTypeArguments1</ParamName>
                    <ParamType>Type[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rawType2</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>actualTypeArguments2</ParamName>
                    <ParamType>Type[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isAssignableFrom</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>actualTypeArguments1</ParamName>
                    <ParamType>Type[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>actualTypeArguments2</ParamName>
                    <ParamType>Type[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>matches</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type1</ParamName>
                    <ParamType>Type</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>types2</ParamName>
                    <ParamType>? extends Type</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isAssignableFrom</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type1</ParamName>
                    <ParamType>Type</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>types2</ParamName>
                    <ParamType>Type[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isAssignableFrom</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type1</ParamName>
                    <ParamType>Type</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type2</ParamName>
                    <ParamType>Type</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>matches</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type1</ParamName>
                    <ParamType>Type</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type2</ParamName>
                    <ParamType>Type</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isTypeBounded</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>Type</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lowerBounds</ParamName>
                    <ParamType>Type[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>upperBounds</ParamName>
                    <ParamType>Type[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isAssignableFrom</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rawType1</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>actualTypeArguments1</ParamName>
                    <ParamType>Type[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type2</ParamName>
                    <ParamType>Type</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>matches</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rawType1</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>actualTypeArguments1</ParamName>
                    <ParamType>Type[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type2</ParamName>
                    <ParamType>Type</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>matches</MethodName>
            <MethodComment>/** 
 * Check whether whether any of the types1 matches a type in types2
 * @param types1
 * @param types2
 * @return
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>types1</ParamName>
                    <ParamType>Type</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>types2</ParamName>
                    <ParamType>Type</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isAssignableFrom</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>types1</ParamName>
                    <ParamType>Type[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type2</ParamName>
                    <ParamType>Type</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>Reflections</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMetaAnnotation</MethodName>
            <MethodComment>/** 
 * Inspects an annotated element for the given meta annotation. This should only be used for user defined meta annotations, where the annotation must be physically present.
 * @param element        The element to inspect
 * @param annotationType The meta annotation to search for
 * @return The annotation instance found on this element or null if nomatching annotation was found.
 */
</MethodComment>
            <ReturnType>A</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>element</ParamName>
                    <ParamType>Annotated</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>annotationType</ParamName>
                    <ParamType>A</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getQualifiers</MethodName>
            <MethodComment>/** 
 * Extract the qualifiers from a set of annotations.
 * @param beanManager the beanManager to use to determine if an annotation isa qualifier
 * @param annotations the annotations to check
 * @return any qualifiers present in &lt;code&gt;annotations&lt;/code&gt;
 */
</MethodComment>
            <ReturnType>Annotation</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>beanManager</ParamName>
                    <ParamType>BeanManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>annotations</ParamName>
                    <ParamType>Annotation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getQualifiers</MethodName>
            <MethodComment>/** 
 * Extract the qualifiers from a set of annotations.
 * @param beanManager the beanManager to use to determine if an annotation isa qualifier
 * @param annotations the annotations to check
 * @return any qualifiers present in &lt;code&gt;annotations&lt;/code&gt;
 */
</MethodComment>
            <ReturnType>Annotation</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>beanManager</ParamName>
                    <ParamType>BeanManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>annotations</ParamName>
                    <ParamType>Annotation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Set&lt;Annotation&gt; [qualifiers=new HashSet&lt;Annotation&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAllDeclaredFields</MethodName>
            <MethodComment>/** 
 * Get all the declared fields on the class hierarchy. This &lt;b&gt;will&lt;/b&gt; return overridden fields.
 * @param clazz The class to search
 * @return the set of all declared fields or an empty set if there are none
 */
</MethodComment>
            <ReturnType>Field</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>HashSet&lt;Field&gt; [fields=new HashSet&lt;Field&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>