<Class>
    <Id>1217</Id>
    <Package>org.infinispan.configuration.cache</Package>
    <ClassName>HashConfiguration</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>HashConfiguration  /** 
 * Allows fine-tuning of rehashing characteristics. Must only used with 'distributed' cache mode.
 * @author pmuir
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>CONSISTENT_HASH_FACTORY</FieldName>
            <FieldType>AttributeDefinition</FieldType>
        </Field>
        <Field>
            <FieldName>CONSISTENT_HASH_FACTORY</FieldName>
            <FieldType>ConsistentHashFactory</FieldType>
        </Field>
        <Field>
            <FieldName>HASH</FieldName>
            <FieldType>AttributeDefinition</FieldType>
        </Field>
        <Field>
            <FieldName>HASH</FieldName>
            <FieldType>Hash</FieldType>
        </Field>
        <Field>
            <FieldName>NUM_OWNERS</FieldName>
            <FieldType>AttributeDefinition</FieldType>
        </Field>
        <Field>
            <FieldName>NUM_OWNERS</FieldName>
            <FieldType>Integer</FieldType>
        </Field>
        <Field>
            <FieldName>NUM_SEGMENTS</FieldName>
            <FieldType>AttributeDefinition</FieldType>
        </Field>
        <Field>
            <FieldName>NUM_SEGMENTS</FieldName>
            <FieldType>Integer</FieldType>
        </Field>
        <Field>
            <FieldName>CAPACITY_FACTOR</FieldName>
            <FieldType>AttributeDefinition</FieldType>
        </Field>
        <Field>
            <FieldName>CAPACITY_FACTOR</FieldName>
            <FieldType>Float</FieldType>
        </Field>
        <Field>
            <FieldName>KEY_PARTITIONER</FieldName>
            <FieldType>AttributeDefinition</FieldType>
        </Field>
        <Field>
            <FieldName>KEY_PARTITIONER</FieldName>
            <FieldType>KeyPartitioner</FieldType>
        </Field>
        <Field>
            <FieldName>consistentHashFactory</FieldName>
            <FieldType>Attribute</FieldType>
        </Field>
        <Field>
            <FieldName>consistentHashFactory</FieldName>
            <FieldType>ConsistentHashFactory</FieldType>
        </Field>
        <Field>
            <FieldName>hash</FieldName>
            <FieldType>Attribute</FieldType>
        </Field>
        <Field>
            <FieldName>hash</FieldName>
            <FieldType>Hash</FieldType>
        </Field>
        <Field>
            <FieldName>numOwners</FieldName>
            <FieldType>Attribute</FieldType>
        </Field>
        <Field>
            <FieldName>numOwners</FieldName>
            <FieldType>Integer</FieldType>
        </Field>
        <Field>
            <FieldName>numSegments</FieldName>
            <FieldType>Attribute</FieldType>
        </Field>
        <Field>
            <FieldName>numSegments</FieldName>
            <FieldType>Integer</FieldType>
        </Field>
        <Field>
            <FieldName>capacityFactor</FieldName>
            <FieldType>Attribute</FieldType>
        </Field>
        <Field>
            <FieldName>capacityFactor</FieldName>
            <FieldType>Float</FieldType>
        </Field>
        <Field>
            <FieldName>keyPartitioner</FieldName>
            <FieldType>Attribute</FieldType>
        </Field>
        <Field>
            <FieldName>keyPartitioner</FieldName>
            <FieldType>KeyPartitioner</FieldType>
        </Field>
        <Field>
            <FieldName>groupsConfiguration</FieldName>
            <FieldType>GroupsConfiguration</FieldType>
        </Field>
        <Field>
            <FieldName>stateTransferConfiguration</FieldName>
            <FieldType>StateTransferConfiguration</FieldType>
        </Field>
        <Field>
            <FieldName>attributes</FieldName>
            <FieldType>AttributeSet</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>attributeDefinitionSet</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>AttributeSet</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>HashConfiguration</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>attributes</ParamName>
                    <ParamType>AttributeSet</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>groupsConfiguration</ParamName>
                    <ParamType>GroupsConfiguration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stateTransferConfiguration</ParamName>
                    <ParamType>StateTransferConfiguration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>consistentHash</MethodName>
            <MethodComment>/** 
 * @deprecated Since 5.2, replaced by {@link #consistentHashFactory()}.
 */
</MethodComment>
            <ReturnType>ConsistentHash</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>consistentHashFactory</MethodName>
            <MethodComment>/** 
 * The consistent hash factory in use.
 */
</MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hash</MethodName>
            <MethodComment>/** 
 * The hash function in use. Used as a bit spreader and a general hash code generator. Typically one of the the many default  {@link org.infinispan.distribution.ch.ConsistentHash}implementations shipped.
 * @deprecated Since 8.2, use {@link #keyPartitioner()} instead.
 */
</MethodComment>
            <ReturnType>Hash</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>numOwners</MethodName>
            <MethodComment>/** 
 * Number of cluster-wide replicas for each cache entry.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>numSegments</MethodName>
            <MethodComment>/** 
 * Controls the total number of hash space segments (per cluster). &lt;p&gt;A hash space segment is the granularity for key distribution in the cluster: a node can own (or primary-own) one or more full segments, but not a fraction of a segment. As such, larger {@code numSegments} values will mean a more even distribution of keys between nodes.&lt;p&gt;On the other hand, the memory/bandwidth usage of the new consistent hash grows linearly with {@code numSegments}. So we recommend keeping  {@code numSegments &lt;= 10 * clusterSize}.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rehashEnabled</MethodName>
            <MethodComment>/** 
 * If false, no rebalancing or rehashing will take place when a new node joins the cluster or a node leaves
 * @deprecated Use {@link org.infinispan.configuration.cache.StateTransferConfiguration#fetchInMemoryState()} instead.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rehashRpcTimeout</MethodName>
            <MethodComment>/** 
 * Rehashing timeout
 * @deprecated Use {@link org.infinispan.configuration.cache.StateTransferConfiguration#timeout()} instead.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rehashWait</MethodName>
            <MethodComment>/** 
 * @deprecated Use {@link org.infinispan.configuration.cache.StateTransferConfiguration#timeout()} instead.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>capacityFactor</MethodName>
            <MethodComment>/** 
 * Controls the proportion of entries that will reside on the local node, compared to the other nodes in the cluster. This is just a suggestion, there is no guarantee that a node with a capacity factor of  {@code 2} willhave twice as many entries as a node with a capacity factor of  {@code 1}.
 */
</MethodComment>
            <ReturnType>float</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>keyPartitioner</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>KeyPartitioner</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>groups</MethodName>
            <MethodComment>/** 
 * Configuration for various grouper definitions. See the user guide for more information.
 */
</MethodComment>
            <ReturnType>GroupsConfiguration</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>attributes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>AttributeSet</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>equals</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>obj</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>HashConfiguration [other=(HashConfiguration)obj]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hashCode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [prime=31]</InnerVar>
                <InnerVar>int [result=1]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>