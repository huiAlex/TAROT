<Class>
    <Id>359</Id>
    <Package>org.infinispan.persistence.spi</Package>
    <ClassName>AdvancedCacheLoader</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>CacheLoader</SuperInterface>
        <SuperInterface>K</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>AdvancedCacheLoader  /** 
 * A specialised extension of the  {@link CacheLoader} interface that allows processing parallel iteration over theexisting entries.
 * @author Mircea Markus
 * @since 6.0
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>process</MethodName>
            <MethodComment>/** 
 * Iterates in parallel over the entries in the storage using the threads from the &lt;b&gt;executor&lt;/b&gt; pool. For each entry the  {@link CacheLoaderTask#processEntry(MarshalledEntry,TaskContext)} isinvoked. Before passing an entry to the callback task, the entry should be validated against the &lt;b&gt;filter&lt;/b&gt;. Implementors should build an  {@link TaskContext} instance (implementation) that is fed to the {@link CacheLoaderTask} on every invocation. The {@link CacheLoaderTask} might invoke {@link org.infinispan.persistence.spi.AdvancedCacheLoader.TaskContext#stop()} at any time, so implementors of this methodshould verify TaskContext's state for early termination of iteration. The method should only return once the iteration is complete or as soon as possible in the case TaskContext.stop() is invoked.
 * @param filter        to validate which entries should be feed into the task. Might be null.
 * @param task          callback to be invoked in parallel for each stored entry that passes the filter check
 * @param executor      an external thread pool to be used for parallel iteration
 * @param fetchValue    whether or not to fetch the value from the persistent store. E.g. if the iteration isintended only over the key set, no point fetching the values from the persistent store as well
 * @param fetchMetadata whether or not to fetch the metadata from the persistent store. E.g. if the iteration isintended only ove the key set, then no pint fetching the metadata from the persistent store as well
 * @throws PersistenceException in case of an error, e.g. communicating with the external storage
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>filter</ParamName>
                    <ParamType>? super K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>task</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>executor</ParamName>
                    <ParamType>Executor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fetchValue</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fetchMetadata</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>size</MethodName>
            <MethodComment>/** 
 * Returns the number of elements in the store.
 * @throws PersistenceException in case of an error, e.g. communicating with the external storage
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>processEntry</MethodName>
            <MethodComment>/** 
 * @param marshalledEntry an iterated entry. Note that {@link org.infinispan.marshall.core.MarshalledEntry#getValue()}might be null if the fetchValue parameter passed to  {@link AdvancedCacheLoader#process(KeyFilter,org.infinispan.persistence.spi.AdvancedCacheLoader.CacheLoaderTask,java.util.concurrent.Executor,boolean,boolean)} is false.
 * @param taskContext     allows the implementors to decide when to stop the iteration by invoking {@link org.infinispan.persistence.spi.AdvancedCacheLoader.TaskContext#stop()}
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>marshalledEntry</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>taskContext</ParamName>
                    <ParamType>TaskContext</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>stop</MethodName>
            <MethodComment>/** 
 * Invoked from within the CacheLoaderTask, in order to signal the AdvancedCacheLoader implementation that iteration should be stopped early (before iteration is finished).
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isStopped</MethodName>
            <MethodComment>/** 
 * Verifies if the the TaskContext is marked as stopped.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>