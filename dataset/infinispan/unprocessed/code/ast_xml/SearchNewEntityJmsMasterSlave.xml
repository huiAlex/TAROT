<Class>
    <Id>3371</Id>
    <Package>org.infinispan.test.integration.as.jms</Package>
    <ClassName>SearchNewEntityJmsMasterSlave</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>SearchNewEntityJmsMasterSlave  /** 
 * In a JMS Master/Slave configuration, every node should be able to find entities created by some other nodes after the synchronization succeed. &lt;p/&gt; Search dependencies are not added to the archives.
 * @author Davide D'Alto &lt;davide@hibernate.org&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>REFRESH_PERIOD_IN_SEC</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SLEEP_TIME_FOR_SYNCHRONIZATION</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>MAX_PERIOD_RETRIES</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>MAX_SEARCH_ATTEMPTS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>memberRegistration</FieldName>
            <FieldType>RegistrationController</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>deleteExistingMembers</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [deletedMembers=memberRegistration.deleteAllMembers()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertEquals;["At the start of the test there should be no members", 0, deletedMembers]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>registerNewMemberOnSlave1</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>RegisteredMember [newMember=memberRegistration.getNewMember()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertNull;["A non registered member should have null ID", newMember.getId()]</InnerMethodInvoke>
                <InnerMethodInvoke>newMember;setName;["Davide D'Alto"]</InnerMethodInvoke>
                <InnerMethodInvoke>newMember;setEmail;["dd@slave1.fake.email"]</InnerMethodInvoke>
                <InnerMethodInvoke>memberRegistration;register;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotNull;["A registered member should have an ID", newMember.getId()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>registerNewMemberOnSlave2</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>RegisteredMember [newMember=memberRegistration.getNewMember()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertNull;["A non registered member should have null ID", newMember.getId()]</InnerMethodInvoke>
                <InnerMethodInvoke>newMember;setName;["Peter O'Tall"]</InnerMethodInvoke>
                <InnerMethodInvoke>newMember;setEmail;["po@slave2.fake.email"]</InnerMethodInvoke>
                <InnerMethodInvoke>memberRegistration;register;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotNull;["A registered member should have an ID", newMember.getId()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>registerNewMemberOnMaster</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>RegisteredMember [newMember=memberRegistration.getNewMember()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertNull;["A non registered member should have null ID", newMember.getId()]</InnerMethodInvoke>
                <InnerMethodInvoke>newMember;setName;["Richard Mayhew"]</InnerMethodInvoke>
                <InnerMethodInvoke>newMember;setEmail;["rm@master.fake.email"]</InnerMethodInvoke>
                <InnerMethodInvoke>memberRegistration;register;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotNull;["A registered member should have an ID", newMember.getId()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>searchNewMembersAfterSynchronizationOnSlave1</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertSearchResult;["Davide D'Alto", search("Davide")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertSearchResult;["Peter O'Tall", search("Peter")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertSearchResult;["Richard Mayhew", search("Richard")]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>searchNewMembersAfterSynchronizationOnSlave2</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertSearchResult;["Davide D'Alto", search("Davide")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertSearchResult;["Peter O'Tall", search("Peter")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertSearchResult;["Richard Mayhew", search("Richard")]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>searchNewMembersAfterSynchronizationOnMaster</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertSearchResult;["Davide D'Alto", search("Davide")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertSearchResult;["Peter O'Tall", search("Peter")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertSearchResult;["Richard Mayhew", search("Richard")]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>assertSearchResult</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expectedResult</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>results</ParamName>
                    <ParamType>RegisteredMember</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertEquals;["Unexpected number of results from search", 1, results.size()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["Unexpected result from search", expectedResult, results.get(0).getName()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>waitForIndexSynchronization</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>Thread;sleep;[SLEEP_TIME_FOR_SYNCHRONIZATION]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>search</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>RegisteredMember</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;RegisteredMember&gt; [results=memberRegistration.search(name)]</InnerVar>
                <InnerVar>int [attempts=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>