<Class>
    <Id>571</Id>
    <Package>org.infinispan.functional</Package>
    <ClassName>EntryView</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>EntryView  /** 
 * Entry views expose cached entry information to the user. Depending on the type of entry view, different operations are available. Currently, three type of entry views are supported: &lt;ul&gt; &lt;il&gt; {@link ReadEntryView}: read-only entry view&lt;/il&gt; &lt;il&gt; {@link WriteEntryView}: write-only entry view&lt;/il&gt; &lt;il&gt; {@link ReadWriteEntryView}: read-write entry view&lt;/il&gt; &lt;/ul&gt;
 * @since 8.0
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>EntryView</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>key</MethodName>
            <MethodComment>/** 
 * Key of the read-only entry view. Guaranteed to return a non-null value. The instance of the key must not be mutated.
 */
</MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>get</MethodName>
            <MethodComment>/** 
 * Returns a non-null value if the key has a value associated with it or throws  {@link NoSuchElementException} if no value is associated withthe entry. &lt;p&gt;The value instance is read-only and must not be mutated. If the function accessing this value is about to update the entry, it has to create a defensive copy (or completely new instance) and store it using {@link WriteEntryView#set(Object,MetaParam.Writable[])}.
 * @throws NoSuchElementException if no value is associated with the key.
 */
</MethodComment>
            <ReturnType>V</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>NoSuchElementException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>find</MethodName>
            <MethodComment>/** 
 * Optional value. It'll return a non-empty value when the value is present, and empty when the value is not present. &lt;p&gt;The value instance is read-only and must not be mutated. If the function accessing this value is about to update the entry, it has to create a defensive copy (or completely new instance) and store it using {@link WriteEntryView#set(Object,MetaParam.Writable[])}.
 */
</MethodComment>
            <ReturnType>V</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>set</MethodName>
            <MethodComment>/** 
 * Set this value along with optional metadata parameters. &lt;p&gt;This method returns  {@link Void} instead of 'void' to avoidhaving to add overloaded methods in functional map that take {@link Consumer} instead of {@link Function}. This is an unfortunate side effect of the Java language itself which does not consider 'void' to be an  {@link Object}.
 */
</MethodComment>
            <ReturnType>Void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>V</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>metas</ParamName>
                    <ParamType>MetaParam.Writable</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>set</MethodName>
            <MethodComment>/** 
 * Set this value along with metadata object. &lt;p&gt;This method returns  {@link Void} instead of 'void' to avoidhaving to add overloaded methods in functional map that take {@link Consumer} instead of {@link Function}. This is an unfortunate side effect of the Java language itself which does not consider 'void' to be an  {@link Object}.
 */
</MethodComment>
            <ReturnType>Void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>V</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>metadata</ParamName>
                    <ParamType>Metadata</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>remove</MethodName>
            <MethodComment>/** 
 * Removes the value and any metadata parameters associated with it. &lt;p&gt;This method returns  {@link Void} instead of 'void' to avoidhaving to add overloaded methods in functional map that take {@link Consumer} instead of {@link Function}. This is an unfortunate side effect of the Java language itself which does not consider 'void' to be an  {@link Object}.
 */
</MethodComment>
            <ReturnType>Void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>