<Class>
    <Id>146</Id>
    <Package>org.infinispan.remoting.inboundhandler.action</Package>
    <ClassName>PendingTxAction</ClassName>
    <SuperClass>BaseLockingAction</SuperClass>
    <SuperInterfaceList>
        <SuperInterface>PendingLockListener</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>PendingTxAction  /** 
 * An  {@link Action} implementation that check for older topology transactions.&lt;p/&gt; This action is ready when no older topology transactions exists or is canceled when the timeout occurs.
 * @author Pedro Ruivo
 * @since 8.0
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>pendingLockManager</FieldName>
            <FieldType>PendingLockManager</FieldType>
        </Field>
        <Field>
            <FieldName>notifier</FieldName>
            <FieldType>CompletableFuture</FieldType>
        </Field>
        <Field>
            <FieldName>notifier</FieldName>
            <FieldType>Void</FieldType>
        </Field>
        <Field>
            <FieldName>pendingLockPromise</FieldName>
            <FieldType>PendingLockPromise</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>PendingTxAction</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pendingLockManager</ParamName>
                    <ParamType>PendingLockManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>clusteringDependentLogic</ParamName>
                    <ParamType>ClusteringDependentLogic</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checking</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ActionStatus</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>state</ParamName>
                    <ParamType>ActionState</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PendingLockPromise [promise=pendingLockPromise]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>init</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ActionStatus</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>state</ParamName>
                    <ParamType>ActionState</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>TxInvocationContext&lt;?&gt; [context=createContext(state)]</InnerVar>
                <InnerVar>long [timeout=state.getTimeout()]</InnerVar>
                <InnerVar>List&lt;Object&gt; [keysToLock=getAndUpdateFilteredKeys(state)]</InnerVar>
                <InnerVar>RemoteLockCommand [command=state.getCommand()]</InnerVar>
                <InnerVar>PendingLockPromise [promise=keysToLock.size() == 1 ? pendingLockManager.checkPendingTransactionsForKey(context,keysToLock.get(0),timeout,TimeUnit.MILLISECONDS) : pendingLockManager.checkPendingTransactionsForKeys(context,keysToLock,timeout,TimeUnit.MILLISECONDS)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addListener</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>listener</ParamName>
                    <ParamType>ActionListener</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>notifier;thenRun;[listener::onComplete]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onReady</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>notifier;complete;[null]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createContext</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>state</ParamName>
                    <ParamType>ActionState</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>RemoteLockCommand [command=state.getCommand()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>