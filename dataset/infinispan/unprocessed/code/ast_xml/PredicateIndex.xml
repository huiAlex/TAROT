<Class>
    <Id>3897</Id>
    <Package>org.infinispan.objectfilter.impl.predicateindex</Package>
    <ClassName>PredicateIndex</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>PredicateIndex  /** 
 * Keeps track of all predicates and all projections from all filters of an entity type and determines efficiently which predicates match a given entity instance. There is a single instance at most of this for class per each entity type. The predicates are stored in an index-like structure to allow fast matching and are reference counted in order to allow sharing of predicates between filters rather than duplicating them.
 * @param &lt; AttributeMetadata &gt; is the type of the metadata attached to an AttributeNode
 * @param &lt; AttributeId &gt;       is the type used to represent attribute IDs (usually String or Integer)
 * @author anistor@redhat.com
 * @since 7.0
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>root</FieldName>
            <FieldType>AttributeNode</FieldType>
        </Field>
        <Field>
            <FieldName>root</FieldName>
            <FieldType>AttributeMetadata</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>PredicateIndex</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>metadataAdapter</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRoot</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>AttributeMetadata</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addSubscriptionForPredicate</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>AttributeId</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>predicateNode</ParamName>
                    <ParamType>AttributeId</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>filterSubscription</ParamName>
                    <ParamType>FilterSubscriptionImpl</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AttributeNode&lt;AttributeMetadata,AttributeId&gt; [attributeNode=addAttributeNodeByPath(predicateNode.getAttributePath())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeSubscriptionForPredicate</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>subscription</ParamName>
                    <ParamType>AttributeId</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AttributeNode&lt;AttributeMetadata,AttributeId&gt; [current=getAttributeNodeByPath(subscription.getPredicateNode().getAttributePath())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>current;removePredicateSubscription;[subscription]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAttributeNodeByPath</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>AttributeMetadata</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>attributePath</ParamName>
                    <ParamType>AttributeId</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AttributeNode&lt;AttributeMetadata,AttributeId&gt; [node=root]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addAttributeNodeByPath</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>AttributeMetadata</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>attributePath</ParamName>
                    <ParamType>AttributeId</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AttributeNode&lt;AttributeMetadata,AttributeId&gt; [node=root]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addProjections</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>filterSubscription</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>projection</ParamName>
                    <ParamType>List&lt;AttributeId&gt;</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>i</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeProjections</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>filterSubscription</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>projection</ParamName>
                    <ParamType>List&lt;AttributeId&gt;</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>