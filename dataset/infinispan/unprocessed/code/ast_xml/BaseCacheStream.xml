<Class>
    <Id>1626</Id>
    <Package>org.infinispan</Package>
    <ClassName>BaseCacheStream</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>BaseStream</SuperInterface>
        <SuperInterface>T</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>BaseCacheStream  /** 
 * Interface that defines the base methods of all streams returned from a  {@link Cache}.  This interface is useful to hold a reference to any of the types while still being able to invoke some methods.
 * @author wburns
 * @since 9.0
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>sequentialDistribution</MethodName>
            <MethodComment>/** 
 * This would disable sending requests to all other remote nodes compared to one at a time. This can reduce memory pressure on the originator node at the cost of performance. &lt;p&gt;Parallel distribution is enabled by default except for  {@link CacheStream#iterator()} &amp;{@link CacheStream#spliterator()}&lt;/p&gt;
 * @return a stream with parallel distribution disabled
 */
</MethodComment>
            <ReturnType>BaseCacheStream</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parallelDistribution</MethodName>
            <MethodComment>/** 
 * This would enable sending requests to all other remote nodes when a terminal operator is performed.  This requires additional overhead as it must process results concurrently from various nodes, but should perform faster in the majority of cases. &lt;p&gt;Parallel distribution is enabled by default except for  {@link CacheStream#iterator()} &amp;{@link CacheStream#spliterator()}&lt;/p&gt;
 * @return a stream with parallel distribution enabled.
 */
</MethodComment>
            <ReturnType>BaseCacheStream</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>filterKeySegments</MethodName>
            <MethodComment>/** 
 * Filters which entries are returned by what segment they are present in.  This method can be substantially more efficient than using a regular  {@link CacheStream#filter(Predicate)} method as this can control what nodes areasked for data and what entries are read from the underlying CacheStore if present.
 * @param segments The segments to use for this stream operation.  Any segments not in this set will be ignored.
 * @return a stream with the segments filtered.
 */
</MethodComment>
            <ReturnType>BaseCacheStream</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>segments</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>filterKeys</MethodName>
            <MethodComment>/** 
 * Filters which entries are returned by only returning ones that map to the given key.  This method will be faster than a regular  {@link CacheStream#filter(Predicate)} if the filter is holding references to the samekeys.
 * @param keys The keys that this stream will only operate on.
 * @return a stream with the keys filtered.
 */
</MethodComment>
            <ReturnType>BaseCacheStream</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>keys</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>distributedBatchSize</MethodName>
            <MethodComment>/** 
 * Controls how many keys are returned from a remote node when using a stream terminal operation with a distributed cache to back this stream.  This value is ignored when terminal operators that don't track keys are used.  Key tracking terminal operators are  {@link CacheStream#iterator()},  {@link CacheStream#spliterator()}, {@link CacheStream#forEach(Consumer)}.  Please see those methods for additional information on how this value may affect them. &lt;p&gt;This value may be used in the case of a a terminal operator that doesn't track keys if an intermediate operation is performed that requires bringing keys locally to do computations.  Examples of such intermediate operations are  {@link CacheStream#sorted()},  {@link CacheStream#sorted(Comparator)}, {@link CacheStream#distinct()},  {@link CacheStream#limit(long)},  {@link CacheStream#skip(long)}&lt;/p&gt; &lt;p&gt;This value is &lt;b&gt;always&lt;/b&gt; ignored when this stream is backed by a cache that is not distributed as all values are already local.&lt;/p&gt;
 * @param batchSize The size of each batch.  This defaults to the state transfer chunk size.
 * @return a stream with the batch size updated
 */
</MethodComment>
            <ReturnType>BaseCacheStream</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>batchSize</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>segmentCompletionListener</MethodName>
            <MethodComment>/** 
 * Allows registration of a segment completion listener that is notified when a segment has completed processing.  If the terminal operator has a short circuit this listener may never be called. &lt;p&gt;This method is designed for the sole purpose of use with the  {@link CacheStream#iterator()} to allow fora user to track completion of segments as they are returned from the iterator.  Behavior of other methods is not specified.  Please see  {@link CacheStream#iterator()} for more information.&lt;/p&gt;&lt;p&gt;Multiple listeners may be registered upon multiple invocations of this method.  The ordering of notified listeners is not specified.&lt;/p&gt;
 * @param listener The listener that will be called back as segments are completed.
 * @return a stream with the listener registered.
 */
</MethodComment>
            <ReturnType>BaseCacheStream</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>listener</ParamName>
                    <ParamType>SegmentCompletionListener</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>disableRehashAware</MethodName>
            <MethodComment>/** 
 * Disables tracking of rehash events that could occur to the underlying cache.  If a rehash event occurs while a terminal operation is being performed it is possible for some values that are in the cache to not be found. Note that you will never have an entry duplicated when rehash awareness is disabled, only lost values. &lt;p&gt;Most terminal operations will run faster with rehash awareness disabled even without a rehash occuring. However if a rehash occurs with this disabled be prepared to possibly receive only a subset of values.&lt;/p&gt;
 * @return a stream with rehash awareness disabled.
 */
</MethodComment>
            <ReturnType>BaseCacheStream</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>timeout</MethodName>
            <MethodComment>/** 
 * Sets a given time to wait for a remote operation to respond by.  This timeout does nothing if the terminal operation does not go remote. &lt;p&gt;If a timeout does occur then a  {@link java.util.concurrent.TimeoutException} is thrown from the terminaloperation invoking thread or on the next call to the  {@link Iterator} or {@link Spliterator}.&lt;/p&gt; &lt;p&gt;Note that if a rehash occurs this timeout value is reset for the subsequent retry if rehash aware is enabled.&lt;/p&gt;
 * @param timeout the maximum time to wait
 * @param unit the time unit of the timeout argument
 * @return a stream with the timeout set
 */
</MethodComment>
            <ReturnType>BaseCacheStream</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>timeout</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>unit</ParamName>
                    <ParamType>TimeUnit</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>segmentCompleted</MethodName>
            <MethodComment>/** 
 * Method invoked when the segment has been found to be consumed properly by the terminal operation.
 * @param segments The segments that were completed
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>segments</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>