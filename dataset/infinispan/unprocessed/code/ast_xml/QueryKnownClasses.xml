<Class>
    <Id>1454</Id>
    <Package>org.infinispan.query.backend</Package>
    <ClassName>QueryKnownClasses</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>QueryKnownClasses  /** 
 * Stores all entity classes known to query module in a replicated cache. The entry value is a boolean which indicates if the type is indexable. The key is a KeyValuePair composed of the cache name and the class. This cache is 'append only'. &lt;p&gt; Write operations are expected to happen only exceptionally, therefore this code is heavily optimized for reads (at cost of writes). Also we're assuming all entries are small: there is no size limit nor cleanup strategy. &lt;p&gt; This is not caching the fact that some key is not defined: that would be tricky to get right and is not needed for our use case.
 * @author Sanne Grinovero (C) 2013 Red Hat Inc.
 * @author anistor@redhat.com
 * @deprecated To be removed in Infinispan 10.0
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>QUERY_KNOWN_CLASSES_CACHE_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>indexedEntities</FieldName>
            <FieldType>Set</FieldType>
        </Field>
        <Field>
            <FieldName>indexedEntities</FieldName>
            <FieldType>Class&lt;?&gt;</FieldType>
        </Field>
        <Field>
            <FieldName>cacheName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>cacheManager</FieldName>
            <FieldType>EmbeddedCacheManager</FieldType>
        </Field>
        <Field>
            <FieldName>internalCacheRegistry</FieldName>
            <FieldType>InternalCacheRegistry</FieldType>
        </Field>
        <Field>
            <FieldName>searchFactoryHandler</FieldName>
            <FieldType>SearchFactoryHandler</FieldType>
        </Field>
        <Field>
            <FieldName>knownClassesCache</FieldName>
            <FieldType>AdvancedCache</FieldType>
        </Field>
        <Field>
            <FieldName>knownClassesCache</FieldName>
            <FieldType>KeyValuePair&lt;String,Class&lt;?&gt;&gt;</FieldType>
        </Field>
        <Field>
            <FieldName>transactionHelper</FieldName>
            <FieldType>TransactionHelper</FieldType>
        </Field>
        <Field>
            <FieldName>localCache</FieldName>
            <FieldType>AtomicReference</FieldType>
        </Field>
        <Field>
            <FieldName>localCache</FieldName>
            <FieldType>Map&lt;Class&lt;?&gt;,Boolean&gt;</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>QueryKnownClasses</MethodName>
            <MethodComment>/** 
 * Constructor used only in pre-declared mode.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>indexedEntities</ParamName>
                    <ParamType>Class&lt;?&gt;</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>QueryKnownClasses</MethodName>
            <MethodComment>/** 
 * Constructor used only in autodetect mode.
 * @deprecated will be removed in Infinispan 10.0
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cacheManager</ParamName>
                    <ParamType>EmbeddedCacheManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>internalCacheRegistry</ParamName>
                    <ParamType>InternalCacheRegistry</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCacheName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isAutodetectEnabled</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>start</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>searchFactoryHandler</ParamName>
                    <ParamType>SearchFactoryHandler</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;startInternalCache;[]</InnerMethodInvoke>
                <InnerMethodInvoke>knownClassesCache;addListener;[searchFactoryHandler.getCacheListener(), key -&gt; key.getKey().equals(cacheName)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>stop</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>keys</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Class&lt;?&gt;</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Set&lt;Class&lt;?&gt;&gt; [result=new HashSet&lt;&gt;()]</InnerVar>
                <InnerVar>Transaction [tx=transactionHelper.suspendTxIfExists()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;startInternalCache;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>containsKey</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>get</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>put</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>Boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Transaction [tx=transactionHelper.suspendTxIfExists()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;startInternalCache;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;localCacheInsert;[clazz, value]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>localCacheInsert</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>Boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startInternalCache</MethodName>
            <MethodComment>/** 
 * Start the internal cache lazily.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getInternalCacheConfig</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Configuration</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>ConfigurationBuilder [configurationBuilder=new ConfigurationBuilder()]</InnerVar>
                <InnerVar>CacheMode [cacheMode=cacheManager.getGlobalComponentRegistry().getGlobalConfiguration().isClustered() ? CacheMode.REPL_SYNC : CacheMode.LOCAL]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>configurationBuilder.clustering();cacheMode;[cacheMode]</InnerMethodInvoke>
                <InnerMethodInvoke>configurationBuilder.transaction().transactionMode(TransactionMode.TRANSACTIONAL).transactionManagerLookup(null).invocationBatching();enable;[]</InnerMethodInvoke>
                <InnerMethodInvoke>configurationBuilder.security().authorization();disable;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>runCommand</MethodName>
            <MethodComment>/** 
 * Run command and retry if suspect exception was thrown.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>runnable</ParamName>
                    <ParamType>Runnable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>