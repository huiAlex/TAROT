<Class>
    <Id>2489</Id>
    <Package>org.infinispan.query.impl.massindex</Package>
    <ClassName>DistributedExecutorMassIndexer</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>MassIndexer</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>DistributedExecutorMassIndexer  /** 
 * @author gustavonalle
 * @since 7.1
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>LOG</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>cache</FieldName>
            <FieldType>AdvancedCache</FieldType>
        </Field>
        <Field>
            <FieldName>searchIntegrator</FieldName>
            <FieldType>SearchIntegrator</FieldType>
        </Field>
        <Field>
            <FieldName>indexUpdater</FieldName>
            <FieldType>IndexUpdater</FieldType>
        </Field>
        <Field>
            <FieldName>executor</FieldName>
            <FieldType>DistributedExecutorService</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>DistributedExecutorMassIndexer</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cache</ParamName>
                    <ParamType>AdvancedCache</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>searchIntegrator</ParamName>
                    <ParamType>SearchIntegrator</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>start</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>CompletableFuture&lt;Void&gt; [executionResult=executeInternal(false)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>executionResult;join;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startAsync</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addFutureListToFutures</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>futures</ParamName>
                    <ParamType>CompletableFuture&lt;Void&gt;</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>futureList</ParamName>
                    <ParamType>CompletableFuture&lt;Void&gt;</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>futureList;forEach;[f -&gt; futures.add(f.exceptionally(t -&gt; {
  if (t instanceof InterruptedException) {
    Thread.currentThread().interrupt();
    return null;
  }
 else   if (t instanceof CompletionException) {
    Throwable cause=t.getCause();
    throw LOG.errorExecutingMassIndexer(cause);
  }
 else {
    throw LOG.errorExecutingMassIndexer(t);
  }
}
))]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reindex</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>keys</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;CompletableFuture&lt;Void&gt;&gt; [futures=new ArrayList&lt;&gt;()]</InnerVar>
                <InnerVar>Set&lt;Object&gt; [everywhereSet=new HashSet&lt;&gt;()]</InnerVar>
                <InnerVar>Set&lt;Object&gt; [primeownerSet=new HashSet&lt;&gt;()]</InnerVar>
                <InnerVar>CompletableFuture&lt;Void&gt; [compositeFuture=CompletableFuture.allOf(futures.toArray(new CompletableFuture[futures.size()]))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>executeInternal</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>asyncFlush</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;CompletableFuture&lt;Void&gt;&gt; [futures=new ArrayList&lt;&gt;()]</InnerVar>
                <InnerVar>Deque&lt;IndexedTypeIdentifier&gt; [toFlush=new LinkedList&lt;&gt;()]</InnerVar>
                <InnerVar>CompletableFuture&lt;Void&gt; [compositeFuture=CompletableFuture.allOf(futures.toArray(new CompletableFuture[futures.size()]))]</InnerVar>
                <InnerVar>BiConsumer&lt;Void,Throwable&gt; [consumer=(v,t) -&gt; {
  for (  IndexedTypeIdentifier type : toFlush) {
    indexUpdater.flush(type);
  }
}
]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>