<Class>
    <Id>4103</Id>
    <Package>org.infinispan.test.integration.security.utils</Package>
    <ClassName>KdcServerAnnotationProcessor</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>KdcServerAnnotationProcessor  /** 
 * Annotation processor for creating LDAP and Kerberos servers.
 * @author &lt;a href="mailto:dev@directory.apache.org"&gt;Apache Directory Project&lt;/a&gt;
 * @author &lt;a href="mailto:vchepeli@redhat.com"&gt;Vitalii Chepeliuk&lt;/a&gt;
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>createTransports</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ldapServer</ParamName>
                    <ParamType>LdapServer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>transportBuilders</ParamName>
                    <ParamType>CreateTransport[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>instantiateLdapServer</MethodName>
            <MethodComment>/** 
 * Just gives an instance of  {@link LdapServer} without starting it. For getting a running LdapServer instance see{@link #createLdapServer(CreateLdapServer,DirectoryService)}
 * @see #createLdapServer(CreateLdapServer,DirectoryService)
 */
</MethodComment>
            <ReturnType>LdapServer</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>createLdapServer</ParamName>
                    <ParamType>CreateLdapServer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>directoryService</ParamName>
                    <ParamType>DirectoryService</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLdapServer</MethodName>
            <MethodComment>/** 
 * Returns an LdapServer instance and starts it before returning the instance, infering the configuration from the Stack trace
 * @return a running LdapServer instance
 */
</MethodComment>
            <ReturnType>LdapServer</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>directoryService</ParamName>
                    <ParamType>DirectoryService</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Object [instance=AnnotationUtils.getInstance(CreateLdapServer.class)]</InnerVar>
                <InnerVar>LdapServer [ldapServer=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ClassNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createLdapServer</MethodName>
            <MethodComment>/** 
 * creates an LdapServer and starts before returning the instance
 * @param createLdapServer the annotation containing the custom configuration
 * @param directoryService the directory service
 * @return a running LdapServer instance
 */
</MethodComment>
            <ReturnType>LdapServer</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>createLdapServer</ParamName>
                    <ParamType>CreateLdapServer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>directoryService</ParamName>
                    <ParamType>DirectoryService</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LdapServer [ldapServer=instantiateLdapServer(createLdapServer,directoryService)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getKdcServer</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>KdcServer</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>directoryService</ParamName>
                    <ParamType>DirectoryService</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CreateKdcServer [createKdcServer=(CreateKdcServer)AnnotationUtils.getInstance(CreateKdcServer.class)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createKdcServer</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>KdcServer</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>createKdcServer</ParamName>
                    <ParamType>CreateKdcServer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>directoryService</ParamName>
                    <ParamType>DirectoryService</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>KerberosConfig [kdcConfig=new KerberosConfig()]</InnerVar>
                <InnerVar>KdcServer [kdcServer=new KdcServer(kdcConfig)]</InnerVar>
                <InnerVar>CreateTransport[] [transportBuilders=createKdcServer.transports()]</InnerVar>
                <InnerVar>CreateChngPwdServer[] [createChngPwdServers=createKdcServer.chngPwdServer()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>kdcConfig;setServicePrincipal;[createKdcServer.kdcPrincipal()]</InnerMethodInvoke>
                <InnerMethodInvoke>kdcConfig;setPrimaryRealm;[createKdcServer.primaryRealm()]</InnerMethodInvoke>
                <InnerMethodInvoke>kdcConfig;setMaximumTicketLifetime;[createKdcServer.maxTicketLifetime()]</InnerMethodInvoke>
                <InnerMethodInvoke>kdcConfig;setMaximumRenewableLifetime;[createKdcServer.maxRenewableLifetime()]</InnerMethodInvoke>
                <InnerMethodInvoke>kdcServer;setSearchBaseDn;[createKdcServer.searchBaseDn()]</InnerMethodInvoke>
                <InnerMethodInvoke>kdcServer;setDirectoryService;[directoryService]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createTransports</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Transport</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>transportBuilder</ParamName>
                    <ParamType>CreateTransport</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [protocol=transportBuilder.protocol()]</InnerVar>
                <InnerVar>int [port=transportBuilder.port()]</InnerVar>
                <InnerVar>int [nbThreads=transportBuilder.nbThreads()]</InnerVar>
                <InnerVar>int [backlog=transportBuilder.backlog()]</InnerVar>
                <InnerVar>String [address=transportBuilder.address()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFreePort</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>ServerSocket [ss=new ServerSocket(0)]</InnerVar>
                <InnerVar>int [port=ss.getLocalPort()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ss;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>