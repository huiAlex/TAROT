<Class>
    <Id>2543</Id>
    <Package>org.infinispan.rest.http2</Package>
    <ClassName>Http2ClientInitializer</ClassName>
    <SuperClass>ChannelInitializer</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Http2ClientInitializer  /** 
 * Configures the client pipeline to support HTTP/2 frames.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>logger</FieldName>
            <FieldType>Http2FrameLogger</FieldType>
        </Field>
        <Field>
            <FieldName>sslCtx</FieldName>
            <FieldType>SslContext</FieldType>
        </Field>
        <Field>
            <FieldName>maxContentLength</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>connectionHandler</FieldName>
            <FieldType>HttpToHttp2ConnectionHandler</FieldType>
        </Field>
        <Field>
            <FieldName>responseHandler</FieldName>
            <FieldType>HttpResponseHandler</FieldType>
        </Field>
        <Field>
            <FieldName>settingsHandler</FieldName>
            <FieldType>Http2SettingsHandler</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>Http2ClientInitializer</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sslCtx</ParamName>
                    <ParamType>SslContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>maxContentLength</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initChannel</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ch</ParamName>
                    <ParamType>SocketChannel</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Http2Connection [connection=new DefaultHttp2Connection(false)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>responseHandler</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>HttpResponseHandler</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>settingsHandler</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Http2SettingsHandler</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>configureEndOfPipeline</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pipeline</ParamName>
                    <ParamType>ChannelPipeline</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>pipeline;addLast;[settingsHandler, responseHandler]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>configureSsl</MethodName>
            <MethodComment>/** 
 * Configure the pipeline for TLS NPN negotiation to HTTP/2.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ch</ParamName>
                    <ParamType>SocketChannel</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ChannelPipeline [pipeline=ch.pipeline()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>pipeline;addLast;[sslCtx.newHandler(ch.alloc())]</InnerMethodInvoke>
                <InnerMethodInvoke>pipeline;addLast;[new ApplicationProtocolNegotiationHandler(""){
  @Override protected void configurePipeline(  ChannelHandlerContext ctx,  String protocol){
    if (ApplicationProtocolNames.HTTP_2.equals(protocol)) {
      ChannelPipeline p=ctx.pipeline();
      p.addLast(connectionHandler);
      configureEndOfPipeline(p);
      return;
    }
    ctx.close();
    throw new IllegalStateException("unknown protocol: " + protocol);
  }
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>configurePipeline</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>ChannelHandlerContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>protocol</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ctx;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>configureClearText</MethodName>
            <MethodComment>/** 
 * Configure the pipeline for a cleartext upgrade from HTTP to HTTP/2.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ch</ParamName>
                    <ParamType>SocketChannel</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>HttpClientCodec [sourceCodec=new HttpClientCodec()]</InnerVar>
                <InnerVar>Http2ClientUpgradeCodec [upgradeCodec=new Http2ClientUpgradeCodec(connectionHandler)]</InnerVar>
                <InnerVar>HttpClientUpgradeHandler [upgradeHandler=new HttpClientUpgradeHandler(sourceCodec,upgradeCodec,65536)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ch.pipeline();addLast;[sourceCodec, upgradeHandler, new UpgradeRequestHandler(), new UserEventLogger()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>channelActive</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>ChannelHandlerContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DefaultFullHttpRequest [upgradeRequest=new DefaultFullHttpRequest(HttpVersion.HTTP_1_1,HttpMethod.GET,"/")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ctx;writeAndFlush;[upgradeRequest]</InnerMethodInvoke>
                <InnerMethodInvoke>ctx;fireChannelActive;[]</InnerMethodInvoke>
                <InnerMethodInvoke>ctx.pipeline();remove;[this]</InnerMethodInvoke>
                <InnerMethodInvoke>null;configureEndOfPipeline;[ctx.pipeline()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>userEventTriggered</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>ChannelHandlerContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>evt</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>System.out;println;["User Event Triggered: " + evt]</InnerMethodInvoke>
                <InnerMethodInvoke>ctx;fireUserEventTriggered;[evt]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>