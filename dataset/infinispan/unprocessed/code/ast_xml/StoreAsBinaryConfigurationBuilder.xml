<Class>
    <Id>3720</Id>
    <Package>org.infinispan.configuration.cache</Package>
    <ClassName>StoreAsBinaryConfigurationBuilder</ClassName>
    <SuperClass>AbstractConfigurationChildBuilder</SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Builder</SuperInterface>
        <SuperInterface>StoreAsBinaryConfiguration</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>StoreAsBinaryConfigurationBuilder  /** 
 * Controls whether when stored in memory, keys and values are stored as references to their original objects, or in a serialized, binary format.  There are benefits to both approaches, but often if used in a clustered mode, storing objects as binary means that the cost of serialization happens early on, and can be amortized.  Further, deserialization costs are incurred lazily which improves throughput. &lt;p /&gt; It is possible to control this on a fine-grained basis: you can choose to just store keys or values as binary, or both. &lt;p /&gt;
 * @see StoreAsBinaryConfiguration
 * @deprecated Please use {@link MemoryConfigurationBuilder#storageType(StorageType)} method instead
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>attributes</FieldName>
            <FieldType>AttributeSet</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>StoreAsBinaryConfigurationBuilder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>builder</ParamName>
                    <ParamType>ConfigurationBuilder</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>enable</MethodName>
            <MethodComment>/** 
 * Enables storing both keys and values as binary.
 */
</MethodComment>
            <ReturnType>StoreAsBinaryConfigurationBuilder</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>attributes.attribute(ENABLED);set;[true]</InnerMethodInvoke>
                <InnerMethodInvoke>getBuilder().memory();storageType;[StorageType.BINARY]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>disable</MethodName>
            <MethodComment>/** 
 * Disables storing both keys and values as binary.
 */
</MethodComment>
            <ReturnType>StoreAsBinaryConfigurationBuilder</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>attributes.attribute(ENABLED);set;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>getBuilder().memory();storageType;[StorageType.OBJECT]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>enabled</MethodName>
            <MethodComment>/** 
 * Sets whether this feature is enabled or disabled.
 * @param enabled if true, this feature is enabled.  If false, it is disabled.
 */
</MethodComment>
            <ReturnType>StoreAsBinaryConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>enabled</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>attributes.attribute(ENABLED);set;[enabled]</InnerMethodInvoke>
                <InnerMethodInvoke>getBuilder().memory();storageType;[enabled ? StorageType.BINARY : StorageType.OBJECT]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>storeKeysAsBinary</MethodName>
            <MethodComment>/** 
 * Specify whether keys are stored as binary or not.
 * @param storeKeysAsBinary if true, keys are stored as binary.  If false, keys are stored as object references.
 * @deprecated No longer supported, keys and values are both enabled if store as binary is
 */
</MethodComment>
            <ReturnType>StoreAsBinaryConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>storeKeysAsBinary</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>storeValuesAsBinary</MethodName>
            <MethodComment>/** 
 * Specify whether values are stored as binary or not.
 * @param storeValuesAsBinary if true, values are stored as binary.  If false, values are stored as object references.
 * @deprecated No longer supported, keys and values are both enabled if store as binary is
 */
</MethodComment>
            <ReturnType>StoreAsBinaryConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>storeValuesAsBinary</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>defensive</MethodName>
            <MethodComment>/** 
 * When defensive copying is disabled, Infinispan keeps object references around and marshalls keys lazily. So clients can modify entries via original object references, and marshalling only happens when entries are to be replicated/distributed, or stored in a cache store. Since client references are valid, clients can make changes to entries in the cache using those references, but these modifications are only local and you still need to call one of the cache's put/replace... methods in order for changes to replicate. When defensive copies are enabled, Infinispan marshalls objects the moment they're stored, hence changes made to object references are not stored in the cache, not even for local caches.
 * @param defensive boolean indicating whether defensive copiesshould be enabled cache wide
 * @return a configuration builder for fluent programmatic configuration
 * @deprecated Store as binary configuration is always defensive now.
 */
</MethodComment>
            <ReturnType>StoreAsBinaryConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>defensive</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>validate</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>validate</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>globalConfig</ParamName>
                    <ParamType>GlobalConfiguration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>create</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>StoreAsBinaryConfiguration</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>read</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>StoreAsBinaryConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>template</ParamName>
                    <ParamType>StoreAsBinaryConfiguration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.attributes;read;[template.attributes()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>