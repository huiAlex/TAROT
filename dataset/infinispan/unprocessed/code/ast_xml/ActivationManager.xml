<Class>
    <Id>731</Id>
    <Package>org.infinispan.eviction</Package>
    <ClassName>ActivationManager</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ActivationManager  /** 
 * Controls activation of cache entries that have been passivated.
 * @author Galder Zamarre√±o
 * @since 5.2
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>onUpdate</MethodName>
            <MethodComment>/** 
 * Remove key and associated value from cache store and update the activation counter.
 * @param key      Key to remove
 * @param newEntry {@code true} if the entry does not exists in-memory
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>newEntry</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onRemove</MethodName>
            <MethodComment>/** 
 * Remove key and associated value from cache store and update the activation counter. &lt;p/&gt; The key is also removed from the shared configured stores.
 * @param key      Key to activate
 * @param newEntry {@code true} if the entry does not exists in-memory
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>newEntry</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getActivationCount</MethodName>
            <MethodComment>/** 
 * Get number of activations executed.
 * @return A long representing the number of activations
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>