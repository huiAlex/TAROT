<Class>
    <Id>1034</Id>
    <Package>org.infinispan.server.router</Package>
    <ClassName>RoutingTable</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>RoutingTable  /** 
 * A container for routing information.
 * @author Sebastian ≈Åaskawiec
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>routes</FieldName>
            <FieldType>Set</FieldType>
        </Field>
        <Field>
            <FieldName>routes</FieldName>
            <FieldType>Route&lt;? extends RouteSource,? extends RouteDestination&gt;</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>RoutingTable</MethodName>
            <MethodComment>/** 
 * Creates new  {@link RoutingTable}.
 * @param routes A set of {@link Route}s for the routing table.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>routes</ParamName>
                    <ParamType>Route&lt;? extends RouteSource,? extends RouteDestination&gt;</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.routes;addAll;[routes]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>routesCount</MethodName>
            <MethodComment>/** 
 * Returns the number of  {@link Route}s present in the routing table.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>streamRoutes</MethodName>
            <MethodComment>/** 
 * Returns a stream of all  {@link Route}s in the routing table.
 */
</MethodComment>
            <ReturnType>Route&lt;? extends RouteSource,? extends RouteDestination&gt;</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>streamRoutes</MethodName>
            <MethodComment>/** 
 * Returns a  {@link Stream} of {@link Route}s matching the initial criteria
 * @param sourceType      Class of the &lt;code&gt;Source&lt;/code&gt; type.
 * @param destinationType Class of the &lt;code&gt;Desitnation&lt;/code&gt; type.
 * @param &lt; Source &gt;        Type of the {@link RouteSource}
 * @param &lt; Destination &gt;   Type of the {@link RouteDestination}
 * @return
 */
</MethodComment>
            <ReturnType>Route&lt;Source,Destination&gt;</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sourceType</ParamName>
                    <ParamType>Source</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>destinationType</ParamName>
                    <ParamType>Destination</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Stream [unGenerifiedStream=routes.stream().filter(r -&gt; sourceType.isAssignableFrom(r.getRouteSource().getClass())).filter(r -&gt; destinationType.isAssignableFrom(r.getRouteDesitnation().getClass()))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>