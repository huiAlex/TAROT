<Class>
    <Id>2352</Id>
    <Package>org.infinispan.remoting.transport.jgroups</Package>
    <ClassName>JGroupsChannelLookup</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>JGroupsChannelLookup  /** 
 * A hook to pass in a JGroups channel.  Implementations need to provide a public no-arg constructor as instances are created via reflection.
 * @author Manik Surtani
 * @since 4.0
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getJGroupsChannel</MethodName>
            <MethodComment>/** 
 * Retrieves a JGroups channel.  Passes in all of the properties used to configure the channel.
 * @param p properties
 * @return a JGroups channel
 */
</MethodComment>
            <ReturnType>JChannel</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>p</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>shouldConnect</MethodName>
            <MethodComment>/** 
 * @return true if the JGroupsTransport should connect the channel before using it; false if the transportshould assume that the channel is connected.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>shouldDisconnect</MethodName>
            <MethodComment>/** 
 * @return true if the JGroupsTransport should disconnect the channel once it is done with it; false ifthe channel is to be left connected.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>shouldClose</MethodName>
            <MethodComment>/** 
 * @return true if the JGroupsTransport should close the channel once it is done with it; false ifthe channel is to be left open.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>