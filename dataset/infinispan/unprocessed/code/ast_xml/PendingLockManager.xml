<Class>
    <Id>3586</Id>
    <Package>org.infinispan.util.concurrent.locks</Package>
    <ClassName>PendingLockManager</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>PendingLockManager  /** 
 * A manager that checks and waits for older topology transaction with conflicting keys.
 * @author Pedro Ruivo
 * @since 8.0
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>checkPendingTransactionsForKey</MethodName>
            <MethodComment>/** 
 * Same as  {@link #awaitPendingTransactionsForKey(TxInvocationContext,Object,long,TimeUnit)} but non-blocking.&lt;p&gt; Multiple invocations with the same transaction returns the same  {@link PendingLockPromise}. For cleanup purposes, {@link #awaitPendingTransactionsForKey(TxInvocationContext,Object,long,TimeUnit)} must be invokedafterwards.
 * @param ctx  the {@link TxInvocationContext}.
 * @param key  the key to check.
 * @param time timeout.
 * @param unit {@link TimeUnit} of {@code time}.
 * @return a {@link PendingLockPromise}.
 */
</MethodComment>
            <ReturnType>PendingLockPromise</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>time</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>unit</ParamName>
                    <ParamType>TimeUnit</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkPendingTransactionsForKeys</MethodName>
            <MethodComment>/** 
 * Same as  {@link #awaitPendingTransactionsForAllKeys(TxInvocationContext,Collection,long,TimeUnit)} butnon-blocking. &lt;p&gt; Multiple invocations with the same transaction returns the same  {@link PendingLockPromise}. For cleanup purposes, {@link #awaitPendingTransactionsForAllKeys(TxInvocationContext,Collection,long,TimeUnit)} must be invokedafterwards.
 * @param ctx  the {@link TxInvocationContext}.
 * @param keys the keys to check.
 * @param time timeout.
 * @param unit {@link TimeUnit} of {@code time}.
 * @return a {@link PendingLockPromise}.
 */
</MethodComment>
            <ReturnType>PendingLockPromise</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>keys</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>time</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>unit</ParamName>
                    <ParamType>TimeUnit</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>awaitPendingTransactionsForKey</MethodName>
            <MethodComment>/** 
 * It waits for any transaction with older topology id to complete that may have the lock for  {@code key} acquired.
 * @param ctx  the {@link TxInvocationContext}.
 * @param key  the key to check.
 * @param time timeout.
 * @param unit {@link TimeUnit} of {@code time}.
 * @return the remaining timeout.
 * @throws InterruptedException if the thread is interrupted while waiting.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>time</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>unit</ParamName>
                    <ParamType>TimeUnit</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>awaitPendingTransactionsForAllKeys</MethodName>
            <MethodComment>/** 
 * It waits for any transaction with older topology id to complete that may have the lock for any key in  {@code keys}acquired.
 * @param ctx  the {@link TxInvocationContext}.
 * @param keys the keys to check.
 * @param time timeout.
 * @param unit {@link TimeUnit} of {@code time}.
 * @return the remaining timeout.
 * @throws InterruptedException if the thread is interrupted while waiting.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>keys</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>time</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>unit</ParamName>
                    <ParamType>TimeUnit</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>