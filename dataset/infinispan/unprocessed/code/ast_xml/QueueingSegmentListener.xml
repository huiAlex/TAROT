<Class>
    <Id>4084</Id>
    <Package>org.infinispan.notifications.cachelistener</Package>
    <ClassName>QueueingSegmentListener</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>CacheStream.SegmentCompletionListener</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>QueueingSegmentListener  /** 
 * This interface describes methods needed for a segment listener that is used when iterating over the current events and be able to queue them properly
 * @author wburns
 * @since 7.0
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>NOTIFIED</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>REMOVED</FieldName>
            <FieldType>Object</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>markKeyAsProcessing</MethodName>
            <MethodComment>/** 
 * This should be invoked on a key before actually processing the data.  This way the handler knows to keep any newer events have come after the iteration.
 * @param key The key being processed
 * @return The previous value that was found to be updated,{@link BaseQueueingSegmentListener#NOTIFIED} if the key waspreviously marked as processing or {@link BaseQueueingSegmentListener#REMOVED} if the key was removedand this value shouldn't be processed
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findCreatedEntries</MethodName>
            <MethodComment>/** 
 * This method is to be called just before marking the transfer as complete and after all keys have been manually processed.  This will return all the entries that were raised in an event but not manually marked.  This is indicative of a CREATE event occurring but not seeing the value.
 * @return
 */
</MethodComment>
            <ReturnType>CacheEntry&lt;K,V&gt;</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>notifiedKey</MethodName>
            <MethodComment>/** 
 * This should invoked after the key has been successfully processed to tell the handler that the key is done.
 * @param key The key that was processed
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>handleEvent</MethodName>
            <MethodComment>/** 
 * This should be called by any listener when an event is generated to possibly queue it.  If it is not queued, then the caller should take appropriate action such as manually firing the invocation.
 * @param wrapper The event that was just raised
 * @param invocation The invocation the event would be fired on
 * @return Whether or not it was queued.  If it wasn't queued the invocation should be fired manually
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>wrapper</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>invocation</ParamName>
                    <ParamType>Event&lt;K,V&gt;</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>transferComplete</MethodName>
            <MethodComment>/** 
 * This is needed to tell the handler when the complete iteration is done.  Depending on the implementation this could also fire all queued events that are remaining.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>