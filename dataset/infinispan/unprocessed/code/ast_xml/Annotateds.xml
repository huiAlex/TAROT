<Class>
    <Id>3871</Id>
    <Package>org.infinispan.cdi.common.util</Package>
    <ClassName>Annotateds</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Annotateds  /** 
 * &lt;p&gt; Utilities for working with  {@link Annotated}s. &lt;/p&gt; &lt;p/&gt; &lt;p&gt; Includes utilities to check the equality of and create unique id's for &lt;code&gt;Annotated&lt;/code&gt; instances. &lt;/p&gt;
 * @author Stuart Douglas &lt;stuart@baileyroberts.com.au&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>callableComparator</FieldName>
            <FieldType>AnnotatedCallableComparator</FieldType>
        </Field>
        <Field>
            <FieldName>callableComparator</FieldName>
            <FieldType>T</FieldType>
        </Field>
        <Field>
            <FieldName>callableComparator</FieldName>
            <FieldType>AnnotatedCallableComparator</FieldType>
        </Field>
        <Field>
            <FieldName>callableComparator</FieldName>
            <FieldType>T</FieldType>
        </Field>
        <Field>
            <FieldName>INSTANCE</FieldName>
            <FieldType>Comparator</FieldType>
        </Field>
        <Field>
            <FieldName>INSTANCE</FieldName>
            <FieldType>Annotation</FieldType>
        </Field>
        <Field>
            <FieldName>INSTANCE</FieldName>
            <FieldType>Comparator</FieldType>
        </Field>
        <Field>
            <FieldName>INSTANCE</FieldName>
            <FieldType>Method</FieldType>
        </Field>
        <Field>
            <FieldName>SEPERATOR</FieldName>
            <FieldType>char</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>compare</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>arg0</ParamName>
                    <ParamType>? super T</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>arg1</ParamName>
                    <ParamType>? super T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [result=(arg0.getJavaMember().getName().compareTo(arg1.getJavaMember().getName()))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>instance</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>AnnotatedMethod&lt;? super T&gt;</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compare</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>arg0</ParamName>
                    <ParamType>? super T</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>arg1</ParamName>
                    <ParamType>? super T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [result=callableComparator.compare(arg0,arg1)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>instance</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>AnnotatedConstructor&lt;? super T&gt;</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compare</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>arg0</ParamName>
                    <ParamType>? super T</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>arg1</ParamName>
                    <ParamType>? super T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [result=callableComparator.compare(arg0,arg1)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>instance</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>AnnotatedField&lt;? super T&gt;</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compare</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>arg0</ParamName>
                    <ParamType>? super T</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>arg1</ParamName>
                    <ParamType>? super T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compare</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>arg0</ParamName>
                    <ParamType>Annotation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>arg1</ParamName>
                    <ParamType>Annotation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compare</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>arg0</ParamName>
                    <ParamType>Method</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>arg1</ParamName>
                    <ParamType>Method</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>Annotateds</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createTypeId</MethodName>
            <MethodComment>/** 
 * Generates a deterministic signature for an  {@link AnnotatedType}. Two &lt;code&gt;AnnotatedType&lt;/code&gt;s that have the same annotations and underlying type will generate the same signature. &lt;p/&gt; This can be used to create a unique bean id for a passivation capable bean that is added directly through the SPI.
 * @param annotatedType The type to generate a signature for
 * @return A string representation of the annotated type
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>annotatedType</ParamName>
                    <ParamType>X</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createTypeId</MethodName>
            <MethodComment>/** 
 * Generates a unique signature for a concrete class. Annotations are not read directly from the class, but are read from the &lt;code&gt;annotations&lt;/code&gt;, &lt;code&gt;methods&lt;/code&gt;, &lt;code&gt;fields&lt;/code&gt; and &lt;code&gt;constructors&lt;/code&gt; arguments
 * @param clazz        The java class tyoe
 * @param annotations  Annotations present on the java class
 * @param methods      The AnnotatedMethods to include in the signature
 * @param fields       The AnnotatedFields to include in the signature
 * @param constructors The AnnotatedConstructors to include in the signature
 * @return A string representation of the type
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>X</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>annotations</ParamName>
                    <ParamType>Annotation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>methods</ParamName>
                    <ParamType>AnnotatedMethod&lt;? super X&gt;</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fields</ParamName>
                    <ParamType>AnnotatedField&lt;? super X&gt;</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>constructors</ParamName>
                    <ParamType>AnnotatedConstructor&lt;X&gt;</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuilder [builder=new StringBuilder()]</InnerVar>
                <InnerVar>List&lt;AnnotatedField&lt;? super X&gt;&gt; [sortedFields=new ArrayList&lt;AnnotatedField&lt;? super X&gt;&gt;()]</InnerVar>
                <InnerVar>List&lt;AnnotatedMethod&lt;? super X&gt;&gt; [sortedMethods=new ArrayList&lt;AnnotatedMethod&lt;? super X&gt;&gt;()]</InnerVar>
                <InnerVar>List&lt;AnnotatedConstructor&lt;? super X&gt;&gt; [sortedConstructors=new ArrayList&lt;AnnotatedConstructor&lt;? super X&gt;&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>builder;append;[clazz.getName()]</InnerMethodInvoke>
                <InnerMethodInvoke>builder;append;[createAnnotationCollectionId(annotations)]</InnerMethodInvoke>
                <InnerMethodInvoke>builder;append;["{"]</InnerMethodInvoke>
                <InnerMethodInvoke>sortedFields;addAll;[fields]</InnerMethodInvoke>
                <InnerMethodInvoke>Collections;sort;[sortedFields, AnnotatedFieldComparator.&lt;X&gt;instance()]</InnerMethodInvoke>
                <InnerMethodInvoke>sortedMethods;addAll;[methods]</InnerMethodInvoke>
                <InnerMethodInvoke>Collections;sort;[sortedMethods, AnnotatedMethodComparator.&lt;X&gt;instance()]</InnerMethodInvoke>
                <InnerMethodInvoke>sortedConstructors;addAll;[constructors]</InnerMethodInvoke>
                <InnerMethodInvoke>Collections;sort;[sortedConstructors, AnnotatedConstructorComparator.&lt;X&gt;instance()]</InnerMethodInvoke>
                <InnerMethodInvoke>builder;append;["}"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createFieldId</MethodName>
            <MethodComment>/** 
 * Generates a deterministic signature for an  {@link AnnotatedField}. Two &lt;code&gt;AnnotatedField&lt;/code&gt;s that have the same annotations and underlying field will generate the same signature.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>field</ParamName>
                    <ParamType>X</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createFieldId</MethodName>
            <MethodComment>/** 
 * Creates a deterministic signature for a  {@link Field}.
 * @param field       The field to generate the signature for
 * @param annotations The annotations to include in the signature
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>field</ParamName>
                    <ParamType>Field</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>annotations</ParamName>
                    <ParamType>Annotation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuilder [builder=new StringBuilder()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>builder;append;[field.getDeclaringClass().getName()]</InnerMethodInvoke>
                <InnerMethodInvoke>builder;append;['.']</InnerMethodInvoke>
                <InnerMethodInvoke>builder;append;[field.getName()]</InnerMethodInvoke>
                <InnerMethodInvoke>builder;append;[createAnnotationCollectionId(annotations)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createCallableId</MethodName>
            <MethodComment>/** 
 * Generates a deterministic signature for an  {@link AnnotatedCallable}. Two &lt;code&gt;AnnotatedCallable&lt;/code&gt;s that have the same annotations and underlying callable will generate the same signature.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>method</ParamName>
                    <ParamType>X</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuilder [builder=new StringBuilder()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>builder;append;[method.getJavaMember().getDeclaringClass().getName()]</InnerMethodInvoke>
                <InnerMethodInvoke>builder;append;['.']</InnerMethodInvoke>
                <InnerMethodInvoke>builder;append;[method.getJavaMember().getName()]</InnerMethodInvoke>
                <InnerMethodInvoke>builder;append;[createAnnotationCollectionId(method.getAnnotations())]</InnerMethodInvoke>
                <InnerMethodInvoke>builder;append;[createParameterListId(method.getParameters())]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createParameterListId</MethodName>
            <MethodComment>/** 
 * Generates a unique string representation of a list of {@link AnnotatedParameter}s.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parameters</ParamName>
                    <ParamType>AnnotatedParameter&lt;X&gt;</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuilder [builder=new StringBuilder()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>builder;append;["("]</InnerMethodInvoke>
                <InnerMethodInvoke>builder;append;[")"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createParameterId</MethodName>
            <MethodComment>/** 
 * Creates a string representation of an  {@link AnnotatedParameter}.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>annotatedParameter</ParamName>
                    <ParamType>X</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createParameterId</MethodName>
            <MethodComment>/** 
 * Creates a string representation of a given type and set of annotations.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>Type</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>annotations</ParamName>
                    <ParamType>Annotation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuilder [builder=new StringBuilder()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>builder;append;[createAnnotationCollectionId(annotations)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasMethodParameters</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>callable</ParamName>
                    <ParamType>X</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createAnnotationCollectionId</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>annotations</ParamName>
                    <ParamType>Annotation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuilder [builder=new StringBuilder()]</InnerVar>
                <InnerVar>List&lt;Annotation&gt; [annotationList=new ArrayList&lt;Annotation&gt;(annotations.size())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>builder;append;['[']</InnerMethodInvoke>
                <InnerMethodInvoke>annotationList;addAll;[annotations]</InnerMethodInvoke>
                <InnerMethodInvoke>Collections;sort;[annotationList, AnnotationComparator.INSTANCE]</InnerMethodInvoke>
                <InnerMethodInvoke>builder;append;[']']</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>