<Class>
    <Id>3656</Id>
    <Package>org.infinispan.io</Package>
    <ClassName>GridFilesystem</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>GridFilesystem  /** 
 * Entry point for GridFile and GridInputStream / GridOutputStream
 * @author Bela Ban
 * @author Marko Luksa
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>data</FieldName>
            <FieldType>Cache</FieldType>
        </Field>
        <Field>
            <FieldName>data</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>metadata</FieldName>
            <FieldType>Cache</FieldType>
        </Field>
        <Field>
            <FieldName>metadata</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>defaultChunkSize</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>GridFilesystem</MethodName>
            <MethodComment>/** 
 * Creates an instance. The data and metadata caches should already have been setup and started
 * @param data the cache where the actual file contents are stored
 * @param metadata the cache where file meta-data is stored
 * @param defaultChunkSize the default size of the file chunks
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>data</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>metadata</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>defaultChunkSize</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>GridFilesystem</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>data</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>metadata</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFile</MethodName>
            <MethodComment>/** 
 * Returns the file denoted by pathname.
 * @param pathname the full path of the requested file
 * @return the File stored at pathname
 */
</MethodComment>
            <ReturnType>File</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pathname</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFile</MethodName>
            <MethodComment>/** 
 * Returns the file denoted by pathname. If the file does not yet exist, it is initialized with the given chunkSize. However, if the file at pathname already exists, the chunkSize parameter is ignored and the file's actual chunkSize is used.
 * @param pathname the full path of the requested file
 * @param chunkSize the size of the file's chunks. This parameter is only used for non-existing files.
 * @return the File stored at pathname
 */
</MethodComment>
            <ReturnType>File</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pathname</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>chunkSize</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFile</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>File</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parent</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>child</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFile</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>File</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parent</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>child</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>chunkSize</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFile</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>File</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parent</ParamName>
                    <ParamType>File</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>child</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFile</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>File</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parent</ParamName>
                    <ParamType>File</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>child</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>chunkSize</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOutput</MethodName>
            <MethodComment>/** 
 * Opens an OutputStream for writing to the file denoted by pathname. If a file at pathname already exists, writing to the returned OutputStream will overwrite the contents of the file.
 * @param pathname the path to write to
 * @return an OutputStream for writing to the file at pathname
 * @throws IOException if an error occurs
 */
</MethodComment>
            <ReturnType>OutputStream</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pathname</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOutput</MethodName>
            <MethodComment>/** 
 * Opens an OutputStream for writing to the file denoted by pathname. The OutputStream can either overwrite the existing file or append to it.
 * @param pathname the path to write to
 * @param append if true, the bytes written to the OutputStream will be appended to the end of the file. If false,the bytes will overwrite the original contents.
 * @return an OutputStream for writing to the file at pathname
 * @throws IOException if an error occurs
 */
</MethodComment>
            <ReturnType>OutputStream</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pathname</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>append</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOutput</MethodName>
            <MethodComment>/** 
 * Opens an OutputStream for writing to the file denoted by pathname.
 * @param pathname the file to write to
 * @param append if true, the bytes written to the OutputStream will be appended to the end of the file
 * @param chunkSize the size of the file's chunks. This parameter is honored only when the file at pathname doesnot yet exist. If the file already exists, the file's own chunkSize has precedence.
 * @return the OutputStream for writing to the file
 * @throws IOException if the file is a directory, cannot be created or some other error occurs
 */
</MethodComment>
            <ReturnType>OutputStream</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pathname</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>append</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>chunkSize</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>GridFile [file=(GridFile)getFile(pathname,chunkSize)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkIsNotDirectory;[file]</InnerMethodInvoke>
                <InnerMethodInvoke>null;createIfNeeded;[file]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOutput</MethodName>
            <MethodComment>/** 
 * Opens an OutputStream for writing to the given file.
 * @param file the file to write to
 * @return an OutputStream for writing to the file
 * @throws IOException if an error occurs
 */
</MethodComment>
            <ReturnType>OutputStream</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>file</ParamName>
                    <ParamType>GridFile</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkIsNotDirectory;[file]</InnerMethodInvoke>
                <InnerMethodInvoke>null;createIfNeeded;[file]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkIsNotDirectory</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>file</ParamName>
                    <ParamType>GridFile</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FileNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createIfNeeded</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>file</ParamName>
                    <ParamType>GridFile</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getInput</MethodName>
            <MethodComment>/** 
 * Opens an InputStream for reading from the file denoted by pathname.
 * @param pathname the full path of the file to read from
 * @return an InputStream for reading from the file
 * @throws FileNotFoundException if the file does not exist or is a directory
 */
</MethodComment>
            <ReturnType>InputStream</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pathname</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>GridFile [file=(GridFile)getFile(pathname)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkFileIsReadable;[file]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FileNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkFileIsReadable</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>file</ParamName>
                    <ParamType>GridFile</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkFileExists;[file]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkIsNotDirectory;[file]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FileNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkFileExists</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>file</ParamName>
                    <ParamType>GridFile</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FileNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getInput</MethodName>
            <MethodComment>/** 
 * Opens an InputStream for reading from the given file.
 * @param file the file to open for reading
 * @return an InputStream for reading from the file
 * @throws FileNotFoundException if the file does not exist or is a directory
 */
</MethodComment>
            <ReturnType>InputStream</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>file</ParamName>
                    <ParamType>File</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FileNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getReadableChannel</MethodName>
            <MethodComment>/** 
 * Opens a ReadableGridFileChannel for reading from the file denoted by the given file path. One of the benefits of using a channel over an InputStream is the possibility to randomly seek to any position in the file (see #ReadableGridChannel.position()).
 * @param pathname path of the file to open for reading
 * @return a ReadableGridFileChannel for reading from the file
 * @throws FileNotFoundException if the file does not exist or is a directory
 */
</MethodComment>
            <ReturnType>ReadableGridFileChannel</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pathname</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>GridFile [file=(GridFile)getFile(pathname)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkFileIsReadable;[file]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FileNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getWritableChannel</MethodName>
            <MethodComment>/** 
 * Opens a WritableGridFileChannel for writing to the file denoted by pathname. If a file at pathname already exists, writing to the returned channel will overwrite the contents of the file.
 * @param pathname the path to write to
 * @return a WritableGridFileChannel for writing to the file at pathname
 * @throws IOException if an error occurs
 */
</MethodComment>
            <ReturnType>WritableGridFileChannel</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pathname</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getWritableChannel</MethodName>
            <MethodComment>/** 
 * Opens a WritableGridFileChannel for writing to the file denoted by pathname. The channel can either overwrite the existing file or append to it.
 * @param pathname the path to write to
 * @param append if true, the bytes written to the WritableGridFileChannel will be appended to the end of the file.If false, the bytes will overwrite the original contents.
 * @return a WritableGridFileChannel for writing to the file at pathname
 * @throws IOException if an error occurs
 */
</MethodComment>
            <ReturnType>WritableGridFileChannel</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pathname</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>append</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getWritableChannel</MethodName>
            <MethodComment>/** 
 * Opens a WritableGridFileChannel for writing to the file denoted by pathname.
 * @param pathname the file to write to
 * @param append if true, the bytes written to the channel will be appended to the end of the file
 * @param chunkSize the size of the file's chunks. This parameter is honored only when the file at pathname doesnot yet exist. If the file already exists, the file's own chunkSize has precedence.
 * @return a WritableGridFileChannel for writing to the file
 * @throws IOException if the file is a directory, cannot be created or some other error occurs
 */
</MethodComment>
            <ReturnType>WritableGridFileChannel</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pathname</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>append</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>chunkSize</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>GridFile [file=(GridFile)getFile(pathname,chunkSize)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkIsNotDirectory;[file]</InnerMethodInvoke>
                <InnerMethodInvoke>null;createIfNeeded;[file]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>remove</MethodName>
            <MethodComment>/** 
 * Removes the file denoted by absolutePath.
 * @param absolutePath the absolute path of the file to remove
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>absolutePath</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>GridFile.Metadata [md=metadata.get(absolutePath)]</InnerVar>
                <InnerVar>int [numChunks=md.getLength() / md.getChunkSize() + 1]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>