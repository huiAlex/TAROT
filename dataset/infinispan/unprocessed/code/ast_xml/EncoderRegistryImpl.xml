<Class>
    <Id>845</Id>
    <Package>org.infinispan.marshall.core</Package>
    <ClassName>EncoderRegistryImpl</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>EncoderRegistry</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>EncoderRegistryImpl  /** 
 * @see EncoderRegistry
 * @since 9.1
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>encoderMap</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>encoderMap</FieldName>
            <FieldType>Class&lt;? extends Encoder&gt;</FieldType>
        </Field>
        <Field>
            <FieldName>wrapperMap</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>wrapperMap</FieldName>
            <FieldType>Class&lt;? extends Wrapper&gt;</FieldType>
        </Field>
        <Field>
            <FieldName>encoderById</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>encoderById</FieldName>
            <FieldType>Short</FieldType>
        </Field>
        <Field>
            <FieldName>wrapperById</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>wrapperById</FieldName>
            <FieldType>Byte</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>registerEncoder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>encoder</ParamName>
                    <ParamType>Encoder</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>short [id=encoder.id()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>encoderById;put;[id, encoder.getClass()]</InnerMethodInvoke>
                <InnerMethodInvoke>encoderMap;put;[encoder.getClass(), encoder]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>registerWrapper</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>wrapper</ParamName>
                    <ParamType>Wrapper</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>byte [id=wrapper.id()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>wrapperById;put;[id, wrapper.getClass()]</InnerMethodInvoke>
                <InnerMethodInvoke>wrapperMap;put;[wrapper.getClass(), wrapper]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEncoder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Encoder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>? extends Encoder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>encoderId</ParamName>
                    <ParamType>Short</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Class&lt;? extends Encoder&gt; [encoderClass=clazz == null ? encoderById.get(encoderId) : clazz]</InnerVar>
                <InnerVar>Encoder [encoder=encoderMap.get(encoderClass)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getWrapper</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Wrapper</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>? extends Wrapper</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wrapperId</ParamName>
                    <ParamType>Byte</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Class&lt;? extends Wrapper&gt; [wrapperClass=clazz == null ? wrapperById.get(wrapperId) : clazz]</InnerVar>
                <InnerVar>Wrapper [wrapper=wrapperMap.get(wrapperClass)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>