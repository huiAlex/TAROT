<Class>
    <Id>1027</Id>
    <Package>org.infinispan.query.indexmanager</Package>
    <ClassName>IndexingBackend</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>IndexingBackend  /** 
 * The main IndexingBackend implementations are the one forwarding to another node, and the one applying to the local node. We when defined a set of additional implementations to handle intermediate transitionaly behaviour, each such implementation respects this contract.
 * @see ClusteredSwitchingBackend
 * @author Sanne Grinovero &lt;sanne@hibernate.org&gt; (C) 2014 Red Hat Inc.
 * @since 7.0
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>flushAndClose</MethodName>
            <MethodComment>/** 
 * Signals that the current implementation is being discarded, and if any pending update operations are being buffered these should be delegated for further processing to the replacement IndexingBackend.
 * @param replacement the new IndexingBackend taking the place of this.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>replacement</ParamName>
                    <ParamType>IndexingBackend</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>applyWork</MethodName>
            <MethodComment>/** 
 * Receives transactional index update operations from the Search engine.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>workList</ParamName>
                    <ParamType>LuceneWork</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>monitor</ParamName>
                    <ParamType>IndexingMonitor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indexManager</ParamName>
                    <ParamType>IndexManager</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>applyStreamWork</MethodName>
            <MethodComment>/** 
 * Receives stream-style index update operations from the Search engine.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>singleOperation</ParamName>
                    <ParamType>LuceneWork</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>monitor</ParamName>
                    <ParamType>IndexingMonitor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indexManager</ParamName>
                    <ParamType>IndexManager</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isMasterLocal</MethodName>
            <MethodComment>/** 
 * Mostly useful for testing and diagnostics.
 * @return {@code true} if this node is actively able to write to the index, without delegating or postponing the write operations.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>