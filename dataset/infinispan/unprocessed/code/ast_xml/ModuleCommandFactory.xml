<Class>
    <Id>1945</Id>
    <Package>org.infinispan.commands.module</Package>
    <ClassName>ModuleCommandFactory</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ModuleCommandFactory  /** 
 * Modules which wish to implement their own commands and visitors must also provide an implementation of this interface and declare it in their &lt;tt&gt;infinispan-module.properties&lt;/tt&gt; file under key &lt;tt&gt;infinispan.module.command.factory&lt;/tt&gt;. &lt;p /&gt; Implementations &lt;b&gt;must&lt;/b&gt; be public classes with a public, no-arg constructor for instantiation. &lt;p /&gt; Note that this is a  {@link Scopes#GLOBAL} component and as such cannot have {@link Inject} methods referring to{@link Scopes#NAMED_CACHE} scoped components.  For such components, use a corresponding {@link Scopes#NAMED_CACHE}-scoped {@link ModuleCommandInitializer}. &lt;p /&gt;
 * @author Manik Surtani
 * @since 5.0
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getModuleCommands</MethodName>
            <MethodComment>/** 
 * Provides a map of command IDs to command types of all the commands handled by the command factory instance. Unmarshalling requests for these command IDs will be dispatched to this implementation.
 * @return map of command IDs to command types handled by this implementation.
 */
</MethodComment>
            <ReturnType>Byte</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fromStream</MethodName>
            <MethodComment>/** 
 * Construct and initialize a  {@link ReplicableCommand} based on the command id.
 * @param commandId command id to construct
 * @return a ReplicableCommand
 */
</MethodComment>
            <ReturnType>ReplicableCommand</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>commandId</ParamName>
                    <ParamType>byte</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fromStream</MethodName>
            <MethodComment>/** 
 * Construct and initialize a  {@link CacheRpcCommand} based on the command id.
 * @param commandId  command id to construct
 * @param cacheName  cache name at which command to be created is directed
 * @return           a {@link CacheRpcCommand}
 */
</MethodComment>
            <ReturnType>CacheRpcCommand</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>commandId</ParamName>
                    <ParamType>byte</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cacheName</ParamName>
                    <ParamType>ByteString</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>