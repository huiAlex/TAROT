<Class>
    <Id>2082</Id>
    <Package>org.infinispan.server.endpoint.subsystem</Package>
    <ClassName>ModelNodeUtils</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ModelNodeUtils  /** 
 * @author gustavonalle
 * @since 8.1
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>addToList</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ModelNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>listNode</ParamName>
                    <ParamType>ModelNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>elements</ParamName>
                    <ParamType>ModelNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ModelNode [result=listNode.clone()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>elements.asList().stream().map(ModelNode::asString);forEach;[toAdd -&gt; {
  boolean existent=result.asList().stream().anyMatch(m -&gt; m.asString().equals(toAdd));
  if (!existent) {
    result.add().set(toAdd);
  }
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>contains</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>list</ParamName>
                    <ParamType>ModelNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeFromList</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ModelNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>original</ParamName>
                    <ParamType>ModelNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>elements</ParamName>
                    <ParamType>ModelNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ModelNode [result=new ModelNode()]</InnerVar>
                <InnerVar>Set&lt;String&gt; [toRemove=elements.asList().stream().map(ModelNode::asString).collect(Collectors.toSet())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>original.asList().stream().map(ModelNode::asString).filter(e -&gt; !toRemove.contains(e));forEach;[result::add]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>