<Class>
    <Id>2327</Id>
    <Package>org.infinispan.server.jgroups</Package>
    <ClassName>JChannelFactory</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>ChannelFactory</SuperInterface>
        <SuperInterface>ProtocolStackConfigurator</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>JChannelFactory  /** 
 * Factory for creating fork-able channels.
 * @author Paul Ferraro
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>UNKNOWN_FORK_RESPONSE</FieldName>
            <FieldType>ByteBuffer</FieldType>
        </Field>
        <Field>
            <FieldName>configuration</FieldName>
            <FieldType>ProtocolStackConfiguration</FieldType>
        </Field>
        <Field>
            <FieldName>id</FieldName>
            <FieldType>short</FieldType>
        </Field>
        <Field>
            <FieldName>protocolClass</FieldName>
            <FieldType>Class</FieldType>
        </Field>
        <Field>
            <FieldName>protocolClass</FieldName>
            <FieldType>? extends Protocol</FieldType>
        </Field>
        <Field>
            <FieldName>properties</FieldName>
            <FieldType>Set</FieldType>
        </Field>
        <Field>
            <FieldName>properties</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>view</FieldName>
            <FieldType>Set</FieldType>
        </Field>
        <Field>
            <FieldName>view</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>JChannelFactory</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>configuration</ParamName>
                    <ParamType>ProtocolStackConfiguration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getProtocolStackConfiguration</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ProtocolStackConfiguration</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createChannel</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>JChannel</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>id</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PrivilegedExceptionAction&lt;JChannel&gt; [action=() -&gt; new JChannel(JChannelFactory.this)]</InnerVar>
                <InnerVar>JChannel [channel=WildFlySecurityManager.doChecked(action)]</InnerVar>
                <InnerVar>ProtocolStack [stack=channel.getProtocolStack()]</InnerVar>
                <InnerVar>TP [transport=stack.getTransport()]</InnerVar>
                <InnerVar>RelayConfiguration [relayConfig=this.configuration.getRelay()]</InnerVar>
                <InnerVar>UnknownForkHandler [unknownForkHandler=new UnknownForkHandler(){
  private final short id=ClassConfigurator.getProtocolId(RequestCorrelator.class);
  @Override public Object handleUnknownForkStack(  Message message,  String forkStackId){
    return this.handle(message);
  }
  @Override public Object handleUnknownForkChannel(  Message message,  String forkChannelId){
    return this.handle(message);
  }
  private Object handle(  Message message){
    Header header=message.getHeader(this.id);
    if ((header != null) &amp;&amp; (header.type == Header.REQ) &amp;&amp; header.rspExpected()) {
      Message response=message.makeReply().setFlag(message.getFlags()).clearFlag(Message.Flag.RSVP);
      response.putHeader(FORK.ID,message.getHeader(FORK.ID));
      response.putHeader(this.id,new Header(Header.RSP,header.req_id,this.id));
      response.setBuffer(UNKNOWN_FORK_RESPONSE.array());
      channel.down(response);
    }
    return null;
  }
}
]</InnerVar>
                <InnerVar>FORK [fork=new FORK()]</InnerVar>
                <InnerVar>SaslConfiguration [saslConfig=this.configuration.getSasl()]</InnerVar>
                <InnerVar>TransportConfiguration.Topology [topology=this.configuration.getTransport().getTopology()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>JGroupsLogger.ROOT_LOGGER;debugf;["Creating channel %s from stack %s", id, this.configuration.getName()]</InnerMethodInvoke>
                <InnerMethodInvoke>this;init;[transport]</InnerMethodInvoke>
                <InnerMethodInvoke>fork;setUnknownForkHandler;[unknownForkHandler]</InnerMethodInvoke>
                <InnerMethodInvoke>stack;addProtocol;[fork]</InnerMethodInvoke>
                <InnerMethodInvoke>fork;init;[]</InnerMethodInvoke>
                <InnerMethodInvoke>channel;setName;[this.configuration.getNodeName()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createChannel</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>JChannel</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>JChannel [channel=remoteSite.getChannel()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>channel.getProtocolStack();removeProtocol;[FORK.class]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>handleUnknownForkStack</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>message</ParamName>
                    <ParamType>Message</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>forkStackId</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>handleUnknownForkChannel</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>message</ParamName>
                    <ParamType>Message</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>forkChannelId</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>handle</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>message</ParamName>
                    <ParamType>Message</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Header [header=message.getHeader(this.id)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isUnknownForkResponse</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>buffer</ParamName>
                    <ParamType>ByteBuffer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>init</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>transport</ParamName>
                    <ParamType>TP</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>TransportConfiguration [transportConfig=this.configuration.getTransport()]</InnerVar>
                <InnerVar>SocketBinding [binding=transportConfig.getSocketBinding()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getProtocolStackString</MethodName>
            <MethodComment>/** 
 * {@inheritDoc}
 * @see org.jgroups.conf.ProtocolStackConfigurator#getProtocolStackString()
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getProtocolStack</MethodName>
            <MethodComment>/** 
 * {@inheritDoc}
 * @see org.jgroups.conf.ProtocolStackConfigurator#getProtocolStack()
 */
</MethodComment>
            <ReturnType>org.jgroups.conf.ProtocolConfiguration</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>List&lt;org.jgroups.conf.ProtocolConfiguration&gt; [stack=new ArrayList&lt;&gt;(this.configuration.getProtocols().size() + 1)]</InnerVar>
                <InnerVar>TransportConfiguration [transport=this.configuration.getTransport()]</InnerVar>
                <InnerVar>org.jgroups.conf.ProtocolConfiguration [protocol=createProtocol(this.configuration,transport)]</InnerVar>
                <InnerVar>Map&lt;String,String&gt; [properties=protocol.getProperties()]</InnerVar>
                <InnerVar>Introspector [introspector=new Introspector(protocol)]</InnerVar>
                <InnerVar>SocketBinding [binding=transport.getSocketBinding()]</InnerVar>
                <InnerVar>SocketBinding [diagnosticsSocketBinding=transport.getDiagnosticsSocketBinding()]</InnerVar>
                <InnerVar>boolean [diagnostics=(diagnosticsSocketBinding != null)]</InnerVar>
                <InnerVar>Class&lt;? extends TP&gt; [transportClass=introspector.getProtocolClass().asSubclass(TP.class)]</InnerVar>
                <InnerVar>PrivilegedExceptionAction&lt;TP&gt; [action=transportClass::newInstance]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>properties;put;["enable_diagnostics", String.valueOf(diagnostics)]</InnerMethodInvoke>
                <InnerMethodInvoke>stack;add;[protocol]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createProtocols</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>org.jgroups.conf.ProtocolConfiguration</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>stack</ParamName>
                    <ParamType>ProtocolStackConfiguration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>multicastCapable</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;ProtocolConfiguration&gt; [protocols=stack.getProtocols()]</InnerVar>
                <InnerVar>List&lt;org.jgroups.conf.ProtocolConfiguration&gt; [result=new ArrayList&lt;&gt;(protocols.size())]</InnerVar>
                <InnerVar>TransportConfiguration [transport=stack.getTransport()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createProtocol</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>org.jgroups.conf.ProtocolConfiguration</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>stack</ParamName>
                    <ParamType>ProtocolStackConfiguration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>protocol</ParamName>
                    <ParamType>ProtocolConfiguration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [protocolName=protocol.getName()]</InnerVar>
                <InnerVar>ModuleIdentifier [module=protocol.getModule()]</InnerVar>
                <InnerVar>Map&lt;String,String&gt; [properties=new HashMap&lt;&gt;(stack.getDefaultProperties(protocolName))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>properties;putAll;[protocol.getProperties()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOriginalProperties</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>configureBindAddress</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>introspector</ParamName>
                    <ParamType>Introspector</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>config</ParamName>
                    <ParamType>org.jgroups.conf.ProtocolConfiguration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>binding</ParamName>
                    <ParamType>SocketBinding</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setSocketBindingProperty;[introspector, config, "bind_addr", binding.getSocketAddress().getAddress().getHostAddress()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>configureServerSocket</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>introspector</ParamName>
                    <ParamType>Introspector</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>config</ParamName>
                    <ParamType>org.jgroups.conf.ProtocolConfiguration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>property</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>binding</ParamName>
                    <ParamType>SocketBinding</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setSocketBindingProperty;[introspector, config, property, String.valueOf(binding.getSocketAddress().getPort())]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>configureMulticastSocket</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>introspector</ParamName>
                    <ParamType>Introspector</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>config</ParamName>
                    <ParamType>org.jgroups.conf.ProtocolConfiguration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>addressProperty</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>portProperty</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>binding</ParamName>
                    <ParamType>SocketBinding</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setSocketBindingProperty</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>introspector</ParamName>
                    <ParamType>Introspector</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>config</ParamName>
                    <ParamType>org.jgroups.conf.ProtocolConfiguration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setProperty</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>introspector</ParamName>
                    <ParamType>Introspector</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>config</ParamName>
                    <ParamType>org.jgroups.conf.ProtocolConfiguration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>Introspector</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>config</ParamName>
                    <ParamType>org.jgroups.conf.ProtocolConfiguration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [name=config.getProtocolName()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getProtocolClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>? extends Protocol</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasProperty</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>property</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sitesUp</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sites</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>JGroupsLogger [log=JGroupsLogger.ROOT_LOGGER]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.view;addAll;[Arrays.asList(sites)]</InnerMethodInvoke>
                <InnerMethodInvoke>log;receivedXSiteClusterView;[this.view]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sitesDown</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sites</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>JGroupsLogger [log=JGroupsLogger.ROOT_LOGGER]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.view;removeAll;[Arrays.asList(sites)]</InnerMethodInvoke>
                <InnerMethodInvoke>log;receivedXSiteClusterView;[this.view]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>get</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>