<Class>
    <Id>2033</Id>
    <Package>org.infinispan.server.jgroups.subsystem</Package>
    <ClassName>ForkProtocolResourceRegistrationHandler</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>OperationStepHandler</SuperInterface>
        <SuperInterface>ProtocolMetricsHandler.ProtocolLocator</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ForkProtocolResourceRegistrationHandler  /** 
 * Operation handler for registration of fork protocol runtime resources.
 * @author Paul Ferraro
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>findProtocol</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Protocol</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>registry</ParamName>
                    <ParamType>ServiceRegistry</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>address</ParamName>
                    <ParamType>PathAddress</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [channelName=address.getElement(address.size() - 3).getValue()]</InnerVar>
                <InnerVar>String [forkName=address.getElement(address.size() - 2).getValue()]</InnerVar>
                <InnerVar>String [protocolName=address.getElement(address.size() - 1).getValue()]</InnerVar>
                <InnerVar>ServiceController&lt;?&gt; [controller=registry.getService(ChannelServiceName.CHANNEL.getServiceName(channelName))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ClassNotFoundException</ExceptionType>
                <ExceptionType>ModuleLoadException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>execute</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>OperationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>operation</ParamName>
                    <ParamType>ModelNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ManagementResourceRegistration [registration=context.getResourceRegistrationForUpdate()]</InnerVar>
                <InnerVar>String [protocolName=context.getCurrentAddressValue()]</InnerVar>
                <InnerVar>ModuleIdentifier [module=ModelNodes.asModuleIdentifier(ProtocolResourceDefinition.MODULE.resolveModelAttribute(context,operation))]</InnerVar>
                <InnerVar>Class&lt;? extends Protocol&gt; [protocolClass=ProtocolResourceRegistrationHandler.findProtocolClass(context,protocolName,module)]</InnerVar>
                <InnerVar>Map&lt;String,Attribute&gt; [attributes=ProtocolMetricsHandler.findProtocolAttributes(protocolClass)]</InnerVar>
                <InnerVar>OverrideDescriptionProvider [provider=new OverrideDescriptionProvider(){
  @Override public Map&lt;String,ModelNode&gt; getAttributeOverrideDescriptions(  Locale locale){
    Map&lt;String,ModelNode&gt; result=new HashMap&lt;&gt;();
    for (    Attribute attribute : attributes.values()) {
      ModelNode value=new ModelNode();
      value.get(ModelDescriptionConstants.DESCRIPTION).set(attribute.getDescription());
      result.put(attribute.getName(),value);
    }
    return result;
  }
  @Override public Map&lt;String,ModelNode&gt; getChildTypeOverrideDescriptions(  Locale locale){
    return Collections.emptyMap();
  }
}
]</InnerVar>
                <InnerVar>ManagementResourceRegistration [protocolRegistration=registration.registerOverrideModel(protocolName,provider)]</InnerVar>
                <InnerVar>ProtocolMetricsHandler [handler=new ProtocolMetricsHandler(this)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>OperationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAttributeOverrideDescriptions</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>locale</ParamName>
                    <ParamType>Locale</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Map&lt;String,ModelNode&gt; [result=new HashMap&lt;&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getChildTypeOverrideDescriptions</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>locale</ParamName>
                    <ParamType>Locale</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>