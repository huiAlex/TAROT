<Class>
    <Id>3165</Id>
    <Package>org.jboss.as.clustering.infinispan.subsystem</Package>
    <ClassName>CacheConfigurationAdd</ClassName>
    <SuperClass>AbstractAddStepHandler</SuperClass>
    <SuperInterfaceList>
        <SuperInterface>RestartableServiceHandler</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>CacheConfigurationAdd  /** 
 * Base class for cache add handlers
 * @author Richard Achmatowicz (c) 2011 Red Hat Inc.
 * @author Tristan Tarrant
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Logger</FieldType>
        </Field>
        <Field>
            <FieldName>DEFAULTS</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>defaults</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>defaults</FieldName>
            <FieldType>CacheMode</FieldType>
        </Field>
        <Field>
            <FieldName>loaderKeys</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>storeKeys</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>mode</FieldName>
            <FieldType>CacheMode</FieldType>
        </Field>
        <Field>
            <FieldName>callbackHandle</FieldName>
            <FieldType>PathManager.Callback.Handle</FieldType>
        </Field>
        <Field>
            <FieldName>callbackHandle</FieldName>
            <FieldType>PathManager.Callback.Handle</FieldType>
        </Field>
        <Field>
            <FieldName>callbackHandle</FieldName>
            <FieldType>PathManager.Callback.Handle</FieldType>
        </Field>
        <Field>
            <FieldName>name</FieldName>
            <FieldType>ServiceName</FieldType>
        </Field>
        <Field>
            <FieldName>type</FieldName>
            <FieldType>Class</FieldType>
        </Field>
        <Field>
            <FieldName>type</FieldName>
            <FieldType>I</FieldType>
        </Field>
        <Field>
            <FieldName>target</FieldName>
            <FieldType>Injector</FieldType>
        </Field>
        <Field>
            <FieldName>target</FieldName>
            <FieldType>I</FieldType>
        </Field>
        <Field>
            <FieldName>container</FieldName>
            <FieldType>Value</FieldType>
        </Field>
        <Field>
            <FieldName>container</FieldName>
            <FieldType>EmbeddedCacheManager</FieldType>
        </Field>
        <Field>
            <FieldName>tm</FieldName>
            <FieldType>InjectedValue</FieldType>
        </Field>
        <Field>
            <FieldName>tm</FieldName>
            <FieldType>TransactionManager</FieldType>
        </Field>
        <Field>
            <FieldName>tsr</FieldName>
            <FieldType>InjectedValue</FieldType>
        </Field>
        <Field>
            <FieldName>tsr</FieldName>
            <FieldType>TransactionSynchronizationRegistry</FieldType>
        </Field>
        <Field>
            <FieldName>moduleLoader</FieldName>
            <FieldType>InjectedValue</FieldType>
        </Field>
        <Field>
            <FieldName>moduleLoader</FieldName>
            <FieldType>ModuleLoader</FieldType>
        </Field>
        <Field>
            <FieldName>templateConfiguration</FieldName>
            <FieldType>InjectedValue</FieldType>
        </Field>
        <Field>
            <FieldName>templateConfiguration</FieldName>
            <FieldType>Configuration</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getDefaultConfiguration</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Configuration</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheMode</ParamName>
                    <ParamType>CacheMode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>load</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ConfigurationBuilderHolder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>resource</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>URL [url=find(resource,CacheConfigurationAdd.class.getClassLoader())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>log;debugf;["Loading Infinispan defaults from %s", url.toString()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>find</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>URL</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>resource</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>loaders</ParamName>
                    <ParamType>ClassLoader</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>CacheConfigurationAdd</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mode</ParamName>
                    <ParamType>CacheMode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>populateModel</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>operation</ParamName>
                    <ParamType>ModelNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>model</ParamName>
                    <ParamType>ModelNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this;populate;[operation, model]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>OperationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>performRuntime</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>OperationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>operation</ParamName>
                    <ParamType>ModelNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>model</ParamName>
                    <ParamType>ModelNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ModelNode [cacheModel=Resource.Tools.readModel(context.readResource(PathAddress.EMPTY_ADDRESS))]</InnerVar>
                <InnerVar>PathAddress [containerAddress=getCacheContainerAddressFromOperation(operation)]</InnerVar>
                <InnerVar>ModelNode [containerModel=context.readResourceFromRoot(containerAddress).getModel()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this;installRuntimeServices;[context, operation, containerModel, cacheModel]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>OperationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>installRuntimeServices</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ServiceController&lt;?&gt;</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>OperationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>operation</ParamName>
                    <ParamType>ModelNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>containerModel</ParamName>
                    <ParamType>ModelNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cacheModel</ParamName>
                    <ParamType>ModelNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PathAddress [configurationAddress=getCacheConfigurationAddressFromOperation(operation)]</InnerVar>
                <InnerVar>PathAddress [containerAddress=getCacheContainerAddressFromOperation(operation)]</InnerVar>
                <InnerVar>String [cacheName=configurationAddress.getLastElement().getValue()]</InnerVar>
                <InnerVar>String [containerName=containerAddress.getLastElement().getValue()]</InnerVar>
                <InnerVar>ModelNode [resolvedValue]</InnerVar>
                <InnerVar>String [templateConfiguration=(resolvedValue=CacheConfigurationResource.CONFIGURATION.resolveModelAttribute(context,cacheModel)).isDefined() ? resolvedValue.asString() : null]</InnerVar>
                <InnerVar>List&lt;Dependency&lt;?&gt;&gt; [dependencies=new LinkedList&lt;&gt;()]</InnerVar>
                <InnerVar>ConfigurationBuilder [builder=new ConfigurationBuilder().read(getDefaultConfiguration(this.mode))]</InnerVar>
                <InnerVar>String [defaultCache=CacheContainerResource.DEFAULT_CACHE.resolveModelAttribute(context,containerModel).asString()]</InnerVar>
                <InnerVar>ServiceTarget [target=context.getServiceTarget()]</InnerVar>
                <InnerVar>Configuration [config=builder.build()]</InnerVar>
                <InnerVar>Collection&lt;ServiceController&lt;?&gt;&gt; [controllers=new ArrayList&lt;&gt;(3)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>builder;template;[CacheConfigurationResource.TEMPLATE.resolveModelAttribute(context,cacheModel).asBoolean()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;processModelNode;[context, containerName, cacheModel, builder, dependencies]</InnerMethodInvoke>
                <InnerMethodInvoke>controllers;add;[installCacheConfigurationService(target,containerName,cacheName,defaultCache,templateConfiguration,builder,config,dependencies)]</InnerMethodInvoke>
                <InnerMethodInvoke>log;debugf;["Cache configuration service for %s installed for container %s", cacheName, containerName]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>OperationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeRuntimeServices</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>OperationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>operation</ParamName>
                    <ParamType>ModelNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>containerModel</ParamName>
                    <ParamType>ModelNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cacheModel</ParamName>
                    <ParamType>ModelNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PathAddress [configurationAddress=getCacheConfigurationAddressFromOperation(operation)]</InnerVar>
                <InnerVar>PathAddress [containerAddress=getCacheContainerAddressFromOperation(operation)]</InnerVar>
                <InnerVar>String [configurationName=configurationAddress.getLastElement().getValue()]</InnerVar>
                <InnerVar>String [containerName=containerAddress.getLastElement().getValue()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>context;removeService;[CacheServiceName.CONFIGURATION.getServiceName(containerName,configurationName)]</InnerMethodInvoke>
                <InnerMethodInvoke>log;debugf;["cache configuration %s removed for container %s", configurationName, containerName]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>OperationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCacheConfigurationAddressFromOperation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PathAddress</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>operation</ParamName>
                    <ParamType>ModelNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCacheContainerAddressFromOperation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PathAddress</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>operation</ParamName>
                    <ParamType>ModelNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PathAddress [configurationAddress=getCacheConfigurationAddressFromOperation(operation)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>installCacheConfigurationService</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>target</ParamName>
                    <ParamType>ServiceTarget</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>containerName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cacheName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>defaultCache</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>templateConfiguration</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>builder</ParamName>
                    <ParamType>ConfigurationBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>config</ParamName>
                    <ParamType>Configuration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dependencies</ParamName>
                    <ParamType>Dependency&lt;?&gt;</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>InjectedValue&lt;EmbeddedCacheManager&gt; [container=new InjectedValue&lt;&gt;()]</InnerVar>
                <InnerVar>CacheConfigurationDependencies [cacheConfigurationDependencies=new CacheConfigurationDependencies(container)]</InnerVar>
                <InnerVar>Service&lt;Configuration&gt; [service=new CacheConfigurationService(cacheName,builder,cacheConfigurationDependencies)]</InnerVar>
                <InnerVar>ServiceBuilder&lt;?&gt; [configBuilder=target.addService(CacheServiceName.CONFIGURATION.getServiceName(containerName,cacheName),service).addDependency(CacheContainerServiceName.CACHE_CONTAINER.getServiceName(containerName),EmbeddedCacheManager.class,container).addDependency(Services.JBOSS_SERVICE_MODULE_LOADER,ModuleLoader.class,cacheConfigurationDependencies.getModuleLoaderInjector()).setInitialMode(ServiceController.Mode.PASSIVE)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addDependency</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>builder</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dependency</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ServiceName [name=dependency.getName()]</InnerVar>
                <InnerVar>Injector&lt;T&gt; [injector=dependency.getInjector()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>populate</MethodName>
            <MethodComment>/** 
 * Transfer elements common to both operations and models
 * @param fromModel
 * @param toModel
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fromModel</ParamName>
                    <ParamType>ModelNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>toModel</ParamName>
                    <ParamType>ModelNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>OperationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>processModelNode</MethodName>
            <MethodComment>/** 
 * Create a Configuration object initialized from the operation ModelNode
 * @param containerName the name of the cache container
 * @param cache         ModelNode representing cache configuration
 * @param builder       ConfigurationBuilder object to add data to
 * @return initialised Configuration object
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>OperationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>containerName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cache</ParamName>
                    <ParamType>ModelNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>builder</ParamName>
                    <ParamType>ConfigurationBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dependencies</ParamName>
                    <ParamType>Dependency&lt;?&gt;</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [batching=CacheConfigurationResource.BATCHING.resolveModelAttribute(context,cache).asBoolean()]</InnerVar>
                <InnerVar>IsolationLevel [isolationLevel=IsolationLevel.READ_COMMITTED]</InnerVar>
                <InnerVar>TransactionMode [txMode=TransactionMode.NONE]</InnerVar>
                <InnerVar>LockingMode [lockingMode=LockingMode.OPTIMISTIC]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>builder.jmxStatistics();enabled;[CacheConfigurationResource.STATISTICS.resolveModelAttribute(context,cache).asBoolean()]</InnerMethodInvoke>
                <InnerMethodInvoke>builder.jmxStatistics();available;[CacheConfigurationResource.STATISTICS_AVAILABLE.resolveModelAttribute(context,cache).asBoolean()]</InnerMethodInvoke>
                <InnerMethodInvoke>builder;simpleCache;[CacheConfigurationResource.SIMPLE_CACHE.resolveModelAttribute(context,cache).asBoolean()]</InnerMethodInvoke>
                <InnerMethodInvoke>builder.clustering();cacheMode;[this.mode]</InnerMethodInvoke>
                <InnerMethodInvoke>builder.transaction().transactionMode(txMode.getMode()).lockingMode(lockingMode).useSynchronization(!txMode.isXAEnabled()).recovery();enabled;[txMode.isRecoveryEnabled()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>OperationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>inject</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>module</ParamName>
                    <ParamType>Module</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>inject</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>module</ParamName>
                    <ParamType>Module</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>handleLoaderProperties</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>OperationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cache</ParamName>
                    <ParamType>ModelNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>loaderKey</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>containerName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>builder</ParamName>
                    <ParamType>ConfigurationBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dependencies</ParamName>
                    <ParamType>Dependency&lt;?&gt;</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>OperationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getProperties</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Properties</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>loader</ParamName>
                    <ParamType>ModelNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Properties [properties=new TypedProperties()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>handleStoreProperties</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>OperationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cache</ParamName>
                    <ParamType>ModelNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>storeKey</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>containerName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>builder</ParamName>
                    <ParamType>ConfigurationBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dependencies</ParamName>
                    <ParamType>Dependency&lt;?&gt;</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>OperationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildCacheLoader</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>persistenceBuilder</ParamName>
                    <ParamType>PersistenceConfigurationBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>loader</ParamName>
                    <ParamType>ModelNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>loaderKey</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>OperationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>handleStoreOrLoaderClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>className</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>persistenceBuilder</ParamName>
                    <ParamType>PersistenceConfigurationBuilder</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ClassNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createDeployedStoreConfiguration</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>className</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>persistenceBuilder</ParamName>
                    <ParamType>PersistenceConfigurationBuilder</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DeployedStoreConfigurationBuilder [deployedStoreConfigurationBuilder=persistenceBuilder.addStore(DeployedStoreConfigurationBuilder.class)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>deployedStoreConfigurationBuilder;customStoreClassName;[className]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createStoreConfigurationFromLocalClassloader</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>className</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>persistenceBuilder</ParamName>
                    <ParamType>PersistenceConfigurationBuilder</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Class&lt;?&gt; [storeImplClass=CacheLoader.class.getClassLoader().loadClass(className)]</InnerVar>
                <InnerVar>ConfiguredBy [annotation=storeImplClass.getAnnotation(ConfiguredBy.class)]</InnerVar>
                <InnerVar>Class&lt;? extends StoreConfigurationBuilder&gt; [builderClass=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ClassNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isPresentInLoadClassLoader</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>className</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildCacheStore</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>OperationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>persistenceBuilder</ParamName>
                    <ParamType>PersistenceConfigurationBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>containerName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>store</ParamName>
                    <ParamType>ModelNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>storeKey</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dependencies</ParamName>
                    <ParamType>Dependency&lt;?&gt;</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ModelNode [resolvedValue]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>OperationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>inject</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>PathManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>builder;location;[value.resolveRelativePathEntry(path,relativeTo)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>uninject</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>inject</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>OutboundSocketBinding</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>inject</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>SecurityRealm</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>builder.remoteSecurity().ssl();sslContext;[value.getSSLContext()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>inject</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>PathManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>builder;location;[value.resolveRelativePathEntry(path,relativeTo)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>uninject</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>inject</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>PathManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>builder;expiredLocation;[value.resolveRelativePathEntry(expirationPath,relativeTo)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>uninject</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>inject</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>OutboundSocketBinding</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildDbVersions</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>builder</ParamName>
                    <ParamType>AbstractJdbcStoreConfigurationBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>OperationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>store</ParamName>
                    <ParamType>ModelNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ModelNode [dbMajorVersion=BaseJDBCStoreConfigurationResource.DB_MAJOR_VERSION.resolveModelAttribute(context,store)]</InnerVar>
                <InnerVar>ModelNode [dbMinorVersion=BaseJDBCStoreConfigurationResource.DB_MINOR_VERSION.resolveModelAttribute(context,store)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>OperationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newInstance</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>className</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>InstantiationException</ExceptionType>
                <ExceptionType>IllegalAccessException</ExceptionType>
                <ExceptionType>ClassNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseCommonAttributes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>OperationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>persistenceBuilder</ParamName>
                    <ParamType>PersistenceConfigurationBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>store</ParamName>
                    <ParamType>ModelNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>storeConfigurationBuilder</ParamName>
                    <ParamType>StoreConfigurationBuilder</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ModelNode [shared=store.get(ModelKeys.SHARED)]</InnerVar>
                <InnerVar>ModelNode [preload=store.get(ModelKeys.PRELOAD)]</InnerVar>
                <InnerVar>ModelNode [fetchState=store.get(ModelKeys.FETCH_STATE)]</InnerVar>
                <InnerVar>ModelNode [passivation=store.get(ModelKeys.PASSIVATION)]</InnerVar>
                <InnerVar>ModelNode [purge=store.get(ModelKeys.PURGE)]</InnerVar>
                <InnerVar>ModelNode [singleton=store.get(ModelKeys.SINGLETON)]</InnerVar>
                <InnerVar>ModelNode [readOnly=store.get(ModelKeys.READ_ONLY)]</InnerVar>
                <InnerVar>ModelNode [maxBatchSize=store.get(ModelKeys.MAX_BATCH_SIZE)]</InnerVar>
                <InnerVar>boolean [async=store.hasDefined(ModelKeys.WRITE_BEHIND) &amp;&amp; store.get(ModelKeys.WRITE_BEHIND,ModelKeys.WRITE_BEHIND_NAME).isDefined()]</InnerVar>
                <InnerVar>Properties [properties=new TypedProperties()]</InnerVar>
                <InnerVar>ModelNode [writeBehind=store.get(ModelKeys.WRITE_BEHIND)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>storeConfigurationBuilder;withProperties;[properties]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>OperationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildJdbcStore</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>loadersBuilder</ParamName>
                    <ParamType>PersistenceConfigurationBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>OperationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>store</ParamName>
                    <ParamType>ModelNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>databaseType</ParamName>
                    <ParamType>DatabaseType</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>JdbcStringBasedStoreConfigurationBuilder [builder=loadersBuilder.addStore(JdbcStringBasedStoreConfigurationBuilder.class)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>builder;dialect;[databaseType]</InnerMethodInvoke>
                <InnerMethodInvoke>null;buildDbVersions;[builder, context, store]</InnerMethodInvoke>
                <InnerMethodInvoke>this;buildStringKeyedTable;[builder.table(), context, store.get(ModelKeys.STRING_KEYED_TABLE)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>OperationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildStringKeyedTable</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>builder</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>OperationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>table</ParamName>
                    <ParamType>ModelNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [defaultTableNamePrefix=BaseJDBCStoreConfigurationResource.STRING_KEYED_TABLE_PREFIX.getDefaultValue().asString()]</InnerVar>
                <InnerVar>ModelNode [tableNamePrefix=BaseJDBCStoreConfigurationResource.PREFIX.resolveModelAttribute(context,table)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>builder.batchSize(BaseJDBCStoreConfigurationResource.BATCH_SIZE.resolveModelAttribute(context,table).asInt()).fetchSize(BaseJDBCStoreConfigurationResource.FETCH_SIZE.resolveModelAttribute(context,table).asInt()).tableNamePrefix(tableNamePrefix.isDefined() ? tableNamePrefix.asString() : defaultTableNamePrefix).idColumnName(this.getColumnProperty(context,table,ModelKeys.ID_COLUMN,BaseJDBCStoreConfigurationResource.COLUMN_NAME,"id")).idColumnType(this.getColumnProperty(context,table,ModelKeys.ID_COLUMN,BaseJDBCStoreConfigurationResource.COLUMN_TYPE,"VARCHAR")).dataColumnName(this.getColumnProperty(context,table,ModelKeys.DATA_COLUMN,BaseJDBCStoreConfigurationResource.COLUMN_NAME,"datum")).dataColumnType(this.getColumnProperty(context,table,ModelKeys.DATA_COLUMN,BaseJDBCStoreConfigurationResource.COLUMN_TYPE,"BINARY")).timestampColumnName(this.getColumnProperty(context,table,ModelKeys.TIMESTAMP_COLUMN,BaseJDBCStoreConfigurationResource.COLUMN_NAME,"version"));timestampColumnType;[this.getColumnProperty(context,table,ModelKeys.TIMESTAMP_COLUMN,BaseJDBCStoreConfigurationResource.COLUMN_TYPE,"BIGINT")]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>OperationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getColumnProperty</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>OperationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>table</ParamName>
                    <ParamType>ModelNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columnKey</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columnAttribute</ParamName>
                    <ParamType>AttributeDefinition</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>defaultValue</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ModelNode [column=table.get(columnKey)]</InnerVar>
                <InnerVar>ModelNode [resolvedValue]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>OperationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>Dependency</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>ServiceName</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>Dependency</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>ServiceName</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>I</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>target</ParamName>
                    <ParamType>I</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ServiceName</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getType</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>I</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getInjector</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>I</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>uninject</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>CacheConfigurationDependencies</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>container</ParamName>
                    <ParamType>EmbeddedCacheManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTransactionManagerInjector</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>TransactionManager</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTransactionSynchronizationRegistryInjector</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>TransactionSynchronizationRegistry</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getModuleLoaderInjector</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ModuleLoader</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTemplateConfigurationInjector</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Configuration</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCacheContainer</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>EmbeddedCacheManager</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTransactionManager</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>TransactionManager</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTransactionSynchronizationRegistry</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>TransactionSynchronizationRegistry</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getModuleLoader</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ModuleLoader</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTemplateConfiguration</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Configuration</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>