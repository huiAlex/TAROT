<Class>
    <Id>887</Id>
    <Package>org.infinispan.transaction.tm</Package>
    <ClassName>DummyUserTransaction</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>UserTransaction</SuperInterface>
        <SuperInterface>java.io.Serializable</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>DummyUserTransaction  /** 
 * @author bela&lt;p/&gt; Date: May 15, 2003 Time: 4:20:17 PM
 * @since 4.0
 * @deprecated use {@link EmbeddedUserTransaction}
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>tm</FieldName>
            <FieldType>DummyTransactionManager</FieldType>
        </Field>
        <Field>
            <FieldName>serialVersionUID</FieldName>
            <FieldType>long</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>DummyUserTransaction</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tm</ParamName>
                    <ParamType>DummyTransactionManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>begin</MethodName>
            <MethodComment>/** 
 * Starts a new transaction, and associate it with the calling thread.
 * @throws NotSupportedException If the calling thread is already associated with a transaction, and nestedtransactions are not supported.
 * @throws SystemException       If the transaction service fails in an unexpected way.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>tm;begin;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>NotSupportedException</ExceptionType>
                <ExceptionType>SystemException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>commit</MethodName>
            <MethodComment>/** 
 * Attempt to commit this transaction.
 * @throws RollbackException          If the transaction was marked for rollback only, the transaction is rolled backand this exception is thrown.
 * @throws SystemException            If the transaction service fails in an unexpected way.
 * @throws HeuristicMixedException    If a heuristic decision was made and some some parts of the transaction havebeen committed while other parts have been rolled back.
 * @throws HeuristicRollbackException If a heuristic decision to roll back the transaction was made.
 * @throws SecurityException          If the caller is not allowed to commit this transaction.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>tm;commit;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>RollbackException</ExceptionType>
                <ExceptionType>HeuristicMixedException</ExceptionType>
                <ExceptionType>HeuristicRollbackException</ExceptionType>
                <ExceptionType>SecurityException</ExceptionType>
                <ExceptionType>SystemException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rollback</MethodName>
            <MethodComment>/** 
 * Rolls back this transaction.
 * @throws IllegalStateException If the transaction is in a state where it cannot be rolled back. This could bebecause the transaction is no longer active, or because it is in the  {@link Status#STATUS_PREPARED prepared state}.
 * @throws SystemException       If the transaction service fails in an unexpected way.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>tm;rollback;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IllegalStateException</ExceptionType>
                <ExceptionType>SystemException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setRollbackOnly</MethodName>
            <MethodComment>/** 
 * Mark the transaction so that the only possible outcome is a rollback.
 * @throws IllegalStateException If the transaction is not in an active state.
 * @throws SystemException       If the transaction service fails in an unexpected way.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>tm;setRollbackOnly;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IllegalStateException</ExceptionType>
                <ExceptionType>SystemException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStatus</MethodName>
            <MethodComment>/** 
 * Get the status of the transaction.
 * @return The status of the transaction. This is one of the {@link Status} constants.
 * @throws SystemException If the transaction service fails in an unexpected way.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SystemException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setTransactionTimeout</MethodName>
            <MethodComment>/** 
 * Change the transaction timeout for transactions started by the calling thread with the  {@link #begin()} method.
 * @param seconds The new timeout value, in seconds. If this parameter is &lt;code&gt;0&lt;/code&gt;, the timeout value is resetto the default value.
 * @throws SystemException If the transaction service fails in an unexpected way.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>seconds</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SystemException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>