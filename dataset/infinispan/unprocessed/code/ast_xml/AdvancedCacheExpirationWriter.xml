<Class>
    <Id>2350</Id>
    <Package>org.infinispan.persistence.spi</Package>
    <ClassName>AdvancedCacheExpirationWriter</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>AdvancedCacheWriter</SuperInterface>
        <SuperInterface>K</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>AdvancedCacheExpirationWriter  /** 
 * Defines functionality for advanced expiration techniques.  Note this interface allows for providing not just the key when an entry is expired.  This is important so that proper cluster wide expiration can be performed.
 * @param &lt; K &gt;
 * @param &lt; V &gt;
 * @since 8.0
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>purge</MethodName>
            <MethodComment>/** 
 * Using the thread in the pool, removed all the expired data from the persistence storage. For each removed entry, the supplied listener is invoked.  This should be preferred to {@link AdvancedCacheWriter#purge(Executor,PurgeListener)} since it allows for value and metadata to be providedwhich provides more accurate expiration when coordination is required.
 * @param executor the executor to invoke the given command on
 * @param listener the listener that is notified for each expired entry
 * @throws PersistenceException in case of an error, e.g. communicating with the external storage
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>executor</ParamName>
                    <ParamType>Executor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>listener</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>marshalledEntryPurged</MethodName>
            <MethodComment>/** 
 * Optional. If possible,  {@link AdvancedCacheExpirationWriter} implementors should invoke this method for everyentry that is purged from the store. One of the side effects of not implementing this method is that listeners do not receive  {@link org.infinispan.notifications.cachelistener.annotation.CacheEntryExpired} for theentries that are removed from the persistent store directly.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>entry</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>