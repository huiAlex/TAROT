<Class>
    <Id>774</Id>
    <Package>org.infinispan.persistence.remote.configuration</Package>
    <ClassName>RemoteStoreConfigurationChildBuilder</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>StoreConfigurationChildBuilder</SuperInterface>
        <SuperInterface>S</SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>addServer</MethodName>
            <MethodComment>/** 
 * Adds a new remote server
 */
</MethodComment>
            <ReturnType>RemoteServerConfigurationBuilder</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>asyncExecutorFactory</MethodName>
            <MethodComment>/** 
 * Configuration for the executor service used for asynchronous work on the Transport, including asynchronous marshalling and Cache 'async operations' such as Cache.putAsync().
 */
</MethodComment>
            <ReturnType>ExecutorFactoryConfigurationBuilder</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>balancingStrategy</MethodName>
            <MethodComment>/** 
 * For replicated (vs distributed) Hot Rod server clusters, the client balances requests to the servers according to this strategy.
 */
</MethodComment>
            <ReturnType>RemoteStoreConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>balancingStrategy</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>connectionPool</MethodName>
            <MethodComment>/** 
 * Configures the connection pool
 */
</MethodComment>
            <ReturnType>ConnectionPoolConfigurationBuilder</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>connectionTimeout</MethodName>
            <MethodComment>/** 
 * This property defines the maximum socket connect timeout before giving up connecting to the server.
 */
</MethodComment>
            <ReturnType>RemoteStoreConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>connectionTimeout</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>forceReturnValues</MethodName>
            <MethodComment>/** 
 * Whether or not to implicitly FORCE_RETURN_VALUE for all calls.
 */
</MethodComment>
            <ReturnType>RemoteStoreConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>forceReturnValues</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hotRodWrapping</MethodName>
            <MethodComment>/** 
 * Configures this RemoteStore so that it enables all settings needed to create entries to be served by a HotRod endpoint, for example when performing rolling upgrades.
 */
</MethodComment>
            <ReturnType>RemoteStoreConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>hotRodWrapping</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>keySizeEstimate</MethodName>
            <MethodComment>/** 
 * The class name of the driver used for connecting to the database.
 */
</MethodComment>
            <ReturnType>RemoteStoreConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>keySizeEstimate</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>marshaller</MethodName>
            <MethodComment>/** 
 * Allows you to specify a custom  {@link org.infinispan.commons.marshall.Marshaller} implementation toserialize and deserialize user objects.
 */
</MethodComment>
            <ReturnType>RemoteStoreConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>marshaller</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>marshaller</MethodName>
            <MethodComment>/** 
 * Allows you to specify a custom  {@link org.infinispan.commons.marshall.Marshaller} implementation toserialize and deserialize user objects.
 */
</MethodComment>
            <ReturnType>RemoteStoreConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>marshaller</ParamName>
                    <ParamType>? extends Marshaller</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>protocolVersion</MethodName>
            <MethodComment>/** 
 * This property defines the protocol version that this client should use. Defaults to  {@link ProtocolVersion#DEFAULT_PROTOCOL_VERSION}
 * @deprecated Use {@link #protocolVersion(ProtocolVersion)} instead
 */
</MethodComment>
            <ReturnType>RemoteStoreConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>protocolVersion</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>protocolVersion</MethodName>
            <MethodComment>/** 
 * This property defines the protocol version that this client should use. Defaults to  {@link ProtocolVersion#DEFAULT_PROTOCOL_VERSION}
 */
</MethodComment>
            <ReturnType>RemoteStoreConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>protocolVersion</ParamName>
                    <ParamType>ProtocolVersion</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rawValues</MethodName>
            <MethodComment>/** 
 * Normally the  {@link org.infinispan.persistence.remote.RemoteStore} stores values wrapped in {@link InternalCacheEntry}. Setting this property to true causes the raw values to be stored instead for interoperability with direct access by  {@link RemoteCacheManager}s
 */
</MethodComment>
            <ReturnType>RemoteStoreConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rawValues</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>remoteCacheName</MethodName>
            <MethodComment>/** 
 * The name of the remote cache in the remote infinispan cluster, to which to connect to. If unspecified, the default cache will be used
 */
</MethodComment>
            <ReturnType>RemoteStoreConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>remoteCacheName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>remoteSecurity</MethodName>
            <MethodComment>/** 
 * Configures connection security
 */
</MethodComment>
            <ReturnType>SecurityConfigurationBuilder</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>socketTimeout</MethodName>
            <MethodComment>/** 
 * This property defines the maximum socket read timeout in milliseconds before giving up waiting for bytes from the server. Defaults to 60000 (1 minute)
 */
</MethodComment>
            <ReturnType>RemoteStoreConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>socketTimeout</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>tcpNoDelay</MethodName>
            <MethodComment>/** 
 * Affects TCP NODELAY on the TCP stack. Defaults to enabled
 */
</MethodComment>
            <ReturnType>RemoteStoreConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tcpNoDelay</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>transportFactory</MethodName>
            <MethodComment>/** 
 * Controls which transport to use. Currently only the TcpTransport is supported.
 */
</MethodComment>
            <ReturnType>RemoteStoreConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>transportFactory</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>transportFactory</MethodName>
            <MethodComment>/** 
 * Controls which transport to use. Currently only the TcpTransport is supported.
 */
</MethodComment>
            <ReturnType>RemoteStoreConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>transportFactory</ParamName>
                    <ParamType>? extends TransportFactory</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>valueSizeEstimate</MethodName>
            <MethodComment>/** 
 * This hint allows sizing of byte buffers when serializing and deserializing values, to minimize array resizing.
 */
</MethodComment>
            <ReturnType>RemoteStoreConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>valueSizeEstimate</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>