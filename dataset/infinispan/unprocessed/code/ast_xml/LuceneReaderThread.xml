<Class>
    <Id>2701</Id>
    <Package>org.infinispan.lucene.profiling</Package>
    <ClassName>LuceneReaderThread</ClassName>
    <SuperClass>LuceneUserThread</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>LuceneReaderThread  /** 
 * LuceneReaderThread is going to perform searches on the Directory until it's interrupted. Good for performance comparisons and stress tests. It needs a SharedState object to be shared with other readers and writers on the same directory to be able to throw exceptions in case it's able to detect an illegal state.
 * @author Sanne Grinovero
 * @since 4.0
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>searcher</FieldName>
            <FieldType>IndexSearcher</FieldType>
        </Field>
        <Field>
            <FieldName>indexReader</FieldName>
            <FieldType>DirectoryReader</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>LuceneReaderThread</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dir</ParamName>
                    <ParamType>Directory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>state</ParamName>
                    <ParamType>SharedState</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testLoop</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Set&lt;String&gt; [strings=new HashSet&lt;String&gt;()]</InnerVar>
                <InnerVar>int [numElements=state.stringsInIndex.drainTo(strings,50)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;refreshIndexReader;[]</InnerMethodInvoke>
                <InnerMethodInvoke>state.stringsInIndex;addAll;[strings]</InnerMethodInvoke>
                <InnerMethodInvoke>state;incrementIndexSearchesCount;[numElements]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>refreshIndexReader</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cleanup</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>