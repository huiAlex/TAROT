<Class>
    <Id>34</Id>
    <Package>org.infinispan.spring</Package>
    <ClassName>InfinispanDefaultCacheFactoryBean</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>FactoryBean</SuperInterface>
        <SuperInterface>Cache&lt;K,V&gt;</SuperInterface>
        <SuperInterface>InitializingBean</SuperInterface>
        <SuperInterface>DisposableBean</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>InfinispanDefaultCacheFactoryBean  /** 
 * &lt;p&gt; A  {@link org.springframework.beans.factory.FactoryBean &lt;code&gt;FactoryBean&lt;/code&gt;} for creating anative &lt;em&gt;default&lt;/em&gt; Infinispan  {@link org.infinispan.Cache &lt;code&gt;org.infinispan.Cache&lt;/code&gt;}, delegating to a  {@link #setInfinispanCacheContainer(CacheContainer) &lt;code&gt;configurable&lt;/code&gt;}{@link org.infinispan.manager.CacheContainer &lt;code&gt;org.infinispan.manager.CacheContainer&lt;/code&gt;}. A default &lt;code&gt;Cache&lt;/code&gt; is a &lt;code&gt;Cache&lt;/code&gt; that uses its &lt;code&gt;CacheContainer&lt;/code&gt;'s default settings. This is contrary to a &lt;em&gt;named&lt;/em&gt; &lt;code&gt;Cache&lt;/code&gt; where select settings from a &lt;code&gt;CacheContainer&lt;/code&gt;'s default configuration may be overridden with settings specific to that &lt;code&gt;Cache&lt;/code&gt;. &lt;/p&gt; &lt;p&gt; In addition to creating a &lt;code&gt;Cache&lt;/code&gt; this &lt;code&gt;FactoryBean&lt;/code&gt; does also control that &lt;code&gt;Cache&lt;/code&gt;'s  {@link org.infinispan.commons.api.Lifecycle lifecycle} by shutting it downwhen the enclosing Spring application context is closed. It is therefore advisable to &lt;em&gt;always&lt;/em&gt; use this &lt;code&gt;FactoryBean&lt;/code&gt; when creating a &lt;code&gt;Cache&lt;/code&gt;. &lt;/p&gt;
 * @author &lt;a href="mailto:olaf DOT bergner AT gmx DOT de"&gt;Olaf Bergner&lt;/a&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>logger</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>infinispanCacheContainer</FieldName>
            <FieldType>CacheContainer</FieldType>
        </Field>
        <Field>
            <FieldName>infinispanCache</FieldName>
            <FieldType>Cache</FieldType>
        </Field>
        <Field>
            <FieldName>infinispanCache</FieldName>
            <FieldType>K</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>setInfinispanCacheContainer</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Sets the  {@link org.infinispan.manager.CacheContainer &lt;code&gt;org.infinispan.manager.CacheContainer&lt;/code&gt;} to be used for creating our{@link org.infinispan.Cache &lt;code&gt;Cache&lt;/code&gt;} instance. Note that this is a&lt;strong&gt;mandatory&lt;/strong&gt; property. &lt;/p&gt;
 * @param infinispanCacheContainer The  {@link org.infinispan.manager.CacheContainer &lt;code&gt;org.infinispan.manager.CacheContainer&lt;/code&gt;} to be used for creating our{@link org.infinispan.Cache &lt;code&gt;Cache&lt;/code&gt;} instance
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>infinispanCacheContainer</ParamName>
                    <ParamType>CacheContainer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>afterPropertiesSet</MethodName>
            <MethodComment>/** 
 * @see org.springframework.beans.factory.InitializingBean#afterPropertiesSet()
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.logger;info;["Initializing named Infinispan cache ..."]</InnerMethodInvoke>
                <InnerMethodInvoke>this.logger;info;["New Infinispan cache [" + this.infinispanCache + "] initialized"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getObject</MethodName>
            <MethodComment>/** 
 * @see org.springframework.beans.factory.FactoryBean#getObject()
 */
</MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getObjectType</MethodName>
            <MethodComment>/** 
 * @see org.springframework.beans.factory.FactoryBean#getObjectType()
 */
</MethodComment>
            <ReturnType>? extends Cache</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isSingleton</MethodName>
            <MethodComment>/** 
 * Always returns &lt;code&gt;true&lt;/code&gt;.
 * @return Always &lt;code&gt;true&lt;/code&gt;
 * @see org.springframework.beans.factory.FactoryBean#isSingleton()
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>destroy</MethodName>
            <MethodComment>/** 
 * Shuts down the &lt;code&gt;org.infinispan.Cache&lt;/code&gt; created by this &lt;code&gt;FactoryBean&lt;/code&gt;.
 * @see org.springframework.beans.factory.DisposableBean#destroy()
 * @see org.infinispan.Cache#stop()
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>