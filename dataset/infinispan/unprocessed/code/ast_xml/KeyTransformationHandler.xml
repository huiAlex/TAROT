<Class>
    <Id>4023</Id>
    <Package>org.infinispan.query.backend</Package>
    <ClassName>KeyTransformationHandler</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>KeyTransformationHandler  /** 
 * This transforms arbitrary keys to a String which can be used by Lucene as a document identifier, and vice versa. &lt;p/&gt; There are 2 approaches to doing so; one for SimpleKeys: Java primitives (and their object wrappers), byte[] and Strings, and one for custom, user-defined types that could be used as keys. &lt;p/&gt; For SimpleKeys, users don't need to do anything, these keys are automatically transformed by this class. &lt;p/&gt; For user-defined keys, two options are supported. Types annotated with @Transformable, and declaring an appropriate  {@link org.infinispan.query.Transformer} implementation; and types for which a {@link org.infinispan.query.Transformer} hasbeen explicitly registered through KeyTransformationHandler.registerTransformer().
 * @author Manik Surtani
 * @author Marko Luksa
 * @see org.infinispan.query.Transformable
 * @see org.infinispan.query.Transformer
 * @since 4.0
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>transformerTypes</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>transformerTypes</FieldName>
            <FieldType>Class&lt;?&gt;</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>stringToKey</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classLoader</ParamName>
                    <ParamType>ClassLoader</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>char [type=s.charAt(0)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCustomTransformer</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Transformer</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>keyClassName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classLoader</ParamName>
                    <ParamType>ClassLoader</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Transformer [t=null]</InnerVar>
                <InnerVar>Class&lt;?&gt; [keyClass=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>keyToString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>char [prefix=' ']</InnerVar>
                <InnerVar>Transformer [tf]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isStringOrPrimitive</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTransformer</MethodName>
            <MethodComment>/** 
 * Retrieves a  {@link org.infinispan.query.Transformer} instance for this key.  If the key is not{@link org.infinispan.query.Transformable} and no transformer has been registered for the key's class,null is returned.
 * @param keyClass key class to analyze
 * @return a Transformer for this key, or null if the key type is not properly annotated.
 */
</MethodComment>
            <ReturnType>Transformer</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>keyClass</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Class&lt;?&gt; [transformerClass=getTransformerClass(keyClass)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTransformerClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>? extends Transformer</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>keyClass</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Class&lt;? extends Transformer&gt; [transformerClass=transformerTypes.get(keyClass)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTransformerClassFromAnnotation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>? extends Transformer</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>keyClass</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Transformable [annotation=keyClass.getAnnotation(Transformable.class)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>instantiate</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Transformer</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>transformerClass</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>registerTransformer</MethodName>
            <MethodComment>/** 
 * Registers a  {@link org.infinispan.query.Transformer} for the supplied key class.
 * @param keyClass the key class for which the supplied transformerClass should be used
 * @param transformerClass the transformer class to use for the supplied key class
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>keyClass</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>transformerClass</ParamName>
                    <ParamType>? extends Transformer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>transformerTypes;put;[keyClass, transformerClass]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getInstance</MethodName>
            <MethodComment>/** 
 * Gets the KeyTransformationHandler instance used by the supplied cache.
 * @param cache the cache for which we want to get the KeyTransformationHandler instance
 * @return a KeyTransformationHandler instance
 */
</MethodComment>
            <ReturnType>KeyTransformationHandler</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cache</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>QueryInterceptor [queryInterceptor=ComponentRegistryUtils.getQueryInterceptor(cache)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>