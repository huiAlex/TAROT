<Class>
    <Id>1919</Id>
    <Package>org.jboss.as.clustering.infinispan</Package>
    <ClassName>InfinispanMessages</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>InfinispanMessages  /** 
 * InfinispanMessages
 * @author &lt;a href="mailto:jperkins@redhat.com"&gt;James R. Perkins&lt;/a&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>MESSAGES</FieldName>
            <FieldType>InfinispanMessages</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>failedToInjectSocketBinding</MethodName>
            <MethodComment>/** 
 * Creates an exception indicating a failure to resolve the outbound socket binding represented by the {@code binding} parameter.
 * @param cause the cause of the error.
 * @param binding the outbound socket binding.
 * @return a {@link ConfigurationPersistenceException} for the error.
 */
</MethodComment>
            <ReturnType>InjectionException</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cause</ParamName>
                    <ParamType>UnknownHostException</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>binding</ParamName>
                    <ParamType>OutboundSocketBinding</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>transportRequired</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>StartException</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mode</ParamName>
                    <ParamType>CacheMode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cache</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cacheContainer</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>invalidCacheStore</MethodName>
            <MethodComment>/** 
 * Creates an exception indicating an invalid cache store.
 * @param cause          the cause of the error.
 * @param cacheStoreName the name of the cache store.
 * @return an {@link OperationFailedException} for the error.
 */
</MethodComment>
            <ReturnType>OperationFailedException</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cause</ParamName>
                    <ParamType>Throwable</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cacheStoreName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>invalidDefaultCache</MethodName>
            <MethodComment>/** 
 * Creates an exception indicating an invalid cache store.
 * @param cacheName     the name of the cache store.
 * @param cacheContainerName the container name.
 * @return an {@link IllegalArgumentException} for the error.
 */
</MethodComment>
            <ReturnType>IllegalArgumentException</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cacheContainerName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>invalidExecutorProperty</MethodName>
            <MethodComment>/** 
 * Creates an exception indicating the an executor property is invalid.
 * @param id         the id of the property.
 * @param properties the properties that were searched.
 * @return an {@link IllegalStateException} for the error.
 */
</MethodComment>
            <ReturnType>IllegalStateException</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>id</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>properties</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>invalidTransportProperty</MethodName>
            <MethodComment>/** 
 * Creates an exception indicating the an transport property is invalid.
 * @param id         the id of the property.
 * @param properties the properties that were searched.
 * @return an {@link IllegalStateException} for the error.
 */
</MethodComment>
            <ReturnType>IllegalStateException</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>id</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>properties</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>abortingCacheOperation</MethodName>
            <MethodComment>/** 
 * Creates an exception indicating that the cache is aborting after the specified number of retries.
 * @param cause           the cause of the error.
 * @param numberOfRetries the number of retries.
 * @return a {@link RuntimeException}
 */
</MethodComment>
            <ReturnType>RuntimeException</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cause</ParamName>
                    <ParamType>Throwable</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>numberOfRetries</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>invalidParameterValue</MethodName>
            <MethodComment>/** 
 * Creates an exception indicating the an operation parameter is invalid.
 * @param id         the id of the parameter.
 * @param allowableValues the allowable values for the parameter
 * @return the String.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>id</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>allowableValues</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cacheStoreAlreadyDefined</MethodName>
            <MethodComment>/** 
 * Creates an exception indicating the a cache store cannot be added as one already exists.
 * @param existingStoreName the store which already exists.
 * @return an {@link OperationFailedException} for the error.
 */
</MethodComment>
            <ReturnType>OperationFailedException</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>existingStoreName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>propertyValueNotDefined</MethodName>
            <MethodComment>/** 
 * Creates an exception indicating the a cache store cannot be added as one already exists.
 * @param propertyKey the name of the property.
 * @return an {@link OperationFailedException} for the error.
 */
</MethodComment>
            <ReturnType>OperationFailedException</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>propertyKey</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>notFound</MethodName>
            <MethodComment>/** 
 * A message indicating that the resource could not be located.
 * @param resourceName the name of the resource.
 * @return the String message.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>resourceName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>failedToParse</MethodName>
            <MethodComment>/** 
 * A message indicating that the resource could not be parsed.
 * @param resourceName the name of the resource.
 * @return IllegalStateException instance.
 */
</MethodComment>
            <ReturnType>IllegalStateException</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cause</ParamName>
                    <ParamType>Throwable</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>resourceName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>singletonResourceAlreadyExists</MethodName>
            <MethodComment>/** 
 * Creates an exception indicating a singleton resource already exists.
 * @param resourceName the name of the resource.
 * @return an {@link OperationFailedException} for the error.
 */
</MethodComment>
            <ReturnType>OperationFailedException</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>resourceName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cannotRemoveAliasFromEmptyList</MethodName>
            <MethodComment>/** 
 * Creates an exception indicating unable to remove an alias from an empty list of aliases.
 * @param aliasName the name of the alias.
 * @return an {@link OperationFailedException} for the error.
 */
</MethodComment>
            <ReturnType>OperationFailedException</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>aliasName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>attributeDeprecated</MethodName>
            <MethodComment>/** 
 * Creates an exception indicating that an attribute has been deprecated.
 * @param attributeName the name of the deprecated attribute
 * @return an {@link OperationFailedException} for the error
 */
</MethodComment>
            <ReturnType>OperationFailedException</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>attributeName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>virtualNodesDoesNotSupportExpressions</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cacheLoaderAlreadyDefined</MethodName>
            <MethodComment>/** 
 * Creates an exception indicating the a cache loader cannot be added as one already exists.
 * @param existingStoreName the loader which already exists.
 * @return an {@link OperationFailedException} for the error
 */
</MethodComment>
            <ReturnType>OperationFailedException</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>existingStoreName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>invalidCacheLoader</MethodName>
            <MethodComment>/** 
 * Creates an exception indicating an invalid cache loader.
 * @param cause the cause of the error.
 * @param cacheLoaderName the name of the cache loader.
 * @return an {@link IllegalArgumentException} for the error.
 */
</MethodComment>
            <ReturnType>IllegalArgumentException</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cause</ParamName>
                    <ParamType>Throwable</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cacheLoaderName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>failedToInvokeOperation</MethodName>
            <MethodComment>/** 
 * Returns a message for failed operations
 * @param message
 * @return
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>message</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>invalidCompatibilityMarshaller</MethodName>
            <MethodComment>/** 
 * Creates an exception indicating an invalid compatibility marshaller.
 * @param cause the cause of the error.
 * @param marshallerClassName the name of the marshaller.
 * @return an {@link IllegalArgumentException} for the error.
 */
</MethodComment>
            <ReturnType>IllegalArgumentException</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cause</ParamName>
                    <ParamType>Throwable</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>marshallerClassName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>invalidParameterSizes</MethodName>
            <MethodComment>/** 
 * Creates an exception indicating incompatible parameter sizes
 * @param firstParameter  the first parameter name
 * @param secondParameter the second parameter name
 * @return an {@link IllegalArgumentException} for the error.
 */
</MethodComment>
            <ReturnType>IllegalArgumentException</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>firstParameter</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>secondParameter</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>invalidParameterType</MethodName>
            <MethodComment>/** 
 * Creates an exception indicating incompatible parameter type
 * @param name         the parameter name
 * @param requiredType the required type of the parameter
 * @return an {@link IllegalArgumentException} for the error.
 */
</MethodComment>
            <ReturnType>IllegalArgumentException</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>requiredType</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>unableToInstantiateClass</MethodName>
            <MethodComment>/** 
 * Error message thrown when Subsystem can't instantiate given class.
 */
</MethodComment>
            <ReturnType>IllegalStateException</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>className</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeJDBCStoreSpecified</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>CacheConfigurationException</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>oldStore</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>newStore</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>failedToInjectSecurityRealm</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>InjectionException</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cause</ParamName>
                    <ParamType>UnknownHostException</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>realm</ParamName>
                    <ParamType>SecurityRealm</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>invalidEntryMergePolicy</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>IllegalArgumentException</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cause</ParamName>
                    <ParamType>Throwable</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mergePolicy</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>