<Class>
    <Id>372</Id>
    <Package>org.infinispan.query.indexmanager</Package>
    <ClassName>LockAcquiringBackend</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>IndexingBackend</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>LockAcquiringBackend  /** 
 * Transitionally backend used when we receive indexing operation to be applied to the (local) IndexWriter, but the index lock is not available yet. We will try again to look for the lock to be made available at each incoming operation, and buffer writes for later consumption if the lock is still not available. Such checks are synchronized, so this will cause some backpressure. The buffer containing postponed write operations is also bounded and will trigger more backpressure when it's filled (although filling it should not be possible as the current implementation steals the locks aggressively).
 * @author Sanne Grinovero &lt;sanne@hibernate.org&gt; (C) 2014 Red Hat Inc.
 * @since 7.0
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>MAX_QUEUE_SIZE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>bufferedWork</FieldName>
            <FieldType>BlockingQueue</FieldType>
        </Field>
        <Field>
            <FieldName>bufferedWork</FieldName>
            <FieldType>Work</FieldType>
        </Field>
        <Field>
            <FieldName>clusteredSwitchingBackend</FieldName>
            <FieldType>LazyInitializableBackend</FieldType>
        </Field>
        <Field>
            <FieldName>singleOperation</FieldName>
            <FieldType>LuceneWork</FieldType>
        </Field>
        <Field>
            <FieldName>monitor</FieldName>
            <FieldType>IndexingMonitor</FieldType>
        </Field>
        <Field>
            <FieldName>indexManager</FieldName>
            <FieldType>IndexManager</FieldType>
        </Field>
        <Field>
            <FieldName>workList</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>workList</FieldName>
            <FieldType>LuceneWork</FieldType>
        </Field>
        <Field>
            <FieldName>monitor</FieldName>
            <FieldType>IndexingMonitor</FieldType>
        </Field>
        <Field>
            <FieldName>indexManager</FieldName>
            <FieldType>IndexManager</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>LockAcquiringBackend</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clusteredSwitchingBackend</ParamName>
                    <ParamType>LazyInitializableBackend</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>applyWork</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>workList</ParamName>
                    <ParamType>LuceneWork</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>monitor</ParamName>
                    <ParamType>IndexingMonitor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indexManager</ParamName>
                    <ParamType>IndexManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>log;trace;["Attempting backend upgrade..."]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>applyStreamWork</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>singleOperation</ParamName>
                    <ParamType>LuceneWork</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>monitor</ParamName>
                    <ParamType>IndexingMonitor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indexManager</ParamName>
                    <ParamType>IndexManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>log;trace;["Attempting backend upgrade..."]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>enqueue</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>work</ParamName>
                    <ParamType>Work</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [done=bufferedWork.offer(work)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>flushAndClose</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>replacement</ParamName>
                    <ParamType>IndexingBackend</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isMasterLocal</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>applyTo</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>target</ParamName>
                    <ParamType>IndexingBackend</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>StreamWork</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>singleOperation</ParamName>
                    <ParamType>LuceneWork</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>monitor</ParamName>
                    <ParamType>IndexingMonitor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indexManager</ParamName>
                    <ParamType>IndexManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>applyTo</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>target</ParamName>
                    <ParamType>IndexingBackend</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>target;applyStreamWork;[singleOperation, monitor, indexManager]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>TransactionWork</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>workList</ParamName>
                    <ParamType>LuceneWork</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>monitor</ParamName>
                    <ParamType>IndexingMonitor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indexManager</ParamName>
                    <ParamType>IndexManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>applyTo</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>target</ParamName>
                    <ParamType>IndexingBackend</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>target;applyWork;[workList, monitor, indexManager]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>