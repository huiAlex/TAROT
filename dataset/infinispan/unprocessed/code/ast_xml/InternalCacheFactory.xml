<Class>
    <Id>531</Id>
    <Package>org.infinispan.factories</Package>
    <ClassName>InternalCacheFactory</ClassName>
    <SuperClass>AbstractNamedCacheComponentFactory</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>InternalCacheFactory  /** 
 * An internal factory for constructing Caches.  Used by the  {@link DefaultCacheManager}, this is not intended as public API. &lt;p/&gt; This is a special instance of a  {@link AbstractComponentFactory} which contains bootstrap information for the {@link ComponentRegistry}. &lt;p/&gt;
 * @author &lt;a href="mailto:manik@jboss.org"&gt;Manik Surtani (manik@jboss.org)&lt;/a&gt;
 * @since 4.0
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>createCache</MethodName>
            <MethodComment>/** 
 * This implementation clones the configuration passed in before using it.
 * @param configuration           to use
 * @param globalComponentRegistry global component registry to attach the cache to
 * @param cacheName               name of the cache
 * @return a cache
 * @throws CacheConfigurationException if there are problems with the cfg
 */
</MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>configuration</ParamName>
                    <ParamType>Configuration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>globalComponentRegistry</ParamName>
                    <ParamType>GlobalComponentRegistry</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cacheName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>CacheConfigurationException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEncoderClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>? extends Encoder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>globalConfiguration</ParamName>
                    <ParamType>GlobalConfiguration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>configuration</ParamName>
                    <ParamType>Configuration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [compatEnabled=configuration.compatibility().enabled()]</InnerVar>
                <InnerVar>boolean [embeddedMode=Configurations.isEmbeddedMode(globalConfiguration)]</InnerVar>
                <InnerVar>StorageType [storageType=configuration.memory().storageType()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createAndWire</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>configuration</ParamName>
                    <ParamType>Configuration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>globalComponentRegistry</ParamName>
                    <ParamType>GlobalComponentRegistry</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cacheName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Class&lt;? extends Encoder&gt; [encoderClass=getEncoderClass(globalComponentRegistry.getGlobalConfiguration(),configuration)]</InnerVar>
                <InnerVar>DataConversion [keyDataConversion=new DataConversion(encoderClass,ByteArrayWrapper.class)]</InnerVar>
                <InnerVar>DataConversion [valueDataConversion=new DataConversion(encoderClass,ByteArrayWrapper.class)]</InnerVar>
                <InnerVar>StreamingMarshaller [marshaller=globalComponentRegistry.getOrCreateComponent(StreamingMarshaller.class)]</InnerVar>
                <InnerVar>AdvancedCache&lt;K,V&gt; [cache=new CacheImpl&lt;&gt;(cacheName)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;bootstrap;[cacheName, cache, configuration, globalComponentRegistry, marshaller]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createSimpleCache</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>configuration</ParamName>
                    <ParamType>Configuration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>globalComponentRegistry</ParamName>
                    <ParamType>GlobalComponentRegistry</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cacheName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AdvancedCache&lt;K,V&gt; [cache]</InnerVar>
                <InnerVar>Class&lt;? extends Encoder&gt; [encoderClass=getEncoderClass(globalComponentRegistry.getGlobalConfiguration(),configuration)]</InnerVar>
                <InnerVar>JMXStatisticsConfiguration [jmxStatistics=configuration.jmxStatistics()]</InnerVar>
                <InnerVar>boolean [statisticsAvailable=jmxStatistics != null &amp;&amp; jmxStatistics.available()]</InnerVar>
                <InnerVar>DataConversion [keyDataConversion=new DataConversion(encoderClass,ByteArrayWrapper.class)]</InnerVar>
                <InnerVar>DataConversion [valueDataConversion=new DataConversion(encoderClass,ByteArrayWrapper.class)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>componentRegistry;registerComponent;[new CacheJmxRegistration(), CacheJmxRegistration.class.getName(), true]</InnerMethodInvoke>
                <InnerMethodInvoke>componentRegistry;registerComponent;[new RollingUpgradeManager(), RollingUpgradeManager.class.getName(), true]</InnerMethodInvoke>
                <InnerMethodInvoke>componentRegistry;registerComponent;[cache, Cache.class.getName(), true]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>bootstrapComponents</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;registerComponent;[new ClusterEventManagerStub&lt;K,V&gt;(), ClusterEventManager.class]</InnerMethodInvoke>
                <InnerMethodInvoke>null;registerComponent;[new PassivationManagerStub(), PassivationManager.class]</InnerMethodInvoke>
                <InnerMethodInvoke>null;registerComponent;[new ActivationManagerStub(), ActivationManager.class]</InnerMethodInvoke>
                <InnerMethodInvoke>null;registerComponent;[new PersistenceManagerStub(), PersistenceManager.class]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cacheComponents</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;getOrCreateComponent;[ExpirationManager.class]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>bootstrap</MethodName>
            <MethodComment>/** 
 * Bootstraps this factory with a Configuration and a ComponentRegistry.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cache</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>configuration</ParamName>
                    <ParamType>Configuration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>globalComponentRegistry</ParamName>
                    <ParamType>GlobalComponentRegistry</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>marshaller</ParamName>
                    <ParamType>StreamingMarshaller</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>componentRegistry;registerComponent;[cache, Cache.class.getName(), true]</InnerMethodInvoke>
                <InnerMethodInvoke>componentRegistry;registerComponent;[new CacheJmxRegistration(), CacheJmxRegistration.class.getName(), true]</InnerMethodInvoke>
                <InnerMethodInvoke>componentRegistry;registerComponent;[new RollingUpgradeManager(), RollingUpgradeManager.class.getName(), true]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>construct</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>componentType</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>