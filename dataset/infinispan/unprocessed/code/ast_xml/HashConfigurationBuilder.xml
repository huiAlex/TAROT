<Class>
    <Id>3201</Id>
    <Package>org.infinispan.configuration.cache</Package>
    <ClassName>HashConfigurationBuilder</ClassName>
    <SuperClass>AbstractClusteringConfigurationChildBuilder</SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Builder</SuperInterface>
        <SuperInterface>HashConfiguration</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>HashConfigurationBuilder  /** 
 * Allows fine-tuning of rehashing characteristics. Must only used with 'distributed' cache mode.
 * @author pmuir
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>attributes</FieldName>
            <FieldType>AttributeSet</FieldType>
        </Field>
        <Field>
            <FieldName>groupsConfigurationBuilder</FieldName>
            <FieldType>GroupsConfigurationBuilder</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>HashConfigurationBuilder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>builder</ParamName>
                    <ParamType>ClusteringConfigurationBuilder</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>consistentHash</MethodName>
            <MethodComment>/** 
 * @deprecated Since 5.2, replaced by {@link #consistentHashFactory(ConsistentHashFactory)}.
 */
</MethodComment>
            <ReturnType>HashConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>consistentHash</ParamName>
                    <ParamType>ConsistentHash</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>log;consistentHashDeprecated;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>consistentHashFactory</MethodName>
            <MethodComment>/** 
 * The consistent hash factory in use.
 */
</MethodComment>
            <ReturnType>HashConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>consistentHashFactory</ParamName>
                    <ParamType>? extends ConsistentHash</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>attributes.attribute(CONSISTENT_HASH_FACTORY);set;[consistentHashFactory]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>numOwners</MethodName>
            <MethodComment>/** 
 * Number of cluster-wide replicas for each cache entry.
 */
</MethodComment>
            <ReturnType>HashConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>numOwners</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>attributes.attribute(NUM_OWNERS);set;[numOwners]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isNumOwnersSet</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>numOwners</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>numVirtualNodes</MethodName>
            <MethodComment>/** 
 * @deprecated No longer used since 5.2, replaced by {@link #numSegments(int)} (which works like a{@code numVirtualNodes} value for the entire cluster).
 */
</MethodComment>
            <ReturnType>HashConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>numVirtualNodes</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>log;hashNumVirtualNodesDeprecated;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>numSegments</MethodName>
            <MethodComment>/** 
 * Controls the total number of hash space segments (per cluster). &lt;p&gt;A hash space segment is the granularity for key distribution in the cluster: a node can own (or primary-own) one or more full segments, but not a fraction of a segment. As such, larger {@code numSegments} values will mean a more even distribution of keys between nodes.&lt;p&gt;On the other hand, the memory/bandwidth usage of the new consistent hash grows linearly with {@code numSegments}. So we recommend keeping  {@code numSegments &lt;= 10 * clusterSize}.
 * @param numSegments the number of hash space segments. Must be strictly positive.
 */
</MethodComment>
            <ReturnType>HashConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>numSegments</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>attributes.attribute(NUM_SEGMENTS);set;[numSegments]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rehashEnabled</MethodName>
            <MethodComment>/** 
 * Enable rebalancing and rehashing, which will take place when a new node joins the cluster or a node leaves
 * @deprecated Use {@link StateTransferConfigurationBuilder#fetchInMemoryState(boolean)} instead.
 */
</MethodComment>
            <ReturnType>HashConfigurationBuilder</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>stateTransfer();fetchInMemoryState;[true]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rehashEnabled</MethodName>
            <MethodComment>/** 
 * Enable rebalancing and rehashing, which will take place when a new node joins the cluster or a node leaves
 * @deprecated Use {@link StateTransferConfigurationBuilder#fetchInMemoryState(boolean)} instead.
 */
</MethodComment>
            <ReturnType>HashConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>enabled</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>stateTransfer();fetchInMemoryState;[enabled]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rehashDisabled</MethodName>
            <MethodComment>/** 
 * Disable rebalancing and rehashing, which would have taken place when a new node joins the cluster or a node leaves
 * @deprecated Use {@link StateTransferConfigurationBuilder#fetchInMemoryState(boolean)} instead.
 */
</MethodComment>
            <ReturnType>HashConfigurationBuilder</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>stateTransfer();fetchInMemoryState;[false]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rehashRpcTimeout</MethodName>
            <MethodComment>/** 
 * Rehashing timeout
 * @deprecated Use {@link StateTransferConfigurationBuilder#timeout(long)} instead.
 */
</MethodComment>
            <ReturnType>HashConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rehashRpcTimeout</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>stateTransfer();timeout;[rehashRpcTimeout]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rehashWait</MethodName>
            <MethodComment>/** 
 * @deprecated No longer used.
 */
</MethodComment>
            <ReturnType>HashConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rehashWait</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hash</MethodName>
            <MethodComment>/** 
 * The hash function in use. Used as a bit spreader and a general hash code generator. Typically used in conjunction with the many default {@link org.infinispan.distribution.ch.ConsistentHash} implementations shipped.NOTE: Currently Infinispan will not use the object instance, but instead instantiate a new instance of the class. Therefore, do not expect any state to survive, and provide a no-args constructor to any instance. This will be resolved in Infinispan 5.2.0
 * @deprecated Since 8.2, use {@link #keyPartitioner(KeyPartitioner)} instead.
 */
</MethodComment>
            <ReturnType>HashConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>hash</ParamName>
                    <ParamType>Hash</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>attributes.attribute(HASH);set;[hash]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>capacityFactor</MethodName>
            <MethodComment>/** 
 * Controls the proportion of entries that will reside on the local node, compared to the other nodes in the cluster. This is just a suggestion, there is no guarantee that a node with a capacity factor of  {@code 2} willhave twice as many entries as a node with a capacity factor of  {@code 1}.
 * @param capacityFactor the capacity factor for the local node. Must be positive.
 */
</MethodComment>
            <ReturnType>HashConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>capacityFactor</ParamName>
                    <ParamType>float</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>attributes.attribute(CAPACITY_FACTOR);set;[capacityFactor]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>keyPartitioner</MethodName>
            <MethodComment>/** 
 * Key partitioner, controlling the mapping of keys to hash segments. &lt;p&gt; The default implementation  {@code org.infinispan.distribution.ch.impl.HashFunctionPartitioner}, uses the hash function configured via  {@link #hash(Hash)}. Future versions may ignore the hash function.
 * @since 8.2
 */
</MethodComment>
            <ReturnType>HashConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>keyPartitioner</ParamName>
                    <ParamType>KeyPartitioner</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>attributes.attribute(KEY_PARTITIONER);set;[keyPartitioner]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>groups</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>GroupsConfigurationBuilder</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>validate</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>groupsConfigurationBuilder;validate;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>validate</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>globalConfig</ParamName>
                    <ParamType>GlobalConfiguration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>groupsConfigurationBuilder;validate;[globalConfig]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>create</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>HashConfiguration</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>read</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>HashConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>template</ParamName>
                    <ParamType>HashConfiguration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.attributes;read;[template.attributes()]</InnerMethodInvoke>
                <InnerMethodInvoke>this.groupsConfigurationBuilder;read;[template.groups()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>