<Class>
    <Id>1975</Id>
    <Package>org.infinispan.client.hotrod.configuration</Package>
    <ClassName>ConfigurationChildBuilder</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ConfigurationChildBuilder  /** 
 * ConfigurationChildBuilder.
 * @author Tristan Tarrant
 * @since 5.3
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>addServer</MethodName>
            <MethodComment>/** 
 * Adds a new remote server
 */
</MethodComment>
            <ReturnType>ServerConfigurationBuilder</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addCluster</MethodName>
            <MethodComment>/** 
 * Adds a new remote server cluster
 */
</MethodComment>
            <ReturnType>ClusterConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clusterName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addServers</MethodName>
            <MethodComment>/** 
 * Adds a list of remote servers in the form: host1[:port][;host2[:port]]...
 */
</MethodComment>
            <ReturnType>ConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>servers</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>asyncExecutorFactory</MethodName>
            <MethodComment>/** 
 * Configuration for the executor service used for asynchronous work on the Transport, including asynchronous marshalling and Cache 'async operations' such as Cache.putAsync().
 */
</MethodComment>
            <ReturnType>ExecutorFactoryConfigurationBuilder</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>balancingStrategy</MethodName>
            <MethodComment>/** 
 * For replicated (vs distributed) Hot Rod server clusters, the client balances requests to the servers according to this strategy.
 */
</MethodComment>
            <ReturnType>ConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>balancingStrategy</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>balancingStrategy</MethodName>
            <MethodComment>/** 
 * For replicated (vs distributed) Hot Rod server clusters, the client balances requests to the servers according to this strategy.
 */
</MethodComment>
            <ReturnType>ConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>balancingStrategy</ParamName>
                    <ParamType>FailoverRequestBalancingStrategy</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>balancingStrategy</MethodName>
            <MethodComment>/** 
 * For replicated (vs distributed) Hot Rod server clusters, the client balances requests to the servers according to this strategy.
 */
</MethodComment>
            <ReturnType>ConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>balancingStrategy</ParamName>
                    <ParamType>? extends FailoverRequestBalancingStrategy</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>classLoader</MethodName>
            <MethodComment>/** 
 * Specifies the  {@link ClassLoader} used to find certain resources used by configuration when specified by name(e.g. certificate stores). Infinispan will search through the classloader which loaded this class, the system classloader, the TCCL and the OSGi classloader (if applicable).
 * @deprecated since 9.0.  If you need to load configuration resources from other locations, you will need to do soyourself and use the appropriate configuration methods (e.g.  {@link SslConfigurationBuilder#sslContext(SSLContext)})
 */
</MethodComment>
            <ReturnType>ConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classLoader</ParamName>
                    <ParamType>ClassLoader</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clientIntelligence</MethodName>
            <MethodComment>/** 
 * Specifies the level of "intelligence" the client should have
 */
</MethodComment>
            <ReturnType>ConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clientIntelligence</ParamName>
                    <ParamType>ClientIntelligence</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>connectionPool</MethodName>
            <MethodComment>/** 
 * Configures the connection pool
 */
</MethodComment>
            <ReturnType>ConnectionPoolConfigurationBuilder</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>connectionTimeout</MethodName>
            <MethodComment>/** 
 * This property defines the maximum socket connect timeout before giving up connecting to the server.
 */
</MethodComment>
            <ReturnType>ConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>connectionTimeout</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>consistentHashImpl</MethodName>
            <MethodComment>/** 
 * Defines the  {@link ConsistentHash} implementation to use for the specified version. By default,{@link ConsistentHashV2} is used for version 1 and {@link ConsistentHashV2} is used for version 2.
 */
</MethodComment>
            <ReturnType>ConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>version</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>consistentHashClass</ParamName>
                    <ParamType>? extends ConsistentHash</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>consistentHashImpl</MethodName>
            <MethodComment>/** 
 * Defines the  {@link ConsistentHash} implementation to use for the specified version. By default,{@link ConsistentHashV2} is used for version 1 and {@link ConsistentHashV2} is used for version 2.
 */
</MethodComment>
            <ReturnType>ConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>version</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>consistentHashClass</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>forceReturnValues</MethodName>
            <MethodComment>/** 
 * Whether or not to implicitly FORCE_RETURN_VALUE for all calls.
 */
</MethodComment>
            <ReturnType>ConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>forceReturnValues</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>keySizeEstimate</MethodName>
            <MethodComment>/** 
 * This hint allows sizing of byte buffers when serializing and deserializing keys, to minimize array resizing. It defaults to 64.
 */
</MethodComment>
            <ReturnType>ConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>keySizeEstimate</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>marshaller</MethodName>
            <MethodComment>/** 
 * Allows you to specify a custom  {@link Marshaller} implementation toserialize and deserialize user objects. This method is mutually exclusive with  {@link #marshaller(Marshaller)}.
 */
</MethodComment>
            <ReturnType>ConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>marshaller</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>marshaller</MethodName>
            <MethodComment>/** 
 * Allows you to specify a custom  {@link Marshaller} implementation toserialize and deserialize user objects. This method is mutually exclusive with  {@link #marshaller(Marshaller)}.
 */
</MethodComment>
            <ReturnType>ConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>marshaller</ParamName>
                    <ParamType>? extends Marshaller</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>marshaller</MethodName>
            <MethodComment>/** 
 * Allows you to specify an instance of  {@link Marshaller} to serializeand deserialize user objects. This method is mutually exclusive with  {@link #marshaller(Class)}.
 */
</MethodComment>
            <ReturnType>ConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>marshaller</ParamName>
                    <ParamType>Marshaller</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>protocolVersion</MethodName>
            <MethodComment>/** 
 * This property defines the protocol version that this client should use. Defaults to the latest protocol version supported by this client.
 * @deprecated Use {@link ConfigurationChildBuilder#version(ProtocolVersion)} instead.
 */
</MethodComment>
            <ReturnType>ConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>protocolVersion</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>version</MethodName>
            <MethodComment>/** 
 * This property defines the protocol version that this client should use. Defaults to the latest protocol version supported by this client.
 */
</MethodComment>
            <ReturnType>ConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>protocolVersion</ParamName>
                    <ParamType>ProtocolVersion</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>socketTimeout</MethodName>
            <MethodComment>/** 
 * This property defines the maximum socket read timeout in milliseconds before giving up waiting for bytes from the server. Defaults to 60000 (1 minute)
 */
</MethodComment>
            <ReturnType>ConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>socketTimeout</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>security</MethodName>
            <MethodComment>/** 
 * Security Configuration
 */
</MethodComment>
            <ReturnType>SecurityConfigurationBuilder</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>tcpNoDelay</MethodName>
            <MethodComment>/** 
 * Affects TCP NODELAY on the TCP stack. Defaults to enabled
 */
</MethodComment>
            <ReturnType>ConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tcpNoDelay</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>tcpKeepAlive</MethodName>
            <MethodComment>/** 
 * Affects TCP KEEPALIVE on the TCP stack. Defaults to disable
 */
</MethodComment>
            <ReturnType>ConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>keepAlive</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>transportFactory</MethodName>
            <MethodComment>/** 
 * Controls which transport to use. Currently only the TcpTransport is supported.
 */
</MethodComment>
            <ReturnType>ConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>transportFactory</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>transportFactory</MethodName>
            <MethodComment>/** 
 * Controls which transport to use. Currently only the TcpTransport is supported.
 */
</MethodComment>
            <ReturnType>ConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>transportFactory</ParamName>
                    <ParamType>? extends TransportFactory</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>valueSizeEstimate</MethodName>
            <MethodComment>/** 
 * This hint allows sizing of byte buffers when serializing and deserializing values, to minimize array resizing. It defaults to 512
 */
</MethodComment>
            <ReturnType>ConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>valueSizeEstimate</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>maxRetries</MethodName>
            <MethodComment>/** 
 * It sets the maximum number of retries for each request. A valid value should be greater or equals than 0 (zero). Zero means no retry will made in case of a network failure. It defaults to 10.
 */
</MethodComment>
            <ReturnType>ConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>maxRetries</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addJavaSerialWhiteList</MethodName>
            <MethodComment>/** 
 * List of regular expressions for classes that can be deserialized using standard Java deserialization when reading data that might have been stored with a different endpoint, e.g. REST.
 */
</MethodComment>
            <ReturnType>ConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>regEx</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>batchSize</MethodName>
            <MethodComment>/** 
 * Sets the batch size of internal iterators (ie. &lt;code&gt;keySet().iterator()&lt;/code&gt;. Defaults to 10_000
 * @param batchSize the batch size to set
 * @return this configuration builder with the batch size set
 */
</MethodComment>
            <ReturnType>ConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>batchSize</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>withProperties</MethodName>
            <MethodComment>/** 
 * Configures this builder using the specified properties
 */
</MethodComment>
            <ReturnType>ConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>properties</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>build</MethodName>
            <MethodComment>/** 
 * Builds a configuration object
 */
</MethodComment>
            <ReturnType>Configuration</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>