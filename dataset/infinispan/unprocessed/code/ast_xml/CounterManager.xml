<Class>
    <Id>1695</Id>
    <Package>org.infinispan.counter.api</Package>
    <ClassName>CounterManager</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>CounterManager  /** 
 * The  {@link CounterManager} creates, defines and returns counters.&lt;p&gt; It is thread-safe in the way that multiples threads can retrieve/create counters concurrently. If it is the first time a counter is created, other concurrent threads may block until it is properly initialized. &lt;p&gt; A counter can be defined using  {@link CounterManager#defineCounter(String,CounterConfiguration)} and {@link CounterManager#isDefined(String)} returns if the counter is defined or not.&lt;p&gt; The counter can be retrieved/created using the  {@link CounterManager#getStrongCounter(String)} or {@link CounterManager#getWeakCounter(String)} to return an (un)bounded strong counter or weak counter. The operation willfail if the counter is defined with a different type. For example, define a strong counter  {@code "test"} and try toretrieve using the  {@code getWeakCounter("test"}.
 * @author Pedro Ruivo
 * @see CounterConfiguration
 * @since 9.0
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getStrongCounter</MethodName>
            <MethodComment>/** 
 * Returns the  {@link StrongCounter} with that specific name.&lt;p&gt; If the  {@link StrongCounter} does not exists, it is created based on the {@link CounterConfiguration}. &lt;p&gt; Note that the counter must be defined prior to this method invocation using  {@link CounterManager#defineCounter(String,CounterConfiguration)} or via global configuration. This method only supports{@link CounterType#BOUNDED_STRONG} and {@link CounterType#UNBOUNDED_STRONG} counters.
 * @param name the counter name.
 * @return the {@link StrongCounter} instance.
 * @throws org.infinispan.counter.exception.CounterException              if unable to retrieve the counter.
 * @throws org.infinispan.counter.exception.CounterConfigurationException if the counter configuration is not validor it does not exists.
 */
</MethodComment>
            <ReturnType>StrongCounter</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getWeakCounter</MethodName>
            <MethodComment>/** 
 * Returns the  {@link WeakCounter} with that specific name.&lt;p&gt; If the  {@link WeakCounter} does not exists, it is created based on the {@link CounterConfiguration}. &lt;p&gt; Note that the counter must be defined prior to this method invocation using  {@link CounterManager#defineCounter(String,CounterConfiguration)} or via global configuration. This method only supports{@link CounterType#WEAK} counters.
 * @param name the counter name.
 * @return the {@link WeakCounter} instance.
 * @throws org.infinispan.counter.exception.CounterException              if unable to retrieve the counter.
 * @throws org.infinispan.counter.exception.CounterConfigurationException if the counter configuration is not validor it does not exists.
 */
</MethodComment>
            <ReturnType>WeakCounter</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>defineCounter</MethodName>
            <MethodComment>/** 
 * Defines a counter with the specific  {@code name} and {@link CounterConfiguration}. &lt;p&gt; It does not overwrite existing configurations.
 * @param name          the counter name.
 * @param configuration the counter configuration
 * @return {@code true} if successfully defined or {@code false} if the counter exists or fails to defined.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>configuration</ParamName>
                    <ParamType>CounterConfiguration</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isDefined</MethodName>
            <MethodComment>/** 
 * @param name the counter name.
 * @return {@code true} if the counter is defined or {@code false} if the counter is not defined or fails to check.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getConfiguration</MethodName>
            <MethodComment>/** 
 * @param counterName the counter name.
 * @return the counter's {@link CounterConfiguration} or {@code null} if the counter is not defined.
 */
</MethodComment>
            <ReturnType>CounterConfiguration</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>counterName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>