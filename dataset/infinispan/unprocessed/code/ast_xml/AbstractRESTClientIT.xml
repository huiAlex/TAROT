<Class>
    <Id>3511</Id>
    <Package>org.infinispan.server.test.client.rest</Package>
    <ClassName>AbstractRESTClientIT</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>AbstractRESTClientIT  /** 
 * Tests for the REST client. Subclasses must implement the addRestServer, which has to setup the RESTHelper by calling RESTHelper.addServer method.
 * @author &lt;a href="mailto:jvilkola@redhat.com"&gt;Jozef Vilkolak&lt;/a&gt;
 * @author &lt;a href="mailto:mlinhard@redhat.com"&gt;Michal Linhard&lt;/a&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>rest</FieldName>
            <FieldType>RESTHelper</FieldType>
        </Field>
        <Field>
            <FieldName>REST_NAMED_CACHE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>content</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>addRestServer</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>TestSerializable</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>content</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getContent</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDefaultCache</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setUp</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;addRestServer;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;cleanUpEntries;[]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;head;[rest.fullPathKey(KEY_A), HttpStatus.SC_NOT_FOUND]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;head;[rest.fullPathKey(KEY_B), HttpStatus.SC_NOT_FOUND]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;head;[rest.fullPathKey(KEY_C), HttpStatus.SC_NOT_FOUND]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;head;[rest.fullPathKey(REST_NAMED_CACHE,KEY_A), HttpStatus.SC_NOT_FOUND]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cleanUpEntries</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rest;delete;[rest.fullPathKey(KEY_A)]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;delete;[rest.fullPathKey(KEY_B)]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;delete;[rest.fullPathKey(KEY_C)]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;delete;[rest.fullPathKey(REST_NAMED_CACHE,KEY_A)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>tearDown</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;cleanUpEntries;[]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;clearServers;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testBasicOperation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>URI [fullPathKey=rest.fullPathKey(KEY_A)]</InnerVar>
                <InnerVar>String [initialXML="&lt;hey&gt;ho&lt;/hey&gt;"]</InnerVar>
                <InnerVar>HttpResponse [insert=rest.put(fullPathKey,initialXML,"application/octet-stream")]</InnerVar>
                <InnerVar>HttpResponse [get=rest.get(fullPathKey,initialXML)]</InnerVar>
                <InnerVar>ByteArrayOutputStream [bout=new ByteArrayOutputStream()]</InnerVar>
                <InnerVar>ObjectOutputStream [oo=new ObjectOutputStream(bout)]</InnerVar>
                <InnerVar>byte[] [byteData=bout.toByteArray()]</InnerVar>
                <InnerVar>HttpResponse [resp=rest.getWithoutClose(fullPathKey)]</InnerVar>
                <InnerVar>ObjectInputStream [oin=new ObjectInputStream(resp.getEntity().getContent())]</InnerVar>
                <InnerVar>TestSerializable [ts=(TestSerializable)oin.readObject()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertEquals;[0, insert.getEntity().getContentLength()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["application/octet-stream", get.getHeaders("Content-Type")[0].getValue()]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;delete;[fullPathKey]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;get;[fullPathKey, HttpStatus.SC_NOT_FOUND]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;put;[fullPathKey, initialXML, "application/octet-stream"]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;get;[fullPathKey, initialXML]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;delete;[rest.fullPathKey(null)]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;get;[fullPathKey, HttpStatus.SC_NOT_FOUND]</InnerMethodInvoke>
                <InnerMethodInvoke>oo;writeObject;[new TestSerializable("CONTENT")]</InnerMethodInvoke>
                <InnerMethodInvoke>oo;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;put;[fullPathKey, byteData, "application/octet-stream"]</InnerMethodInvoke>
                <InnerMethodInvoke>EntityUtils;consume;[resp.getEntity()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["CONTENT", ts.getContent()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testEmptyGet</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rest;get;[rest.fullPathKey("nodata"), HttpStatus.SC_NOT_FOUND]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testGet</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>URI [fullPathKey=rest.fullPathKey(KEY_A)]</InnerVar>
                <InnerVar>HttpResponse [resp=rest.get(fullPathKey,"data")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rest;post;[fullPathKey, "data", "application/text"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotNull;[resp.getHeaders("ETag")[0].getValue()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotNull;[resp.getHeaders("Last-Modified")[0].getValue()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["application/text;charset=UTF-8", resp.getHeaders("Content-Type")[0].getValue()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testGetNamedCache</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>URI [fullPathKey=rest.fullPathKey(REST_NAMED_CACHE,KEY_A)]</InnerVar>
                <InnerVar>HttpResponse [resp=rest.get(fullPathKey,"data")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rest;post;[fullPathKey, "data", "application/text"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotNull;[resp.getHeaders("ETag")[0].getValue()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotNull;[resp.getHeaders("Last-Modified")[0].getValue()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["application/text;charset=UTF-8", resp.getHeaders("Content-Type")[0].getValue()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testHead</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>URI [fullPathKey=rest.fullPathKey(KEY_A)]</InnerVar>
                <InnerVar>HttpResponse [resp=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rest;post;[fullPathKey, "data", "application/text"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testPostDuplicate</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>URI [fullPathKey=rest.fullPathKey(KEY_A)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rest;post;[fullPathKey, "data", "application/text"]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;post;[fullPathKey, "data", "application/text", HttpStatus.SC_CONFLICT]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;put;[fullPathKey, "data", "application/text"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testPutDataWithTimeToLive</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>URI [fullPathKey=rest.fullPathKey(KEY_A)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rest;post;[fullPathKey, "data", "application/text", HttpStatus.SC_OK, "Content-Type", "application/text", "timeToLiveSeconds", "2"]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;get;[fullPathKey, "data"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;sleepForSecs;[2.1]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;head;[fullPathKey, HttpStatus.SC_NOT_FOUND]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testPutDataWithMaxIdleTime</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>URI [fullPathKey=rest.fullPathKey(KEY_A)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rest;post;[fullPathKey, "data", "application/text", HttpStatus.SC_OK, "Content-Type", "application/text", "maxIdleTimeSeconds", "2"]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;get;[fullPathKey, "data"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;sleepForSecs;[2.1]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;head;[fullPathKey, HttpStatus.SC_NOT_FOUND]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testPutDataTTLMaxIdleCombo1</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>URI [fullPathKey=rest.fullPathKey(KEY_A)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rest;post;[fullPathKey, "data", "application/text", HttpStatus.SC_OK, "Content-Type", "application/text", "timeToLiveSeconds", "10", "maxIdleTimeSeconds", "2"]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;get;[fullPathKey, "data"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;sleepForSecs;[2.1]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;head;[fullPathKey, HttpStatus.SC_NOT_FOUND]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testPutDataTTLMaxIdleCombo2</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>URI [fullPathKey=rest.fullPathKey(KEY_A)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rest;post;[fullPathKey, "data", "application/text", HttpStatus.SC_OK, "Content-Type", "application/text", "timeToLiveSeconds", "2", "maxIdleTimeSeconds", "10"]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;get;[fullPathKey, "data"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;sleepForSecs;[2.1]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;head;[fullPathKey, HttpStatus.SC_NOT_FOUND]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testRemoveEntry</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>URI [fullPathKey=rest.fullPathKey(KEY_A)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rest;post;[fullPathKey, "data", "application/text"]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;head;[fullPathKey]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;delete;[fullPathKey]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;head;[fullPathKey, HttpStatus.SC_NOT_FOUND]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testWipeCacheBucket</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rest;post;[rest.fullPathKey(KEY_A), "data", "application/text"]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;post;[rest.fullPathKey(KEY_B), "data", "application/text"]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;head;[rest.fullPathKey(KEY_A)]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;head;[rest.fullPathKey(KEY_B)]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;delete;[rest.fullPathKey(null)]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;head;[rest.fullPathKey(KEY_A), HttpStatus.SC_NOT_FOUND]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;head;[rest.fullPathKey(KEY_B), HttpStatus.SC_NOT_FOUND]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testPutUnknownClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>URI [fullPathKey=rest.fullPathKey("x")]</InnerVar>
                <InnerVar>ByteArrayOutputStream [bout=new ByteArrayOutputStream()]</InnerVar>
                <InnerVar>ObjectOutputStream [oo=new ObjectOutputStream(bout)]</InnerVar>
                <InnerVar>byte[] [byteData=bout.toByteArray()]</InnerVar>
                <InnerVar>HttpResponse [resp=rest.get(fullPathKey,null,HttpStatus.SC_OK,false,"Accept","application/x-java-serialized-object")]</InnerVar>
                <InnerVar>ObjectInputStream [oin=new ObjectInputStream(resp.getEntity().getContent())]</InnerVar>
                <InnerVar>TestSerializable [ts=(TestSerializable)oin.readObject()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>oo;writeObject;[new TestSerializable("CONTENT")]</InnerMethodInvoke>
                <InnerMethodInvoke>oo;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;put;[fullPathKey, byteData, "application/x-java-serialized-object"]</InnerMethodInvoke>
                <InnerMethodInvoke>EntityUtils;consume;[resp.getEntity()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["CONTENT", ts.getContent()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testPutKnownClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>URI [fullPathKey=rest.fullPathKey("y")]</InnerVar>
                <InnerVar>ByteArrayOutputStream [bout=new ByteArrayOutputStream()]</InnerVar>
                <InnerVar>ObjectOutputStream [oo=new ObjectOutputStream(bout)]</InnerVar>
                <InnerVar>Integer [i1=42]</InnerVar>
                <InnerVar>byte[] [byteData=bout.toByteArray()]</InnerVar>
                <InnerVar>HttpResponse [resp=rest.get(fullPathKey,null,HttpStatus.SC_OK,false,"Accept","application/x-java-serialized-object")]</InnerVar>
                <InnerVar>ObjectInputStream [oin=new ObjectInputStream(resp.getEntity().getContent())]</InnerVar>
                <InnerVar>Integer [i2=(Integer)oin.readObject()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>oo;writeObject;[i1]</InnerMethodInvoke>
                <InnerMethodInvoke>oo;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;put;[fullPathKey, byteData, "application/x-java-serialized-object"]</InnerMethodInvoke>
                <InnerMethodInvoke>EntityUtils;consume;[resp.getEntity()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[i1, i2]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testETagChanges</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>URI [fullPathKey=rest.fullPathKey(KEY_A)]</InnerVar>
                <InnerVar>String [eTagFirst=rest.get(fullPathKey).getHeaders("ETag")[0].getValue()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rest;put;[fullPathKey, "data1", "application/text"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[eTagFirst, rest.get(fullPathKey).getHeaders("ETag")[0].getValue()]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;put;[fullPathKey, "data2", "application/text"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertFalse;[eTagFirst.equals(rest.get(fullPathKey).getHeaders("ETag")[0].getValue())]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testXJavaSerializedObjectPutAndDelete</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>URI [fullPathKey1=rest.fullPathKey("j")]</InnerVar>
                <InnerVar>URI [fullPathKey2=rest.fullPathKey("k")]</InnerVar>
                <InnerVar>ByteArrayOutputStream [bout=new ByteArrayOutputStream()]</InnerVar>
                <InnerVar>ObjectOutputStream [oo=new ObjectOutputStream(bout)]</InnerVar>
                <InnerVar>Integer [i1=42]</InnerVar>
                <InnerVar>byte[] [byteData=bout.toByteArray()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rest;put;[fullPathKey1, "data1", "application/text"]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;head;[fullPathKey1, HttpStatus.SC_OK]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;delete;[fullPathKey1]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;head;[fullPathKey1, HttpStatus.SC_NOT_FOUND]</InnerMethodInvoke>
                <InnerMethodInvoke>oo;writeObject;[i1]</InnerMethodInvoke>
                <InnerMethodInvoke>oo;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;put;[fullPathKey2, byteData, "application/x-java-serialized-object"]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;head;[fullPathKey2, HttpStatus.SC_OK]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;delete;[fullPathKey2]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;head;[fullPathKey2, HttpStatus.SC_NOT_FOUND]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testIfModifiedSince</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>URI [fullPathKey=rest.fullPathKey(KEY_A)]</InnerVar>
                <InnerVar>HttpResponse [resp=rest.get(fullPathKey)]</InnerVar>
                <InnerVar>String [dateLast=resp.getHeaders("Last-Modified")[0].getValue()]</InnerVar>
                <InnerVar>String [dateMinus=addDay(dateLast,-1)]</InnerVar>
                <InnerVar>String [datePlus=addDay(dateLast,1)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rest;put;[fullPathKey, "data", "application/text"]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;get;[fullPathKey, null, HttpStatus.SC_NOT_MODIFIED, true, "If-Modified-Since", dateLast]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testIfUnmodifiedSince</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>URI [fullPathKey=rest.fullPathKey(KEY_A)]</InnerVar>
                <InnerVar>HttpResponse [resp=rest.get(fullPathKey)]</InnerVar>
                <InnerVar>String [dateLast=resp.getHeaders("Last-Modified")[0].getValue()]</InnerVar>
                <InnerVar>String [dateMinus=addDay(dateLast,-1)]</InnerVar>
                <InnerVar>String [datePlus=addDay(dateLast,1)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rest;put;[fullPathKey, "data", "application/text"]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;get;[fullPathKey, "data", HttpStatus.SC_OK, true, "If-Unmodified-Since", dateLast]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;get;[fullPathKey, "data", HttpStatus.SC_OK, true, "If-Unmodified-Since", datePlus]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;get;[fullPathKey, null, HttpStatus.SC_PRECONDITION_FAILED, true, "If-Unmodified-Since", dateMinus]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testIfNoneMatch</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>URI [fullPathKey=rest.fullPathKey(KEY_A)]</InnerVar>
                <InnerVar>HttpResponse [resp=rest.get(fullPathKey)]</InnerVar>
                <InnerVar>String [eTag=resp.getHeaders("ETag")[0].getValue()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rest;put;[fullPathKey, "data", "text/plain"]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;get;[fullPathKey, null, HttpStatus.SC_NOT_MODIFIED, true, "If-None-Match", eTag]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;get;[fullPathKey, "data", HttpStatus.SC_OK, true, "If-None-Match", eTag + "garbage"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testIfMatch</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>URI [fullPathKey=rest.fullPathKey(KEY_A)]</InnerVar>
                <InnerVar>HttpResponse [resp=rest.get(fullPathKey)]</InnerVar>
                <InnerVar>String [eTag=resp.getHeaders("ETag")[0].getValue()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rest;put;[fullPathKey, "data", "text/plain"]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;get;[fullPathKey, "data", HttpStatus.SC_OK, true, "If-Match", eTag]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;get;[fullPathKey, null, HttpStatus.SC_PRECONDITION_FAILED, true, "If-Match", eTag + "garbage"]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;head;[fullPathKey, HttpStatus.SC_OK, new String[][]{{"If-Match",eTag}}]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;head;[fullPathKey, HttpStatus.SC_PRECONDITION_FAILED, new String[][]{{"If-Match",eTag + "garbage"}}]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testNonExistentCache</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rest;get;[rest.fullPathKey("nonexistentcache","nodata"), HttpStatus.SC_NOT_FOUND]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;put;[rest.fullPathKey("nonexistentcache","nodata"), "data", "application/text", HttpStatus.SC_NOT_FOUND]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;delete;[rest.fullPathKey("nonexistentcache","nodata"), HttpStatus.SC_NOT_FOUND]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testByteArrayStorage</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [KEY_Z="z"]</InnerVar>
                <InnerVar>byte[] [data="data".getBytes("UTF-8")]</InnerVar>
                <InnerVar>ByteArrayOutputStream [bout=new ByteArrayOutputStream()]</InnerVar>
                <InnerVar>ObjectOutputStream [oo=new ObjectOutputStream(bout)]</InnerVar>
                <InnerVar>byte[] [serializedData=bout.toByteArray()]</InnerVar>
                <InnerVar>HttpResponse [resp=rest.get(rest.fullPathKey(0,KEY_Z),null,HttpStatus.SC_OK,false,"Accept","application/x-java-serialized-object")]</InnerVar>
                <InnerVar>ObjectInputStream [oin=new ObjectInputStream(resp.getEntity().getContent())]</InnerVar>
                <InnerVar>byte[] [dataBack=(byte[])oin.readObject()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>oo;writeObject;[data]</InnerMethodInvoke>
                <InnerMethodInvoke>oo;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>rest;put;[rest.fullPathKey(0,KEY_Z), serializedData, "application/x-java-serialized-object"]</InnerMethodInvoke>
                <InnerMethodInvoke>EntityUtils;consume;[resp.getEntity()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;[Arrays.equals(data,dataBack)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testStoreBigObject</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [SIZE=3000000]</InnerVar>
                <InnerVar>byte[] [bytes=new byte[SIZE]]</InnerVar>
                <InnerVar>HttpResponse [resp=rest.getWithoutClose(rest.fullPathKey("object"))]</InnerVar>
                <InnerVar>InputStream [responseStream=resp.getEntity().getContent()]</InnerVar>
                <InnerVar>byte[] [response=new byte[SIZE]]</InnerVar>
                <InnerVar>byte [data]</InnerVar>
                <InnerVar>int [j=0]</InnerVar>
                <InnerVar>boolean [correct=true]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rest;put;[rest.fullPathKey("object"), bytes, "application/octet-stream"]</InnerMethodInvoke>
                <InnerMethodInvoke>EntityUtils;consume;[resp.getEntity()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;[correct]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testKeyIncludingSlashURLEncoded</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [encodedSlashKey=URLEncoder.encode("x/y","UTF-8")]</InnerVar>
                <InnerVar>HttpResponse [get=rest.get(rest.fullPathKey(encodedSlashKey),"data")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rest;post;[rest.fullPathKey(encodedSlashKey), "data", "application/text"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotNull;[get.getHeaders("ETag")[0].getValue()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotNull;[get.getHeaders("Last-Modified")[0].getValue()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["application/text;charset=UTF-8", get.getHeaders("Content-Type")[0].getValue()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>