<Class>
    <Id>2464</Id>
    <Package>org.infinispan.stream.impl</Package>
    <ClassName>LocalStreamManagerImpl</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>LocalStreamManager</SuperInterface>
        <SuperInterface>K</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>LocalStreamManagerImpl  /** 
 * Local stream manager implementation that handles injection of the stream supplier, invoking the operation and subsequently notifying the operation if a rehash has changed one of its segments.
 * @param &lt; K &gt; key type of underlying cache
 * @param &lt; V &gt; value type of underlying cache
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>trace</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>cache</FieldName>
            <FieldType>AdvancedCache</FieldType>
        </Field>
        <Field>
            <FieldName>cache</FieldName>
            <FieldType>K</FieldType>
        </Field>
        <Field>
            <FieldName>registry</FieldName>
            <FieldType>ComponentRegistry</FieldType>
        </Field>
        <Field>
            <FieldName>stm</FieldName>
            <FieldType>StateTransferManager</FieldType>
        </Field>
        <Field>
            <FieldName>rpc</FieldName>
            <FieldType>RpcManager</FieldType>
        </Field>
        <Field>
            <FieldName>factory</FieldName>
            <FieldType>CommandsFactory</FieldType>
        </Field>
        <Field>
            <FieldName>hasLoader</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>localAddress</FieldName>
            <FieldType>Address</FieldType>
        </Field>
        <Field>
            <FieldName>cacheMode</FieldName>
            <FieldType>CacheMode</FieldType>
        </Field>
        <Field>
            <FieldName>changeListener</FieldName>
            <FieldType>ConcurrentMap</FieldType>
        </Field>
        <Field>
            <FieldName>changeListener</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>cacheName</FieldName>
            <FieldType>ByteString</FieldType>
        </Field>
        <Field>
            <FieldName>segments</FieldName>
            <FieldType>Set</FieldType>
        </Field>
        <Field>
            <FieldName>segments</FieldName>
            <FieldType>Integer</FieldType>
        </Field>
        <Field>
            <FieldName>op</FieldName>
            <FieldType>SegmentAwareOperation</FieldType>
        </Field>
        <Field>
            <FieldName>segmentsLost</FieldName>
            <FieldType>Set</FieldType>
        </Field>
        <Field>
            <FieldName>segmentsLost</FieldName>
            <FieldType>Integer</FieldType>
        </Field>
        <Field>
            <FieldName>origin</FieldName>
            <FieldType>Address</FieldType>
        </Field>
        <Field>
            <FieldName>requestId</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>useManagedBlocker</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>response</FieldName>
            <FieldType>R</FieldType>
        </Field>
        <Field>
            <FieldName>completed</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>SegmentListener</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>segments</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>op</ParamName>
                    <ParamType>SegmentAwareOperation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>localSegments</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>localSegments</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>segments;forEach;[s -&gt; {
  if (!localSegments.contains(s)) {
    if (trace) {
      log.tracef("Could not process segment %s",s);
    }
    segmentsLost.add(s);
  }
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>lostSegments</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lostSegments</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>inject</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cache</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>registry</ParamName>
                    <ParamType>ComponentRegistry</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stm</ParamName>
                    <ParamType>StateTransferManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rpc</ParamName>
                    <ParamType>RpcManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>configuration</ParamName>
                    <ParamType>Configuration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>factory</ParamName>
                    <ParamType>CommandsFactory</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>start</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cache;addListener;[this]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>dataRehashed</MethodName>
            <MethodComment>/** 
 * We need to listen to data rehash events in case if data moves while we are iterating over it. If a rehash occurs causing this node to lose a segment and there is something iterating over the stream looking for values of that segment, we can't guarantee that the data has all been seen correctly, so we must therefore suspect that node by sending it back to the owner.
 * @param event The data rehash event
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>event</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ConsistentHash [startHash=event.getConsistentHashAtStart()]</InnerVar>
                <InnerVar>ConsistentHash [endHash=event.getConsistentHashAtEnd()]</InnerVar>
                <InnerVar>boolean [trace=log.isTraceEnabled()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCacheRespectingLoader</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>includeLoader</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStream</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>CacheEntry&lt;K,V&gt;</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheEntrySet</ParamName>
                    <ParamType>CacheEntry&lt;K,V&gt;</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parallelStream</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>segments</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>keysToInclude</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>keysToExclude</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Stream&lt;CacheEntry&lt;K,V&gt;&gt; [stream=(parallelStream ? cacheEntrySet.parallelStream() : cacheEntrySet.stream()).filterKeys(keysToInclude).filterKeySegments(segments)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRehashStream</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>CacheEntry&lt;K,V&gt;</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheEntrySet</ParamName>
                    <ParamType>CacheEntry&lt;K,V&gt;</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>requestId</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>listener</ParamName>
                    <ParamType>SegmentListener</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parallelStream</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>segments</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>keysToInclude</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>keysToExclude</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CacheTopology [topology=stm.getCacheTopology()]</InnerVar>
                <InnerVar>ConsistentHash [readCH=topology.getCurrentCH()]</InnerVar>
                <InnerVar>ConsistentHash [pendingCH=topology.getPendingCH()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>handleResponseError</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>completableFuture</ParamName>
                    <ParamType>Map&lt;Address,Response&gt;</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>requestId</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>origin</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>streamOperation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>requestId</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>origin</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parallelStream</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>segments</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>keysToInclude</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>keysToExclude</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>includeLoader</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>operation</ParamName>
                    <ParamType>R</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CacheSet&lt;CacheEntry&lt;K,V&gt;&gt; [cacheEntrySet=getCacheRespectingLoader(includeLoader).cacheEntrySet()]</InnerVar>
                <InnerVar>R [value=operation.performOperation()]</InnerVar>
                <InnerVar>CompletableFuture&lt;Map&lt;Address,Response&gt;&gt; [completableFuture=rpc.invokeRemotelyAsync(Collections.singleton(origin),factory.buildStreamResponseCommand(requestId,true,Collections.emptySet(),value),rpc.getDefaultRpcOptions(true))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>operation;setSupplier;[() -&gt; getStream(cacheEntrySet,parallelStream,segments,keysToInclude,keysToExclude)]</InnerMethodInvoke>
                <InnerMethodInvoke>operation;handleInjection;[registry]</InnerMethodInvoke>
                <InnerMethodInvoke>null;handleResponseError;[completableFuture, requestId, origin]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>streamOperationRehashAware</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>requestId</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>origin</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parallelStream</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>segments</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>keysToInclude</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>keysToExclude</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>includeLoader</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>operation</ParamName>
                    <ParamType>R</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CacheSet&lt;CacheEntry&lt;K,V&gt;&gt; [cacheEntrySet=getCacheRespectingLoader(includeLoader).cacheEntrySet()]</InnerVar>
                <InnerVar>SegmentListener [listener=new SegmentListener(segments,operation)]</InnerVar>
                <InnerVar>R [value]</InnerVar>
                <InnerVar>CompletableFuture&lt;Map&lt;Address,Response&gt;&gt; [completableFuture=rpc.invokeRemotelyAsync(Collections.singleton(origin),factory.buildStreamResponseCommand(requestId,true,listener.segmentsLost,value),rpc.getDefaultRpcOptions(true))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>operation;handleInjection;[registry]</InnerMethodInvoke>
                <InnerMethodInvoke>changeListener;put;[requestId, listener]</InnerMethodInvoke>
                <InnerMethodInvoke>null;handleResponseError;[completableFuture, requestId, origin]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>streamOperation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>requestId</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>origin</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parallelStream</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>segments</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>keysToInclude</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>keysToExclude</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>includeLoader</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>operation</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CacheSet&lt;CacheEntry&lt;K,V&gt;&gt; [cacheEntrySet=getCacheRespectingLoader(includeLoader).cacheEntrySet()]</InnerVar>
                <InnerVar>Collection&lt;R&gt; [value=operation.performOperation(new NonRehashIntermediateCollector&lt;&gt;(origin,requestId,parallelStream))]</InnerVar>
                <InnerVar>CompletableFuture&lt;Map&lt;Address,Response&gt;&gt; [completableFuture=rpc.invokeRemotelyAsync(Collections.singleton(origin),factory.buildStreamResponseCommand(requestId,true,Collections.emptySet(),value),rpc.getDefaultRpcOptions(true))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>operation;setSupplier;[() -&gt; getStream(cacheEntrySet,parallelStream,segments,keysToInclude,keysToExclude)]</InnerMethodInvoke>
                <InnerMethodInvoke>operation;handleInjection;[registry]</InnerMethodInvoke>
                <InnerMethodInvoke>null;handleResponseError;[completableFuture, requestId, origin]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>streamOperationRehashAware</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>requestId</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>origin</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parallelStream</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>segments</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>keysToInclude</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>keysToExclude</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>includeLoader</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>operation</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CacheSet&lt;CacheEntry&lt;K,V&gt;&gt; [cacheEntrySet=getCacheRespectingLoader(includeLoader).cacheEntrySet()]</InnerVar>
                <InnerVar>SegmentListener [listener=new SegmentListener(segments,operation)]</InnerVar>
                <InnerVar>Collection&lt;CacheEntry&lt;K,R2&gt;&gt; [results]</InnerVar>
                <InnerVar>CompletableFuture&lt;Map&lt;Address,Response&gt;&gt; [completableFuture=rpc.invokeRemotelyAsync(Collections.singleton(origin),factory.buildStreamResponseCommand(requestId,true,listener.segmentsLost,results),rpc.getDefaultRpcOptions(true))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>operation;handleInjection;[registry]</InnerMethodInvoke>
                <InnerMethodInvoke>changeListener;put;[requestId, listener]</InnerMethodInvoke>
                <InnerMethodInvoke>null;handleResponseError;[completableFuture, requestId, origin]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>NonRehashIntermediateCollector</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>origin</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>requestId</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>useManagedBlocker</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sendDataResonse</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>response</ParamName>
                    <ParamType>R</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ResponseBlocker</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>response</ParamName>
                    <ParamType>R</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>block</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isReleasable</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>