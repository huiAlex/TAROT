<Class>
    <Id>3579</Id>
    <Package>org.infinispan.server.hotrod</Package>
    <ClassName>CacheDecodeContext</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>CacheDecodeContext  /** 
 * Invokes operations against the cache based on the state kept during decoding process
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>MillisecondsIn30days</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>isTrace</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>server</FieldName>
            <FieldType>HotRodServer</FieldType>
        </Field>
        <Field>
            <FieldName>decoder</FieldName>
            <FieldType>VersionedDecoder</FieldType>
        </Field>
        <Field>
            <FieldName>header</FieldName>
            <FieldType>HotRodHeader</FieldType>
        </Field>
        <Field>
            <FieldName>cache</FieldName>
            <FieldType>AdvancedCache</FieldType>
        </Field>
        <Field>
            <FieldName>cache</FieldName>
            <FieldType>byte[]</FieldType>
        </Field>
        <Field>
            <FieldName>key</FieldName>
            <FieldType>byte[]</FieldType>
        </Field>
        <Field>
            <FieldName>params</FieldName>
            <FieldType>RequestParameters</FieldType>
        </Field>
        <Field>
            <FieldName>operationDecodeContext</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>subject</FieldName>
            <FieldType>Subject</FieldType>
        </Field>
        <Field>
            <FieldName>duration</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>unit</FieldName>
            <FieldType>TimeUnitValue</FieldType>
        </Field>
        <Field>
            <FieldName>valueLength</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>lifespan</FieldName>
            <FieldType>ExpirationParam</FieldType>
        </Field>
        <Field>
            <FieldName>maxIdle</FieldName>
            <FieldType>ExpirationParam</FieldType>
        </Field>
        <Field>
            <FieldName>streamVersion</FieldName>
            <FieldType>long</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>CacheDecodeContext</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>server</ParamName>
                    <ParamType>HotRodServer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getHeader</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>HotRodHeader</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getKey</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>byte[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getParams</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>RequestParameters</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rollbackTransaction</MethodName>
            <MethodComment>/** 
 * Handles a rollback request from a client.
 */
</MethodComment>
            <ReturnType>TransactionResponse</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;validateConfiguration;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>prepareTransaction</MethodName>
            <MethodComment>/** 
 * Handles a prepare request from a client
 */
</MethodComment>
            <ReturnType>Response</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>PrepareTransactionContext [context=(PrepareTransactionContext)operationDecodeContext]</InnerVar>
                <InnerVar>PrepareTransactionDecodeContext [txContext=new PrepareTransactionDecodeContext(cache,context.getXid())]</InnerVar>
                <InnerVar>Response [response=checkExistingTxForPrepare(txContext)]</InnerVar>
                <InnerVar>AdvancedCache&lt;byte[],byte[]&gt; [txCache=txContext.decorateCache(cache)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;validateConfiguration;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>commitTransaction</MethodName>
            <MethodComment>/** 
 * Handles a commit request from a client
 */
</MethodComment>
            <ReturnType>TransactionResponse</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;validateConfiguration;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>finishTransaction</MethodName>
            <MethodComment>/** 
 * Commits or Rollbacks the transaction (second phase of two-phase-commit)
 */
</MethodComment>
            <ReturnType>TransactionResponse</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>txContext</ParamName>
                    <ParamType>SecondPhaseTransactionDecodeContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>validateConfiguration</MethodName>
            <MethodComment>/** 
 * Checks if the configuration (and the transaction manager) is able to handle client transactions.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Configuration [configuration=cache.getCacheConfiguration()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkExistingTxForPrepare</MethodName>
            <MethodComment>/** 
 * Checks if the transaction was already prepared in another node &lt;p&gt; The client can send multiple requests to the server (in case of timeout or similar). This request is ignored when (1) the originator is still alive; (2) the transaction is prepared or committed/rolled-back &lt;p&gt; If the transaction isn't prepared and the originator left the cluster, the previous transaction is rolled-back and a new one is started.
 */
</MethodComment>
            <ReturnType>Response</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>PrepareTransactionDecodeContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>TxState [txState=context.getTxState()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createExceptionResponse</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ErrorResponse</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>e</ParamName>
                    <ParamType>Throwable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>replace</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Response</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>byte[] [prev=cache.withFlags(Flag.SKIP_LISTENER_NOTIFICATION).get(key)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>obtainCache</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheManager</ParamName>
                    <ParamType>EmbeddedCacheManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [cacheName=header.cacheName]</InnerVar>
                <InnerVar>AdvancedCache&lt;byte[],byte[]&gt; [cache=server.getKnownCache(cacheName)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>RequestParsingException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>withSubect</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>subject</ParamName>
                    <ParamType>Subject</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildMetadata</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Metadata</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildMetadata</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Metadata</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lifespan</ParamName>
                    <ParamType>ExpirationParam</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>maxIdle</ParamName>
                    <ParamType>ExpirationParam</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>EmbeddedMetadata.Builder [metadata=new EmbeddedMetadata.Builder()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>metadata;version;[generateVersion(server.getCacheRegistry(header.cacheName))]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>get</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Response</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getKeyMetadata</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Response</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>CacheEntry&lt;byte[],byte[]&gt; [ce=cache.getCacheEntry(key)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>extractVersion</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>entryVersion</ParamName>
                    <ParamType>EntryVersion</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>long [version=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>containsKey</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Response</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>replaceIfUnmodified</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Response</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>CacheEntry&lt;byte[],byte[]&gt; [entry=cache.withFlags(Flag.SKIP_LISTENER_NOTIFICATION).getCacheEntry(key)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>putIfAbsent</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Response</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>byte[] [prev=cache.get(key)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>put</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Response</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>byte[] [prev=cache.put(key,(byte[])operationDecodeContext,buildMetadata())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateVersion</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>EntryVersion</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>registry</ParamName>
                    <ParamType>ComponentRegistry</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>VersionGenerator [cacheVersionGenerator=registry.getVersionGenerator()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>remove</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Response</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>byte[] [prev=cache.remove(key)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeIfUnmodified</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Response</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>CacheEntry&lt;byte[],byte[]&gt; [entry=cache.getCacheEntry(key)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clear</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Response</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cache;clear;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>successResp</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Response</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>prev</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>notExecutedResp</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Response</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>prev</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>notExistResp</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Response</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createGetResponse</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Response</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>entry</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCacheRegistry</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ComponentRegistry</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isValid</MethodName>
            <MethodComment>/** 
 * Validates if the value read is still valid and the write operation can proceed.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>write</ParamName>
                    <ParamType>TransactionWrite</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>readCache</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CacheEntry&lt;byte[],byte[]&gt; [entry=readCache.getCacheEntry(write.key)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createTransactionResponse</MethodName>
            <MethodComment>/** 
 * Creates a transaction response with the specific xa-code.
 */
</MethodComment>
            <ReturnType>TransactionResponse</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>header</ParamName>
                    <ParamType>HotRodHeader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>xaReturnCode</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ExpirationParam</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>duration</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>unit</ParamName>
                    <ParamType>TimeUnitValue</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>RequestParameters</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>valueLength</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lifespan</ParamName>
                    <ParamType>ExpirationParam</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>maxIdle</ParamName>
                    <ParamType>ExpirationParam</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>streamVersion</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toMillis</MethodName>
            <MethodComment>/** 
 * Transforms lifespan pass as seconds into milliseconds following this rule (inspired by Memcached): &lt;p&gt; If lifespan is bigger than number of seconds in 30 days, then it is considered unix time. After converting it to milliseconds, we subtract the current time in and the result is returned. &lt;p&gt; Otherwise it's just considered number of seconds from now and it's returned in milliseconds unit.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>param</ParamName>
                    <ParamType>ExpirationParam</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>h</ParamName>
                    <ParamType>HotRodHeader</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>