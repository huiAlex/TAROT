<Class>
    <Id>2245</Id>
    <Package>org.infinispan.manager</Package>
    <ClassName>EmbeddedCacheManager</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>CacheContainer</SuperInterface>
        <SuperInterface>Listenable</SuperInterface>
        <SuperInterface>Closeable</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>EmbeddedCacheManager  /** 
 * EmbeddedCacheManager is an CacheManager that runs in the same JVM as the client. &lt;p/&gt; Constructing a &lt;tt&gt;EmbeddedCacheManager&lt;/tt&gt; is done via one of its constructors, which optionally take in a  {@link org.infinispan.configuration.cache.Configuration} or a path or URL to a configuration XML file: see {@link org.infinispan.manager.DefaultCacheManager}. &lt;p/&gt; Lifecycle - &lt;tt&gt;EmbeddedCacheManager&lt;/tt&gt;s have a lifecycle (it implements  {@link Lifecycle}) and the default constructors also call  {@link #start()}.  Overloaded versions of the constructors are available, that do not start the &lt;tt&gt;CacheManager&lt;/tt&gt;, although it must be kept in mind that &lt;tt&gt;CacheManager&lt;/tt&gt;s need to be started before they can be used to readWriteMap &lt;tt&gt;Cache&lt;/tt&gt; instances. &lt;p/&gt; Once constructed, &lt;tt&gt;EmbeddedCacheManager&lt;/tt&gt;s should be made available to any component that requires a &lt;tt&gt;Cache&lt;/tt&gt;, via &lt;a href="http://en.wikipedia.org/wiki/Java_Naming_and_Directory_Interface"&gt;JNDI&lt;/a&gt; or via some other mechanism such as an &lt;a href="http://en.wikipedia.org/wiki/Dependency_injection"&gt;dependency injection&lt;/a&gt; framework. &lt;p/&gt;
 * @see org.infinispan.manager.DefaultCacheManager
 * @author Manik Surtani (&lt;a href="mailto:manik@jboss.org"&gt;manik@jboss.org&lt;/a&gt;)
 * @author Galder Zamarreno
 * @author Mircea.Markus@jboss.com
 * @since 4.1
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>defineConfiguration</MethodName>
            <MethodComment>/** 
 * Defines a named cache's configuration by using the provided configuration &lt;p/&gt; Unlike previous versions of Infinispan, this method does not build on an existing configuration (default or named). If you want this behavior, then use  {@link ConfigurationBuilder#read(org.infinispan.configuration.cache.Configuration)}. &lt;p/&gt; The other way to define named cache's configuration is declaratively, in the XML file passed in to the cache manager. &lt;p/&gt; If this cache was already configured either declaritively or programmatically this method will throw a {@link org.infinispan.commons.CacheConfigurationException}.
 * @param cacheName             name of cache whose configuration is being defined
 * @param configuration configuration overrides to use
 * @return a cloned configuration instance
 */
</MethodComment>
            <ReturnType>Configuration</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>configuration</ParamName>
                    <ParamType>Configuration</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>defineConfiguration</MethodName>
            <MethodComment>/** 
 * Defines a named cache's configuration using by first reading the template configuration and then applying the override afterwards to generate a configuration. &lt;p/&gt; The other way to define named cache's configuration is declaratively, in the XML file passed in to the cache manager. &lt;p/&gt; If templateName is null or there isn't any named cache with that name, this methods works exactly like  {@link #defineConfiguration(String,Configuration)}. &lt;p/&gt; If this cache was already configured either declaritively or programmatically this method will throw a {@link org.infinispan.commons.CacheConfigurationException}.
 * @param cacheName             name of cache whose configuration is being defined
 * @param templateCacheName     name of cache to use as a template before overrides are applied to it
 * @param configurationOverride configuration overrides to use
 * @return a cloned configuration instance
 */
</MethodComment>
            <ReturnType>Configuration</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>templateCacheName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>configurationOverride</ParamName>
                    <ParamType>Configuration</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>undefineConfiguration</MethodName>
            <MethodComment>/** 
 * Removes a configuration from the set of defined configurations. If the configuration is currently in use by one of the caches, an  {@link IllegalStateException} is thrown. If the named configuration does not exist, nothinghappens
 * @param configurationName     the named configuration
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>configurationName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getClusterName</MethodName>
            <MethodComment>/** 
 * @return the name of the cluster.  Null if running in local mode.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMembers</MethodName>
            <MethodComment>/** 
 * @return the addresses of all the members in the cluster.
 */
</MethodComment>
            <ReturnType>Address</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAddress</MethodName>
            <MethodComment>/** 
 * @return the address of the local node
 */
</MethodComment>
            <ReturnType>Address</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCoordinator</MethodName>
            <MethodComment>/** 
 * @return the address of the cluster's coordinator
 */
</MethodComment>
            <ReturnType>Address</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isCoordinator</MethodName>
            <MethodComment>/** 
 * @return whether the local node is the cluster's coordinator
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStatus</MethodName>
            <MethodComment>/** 
 * @return the status of the cache manager
 */
</MethodComment>
            <ReturnType>ComponentStatus</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCacheManagerConfiguration</MethodName>
            <MethodComment>/** 
 * Returns global configuration for this CacheManager
 * @return the global configuration object associated to this CacheManager
 */
</MethodComment>
            <ReturnType>GlobalConfiguration</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCacheConfiguration</MethodName>
            <MethodComment>/** 
 * Returns the configuration for the given cache.
 * @return the configuration for the given cache or null if no such cache is defined
 */
</MethodComment>
            <ReturnType>Configuration</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDefaultCacheConfiguration</MethodName>
            <MethodComment>/** 
 * Returns default configuration for this CacheManager
 * @return the default configuration associated with this CacheManager
 */
</MethodComment>
            <ReturnType>org.infinispan.configuration.cache.Configuration</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCacheNames</MethodName>
            <MethodComment>/** 
 * This method returns a collection of caches names which contains the caches that have been defined via XML or programmatically, and the caches that have been created at runtime via this cache manager instance. If no named caches are registered or no caches have been created, this method returns an empty set.  The default cache is never included in this set of cache names, as well a caches for internal-only use  {@link org.infinispan.registry.InternalCacheRegistry}
 * @return an immutable set of non-default named caches registered orcreated with this cache manager.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCacheConfigurationNames</MethodName>
            <MethodComment>/** 
 * This method returns a collection of cache configuration names which contains the cache configurations that have been defined via XML or programmatically, and the cache configurations that have been defined at runtime via this cache manager instance. If no cache configurations are registered or no caches have been created, this method returns an empty set.  The default cache is never included in this set of cache names, as well a caches for internal-only use  {@link org.infinispan.registry.InternalCacheRegistry}
 * @return an immutable set of non-default named caches registered orcreated with this cache manager.
 * @since 8.2
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isRunning</MethodName>
            <MethodComment>/** 
 * Tests whether a named cache is running.
 * @param cacheName name of cache to test.
 * @return true if the named cache exists and is running; false otherwise.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isDefaultRunning</MethodName>
            <MethodComment>/** 
 * Tests whether the default cache is running.
 * @return true if the default cache is running; false otherwise.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cacheExists</MethodName>
            <MethodComment>/** 
 * A cache is considered to exist if it has been created and started via one of the  {@link #getCache()} methods and has not yet been removed via{@link #removeCache(String)}. &lt;/p&gt; In environments when caches are continuously created and removed, this method offers the possibility to find out whether a cache has either, not been started, or if it was started, whether it's been removed already or not.
 * @param cacheName
 * @return &lt;tt&gt;true&lt;/tt&gt; if the cache with the given name has not yet beenstarted, or if it was started, whether it's been removed or not.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCache</MethodName>
            <MethodComment>/** 
 * Retrieves a named cache from the system in the same way that  {@link #getCache(String)} does except that if offers the possibility for thenamed cache not to be retrieved if it has not yet been started, or if it's been removed after being started. If a non-template configuration exists with the same name, it will be used to configure the cache.
 * @param cacheName name of cache to retrieve
 * @param createIfAbsent if &lt;tt&gt;false&lt;/tt&gt;, the named cache will not beretrieved if it hasn't been retrieved previously or if it's been removed. If &lt;tt&gt;true&lt;/tt&gt;, this methods works just like  {@link #getCache(String)}
 * @return null if no named cache exists as per rules set above, otherwisereturns a cache instance identified by cacheName
 */
</MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>createIfAbsent</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCache</MethodName>
            <MethodComment>/** 
 * Retrieves a named cache from the system in the same way that  {@link #getCache(String)} does except that if offers the possibility to specifya specific configuration template. Multiple caches can be created using the same configuration.
 * @param cacheName name of cache to retrieve
 * @param configurationName name of the configuration template to use
 * @return null if no configuration exists as per rules set above, otherwisereturns a cache instance identified by cacheName
 * @deprecated as of 9.0. Use {@link EmbeddedCacheManager#defineConfiguration(String,String,Configuration)} and{@link EmbeddedCacheManager#getCache(String)} instead
 */
</MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>configurationName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCache</MethodName>
            <MethodComment>/** 
 * Retrieves a named cache from the system in the same way that  {@link #getCache(String)} does except that if offers the possibility to specifya specific configuration template. Multiple caches can be created using the same configuration. Tihs method also offers the possibility for the named cache not to be retrieved if it has not yet been started, or if it's been removed after being started.
 * @param cacheName name of cache to retrieve
 * @param configurationTemplate name of the configuration template to use
 * @param createIfAbsent if &lt;tt&gt;false&lt;/tt&gt;, the named cache will not beretrieved if it hasn't been retrieved previously or if it's been removed. If &lt;tt&gt;true&lt;/tt&gt;, this methods works just like  {@link #getCache(String,String)}
 * @return null if no configuration exists as per rules set above, otherwisereturns a cache instance identified by cacheName
 * @deprecated as of 9.0. Use {@link EmbeddedCacheManager#defineConfiguration(String,String,Configuration)} and{@link EmbeddedCacheManager#getCache(String,boolean)} instead
 */
</MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>configurationTemplate</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>createIfAbsent</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startCaches</MethodName>
            <MethodComment>/** 
 * Starts a set of caches in parallel. Infinispan supports both symmetric and asymmetric clusters; that is, multiple nodes having the same or different sets of caches running, respectively. Calling this method on application/application server startup with all your cache names will ensure that the cluster is symmetric.
 * @param cacheNames the names of the caches to start
 * @since 5.0
 */
</MethodComment>
            <ReturnType>EmbeddedCacheManager</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheNames</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeCache</MethodName>
            <MethodComment>/** 
 * Removes a cache with the given name from the system. This is a cluster wide operation that results not only in stopping the cache with the given name in all nodes in the cluster, but also deletes its contents both in memory and in any backing cache store.
 * @param cacheName name of cache to remove
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTransport</MethodName>
            <MethodComment>/** 
 * @since 5.1
 */
</MethodComment>
            <ReturnType>Transport</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getGlobalComponentRegistry</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>GlobalComponentRegistry</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addCacheDependency</MethodName>
            <MethodComment>/** 
 * Add a dependency between two caches. The cache manager will make sure that a cache is stopped before any of its dependencies
 * @param from cache name
 * @param to cache name
 * @since 7.0
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>from</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>to</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStats</MethodName>
            <MethodComment>/** 
 * Returns statistics for this cache manager since 7.1
 * @return statistics for this cache manager
 */
</MethodComment>
            <ReturnType>CacheContainerStats</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>executor</MethodName>
            <MethodComment>/** 
 * Providess the cache manager based executor.  This can be used to execute a given operation upon the cluster or a single node if desired.  If this manager is not clustered this will execute locally only. &lt;p&gt; Note that not all  {@link EmbeddedCacheManager} implementations may implement this.  Those that don't will throwa  {@link UnsupportedOperationException} upon invocation.
 * @return
 */
</MethodComment>
            <ReturnType>ClusterExecutor</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getHealth</MethodName>
            <MethodComment>/** 
 * Returns an entry point for a Health Check API.
 * @since 9.0
 * @return Health API for this {@link EmbeddedCacheManager}.
 */
</MethodComment>
            <ReturnType>Health</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>