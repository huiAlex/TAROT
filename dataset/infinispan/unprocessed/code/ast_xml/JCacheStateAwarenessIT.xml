<Class>
    <Id>4047</Id>
    <Package>org.infinispan.server.test.jcache</Package>
    <ClassName>JCacheStateAwarenessIT</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>JCacheStateAwarenessIT  /** 
 * Test for issues related to ISPN-6574 Test check whether JCache API is aware of caches defined in Infinispan server configuration Three tested functionalities are not yet implemented (not part of the original ticket), fix pending in &lt;b&gt;ISPN-7095&lt;/b&gt; Calling getCache on a cache will refresh that cache inside CacheManager, making the other functionality work ok for that particular cache (hence the separate caches for each test)
 * @author zhostasa
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>enableStatisticsTestCacheName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>enableManagementTestCacheName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>getCacheNamesTestCacheName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>getCacheTestCacheName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>testKey</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>testValue</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>cachingProvider</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>managementPort</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>server1</FieldName>
            <FieldType>RemoteInfinispanServer</FieldType>
        </Field>
        <Field>
            <FieldName>rcm1</FieldName>
            <FieldType>RemoteCacheManager</FieldType>
        </Field>
        <Field>
            <FieldName>jcacheProvider</FieldName>
            <FieldType>CachingProvider</FieldType>
        </Field>
        <Field>
            <FieldName>cacheManager</FieldName>
            <FieldType>CacheManager</FieldType>
        </Field>
        <Field>
            <FieldName>mBeanServer</FieldName>
            <FieldType>MBeanServer</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>setUp</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testEnableStatistics</MethodName>
            <MethodComment>/** 
 * Test enableStatistics command on JCache API &lt;br&gt; &lt;br&gt; Fix pending in &lt;b&gt;ISPN-7095&lt;/b&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>ObjectName [mBeanName=getMBeanName(enableStatisticsTestCacheName,"Statistics")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cacheManager;enableStatistics;[enableStatisticsTestCacheName, true]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;["Statistics register as disabled after enabling", mBeanServer.isRegistered(mBeanName)]</InnerMethodInvoke>
                <InnerMethodInvoke>cacheManager;enableStatistics;[enableStatisticsTestCacheName, false]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertFalse;["Statistics register as enabled after disabling", mBeanServer.isRegistered(mBeanName)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testEnableManagement</MethodName>
            <MethodComment>/** 
 * Test enableManagement command on JCache API&lt;br&gt; &lt;br&gt; Fix pending in &lt;b&gt;ISPN-7095&lt;/b&gt;
 * @throws MalformedObjectNameException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>ObjectName [mBeanName=getMBeanName(enableManagementTestCacheName,"Configuration")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cacheManager;enableManagement;[enableManagementTestCacheName, true]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;["Statistics register as disabled after enabling", mBeanServer.isRegistered(mBeanName)]</InnerMethodInvoke>
                <InnerMethodInvoke>cacheManager;enableManagement;[enableManagementTestCacheName, false]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertFalse;["Statistics register as enabled after disabling", mBeanServer.isRegistered(mBeanName)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>MalformedObjectNameException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMBeanName</MethodName>
            <MethodComment>/** 
 * Creates canonical name of managed bean
 * @param testCacheName name of the cache to enable management on
 * @param objectNameType Object name as per  {@link ObjectNameType}
 * @return ObjectName of the managed bean
 * @throws MalformedObjectNameException
 */
</MethodComment>
            <ReturnType>ObjectName</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>testCacheName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>objectNameType</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>MalformedObjectNameException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testGetCacheNames</MethodName>
            <MethodComment>/** 
 * Test whether cache is found in cache name list of JCache API, fix pending&lt;br&gt; &lt;br&gt; Fix pending in &lt;b&gt;ISPN-7095&lt;/b&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>boolean [passed=StreamSupport.stream(cacheManager.getCacheNames().spliterator(),true).anyMatch(n -&gt; getCacheNamesTestCacheName.equalsIgnoreCase(n))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertTrue;[getCacheNamesTestCacheName + " cache name was not found in list retrieved from CacheManager", passed]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testCacheGet</MethodName>
            <MethodComment>/** 
 * Accesses cache trough HR client to confirm its existence and insert data, then attempts to access it trough JCache API and retrieve the data
 * @param testCacheName test on specific cache name, development feature
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>testCacheName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [cacheName=testCacheName != null ? testCacheName : getCacheTestCacheName]</InnerVar>
                <InnerVar>RemoteCache&lt;Object,Object&gt; [remoteCacheFromHR=rcm1.getCache(cacheName)]</InnerVar>
                <InnerVar>Cache&lt;Object,Object&gt; [remoteCacheFromJCache=cacheManager.getCache(cacheName)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertNotNull;["The cache " + cacheName + " is not accessible trough HR (e.g. does not exist or is not there)", remoteCacheFromHR]</InnerMethodInvoke>
                <InnerMethodInvoke>remoteCacheFromHR;put;[testKey, testValue]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotNull;["The cache " + cacheName + " is not accessible trough JCache", remoteCacheFromJCache]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotNull;["Cache " + cacheName + " was retrieved, but key "+ testKey+ " could not be retrieved", remoteCacheFromJCache.get(testKey)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["The cache was retrieved but the retrieved value was not same", remoteCacheFromJCache.get(testKey), testValue]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>