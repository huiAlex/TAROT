<Class>
    <Id>466</Id>
    <Package>org.infinispan.query.dsl.embedded.impl</Package>
    <ClassName>QueryCache</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>QueryCache  /** 
 * A local cache for 'parsed' queries. Each cache manager has at most one QueryCache which is backed by a lazily created Cache.
 * @author anistor@redhat.com
 * @since 7.0
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>QUERY_CACHE_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>MAX_ENTRIES</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>ENTRY_LIFESPAN</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>cacheManager</FieldName>
            <FieldType>EmbeddedCacheManager</FieldType>
        </Field>
        <Field>
            <FieldName>internalCacheRegistry</FieldName>
            <FieldType>InternalCacheRegistry</FieldType>
        </Field>
        <Field>
            <FieldName>lazyCache</FieldName>
            <FieldType>Cache</FieldType>
        </Field>
        <Field>
            <FieldName>lazyCache</FieldName>
            <FieldType>QueryCacheKey</FieldType>
        </Field>
        <Field>
            <FieldName>queryString</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>accumulators</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>accumulators</FieldName>
            <FieldType>FieldAccumulator</FieldType>
        </Field>
        <Field>
            <FieldName>queryTypeDiscriminator</FieldName>
            <FieldType>Object</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>create</MethodName>
            <MethodComment>/** 
 * Create a new query object based on the input args, or just return  {@code null}. If  {@code null} is returnedthis will be propagated to the caller of  {@link QueryCache#get} and the {@code null} will not be cached.
 */
</MethodComment>
            <ReturnType>Q</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>queryString</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>accumulators</ParamName>
                    <ParamType>FieldAccumulator</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>init</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheManager</ParamName>
                    <ParamType>EmbeddedCacheManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>internalCacheRegistry</ParamName>
                    <ParamType>InternalCacheRegistry</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>get</MethodName>
            <MethodComment>/** 
 * Gets the cached query object. The key used for lookup is an object pair containing the query string and a discriminator value which is usually the Class of the cached query object and an optional  {@link List} of {@link FieldAccumulator}s.
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>queryString</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>accumulators</ParamName>
                    <ParamType>FieldAccumulator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>queryTypeDiscriminator</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>queryCreator</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>QueryCacheKey [key=new QueryCacheKey(queryString,accumulators,queryTypeDiscriminator)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clear</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>getCache();clear;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCache</MethodName>
            <MethodComment>/** 
 * Obtain the cache. Start it lazily when needed.
 */
</MethodComment>
            <ReturnType>QueryCacheKey</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Cache&lt;QueryCacheKey,Object&gt; [cache=lazyCache]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getQueryCacheConfig</MethodName>
            <MethodComment>/** 
 * Create the configuration of the internal query cache.
 */
</MethodComment>
            <ReturnType>ConfigurationBuilder</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>ConfigurationBuilder [cfgBuilder=new ConfigurationBuilder()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cfgBuilder.clustering().cacheMode(CacheMode.LOCAL).transaction().transactionMode(TransactionMode.NON_TRANSACTIONAL).expiration().maxIdle(ENTRY_LIFESPAN,TimeUnit.SECONDS).memory().evictionType(EvictionType.COUNT);size;[MAX_ENTRIES]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>QueryCacheKey</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>queryString</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>accumulators</ParamName>
                    <ParamType>FieldAccumulator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>queryTypeDiscriminator</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>equals</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>obj</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>QueryCacheKey [other=(QueryCacheKey)obj]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hashCode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [result=queryString.hashCode()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>