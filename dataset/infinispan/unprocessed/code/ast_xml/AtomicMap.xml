<Class>
    <Id>1421</Id>
    <Package>org.infinispan.atomic</Package>
    <ClassName>AtomicMap</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Map</SuperInterface>
        <SuperInterface>K</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>AtomicMap  /** 
 * This is a special type of Map geared for use in Infinispan.  AtomicMaps have two major characteristics: &lt;ol&gt; &lt;li&gt;Atomic locking and isolation over the entire collection&lt;/li&gt; &lt;li&gt;Replication of updates through deltas&lt;/li&gt; &lt;/ol&gt; &lt;b&gt;&lt;u&gt;1.  Atomic locking and isolation over the entire collection&lt;/u&gt;&lt;/b&gt; &lt;p&gt; This allows the entire AtomicMap to be locked when making changes even to certain entries within the map, and also isolates the map for safe reading (see  {@link IsolationLevel} while concurrent writes may be going on.&lt;/p&gt; &lt;br /&gt; &lt;b&gt;&lt;u&gt;2.  Replication of updates through deltas&lt;/u&gt;&lt;/b&gt; &lt;p&gt; As a performance optimization, when the map is updated the maps do not replicate all entries to other nodes but only the modifications. &lt;/p&gt; &lt;br /&gt; &lt;b&gt;&lt;u&gt;Usage&lt;/u&gt;&lt;/b&gt; &lt;p&gt; AtomicMaps should be constructed and "registered" with Infinispan using the  {@link AtomicMapLookup} helper.  Thishelper ensures threadsafe construction and registration of AtomicMap instances in Infinispan's data container.  E.g.: &lt;br /&gt; &lt;code&gt; AtomicMap&amp;lt;String, Integer&amp;gt; map = AtomicMapLookup.getAtomicMap(cache, "my_atomic_map_key"); &lt;/code&gt; &lt;/p&gt; &lt;p&gt;&lt;b&gt;&lt;u&gt;Referential Integrity&lt;/u&gt;&lt;/b&gt;&lt;br /&gt; It is important to note that concurrent readers of an AtomicMap will essentially have the same view of the contents of the underlying structure, but since AtomicMaps use internal proxies, readers are isolated from concurrent writes and  {@link IsolationLevel#READ_COMMITTED} and {@link IsolationLevel#REPEATABLE_READ} semantics are guaranteed.However, this guarantee is only present if the values stored in an AtomicMap are &lt;i&gt;immutable&lt;/i&gt; (e.g., Strings, primitives, and other immutable types).&lt;/p&gt; &lt;p&gt;Mutable value objects which happen to be stored in an AtomicMap may be updated and, prior to being committed, or even replaced in the map, be visible to concurrent readers.  Hence, AtomicMaps are &lt;b&gt;&lt;i&gt;not suitable&lt;/i&gt;&lt;/b&gt; for use with mutable value objects.&lt;/p&gt; &lt;/p&gt; &lt;br /&gt; &lt;p&gt; This interface, for all practical purposes, is just a marker interface that indicates that maps of this type will be locked atomically in the cache and replicated in a fine grained manner, as it does not add any additional methods to  {@link java.util.Map}. &lt;/p&gt;
 * @author Manik Surtani
 * @see AtomicMapLookup
 * @see FineGrainedAtomicMap
 * @since 4.0
 */
</ClassComment>
    <FieldList/>
    <MethodList/>
</Class>