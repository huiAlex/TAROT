<Class>
    <Id>132</Id>
    <Package>org.infinispan.server.test.query</Package>
    <ClassName>RemoteListenerWithDslFilterIT</ClassName>
    <SuperClass>RemoteQueryBaseIT</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>RemoteListenerWithDslFilterIT  /** 
 * Basic test for query DSL based remote event filters.
 * @author anistor@redhat.com
 * @since 8.1
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>server</FieldName>
            <FieldType>RemoteInfinispanServer</FieldType>
        </Field>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>createEvents</FieldName>
            <FieldType>BlockingQueue</FieldType>
        </Field>
        <Field>
            <FieldName>createEvents</FieldName>
            <FieldType>FilterResult</FieldType>
        </Field>
        <Field>
            <FieldName>modifyEvents</FieldName>
            <FieldType>BlockingQueue</FieldType>
        </Field>
        <Field>
            <FieldName>modifyEvents</FieldName>
            <FieldType>FilterResult</FieldType>
        </Field>
        <Field>
            <FieldName>serializationContext</FieldName>
            <FieldType>SerializationContext</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>RemoteListenerWithDslFilterIT</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getServer</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>RemoteInfinispanServer</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testEventFilter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>User [user1=new User()]</InnerVar>
                <InnerVar>Address [address1=new Address()]</InnerVar>
                <InnerVar>User [user2=new User()]</InnerVar>
                <InnerVar>Address [address2=new Address()]</InnerVar>
                <InnerVar>Address [address3=new Address()]</InnerVar>
                <InnerVar>User [user3=new User()]</InnerVar>
                <InnerVar>SerializationContext [serCtx=ProtoStreamMarshaller.getSerializationContext(remoteCache.getRemoteCacheManager())]</InnerVar>
                <InnerVar>QueryFactory [qf=Search.getQueryFactory(remoteCache)]</InnerVar>
                <InnerVar>Query [query=qf.from(User.class).having("age").lte(param("ageParam")).select("age").build().setParameter("ageParam",32)]</InnerVar>
                <InnerVar>ClientEntryListener [listener=new ClientEntryListener(serCtx)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>user1;setId;[1]</InnerMethodInvoke>
                <InnerMethodInvoke>user1;setName;["John"]</InnerMethodInvoke>
                <InnerMethodInvoke>user1;setSurname;["Doe"]</InnerMethodInvoke>
                <InnerMethodInvoke>user1;setGender;[User.Gender.MALE]</InnerMethodInvoke>
                <InnerMethodInvoke>user1;setAge;[22]</InnerMethodInvoke>
                <InnerMethodInvoke>user1;setAccountIds;[new HashSet&lt;&gt;(Arrays.asList(1,2))]</InnerMethodInvoke>
                <InnerMethodInvoke>user1;setNotes;["Lorem ipsum dolor sit amet"]</InnerMethodInvoke>
                <InnerMethodInvoke>address1;setStreet;["Main Street"]</InnerMethodInvoke>
                <InnerMethodInvoke>address1;setPostCode;["X1234"]</InnerMethodInvoke>
                <InnerMethodInvoke>user1;setAddresses;[Collections.singletonList(address1)]</InnerMethodInvoke>
                <InnerMethodInvoke>user2;setId;[2]</InnerMethodInvoke>
                <InnerMethodInvoke>user2;setName;["Spider"]</InnerMethodInvoke>
                <InnerMethodInvoke>user2;setSurname;["Man"]</InnerMethodInvoke>
                <InnerMethodInvoke>user2;setGender;[User.Gender.MALE]</InnerMethodInvoke>
                <InnerMethodInvoke>user2;setAge;[32]</InnerMethodInvoke>
                <InnerMethodInvoke>user2;setAccountIds;[Collections.singleton(3)]</InnerMethodInvoke>
                <InnerMethodInvoke>address2;setStreet;["Old Street"]</InnerMethodInvoke>
                <InnerMethodInvoke>address2;setPostCode;["Y12"]</InnerMethodInvoke>
                <InnerMethodInvoke>address3;setStreet;["Bond Street"]</InnerMethodInvoke>
                <InnerMethodInvoke>address3;setPostCode;["ZZ"]</InnerMethodInvoke>
                <InnerMethodInvoke>user2;setAddresses;[Arrays.asList(address2,address3)]</InnerMethodInvoke>
                <InnerMethodInvoke>user3;setId;[3]</InnerMethodInvoke>
                <InnerMethodInvoke>user3;setName;["Spider"]</InnerMethodInvoke>
                <InnerMethodInvoke>user3;setSurname;["Woman"]</InnerMethodInvoke>
                <InnerMethodInvoke>user3;setGender;[User.Gender.FEMALE]</InnerMethodInvoke>
                <InnerMethodInvoke>user3;setAge;[31]</InnerMethodInvoke>
                <InnerMethodInvoke>user3;setAccountIds;[Collections.emptySet()]</InnerMethodInvoke>
                <InnerMethodInvoke>remoteCache;put;[user1.getId(), user1]</InnerMethodInvoke>
                <InnerMethodInvoke>remoteCache;put;[user2.getId(), user2]</InnerMethodInvoke>
                <InnerMethodInvoke>remoteCache;put;[user3.getId(), user3]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[3, remoteCache.size()]</InnerMethodInvoke>
                <InnerMethodInvoke>ClientEvents;addClientQueryListener;[remoteCache, listener, query]</InnerMethodInvoke>
                <InnerMethodInvoke>null;expectElementsInQueue;[listener.createEvents, 3]</InnerMethodInvoke>
                <InnerMethodInvoke>user3;setAge;[40]</InnerMethodInvoke>
                <InnerMethodInvoke>remoteCache;put;[user1.getId(), user1]</InnerMethodInvoke>
                <InnerMethodInvoke>remoteCache;put;[user2.getId(), user2]</InnerMethodInvoke>
                <InnerMethodInvoke>remoteCache;put;[user3.getId(), user3]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[3, remoteCache.size()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;expectElementsInQueue;[listener.modifyEvents, 2]</InnerMethodInvoke>
                <InnerMethodInvoke>remoteCache;removeClientListener;[listener]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>expectElementsInQueue</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>queue</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>numElements</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ClientEntryListener</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>serializationContext</ParamName>
                    <ParamType>SerializationContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>handleClientCacheEntryCreatedEvent</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>event</ParamName>
                    <ParamType>ClientCacheEntryCustomEvent</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>FilterResult [r=ProtobufUtil.fromWrappedByteArray(serializationContext,(byte[])event.getEventData())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>createEvents;add;[r]</InnerMethodInvoke>
                <InnerMethodInvoke>log;debugf;["handleClientCacheEntryCreatedEvent instance=%s projection=%s sortProjection=%s\n", r.getInstance(), r.getProjection() == null ? null : Arrays.asList(r.getProjection()), r.getSortProjection() == null ? null : Arrays.asList(r.getSortProjection())]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>handleClientCacheEntryModifiedEvent</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>event</ParamName>
                    <ParamType>ClientCacheEntryCustomEvent</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>FilterResult [r=ProtobufUtil.fromWrappedByteArray(serializationContext,(byte[])event.getEventData())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>modifyEvents;add;[r]</InnerMethodInvoke>
                <InnerMethodInvoke>log;debugf;["handleClientCacheEntryModifiedEvent instance=%s projection=%s sortProjection=%s\n", r.getInstance(), r.getProjection() == null ? null : Arrays.asList(r.getProjection()), r.getSortProjection() == null ? null : Arrays.asList(r.getSortProjection())]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>handleClientCacheEntryRemovedEvent</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>event</ParamName>
                    <ParamType>ClientCacheEntryRemovedEvent</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>log;debugf;["handleClientCacheEntryRemovedEvent %s\n", event.getKey()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>