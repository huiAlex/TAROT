<Class>
    <Id>1148</Id>
    <Package>org.infinispan.util.logging.events</Package>
    <ClassName>EventLogger</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>EventLogger  /** 
 * EventLogger provides an interface for logging event messages.
 * @author Tristan Tarrant
 * @since 8.2
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>log</MethodName>
            <MethodComment>/** 
 * Logs a message to the event log with the specified level
 * @param level the severity level of the event
 * @param message the message to log
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>level</ParamName>
                    <ParamType>EventLogLevel</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>category</ParamName>
                    <ParamType>EventLogCategory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>message</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>info</MethodName>
            <MethodComment>/** 
 * Logs a message to the event log using the  {@link EventLogLevel#INFO} severity
 * @param message the message to log
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>category</ParamName>
                    <ParamType>EventLogCategory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>message</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;log;[EventLogLevel.INFO, category, message]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>warn</MethodName>
            <MethodComment>/** 
 * Logs a message to the event log using the  {@link EventLogLevel#WARN} severity
 * @param message the message to log
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>category</ParamName>
                    <ParamType>EventLogCategory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>message</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;log;[EventLogLevel.WARN, category, message]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>error</MethodName>
            <MethodComment>/** 
 * Logs a message to the event log using the  {@link EventLogLevel#ERROR} severity
 * @param message the message to log
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>category</ParamName>
                    <ParamType>EventLogCategory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>message</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;log;[EventLogLevel.ERROR, category, message]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fatal</MethodName>
            <MethodComment>/** 
 * Logs a message to the event log using the  {@link EventLogLevel#FATAL} severity
 * @param message the message to log
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>category</ParamName>
                    <ParamType>EventLogCategory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>message</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;log;[EventLogLevel.FATAL, category, message]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>scope</MethodName>
            <MethodComment>/** 
 * Sets the scope of this event log, e.g. a node address. This should be used for events which reference a single node in the cluster
 * @param scope a scope
 * @return the event logger
 */
</MethodComment>
            <ReturnType>EventLogger</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>scope</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>scope</MethodName>
            <MethodComment>/** 
 * Sets a node address as the scope of this event log
 * @param scope the address of the node
 * @return the event logger
 */
</MethodComment>
            <ReturnType>EventLogger</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>scope</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>context</MethodName>
            <MethodComment>/** 
 * Sets a cache as context of this event log. The name of the cache will be used to indicate the context.
 * @param cache the cache to set as context
 * @return the event logger
 */
</MethodComment>
            <ReturnType>EventLogger</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cache</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>context</MethodName>
            <MethodComment>/** 
 * Sets a context of this event log.
 * @param context the name of the context
 * @return the event logger
 */
</MethodComment>
            <ReturnType>EventLogger</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>detail</MethodName>
            <MethodComment>/** 
 * Sets a detail for this event log which could include additional information.
 * @param detail the event log detail
 * @return the event logger
 */
</MethodComment>
            <ReturnType>EventLogger</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>detail</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>detail</MethodName>
            <MethodComment>/** 
 * Sets a throwable to include as detail for this event. Both the localized message of the Throwable as well as its stack trace will be recorded as the event's detail
 * @param detail a throwable
 * @return the event logger
 */
</MethodComment>
            <ReturnType>EventLogger</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Throwable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringWriter [sw=new StringWriter()]</InnerVar>
                <InnerVar>PrintWriter [pw=new PrintWriter(sw)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>pw;println;[t.getLocalizedMessage()]</InnerMethodInvoke>
                <InnerMethodInvoke>t;printStackTrace;[pw]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>who</MethodName>
            <MethodComment>/** 
 * Sets a security subject for this event log. The name of the main user principal of the subject will be recorded in the log.
 * @param subject the security subject
 * @return the event logger
 */
</MethodComment>
            <ReturnType>EventLogger</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>subject</ParamName>
                    <ParamType>Subject</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>who</MethodName>
            <MethodComment>/** 
 * Sets a security principal for this event log. The name of the principal will be recorded in the log.
 * @param principal the security principal
 * @return the event logger
 */
</MethodComment>
            <ReturnType>EventLogger</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>principal</ParamName>
                    <ParamType>Principal</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>who</MethodName>
            <MethodComment>/** 
 * Sets a security name for this event log.
 * @param s the security name
 * @return the event logger
 */
</MethodComment>
            <ReturnType>EventLogger</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEvents</MethodName>
            <MethodComment>/** 
 * Retrieves the event logs from the cluster within the specified range
 * @param start the instant from which to retrieve the logs
 * @param count the number of logs to retrieve
 * @param category an optional category filter
 * @param level an optional level filter
 * @return a list of {@link EventLog}s
 */
</MethodComment>
            <ReturnType>EventLog</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>start</ParamName>
                    <ParamType>Instant</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>count</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>category</ParamName>
                    <ParamType>EventLogCategory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>level</ParamName>
                    <ParamType>EventLogLevel</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>