<Class>
    <Id>3640</Id>
    <Package>org.infinispan.util.concurrent</Package>
    <ClassName>BoundedExecutors</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>BoundedExecutors  /** 
 * Similar to JDK  {@link java.util.concurrent.Executors} except that the factory methods here allow you to specify thesize of the blocking queue that backs the executor.
 * @author Manik Surtani (&lt;a href="mailto:manik AT jboss DOT org"&gt;manik AT jboss DOT org&lt;/a&gt;)
 * @since 4.0
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>newFixedThreadPool</MethodName>
            <MethodComment>/** 
 * Creates a thread pool that reuses a fixed set of threads operating off a shared bounded queue. If any thread terminates due to a failure during execution prior to shutdown, a new one will take its place if needed to execute subsequent tasks.
 * @param nThreads         the number of threads in the pool
 * @param boundedQueueSize size of the bounded queue
 * @return the newly created thread pool
 */
</MethodComment>
            <ReturnType>ExecutorService</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>nThreads</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>boundedQueueSize</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newFixedThreadPool</MethodName>
            <MethodComment>/** 
 * Creates a thread pool that reuses a fixed set of threads operating off a shared bounded queue, using the provided ThreadFactory to create new threads when needed.
 * @param nThreads         the number of threads in the pool
 * @param threadFactory    the factory to use when creating new threads
 * @param boundedQueueSize size of the bounded queue
 * @return the newly created thread pool
 */
</MethodComment>
            <ReturnType>ExecutorService</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>nThreads</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>threadFactory</ParamName>
                    <ParamType>ThreadFactory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>boundedQueueSize</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>