<Class>
    <Id>2950</Id>
    <Package>org.infinispan.objectfilter.impl.predicateindex.be</Package>
    <ClassName>BETreeMaker</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>BETreeMaker  /** 
 * Creates a BETree out of a BooleanExpr.
 * @author anistor@redhat.com
 * @since 7.0
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>metadataAdapter</FieldName>
            <FieldType>MetadataAdapter</FieldType>
        </Field>
        <Field>
            <FieldName>metadataAdapter</FieldName>
            <FieldType>?</FieldType>
        </Field>
        <Field>
            <FieldName>useIntervals</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>BETreeMaker</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>metadataAdapter</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>useIntervals</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>make</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BETree</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>booleanExpr</ParamName>
                    <ParamType>BooleanExpr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>namedParameters</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;BENode&gt; [nodes=new ArrayList&lt;&gt;()]</InnerVar>
                <InnerVar>List&lt;Integer&gt; [treeCounters=new ArrayList&lt;&gt;()]</InnerVar>
                <InnerVar>int[] [countersArray=new int[treeCounters.size()]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>preorderTraversal</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parent</ParamName>
                    <ParamType>BENode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>child</ParamName>
                    <ParamType>BooleanExpr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nodes</ParamName>
                    <ParamType>BENode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>treeCounters</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>namedParameters</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makePredicateNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parent</ParamName>
                    <ParamType>BENode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nodes</ParamName>
                    <ParamType>BENode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>treeCounters</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>condition</ParamName>
                    <ParamType>PrimaryPredicateExpr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isNegated</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>namedParameters</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PropertyValueExpr [pve=(PropertyValueExpr)condition.getChild()]</InnerVar>
                <InnerVar>List&lt;AttributeId&gt; [path=metadataAdapter.mapPropertyNamePathToFieldIdPath(pve.getPropertyPath().asArrayPath())]</InnerVar>
                <InnerVar>boolean [isRepeated=pve.isRepeated()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addPredicateNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parent</ParamName>
                    <ParamType>BENode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nodes</ParamName>
                    <ParamType>BENode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>treeCounters</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isNegated</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>path</ParamName>
                    <ParamType>AttributeId</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>predicate</ParamName>
                    <ParamType>Predicate</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PredicateNode [predicateNode=new PredicateNode&lt;&gt;(parent,predicate,isNegated,path)]</InnerVar>
                <InnerVar>int [size=nodes.size()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>predicateNode;setLocation;[size, size + 1]</InnerMethodInvoke>
                <InnerMethodInvoke>nodes;add;[predicateNode]</InnerMethodInvoke>
                <InnerMethodInvoke>treeCounters;add;[1]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeBooleanOperatorNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>child</ParamName>
                    <ParamType>BooleanOperatorExpr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nodes</ParamName>
                    <ParamType>BENode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>treeCounters</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>BENode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>namedParameters</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [index=nodes.size()]</InnerVar>
                <InnerVar>List&lt;BooleanExpr&gt; [children=child.getChildren()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>nodes;add;[node]</InnerMethodInvoke>
                <InnerMethodInvoke>treeCounters;add;[children.size()]</InnerMethodInvoke>
                <InnerMethodInvoke>node;setLocation;[index, nodes.size()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>