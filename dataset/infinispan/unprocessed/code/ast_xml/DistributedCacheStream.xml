<Class>
    <Id>1207</Id>
    <Package>org.infinispan.stream.impl</Package>
    <ClassName>DistributedCacheStream</ClassName>
    <SuperClass>AbstractCacheStream</SuperClass>
    <SuperInterfaceList>
        <SuperInterface>CacheStream</SuperInterface>
        <SuperInterface>R</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>DistributedCacheStream  /** 
 * Implementation of  {@link CacheStream} that provides support for lazily distributing stream methods to appropriatenodes
 * @param &lt; R &gt; The type of the stream
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>realCollector</FieldName>
            <FieldType>Collector</FieldType>
        </Field>
        <Field>
            <FieldName>realCollector</FieldName>
            <FieldType>T</FieldType>
        </Field>
        <Field>
            <FieldName>queue</FieldName>
            <FieldType>BlockingQueue</FieldType>
        </Field>
        <Field>
            <FieldName>queue</FieldName>
            <FieldType>R</FieldType>
        </Field>
        <Field>
            <FieldName>completed</FieldName>
            <FieldType>AtomicBoolean</FieldType>
        </Field>
        <Field>
            <FieldName>nextLock</FieldName>
            <FieldType>Lock</FieldType>
        </Field>
        <Field>
            <FieldName>nextCondition</FieldName>
            <FieldType>Condition</FieldType>
        </Field>
        <Field>
            <FieldName>listener</FieldName>
            <FieldType>SegmentCompletionListener</FieldType>
        </Field>
        <Field>
            <FieldName>segmentsByObject</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>segmentsByObject</FieldName>
            <FieldType>T</FieldType>
        </Field>
        <Field>
            <FieldName>queue</FieldName>
            <FieldType>BlockingQueue</FieldType>
        </Field>
        <Field>
            <FieldName>queue</FieldName>
            <FieldType>R</FieldType>
        </Field>
        <Field>
            <FieldName>completed</FieldName>
            <FieldType>AtomicBoolean</FieldType>
        </Field>
        <Field>
            <FieldName>nextLock</FieldName>
            <FieldType>Lock</FieldType>
        </Field>
        <Field>
            <FieldName>nextCondition</FieldName>
            <FieldType>Condition</FieldType>
        </Field>
        <Field>
            <FieldName>clusterStreamManager</FieldName>
            <FieldType>ClusterStreamManager</FieldType>
        </Field>
        <Field>
            <FieldName>clusterStreamManager</FieldName>
            <FieldType>?</FieldType>
        </Field>
        <Field>
            <FieldName>exception</FieldName>
            <FieldType>CacheException</FieldType>
        </Field>
        <Field>
            <FieldName>pending</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>consumer</FieldName>
            <FieldType>Consumer</FieldType>
        </Field>
        <Field>
            <FieldName>consumer</FieldName>
            <FieldType>R</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>supplierStreamCast</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>CacheStream&lt;CacheEntry&gt;</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>supplier</ParamName>
                    <ParamType>Supplier</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>DistributedCacheStream</MethodName>
            <MethodComment>/** 
 * Standard constructor requiring all pertinent information to properly utilize a distributed cache stream
 * @param localAddress the local address for this node
 * @param parallel whether or not this stream is parallel
 * @param dm the distribution manager to find out what keys map where
 * @param supplier a supplier of local cache stream instances.
 * @param csm manager that handles sending out messages to other nodes
 * @param includeLoader whether or not a cache loader should be utilized for these operations
 * @param distributedBatchSize default size of distributed batches
 * @param executor executor to be used for certain operations that require async processing (ie. iterator)
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>localAddress</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parallel</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dm</ParamName>
                    <ParamType>DistributionManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>supplier</ParamName>
                    <ParamType>CacheStream&lt;CacheEntry&lt;K,V&gt;&gt;</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>csm</ParamName>
                    <ParamType>ClusterStreamManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>includeLoader</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>distributedBatchSize</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>executor</ParamName>
                    <ParamType>Executor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>registry</ParamName>
                    <ParamType>ComponentRegistry</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>DistributedCacheStream</MethodName>
            <MethodComment>/** 
 * Constructor that also allows a simple map method to be inserted first to change to another type.  This is important because the  {@link CacheStream#map(Function)} currently doesn't return a {@link CacheStream}.  If this is changed we can remove this constructor and update references accordingly.
 * @param localAddress the local address for this node
 * @param parallel whether or not this stream is parallel
 * @param dm the distribution manager to find out what keys map where
 * @param supplier a supplier of local cache stream instances.
 * @param csm manager that handles sending out messages to other nodes
 * @param includeLoader whether or not a cache loader should be utilized for these operations
 * @param distributedBatchSize default size of distributed batches
 * @param executor executor to be used for certain operations that require async processing (ie. iterator)
 * @param function initial function to apply to the stream to change the type
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>localAddress</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parallel</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dm</ParamName>
                    <ParamType>DistributionManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>supplier</ParamName>
                    <ParamType>CacheStream&lt;CacheEntry&lt;K,V&gt;&gt;</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>csm</ParamName>
                    <ParamType>ClusterStreamManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>includeLoader</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>distributedBatchSize</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>executor</ParamName>
                    <ParamType>Executor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>registry</ParamName>
                    <ParamType>ComponentRegistry</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>function</ParamName>
                    <ParamType>? super CacheEntry&lt;K,V&gt;</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>intermediateOperations;add;[new MapOperation(function)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>DistributedCacheStream</MethodName>
            <MethodComment>/** 
 * This constructor is to be used only when a user calls a map or flat map method changing back to a regular Stream from an IntStream, DoubleStream etc.
 * @param other other instance of {@link AbstractCacheStream} to copy details from
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>other</ParamName>
                    <ParamType>AbstractCacheStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>unwrap</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>R</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>filter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>R</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>predicate</ParamName>
                    <ParamType>? super R</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>map</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>R1</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mapper</ParamName>
                    <ParamType>? super R</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;addIntermediateOperationMap;[new MapOperation&lt;&gt;(mapper)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>mapToInt</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>IntCacheStream</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mapper</ParamName>
                    <ParamType>? super R</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;addIntermediateOperationMap;[new MapToIntOperation&lt;&gt;(mapper)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>mapToLong</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>LongCacheStream</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mapper</ParamName>
                    <ParamType>? super R</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;addIntermediateOperationMap;[new MapToLongOperation&lt;&gt;(mapper)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>mapToDouble</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DoubleCacheStream</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mapper</ParamName>
                    <ParamType>? super R</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;addIntermediateOperationMap;[new MapToDoubleOperation&lt;&gt;(mapper)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>flatMap</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>R1</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mapper</ParamName>
                    <ParamType>? super R</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;addIntermediateOperationMap;[new FlatMapOperation&lt;R,R1&gt;(mapper)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>flatMapToInt</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>IntCacheStream</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mapper</ParamName>
                    <ParamType>? super R</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;addIntermediateOperationMap;[new FlatMapToIntOperation&lt;&gt;(mapper)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>flatMapToLong</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>LongCacheStream</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mapper</ParamName>
                    <ParamType>? super R</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;addIntermediateOperationMap;[new FlatMapToLongOperation&lt;&gt;(mapper)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>flatMapToDouble</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DoubleCacheStream</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mapper</ParamName>
                    <ParamType>? super R</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;addIntermediateOperationMap;[new FlatMapToDoubleOperation&lt;&gt;(mapper)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>distinct</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>R</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;addIntermediateOperation;[DistinctOperation.getInstance()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sorted</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>R</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sorted</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>R</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>comparator</ParamName>
                    <ParamType>? super R</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>peek</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>R</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>action</ParamName>
                    <ParamType>? super R</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>limit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>R</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>maxSize</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;addIntermediateOperation;[new LimitOperation&lt;&gt;(maxSize)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>skip</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>R</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>n</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reduce</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>R</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>identity</ParamName>
                    <ParamType>R</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>accumulator</ParamName>
                    <ParamType>R</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reduce</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>R</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>accumulator</ParamName>
                    <ParamType>R</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>R [value=performOperation(TerminalFunctions.reduceFunction(accumulator),true,(e1,e2) -&gt; {
  if (e1 != null) {
    if (e2 != null) {
      return accumulator.apply(e1,e2);
    }
    return e1;
  }
  return e2;
}
,null)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reduce</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>U</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>identity</ParamName>
                    <ParamType>U</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>accumulator</ParamName>
                    <ParamType>U</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>combiner</ParamName>
                    <ParamType>U</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>collect</MethodName>
            <MethodComment>/** 
 * {@inheritDoc}Note: this method doesn't pay attention to ordering constraints and any sorting performed on the stream will be ignored by this terminal operator.  If you wish to have an ordered collector use the {@link DistributedCacheStream#collect(Collector)} method making sure the{@link java.util.stream.Collector.Characteristics#UNORDERED} property is not set.
 * @param supplier
 * @param accumulator
 * @param combiner
 * @param &lt; R1 &gt;
 * @return
 */
</MethodComment>
            <ReturnType>R1</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>supplier</ParamName>
                    <ParamType>R1</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>accumulator</ParamName>
                    <ParamType>R1</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>combiner</ParamName>
                    <ParamType>R1</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>IdentifyFinishCollector</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>realCollector</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>supplier</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>A</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>accumulator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>A</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>combiner</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>A</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>finisher</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>A</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>characteristics</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Characteristics</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Set&lt;Characteristics&gt; [characteristics=realCollector.characteristics()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeObject</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>output</ParamName>
                    <ParamType>ObjectOutput</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>object</ParamName>
                    <ParamType>IdentifyFinishCollector</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>output;writeObject;[object.realCollector]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readObject</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>IdentifyFinishCollector</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>ObjectInput</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>ClassNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>collect</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>R1</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>collector</ParamName>
                    <ParamType>? super R</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>min</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>R</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>comparator</ParamName>
                    <ParamType>? super R</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>R [value=performOperation(TerminalFunctions.minFunction(comparator),false,(e1,e2) -&gt; {
  if (e1 != null) {
    if (e2 != null) {
      return comparator.compare(e1,e2) &gt; 0 ? e2 : e1;
    }
 else {
      return e1;
    }
  }
  return e2;
}
,null)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>max</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>R</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>comparator</ParamName>
                    <ParamType>? super R</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>R [value=performOperation(TerminalFunctions.maxFunction(comparator),false,(e1,e2) -&gt; {
  if (e1 != null) {
    if (e2 != null) {
      return comparator.compare(e1,e2) &gt; 0 ? e1 : e2;
    }
 else {
      return e1;
    }
  }
  return e2;
}
,null)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>anyMatch</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>predicate</ParamName>
                    <ParamType>? super R</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>allMatch</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>predicate</ParamName>
                    <ParamType>? super R</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>noneMatch</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>predicate</ParamName>
                    <ParamType>? super R</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findFirst</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>R</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findAny</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>R</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>R [value=performOperation(TerminalFunctions.findAnyFunction(),false,(r1,r2) -&gt; r1 == null ? r2 : r1,Objects::nonNull)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>count</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>iterator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>R</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>remoteIterator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>R</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>BlockingQueue&lt;R&gt; [queue=new ArrayBlockingQueue&lt;&gt;(distributedBatchSize)]</InnerVar>
                <InnerVar>AtomicBoolean [complete=new AtomicBoolean()]</InnerVar>
                <InnerVar>Lock [nextLock=new ReentrantLock()]</InnerVar>
                <InnerVar>Condition [nextCondition=nextLock.newCondition()]</InnerVar>
                <InnerVar>Consumer&lt;R&gt; [consumer=new HandOffConsumer&lt;&gt;(queue,complete,nextLock,nextCondition)]</InnerVar>
                <InnerVar>IteratorSupplier&lt;R&gt; [supplier=new IteratorSupplier&lt;&gt;(queue,complete,nextLock,nextCondition,csm)]</InnerVar>
                <InnerVar>boolean [iteratorParallelDistribute=parallelDistribution == null ? false : parallelDistribution]</InnerVar>
                <InnerVar>CloseableIterator&lt;R&gt; [closeableIterator=new CloseableSuppliedIterator&lt;&gt;(supplier)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;onClose;[supplier::close]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ignoreRehashIteration</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>consumer</ParamName>
                    <ParamType>R</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>supplier</ParamName>
                    <ParamType>R</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>iteratorParallelDistribute</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CollectionConsumer&lt;R&gt; [remoteResults=new CollectionConsumer&lt;&gt;(consumer)]</InnerVar>
                <InnerVar>ConsistentHash [ch=dm.getWriteConsistentHash()]</InnerVar>
                <InnerVar>boolean [runLocal=ch.getMembers().contains(localAddress)]</InnerVar>
                <InnerVar>boolean [stayLocal=runLocal &amp;&amp; segmentsToFilter != null &amp;&amp; ch.getSegmentsForOwner(localAddress).containsAll(segmentsToFilter)]</InnerVar>
                <InnerVar>NoMapIteratorOperation&lt;?,R&gt; [op=new NoMapIteratorOperation&lt;&gt;(intermediateOperations,supplierForSegments(ch,segmentsToFilter,null,!stayLocal),distributedBatchSize)]</InnerVar>
                <InnerVar>Thread [thread=Thread.currentThread()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>executor;execute;[() -&gt; {
  try {
    log.tracef("Thread %s submitted iterator request for stream",thread);
    if (!stayLocal) {
      Object id=csm.remoteStreamOperation(iteratorParallelDistribute,parallel,ch,segmentsToFilter,keysToFilter,Collections.&lt;Object,Set&lt;R&gt;&gt;emptyMap(),includeLoader,op,remoteResults);
      Collection&lt;R&gt; localValue=op.performOperation(remoteResults);
      remoteResults.onCompletion(null,Collections.emptySet(),localValue);
      if (id != null) {
        supplier.pending=id;
        try {
          try {
            if (!csm.awaitCompletion(id,timeout,timeoutUnit)) {
              throw new TimeoutException();
            }
          }
 catch (          InterruptedException e) {
            throw new CacheException(e);
          }
        }
  finally {
          csm.forgetOperation(id);
        }
      }
    }
 else {
      Collection&lt;R&gt; localValue=op.performOperation(remoteResults);
      remoteResults.onCompletion(null,Collections.emptySet(),localValue);
    }
    supplier.close();
  }
 catch (  CacheException e) {
    log.trace("Encountered local cache exception for stream",e);
    supplier.close(e);
  }
catch (  Throwable t) {
    log.trace("Encountered local throwable for stream",t);
    supplier.close(new CacheException(t));
  }
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rehashAwareIteration</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>complete</ParamName>
                    <ParamType>AtomicBoolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>consumer</ParamName>
                    <ParamType>R</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>supplier</ParamName>
                    <ParamType>R</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>iteratorParallelDistribute</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ConsistentHash [segmentInfoCH=dm.getReadConsistentHash()]</InnerVar>
                <InnerVar>SegmentListenerNotifier&lt;R&gt; [listenerNotifier]</InnerVar>
                <InnerVar>KeyTrackingConsumer&lt;Object,R&gt; [results=new KeyTrackingConsumer&lt;&gt;(keyPartitioner,segmentInfoCH.getNumSegments(),iteratorOperation.wrapConsumer(consumer),iteratorOperation.getFunction(),listenerNotifier)]</InnerVar>
                <InnerVar>Thread [thread=Thread.currentThread()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>executor;execute;[() -&gt; {
  try {
    log.tracef("Thread %s submitted iterator request for stream",thread);
    Set&lt;Integer&gt; segmentsToProcess=segmentsToFilter == null ? new RangeSet(segmentInfoCH.getNumSegments()) : segmentsToFilter;
    do {
      LocalizedCacheTopology cacheTopology=dm.getCacheTopology();
      ConsistentHash ch=cacheTopology.getReadConsistentHash();
      boolean runLocal=ch.getMembers().contains(localAddress);
      Set&lt;Integer&gt; segments;
      Set&lt;Object&gt; excludedKeys;
      boolean stayLocal=false;
      if (runLocal) {
        Set&lt;Integer&gt; segmentsForOwner=ch.getSegmentsForOwner(localAddress);
        stayLocal=segmentsForOwner.containsAll(segmentsToProcess);
        if (stayLocal) {
          segments=segmentsToProcess;
        }
 else {
          segments=ch.getPrimarySegmentsForOwner(localAddress).stream().filter(segmentsToProcess::contains).collect(Collectors.toSet());
        }
        excludedKeys=segments.stream().flatMap(s -&gt; results.referenceArray.get(s).stream()).collect(Collectors.toSet());
      }
 else {
        segments=null;
        excludedKeys=Collections.emptySet();
      }
      KeyTrackingTerminalOperation&lt;Object,R,Object&gt; op=iteratorOperation.getOperation(intermediateOperations,supplierForSegments(ch,segmentsToProcess,excludedKeys,!stayLocal),distributedBatchSize);
      if (!stayLocal) {
        Object id=csm.remoteStreamOperationRehashAware(iteratorParallelDistribute,parallel,ch,segmentsToProcess,keysToFilter,new AtomicReferenceArrayToMap&lt;&gt;(results.referenceArray),includeLoader,op,results);
        if (id != null) {
          supplier.pending=id;
        }
        try {
          if (runLocal) {
            performLocalRehashAwareOperation(results,segmentsToProcess,ch,segments,op,() -&gt; ch.getPrimarySegmentsForOwner(localAddress),id);
          }
          if (id != null) {
            try {
              if (!csm.awaitCompletion(id,timeout,timeoutUnit)) {
                throw new TimeoutException();
              }
            }
 catch (            InterruptedException e) {
              throw new CacheException(e);
            }
          }
          segmentsToProcess=segmentsToProcess(supplier,results,segmentsToProcess,id,cacheTopology.getTopologyId());
        }
  finally {
          csm.forgetOperation(id);
        }
      }
 else {
        performLocalRehashAwareOperation(results,segmentsToProcess,ch,segments,op,() -&gt; ch.getSegmentsForOwner(localAddress),null);
        segmentsToProcess=segmentsToProcess(supplier,results,segmentsToProcess,null,cacheTopology.getTopologyId());
      }
    }
 while (!complete.get());
  }
 catch (  CacheException e) {
    log.trace("Encountered local cache exception for stream",e);
    supplier.close(e);
  }
catch (  Throwable t) {
    log.trace("Encountered local throwable for stream",t);
    supplier.close(new CacheException(t));
  }
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>segmentsToProcess</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Integer</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>supplier</ParamName>
                    <ParamType>R</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>results</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>segmentsToProcess</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>id</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>topologyId</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [strId=id == null ? "local" : id.toString()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>performLocalRehashAwareOperation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>results</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>segmentsToProcess</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ch</ParamName>
                    <ParamType>ConsistentHash</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>segments</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>op</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ownedSegmentsSupplier</ParamName>
                    <ParamType>Set&lt;Integer&gt;</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>id</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Collection&lt;CacheEntry&lt;Object,Object&gt;&gt; [localValue=op.performOperationRehashAware(results)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>HandOffConsumer</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>queue</ParamName>
                    <ParamType>R</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>completed</ParamName>
                    <ParamType>AtomicBoolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nextLock</ParamName>
                    <ParamType>Lock</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nextCondition</ParamName>
                    <ParamType>Condition</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>accept</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rs</ParamName>
                    <ParamType>R</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>SegmentListenerNotifier</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>listener</ParamName>
                    <ParamType>SegmentCompletionListener</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>accept</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Set&lt;Integer&gt; [segments=segmentsByObject.remove(t)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addSegmentsForObject</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>object</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>segments</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>segmentsByObject;put;[object, segments]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>completeSegmentsNoResults</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>segments</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>listener;segmentCompleted;[segments]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>IteratorSupplier</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>queue</ParamName>
                    <ParamType>R</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>completed</ParamName>
                    <ParamType>AtomicBoolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nextLock</ParamName>
                    <ParamType>Lock</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nextCondition</ParamName>
                    <ParamType>Condition</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>clusterStreamManager</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>close</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;close;[null]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>close</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>e</ParamName>
                    <ParamType>CacheException</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>nextLock;lock;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>get</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>R</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>R [entry=queue.poll()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setConsumer</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>consumer</ParamName>
                    <ParamType>R</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>spliterator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>R</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>forEach</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>action</ParamName>
                    <ParamType>? super R</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>forEach</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>action</ParamName>
                    <ParamType>Cache&lt;K,V&gt;</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>forEachOrdered</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>action</ParamName>
                    <ParamType>? super R</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;forEach;[action]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toArray</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toArray</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>A[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>generator</ParamName>
                    <ParamType>A[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sequentialDistribution</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>R</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parallelDistribution</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>R</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>filterKeySegments</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>R</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>segments</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>filterKeys</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>R</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>keys</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>distributedBatchSize</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>R</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>batchSize</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>segmentCompletionListener</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>R</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>listener</ParamName>
                    <ParamType>SegmentCompletionListener</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>disableRehashAware</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>R</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>timeout</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>R</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>timeout</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>unit</ParamName>
                    <ParamType>TimeUnit</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>intCacheStream</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DistributedIntCacheStream</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>doubleCacheStream</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DistributedDoubleCacheStream</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>longCacheStream</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DistributedLongCacheStream</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>