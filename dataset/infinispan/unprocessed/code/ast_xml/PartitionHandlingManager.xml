<Class>
    <Id>2110</Id>
    <Package>org.infinispan.partitionhandling.impl</Package>
    <ClassName>PartitionHandlingManager</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>PartitionHandlingManager  /** 
 * @author Dan Berindei
 * @since 7.0
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getAvailabilityMode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>AvailabilityMode</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setAvailabilityMode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>availabilityMode</ParamName>
                    <ParamType>AvailabilityMode</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkWrite</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkRead</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkClear</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkBulkRead</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLastStableTopology</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>CacheTopology</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addPartialRollbackTransaction</MethodName>
            <MethodComment>/** 
 * Adds a partially aborted transaction. &lt;p/&gt; The transaction should be registered when it is not sure if the abort happens successfully in all the affected nodes.
 * @param globalTransaction the global transaction.
 * @param affectedNodes     the nodes involved in the transaction and they must abort the transaction.
 * @param lockedKeys        the keys locally locked.
 * @return {@code true} if the {@link PartitionHandlingManager} will handle it, {@code false} otherwise.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>globalTransaction</ParamName>
                    <ParamType>GlobalTransaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>affectedNodes</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lockedKeys</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addPartialCommit2PCTransaction</MethodName>
            <MethodComment>/** 
 * Adds a partially committed transaction. &lt;p/&gt; The transaction is committed in the second phase and it is register if it is not sure that the transaction was committed successfully in all the affected nodes.
 * @param globalTransaction the global transaction.
 * @param affectedNodes     the nodes involved in the transaction and they must commit it.
 * @param lockedKeys        the keys locally locked.
 * @param newVersions       the updated versions. Only used when versioning is enabled.
 * @return {@code true} if the {@link PartitionHandlingManager} will handle it, {@code false} otherwise.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>globalTransaction</ParamName>
                    <ParamType>GlobalTransaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>affectedNodes</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lockedKeys</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>newVersions</ParamName>
                    <ParamType>EntryVersionsMap</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addPartialCommit1PCTransaction</MethodName>
            <MethodComment>/** 
 * Adds a partially committed transaction. &lt;p/&gt; The transaction is committed in one phase and it is register if it is not sure that the transaction was committed successfully in all the affected nodes.
 * @param globalTransaction the global transaction.
 * @param affectedNodes     the nodes involved in the transaction and they must commit it.
 * @param lockedKeys        the keys locally locked.
 * @param modifications     the transaction's modification log.
 * @return {@code true} if the {@link PartitionHandlingManager} will handle it, {@code false} otherwise.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>globalTransaction</ParamName>
                    <ParamType>GlobalTransaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>affectedNodes</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lockedKeys</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>modifications</ParamName>
                    <ParamType>WriteCommand</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isTransactionPartiallyCommitted</MethodName>
            <MethodComment>/** 
 * It checks if the transaction resources (for example locks) can be released. &lt;p/&gt; The transaction resource can't be released when the transaction is partially committed.
 * @param globalTransaction the transaction.
 * @return {@code true} if the resources can be released, {@code false} otherwise.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>globalTransaction</ParamName>
                    <ParamType>GlobalTransaction</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPartialTransactions</MethodName>
            <MethodComment>/** 
 * @return a collection of partial committed or aborted transactions.
 */
</MethodComment>
            <ReturnType>GlobalTransaction</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>canRollbackTransactionAfterOriginatorLeave</MethodName>
            <MethodComment>/** 
 * It checks if the transaction can be aborted when the originator leaves the cluster. &lt;p/&gt; The only case in which it is not possible to abort is when partition handling is enabled and the originator didn't leave gracefully. The transaction will complete when the partition heals.
 * @param globalTransaction the global transaction.
 * @return {@code true} if the transaction can be aborted, {@code false} otherwise.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>globalTransaction</ParamName>
                    <ParamType>GlobalTransaction</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onTopologyUpdate</MethodName>
            <MethodComment>/** 
 * Notifies the  {@link PartitionHandlingManager} that the cache topology was update.&lt;p/&gt; It detects when the partition is merged and tries to complete all the partially completed transactions.
 * @param cacheTopology the new cache topology.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheTopology</ParamName>
                    <ParamType>CacheTopology</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>