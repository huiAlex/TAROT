<Class>
    <Id>1871</Id>
    <Package>org.infinispan.spring.support.remote</Package>
    <ClassName>InfinispanNamedRemoteCacheFactoryBean</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>FactoryBean</SuperInterface>
        <SuperInterface>RemoteCache&lt;K,V&gt;</SuperInterface>
        <SuperInterface>BeanNameAware</SuperInterface>
        <SuperInterface>InitializingBean</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>InfinispanNamedRemoteCacheFactoryBean  /** 
 * &lt;p&gt; A  {@link org.springframework.beans.factory.FactoryBean &lt;code&gt;FactoryBean&lt;/code&gt;} for creating anative  {@link #setCacheName(String) named} Infinispan {@link org.infinispan.Cache &lt;code&gt;org.infinispan.Cache&lt;/code&gt;}, delegating to a {@link #setInfinispanRemoteCacheManager(RemoteCacheManager) &lt;code&gt;configurable&lt;/code&gt;}{@link org.infinispan.client.hotrod.RemoteCacheManager &lt;code&gt;oorg.infinispan.client.hotrod.RemoteCacheManagerr&lt;/code&gt;}. If no cache name is explicitly set, this &lt;code&gt;FactoryBean&lt;/code&gt;'s  {@link #setBeanName(String) &lt;code&gt;beanName&lt;/code&gt;} will beused instead. &lt;/p&gt;
 * @author &lt;a href="mailto:olaf DOT bergner AT gmx DOT de"&gt;Olaf Bergner&lt;/a&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>logger</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>infinispanRemoteCacheManager</FieldName>
            <FieldType>RemoteCacheManager</FieldType>
        </Field>
        <Field>
            <FieldName>cacheName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>beanName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>infinispanCache</FieldName>
            <FieldType>RemoteCache</FieldType>
        </Field>
        <Field>
            <FieldName>infinispanCache</FieldName>
            <FieldType>K</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>afterPropertiesSet</MethodName>
            <MethodComment>/** 
 * @see org.springframework.beans.factory.InitializingBean#afterPropertiesSet()
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [effectiveCacheName=obtainEffectiveCacheName()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.logger;info;["Initializing named Infinispan remote cache ..."]</InnerMethodInvoke>
                <InnerMethodInvoke>this.logger;info;["New Infinispan remote cache [" + this.infinispanCache + "] initialized"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>obtainEffectiveCacheName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setBeanName</MethodName>
            <MethodComment>/** 
 * @see org.springframework.beans.factory.BeanNameAware#setBeanName(java.lang.String)
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getObject</MethodName>
            <MethodComment>/** 
 * @see org.springframework.beans.factory.FactoryBean#getObject()
 */
</MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getObjectType</MethodName>
            <MethodComment>/** 
 * @see org.springframework.beans.factory.FactoryBean#getObjectType()
 */
</MethodComment>
            <ReturnType>? extends ConcurrentMap</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isSingleton</MethodName>
            <MethodComment>/** 
 * Always return true.
 * @see org.springframework.beans.factory.FactoryBean#isSingleton()
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setCacheName</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Sets the  {@link org.infinispan.Cache#getName() name} of the {@link org.infinispan.Cache &lt;code&gt;org.infinispan.Cache&lt;/code&gt;} to be created. If no explicit &lt;code&gt;cacheName&lt;/code&gt; isset, this &lt;code&gt;FactoryBean&lt;/code&gt; will use its  {@link #setBeanName(String) &lt;code&gt;beanName&lt;/code&gt;} as the &lt;code&gt;cacheName&lt;/code&gt;.&lt;/p&gt;
 * @param cacheName The  {@link org.infinispan.Cache#getName() name} of the {@link org.infinispan.Cache &lt;code&gt;org.infinispan.Cache&lt;/code&gt;} to be created
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setInfinispanRemoteCacheManager</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Sets the  {@link org.infinispan.client.hotrod.RemoteCacheManager &lt;code&gt;org.infinispan.client.hotrod.RemoteCacheManager&lt;/code&gt;} to be used for creating our{@link org.infinispan.Cache &lt;code&gt;Cache&lt;/code&gt;} instance. Note that this is a&lt;strong&gt;mandatory&lt;/strong&gt; property. &lt;/p&gt;
 * @param infinispanRemoteCacheManager The  {@link org.infinispan.client.hotrod.RemoteCacheManager &lt;code&gt;org.infinispan.client.hotrod.RemoteCacheManager&lt;/code&gt;} to be used forcreating our  {@link org.infinispan.Cache &lt;code&gt;Cache&lt;/code&gt;} instance
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>infinispanRemoteCacheManager</ParamName>
                    <ParamType>RemoteCacheManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>