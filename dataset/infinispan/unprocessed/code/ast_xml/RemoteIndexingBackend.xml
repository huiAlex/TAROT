<Class>
    <Id>2958</Id>
    <Package>org.infinispan.query.indexmanager</Package>
    <ClassName>RemoteIndexingBackend</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>IndexingBackend</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>RemoteIndexingBackend  /** 
 * The IndexingBackend which forwards all operations to a different node using Infinispan's custom commands.
 * @author Sanne Grinovero &lt;sanne@hibernate.org&gt; (C) 2014 Red Hat Inc.
 * @since 7.0
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>GRACE_MILLISECONDS_FOR_REPLACEMENT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>POLLING_MILLISECONDS_FOR_REPLACEMENT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SYNC_ONLY_WORKS</FieldName>
            <FieldType>Set</FieldType>
        </Field>
        <Field>
            <FieldName>SYNC_ONLY_WORKS</FieldName>
            <FieldType>Class&lt;? extends LuceneWork&gt;</FieldType>
        </Field>
        <Field>
            <FieldName>cacheName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>indexName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>recipients</FieldName>
            <FieldType>Collection</FieldType>
        </Field>
        <Field>
            <FieldName>recipients</FieldName>
            <FieldType>Address</FieldType>
        </Field>
        <Field>
            <FieldName>rpcManager</FieldName>
            <FieldType>RpcManager</FieldType>
        </Field>
        <Field>
            <FieldName>masterAddress</FieldName>
            <FieldType>Address</FieldType>
        </Field>
        <Field>
            <FieldName>async</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>replacement</FieldName>
            <FieldType>IndexingBackend</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>RemoteIndexingBackend</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rpcManager</ParamName>
                    <ParamType>RpcManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indexName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>masterAddress</ParamName>
                    <ParamType>Address</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>async</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>flushAndClose</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>replacement</ParamName>
                    <ParamType>IndexingBackend</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>applyWork</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>workList</ParamName>
                    <ParamType>LuceneWork</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>monitor</ParamName>
                    <ParamType>IndexingMonitor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indexManager</ParamName>
                    <ParamType>IndexManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>IndexUpdateCommand [command=new IndexUpdateCommand(ByteString.fromString(cacheName))]</InnerVar>
                <InnerVar>byte[] [serializedModel=indexManager.getSerializer().toSerializedModel(workList)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>command;setSerializedWorkList;[serializedModel]</InnerMethodInvoke>
                <InnerMethodInvoke>command;setIndexName;[this.indexName]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>shouldSendSync</MethodName>
            <MethodComment>/** 
 * Decides whether a command should be sent sync or async
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>operation</ParamName>
                    <ParamType>LuceneWork</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>shouldSendSync</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>operations</ParamName>
                    <ParamType>LuceneWork</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>applyStreamWork</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>singleOperation</ParamName>
                    <ParamType>LuceneWork</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>monitor</ParamName>
                    <ParamType>IndexingMonitor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indexManager</ParamName>
                    <ParamType>IndexManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>IndexUpdateStreamCommand [streamCommand=new IndexUpdateStreamCommand(ByteString.fromString(cacheName))]</InnerVar>
                <InnerVar>List&lt;LuceneWork&gt; [operations=Collections.singletonList(singleOperation)]</InnerVar>
                <InnerVar>byte[] [serializedModel=indexManager.getSerializer().toSerializedModel(operations)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>streamCommand;setSerializedWorkList;[serializedModel]</InnerMethodInvoke>
                <InnerMethodInvoke>streamCommand;setIndexName;[this.indexName]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>waitForReplacementBackend</MethodName>
            <MethodComment>/** 
 * If some error happened, and a new IndexingBackend was provided, it is safe to assume the error relates with the fact the current backend is no longer valid. At this point we can still forward the work from the current stack to the next backend, creating a linked list of forwards to the right backend:
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [waitedMilliseconds=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sendCommand</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>command</ParamName>
                    <ParamType>ReplicableCommand</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>workList</ParamName>
                    <ParamType>LuceneWork</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sync</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rpcManager;invokeRemotely;[recipients, command, rpcManager.getDefaultRpcOptions(sync)]</InnerMethodInvoke>
                <InnerMethodInvoke>log;workListRemotedTo;[workList, masterAddress]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isMasterLocal</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>