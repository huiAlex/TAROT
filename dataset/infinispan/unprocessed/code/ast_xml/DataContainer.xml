<Class>
    <Id>1568</Id>
    <Package>org.infinispan.container</Package>
    <ClassName>DataContainer</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Iterable</SuperInterface>
        <SuperInterface>InternalCacheEntry&lt;K,V&gt;</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>DataContainer  /** 
 * The main internal data structure which stores entries
 * @author Manik Surtani (&lt;a href="mailto:manik@jboss.org"&gt;manik@jboss.org&lt;/a&gt;)
 * @author Galder Zamarre√±o
 * @author Vladimir Blagojevic
 * @since 4.0
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>get</MethodName>
            <MethodComment>/** 
 * Retrieves a cached entry
 * @param k key under which entry is stored
 * @return entry, if it exists and has not expired, or null if not
 */
</MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>k</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>peek</MethodName>
            <MethodComment>/** 
 * Retrieves a cache entry in the same way as  {@link #get(Object)}} except that it does not update or reorder any of the internal constructs. I.e., expiration does not happen, and in the case of the LRU container, the entry is not moved to the end of the chain. &lt;p/&gt; This method should be used instead of  {@link #get(Object)}} when called while iterating through the data container using methods like  {@link #iterator()} to avoid changing the underlying collection's order.
 * @param k key under which entry is stored
 * @return entry, if it exists, or null if not
 */
</MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>k</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>put</MethodName>
            <MethodComment>/** 
 * Puts an entry in the cache along with metadata adding information such lifespan of entry, max idle time, version information...etc. &lt;p/&gt; The  {@code key} must be activate by invoking {@link org.infinispan.eviction.ActivationManager#onUpdate(Object,boolean)}.
 * @param k key under which to store entry
 * @param v value to store
 * @param metadata metadata of the entry
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>k</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>v</ParamName>
                    <ParamType>V</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>metadata</ParamName>
                    <ParamType>Metadata</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>containsKey</MethodName>
            <MethodComment>/** 
 * Tests whether an entry exists in the container
 * @param k key to test
 * @return true if entry exists and has not expired; false otherwise
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>k</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>remove</MethodName>
            <MethodComment>/** 
 * Removes an entry from the cache &lt;p/&gt; The  {@code key} must be activate by invoking {@link org.infinispan.eviction.ActivationManager#onRemove(Object,boolean)}.
 * @param k key to remove
 * @return entry removed, or null if it didn't exist or had expired
 */
</MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>k</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>size</MethodName>
            <MethodComment>/** 
 * @return count of the number of entries in the container excluding expired entries
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sizeIncludingExpired</MethodName>
            <MethodComment>/** 
 * @return count of the number of entries in the container including expired entries
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clear</MethodName>
            <MethodComment>/** 
 * Removes all entries in the container
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>keySet</MethodName>
            <MethodComment>/** 
 * Returns a set of keys in the container. When iterating through the container using this method, clients should never call  {@link #get(Object)} method but instead {@link #peek(Object)}, in order to avoid changing the order of the underlying collection as a side of effect of iterating through it. &lt;p&gt; This set of keys will include expired entries. If you wish to only retrieve non expired keys please use the {@link DataContainer#entrySet()} method and retrieve keys from there.
 * @return a set of keys
 * @deprecated Please use iterator method if bulk operations are required.
 */
</MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>values</MethodName>
            <MethodComment>/** 
 * This returns all values in the container including expired entries. If you wish to only receive values that are not expired it is recommended to use  {@link DataContainer#entrySet()} and pull values from there directly.
 * @return a set of values contained in the container
 * @deprecated Please use iterator method if bulk operations are required.
 */
</MethodComment>
            <ReturnType>V</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>entrySet</MethodName>
            <MethodComment>/** 
 * Returns a mutable set of immutable cache entries exposed as immutable Map.Entry instances. Clients of this method such as Cache.entrySet() operation implementors are free to convert the set into an immutable set if needed, which is the most common use case. &lt;p/&gt; If a client needs to iterate through a mutable set of mutable cache entries, it should iterate the container itself rather than iterating through the return of entrySet(). &lt;p&gt; This set is a read only backed view of the entries underneath. This set will only show non expired entries when invoked. The size method of the set will count expired entries for the purpose of having a O(1) time cost compared to O(N) if it is to not count expired entries.
 * @return a set of immutable cache entries
 * @deprecated Please use iterator method if bulk operations are required.
 */
</MethodComment>
            <ReturnType>InternalCacheEntry&lt;K,V&gt;</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>evict</MethodName>
            <MethodComment>/** 
 * Atomically, it removes the key from  {@code DataContainer} and passivates it to persistence.&lt;p/&gt; The passivation must be done by invoking the method  {@link org.infinispan.eviction.PassivationManager#passivate(org.infinispan.container.entries.InternalCacheEntry)}.
 * @param key The key to evict.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compute</MethodName>
            <MethodComment>/** 
 * Computes the new value for the key. &lt;p/&gt; See  {@link org.infinispan.container.DataContainer.ComputeAction#compute(Object,org.infinispan.container.entries.InternalCacheEntry,InternalEntryFactory)}. &lt;p/&gt; The  {@code key} must be activate by invoking {@link org.infinispan.eviction.ActivationManager#onRemove(Object,boolean)} or {@link org.infinispan.eviction.ActivationManager#onUpdate(Object,boolean)} depending if the valuereturned by the  {@link org.infinispan.container.DataContainer.ComputeAction} is null or not respectively.&lt;p&gt; Note the entry provided to  {@link org.infinispan.container.DataContainer.ComputeAction} may be expired as theseentries are not filtered as many other methods do.
 * @param key    The key.
 * @param action The action that will compute the new value.
 * @return The {@link org.infinispan.container.entries.InternalCacheEntry} associated to the key.
 */
</MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>action</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>executeTask</MethodName>
            <MethodComment>/** 
 * Executes task specified by the given action on the container key/values filtered using the specified key filter.
 * @param filter the filter for the container keys
 * @param action the specified action to execute on filtered key/values
 * @throws InterruptedException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>filter</ParamName>
                    <ParamType>? super K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>action</ParamName>
                    <ParamType>? super K</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>executeTask</MethodName>
            <MethodComment>/** 
 * Executes task specified by the given action on the container key/values filtered using the specified keyvalue filter.
 * @param filter the filter for the container key/values
 * @param action the specified action to execute on filtered key/values
 * @throws InterruptedException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>filter</ParamName>
                    <ParamType>? super K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>action</ParamName>
                    <ParamType>? super K</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>iterator</MethodName>
            <MethodComment>/** 
 * {@inheritDoc}&lt;p&gt;This iterator only returns entries that are not expired, however it will not remove them while doing so.&lt;/p&gt;
 * @return iterator that doesn't produce expired entries
 */
</MethodComment>
            <ReturnType>InternalCacheEntry&lt;K,V&gt;</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>iteratorIncludingExpired</MethodName>
            <MethodComment>/** 
 * Same as  {@link DataContainer#iterator()} except that is also returns expired entries.
 * @return iterator that returns all entries including expired ones
 */
</MethodComment>
            <ReturnType>InternalCacheEntry&lt;K,V&gt;</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compute</MethodName>
            <MethodComment>/** 
 * Computes the new value for the key.
 * @return The new {@code InternalCacheEntry} for the key, {@code null} if the entry is to be removed or {@code oldEntry} is the entry is not to be changed (i.e. not entries are added, removed or touched).
 */
</MethodComment>
            <ReturnType>K</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>oldEntry</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>factory</ParamName>
                    <ParamType>InternalEntryFactory</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>resize</MethodName>
            <MethodComment>/** 
 * Resizes the capacity of the underlying container. This is only supported if the container is bounded. An  {@link UnsupportedOperationException} is thrown otherwise.
 * @param newSize the new size
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>newSize</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>capacity</MethodName>
            <MethodComment>/** 
 * Returns the capacity of the underlying container. This is only supported if the container is bounded. An  {@link UnsupportedOperationException} is thrownotherwise.
 * @return
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>