<Class>
    <Id>902</Id>
    <Package>org.infinispan.test.integration.security.embedded</Package>
    <ClassName>AbstractAuthentication</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>AbstractAuthentication  /** 
 * @author &lt;a href="mailto:vjuranek@redhat.com"&gt;Vojtech Juranek&lt;/a&gt;
 * @since 7.0
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>DEFAULT_DEPLOY_CONTAINER</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>CACHE_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>TEST_ENTRY_VALUE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>manager</FieldName>
            <FieldType>EmbeddedCacheManager</FieldType>
        </Field>
        <Field>
            <FieldName>TEST_ENTRY_KEY</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>secureCache</FieldName>
            <FieldType>Cache</FieldType>
        </Field>
        <Field>
            <FieldName>secureCache</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>globalConfig</FieldName>
            <FieldType>GlobalConfigurationBuilder</FieldType>
        </Field>
        <Field>
            <FieldName>cacheConfig</FieldName>
            <FieldType>ConfigurationBuilder</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getSecurityDomainName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRolePermissionMap</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPrincipalRoleMapper</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PrincipalRoleMapper</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAdminSubject</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Subject</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>LoginException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getWriterSubject</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Subject</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>LoginException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getReaderSubject</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Subject</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>LoginException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getUnprivilegedSubject</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Subject</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>LoginException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>authenticate</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Subject</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>login</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>password</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [securityDomain=System.getProperty("jboss.security.domain",getSecurityDomainName())]</InnerVar>
                <InnerVar>LoginContext [lc=new LoginContext(securityDomain,new LoginHandler(login,password))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>lc;login;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>LoginException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>authenticateWithKrb</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Subject</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>krbSecurityDomain</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LoginContext [lc=new LoginContext(krbSecurityDomain,new LoginHandler(null,null))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>lc;login;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>LoginException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setupCache</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>GlobalAuthorizationConfigurationBuilder [globalRoles=globalConfig.security().authorization().enable().principalRoleMapper(getPrincipalRoleMapper())]</InnerVar>
                <InnerVar>AuthorizationConfigurationBuilder [authConfig=cacheConfig.security().authorization().enable()]</InnerVar>
                <InnerVar>Map&lt;String,AuthorizationPermission[]&gt; [rolePermissionMap=getRolePermissionMap()]</InnerVar>
                <InnerVar>Subject [admin=getAdminSubject()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>globalConfig.globalJmxStatistics();disable;[]</InnerMethodInvoke>
                <InnerMethodInvoke>globalConfig.globalJmxStatistics();mBeanServerLookup;[null]</InnerMethodInvoke>
                <InnerMethodInvoke>cacheConfig.transaction();lockingMode;[LockingMode.PESSIMISTIC]</InnerMethodInvoke>
                <InnerMethodInvoke>cacheConfig.invocationBatching();enable;[]</InnerMethodInvoke>
                <InnerMethodInvoke>cacheConfig.jmxStatistics();disable;[]</InnerMethodInvoke>
                <InnerMethodInvoke>Security;doAs;[admin, new PrivilegedExceptionAction&lt;Void&gt;(){
  public Void run() throws Exception {
    manager=new DefaultCacheManager(globalConfig.build());
    manager.defineConfiguration(CACHE_NAME,cacheConfig.build());
    secureCache=manager.getCache(CACHE_NAME);
    secureCache.put(TEST_ENTRY_KEY,TEST_ENTRY_VALUE);
    return null;
  }
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>manager;defineConfiguration;[CACHE_NAME, cacheConfig.build()]</InnerMethodInvoke>
                <InnerMethodInvoke>secureCache;put;[TEST_ENTRY_KEY, TEST_ENTRY_VALUE]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>tearDown</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>manager;stop;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testAdminCRUD</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Subject [admin=getAdminSubject()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>Security;doAs;[admin, new PrivilegedExceptionAction&lt;Void&gt;(){
  public Void run() throws Exception {
    assertEquals(TEST_ENTRY_VALUE,secureCache.get(TEST_ENTRY_KEY));
    secureCache.putIfAbsent("test","test value");
    assertEquals("test value",secureCache.get("test"));
    secureCache.put("test","test value2");
    assertEquals("test value2",secureCache.get("test"));
    secureCache.remove("test");
    assertEquals(null,secureCache.get("test"));
    secureCache.clear();
    assertEquals(0,secureCache.size());
    return null;
  }
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertEquals;[TEST_ENTRY_VALUE, secureCache.get(TEST_ENTRY_KEY)]</InnerMethodInvoke>
                <InnerMethodInvoke>secureCache;putIfAbsent;["test", "test value"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["test value", secureCache.get("test")]</InnerMethodInvoke>
                <InnerMethodInvoke>secureCache;put;["test", "test value2"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["test value2", secureCache.get("test")]</InnerMethodInvoke>
                <InnerMethodInvoke>secureCache;remove;["test"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[null, secureCache.get("test")]</InnerMethodInvoke>
                <InnerMethodInvoke>secureCache;clear;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[0, secureCache.size()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testWriterWrite</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Subject [writer=getWriterSubject()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>Security;doAs;[writer, new PrivilegedExceptionAction&lt;Void&gt;(){
  public Void run() throws Exception {
    secureCache.put("test","test value");
    return null;
  }
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>secureCache;put;["test", "test value"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testWriterRemove</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Subject [writer=getWriterSubject()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>Security;doAs;[writer, new PrivilegedExceptionAction&lt;Void&gt;(){
  public Void run() throws Exception {
    secureCache.remove(TEST_ENTRY_KEY);
    return null;
  }
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>secureCache;remove;[TEST_ENTRY_KEY]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testWriterRead</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Subject [writer=getWriterSubject()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>Security;doAs;[writer, new PrivilegedExceptionAction&lt;Void&gt;(){
  public Void run() throws Exception {
    secureCache.get(TEST_ENTRY_KEY);
    return null;
  }
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>secureCache;get;[TEST_ENTRY_KEY]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testReaderRead</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Subject [reader=getReaderSubject()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>Security;doAs;[reader, new PrivilegedExceptionAction&lt;Void&gt;(){
  public Void run() throws Exception {
    assertEquals(TEST_ENTRY_VALUE,secureCache.get(TEST_ENTRY_KEY));
    return null;
  }
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertEquals;[TEST_ENTRY_VALUE, secureCache.get(TEST_ENTRY_KEY)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testReaderWrite</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Subject [reader=getReaderSubject()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>Security;doAs;[reader, new PrivilegedExceptionAction&lt;Void&gt;(){
  public Void run() throws Exception {
    secureCache.put("test","test value");
    return null;
  }
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>secureCache;put;["test", "test value"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testReaderRemove</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Subject [reader=getReaderSubject()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>Security;doAs;[reader, new PrivilegedExceptionAction&lt;Void&gt;(){
  public Void run() throws Exception {
    secureCache.remove(TEST_ENTRY_KEY);
    return null;
  }
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>secureCache;remove;[TEST_ENTRY_KEY]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testUnprivilegedRead</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Subject [unprivileged=getUnprivilegedSubject()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>Security;doAs;[unprivileged, new PrivilegedExceptionAction&lt;Void&gt;(){
  public Void run() throws Exception {
    secureCache.get(TEST_ENTRY_KEY);
    return null;
  }
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>secureCache;get;[TEST_ENTRY_KEY]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testUnprivilegedWrite</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Subject [unprivileged=getUnprivilegedSubject()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>Security;doAs;[unprivileged, new PrivilegedExceptionAction&lt;Void&gt;(){
  public Void run() throws Exception {
    secureCache.put("test","test value");
    return null;
  }
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>secureCache;put;["test", "test value"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testUnprivilegedRemove</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Subject [unprivileged=getUnprivilegedSubject()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>Security;doAs;[unprivileged, new PrivilegedExceptionAction&lt;Void&gt;(){
  public Void run() throws Exception {
    secureCache.remove(TEST_ENTRY_KEY);
    return null;
  }
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>secureCache;remove;[TEST_ENTRY_KEY]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testUnauthenticatedRead</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>secureCache;get;[TEST_ENTRY_KEY]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testUnauthenticatedWrite</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>secureCache;put;["test", "value"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testUnauthenticatedRemove</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>secureCache;remove;[TEST_ENTRY_KEY]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>