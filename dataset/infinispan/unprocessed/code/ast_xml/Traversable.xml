<Class>
    <Id>24</Id>
    <Package>org.infinispan.functional</Package>
    <ClassName>Traversable</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Traversable  /** 
 * Unsorted traversable stream for sequential and aggregating operations. &lt;p&gt;Traversable contains two type of operations: &lt;ol&gt; &lt;li&gt;Intermediate operations which transform a traversable, into another, e.g.  {@link #filter(Predicate)}. &lt;/li&gt; &lt;li&gt;Terminal operations which produce a side effect, e.g.  {@link #forEach(Consumer)}. Once a terminal operation is completed, the resources taken by the traversable are released. &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Traversable cannot be reused and hence is designed to be used only once via its intermediate and terminal operations. &lt;p&gt;In distributed environments, unless individually specified, all lambdas passed to methods are executed where data is located. For example, if executing  {@link #forEach(Consumer)}, the  {@link Consumer} function isexecuted wherever a particular key resides. To execute a for-each operation where the side effects are executed locally, all the  {@link Traversable}'s data needs to be collected and iterated over manually.
 * @param &lt; T &gt;
 * @since 8.0
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>filter</MethodName>
            <MethodComment>/** 
 * An intermediate operation that returns a traversable containing elements matching the given predicate.
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>p</ParamName>
                    <ParamType>? super T</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>map</MethodName>
            <MethodComment>/** 
 * An intermediate operation that returns a traversable containing the results of applying the given function over the elements of the traversable.
 */
</MethodComment>
            <ReturnType>R</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>f</ParamName>
                    <ParamType>? super T</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>flatMap</MethodName>
            <MethodComment>/** 
 * An intermediate operation that returns a traversable containing the results of replacing each element of this traversable with the contents of a traversable produced by applying the provided function to each element. &lt;p&gt;From a functional map perspective, this operation is particularly handy when the values are collections.
 */
</MethodComment>
            <ReturnType>R</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>f</ParamName>
                    <ParamType>? super T</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>forEach</MethodName>
            <MethodComment>/** 
 * A terminal operation that applies an operation to all elements of this traversable.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>? super T</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reduce</MethodName>
            <MethodComment>/** 
 * A terminal operation that applies a binary folding operation to a start value and all elements of this traversable.
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>z</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>folder</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reduce</MethodName>
            <MethodComment>/** 
 * A terminal operation that applies a binary folding operation to all elements of this traversable, and wraps the result in an optional. If the traversable is empty, it returns an empty optional.
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>folder</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reduce</MethodName>
            <MethodComment>/** 
 * A terminal operation that applies a binary folding operation to a start value and the result of each element having a mapping function applied. &lt;p&gt;This is a combined map/reduce which could potentially be done more efficiently than if a map is executed and then reduce.
 */
</MethodComment>
            <ReturnType>U</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>z</ParamName>
                    <ParamType>U</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mapper</ParamName>
                    <ParamType>U</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>folder</ParamName>
                    <ParamType>U</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>collect</MethodName>
            <MethodComment>/** 
 * A terminal operation that transforms the traversable into a result container, first constructed with the given supplier, and then accumulating elements over it with the given consumer. &lt;p&gt;The combiner can be used to combine accumulated results executed in parallel or coming from different nodes in a distributed environment. &lt;p&gt;In distributed environments where some keys are remote, the {@link Supplier} and {@link BiConsumer} instances passed in are sent toother nodes and hence they need to be marshallable. If the collect operation can be defined using the helper methods in {@link java.util.stream.Collectors}, it is recommended that those are used, which can easily be made marshalled using the {@code org.infinispan.stream.CacheCollectors#serializableCollector} method.
 */
</MethodComment>
            <ReturnType>R</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>R</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>accumulator</ParamName>
                    <ParamType>R</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>combiner</ParamName>
                    <ParamType>R</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>collect</MethodName>
            <MethodComment>/** 
 * A terminal operation that transforms the traversable into a result container using a  {@code Collector}. &lt;p&gt;In distributed environments where some keys are remote, the {@link Collector} instance passed in is sent other nodes and hence itneeds to be marshallable. This can easily be made achieved using the {@code org.infinispan.stream.CacheCollectors#serializableCollector} method.
 */
</MethodComment>
            <ReturnType>R</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>collector</ParamName>
                    <ParamType>? super T</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>min</MethodName>
            <MethodComment>/** 
 * A terminal operation that returns an optional containing the minimum element of this traversable based on the comparator passed in. If the traversable is empty, it returns an empty optional.
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>comparator</ParamName>
                    <ParamType>? super T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>max</MethodName>
            <MethodComment>/** 
 * A terminal operation that returns an optional containing the maximum element of this traversable based on the comparator passed in. If the traversable is empty, it returns an empty optional.
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>comparator</ParamName>
                    <ParamType>? super T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>count</MethodName>
            <MethodComment>/** 
 * A terminal operation that returns the number of elements in the traversable.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>anyMatch</MethodName>
            <MethodComment>/** 
 * A terminal operation that returns whether any elements of this traversable match the provided predicate. &lt;p&gt;An important reason to keep this method is the fact as opposed to a reduction which must evaluate all elements in the traversable, this method could stop as soon as it has found an element that matches.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>p</ParamName>
                    <ParamType>? super T</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>allMatch</MethodName>
            <MethodComment>/** 
 * A terminal operation that returns whether all elements of this traversable match the provided predicate. &lt;p&gt;An important reason to keep this method is the fact as opposed to a reduction which must evaluate all elements in the traversable, this method could stop as soon as it has found an element that does not match the predicate.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>p</ParamName>
                    <ParamType>? super T</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>noneMatch</MethodName>
            <MethodComment>/** 
 * A terminal operation that returns whether no elements of this traversable match the provided predicate. &lt;p&gt;An important reason to keep this method is the fact as opposed to a reduction which must evaluate all elements in the traversable, this method could stop as soon as it has found an element that does matches the predicate.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>predicate</ParamName>
                    <ParamType>? super T</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findAny</MethodName>
            <MethodComment>/** 
 * A terminal operation that returns an optional containing an element of the traversable, or an empty optional if empty.
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>