<Class>
    <Id>3574</Id>
    <Package>org.infinispan.configuration.cache</Package>
    <ClassName>StateTransferConfiguration</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>StateTransferConfiguration  /** 
 * Configures how state is retrieved when a new cache joins the cluster. Used with invalidation and replication clustered modes.
 * @since 5.1
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>AWAIT_INITIAL_TRANSFER</FieldName>
            <FieldType>AttributeDefinition</FieldType>
        </Field>
        <Field>
            <FieldName>AWAIT_INITIAL_TRANSFER</FieldName>
            <FieldType>Boolean</FieldType>
        </Field>
        <Field>
            <FieldName>FETCH_IN_MEMORY_STATE</FieldName>
            <FieldType>AttributeDefinition</FieldType>
        </Field>
        <Field>
            <FieldName>FETCH_IN_MEMORY_STATE</FieldName>
            <FieldType>Boolean</FieldType>
        </Field>
        <Field>
            <FieldName>TIMEOUT</FieldName>
            <FieldType>AttributeDefinition</FieldType>
        </Field>
        <Field>
            <FieldName>TIMEOUT</FieldName>
            <FieldType>Long</FieldType>
        </Field>
        <Field>
            <FieldName>CHUNK_SIZE</FieldName>
            <FieldType>AttributeDefinition</FieldType>
        </Field>
        <Field>
            <FieldName>CHUNK_SIZE</FieldName>
            <FieldType>Integer</FieldType>
        </Field>
        <Field>
            <FieldName>awaitInitialTransfer</FieldName>
            <FieldType>Attribute</FieldType>
        </Field>
        <Field>
            <FieldName>awaitInitialTransfer</FieldName>
            <FieldType>Boolean</FieldType>
        </Field>
        <Field>
            <FieldName>fetchInMemoryState</FieldName>
            <FieldType>Attribute</FieldType>
        </Field>
        <Field>
            <FieldName>fetchInMemoryState</FieldName>
            <FieldType>Boolean</FieldType>
        </Field>
        <Field>
            <FieldName>timeout</FieldName>
            <FieldType>Attribute</FieldType>
        </Field>
        <Field>
            <FieldName>timeout</FieldName>
            <FieldType>Long</FieldType>
        </Field>
        <Field>
            <FieldName>chunkSize</FieldName>
            <FieldType>Attribute</FieldType>
        </Field>
        <Field>
            <FieldName>chunkSize</FieldName>
            <FieldType>Integer</FieldType>
        </Field>
        <Field>
            <FieldName>attributes</FieldName>
            <FieldType>AttributeSet</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>attributeDefinitionSet</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>AttributeSet</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>StateTransferConfiguration</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>attributes</ParamName>
                    <ParamType>AttributeSet</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fetchInMemoryState</MethodName>
            <MethodComment>/** 
 * If  {@code true}, the cache will fetch data from the neighboring caches when it starts up, so the cache starts 'warm', although it will impact startup time. &lt;p/&gt; In distributed mode, state is transferred between running caches as well, as the ownership of keys changes (e.g. because a cache left the cluster). Disabling this setting means a key will sometimes have less than  {@code numOwner} owners.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>timeout</MethodName>
            <MethodComment>/** 
 * This is the maximum amount of time - in milliseconds - to wait for state from neighboring caches, before throwing an exception and aborting startup.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>timeout</MethodName>
            <MethodComment>/** 
 * This is the maximum amount of time - in milliseconds - to wait for state from neighboring caches, before throwing an exception and aborting startup.
 */
</MethodComment>
            <ReturnType>StateTransferConfiguration</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>l</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>timeout;set;[l]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>chunkSize</MethodName>
            <MethodComment>/** 
 * The state will be transferred in batches of  {@code chunkSize} cache entries.If chunkSize is equal to Integer.MAX_VALUE, the state will be transferred in all at once. Not recommended.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>awaitInitialTransfer</MethodName>
            <MethodComment>/** 
 * If  {@code true}, this will cause the first call to method  {@code CacheManager.getCache()} on the joiner node toblock and wait until the joining is complete and the cache has finished receiving state from neighboring caches (if fetchInMemoryState is enabled). This option applies to distributed and replicated caches only and is enabled by default. Please note that setting this to  {@code false} will make the cache object available immediately butany access to keys that should be available locally but are not yet transferred will actually cause a (transparent) remote access. While this will not have any impact on the logic of your application it might impact performance.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>originalAwaitInitialTransfer</MethodName>
            <MethodComment>/** 
 * We want to remember if the user didn't configure awaitInitialTransfer for the default cache.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>attributes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>AttributeSet</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>equals</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>obj</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StateTransferConfiguration [other=(StateTransferConfiguration)obj]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hashCode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [prime=31]</InnerVar>
                <InnerVar>int [result=1]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>