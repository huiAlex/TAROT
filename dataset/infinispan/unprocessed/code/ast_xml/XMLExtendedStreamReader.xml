<Class>
    <Id>2786</Id>
    <Package>org.infinispan.configuration.parsing</Package>
    <ClassName>XMLExtendedStreamReader</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>XMLStreamReader</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>XMLExtendedStreamReader  /** 
 * An XML stream reader that can read nested  {@code &lt;xs:any&gt;} content using a registered set of rootelements.
 * @author &lt;a href="mailto:david.lloyd@redhat.com"&gt;David M. Lloyd&lt;/a&gt;
 * @since 6.0
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>handleAny</MethodName>
            <MethodComment>/** 
 * Handle an  {@code &lt;xs:any&gt;}-type nested element, passing in the given value, returning after the end of the element. Must be positioned on a  {@code START_ELEMENT} or an exception willoccur. On return the cursor will be positioned on the corresponding  {@code END_ELEMENT}.
 * @param value the value to pass in
 * @throws XMLStreamException if an error occurs (e.g. the given value does not match the type of the handler for the element, or the element is unknown)
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>holder</ParamName>
                    <ParamType>ConfigurationBuilderHolder</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>XMLStreamException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getListAttributeValue</MethodName>
            <MethodComment>/** 
 * Get the value of an attribute as a space-delimited string list.
 * @param i the index of the attribute
 */
</MethodComment>
            <ReturnType>String[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>i</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSchema</MethodName>
            <MethodComment>/** 
 * Returns the schema of currently being processed
 * @return schema the current schema
 */
</MethodComment>
            <ReturnType>Schema</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setSchema</MethodName>
            <MethodComment>/** 
 * Sets the current schema
 * @param schema
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>schema</ParamName>
                    <ParamType>Schema</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>