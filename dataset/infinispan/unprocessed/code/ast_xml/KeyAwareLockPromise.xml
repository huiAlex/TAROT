<Class>
    <Id>2746</Id>
    <Package>org.infinispan.util.concurrent.locks</Package>
    <ClassName>KeyAwareLockPromise</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>LockPromise</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>KeyAwareLockPromise  /** 
 * An extension of  {@link LockPromise} that contains a key associated to the lock.
 * @author Pedro Ruivo
 * @since 8.0
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>NO_OP</FieldName>
            <FieldType>KeyAwareLockPromise</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>addListener</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>listener</ParamName>
                    <ParamType>KeyAwareLockListener</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>listener;onEvent;[null, LockState.ACQUIRED]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isAvailable</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>lock</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>InterruptedException</ExceptionType>
                <ExceptionType>TimeoutException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addListener</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>listener</ParamName>
                    <ParamType>LockListener</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>listener;onEvent;[LockState.ACQUIRED]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addListener</MethodName>
            <MethodComment>/** 
 * It adds the listener to this  {@link LockPromise}. &lt;p&gt; The listener is invoked when the  {@link LockPromise#isAvailable()} returns true. For more info, check {@link KeyAwareLockListener}.
 * @param listener the listener to add.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>listener</ParamName>
                    <ParamType>KeyAwareLockListener</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>