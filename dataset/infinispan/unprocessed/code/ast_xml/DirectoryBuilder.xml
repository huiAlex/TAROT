<Class>
    <Id>198</Id>
    <Package>org.infinispan.lucene.directory</Package>
    <ClassName>DirectoryBuilder</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>DirectoryBuilder  /** 
 * Builder class to create instances of the  {@link org.apache.lucene.store.Directory} implementation which stored datain the data grid.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>DirectoryBuilder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newDirectoryInstance</MethodName>
            <MethodComment>/** 
 * Starting point to create a Directory instance.
 * @param metadataCache  contains the metadata of stored elements
 * @param chunksCache    cache containing the bulk of the index; this is the larger part of data
 * @param distLocksCache cache to store locks; should be replicated and not using a persistent CacheStore
 * @param indexName      identifies the index; you can store different indexes in the same set of caches usingdifferent identifiers
 */
</MethodComment>
            <ReturnType>BuildContext</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>metadataCache</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>chunksCache</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>distLocksCache</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indexName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;validateIndexCaches;[indexName, metadataCache, chunksCache, distLocksCache]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>validateIndexCaches</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>indexName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>caches</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>Arrays.stream(caches).filter(Objects::nonNull);forEach;[cache -&gt; {
  ClusteringConfiguration clusteringConfiguration=cache.getCacheConfiguration().clustering();
  CacheMode cacheMode=clusteringConfiguration.cacheMode();
  if (cacheMode.isClustered() &amp;&amp; !cacheMode.isSynchronous()) {
    throw log.cannotStoreIndexOnAsyncCaches(indexName,cache.getName(),cacheMode);
  }
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>