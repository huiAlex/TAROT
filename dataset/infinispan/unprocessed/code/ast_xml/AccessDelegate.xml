<Class>
    <Id>1995</Id>
    <Package>org.infinispan.hibernate.cache.access</Package>
    <ClassName>AccessDelegate</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>AccessDelegate  /** 
 * Defines the strategy for access to entity or collection data in a Infinispan instance. &lt;p/&gt; The intent of this class is to encapsulate common code and serve as a delegate for {@link org.hibernate.cache.spi.access.EntityRegionAccessStrategy}and  {@link org.hibernate.cache.spi.access.CollectionRegionAccessStrategy} implementations.
 * @author Radim Vansa &amp;lt;rvansa@redhat.com&amp;gt;
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>get</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>session</ParamName>
                    <ParamType>SessionImplementor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>txTimestamp</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>CacheException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>putFromLoad</MethodName>
            <MethodComment>/** 
 * Attempt to cache an object, after loading from the database.
 * @param session Current session
 * @param key The item key
 * @param value The item
 * @param txTimestamp a timestamp prior to the transaction start time
 * @param version the item version number
 * @return &lt;tt&gt;true&lt;/tt&gt; if the object was successfully cached
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>session</ParamName>
                    <ParamType>SessionImplementor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>txTimestamp</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>version</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>putFromLoad</MethodName>
            <MethodComment>/** 
 * Attempt to cache an object, after loading from the database, explicitly specifying the minimalPut behavior.
 * @param session Current session.
 * @param key The item key
 * @param value The item
 * @param txTimestamp a timestamp prior to the transaction start time
 * @param version the item version number
 * @param minimalPutOverride Explicit minimalPut flag
 * @return &lt;tt&gt;true&lt;/tt&gt; if the object was successfully cached
 * @throws org.hibernate.cache.CacheException Propogated from underlying {@link org.hibernate.cache.spi.Region}
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>session</ParamName>
                    <ParamType>SessionImplementor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>txTimestamp</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>version</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>minimalPutOverride</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>CacheException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>insert</MethodName>
            <MethodComment>/** 
 * Called after an item has been inserted (before the transaction completes), instead of calling evict().
 * @param session Current session
 * @param key The item key
 * @param value The item
 * @param version The item's version value
 * @return Were the contents of the cache actual changed by this operation?
 * @throws CacheException if the insert fails
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>session</ParamName>
                    <ParamType>SessionImplementor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>version</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>CacheException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>update</MethodName>
            <MethodComment>/** 
 * Called after an item has been updated (before the transaction completes), instead of calling evict().
 * @param session Current session
 * @param key The item key
 * @param value The item
 * @param currentVersion The item's current version value
 * @param previousVersion The item's previous version value
 * @return Whether the contents of the cache actual changed by this operation
 * @throws CacheException if the update fails
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>session</ParamName>
                    <ParamType>SessionImplementor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>currentVersion</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>previousVersion</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>CacheException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>remove</MethodName>
            <MethodComment>/** 
 * Called after an item has become stale (before the transaction completes).
 * @param session Current session
 * @param key The key of the item to remove
 * @throws CacheException if removing the cached item fails
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>session</ParamName>
                    <ParamType>SessionImplementor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>CacheException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeAll</MethodName>
            <MethodComment>/** 
 * Called to evict data from the entire region
 * @throws CacheException if eviction the region fails
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>CacheException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>evict</MethodName>
            <MethodComment>/** 
 * Forcibly evict an item from the cache immediately without regard for transaction isolation.
 * @param key The key of the item to remove
 * @throws CacheException if evicting the item fails
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>CacheException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>evictAll</MethodName>
            <MethodComment>/** 
 * Forcibly evict all items from the cache immediately without regard for transaction isolation.
 * @throws CacheException if evicting items fails
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>CacheException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>unlockItem</MethodName>
            <MethodComment>/** 
 * Called when we have finished the attempted update/delete (which may or may not have been successful), after transaction completion.  This method is used by "asynchronous" concurrency strategies.
 * @param session
 * @param key The item key
 * @throws org.hibernate.cache.CacheException Propogated from underlying {@link org.hibernate.cache.spi.Region}
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>session</ParamName>
                    <ParamType>SessionImplementor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>CacheException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>afterInsert</MethodName>
            <MethodComment>/** 
 * Called after an item has been inserted (after the transaction completes), instead of calling release(). This method is used by "asynchronous" concurrency strategies.
 * @param session
 * @param key The item key
 * @param value The item
 * @param version The item's version value
 * @return Were the contents of the cache actual changed by this operation?
 * @throws CacheException Propagated from underlying {@link org.hibernate.cache.spi.Region}
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>session</ParamName>
                    <ParamType>SessionImplementor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>version</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>afterUpdate</MethodName>
            <MethodComment>/** 
 * Called after an item has been updated (after the transaction completes), instead of calling release().  This method is used by "asynchronous" concurrency strategies.
 * @param session
 * @param key The item key
 * @param value The item
 * @param currentVersion The item's current version value
 * @param previousVersion The item's previous version value
 * @param lock The lock previously obtained from {@link #lockItem}
 * @return Were the contents of the cache actual changed by this operation?
 * @throws CacheException Propagated from underlying {@link org.hibernate.cache.spi.Region}
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>session</ParamName>
                    <ParamType>SessionImplementor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>currentVersion</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>previousVersion</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lock</ParamName>
                    <ParamType>SoftLock</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>