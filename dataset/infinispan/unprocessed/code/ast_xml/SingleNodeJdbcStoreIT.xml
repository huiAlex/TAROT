<Class>
    <Id>2584</Id>
    <Package>org.infinispan.server.test.cs.jdbc</Package>
    <ClassName>SingleNodeJdbcStoreIT</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>SingleNodeJdbcStoreIT  /** 
 * These are the tests for various JDBC stores (string, binary, mixed) with a single server. We test each store with 2 configurations: 1. passivation = true, preload = false 2. passivation = false, preload = true To speed things up, the tests use hotrod client so we can reuse a single server. Test for the write-behind store uses memcached client. Mixed store is not fully tested, because DefaultTwoWayKey2StringMapper (which does the decision string/binary) can handle both string keys (memcached) and byte array keys (hotrod), which means all the keys go into the string store.
 * @author &lt;a href="mailto:mgencur@redhat.com"&gt;Martin Gencur&lt;/a&gt;
 * @author &lt;a href="mailto:vchepeli@redhat.com"&gt;Vitalii Chepeliuk&lt;/a&gt;
 * @author &lt;a href="mailto:jmarkos@redhat.com"&gt;Jakub Markos&lt;/a&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>CONTAINER</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>controller</FieldName>
            <FieldType>ContainerController</FieldType>
        </Field>
        <Field>
            <FieldName>server</FieldName>
            <FieldType>RemoteInfinispanServer</FieldType>
        </Field>
        <Field>
            <FieldName>ID_COLUMN_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>DATA_COLUMN_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>rcmFactory</FieldName>
            <FieldType>RemoteCacheManagerFactory</FieldType>
        </Field>
        <Field>
            <FieldName>stringDB</FieldName>
            <FieldType>DBServer</FieldType>
        </Field>
        <Field>
            <FieldName>stringWPDB</FieldName>
            <FieldType>DBServer</FieldType>
        </Field>
        <Field>
            <FieldName>stringAsyncDB</FieldName>
            <FieldType>DBServer</FieldType>
        </Field>
        <Field>
            <FieldName>stringMBeans</FieldName>
            <FieldType>RemoteInfinispanMBeans</FieldType>
        </Field>
        <Field>
            <FieldName>stringWPMBeans</FieldName>
            <FieldType>RemoteInfinispanMBeans</FieldType>
        </Field>
        <Field>
            <FieldName>stringCache</FieldName>
            <FieldType>RemoteCache</FieldType>
        </Field>
        <Field>
            <FieldName>stringWPCache</FieldName>
            <FieldType>RemoteCache</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>startup</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cleanup</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>DBServer[] [dbservers={stringDB,stringWPDB,stringAsyncDB}]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setUp</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testNormalShutdown</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;testRestartStringStoreBefore;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;testRestartStringStoreWPBefore;[]</InnerMethodInvoke>
                <InnerMethodInvoke>controller;stop;[CONTAINER]</InnerMethodInvoke>
                <InnerMethodInvoke>controller;start;[CONTAINER]</InnerMethodInvoke>
                <InnerMethodInvoke>null;testRestartStringStoreAfter;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>null;testRestartStringStoreWPAfter;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testForcedShutdown</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;testRestartStringStoreBefore;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;testRestartStringStoreWPBefore;[]</InnerMethodInvoke>
                <InnerMethodInvoke>controller;kill;[CONTAINER]</InnerMethodInvoke>
                <InnerMethodInvoke>controller;start;[CONTAINER]</InnerMethodInvoke>
                <InnerMethodInvoke>null;testRestartStringStoreAfter;[true]</InnerMethodInvoke>
                <InnerMethodInvoke>null;testRestartStringStoreWPAfter;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testAsyncStringStore</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>MemcachedClient [mc=createMemcachedClient(server)]</InnerVar>
                <InnerVar>int [numEntries=1000]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;eventually;[() -&gt; stringAsyncDB.stringTable.exists(), 10000]</InnerMethodInvoke>
                <InnerMethodInvoke>null;eventually;[() -&gt; stringAsyncDB.stringTable.getAllRows().isEmpty(), 10000]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testRestartStringStoreBefore</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>boolean [tableExists=stringDB.stringTable.exists()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertCleanCacheAndStoreHotrod;[stringCache, stringDB.stringTable]</InnerMethodInvoke>
                <InnerMethodInvoke>stringCache;put;["k1", "v1"]</InnerMethodInvoke>
                <InnerMethodInvoke>stringCache;put;["k2", "v2"]</InnerMethodInvoke>
                <InnerMethodInvoke>stringCache;put;["k3", "v3"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;[2 &gt;= server.getCacheManager(stringMBeans.managerName).getCache(stringMBeans.cacheName).getNumberOfEntriesInMemory()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testRestartStringStoreAfter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>killed</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertEquals;[0, server.getCacheManager(stringMBeans.managerName).getCache(stringMBeans.cacheName).getNumberOfEntriesInMemory()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testRestartStringStoreWPBefore</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertCleanCacheAndStoreHotrod;[stringWPCache, stringWPDB.stringTable]</InnerMethodInvoke>
                <InnerMethodInvoke>stringWPCache;put;["k1", "v1"]</InnerMethodInvoke>
                <InnerMethodInvoke>stringWPCache;put;["k2", "v2"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotNull;[stringWPDB.stringTable.getValueByKey(getStoredKey(stringWPCache,"k1"))]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotNull;[stringWPDB.stringTable.getValueByKey(getStoredKey(stringWPCache,"k2"))]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testRestartStringStoreWPAfter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;eventually;[() -&gt; {
  return 2 == server.getCacheManager(stringWPMBeans.managerName).getCache(stringWPMBeans.cacheName).getNumberOfEntries();
}
, 10000]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["v1", stringWPCache.get("k1")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["v2", stringWPCache.get("k2")]</InnerMethodInvoke>
                <InnerMethodInvoke>stringWPCache;remove;["k1"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNull;[stringWPDB.stringTable.getValueByKey(getStoredKey(stringWPCache,"k1"))]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotNull;[stringWPDB.stringTable.getValueByKey(getStoredKey(stringWPCache,"k2"))]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>assertCleanCacheAndStoreHotrod</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cache</ParamName>
                    <ParamType>RemoteCache</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>table</ParamName>
                    <ParamType>DBServer.TableManipulation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cache;clear;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStoredKey</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cache</ParamName>
                    <ParamType>RemoteCache</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fromStoredKey</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cache</ParamName>
                    <ParamType>RemoteCache</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Object [o=cache.getRemoteCacheManager().getMarshaller().objectFromByteBuffer(Base64.getDecoder().decode(key.substring(2)))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>log;tracef;["Key in DB=%s &gt; %s", key, o]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>InterruptedException</ExceptionType>
                <ExceptionType>ClassNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createCache</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mbeans</ParamName>
                    <ParamType>RemoteInfinispanMBeans</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>