<Class>
    <Id>3814</Id>
    <Package>org.infinispan.objectfilter</Package>
    <ClassName>FilterSubscription</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>FilterSubscription  /** 
 * A subscription for match notifications.
 * @author anistor@redhat.com
 * @since 7.0
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getEntityTypeName</MethodName>
            <MethodComment>/** 
 * The fully qualified entity type name accepted by this filter.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCallback</MethodName>
            <MethodComment>/** 
 * The associated callback that is being notified of successful matches.
 */
</MethodComment>
            <ReturnType>FilterCallback</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isDeltaFilter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getProjection</MethodName>
            <MethodComment>/** 
 * The array of '.' separated path names of the projected fields if any, or  {@code null} otherwise.
 */
</MethodComment>
            <ReturnType>String[]</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSortFields</MethodName>
            <MethodComment>/** 
 * The array of sort specifications if defined, or  {@code null} otherwise.
 */
</MethodComment>
            <ReturnType>SortField[]</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getComparator</MethodName>
            <MethodComment>/** 
 * The comparator corresponding to the 'order by' clause, if any.
 * @return the Comparator or {@code null} if no 'order by' was specified
 */
</MethodComment>
            <ReturnType>Comparable[]</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEventTypes</MethodName>
            <MethodComment>/** 
 * The event types.
 * @return the array of event types or null
 */
</MethodComment>
            <ReturnType>Object[]</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>