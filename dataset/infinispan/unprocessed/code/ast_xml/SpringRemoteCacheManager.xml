<Class>
    <Id>1413</Id>
    <Package>org.infinispan.spring.provider</Package>
    <ClassName>SpringRemoteCacheManager</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>org.springframework.cache.CacheManager</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>SpringRemoteCacheManager  /** 
 * &lt;p&gt; A  {@link org.springframework.cache.CacheManager &lt;code&gt;CacheManager&lt;/code&gt;} implementation that isbacked by an  {@link org.infinispan.client.hotrod.RemoteCacheManager &lt;code&gt;Infinispan RemoteCacheManager&lt;/code&gt;} instance.&lt;/p&gt;
 * @author &lt;a href="mailto:olaf DOT bergner AT gmx DOT de"&gt;Olaf Bergner&lt;/a&gt;
 * @author Marius Bogoevici
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>nativeCacheManager</FieldName>
            <FieldType>RemoteCacheManager</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>SpringRemoteCacheManager</MethodName>
            <MethodComment>/** 
 * @param nativeCacheManager the underlying cache manager
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>nativeCacheManager</ParamName>
                    <ParamType>RemoteCacheManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>Assert;notNull;[nativeCacheManager, "A non-null instance of EmbeddedCacheManager needs to be supplied"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCache</MethodName>
            <MethodComment>/** 
 * @see org.springframework.cache.CacheManager#getCache(java.lang.String)
 */
</MethodComment>
            <ReturnType>SpringCache</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCacheNames</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; As of Infinispan 4.2.0.FINAL &lt;code&gt;org.infinispan.client.hotrod.RemoteCache&lt;/code&gt; does &lt;strong&gt;not&lt;/strong&gt; support retrieving the set of all cache names from the hotrod server. This restriction may be lifted in the future. Currently, this operation will always throw an &lt;code&gt;UnsupportedOperationException&lt;/code&gt;. &lt;/p&gt;
 * @see org.springframework.cache.CacheManager#getCacheNames()
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNativeCacheManager</MethodName>
            <MethodComment>/** 
 * Return the  {@link org.infinispan.client.hotrod.RemoteCacheManager &lt;code&gt;org.infinispan.client.hotrod.RemoteCacheManager&lt;/code&gt;} that backs this&lt;code&gt;SpringRemoteCacheManager&lt;/code&gt;.
 * @return The {@link org.infinispan.client.hotrod.RemoteCacheManager &lt;code&gt;org.infinispan.client.hotrod.RemoteCacheManager&lt;/code&gt;} that backs this&lt;code&gt;SpringRemoteCacheManager&lt;/code&gt;
 */
</MethodComment>
            <ReturnType>RemoteCacheManager</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>start</MethodName>
            <MethodComment>/** 
 * Start the  {@link org.infinispan.client.hotrod.RemoteCacheManager &lt;code&gt;org.infinispan.client.hotrod.RemoteCacheManager&lt;/code&gt;} that backs this&lt;code&gt;SpringRemoteCacheManager&lt;/code&gt;.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.nativeCacheManager;start;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>stop</MethodName>
            <MethodComment>/** 
 * Stop the  {@link org.infinispan.client.hotrod.RemoteCacheManager &lt;code&gt;org.infinispan.client.hotrod.RemoteCacheManager&lt;/code&gt;} that backs this&lt;code&gt;SpringRemoteCacheManager&lt;/code&gt;.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.nativeCacheManager;stop;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>