<Class>
    <Id>2754</Id>
    <Package>org.infinispan.persistence.rest.configuration</Package>
    <ClassName>RestStoreConfigurationChildBuilder</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>StoreConfigurationChildBuilder</SuperInterface>
        <SuperInterface>S</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>RestStoreConfigurationChildBuilder  /** 
 * RestStoreConfigurationChildBuilder.
 * @author Tristan Tarrant
 * @since 6.0
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>connectionPool</MethodName>
            <MethodComment>/** 
 * Configures the connection pool
 */
</MethodComment>
            <ReturnType>ConnectionPoolConfigurationBuilder</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>host</MethodName>
            <MethodComment>/** 
 * The host to connect to
 */
</MethodComment>
            <ReturnType>RestStoreConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>host</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>key2StringMapper</MethodName>
            <MethodComment>/** 
 * The class name of a  {@link org.infinispan.persistence.keymappers.Key2StringMapper} to use for mapping keys to strings suitable forRESTful retrieval/storage. Defaults to  {@link WrappedByteArrayOrPrimitiveMapper}
 */
</MethodComment>
            <ReturnType>RestStoreConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key2StringMapper</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>key2StringMapper</MethodName>
            <MethodComment>/** 
 * The class of a  {@link org.infinispan.persistence.keymappers.Key2StringMapper} to use for mapping keys to strings suitable forRESTful retrieval/storage. Defaults to  {@link WrappedByteArrayOrPrimitiveMapper}
 */
</MethodComment>
            <ReturnType>RestStoreConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>klass</ParamName>
                    <ParamType>? extends MarshallingTwoWayKey2StringMapper</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>metadataHelper</MethodName>
            <MethodComment>/** 
 * The class name of a  {@link MetadataHelper} to use for managing appropriate metadata for the entriesDefaults to  {@link EmbeddedMetadataHelper}
 */
</MethodComment>
            <ReturnType>RestStoreConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>metadataHelper</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>metadataHelper</MethodName>
            <MethodComment>/** 
 * The class of a  {@link MetadataHelper} to use for managing appropriate metadata for the entriesDefaults to  {@link EmbeddedMetadataHelper}
 */
</MethodComment>
            <ReturnType>RestStoreConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>metadataHelper</ParamName>
                    <ParamType>? extends MetadataHelper</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>path</MethodName>
            <MethodComment>/** 
 * The path portion of the RESTful service. Defaults to /
 */
</MethodComment>
            <ReturnType>RestStoreConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>path</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>port</MethodName>
            <MethodComment>/** 
 * The port to connect to. Defaults to 80
 */
</MethodComment>
            <ReturnType>RestStoreConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>port</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>appendCacheNameToPath</MethodName>
            <MethodComment>/** 
 * Determines whether to append the cache name to the path URI. Defaults to false.
 */
</MethodComment>
            <ReturnType>RestStoreConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>appendCacheNameToPath</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rawValues</MethodName>
            <MethodComment>/** 
 * Reads/writes "raw" values to the REST server instead of marshalling (used by the rolling upgrades feature)
 */
</MethodComment>
            <ReturnType>RestStoreConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rawValues</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>maxContentLength</MethodName>
            <MethodComment>/** 
 * Sets the maximum content length. Defaults to 10M.
 */
</MethodComment>
            <ReturnType>RestStoreConfigurationBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>maxContentLength</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>