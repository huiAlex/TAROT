<Class>
    <Id>3969</Id>
    <Package>org.infinispan.query.remote.impl.filter</Package>
    <ClassName>ContinuousQueryResultExternalizer</ClassName>
    <SuperClass>AbstractExternalizer</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ContinuousQueryResultExternalizer  /** 
 * A 'remote' ContinuousQueryResult needs jboss-marshalling serializability between nodes when running in compat mode. It will only be marshalled using protobuf before passing it to the remote client.
 * @author anistor@redhat.com
 * @since 9.0
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>writeObject</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>output</ParamName>
                    <ParamType>ObjectOutput</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>continuousQueryResult</ParamName>
                    <ParamType>ContinuousQueryResult</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>output;writeInt;[continuousQueryResult.getResultType().ordinal()]</InnerMethodInvoke>
                <InnerMethodInvoke>output;writeInt;[continuousQueryResult.getKey().length]</InnerMethodInvoke>
                <InnerMethodInvoke>output;write;[continuousQueryResult.getKey()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readObject</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ContinuousQueryResult</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>ObjectInput</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ContinuousQueryResult.ResultType [resultType=ContinuousQueryResult.ResultType.values()[input.readInt()]]</InnerVar>
                <InnerVar>int [keyLen=input.readInt()]</InnerVar>
                <InnerVar>byte[] [key=new byte[keyLen]]</InnerVar>
                <InnerVar>byte[] [value=null]</InnerVar>
                <InnerVar>Object[] [projection=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>input;readFully;[key]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>ClassNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getId</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Integer</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTypeClasses</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Class&lt;? extends ContinuousQueryResult&gt;</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>