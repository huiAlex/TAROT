<Class>
    <Id>461</Id>
    <Package>org.infinispan.objectfilter.impl.syntax</Package>
    <ClassName>PredicateOptimisations</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>PredicateOptimisations  /** 
 * @author anistor@redhat.com
 * @since 8.0
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>PredicateOptimisations</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>comparePrimaryPredicates</MethodName>
            <MethodComment>/** 
 * Checks if two predicates are identical or opposite.
 * @param isFirstNegated  is first predicate negated?
 * @param first           the first predicate expression
 * @param isSecondNegated is second predicate negated?
 * @param second          the second predicate expression
 * @return -1 if unrelated predicates, 0 if identical predicates, 1 if opposite predicates
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>isFirstNegated</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>first</ParamName>
                    <ParamType>PrimaryPredicateExpr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isSecondNegated</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>second</ParamName>
                    <ParamType>PrimaryPredicateExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>optimizePredicates</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>children</ParamName>
                    <ParamType>BooleanExpr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isConjunction</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;removeRedundantPredicates;[children, isConjunction]</InnerMethodInvoke>
                <InnerMethodInvoke>null;optimizeOverlappingIntervalPredicates;[children, isConjunction]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeRedundantPredicates</MethodName>
            <MethodComment>/** 
 * Removes duplicate occurrences of same predicate in a conjunction or disjunction. Also detects and removes tautology and contradiction. The following translation rules are applied: &lt;ul&gt; &lt;li&gt;X || X =&gt; X&lt;/li&gt; &lt;li&gt;X &amp;&amp; X =&gt; X&lt;/li&gt; &lt;li&gt;!X || !X =&gt; !X&lt;/li&gt; &lt;li&gt;!X &amp;&amp; !X =&gt; !X&lt;/li&gt; &lt;li&gt;X || !X =&gt; TRUE (tautology)&lt;/li&gt; &lt;li&gt;X &amp;&amp; !X =&gt; FALSE (contradiction)&lt;/li&gt; &lt;/ul&gt;
 * @param children      the list of children expressions
 * @param isConjunction is the parent boolean expression a conjunction or a disjunction?
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>children</ParamName>
                    <ParamType>BooleanExpr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isConjunction</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>optimizeOverlappingIntervalPredicates</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>children</ParamName>
                    <ParamType>BooleanExpr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isConjunction</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>optimizeOverlappingIntervalPredicates</MethodName>
            <MethodComment>/** 
 * @param first
 * @param second
 * @param isConjunction
 * @return null or a replacement BooleanExpr
 */
</MethodComment>
            <ReturnType>BooleanExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>first</ParamName>
                    <ParamType>ComparisonExpr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>second</ParamName>
                    <ParamType>ComparisonExpr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isConjunction</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ConstantValueExpr [firstConstant=(ConstantValueExpr)first.getRightChild()]</InnerVar>
                <InnerVar>ConstantValueExpr [secondConstant=(ConstantValueExpr)second.getRightChild()]</InnerVar>
                <InnerVar>Comparable [firstValue=firstConstant.getConstantValue()]</InnerVar>
                <InnerVar>Comparable [secondValue=secondConstant.getConstantValue()]</InnerVar>
                <InnerVar>int [cmp=firstValue.compareTo(secondValue)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>optimizeEqAndInterval</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BooleanExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>first</ParamName>
                    <ParamType>ComparisonExpr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>second</ParamName>
                    <ParamType>ComparisonExpr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isConjunction</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cmp</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>optimizeNotEqAndInterval</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BooleanExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>first</ParamName>
                    <ParamType>ComparisonExpr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>second</ParamName>
                    <ParamType>ComparisonExpr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isConjunction</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cmp</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>