<Class>
    <Id>1700</Id>
    <Package>org.infinispan.server.test.client.memcached</Package>
    <ClassName>AbstractMemcachedLocalIT</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>AbstractMemcachedLocalIT  /** 
 * Tests for Memcached endpoint. Subclasses must provide a way to get the list of remote infinispan servers. &lt;p/&gt; Subclasses may be used in Client-Server mode or Hybrid mode where Memcached server runs as a library deployed in an application server.
 * @author Michal Linhard
 * @author Martin Gencur
 * @author Jozef Vilkolak
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>ENCODING</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>KEY_A</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>KEY_B</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>KEY_C</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>mc</FieldName>
            <FieldType>MemcachedClient</FieldType>
        </Field>
        <Field>
            <FieldName>content</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getServer</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>RemoteInfinispanServer</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMemcachedPort</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>TestSerializable</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>content</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getContent</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setUp</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;delete;[KEY_A]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;delete;[KEY_B]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;delete;[KEY_C]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNull;[mc.get(KEY_A)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNull;[mc.get(KEY_B)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNull;[mc.get(KEY_C)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>tearDown</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;delete;[KEY_A]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;delete;[KEY_B]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;delete;[KEY_C]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testSetGet</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;set;[KEY_A, "A"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["A", mc.get(KEY_A)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testSetGetNewLineChars</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;set;[KEY_A, "A\r\nA"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["A\r\nA", mc.get(KEY_A)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testSetGetObject</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>ByteArrayOutputStream [bout=new ByteArrayOutputStream()]</InnerVar>
                <InnerVar>ObjectOutputStream [oo=new ObjectOutputStream(bout)]</InnerVar>
                <InnerVar>byte[] [byteData=bout.toByteArray()]</InnerVar>
                <InnerVar>byte[] [bytesBack=mc.getBytes(KEY_A)]</InnerVar>
                <InnerVar>ObjectInputStream [oin=new ObjectInputStream(new ByteArrayInputStream(bytesBack))]</InnerVar>
                <InnerVar>TestSerializable [ts=(TestSerializable)oin.readObject()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>oo;writeObject;[new TestSerializable("CONTENT")]</InnerMethodInvoke>
                <InnerMethodInvoke>oo;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["set " + KEY_A + " 0 0 "+ byteData.length]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;write;[byteData]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;write;["\r\n".getBytes(ENCODING)]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["STORED", mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[byteData.length, bytesBack.length]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["CONTENT", ts.getContent()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testSetGetFlags</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;writeln;["set " + KEY_A + " 1234 0 1"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["A"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["STORED", mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["get " + KEY_A]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["VALUE " + KEY_A + " 1234 1", mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["A", mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["END", mc.readln()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testSecondSet</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;set;[KEY_A, "A"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["A", mc.get(KEY_A)]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;set;[KEY_A, "B"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["B", mc.get(KEY_A)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testGetMultipleKeys</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;set;[KEY_A, "A"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;set;[KEY_B, "B"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["get " + KEY_A + " "+ KEY_B]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["VALUE " + KEY_A + " 0 1", mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["A", mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["VALUE " + KEY_B + " 0 1", mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["B", mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["END", mc.readln()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testAdd</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [data="testAdd"]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;writeln;["add " + KEY_A + " 0 0 "+ data.getBytes(ENCODING).length]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;[data]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["STORED", mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[data, mc.get(KEY_A)]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["add " + KEY_A + " 0 0 "+ data.getBytes(ENCODING).length]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;[data]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["NOT_STORED", mc.readln()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testReplace</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;set;[KEY_A, "testAdd"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["testAdd", mc.get(KEY_A)]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["replace " + KEY_A + " 0 0 "+ "replacement".getBytes(ENCODING).length]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["replacement"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["STORED", mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["replacement", mc.get(KEY_A)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testReplaceNonExistent</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;writeln;["replace " + KEY_A + " 0 0 "+ "replacement".getBytes(ENCODING).length]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["replacement"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["NOT_STORED", mc.readln()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testAppend</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;set;[KEY_A, "Hello"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["Hello", mc.get(KEY_A)]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["append " + KEY_A + " 0 0 "+ ", World!".getBytes(ENCODING).length]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;[", World!"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["STORED", mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["Hello, World!", mc.get(KEY_A)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testAppendNonExistent</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;writeln;["append " + KEY_A + " 0 0 "+ ", World!".getBytes(ENCODING).length]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;[", World!"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["NOT_STORED", mc.readln()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testPrepend</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;set;[KEY_A, "World!"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["World!", mc.get(KEY_A)]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["prepend " + KEY_A + " 0 0 "+ "Hello, ".getBytes(ENCODING).length]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["Hello, "]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["STORED", mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["Hello, World!", mc.get(KEY_A)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testPrependNonExistent</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;writeln;["prepend " + KEY_A + " 0 0 "+ "Hello, ".getBytes(ENCODING).length]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["Hello, "]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["NOT_STORED", mc.readln()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testCas</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String[] [valueline=mc.readln().split(" ")]</InnerVar>
                <InnerVar>String [casId=valueline[4]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;set;[KEY_A, "A"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["gets " + KEY_A]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["VALUE", valueline[0]]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[KEY_A, valueline[1]]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["0", valueline[2]]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["1", valueline[3]]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["A", mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["END", mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["cas " + KEY_A + " 0 0 1 "+ casId]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["B"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["STORED", mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["B", mc.get(KEY_A)]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["gets " + KEY_A]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertFalse;[casId.equals(valueline[4])]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["B", mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["END", mc.readln()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testCasExists</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String[] [valueline=mc.readln().split(" ")]</InnerVar>
                <InnerVar>String [casId=valueline[4]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;set;[KEY_A, "A"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["gets " + KEY_A]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["VALUE", valueline[0]]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[KEY_A, valueline[1]]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["0", valueline[2]]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["1", valueline[3]]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["A", mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["END", mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["cas " + KEY_A + " 0 0 1 1"+ casId]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["B"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["EXISTS", mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["A", mc.get(KEY_A)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testGetNotFound</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;writeln;["get " + KEY_A]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["END", mc.readln()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testCasNotFound</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;writeln;["cas " + KEY_A + " 0 0 1 1"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["B"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["NOT_FOUND", mc.readln()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testExpTime</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;writeln;["set " + KEY_A + " 0 2 1"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["A"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["STORED", mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["A", mc.get(KEY_A)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;sleepForSecs;[2.5]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNull;[mc.get(KEY_A)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testExpTimeMaxSeconds</MethodName>
            <MethodComment>/** 
 * NOTE: This is randomly failing test on various platforms.
 * @throws Exception
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;writeln;["set " + KEY_A + " 0 2592000 1"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["A"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["STORED", mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["A", mc.get(KEY_A)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;sleepForSecs;[2]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["A", mc.get(KEY_A)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testExpTimeAbsolutePast</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;writeln;["set " + KEY_A + " 0 2592001 1"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["A"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["STORED", mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>Thread;sleep;[5]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNull;[mc.get(KEY_A)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testExpTimeAbsoluteFuture</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>long [now=mc.getServerTime()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>log;tracef;["server time: " + now]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["set " + KEY_A + " 0 "+ (now + 2)+ " 1"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["A"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["STORED", mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["A", mc.get(KEY_A)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;sleepForSecs;[2]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNull;[mc.get(KEY_A)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>key250</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [key250=""]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testKeyLonger250</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [key250=key250()]</InnerVar>
                <InnerVar>String [key251=key250 + "a"]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;delete;[key250]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[key250.length(), key250.getBytes(ENCODING).length]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[key251.length(), key251.getBytes(ENCODING).length]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;set;[key250, "A"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["A", mc.get(key250)]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["set " + key251 + " 0 0 1"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertStartsWith;[mc.readln(), "CLIENT_ERROR"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testKeyLonger250Get</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;writeln;["get " + key250() + "a"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertStartsWith;[mc.readln(), "CLIENT_ERROR"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testKeyLonger250Gets</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;writeln;["gets " + key250() + "a"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertStartsWith;[mc.readln(), "CLIENT_ERROR"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testKeyLonger250Multiget</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [key250=key250()]</InnerVar>
                <InnerVar>String [key251=key250 + "a"]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertEquals;[key250.length(), key250.getBytes(ENCODING).length]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[key251.length(), key251.getBytes(ENCODING).length]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;set;[key250, "A"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["A", mc.get(key250)]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["get " + key250 + " "+ key251]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertStartsWith;[mc.readln(), "CLIENT_ERROR"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["DELETED", mc.delete(key250)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testKeyLonger250Add</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [key250=key250()]</InnerVar>
                <InnerVar>String [key251=key250 + "a"]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;delete;[key250]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[key250.length(), key250.getBytes(ENCODING).length]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[key251.length(), key251.getBytes(ENCODING).length]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["add " + key250 + " 0 0 1"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["A"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["STORED", mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["A", mc.get(key250)]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["add " + key251 + " 0 0 1"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertStartsWith;[mc.readln(), "CLIENT_ERROR"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testKeyLonger250Replace</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;writeln;["replace " + key250() + "a 0 0 1"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertStartsWith;[mc.readln(), "CLIENT_ERROR"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testKeyLonger250Append</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;writeln;["append " + key250() + "a 0 0 1"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertStartsWith;[mc.readln(), "CLIENT_ERROR"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testKeyLonger250Prepend</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;writeln;["prepend " + key250() + "a 0 0 1"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertStartsWith;[mc.readln(), "CLIENT_ERROR"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testKeyLonger250Cas</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;writeln;["prepend " + key250() + "a 0 0 1 1"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertStartsWith;[mc.readln(), "CLIENT_ERROR"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testKeyLonger250Incr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;writeln;["incr " + key250() + "a 1"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertStartsWith;[mc.readln(), "CLIENT_ERROR"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testKeyLonger250Decr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;writeln;["decr " + key250() + "a 1"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertStartsWith;[mc.readln(), "CLIENT_ERROR"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testKeyLonger250Delete</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;writeln;["delete " + key250() + "a"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertStartsWith;[mc.readln(), "CLIENT_ERROR"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testDelete</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;set;[KEY_A, "A"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["A", mc.get(KEY_A)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["DELETED", mc.delete(KEY_A)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNull;[mc.get(KEY_A)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testDeleteNonExistent</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertEquals;["NOT_FOUND", mc.delete(KEY_A)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testIncr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;set;[KEY_A, "0"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["incr " + KEY_A + " 1"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["1", mc.readln()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testDecr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;set;[KEY_A, "1"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["decr " + KEY_A + " 1"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["0", mc.readln()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testIncrNotFound</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;writeln;["incr " + KEY_A + " 1"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["NOT_FOUND", mc.readln()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testDecrNotFound</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;writeln;["decr " + KEY_A + " 1"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["NOT_FOUND", mc.readln()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testIncr64BitMax</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;set;[KEY_A, "18446744073709551614"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["incr " + KEY_A + " 1"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["18446744073709551615", mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["incr " + KEY_A + " 1"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["0", mc.readln()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testDecrZero</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;set;[KEY_A, "0"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["decr " + KEY_A + " 1"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["0", mc.readln()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testIncrBigIncrement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;set;[KEY_A, "0"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["incr " + KEY_A + " 18446744073709551615"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["18446744073709551615", mc.readln()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testIncrBigDecrement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;set;[KEY_A, "18446744073709551615"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["decr " + KEY_A + " 18446744073709551615"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["0", mc.readln()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testUnsupportedStats</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Map&lt;String,String&gt; [stats=mc.getStats()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertEquals;[stats.get("pid"), "0"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[stats.get("pointer_size"), "0"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[stats.get("rusage_user"), "0"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[stats.get("rusage_system"), "0"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[stats.get("bytes"), "0"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[stats.get("curr_connections"), "0"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[stats.get("total_connections"), "0"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[stats.get("connection_structures"), "0"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[stats.get("auth_cmds"), "0"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[stats.get("auth_errors"), "0"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[stats.get("limit_maxbytes"), "0"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[stats.get("conn_yields"), "0"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[stats.get("threads"), "0"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testStatsBytes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Map&lt;String,String&gt; [stats=mc.getStats()]</InnerVar>
                <InnerVar>int [bytesRead=new Integer(stats.get("bytes_read"))]</InnerVar>
                <InnerVar>int [bytesWritten=new Integer(stats.get("bytes_written"))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;set;["testKey", "testValue"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;get;["testKey"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;delete;["testKey"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;["Bytes read didnt increase.", bytesRead &lt; Integer.parseInt(stats.get("bytes_read"))]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;["Bytes written didnt increase.", bytesWritten &lt; Integer.parseInt(stats.get("bytes_written"))]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testStatsTime</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Map&lt;String,String&gt; [stats=mc.getStats()]</InnerVar>
                <InnerVar>int [uptime=new Integer(stats.get("uptime"))]</InnerVar>
                <InnerVar>int [time=new Integer(stats.get("time"))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;sleepForSecs;[1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;[uptime &lt; new Integer(stats.get("uptime"))]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;[time &lt; new Integer(stats.get("time"))]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testStatsVersion</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Map&lt;String,String&gt; [stats=mc.getStats()]</InnerVar>
                <InnerVar>String [version=stats.get("version")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertNotNull;[version]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;[version.startsWith(Version.getMajorMinor())]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testStatsGetSetItemCount</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Map&lt;String,String&gt; [stats=mc.getStats()]</InnerVar>
                <InnerVar>int [cmd_set=new Integer(stats.get("cmd_set"))]</InnerVar>
                <InnerVar>int [cmd_get=new Integer(stats.get("cmd_get"))]</InnerVar>
                <InnerVar>int [get_hits=new Integer(stats.get("get_hits"))]</InnerVar>
                <InnerVar>int [get_misses=new Integer(stats.get("get_misses"))]</InnerVar>
                <InnerVar>int [curr_items=new Integer(stats.get("curr_items"))]</InnerVar>
                <InnerVar>int [total_items=new Integer(stats.get("total_items"))]</InnerVar>
                <InnerVar>int [cmd_set_new=new Integer(stats.get("cmd_set"))]</InnerVar>
                <InnerVar>int [cmd_get_new=new Integer(stats.get("cmd_get"))]</InnerVar>
                <InnerVar>int [get_hits_new=new Integer(stats.get("get_hits"))]</InnerVar>
                <InnerVar>int [get_misses_new=new Integer(stats.get("get_misses"))]</InnerVar>
                <InnerVar>int [curr_items_new=new Integer(stats.get("curr_items"))]</InnerVar>
                <InnerVar>int [total_items_new=new Integer(stats.get("total_items"))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;set;[KEY_A, "A"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["A", mc.get(KEY_A)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNull;[mc.get(KEY_B)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[cmd_get + 2, cmd_get_new]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[cmd_set + 1, cmd_set_new]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[get_hits + 1, get_hits_new]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[get_misses + 1, get_misses_new]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[curr_items + 1, curr_items_new]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[total_items + 1, total_items_new]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testStatsDelete</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Map&lt;String,String&gt; [stats=mc.getStats()]</InnerVar>
                <InnerVar>int [delete_misses=new Integer(stats.get("delete_misses"))]</InnerVar>
                <InnerVar>int [delete_hits=new Integer(stats.get("delete_hits"))]</InnerVar>
                <InnerVar>int [delete_misses_new=new Integer(stats.get("delete_misses"))]</InnerVar>
                <InnerVar>int [delete_hits_new=new Integer(stats.get("delete_hits"))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;set;[KEY_A, "A"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["DELETED", mc.delete(KEY_A)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["NOT_FOUND", mc.delete(KEY_B)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[delete_misses + 1, delete_misses_new]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[delete_hits + 1, delete_hits_new]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testStatsIncrDecr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Map&lt;String,String&gt; [stats=mc.getStats()]</InnerVar>
                <InnerVar>int [incr_misses=new Integer(stats.get("incr_misses"))]</InnerVar>
                <InnerVar>int [incr_hits=new Integer(stats.get("incr_hits"))]</InnerVar>
                <InnerVar>int [decr_misses=new Integer(stats.get("decr_misses"))]</InnerVar>
                <InnerVar>int [decr_hits=new Integer(stats.get("decr_hits"))]</InnerVar>
                <InnerVar>int [incr_misses_new=new Integer(stats.get("incr_misses"))]</InnerVar>
                <InnerVar>int [incr_hits_new=new Integer(stats.get("incr_hits"))]</InnerVar>
                <InnerVar>int [decr_misses_new=new Integer(stats.get("decr_misses"))]</InnerVar>
                <InnerVar>int [decr_hits_new=new Integer(stats.get("decr_hits"))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;set;[KEY_A, "0"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["incr " + KEY_A + " 1"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["1", mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["decr " + KEY_A + " 1"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["0", mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["incr " + KEY_B + " 1"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["NOT_FOUND", mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["decr " + KEY_B + " 1"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["NOT_FOUND", mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[incr_misses + 1, incr_misses_new]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[incr_hits + 1, incr_hits_new]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[decr_misses + 1, decr_misses_new]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[decr_hits + 1, decr_hits_new]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testStatsCas</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Map&lt;String,String&gt; [stats=mc.getStats()]</InnerVar>
                <InnerVar>int [cas_misses=new Integer(stats.get("cas_misses"))]</InnerVar>
                <InnerVar>int [cas_hits=new Integer(stats.get("cas_hits"))]</InnerVar>
                <InnerVar>String[] [valueline=mc.readln().split(" ")]</InnerVar>
                <InnerVar>String [casId=valueline[4]]</InnerVar>
                <InnerVar>int [cas_misses_new=new Integer(stats.get("cas_misses"))]</InnerVar>
                <InnerVar>int [cas_hits_new=new Integer(stats.get("cas_hits"))]</InnerVar>
                <InnerVar>int [cas_badval=new Integer(stats.get("cas_badval"))]</InnerVar>
                <InnerVar>int [cas_badval_new=new Integer(stats.get("cas_badval"))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;set;[KEY_A, "A"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["gets " + KEY_A]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["VALUE", valueline[0]]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[KEY_A, valueline[1]]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["0", valueline[2]]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["1", valueline[3]]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["A", mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["END", mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["cas " + KEY_A + " 0 0 1 "+ casId]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["B"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["STORED", mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["B", mc.get(KEY_A)]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["cas " + KEY_B + " 0 0 1 1"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["B"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["NOT_FOUND", mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[cas_misses + 1, cas_misses_new]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[cas_hits + 1, cas_hits_new]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["cas " + KEY_A + " 0 0 1 1"+ casId]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["C"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["EXISTS", mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[cas_badval + 1, cas_badval_new]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testBogusCommand</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;writeln;["boguscommand"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertStartsWith;[mc.readln(), "ERROR"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testBogusCommandArgs</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;writeln;["boguscommand arg1 arg2 arg3"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertStartsWith;[mc.readln(), "ERROR"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testBogusCommandPipeline</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;writeln;["boguscommand"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["delete " + KEY_A]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertStartsWith;[mc.readln(), "ERROR"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["NOT_FOUND", mc.readln()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testCasParsing1</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;writeln;["cas bad blah 0 0 0"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertStartsWith;[mc.readln(), "CLIENT_ERROR"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testCasParsing2</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;writeln;["cas bad 0 blah 0 0"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertStartsWith;[mc.readln(), "CLIENT_ERROR"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testCasParsing3</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;writeln;["cas bad 0 0 blah 0"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertStartsWith;[mc.readln(), "CLIENT_ERROR"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testCasParsing4</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;writeln;["cas bad 0 0 0 blah"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertStartsWith;[mc.readln(), "CLIENT_ERROR"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testCasParsing6</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;writeln;["cas bad 0 0 6"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertStartsWith;[mc.readln(), "SERVER_ERROR"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testCasUniqueIs64Bit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;writeln;["cas a 0 0 1 " + Long.MAX_VALUE]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["a"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["NOT_FOUND", mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["cas a 0 0 1 " + Long.MIN_VALUE]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["a"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["NOT_FOUND", mc.readln()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testSetFlagsRange</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;writeln;["set a 0 0 1"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["a"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["STORED", mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["set a 4294967295 0 1"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["a"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["STORED", mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["set a -1 0 1"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertStartsWith;[mc.readln(), "CLIENT_ERROR"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["set a 4294967296 0 1"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertStartsWith;[mc.readln(), "CLIENT_ERROR"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testVerbosityUnsupported</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;writeln;["verbosity 0"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertStartsWith;[mc.readln(), "CLIENT_ERROR"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testQuit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;writeln;["quit"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["", mc.readln()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testFlushAll</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;set;[KEY_A, "valA"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;set;[KEY_B, "valB"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;set;[KEY_C, "valC"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["valA", mc.get(KEY_A)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["valB", mc.get(KEY_B)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["valC", mc.get(KEY_C)]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["flush_all"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["OK", mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNull;[mc.get(KEY_A)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNull;[mc.get(KEY_B)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNull;[mc.get(KEY_C)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testFlushAllDelayed</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;set;[KEY_A, "valA"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;set;[KEY_B, "valB"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;set;[KEY_C, "valC"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["valA", mc.get(KEY_A)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["valB", mc.get(KEY_B)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["valC", mc.get(KEY_C)]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["flush_all 1"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["OK", mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["valA", mc.get(KEY_A)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["valB", mc.get(KEY_B)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["valC", mc.get(KEY_C)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;eventually;[new Condition(){
  @Override public boolean isSatisfied() throws Exception {
    return mc.get(KEY_A) == null &amp;&amp; mc.get(KEY_B) == null &amp;&amp; mc.get(KEY_C) == null;
  }
}
, 20000, 40]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isSatisfied</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testFlushAllDelayedUnixTime</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>long [t=mc.getServerTime()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;set;[KEY_A, "valA"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;set;[KEY_B, "valB"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;set;[KEY_C, "valC"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["valA", mc.get(KEY_A)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["valB", mc.get(KEY_B)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["valC", mc.get(KEY_C)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;[t &gt; 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["flush_all " + (t + 2)]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["OK", mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["valA", mc.get(KEY_A)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["valB", mc.get(KEY_B)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["valC", mc.get(KEY_C)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;eventually;[new Condition(){
  @Override public boolean isSatisfied() throws Exception {
    return mc.get(KEY_A) == null &amp;&amp; mc.get(KEY_B) == null &amp;&amp; mc.get(KEY_C) == null;
  }
}
, 20000, 40]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isSatisfied</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testPipeliningSet</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;writeln;["set " + KEY_A + " 0 0 1"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["a"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["get " + KEY_B]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["STORED", mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["END", mc.readln()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testPipeliningAdd</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;writeln;["add " + KEY_A + " 0 0 1"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["a"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["get " + KEY_B]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["STORED", mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["END", mc.readln()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testPipeliningReplace</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;set;[KEY_A, "b"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["replace " + KEY_A + " 0 0 1"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["a"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["get " + KEY_B]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["STORED", mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["END", mc.readln()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testPipeliningAppend</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;set;[KEY_A, "a"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["append " + KEY_A + " 0 0 1"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["a"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["get " + KEY_B]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["STORED", mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["END", mc.readln()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testPipeliningPrepend</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;set;[KEY_A, "a"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["prepend " + KEY_A + " 0 0 1"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["a"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["get " + KEY_B]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["STORED", mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["END", mc.readln()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testPipeliningCas</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;writeln;["cas " + KEY_A + " 0 0 1 0"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["a"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["get " + KEY_B]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["NOT_FOUND", mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["END", mc.readln()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testPipeliningGet</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;writeln;["get " + KEY_A]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["get " + KEY_B]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["END", mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["END", mc.readln()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testPipeliningGetMulti</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;writeln;["get " + KEY_A + " "+ KEY_C]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["get " + KEY_B]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["END", mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["END", mc.readln()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testPipeliningGets</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;writeln;["gets " + KEY_A]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["get " + KEY_B]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["END", mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["END", mc.readln()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testPipeliningGetsMulti</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;writeln;["gets " + KEY_A + " "+ KEY_C]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["get " + KEY_B]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["END", mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["END", mc.readln()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testPipeliningDelete</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;writeln;["delete " + KEY_A]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["get " + KEY_B]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["NOT_FOUND", mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["END", mc.readln()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testPipeliningIncr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;set;[KEY_A, "1"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["incr " + KEY_A + " 1"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["get " + KEY_B]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["2", mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["END", mc.readln()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testPipeliningDecr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;set;[KEY_A, "2"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["decr " + KEY_A + " 1"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["get " + KEY_B]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["1", mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["END", mc.readln()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testPipeliningStats</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [line=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;writeln;["stats"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["get " + KEY_B]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["END", mc.readln()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testPipeliningVersion</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;writeln;["version"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["get " + KEY_B]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotNull;[mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["END", mc.readln()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testPipeliningVerbosity</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;writeln;["verbosity 0"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["get " + KEY_B]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertStartsWith;[mc.readln(), "CLIENT_ERROR"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["END", mc.readln()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testPipeliningFlushAll</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;writeln;["flush_all"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["get " + KEY_B]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["OK", mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["END", mc.readln()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testPipeliningFlushAllDelayed</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;writeln;["flush_all 1"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["get " + KEY_B]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["OK", mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["END", mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;set;[KEY_A, "thisWillBeFlushed"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["thisWillBeFlushed", mc.get(KEY_A)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;eventually;[new Condition(){
  @Override public boolean isSatisfied() throws Exception {
    return mc.get(KEY_A) == null;
  }
}
, 20000, 40]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isSatisfied</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testStatsArgs</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;writeln;["stats args"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertStartsWith;[mc.readln(), "CLIENT_ERROR"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testNegativeItemSize</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;writeln;["set a 0 0 -1"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertStartsWith;[mc.readln(), "CLIENT_ERROR"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testNoReplySet</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;writeln;["set " + KEY_A + " 0 0 1 noreply"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["a"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["get " + KEY_B]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["END", mc.readln()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testNoReplyAdd</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;writeln;["add " + KEY_A + " 0 0 1 noreply"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["a"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["get " + KEY_B]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["END", mc.readln()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testNoReplyReplace</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;set;[KEY_A, "b"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["replace " + KEY_A + " 0 0 1 noreply"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["a"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["get " + KEY_B]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["END", mc.readln()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testNoReplyAppend</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;set;[KEY_A, "a"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["append " + KEY_A + " 0 0 1 noreply"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["a"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["get " + KEY_B]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["END", mc.readln()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testNoReplyPrepend</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;set;[KEY_A, "a"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["prepend " + KEY_A + " 0 0 1 noreply"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["a"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["get " + KEY_B]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["END", mc.readln()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testNoReplyCas</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;writeln;["cas " + KEY_A + " 0 0 1 0 noreply"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["a"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["get " + KEY_B]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["END", mc.readln()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testNoReplyDelete</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;writeln;["delete " + KEY_A + " noreply"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["get " + KEY_B]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["END", mc.readln()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testNoReplyIncr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;set;[KEY_A, "1"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["incr " + KEY_A + " 1 noreply"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["get " + KEY_B]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["END", mc.readln()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testNoReplyDecr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;set;[KEY_A, "2"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["decr " + KEY_A + " 1 noreply"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["get " + KEY_B]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["END", mc.readln()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testNoReplyFlushAll</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;writeln;["flush_all noreply"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["get " + KEY_B]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["END", mc.readln()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testNoReplyFlushAllDelayed</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mc;writeln;["flush_all 1 noreply"]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;writeln;["get " + KEY_B]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["END", mc.readln()]</InnerMethodInvoke>
                <InnerMethodInvoke>mc;set;[KEY_A, "thisWillBeFlushed"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["thisWillBeFlushed", mc.get(KEY_A)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;eventually;[new Condition(){
  @Override public boolean isSatisfied() throws Exception {
    return mc.get(KEY_A) == null;
  }
}
, 20000, 40]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isSatisfied</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>assertStartsWith</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>str</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>prefix</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertTrue;["String \"" + str + "\" doesn't start with expected prefix \""+ prefix+ "\"", str.startsWith(prefix)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>