<Class>
    <Id>1070</Id>
    <Package>org.infinispan.query.backend</Package>
    <ClassName>TransactionalEventTransactionContext</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>TransactionContext</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>TransactionalEventTransactionContext  /** 
 * This class implements the  {@link org.hibernate.search.backend.TransactionContext} interface.  It retrievestransaction context information from the  {@link javax.transaction.TransactionManager} that gets passed in as aparameter upon instantiation. &lt;p/&gt; It is used by the  {@link QueryInterceptor} to pass transaction information to a Hibernate Search {@link org.hibernate.search.backend.Work} object.&lt;p/&gt; &lt;p/&gt;
 * @author Navin Surtani
 * @see QueryInterceptor
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>transactionManager</FieldName>
            <FieldType>TransactionManager</FieldType>
        </Field>
        <Field>
            <FieldName>transactionSynchronizationRegistry</FieldName>
            <FieldType>TransactionSynchronizationRegistry</FieldType>
        </Field>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>TransactionalEventTransactionContext</MethodName>
            <MethodComment>/** 
 * Creates a new instance of NodeModifiedTransactionContext. &lt;p/&gt;
 * @param transactionManager a NodeModifiedEvent to wrap.  Should not be null.
 * @param transactionSynchronizationRegistry
 * @throws NullPointerException if event is null.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>transactionManager</ParamName>
                    <ParamType>TransactionManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>transactionSynchronizationRegistry</ParamName>
                    <ParamType>TransactionSynchronizationRegistry</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isTransactionInProgress</MethodName>
            <MethodComment>/** 
 * Returns a boolean value whether or not a transaction is in progress (JTA transaction and in this case *not* an org.hibernate transaction).
 * @return true if a transaction is in progress, false otherwise.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Transaction [transaction=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTransactionIdentifier</MethodName>
            <MethodComment>/** 
 * Returns a JTA transaction.
 * @return a JTA transaction if one is available, or a null otherwise.
 * @see javax.transaction.TransactionManager
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Transaction [transaction=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>registerSynchronization</MethodName>
            <MethodComment>/** 
 * Registers the synchronization passed in as a parameter with the ongoing transaction. &lt;p/&gt; If there is no ongoing transaction, then this method will do nothing and simply return. &lt;p/&gt;
 * @param synchronization synchronization to register.  Must not be null.
 * @throws NullPointerException if the synchronization is null.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>synchronization</ParamName>
                    <ParamType>Synchronization</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>