<Class>
    <Id>3438</Id>
    <Package>org.infinispan.client.hotrod.impl.protocol</Package>
    <ClassName>Codec</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Codec  /** 
 * A Hot Rod protocol encoder/decoder.
 * @author Galder Zamarre√±o
 * @since 5.1
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>writeHeader</MethodName>
            <MethodComment>/** 
 * Writes a request header with the given parameters to the transport and returns an updated header parameters.
 */
</MethodComment>
            <ReturnType>HeaderParams</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>transport</ParamName>
                    <ParamType>Transport</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>params</ParamName>
                    <ParamType>HeaderParams</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeClientListenerParams</MethodName>
            <MethodComment>/** 
 * Writes client listener parameters
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>transport</ParamName>
                    <ParamType>Transport</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>clientListener</ParamName>
                    <ParamType>ClientListener</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>filterFactoryParams</ParamName>
                    <ParamType>byte[][]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>converterFactoryParams</ParamName>
                    <ParamType>byte[][]</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeExpirationParams</MethodName>
            <MethodComment>/** 
 * Write lifespan/maxidle parameters.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>transport</ParamName>
                    <ParamType>Transport</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lifespan</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lifespanTimeUnit</ParamName>
                    <ParamType>TimeUnit</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>maxIdle</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>maxIdleTimeUnit</ParamName>
                    <ParamType>TimeUnit</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readHeader</MethodName>
            <MethodComment>/** 
 * Reads a response header from the transport and returns the status of the response.
 */
</MethodComment>
            <ReturnType>short</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>transport</ParamName>
                    <ParamType>Transport</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>params</ParamName>
                    <ParamType>HeaderParams</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readEvent</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClientEvent</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>transport</ParamName>
                    <ParamType>Transport</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>expectedListenerId</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>marshaller</ParamName>
                    <ParamType>Marshaller</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>whitelist</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readHeaderOrEvent</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Short</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>transport</ParamName>
                    <ParamType>Transport</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>params</ParamName>
                    <ParamType>HeaderParams</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>expectedListenerId</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>marshaller</ParamName>
                    <ParamType>Marshaller</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>whitelist</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>returnPossiblePrevValue</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>transport</ParamName>
                    <ParamType>Transport</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>status</ParamName>
                    <ParamType>short</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>flags</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>whitelist</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLog</MethodName>
            <MethodComment>/** 
 * Logger for Hot Rod client codec
 */
</MethodComment>
            <ReturnType>Log</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readUnmarshallByteArray</MethodName>
            <MethodComment>/** 
 * Read and unmarshall byte array.
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>transport</ParamName>
                    <ParamType>Transport</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>status</ParamName>
                    <ParamType>short</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>whitelist</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readAsStream</MethodName>
            <MethodComment>/** 
 * Reads a stream of data
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>transport</ParamName>
                    <ParamType>Transport</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>versionedMetadata</ParamName>
                    <ParamType>VersionedMetadata</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>afterClose</ParamName>
                    <ParamType>Runnable</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeAsStream</MethodName>
            <MethodComment>/** 
 * Writes a stream of data
 */
</MethodComment>
            <ReturnType>OutputStream</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>transport</ParamName>
                    <ParamType>Transport</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>afterClose</ParamName>
                    <ParamType>Runnable</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeClientListenerInterests</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>transport</ParamName>
                    <ParamType>Transport</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classes</ParamName>
                    <ParamType>Class&lt;? extends Annotation&gt;</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>