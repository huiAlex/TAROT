<Class>
    <Id>2994</Id>
    <Package>org.infinispan.jcache.annotation</Package>
    <ClassName>DefaultCacheKeyGenerator</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>CacheKeyGenerator</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>DefaultCacheKeyGenerator  /** 
 * Default  {@link javax.cache.annotation.CacheKeyGenerator} implementation.By default all key parameters of the intercepted method compose the {@link javax.cache.annotation.CacheKey}.
 * @author Kevin Pollet &lt;kevin.pollet@serli.com&gt; (C) 2011 SERLI
 * @author Galder Zamarre√±o
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>generateCacheKey</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>GeneratedCacheKey</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheKeyInvocationContext</ParamName>
                    <ParamType>? extends Annotation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CacheInvocationParameter[] [keyParameters=cacheKeyInvocationContext.getKeyParameters()]</InnerVar>
                <InnerVar>Object[] [keyValues=new Object[keyParameters.length]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertNotNull;[cacheKeyInvocationContext, "cacheKeyInvocationContext parameter must not be null"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>