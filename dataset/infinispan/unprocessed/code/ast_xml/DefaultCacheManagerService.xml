<Class>
    <Id>1850</Id>
    <Package>org.infinispan.hibernate.search.impl</Package>
    <ClassName>DefaultCacheManagerService</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>CacheManagerService</SuperInterface>
        <SuperInterface>Startable</SuperInterface>
        <SuperInterface>Stoppable</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>DefaultCacheManagerService  /** 
 * Provides access to Infinispan's CacheManager; one CacheManager is needed for all caches, it can be taken via JNDI or started by this ServiceProvider; in this case it will also be stopped when no longer needed.
 * @author Sanne Grinovero
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>DEFAULT_INFINISPAN_CONFIGURATION_RESOURCENAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>CACHE_MANAGER_RESOURCE_PROP</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>INFINISPAN_CONFIGURATION_RESOURCENAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>INFINISPAN_TRANSPORT_OVERRIDE_RESOURCENAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>cacheManager</FieldName>
            <FieldType>EmbeddedCacheManager</FieldType>
        </Field>
        <Field>
            <FieldName>manageCacheManager</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>start</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>properties</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>BuildContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ServiceManager [serviceManager=context.getServiceManager()]</InnerVar>
                <InnerVar>String [name=ConfigurationParseHelper.getString(properties,CACHE_MANAGER_RESOURCE_PROP,null)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>forceExternalizerRegistration</MethodName>
            <MethodComment>/** 
 * Do not rely on automatic discovery but enforce the registration of the required Externalizers.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>configurationBuilderHolder</ParamName>
                    <ParamType>ConfigurationBuilderHolder</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>SerializationConfigurationBuilder [serialization=configurationBuilderHolder.getGlobalConfigurationBuilder().serialization()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>LifecycleCallbacks.moduleExternalizers();forEach;[(i,e) -&gt; serialization.addAdvancedExternalizer(i,e)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>locateCacheManager</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>EmbeddedCacheManager</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>jndiNamespace</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>jndiProperties</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Context [ctx=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEmbeddedCacheManager</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>EmbeddedCacheManager</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>stop</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>