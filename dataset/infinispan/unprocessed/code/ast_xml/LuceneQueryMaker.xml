<Class>
    <Id>337</Id>
    <Package>org.infinispan.query.dsl.embedded.impl</Package>
    <ClassName>LuceneQueryMaker</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Visitor</SuperInterface>
        <SuperInterface>Query</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>LuceneQueryMaker  /** 
 * An *Expr  {@link Visitor} that transforms a {@link IckleParsingResult} into a {@link LuceneQueryParsingResult}. &lt;p&gt; NOTE: This is not stateless, not threadsafe, so it can only be used for a single transformation at a time.
 * @author anistor@redhat.com
 * @since 9.0
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>LUCENE_SINGLE_CHARACTER_WILDCARD</FieldName>
            <FieldType>char</FieldType>
        </Field>
        <Field>
            <FieldName>LUCENE_MULTIPLE_CHARACTERS_WILDCARD</FieldName>
            <FieldType>char</FieldType>
        </Field>
        <Field>
            <FieldName>LUCENE_WILDCARD_ESCAPE_CHARACTER</FieldName>
            <FieldType>char</FieldType>
        </Field>
        <Field>
            <FieldName>queryContextBuilder</FieldName>
            <FieldType>QueryContextBuilder</FieldType>
        </Field>
        <Field>
            <FieldName>fieldBridgeAndAnalyzerProvider</FieldName>
            <FieldType>FieldBridgeAndAnalyzerProvider</FieldType>
        </Field>
        <Field>
            <FieldName>fieldBridgeAndAnalyzerProvider</FieldName>
            <FieldType>TypeMetadata</FieldType>
        </Field>
        <Field>
            <FieldName>searchFactory</FieldName>
            <FieldType>SearchIntegrator</FieldType>
        </Field>
        <Field>
            <FieldName>namedParameters</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>namedParameters</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>queryBuilder</FieldName>
            <FieldType>QueryBuilder</FieldType>
        </Field>
        <Field>
            <FieldName>entityType</FieldName>
            <FieldType>TypeMetadata</FieldType>
        </Field>
        <Field>
            <FieldName>entityAnalyzer</FieldName>
            <FieldType>Analyzer</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getFieldBridge</MethodName>
            <MethodComment>/** 
 * Returns the field bridge to be applied when executing queries on the given property of the given entity type.
 * @param typeMetadata the entity type hosting the given property; may either identify an actual Java type or avirtual type managed by the given implementation; never  {@code null}
 * @param propertyPath an array of strings denoting the property path; never {@code null}
 * @return the field bridge to be used for querying the given property; may be {@code null}
 */
</MethodComment>
            <ReturnType>FieldBridge</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>typeMetadata</ParamName>
                    <ParamType>TypeMetadata</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>propertyPath</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAnalyzer</MethodName>
            <MethodComment>/** 
 * Get the analyzer to be used for a property.
 */
</MethodComment>
            <ReturnType>Analyzer</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>searchIntegrator</ParamName>
                    <ParamType>SearchIntegrator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>typeMetadata</ParamName>
                    <ParamType>TypeMetadata</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>propertyPath</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>overrideAnalyzers</MethodName>
            <MethodComment>/** 
 * Populate the EntityContext with the analyzers that will be used for properties.
 * @param parsingResult the parsed query
 * @param entityContext the entity context to populate
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parsingResult</ParamName>
                    <ParamType>TypeMetadata</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>entityContext</ParamName>
                    <ParamType>EntityContext</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>LuceneQueryMaker</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>searchFactory</ParamName>
                    <ParamType>SearchIntegrator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fieldBridgeAndAnalyzerProvider</ParamName>
                    <ParamType>TypeMetadata</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>transform</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>TypeMetadata</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parsingResult</ParamName>
                    <ParamType>TypeMetadata</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>namedParameters</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>targetedType</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>EntityContext [entityContext=queryContextBuilder.forEntity(targetedType)]</InnerVar>
                <InnerVar>AnalyzerReference [analyzerReference=((ExtendedSearchIntegrator)searchFactory).getAnalyzerReference(new PojoIndexedTypeIdentifier(targetedType))]</InnerVar>
                <InnerVar>Query [query=makeQuery(parsingResult.getWhereClause())]</InnerVar>
                <InnerVar>Sort [sort=makeSort(parsingResult.getSortFields())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>fieldBridgeAndAnalyzerProvider;overrideAnalyzers;[parsingResult, entityContext]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeQuery</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Query</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expr</ParamName>
                    <ParamType>BooleanExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeSort</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Sort</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sortFields</ParamName>
                    <ParamType>org.infinispan.objectfilter.SortField[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>SortField[] [fields=new SortField[sortFields.length]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Query</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fullTextOccurExpr</ParamName>
                    <ParamType>FullTextOccurExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Query [child=fullTextOccurExpr.getChild().acceptVisitor(this)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>convertOccur</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BooleanClause.Occur</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fullTextOccurExpr</ParamName>
                    <ParamType>FullTextOccurExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Query</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fullTextBoostExpr</ParamName>
                    <ParamType>FullTextBoostExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Query [child=fullTextBoostExpr.getChild().acceptVisitor(this)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isMultiTermText</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>propertyPath</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Analyzer [analyzer=fieldBridgeAndAnalyzerProvider.getAnalyzer(searchFactory,entityType,propertyPath.asArrayPath())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Query</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fullTextTermExpr</ParamName>
                    <ParamType>FullTextTermExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PropertyValueExpr [propertyValueExpr=(PropertyValueExpr)fullTextTermExpr.getChild()]</InnerVar>
                <InnerVar>String [text=fullTextTermExpr.getTerm()]</InnerVar>
                <InnerVar>int [asteriskPos=text.indexOf(LUCENE_MULTIPLE_CHARACTERS_WILDCARD)]</InnerVar>
                <InnerVar>int [questionPos=text.indexOf(LUCENE_SINGLE_CHARACTER_WILDCARD)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Query</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fullTextRegexpExpr</ParamName>
                    <ParamType>FullTextRegexpExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PropertyValueExpr [propertyValueExpr=(PropertyValueExpr)fullTextRegexpExpr.getChild()]</InnerVar>
                <InnerVar>String [regexp=fullTextRegexpExpr.getRegexp()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Query</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fullTextRangeExpr</ParamName>
                    <ParamType>FullTextRangeExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PropertyValueExpr [propertyValueExpr=(PropertyValueExpr)fullTextRangeExpr.getChild()]</InnerVar>
                <InnerVar>RangeMatchingContext [rangeMatchingContext=applyFieldBridge(true,propertyValueExpr.getPropertyPath(),queryBuilder.range().onField(propertyValueExpr.getPropertyPath().asStringPath()))]</InnerVar>
                <InnerVar>RangeTerminationExcludable [t=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Query</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>notExpr</ParamName>
                    <ParamType>NotExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Query [transformedChild=notExpr.getChild().acceptVisitor(this)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Query</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>orExpr</ParamName>
                    <ParamType>OrExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BooleanJunction&lt;BooleanJunction&gt; [booleanJunction=queryBuilder.bool()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Query</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>andExpr</ParamName>
                    <ParamType>AndExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BooleanQuery.Builder [builder=new BooleanQuery.Builder()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Query</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>isNullExpr</ParamName>
                    <ParamType>IsNullExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PropertyValueExpr [propertyValueExpr=(PropertyValueExpr)isNullExpr.getChild()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Query</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>comparisonExpr</ParamName>
                    <ParamType>ComparisonExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PropertyValueExpr [propertyValueExpr=(PropertyValueExpr)comparisonExpr.getLeftChild()]</InnerVar>
                <InnerVar>ConstantValueExpr [constantValueExpr=(ConstantValueExpr)comparisonExpr.getRightChild()]</InnerVar>
                <InnerVar>Comparable [value=constantValueExpr.getConstantValueAs(propertyValueExpr.getPrimitiveType(),namedParameters)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Query</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>betweenExpr</ParamName>
                    <ParamType>BetweenExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PropertyValueExpr [propertyValueExpr=(PropertyValueExpr)betweenExpr.getLeftChild()]</InnerVar>
                <InnerVar>ConstantValueExpr [fromValueExpr=(ConstantValueExpr)betweenExpr.getFromChild()]</InnerVar>
                <InnerVar>ConstantValueExpr [toValueExpr=(ConstantValueExpr)betweenExpr.getToChild()]</InnerVar>
                <InnerVar>Comparable [fromValue=fromValueExpr.getConstantValueAs(propertyValueExpr.getPrimitiveType(),namedParameters)]</InnerVar>
                <InnerVar>Comparable [toValue=toValueExpr.getConstantValueAs(propertyValueExpr.getPrimitiveType(),namedParameters)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Query</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>likeExpr</ParamName>
                    <ParamType>LikeExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PropertyValueExpr [propertyValueExpr=(PropertyValueExpr)likeExpr.getChild()]</InnerVar>
                <InnerVar>StringBuilder [lucenePattern=new StringBuilder(likeExpr.getPattern(namedParameters))]</InnerVar>
                <InnerVar>boolean [isEscaped=false]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Query</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>constantBooleanExpr</ParamName>
                    <ParamType>ConstantBooleanExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Query [all=queryBuilder.all().createQuery()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Query</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>constantValueExpr</ParamName>
                    <ParamType>ConstantValueExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Query</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>propertyValueExpr</ParamName>
                    <ParamType>PropertyValueExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Query</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>aggregationExpr</ParamName>
                    <ParamType>AggregationExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>applyFieldBridge</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>F</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>isAnalyzed</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>propertyPath</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>field</ParamName>
                    <ParamType>F</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>FieldBridge [fieldBridge=fieldBridgeAndAnalyzerProvider.getFieldBridge(entityType,propertyPath.asArrayPath())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>