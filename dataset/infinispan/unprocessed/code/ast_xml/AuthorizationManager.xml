<Class>
    <Id>2425</Id>
    <Package>org.infinispan.security</Package>
    <ClassName>AuthorizationManager</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>AuthorizationManager  /** 
 * The AuthorizationManager is a cache-scoped component which verifies that the  {@link Subject}associated with the current  {@link AccessControlContext}, or explicitly specified, has the requested permissions.
 * @author Tristan Tarrant
 * @since 7.0
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>checkPermission</MethodName>
            <MethodComment>/** 
 * Verifies that the  {@link Subject} associated with the current {@link AccessControlContext}has the requested permission. A  {@link SecurityException} is thrown otherwise.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>permission</ParamName>
                    <ParamType>AuthorizationPermission</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkPermission</MethodName>
            <MethodComment>/** 
 * Verifies that the  {@link Subject} has the requested permission. A {@link SecurityException} is thrown otherwise.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>subject</ParamName>
                    <ParamType>Subject</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>permission</ParamName>
                    <ParamType>AuthorizationPermission</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkPermission</MethodName>
            <MethodComment>/** 
 * Verifies that the  {@link Subject} associated with the current {@link AccessControlContext}has the requested permission and role. A  {@link SecurityException} is thrown otherwise.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>permission</ParamName>
                    <ParamType>AuthorizationPermission</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>role</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkPermission</MethodName>
            <MethodComment>/** 
 * Verifies that the  {@link Subject} has the requested permission and role.A  {@link SecurityException} is thrown otherwise.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>subject</ParamName>
                    <ParamType>Subject</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>permission</ParamName>
                    <ParamType>AuthorizationPermission</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>role</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>