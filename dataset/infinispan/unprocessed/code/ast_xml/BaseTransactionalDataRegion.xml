<Class>
    <Id>2123</Id>
    <Package>org.infinispan.hibernate.cache.impl</Package>
    <ClassName>BaseTransactionalDataRegion</ClassName>
    <SuperClass>BaseRegion</SuperClass>
    <SuperInterfaceList>
        <SuperInterface>TransactionalDataRegion</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>BaseTransactionalDataRegion  /** 
 * Support for Inifinispan  {@link org.hibernate.cache.spi.TransactionalDataRegion} implementors.
 * @author Chris Bredesen
 * @author Galder Zamarre√±o
 * @since 3.5
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>InfinispanMessageLogger</FieldType>
        </Field>
        <Field>
            <FieldName>metadata</FieldName>
            <FieldType>CacheDataDescription</FieldType>
        </Field>
        <Field>
            <FieldName>cacheKeysFactory</FieldName>
            <FieldType>CacheKeysFactory</FieldType>
        </Field>
        <Field>
            <FieldName>requiresTransaction</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>tombstoneExpiration</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>validator</FieldName>
            <FieldType>PutFromLoadValidator</FieldType>
        </Field>
        <Field>
            <FieldName>accessType</FieldName>
            <FieldType>AccessType</FieldType>
        </Field>
        <Field>
            <FieldName>strategy</FieldName>
            <FieldType>Strategy</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>BaseTransactionalDataRegion</MethodName>
            <MethodComment>/** 
 * Base transactional region constructor
 * @param cache instance to store transactional data
 * @param name of the transactional region
 * @param transactionManager
 * @param metadata for the transactional region
 * @param factory for the transactional region
 * @param cacheKeysFactory factory for cache keys
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cache</ParamName>
                    <ParamType>AdvancedCache</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>transactionManager</ParamName>
                    <ParamType>TransactionManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>metadata</ParamName>
                    <ParamType>CacheDataDescription</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>factory</ParamName>
                    <ParamType>InfinispanRegionFactory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cacheKeysFactory</ParamName>
                    <ParamType>CacheKeysFactory</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Configuration [configuration=cache.getCacheConfiguration()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isRegionAccessStrategyEnabled</MethodName>
            <MethodComment>/** 
 * @return True if this region is accessed through RegionAccessStrategy, false if it is accessed directly.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCacheDataDescription</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>CacheDataDescription</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCacheKeysFactory</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>CacheKeysFactory</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createAccessDelegate</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>AccessDelegate</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>accessType</ParamName>
                    <ParamType>AccessType</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CacheMode [cacheMode=cache.getCacheConfiguration().clustering().cacheMode()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>prepareForValidation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>prepareForVersionedEntries</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cacheMode</ParamName>
                    <ParamType>CacheMode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>VersionedCallInterceptor [versionedCallInterceptor=new VersionedCallInterceptor(this,metadata.getVersionComparator())]</InnerVar>
                <InnerVar>ComponentRegistry [compReg=cache.getComponentRegistry()]</InnerVar>
                <InnerVar>AsyncInterceptorChain [interceptorChain=cache.getAsyncInterceptorChain()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;replaceCommonInterceptors;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;replaceExpirationManager;[]</InnerMethodInvoke>
                <InnerMethodInvoke>compReg;registerComponent;[versionedCallInterceptor, VersionedCallInterceptor.class]</InnerMethodInvoke>
                <InnerMethodInvoke>interceptorChain;addInterceptorBefore;[versionedCallInterceptor, CallInterceptor.class]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>prepareForTombstones</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Configuration [configuration=cache.getCacheConfiguration()]</InnerVar>
                <InnerVar>TombstoneCallInterceptor [tombstoneCallInterceptor=new TombstoneCallInterceptor(this)]</InnerVar>
                <InnerVar>ComponentRegistry [compReg=cache.getComponentRegistry()]</InnerVar>
                <InnerVar>AsyncInterceptorChain [interceptorChain=cache.getAsyncInterceptorChain()]</InnerVar>
                <InnerVar>UnorderedReplicationLogic [replLogic=new UnorderedReplicationLogic()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;replaceCommonInterceptors;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;replaceExpirationManager;[]</InnerMethodInvoke>
                <InnerMethodInvoke>compReg;registerComponent;[tombstoneCallInterceptor, TombstoneCallInterceptor.class]</InnerMethodInvoke>
                <InnerMethodInvoke>interceptorChain;addInterceptorBefore;[tombstoneCallInterceptor, CallInterceptor.class]</InnerMethodInvoke>
                <InnerMethodInvoke>compReg;registerComponent;[replLogic, ClusteringDependentLogic.class]</InnerMethodInvoke>
                <InnerMethodInvoke>compReg;rewire;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>replaceCommonInterceptors</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>CacheMode [cacheMode=cache.getCacheConfiguration().clustering().cacheMode()]</InnerVar>
                <InnerVar>AsyncInterceptorChain [chain=cache.getAsyncInterceptorChain()]</InnerVar>
                <InnerVar>LockingInterceptor [lockingInterceptor=new LockingInterceptor()]</InnerVar>
                <InnerVar>UnorderedDistributionInterceptor [distributionInterceptor=new UnorderedDistributionInterceptor()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cache.getComponentRegistry();registerComponent;[lockingInterceptor, LockingInterceptor.class]</InnerMethodInvoke>
                <InnerMethodInvoke>cache;removeInterceptor;[NonTransactionalLockingInterceptor.class]</InnerMethodInvoke>
                <InnerMethodInvoke>cache.getComponentRegistry();registerComponent;[distributionInterceptor, UnorderedDistributionInterceptor.class]</InnerMethodInvoke>
                <InnerMethodInvoke>cache;removeInterceptor;[NonTxDistributionInterceptor.class]</InnerMethodInvoke>
                <InnerMethodInvoke>cache;removeInterceptor;[TriangleDistributionInterceptor.class]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>replaceExpirationManager</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>ExpirationManager [expirationManager=cache.getComponentRegistry().getComponent(ExpirationManager.class)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTombstoneExpiration</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLastRegionInvalidation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>runInvalidation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>inTransaction</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeEntries</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>inTransaction</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>filter</ParamName>
                    <ParamType>KeyValueFilter</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [startedTx=false]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toMap</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Map</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>contains</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Object [value=cache.get(key)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>destroy</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>CacheException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>