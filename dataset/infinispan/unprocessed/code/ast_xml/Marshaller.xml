<Class>
    <Id>162</Id>
    <Package>org.infinispan.commons.marshall</Package>
    <ClassName>Marshaller</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Marshaller  /** 
 * A marshaller is a class that is able to marshall and unmarshall objects efficiently. &lt;p/&gt; This interface is used to marshall  {@link org.infinispan.commands.ReplicableCommand}s, their parameters and their response values, as well as any other arbitraty Object &lt;--&gt; byte[] conversions, such as those used in client/server communications. &lt;p/&gt; A single instance of any implementation is shared by multiple threads, so implementations &lt;i&gt;need&lt;/i&gt; to be threadsafe, and preferably immutable.
 * @author Manik Surtani
 * @version 4.1
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>objectToByteBuffer</MethodName>
            <MethodComment>/** 
 * Marshalls an object to a byte array.  The estimatedSize parameter is a hint that can be passed in to allow for efficient sizing of the byte array before attempting to marshall the object.  The more accurate this estimate is, the less likely byte[]s will need to be resized to hold the byte stream generated by marshalling the object.
 * @param obj           object to convert to a byte array.  Must not be null.
 * @param estimatedSize an estimate of how large the resulting byte array may be
 * @return a byte array with the marshalled form of the object
 * @throws IOException if marshalling cannot complete due to some I/O error
 * @throws InterruptedException if the marshalling was interrupted. Clients should take this as a sign thatthe marshaller is no longer available, maybe due to shutdown, and so no more unmarshalling should be attempted.
 */
</MethodComment>
            <ReturnType>byte[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>obj</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>estimatedSize</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>objectToByteBuffer</MethodName>
            <MethodComment>/** 
 * Marshalls an object to a byte array.
 * @param obj object to convert to a byte array.  Must not be null.
 * @return a byte array
 * @throws IOException if marshalling cannot complete due to some I/O error
 * @throws InterruptedException if the marshalling process was interrupted. Clients should take this as a sign thatthe marshaller is no longer available, maybe due to shutdown, and so no more marshalling should be attempted.
 */
</MethodComment>
            <ReturnType>byte[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>obj</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>objectFromByteBuffer</MethodName>
            <MethodComment>/** 
 * Unmarshalls an object from a byte array.
 * @param buf byte array containing the binary representation of an object.  Must not be null.
 * @return an object
 * @throws IOException if unmarshalling cannot complete due to some I/O error
 * @throws ClassNotFoundException if the class of the object trying to unmarshall is unknown
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>buf</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>ClassNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>objectFromByteBuffer</MethodName>
            <MethodComment>/** 
 * Unmarshalls an object from a specific portion of a byte array.
 * @param buf    byte array containing the binary representation of an object.  Must not be null.
 * @param offset point in buffer to start reading
 * @param length number of bytes to consider
 * @return an object
 * @throws IOException if unmarshalling cannot complete due to some I/O error
 * @throws ClassNotFoundException if the class of the object trying to unmarshall is unknown
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>buf</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>offset</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>length</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>ClassNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>objectToBuffer</MethodName>
            <MethodComment>/** 
 * A method that returns an instance of  {@link org.infinispan.commons.io.ByteBuffer}, which allows direct access to the byte array with minimal array copying
 * @param o object to marshall
 * @throws IOException if marshalling cannot complete due to some I/O error
 * @throws InterruptedException if the marshalling process was interrupted. Clients should take this as a sign thatthe marshaller is no longer available, maybe due to shutdown, and so no more marshalling should be attempted.
 */
</MethodComment>
            <ReturnType>ByteBuffer</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>o</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isMarshallable</MethodName>
            <MethodComment>/** 
 * A method that checks whether the given object is marshallable as per the rules of this marshaller.
 * @param o object to verify whether it's marshallable or not
 * @return true if the object is marshallable, otherwise false
 * @throws Exception if while checking whether the object was serializable or not, an exception arose
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>o</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBufferSizePredictor</MethodName>
            <MethodComment>/** 
 * Returns a marshalled payload size predictor for a particular type. Accurate prediction of a type's serialized payload size helps avoid unnecessary copying and speeds up application performance.
 * @param o Object for which serialized predictor will be returned
 * @return an instance of {@link BufferSizePredictor}
 * @throws NullPointerException if o is null
 */
</MethodComment>
            <ReturnType>BufferSizePredictor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>o</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>