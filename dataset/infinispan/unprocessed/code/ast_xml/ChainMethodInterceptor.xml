<Class>
    <Id>3643</Id>
    <Package>org.infinispan.test.fwk</Package>
    <ClassName>ChainMethodInterceptor</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>IMethodInterceptor</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ChainMethodInterceptor  /** 
 * This is a workaround for TestNG limitation allowing only single IMethodInterceptor instance. Allows to use multiple  {@link TestSelector} annotations in the test class hieararchy.Filters are executed before interceptors, and only on those classes that define them. Filters should not have any side-effect and as these only remove test methods, the order of execution is not important. The interceptors on superclasses will be executed before interceptors on subclasses, but an interceptor is executed even on a class that does not define it (because the interceptor is invoked once for the whole suite).
 * @author Radim Vansa &amp;lt;rvansa@redhat.com&amp;gt;
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>intercept</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>IMethodInstance</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>methods</ParamName>
                    <ParamType>IMethodInstance</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>ITestContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Set&lt;Class&lt;? extends IMethodInterceptor&gt;&gt; [interceptorSet=new HashSet&lt;&gt;()]</InnerVar>
                <InnerVar>List&lt;Class&lt;? extends IMethodInterceptor&gt;&gt; [interceptorList=new ArrayList&lt;&gt;()]</InnerVar>
                <InnerVar>Set&lt;Class&lt;? extends Predicate&lt;IMethodInstance&gt;&gt;&gt; [filters=new HashSet&lt;&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasFilter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>filter</ParamName>
                    <ParamType>? extends Predicate</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>TestSelector [annotation=clazz.getAnnotation(TestSelector.class)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findInterceptors</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>interceptorSet</ParamName>
                    <ParamType>Class&lt;? extends IMethodInterceptor&gt;</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>interceptorList</ParamName>
                    <ParamType>Class&lt;? extends IMethodInterceptor&gt;</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>filters</ParamName>
                    <ParamType>Class&lt;? extends Predicate&lt;IMethodInstance&gt;&gt;</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>TestSelector [annotation=clazz.getAnnotation(TestSelector.class)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;findInterceptors;[clazz.getSuperclass(), interceptorSet, interceptorList, filters]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>