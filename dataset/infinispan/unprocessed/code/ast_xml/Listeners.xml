<Class>
    <Id>22</Id>
    <Package>org.infinispan.functional</Package>
    <ClassName>Listeners</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Listeners  /** 
 * Holder class for functional listener definitions.
 * @since 8.0
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>Listeners</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onCreate</MethodName>
            <MethodComment>/** 
 * Add a create event specific listener by passing in a {@link Consumer} to be called back each time a new cache entry iscreated, passing in a  {@link ReadEntryView} of that new entry.&lt;p&gt;This method is shortcut for users who are only interested in create events. If interested in multiple event types, calling {@link #add(ReadWriteListener)} is recommended instead.
 * @param f operation to be called each time a new cache entry is created
 * @return an {@link AutoCloseable} instance that can be used tounregister the listener
 */
</MethodComment>
            <ReturnType>AutoCloseable</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>f</ParamName>
                    <ParamType>ReadEntryView&lt;K,V&gt;</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onModify</MethodName>
            <MethodComment>/** 
 * Add a modify/update event specific listener by passing in a {@link BiConsumer} to be called back each time an entry ismodified or updated, passing in a  {@link ReadEntryView} of theprevious entry as first parameter, and a  {@link ReadEntryView} of thenew value as second parameter. &lt;p&gt;This method is shortcut for users who are only interested in update events. If interested in multiple event types, calling {@link #add(ReadWriteListener)} is recommended instead.
 * @param f operation to be called each time a new cache entry is modified or updated,with the first parameter the  {@link ReadEntryView} of the previousentry value, and the second parameter the new  {@link ReadEntryView}
 * @return an {@link AutoCloseable} instance that can be used tounregister the listener
 */
</MethodComment>
            <ReturnType>AutoCloseable</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>f</ParamName>
                    <ParamType>ReadEntryView&lt;K,V&gt;</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onRemove</MethodName>
            <MethodComment>/** 
 * Add a remove event specific listener by passing in a {@link Consumer} to be called back each time an entry isremoved, passing in the  {@link ReadEntryView} of the removed entry.&lt;p&gt;This method is shortcut for users who are only interested in remove events. If interested in multiple event types, calling {@link #add(ReadWriteListener)} is recommended instead.
 * @param f operation to be called each time a new cache entry is removed,with the old cached entry's  {@link ReadEntryView} as parameter.
 * @return an {@link AutoCloseable} instance that can be used tounregister the listener
 */
</MethodComment>
            <ReturnType>AutoCloseable</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>f</ParamName>
                    <ParamType>ReadEntryView&lt;K,V&gt;</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>add</MethodName>
            <MethodComment>/** 
 * Add a read-write listener, and return an  {@link AutoCloseable}instance that can be used to remove the listener registration.
 * @param l the read-write functional map event listener
 * @return an {@link AutoCloseable} instance that can be used tounregister the listener
 */
</MethodComment>
            <ReturnType>AutoCloseable</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>l</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onCreate</MethodName>
            <MethodComment>/** 
 * Entry created event callback that receives a  {@link ReadEntryView}of the created entry.
 * @param created created entry view
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>created</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onModify</MethodName>
            <MethodComment>/** 
 * Entry modify/update event callback that receives  {@link ReadEntryView}of the previous entry as first parameter, and the  {@link ReadEntryView}of the new entry.
 * @param before previous entry view
 * @param after new entry view
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>before</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>after</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onRemove</MethodName>
            <MethodComment>/** 
 * Entry removed event callback that receives a  {@link ReadEntryView}of the removed entry.
 * @param removed removed entry view
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>removed</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onWrite</MethodName>
            <MethodComment>/** 
 * Add a write event listener by passing in a  {@link Consumer} to becalled each time a cache entry is created, modified/updated or removed. &lt;p&gt;For created or modified/updated events, the {@link ReadEntryView} passed in will represent the newly storedentry, hence implementations will not be available to differentiate between created events vs modified/updated events. &lt;p&gt;For removed events,  {@link ReadEntryView} passed in will representan empty entry view, hence  {@link ReadEntryView#find()} will returnan empty  {@link java.util.Optional} instance, and{@link ReadEntryView#get()} will throw{@link java.util.NoSuchElementException}.
 * @param f operation to be called each time a cache entry is written
 * @return an {@link AutoCloseable} instance that can be used tounregister the listener
 */
</MethodComment>
            <ReturnType>AutoCloseable</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>f</ParamName>
                    <ParamType>ReadEntryView&lt;K,V&gt;</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>add</MethodName>
            <MethodComment>/** 
 * Add a write-only listener, and return an  {@link AutoCloseable}instance that can be used to remove the listener registration.
 * @param l the write-only functional map event listener
 * @return an {@link AutoCloseable} instance that can be used tounregister the listener
 */
</MethodComment>
            <ReturnType>AutoCloseable</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>l</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onWrite</MethodName>
            <MethodComment>/** 
 * Entry write event callback that receives a  {@link ReadEntryView}of the written entry. &lt;p&gt;For created or modified/updated events, the {@link ReadEntryView} passed in will represent the newly storedentry, hence implementations will not be available to differentiate between created events vs modified/updated events. &lt;p&gt;For removed events,  {@link ReadEntryView} passed in will representan empty entry view, hence  {@link ReadEntryView#find()} will returnan empty  {@link java.util.Optional} instance, and{@link ReadEntryView#get()} will throw{@link java.util.NoSuchElementException}.
 * @param write written entry view
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>write</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>