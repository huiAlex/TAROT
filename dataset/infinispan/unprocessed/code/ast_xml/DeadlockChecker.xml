<Class>
    <Id>2263</Id>
    <Package>org.infinispan.util.concurrent.locks</Package>
    <ClassName>DeadlockChecker</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>DeadlockChecker  /** 
 * An interface to implement the deadlock algorithm.
 * @author Pedro Ruivo
 * @since 8.0
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>deadlockDetected</MethodName>
            <MethodComment>/** 
 * It checks for deadlock. &lt;p&gt; It accepts two arguments: the  {@code pendingOwner} is a lock owner that tries to acquire the lock and the {@code currentOwner} is the current lock owner. If a deadlock is detected and the {@code pendingOwner} must rollback, itmust return  {@code true}. If no deadlock is found or the  {@code currentOwner} must rollback, it must return {@code false}. &lt;p&gt; This method may be invoked multiples times and in multiple threads. Thread safe is advised.
 * @param pendingOwner a lock owner that tries to acquire the lock.
 * @param currentOwner the current lock owner.
 * @return {@code true} if a deadlock is detected and the {@code pendingOwner} must rollback.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pendingOwner</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>currentOwner</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>