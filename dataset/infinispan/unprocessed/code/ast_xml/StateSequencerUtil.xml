<Class>
    <Id>3381</Id>
    <Package>org.infinispan.test.concurrent</Package>
    <ClassName>StateSequencerUtil</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>StateSequencerUtil  /** 
 * Various helper methods for working with  {@link StateSequencer}s.
 * @author Dan Berindei
 * @since 7.0
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>advanceOnInterceptor</MethodName>
            <MethodComment>/** 
 * Start decorating interceptor  {@code interceptorClass} on {@code cache} to interact with a {@code StateSequencer}.
 */
</MethodComment>
            <ReturnType>InterceptorSequencerAction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>stateSequencer</ParamName>
                    <ParamType>StateSequencer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cache</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>interceptorClass</ParamName>
                    <ParamType>? extends AsyncInterceptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>matcher</ParamName>
                    <ParamType>CommandMatcher</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>advanceOnInboundRpc</MethodName>
            <MethodComment>/** 
 * Start decorating the  {@code InboundInvocationHandler} on {@code cacheManager} to interact with a {@code StateSequencer}when a  {@code CacheRpcCommand} is received.
 */
</MethodComment>
            <ReturnType>InboundRpcSequencerAction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>stateSequencer</ParamName>
                    <ParamType>StateSequencer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cache</ParamName>
                    <ParamType>Cache</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>matcher</ParamName>
                    <ParamType>CommandMatcher</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>advanceOnOutboundRpc</MethodName>
            <MethodComment>/** 
 * Start decorating the  {@code RpcManager} on {@code cacheManager} to interact with a {@code StateSequencer} when acommand is sent.
 */
</MethodComment>
            <ReturnType>OutboundRpcSequencerAction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>stateSequencer</ParamName>
                    <ParamType>StateSequencer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cache</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>matcher</ParamName>
                    <ParamType>CommandMatcher</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>advanceOnComponentMethod</MethodName>
            <MethodComment>/** 
 * Start decorating the component  {@code componentClass} on {@code cache} to interact with a {@code StateSequencer} when amethod is called.
 */
</MethodComment>
            <ReturnType>CacheComponentSequencerAction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>stateSequencer</ParamName>
                    <ParamType>StateSequencer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cache</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>componentClass</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>matcher</ParamName>
                    <ParamType>InvocationMatcher</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>advanceOnGlobalComponentMethod</MethodName>
            <MethodComment>/** 
 * Start decorating the component  {@code componentClass} on {@code cacheManager} to interact with a {@code StateSequencer}when a method is called.
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>stateSequencer</ParamName>
                    <ParamType>StateSequencer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cacheManager</ParamName>
                    <ParamType>EmbeddedCacheManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>componentClass</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>matcher</ParamName>
                    <ParamType>InvocationMatcher</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>matchCommand</MethodName>
            <MethodComment>/** 
 * Start building a  {@link CommandMatcher}.
 */
</MethodComment>
            <ReturnType>CommandMatcherBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>commandClass</ParamName>
                    <ParamType>? extends ReplicableCommand</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>matchMethodCall</MethodName>
            <MethodComment>/** 
 * Start building a  {@link InvocationMatcher}.
 */
</MethodComment>
            <ReturnType>InvocationMatcherBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>methodName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>listCopy</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>statesUp</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>concat</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>state1</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>additionalStates</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;String&gt; [states=new ArrayList&lt;String&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>states;add;[state1]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>advanceMultiple</MethodName>
            <MethodComment>/** 
 * Advance to the every state in the  {@code states} list, in the given order, but only if {@code condition} is true.&lt;p/&gt; Does nothing if  {@code states} is {@code null} or empty.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>stateSequencer</ParamName>
                    <ParamType>StateSequencer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>condition</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>states</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>TimeoutException</ExceptionType>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>