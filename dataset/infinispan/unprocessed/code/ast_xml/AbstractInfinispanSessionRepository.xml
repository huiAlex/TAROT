<Class>
    <Id>30</Id>
    <Package>org.infinispan.spring.session</Package>
    <ClassName>AbstractInfinispanSessionRepository</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>SessionRepository</SuperInterface>
        <SuperInterface>MapSession</SuperInterface>
        <SuperInterface>ApplicationEventPublisherAware</SuperInterface>
        <SuperInterface>InitializingBean</SuperInterface>
        <SuperInterface>DisposableBean</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>AbstractInfinispanSessionRepository  /** 
 * Infinispan implementation for Spring Session with basic functionality.
 * @author Sebastian ≈Åaskawiec
 * @see &lt;a href="http://projects.spring.io/spring-session"&gt;Spring Session Web Page&lt;/a&gt;
 * @see SessionRepository
 * @see ApplicationEventPublisherAware
 * @since 9.0
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>applicationEventPublisher</FieldName>
            <FieldType>AbstractApplicationPublisherBridge</FieldType>
        </Field>
        <Field>
            <FieldName>cache</FieldName>
            <FieldType>SpringCache</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>AbstractInfinispanSessionRepository</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cache</ParamName>
                    <ParamType>SpringCache</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>eventsBridge</ParamName>
                    <ParamType>AbstractApplicationPublisherBridge</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>Objects;requireNonNull;[cache, "SpringCache can not be null"]</InnerMethodInvoke>
                <InnerMethodInvoke>Objects;requireNonNull;[eventsBridge, "EventBridge can not be null"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>afterPropertiesSet</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>applicationEventPublisher;registerListener;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>destroy</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>applicationEventPublisher;unregisterListener;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setApplicationEventPublisher</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>applicationEventPublisher</ParamName>
                    <ParamType>ApplicationEventPublisher</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.applicationEventPublisher;setApplicationEventPublisher;[applicationEventPublisher]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createSession</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>MapSession</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>MapSession [result=new MapSession()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>result;setCreationTime;[System.currentTimeMillis()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>save</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>session</ParamName>
                    <ParamType>MapSession</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cache;put;[session.getId(), session, session.getMaxInactiveIntervalInSeconds(), TimeUnit.SECONDS]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSession</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>MapSession</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>id</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSession</MethodName>
            <MethodComment>/** 
 * Returns session with optional parameter whether or not update time accessed.
 * @param id        Session ID.
 * @param updateTTL &lt;code&gt;true&lt;/code&gt; if time accessed needs to be updated.
 * @return Session or &lt;code&gt;null&lt;/code&gt; if it doesn't exist.
 */
</MethodComment>
            <ReturnType>MapSession</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>id</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>updateTTL</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>updateTTL</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>MapSession</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>session</ParamName>
                    <ParamType>MapSession</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>updateTTL</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>delete</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>id</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>applicationEventPublisher;emitSessionDeletedEvent;[id]</InnerMethodInvoke>
                <InnerMethodInvoke>cache;evict;[id]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>