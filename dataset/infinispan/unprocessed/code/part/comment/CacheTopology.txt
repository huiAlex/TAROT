/**
 * The status of a cache from a distribution/state transfer point of view.
 * 
 * The pending CH can be {@code null} if we don't have a state transfer in progress.
 * 
 * The {@code topologyId} is incremented every time the topology changes (e.g. a member leaves, state transfer
 * starts or ends).
 * The {@code rebalanceId} is not modified when the consistent hashes are updated without requiring state
 * transfer (e.g. when a member leaves).
 *
 *  *  */

/**
    * The current consistent hash.
    */

/**
    * The future consistent hash. Should be {@code null} if there is no rebalance in progress.
    */

/**
    * The union of the current and future consistent hashes. Should be {@code null} if there is no rebalance in progress.
    */

/**
    * The id of the latest started rebalance.
    */

/**
    * @return The nodes that are members in both consistent hashes (if {@code pendingCH != null},
    *    otherwise the members of the current CH).
    *     */

/**
    * @return The nodes that are active members of the cache. It should be equal to {@link #getMembers()} when the
    *    cache is available, and a strict subset if the cache is in degraded mode.
    *     */

/**
    * Read operations should always go to the "current" owners.
    */

/**
    * When there is a rebalance in progress, write operations should go to the union of the "current" and "future" owners.
    */

/**
    * Phase of the rebalance process. Using four phases guarantees these properties:
    *
    * 1. T(x+1).writeCH contains all nodes from Tx.readCH (this is the requirement for ISPN-5021)
    * 2. Tx.readCH and T(x+1).readCH has non-empty subset of nodes (that will allow no blocking for read commands
    *    && reading only entries node owns according to readCH)
    *
    * Old entries should be wiped out only after coming to the {@link #NO_REBALANCE} phase.
    */

