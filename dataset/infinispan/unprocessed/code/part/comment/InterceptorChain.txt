/**
 * Knows how to build and manage an chain of interceptors. Also in charge with invoking methods on the chain.
 *
 *  *  *  * @deprecated Since 9.0, use {@link AsyncInterceptorChain} instead. Some methods will ignore the
 * interceptors that do not extend {@link CommandInterceptor}.
 */

/**
    * Inserts the given interceptor at the specified position in the chain (o based indexing).
    *
    *     *                                  chain)
    */

/**
    * Removes the interceptor at the given postion.
    *
    *     *                                  chain)
    */

/**
    * Returns the number of interceptors in the chain.
    */

/**
    * Returns an unmofiable list with all the interceptors in sequence. If first in chain is null an empty list is
    * returned.
    */

/**
    * Removes all the occurences of supplied interceptor type from the chain.
    */

/**
    * Adds a new interceptor in list after an interceptor of a given type.
    *
    * @return true if the interceptor was added; i.e. the afterInterceptor exists
    */

/**
    * @deprecated Use {@link #addInterceptorBefore(CommandInterceptor, Class)} instead.
    */

/**
    * Adds a new interceptor in list after an interceptor of a given type.
    *
    * @return true if the interceptor was added; i.e. the afterInterceptor exists
    */

/**
    * Replaces an existing interceptor of the given type in the interceptor chain with a new interceptor instance passed as parameter.
    *
    * @param replacingInterceptor        the interceptor to add to the interceptor chain
    * @param toBeReplacedInterceptorType the type of interceptor that should be swapped with the new one
    * @return true if the interceptor was replaced
    */

/**
    * Appends at the end.
    */

/**
    * Walks the command through the interceptor chain. The received ctx is being passed in.
    *
    * Note: Reusing the context for multiple invocations is allowed. However, the two invocations
    * must not overlap, so calling {@code invoke(ctx, command)} from an interceptor is not allowed.
    * If an interceptor needs to invoke a new command through the entire chain, it must first
    * copy the invocation context with {@link InvocationContext#clone()}.
    */

/**
    * @return the first {@code CommandInterceptor} in the chain.
    * Since 9.0, there will likely be other {@link AsyncInterceptor}s before it.
    */

/**
    * Mainly used by unit tests to replace the interceptor chain with the starting point passed in.
    *
    * @param interceptor interceptor to be used as the first interceptor in the chain.
    */

/**
    * Returns all interceptors which extend the given command interceptor.
    */

/**
    * Returns all the interceptors that have the fully qualified name of their class equal with the supplied class
    * name.
    */

/**
    * Checks whether the chain contains the supplied interceptor instance.
    */

