/**
 * Controls whether when stored in memory, keys and values are stored as references to their original objects, or in
 * a serialized, binary format.  There are benefits to both approaches, but often if used in a clustered mode,
 * storing objects as binary means that the cost of serialization happens early on, and can be amortized.  Further,
 * deserialization costs are incurred lazily which improves throughput.
 * 
 * It is possible to control this on a fine-grained basis: you can choose to just store keys or values as binary, or
 * both.
 * 
 *  * @deprecated Use {@link MemoryConfiguration} instead
 */

/**
    * Enables storing both keys and values as binary.
    * @deprecated use {@link MemoryConfiguration#storageType()} instead
    */

/**
    * Enables storing keys as binary.
    * @deprecated when store as binary is enabled, keys are always stored as binary
    */

/**
    * Enables storing values as binary.
    * @deprecated when store as binary is enabled, values are always stored as binary
    */

/**
    * Enables defensive copies.
    *
    * @deprecated Store as binary configuration is always defensive now.
    */

