/**
 * An acknowledge collector for Triangle algorithm used in non-transactional caches for write operations.
 * 
 * Acknowledges are used between the owners and the originator. They signal the completion of a write operation. The
 * operation can complete successfully or not.
 * 
 * The acknowledges are valid on the same cache topology id. So, each acknowledge is tagged with the command topology
 * id. Acknowledges from previous topology id are discarded.
 * 
 * The acknowledges from the primary owner carry the return value of the operation.
 *
 *  *  */

/**
    * Creates a collector for a single key write operation.
    *
    * @param id           the id from {@link CommandInvocationId}.
    * @param backupOwners the backup owners of the key.
    * @param topologyId   the current topology id.
    */

/**
    * Creates a collector for {@link org.infinispan.commands.write.PutMapCommand}.
    *
    * @param id         the id from {@link CommandInvocationId#getId()}.
    * @param primary    a primary owners collection..
    * @param backups    a map between a backup owner and its segments affected.
    * @param topologyId the current topology id.
    */

/**
    * Acknowledges a {@link org.infinispan.commands.write.PutMapCommand} completion in the backup owner.
    *
    * @param id         the id from {@link CommandInvocationId#getId()}.
    * @param from       the backup owner.
    * @param segment    the segments affected and acknowledged.
    * @param topologyId the topology id.
    */

/**
    * Acknowledges a write operation completion in the backup owner.
    *
    * @param id         the id from {@link CommandInvocationId#getId()}.
    * @param from       the backup owner.
    * @param topologyId the topology id.
    */

/**
    * Acknowledges an exception during the operation execution.
    * 
    * The collector is completed without waiting any further acknowledges.
    *
    * @param id         the id from {@link CommandInvocationId#getId()}.
    * @param throwable  the {@link Throwable}.
    * @param topologyId the topology id.
    */

/**
    * @return the pending ids from {@link CommandInvocationId#getId()} (testing purposes only)
    */

/**
    * @param id the id from {@link CommandInvocationId#getId()}.
    * @return {@code true} if there are acknowledges pending from the backup owners, {@code false} otherwise. (testing
    * purposes only)
    */

/**
    * Notifies a change in member list.
    *
    * @param members the new cluster members.
    */

/**
       * Invoked by the timeout executor when the timeout expires.
       * 
       * It completes the future with the timeout exception.
       */

/**
       * Invoked when the future is completed, it must cleanup all task related to this collector.
       * 
       * The tasks includes removing the collector from the map and cancel the timeout task.
       */

