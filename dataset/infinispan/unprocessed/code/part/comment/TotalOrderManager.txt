/**
 * This class behaves as a synchronization point between incoming transactions (totally ordered) and between incoming
 * transactions and state transfer.
 * 
 * Main functions:
 * 
 *    
 *       ensure an order between prepares before sending them to the thread pool, i.e. non-conflicting
 * prepares can be processed concurrently;
 *    
 *    
 *       ensure that the state transfer waits for the previous delivered prepares;
 *    
 *    
 *       ensure that the prepare waits for state transfer in progress.
 *    
 * 
 *
 *  *  */

/**
    * this map is used to keep track of concurrent transactions.
    */

/**
    * It ensures the validation order for the transaction corresponding to the prepare command. This allow the prepare
    * command to be moved to a thread pool.
    *
    * @param state the total order prepare state
    */

/**
    * Release the locked key possibly unblock waiting prepares.
    *
    * @param state the state
    */

/**
    * It notifies that a state transfer is about to start.
    *
    * @param topologyId the new topology ID
    * @return the current pending prepares
    */

/**
    * It notifies the end of the state transfer possibly unblock waiting prepares.
    */

