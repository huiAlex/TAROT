/**
    * Set the system property infinispan.debugDependencies to true to enable some extra information to
    * errors generated by the component factory.
    */

/**
    * Contains class definitions of component factories that can be used to construct certain components
    */

/**
    * Retrieves the state of the registry
    *
    * @return state of the registry
    */

/**
    * Wires an object instance with dependencies annotated with the {@link Inject} annotation, creating more components
    * as needed based on the Configuration passed in if these additional components don't exist in the {@link
    * ComponentRegistry}.  Strictly for components that don't otherwise live in the registry and have a lifecycle, such
    * as Commands.
    *
    * @param target object to wire
    *     */

/**
    * Registers a component in the registry under the given type, and injects any dependencies needed.  If a component
    * of this type already exists, it is overwritten.
    *
    * @param component component to register
    * @param type      type of component
    */

/**
    * Retrieves a component factory instance capable of constructing components of a specified type.  If the factory
    * doesn't exist in the registry, one is created.
    *
    * @param componentClass type of component to construct
    * @return component factory capable of constructing such components
    */

/**
    * No such thing as a meta factory yet.  Factories are created using this method which attempts to use an empty
    * public constructor.
    *
    * @param factoryName classname of factory to be created
    * @return factory instance
    */

/**
    * registers a special "null" component that has no dependencies.
    *
    * @param name name of component to register as a null
    */

/**
    * Retrieves the configuration component.
    *
    * @return a Configuration object
    */

/**
    * Retrieves a component of a specified type from the registry, or null if it cannot be found.
    *
    * @param type type to find
    * @return component, or null
    */

/**
    * Get the component from a wrapper, properly handling null components.
    */

/**
    * Registers the default class loader.  This method *must* be called before any other components are registered,
    * typically called by bootstrap code.  Defensively, it is called in the constructor of ComponentRegistry with a null
    * parameter.
    *
    * @param loader a class loader to use by default.  If this is null, the class loader used to load this instance of
    *               ComponentRegistry is used.
    */

/**
    * Rewires components.  Used to rewire components in the CR if a cache has been stopped (moved to state TERMINATED),
    * which would (almost) empty the registry of components.  Rewiring will re-inject all dependencies so that the cache
    * can be started again.
    * 
    */

/**
    * Scans each registered component for lifecycle methods, and adds them to the appropriate lists, and then sorts them
    * by priority.
    */

/**
    * Removes any components not annotated as @SurvivesRestarts.
    */

/**
    * This starts the components in the registry, connecting to channels, starting service threads, etc.  If the component is
    * not in the {@link org.infinispan.lifecycle.ComponentStatus#INITIALIZING} state, it will be initialized first.
    */

/**
    * Stops the component and sets its status to {@link org.infinispan.lifecycle.ComponentStatus#TERMINATED} once it
    * is done.  If the component is not in the {@link org.infinispan.lifecycle.ComponentStatus#RUNNING} state, this is a
    * no-op.
    */

/**
    * Sets the cacheStatus to FAILED and re-throws the problem as one of the declared types. Converts any
    * non-RuntimeException Exception to CacheException.
    *
    * @param t throwable thrown during failure
    */

/**
    * Actual stop
    */

/**
    * Asserts whether invocations are allowed on the cache or not.  Returns true if invocations are to be
    * allowed, false otherwise.  If the origin of the call is remote and the cache status is {@link
    * org.infinispan.lifecycle.ComponentStatus#INITIALIZING}, this method will block for up to {@link
    * org.infinispan.configuration.cache.StateTransferConfiguration#timeout()} millis, checking for a valid state.
    *
    * @param originLocal true if the call originates locally (i.e., from the {@link org.infinispan.cache.impl.CacheImpl} or false
    *                    if it originates remotely, i.e., from the {@link org.infinispan.remoting.inboundhandler.InboundInvocationHandler}.
    * @return true if invocations are allowed, false otherwise.
    */

/**
    * Blocks until the current cache instance is in its {@link org.infinispan.lifecycle.ComponentStatus#RUNNING started}
    * phase. Blocks for up to {@link org.infinispan.configuration.cache.StateTransferConfiguration#timeout()} milliseconds, throwing an
    * IllegalStateException if the cache doesn't reach this state even after this maximum wait time.
    *
    *     *     */

/**
    * Returns an immutable set containing all the components that exists in the repository at this moment.
    *
    * @return a set of components
    */

/**
    * A wrapper representing a component in the registry
    */

/**
    * Wrapper to encapsulate a method along with a priority
    */

/**
       * A reference to the object instance for this component.
       */

/**
       * The name of the component
       */

/**
       * List of injection methods used to inject dependencies into the component
       */

/**
       * Injects dependencies into this component.
       */

