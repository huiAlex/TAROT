/**
 * Controls whether when stored in memory, keys and values are stored as references to their original objects, or in
 * a serialized, binary format.  There are benefits to both approaches, but often if used in a clustered mode,
 * storing objects as binary means that the cost of serialization happens early on, and can be amortized.  Further,
 * deserialization costs are incurred lazily which improves throughput.
 * 
 * It is possible to control this on a fine-grained basis: you can choose to just store keys or values as binary, or
 * both.
 * 
 *  * @deprecated Please use {@link MemoryConfigurationBuilder#storageType(StorageType)} method instead
 */

/**
    * Enables storing both keys and values as binary.
    */

/**
    * Disables storing both keys and values as binary.
    */

/**
    * Sets whether this feature is enabled or disabled.
    * @param enabled if true, this feature is enabled.  If false, it is disabled.
    */

/**
    * Specify whether keys are stored as binary or not.
    * @param storeKeysAsBinary if true, keys are stored as binary.  If false, keys are stored as object references.
    * @deprecated No longer supported, keys and values are both enabled if store as binary is
    */

/**
    * Specify whether values are stored as binary or not.
    * @param storeValuesAsBinary if true, values are stored as binary.  If false, values are stored as object references.
    * @deprecated No longer supported, keys and values are both enabled if store as binary is
    */

