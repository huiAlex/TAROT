ReuseFactory used to help reduce object allocations when converting numbers/booleans from primitive types to object types. After   and  , the ReuseFactory methods are just wrappers around standard library methods such as Integer.valueOf() and Long.valueOf().
Callers could just as easily call the corresponding valueOf() method directly, or rely on auto-boxing. Both ways use the same cache as ReuseFactory currently does, so ReuseFactory has no purpose anymore.
One exception: ReuseFactory.getZeroLenByteArray() is still used and provides value, as it avoids the allocation cost when an empty byte array is needed. The ArrayUtil class is probably just as good a home for it, so I propose we move it there and remove the ReuseFactory class.
