<Class>
    <Id>1396</Id>
    <Package>org.apache.derby.client</Package>
    <ClassName>ClientDataSourceFactory</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>ObjectFactory</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ClientDataSourceFactory  /** 
 * The data source factory for Derby client driver data sources. &lt;p&gt; This factory reconstructs a Derby data source object when it is retrieved from JNDI. References are needed since many naming services don't have the ability to store Java objects in their serialized form. When a data source object is bound in this type of naming service the {@link javax.naming.Reference} for that object is actually stored by theJNDI implementation, not the data source object itself. &lt;p&gt; A JNDI administrator is responsible for making sure that both the object factory and data source implementation classes provided by a JDBC driver vendor are accessible to the JNDI service provider at runtime. &lt;p&gt; An object factory implements the  {@link javax.naming.spi.ObjectFactory}interface. This interface contains a single method,  {@code getObjectInstance}which is called by a JNDI service provider to reconstruct an object when that object is retrieved from JNDI. A JDBC driver vendor should provide an object factory as part of their JDBC 2.0 product.
 * @see org.apache.derby.jdbc.ClientDataSource
 * @see org.apache.derby.jdbc.ClientConnectionPoolDataSource
 * @see org.apache.derby.jdbc.ClientXADataSource
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>STRING_ARG</FieldName>
            <FieldType>Class[]</FieldType>
        </Field>
        <Field>
            <FieldName>INT_ARG</FieldName>
            <FieldType>Class[]</FieldType>
        </Field>
        <Field>
            <FieldName>BOOLEAN_ARG</FieldName>
            <FieldType>Class[]</FieldType>
        </Field>
        <Field>
            <FieldName>SHORT_ARG</FieldName>
            <FieldType>Class[]</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ClientDataSourceFactory</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getObjectInstance</MethodName>
            <MethodComment>/** 
 * Reconstructs a Derby client-driver data source object from a JNDI data source reference. &lt;p&gt; The  {@code getObjectInstance} method is passed a reference thatcorresponds to the object being retrieved as its first parameter. The other parameters are optional in the case of JDBC data source objects. The object factory should use the information contained in the reference to reconstruct the data source. If for some reason, a data source object cannot be reconstructed from the reference, a value of {@code null} may be returned. This allows other object factories that maybe registered in JNDI to be tried. If an exception is thrown then no other object factories are tried.
 * @param refObj the possibly {@code null} object containing location orreference information that can be used in creating an object
 * @param name the name of this object relative to {@code nameContext}, or {@code null} if no name is specified
 * @param nameContext context relative to which the name parameter isspecified, or  {@code null} if name is relative to the defaultinitial context.
 * @param environment possibly {@code null} environment that is used increating the object.
 * @return Object created, or {@code null} if no attempt to create theobject is made.
 * @throws Exception if recreating the object fails
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>refObj</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>Name</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nameContext</ParamName>
                    <ParamType>Context</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>environment</ParamName>
                    <ParamType>Hashtable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Object [ds=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setBeanProperties</MethodName>
            <MethodComment>/** 
 * Set the Java bean properties for an object from its Reference. The Reference contains a set of StringRefAddr values with the key being the bean name and the value a String representation of the bean's value. This code looks for setXXX() method where the set method corresponds to the standard bean naming scheme and has a single parameter of type String, int, boolean or short.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ds</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ref</ParamName>
                    <ParamType>Reference</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>