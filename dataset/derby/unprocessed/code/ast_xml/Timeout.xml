<Class>
    <Id>1064</Id>
    <Package>org.apache.derby.impl.services.locks</Package>
    <ClassName>Timeout</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Timeout  /** 
 * Code to support Timeout error output.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>TABLE_AND_ROWLOCK</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>ALL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>newline</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>tc</FieldName>
            <FieldType>TransactionController</FieldType>
        </Field>
        <Field>
            <FieldName>tabInfo</FieldName>
            <FieldType>TableNameInfo</FieldType>
        </Field>
        <Field>
            <FieldName>currentLock</FieldName>
            <FieldType>Latch</FieldType>
        </Field>
        <Field>
            <FieldName>outputRow</FieldName>
            <FieldType>char[]</FieldType>
        </Field>
        <Field>
            <FieldName>sb</FieldName>
            <FieldType>StringBuffer</FieldType>
        </Field>
        <Field>
            <FieldName>currentRow</FieldName>
            <FieldType>Hashtable</FieldType>
        </Field>
        <Field>
            <FieldName>currentTime</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>lockTable</FieldName>
            <FieldType>Enumeration</FieldType>
        </Field>
        <Field>
            <FieldName>column</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>LENGTHOFTABLE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>LINE</FieldName>
            <FieldType>char</FieldType>
        </Field>
        <Field>
            <FieldName>SEPARATOR</FieldName>
            <FieldType>char</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>Timeout</MethodName>
            <MethodComment>/** 
 * Constructor
 * @param myTimeoutLock The Latch that the timeout happened on
 * @param myLockTable
 * @param time The time when the lockTable was cloned.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>myTimeoutLock</ParamName>
                    <ParamType>Latch</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>myLockTable</ParamName>
                    <ParamType>Enumeration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>time</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createException</MethodName>
            <MethodComment>/** 
 * createException creates a StandardException based on: currentLock a snapshot of the lockTable
 * @return StandardException The exception with the lockTable snapshot in it
 */
</MethodComment>
            <ReturnType>StandardException</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>StandardException [se=StandardException.newException(SQLState.LOCK_TIMEOUT_LOG,sb.toString())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>se;setReport;[StandardException.REPORT_ALWAYS]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildLockTableString</MethodName>
            <MethodComment>/** 
 * buildLockTableString creates a LockTable info String
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [i]</InnerVar>
                <InnerVar>LanguageConnectionContext [lcc=(LanguageConnectionContext)Deadlock.getContext(LanguageConnectionContext.CONTEXT_ID)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>sb;append;[newline]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;[new Date(currentTime)]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;[newline]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;[newline]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;[newline]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildException</MethodName>
            <MethodComment>/** 
 * The static entry way to get the LockTable in the system.
 * @param timeoutLock The Latch that the timeout happened on
 * @param table The lockTable
 * @param time The time when the lockTable was cloned
 * @return StandardException The exception with the lockTable snapshot in it
 */
</MethodComment>
            <ReturnType>StandardException</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>timeoutLock</ParamName>
                    <ParamType>Latch</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>table</ParamName>
                    <ParamType>Enumeration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>time</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Timeout [myTimeout=new Timeout(timeoutLock,table,time)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>table</ParamName>
                    <ParamType>Enumeration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>time</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Timeout [myTimeout=new Timeout(null,table,time)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>dumpLock</MethodName>
            <MethodComment>/** 
 * dumpLock puts information about currentLock into currentRow for output later.
 * @throws StandardException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Hashtable&lt;String,Object&gt; [attributes=new Hashtable&lt;String,Object&gt;(17)]</InnerVar>
                <InnerVar>Object [lock_type=currentLock.getQualifier()]</InnerVar>
                <InnerVar>Lockable [lockable=currentLock.getLockable()]</InnerVar>
                <InnerVar>Long [conglomId=(Long)attributes.get(VirtualLockTable.CONGLOMID)]</InnerVar>
                <InnerVar>Long [containerId=(Long)attributes.get(VirtualLockTable.CONTAINERID)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>attributes;put;[VirtualLockTable.LOCKOBJ, currentLock]</InnerMethodInvoke>
                <InnerMethodInvoke>attributes;put;[VirtualLockTable.XACTID, String.valueOf(currentLock.getCompatabilitySpace().getOwner())]</InnerMethodInvoke>
                <InnerMethodInvoke>attributes;put;[VirtualLockTable.LOCKMODE, lock_type.toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>attributes;put;[VirtualLockTable.LOCKCOUNT, Integer.toString(currentLock.getCount())]</InnerMethodInvoke>
                <InnerMethodInvoke>attributes;put;[VirtualLockTable.STATE, (currentLock.getCount() != 0) ? "GRANT" : "WAIT"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cpArray</MethodName>
            <MethodComment>/** 
 * cpArray helps built the output string (outputRow).
 * @param toCp the String to be copied into outputRow
 * @param start the start place
 * @param end the end place
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>toCp</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>start</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>end</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [i=0]</InnerVar>
                <InnerVar>int [totalAllowWrite=end - start]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>timeoutInfoHash</MethodName>
            <MethodComment>/** 
 * Copies the needed information from currentRow into the StringBuffer for output
 * @return true if successful
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String[] [myData=new String[9]]</InnerVar>
                <InnerVar>int [currentLength=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>