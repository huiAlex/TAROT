<Class>
    <Id>932</Id>
    <Package>org.apache.derby.impl.jdbc</Package>
    <ClassName>ClobUpdatableReader</ClassName>
    <SuperClass>Reader</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ClobUpdatableReader  /** 
 * {@code ClobUpdatableReader} is used to create a {@code Reader} capable ofdetecting changes to the underlying source. &lt;p&gt; This class is aware that the underlying stream can be modified and reinitializes itself if it detects any change in the stream. This invalidates the cache so the changes are reflected immediately. &lt;p&gt; The task of this class is to detect changes in the underlying Clob. Repositioning is handled by other classes.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>streamReader</FieldName>
            <FieldType>Reader</FieldType>
        </Field>
        <Field>
            <FieldName>pos</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>lastUpdateCount</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>clob</FieldName>
            <FieldType>EmbedClob</FieldType>
        </Field>
        <Field>
            <FieldName>iClob</FieldName>
            <FieldType>InternalClob</FieldType>
        </Field>
        <Field>
            <FieldName>maxPos</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>closed</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ClobUpdatableReader</MethodName>
            <MethodComment>/** 
 * Creates an updatable reader configured with initial position set to the first character in the Clob and with no imposed length limit.
 * @param clob source data
 * @throws IOException if obtaining the underlying reader fails
 * @throws SQLException if obtaining the underlying reader fails
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clob</ParamName>
                    <ParamType>EmbedClob</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ClobUpdatableReader</MethodName>
            <MethodComment>/** 
 * Creates an updatable reader configured with the specified initial position and with an imposed length limit.
 * @param clob source data
 * @param initialPos the first character that will be read
 * @param length the maximum number of characters that will read
 * @throws IOException if obtaining the underlying reader fails
 * @throws SQLException if obtaining the underlying reader fails
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clob</ParamName>
                    <ParamType>EmbedClob</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>initialPos</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>length</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>long [tmpMaxPos=initialPos + length]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>read</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [retVal=this.streamReader.read()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;updateReaderIfRequired;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>read</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cbuf</ParamName>
                    <ParamType>char[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>off</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>len</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [adjustedLen=(int)Math.min(len,maxPos - pos)]</InnerVar>
                <InnerVar>int [readCount=this.streamReader.read(cbuf,off,adjustedLen)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;updateReaderIfRequired;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>skip</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>len</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>long [adjustedLen=Math.min(len,maxPos - pos)]</InnerVar>
                <InnerVar>long [skipped=this.streamReader.skip(adjustedLen)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;updateReaderIfRequired;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>close</MethodName>
            <MethodComment>/** 
 * Closes this reader. &lt;p&gt; An  {@code IOException} will be thrown if any of the read or skip methodsare called after the reader has been closed.
 * @throws IOException if an error occurs while closing
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>updateReaderIfRequired</MethodName>
            <MethodComment>/** 
 * Updates the reader if the underlying data has been modified. &lt;p&gt; There are two cases to deal with: &lt;ol&gt; &lt;li&gt;The underlying data of the internal Clob representation has been modified.&lt;/li&gt; &lt;li&gt;The internal Clob representation has changed.&lt;/li&gt; &lt;/ol&gt; The latter case happens when a read-only Clob, represented as a stream into store, is modified by the user and a new temporary internal representation is created.
 * @throws IOException if verifying or updating the reader fails
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>