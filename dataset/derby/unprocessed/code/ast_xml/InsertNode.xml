<Class>
    <Id>2016</Id>
    <Package>org.apache.derby.impl.sql.compile</Package>
    <ClassName>InsertNode</ClassName>
    <SuperClass>DMLModGeneratedColumnsStatementNode</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>InsertNode  /** 
 * An InsertNode is the top node in a query tree for an insert statement. &lt;p&gt; After parsing, the node contains targetTableName: the target table for the insert collist: a list of column names, if specified queryexpr: the expression being inserted, either a values clause or a select form; both of these are represented via the SelectNode, potentially with a TableOperatorNode such as UnionNode above it. &lt;p&gt; After binding, the node has had the target table's descriptor located and inserted, and the queryexpr and collist have been massaged so that they are identical to the table layout.  This involves adding any default values for missing columns, and reordering the columns to match the table's ordering of them. &lt;p&gt; After optimizing, ...
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>targetColumnList</FieldName>
            <FieldType>ResultColumnList</FieldType>
        </Field>
        <Field>
            <FieldName>deferred</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>checkConstraints</FieldName>
            <FieldType>ValueNode</FieldType>
        </Field>
        <Field>
            <FieldName>hasDeferrableCheckConstraints</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>targetProperties</FieldName>
            <FieldType>Properties</FieldType>
        </Field>
        <Field>
            <FieldName>fkInfo</FieldName>
            <FieldType>FKInfo</FieldType>
        </Field>
        <Field>
            <FieldName>bulkInsert</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>bulkInsertReplace</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>orderByList</FieldName>
            <FieldType>OrderByList</FieldType>
        </Field>
        <Field>
            <FieldName>offset</FieldName>
            <FieldType>ValueNode</FieldType>
        </Field>
        <Field>
            <FieldName>fetchFirst</FieldName>
            <FieldType>ValueNode</FieldType>
        </Field>
        <Field>
            <FieldName>hasJDBClimitClause</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>InsertNode</MethodName>
            <MethodComment>/** 
 * Constructor for an InsertNode.
 * @param targetName         The name of the table/VTI to insert into
 * @param insertColumns      A ResultColumnList with the names of thecolumns to insert into.  May be null if the user did not specify the columns - in this case, the binding phase will have to figure it out.
 * @param queryExpression    The query expression that will generatethe rows to insert into the given table
 * @param matchingClause   Non-null if this DML is part of a MATCHED clause of a MERGE statement.
 * @param targetProperties   The properties specified on the target table
 * @param orderByList        The order by list for the source result set,null if no order by list
 * @param offset             The value of a &lt;result offset clause&gt; ifpresent
 * @param fetchFirst         The value of a &lt;fetch first clause&gt; if present
 * @param hasJDBClimitClause True if the offset/fetchFirst clauses comefrom JDBC limit/offset escape syntax
 * @param cm                 The context manager
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>targetName</ParamName>
                    <ParamType>QueryTreeNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>insertColumns</ParamName>
                    <ParamType>ResultColumnList</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>queryExpression</ParamName>
                    <ParamType>ResultSetNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>matchingClause</ParamName>
                    <ParamType>MatchingClauseNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>targetProperties</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>orderByList</ParamName>
                    <ParamType>OrderByList</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>offset</ParamName>
                    <ParamType>ValueNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fetchFirst</ParamName>
                    <ParamType>ValueNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>hasJDBClimitClause</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cm</ParamName>
                    <ParamType>ContextManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setTarget;[targetName]</InnerMethodInvoke>
                <InnerMethodInvoke>getResultSetNode();setInsertSource;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment>/** 
 * Convert this object to a String.  See comments in QueryTreeNode.java for how this should be done for tree printing.
 * @return	This object as a String
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>statementToString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>printSubNodes</MethodName>
            <MethodComment>/** 
 * Prints the sub-nodes of this object.  See QueryTreeNode.java for how tree printing is supposed to work.
 * @param depth		The depth of this node in the tree
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>depth</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>bindStatement</MethodName>
            <MethodComment>/** 
 * Bind this InsertNode.  This means looking up tables and columns and getting their types, and figuring out the result types of all expressions, as well as doing view resolution, permissions checking, etc. &lt;p&gt; Binding an insert will also massage the tree so that the collist and select column order/number are the same as the layout of the table in the store. 
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>FromList [fromList=new FromList(getOptimizerFactory().doJoinOrderOptimization(),getContextManager())]</InnerVar>
                <InnerVar>DataDictionary [dataDictionary=getDataDictionary()]</InnerVar>
                <InnerVar>IgnoreFilter [ignorePermissions=new IgnoreFilter()]</InnerVar>
                <InnerVar>boolean [isTableConstructor=(resultSet instanceof UnionNode &amp;&amp; ((UnionNode)resultSet).tableConstructor()) || resultSet instanceof RowResultSetNode]</InnerVar>
                <InnerVar>ResultColumnList [tempRCL=resultSet.getResultColumns()]</InnerVar>
                <InnerVar>boolean [defaultsWereReplaced=false]</InnerVar>
                <InnerVar>int [resCols=resultSet.getResultColumns().visibleSize()]</InnerVar>
                <InnerVar>DataDictionary [dd=getDataDictionary()]</InnerVar>
                <InnerVar>boolean [inOrder=true]</InnerVar>
                <InnerVar>int [numTableColumns=resultColumnList.size()]</InnerVar>
                <InnerVar>int[] [colMap=new int[numTableColumns]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>getCompilerContext();pushCurrentPrivType;[Authorizer.SELECT_PRIV]</InnerMethodInvoke>
                <InnerMethodInvoke>null;verifyTargetTable;[]</InnerMethodInvoke>
                <InnerMethodInvoke>getCompilerContext();addPrivilegeFilter;[ignorePermissions]</InnerMethodInvoke>
                <InnerMethodInvoke>null;getResultColumnList;[]</InnerMethodInvoke>
                <InnerMethodInvoke>getCompilerContext();removePrivilegeFilter;[ignorePermissions]</InnerMethodInvoke>
                <InnerMethodInvoke>resultSet;replaceOrForbidDefaults;[targetTableDescriptor, targetColumnList, isTableConstructor]</InnerMethodInvoke>
                <InnerMethodInvoke>getCompilerContext();addPrivilegeFilter;[ignorePermissions]</InnerMethodInvoke>
                <InnerMethodInvoke>resultSet;bindResultColumns;[fromList]</InnerMethodInvoke>
                <InnerMethodInvoke>null;bindOffsetFetch;[offset, fetchFirst]</InnerMethodInvoke>
                <InnerMethodInvoke>resultColumnList;checkStorableExpressions;[resultSet.getResultColumns()]</InnerMethodInvoke>
                <InnerMethodInvoke>getCompilerContext();removePrivilegeFilter;[ignorePermissions]</InnerMethodInvoke>
                <InnerMethodInvoke>getCompilerContext();popCurrentPrivType;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>enhanceAndCheckForAutoincrement</MethodName>
            <MethodComment>/** 
 * Process ResultSet column lists for projection and autoincrement. This method recursively descends the result set node tree. When it finds a simple result set, it processes any autoincrement columns in that rs by calling checkAutoIncrement. When it finds a compound result set, like a Union or a PRN, it recursively descends to the child(ren) nodes. Union nodes can arise due to multi-rows in VALUES clause), PRN nodes can arise when the set of columns being inserted is a subset of the set of columns in  the table. In addition to checking for autoincrement columns in the result set, we may need to enhance and re-order the column list to match the column list of the table we are inserting into. This work is handled by ResultsetNode.enhanceRCLForInsert. Note that, at the leaf level, we need to enhance the RCL first, then check for autoincrement columns. At the non-leaf levels, we have to enhance the RCL, but we don't have to check for autoincrement columns, since they only occur at the leaf level. This way, all ColumnDescriptor of all rows will be set properly.
 * @param resultSet			current node in the result set tree
 * @param inOrder			FALSE if the column list needs reordering
 * @param colMap            correspondence between RCLs
 * @param defaultsWereReplaced  true if DEFAULT clauses were replaced with generated expressions
 * @return a node representing the source for the insert
 * @exception StandardException Thrown on error
 */
</MethodComment>
            <ReturnType>ResultSetNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>resultSet</ParamName>
                    <ParamType>ResultSetNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>inOrder</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>colMap</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>defaultsWereReplaced</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPrivType</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>referencesSessionSchema</MethodName>
            <MethodComment>/** 
 * Return true if the node references SESSION schema tables (temporary or permanent)
 * @return	true if references SESSION schema tables, else false
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>boolean [returnValue=false]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>verifyTargetProperties</MethodName>
            <MethodComment>/** 
 * Verify that the target properties that we are interested in all hold valid values. NOTE: Any target property which is valid but cannot be supported due to a target database, etc. will be turned off quietly.
 * @param dd	The DataDictionary
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dd</ParamName>
                    <ParamType>DataDictionary</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [insertMode=targetProperties.getProperty("insertMode")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>verifyBulkInsert</MethodName>
            <MethodComment>/** 
 * Do the bind time checks to see if bulkInsert is allowed on this table.  bulkInsert is disallowed at bind time for: o  target databases o  (tables with triggers?) (It is disallowed at execution time if the table has at least 1 row in it or if it is a deferred mode insert.)
 * @param dd	The DataDictionary
 * @param mode	The insert mode
 * @return Whether or not bulkInsert is allowed.
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dd</ParamName>
                    <ParamType>DataDictionary</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mode</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeConstantAction</MethodName>
            <MethodComment>/** 
 * Compile constants that Execution will use
 * @exception StandardException		Thrown on failure
 */
</MethodComment>
            <ReturnType>ConstantAction</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getIndexedCols</MethodName>
            <MethodComment>/** 
 * Create a boolean[] to track the (0-based) columns which are indexed.
 * @return A boolean[] to track the (0-based) columns which are indexed.
 * @exception StandardException		Thrown on failure
 */
</MethodComment>
            <ReturnType>boolean[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>boolean[] [indexedCols=new boolean[targetTableDescriptor.getNumberOfColumns()]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>optimizeStatement</MethodName>
            <MethodComment>/** 
 * {@inheritDoc}&lt;p&gt; Remove any duplicate ORDER BY columns and push an ORDER BY if present down to the source result set, before calling super.optimizeStatement. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>HasTableFunctionVisitor [tableFunctionVisitor=new HasTableFunctionVisitor()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>resultSet;pushQueryExpressionSuffix;[]</InnerMethodInvoke>
                <InnerMethodInvoke>resultSet;pushOffsetFetchFirst;[offset, fetchFirst, hasJDBClimitClause]</InnerMethodInvoke>
                <InnerMethodInvoke>this;accept;[tableFunctionVisitor]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>requestBulkInsert</MethodName>
            <MethodComment>/** 
 * Request bulk insert optimization at run time.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [key="insertMode"]</InnerVar>
                <InnerVar>String [value="bulkInsert"]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generate</MethodName>
            <MethodComment>/** 
 * Code generation for insert creates an expression for: ResultSetFactory.getInsertResultSet(resultSet.generate(ps), generationClausesResult, checkConstrainResult, this )
 * @param acb	The ActivationClassBuilder for the class being built
 * @param mb the method  for the execute() method to be built
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>acb</ParamName>
                    <ParamType>ActivationClassBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mb</ParamName>
                    <ParamType>MethodBuilder</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;generateCodeForTemporaryTable;[acb]</InnerMethodInvoke>
                <InnerMethodInvoke>null;generateParameterValueSet;[acb]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStatementType</MethodName>
            <MethodComment>/** 
 * Return the type of statement, something from StatementType.
 * @return the type of statement
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStatementType</MethodName>
            <MethodComment>/** 
 * Return the statement type, where it is dependent on the targetProperties.  (insertMode = replace causes statement type to be BULK_INSERT_REPLACE.
 * @return the type of statement
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>targetProperties</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [retval=StatementType.INSERT]</InnerVar>
                <InnerVar>String [insertMode=(targetProperties == null) ? null : targetProperties.getProperty("insertMode")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAffectedIndexes</MethodName>
            <MethodComment>/** 
 * Get the list of indexes on the table being inserted into.  This is used by INSERT.  This is an optimized version of what UPDATE and DELETE use. 
 * @param td	TableDescriptor for the table being inserted intoor deleted from
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>td</ParamName>
                    <ParamType>TableDescriptor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>IndexLister [indexLister=td.getIndexLister()]</InnerVar>
                <InnerVar>ConglomerateDescriptor[] [cds=td.getConglomerateDescriptors()]</InnerVar>
                <InnerVar>CompilerContext [cc=getCompilerContext()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>acceptChildren</MethodName>
            <MethodComment>/** 
 * Accept the visitor for all visitable children of this node.
 * @param v the visitor
 * @exception StandardException on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>v</ParamName>
                    <ParamType>Visitor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>