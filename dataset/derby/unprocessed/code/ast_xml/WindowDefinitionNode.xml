<Class>
    <Id>286</Id>
    <Package>org.apache.derby.impl.sql.compile</Package>
    <ClassName>WindowDefinitionNode</ClassName>
    <SuperClass>WindowNode</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>WindowDefinitionNode  /** 
 * This class represents an OLAP window definition.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>inlined</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>orderByList</FieldName>
            <FieldType>OrderByList</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>WindowDefinitionNode</MethodName>
            <MethodComment>/** 
 * Constructor.
 * @param windowName  The window name, null if in-lined definition
 * @param orderByList ORDER BY list
 * @param cm          The context manager
 * @exception StandardException
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>windowName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>orderByList</ParamName>
                    <ParamType>OrderByList</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cm</ParamName>
                    <ParamType>ContextManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment>/** 
 * java.lang.Object override.
 * @see QueryTreeNode#toString
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>printSubNodes</MethodName>
            <MethodComment>/** 
 * QueryTreeNode override. Prints the sub-nodes of this object.
 * @see QueryTreeNode#printSubNodes
 * @param depth     The depth of this node in the tree
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>depth</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findEquivalentWindow</MethodName>
            <MethodComment>/** 
 * Used to merge equivalent window definitions.
 * @param wl list of window definitions
 * @return an existing window definition from wl, if 'this' is equivalentto a window in wl.
 */
</MethodComment>
            <ReturnType>WindowDefinitionNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>wl</ParamName>
                    <ParamType>WindowList</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isEquivalent</MethodName>
            <MethodComment>/** 
 * @return true if the window specifications are equal; no need to createmore than one window then.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>other</ParamName>
                    <ParamType>WindowDefinitionNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOrderByList</MethodName>
            <MethodComment>/** 
 * @return the order by list of this window definition if any, else null.
 */
</MethodComment>
            <ReturnType>OrderByList</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>