<Class>
    <Id>1748</Id>
    <Package>org.apache.derby.impl.load</Package>
    <ClassName>ImportReadData</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>java.security.PrivilegedExceptionAction</SuperInterface>
        <SuperInterface>Object</SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>inputFileName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>skipLines</FieldName>
            <FieldType>short</FieldType>
        </Field>
        <Field>
            <FieldName>columnWidths</FieldName>
            <FieldType>int[]</FieldType>
        </Field>
        <Field>
            <FieldName>rowWidth</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>tempString</FieldName>
            <FieldType>char[]</FieldType>
        </Field>
        <Field>
            <FieldName>numberOfCharsReadSoFar</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>bufferedReader</FieldName>
            <FieldType>BufferedReader</FieldType>
        </Field>
        <Field>
            <FieldName>START_SIZE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>currentToken</FieldName>
            <FieldType>char[]</FieldType>
        </Field>
        <Field>
            <FieldName>currentTokenMaxSize</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>foundStartDelimiter</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>totalCharsSoFar</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>positionOfNonWhiteSpaceCharInFront</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>positionOfNonWhiteSpaceCharInBack</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>lineNumber</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>fieldStartDelimiterIndex</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>fieldStopDelimiterIndex</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>stopDelimiterPosition</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>foundStartAndStopDelimiters</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>streamOpenForReading</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>DEFAULT_FORMAT_CODE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>ASCII_FIXED_FORMAT_CODE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>formatCode</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>hasColumnDefinition</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>recordSeparatorChar0</FieldName>
            <FieldType>char</FieldType>
        </Field>
        <Field>
            <FieldName>fieldSeparatorChar0</FieldName>
            <FieldType>char</FieldType>
        </Field>
        <Field>
            <FieldName>recordSepStartNotWhite</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>fieldSepStartNotWhite</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>controlFileReader</FieldName>
            <FieldType>ControlInfo</FieldType>
        </Field>
        <Field>
            <FieldName>numberOfColumns</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>columnTypes</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>fieldSeparator</FieldName>
            <FieldType>char[]</FieldType>
        </Field>
        <Field>
            <FieldName>fieldSeparatorLength</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>recordSeparator</FieldName>
            <FieldType>char[]</FieldType>
        </Field>
        <Field>
            <FieldName>recordSeparatorLength</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>nullString</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>columnDefinition</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>format</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>dataCodeset</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>fieldStartDelimiter</FieldName>
            <FieldType>char[]</FieldType>
        </Field>
        <Field>
            <FieldName>fieldStartDelimiterLength</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>fieldStopDelimiter</FieldName>
            <FieldType>char[]</FieldType>
        </Field>
        <Field>
            <FieldName>fieldStopDelimiterLength</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>hasDelimiterAtEnd</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>lobFileHandles</FieldName>
            <FieldType>ImportLobFile[]</FieldType>
        </Field>
        <Field>
            <FieldName>lobFileName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>lobOffset</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>lobLength</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>haveSep</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>loadPropertiesInfo</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ImportReadData</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>inputFileName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>controlFileReader</ParamName>
                    <ParamType>ControlInfo</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>skipLines</ParamName>
                    <ParamType>short</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;loadPropertiesInfo;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;loadMetaData;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNumberOfColumns</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ignoreFirstRow</MethodName>
            <MethodComment>/** 
 * if columndefinition is true, ignore first row. The way to do that is to just look for the record separator
 * @exception Exception if there is an error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;readNextToken;[recordSeparator, 0, recordSeparatorLength, true]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ignoreHeaderLines</MethodName>
            <MethodComment>/** 
 * if skipHeaderLines is greater than 0, ignore skipHeaderLines number of lines. The way to do that is to just look for the record separator
 * @exception Exception if there is an error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>loadColumnTypes</MethodName>
            <MethodComment>/** 
 * load the column types from the meta data line to be analyzed later in the constructor of the ImportResultSetMetaData.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [idx]</InnerVar>
                <InnerVar>String[] [metaDataArray]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;findNumberOfColumnsInARow;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;closeStream;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;openFile;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;readNextDelimitedRow;[metaDataArray]</InnerMethodInvoke>
                <InnerMethodInvoke>null;closeStream;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;openFile;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>openFile</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;realOpenFile;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>realOpenFile</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>InputStream [inputStream]</InnerVar>
                <InnerVar>java.io.Reader [rd=dataCodeset == null ? new InputStreamReader(inputStream) : new InputStreamReader(inputStream,dataCodeset)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>loadMetaData</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;openFile;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;closeStream;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>closeStream</MethodName>
            <MethodComment>/** 
 * close the input data file
 * @exception Exception if there is an error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findNumberOfColumnsInARow</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkForWhiteSpaceInFront</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkForWhiteSpaceInBack</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>boolean [onlyWhiteSpaceSoFar=true]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readTokensUntilEndOfRecord</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [nextChar]</InnerVar>
                <InnerVar>int [fieldSeparatorIndex=0]</InnerVar>
                <InnerVar>int [recordSeparatorIndex=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>lookForPassedSeparator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>delimiter</ParamName>
                    <ParamType>char[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>delimiterIndex</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>delimiterLength</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nextChar</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lookForRecordSeperator</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reCheckRestOfTheCharacters</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>startFrom</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>delimiter</ParamName>
                    <ParamType>char[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>delimiterLength</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [delimiterIndex=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>skipDoubleDelimiters</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>characterDelimiter</ParamName>
                    <ParamType>char[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [skipped=true]</InnerVar>
                <InnerVar>int [cDelLength=characterDelimiter.length]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>bufferedReader;mark;[cDelLength]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>omitLineFeed</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [nextChar=bufferedReader.read()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>bufferedReader;mark;[1]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCurrentRowNumber</MethodName>
            <MethodComment>/** 
 * returns the number of the current row
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readNextRow</MethodName>
            <MethodComment>/** 
 * the way we read the next row from input file depends on it's format
 * @exception Exception if there is an error
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>returnStringArray</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [readVal]</InnerVar>
                <InnerVar>int [idx]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readNextFixedRow</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>returnStringArray</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [readLength=0]</InnerVar>
                <InnerVar>int [totalLength=0]</InnerVar>
                <InnerVar>int [colStart=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readNextDelimitedRow</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>returnStringArray</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [upperLimit=numberOfColumns - 1]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isFieldSep</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>chrArray</ParamName>
                    <ParamType>char[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readNextToken</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>delimiter</ParamName>
                    <ParamType>char[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>delimiterIndex</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>delimiterLength</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isRecordSeperator</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [nextChar]</InnerVar>
                <InnerVar>int [returnValue]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getClobColumnFromExtFileAsString</MethodName>
            <MethodComment>/** 
 * Returns a clob columnn data stored at the specified location.
 * @param lobLocationStr location of the clob data.
 * @param colIndex number of the column. starts at 1.      
 * @exception SQLException  on any errors. 
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lobLocationStr</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>colIndex</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getClobColumnFromExtFile</MethodName>
            <MethodComment>/** 
 * Returns a clob columnn data stored at the specified location as a java.sql.Clob object. 
 * @param lobLocationStr location of the clob data.
 * @param colIndex number of the column. starts at 1. 
 * @exception SQLException  on any errors. 
 */
</MethodComment>
            <ReturnType>java.sql.Clob</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lobLocationStr</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>colIndex</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBlobColumnFromExtFile</MethodName>
            <MethodComment>/** 
 * Returns a blob columnn data stored at the specified location as a java.sql.Blob object. 
 * @param lobLocationStr location of the clob data.
 * @param colIndex number of the column. starts at 1.                   
 * @exception SQLException  on any errors. 
 */
</MethodComment>
            <ReturnType>java.sql.Blob</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lobLocationStr</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>colIndex</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;initExternalLobFile;[lobLocationStr, colIndex]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initExternalLobFile</MethodName>
            <MethodComment>/** 
 * Extract the file name, offset and length from the given lob  location and setup the file resources to read the data from  the file on first  invocaton. 
 * @param lobLocationStr location of the clob data.
 * @param colIndex number of the column. starts at 1.
 * @exception SQLException  on any errors. 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lobLocationStr</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>colIndex</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [lengthIndex=lobLocationStr.lastIndexOf(".")]</InnerVar>
                <InnerVar>int [offsetIndex=lobLocationStr.lastIndexOf(".",lengthIndex - 1)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>