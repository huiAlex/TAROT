<Class>
    <Id>1650</Id>
    <Package>org.apache.derby.iapi.types</Package>
    <ClassName>PositionedStream</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>PositionedStream  /** 
 * This interface describes a stream that is aware of its own position and can reposition itself on request. &lt;p&gt; This interface doesn't convey any information about how expensive it is for the stream to reposition itself.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>asInputStream</MethodName>
            <MethodComment>/** 
 * Returns a reference to self as an  {@code InputStream}. &lt;p&gt; This method is not allowed to return  {@code null}.
 * @return An {@code InputStream} reference to self.
 */
</MethodComment>
            <ReturnType>InputStream</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPosition</MethodName>
            <MethodComment>/** 
 * Returns the current byte position of the stream.
 * @return Current byte position of the stream.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reposition</MethodName>
            <MethodComment>/** 
 * Repositions the stream to the requested byte position. &lt;p&gt; If the repositioning fails because the stream is exhausted, most likely because of an invalid position specified by the user, the stream is reset to position zero and an  {@code EOFException} is thrown.
 * @param requestedPos requested byte position, first position is {@code 0}
 * @throws IOException if accessing the stream fails
 * @throws java.io.EOFException if the requested position is equal to orlarger than the length of the stream
 * @throws StandardException if an error occurs in store
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>requestedPos</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>