<Class>
    <Id>1762</Id>
    <Package>org.apache.derby.diag</Package>
    <ClassName>ContainedRoles</ClassName>
    <SuperClass>VTITemplate</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ContainedRoles  /** 
 * Contained roles shows all roles contained in the given identifier, or if the second argument, if given, is not 0, the inverse relation; all roles who contain the given role identifier. &lt;p&gt;To use it, query it as follows: &lt;/p&gt; &lt;pre&gt; SELECT * FROM TABLE(SUSCS_DIAG.CONTAINED_ROLES('FOO')) t; &lt;/pre&gt; &lt;pre&gt; SELECT * FROM TABLE(CONTAINED_ROLES('FOO', 1)) t; &lt;/pre&gt; &lt;p&gt;The following columns will be returned: &lt;ul&gt;&lt;li&gt;ROLEID -- VARCHAR(128) NOT NULL &lt;/ul&gt; &lt;/p&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>rci</FieldName>
            <FieldType>RoleClosureIterator</FieldType>
        </Field>
        <Field>
            <FieldName>nextRole</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>initialized</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>role</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>inverse</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>columnInfo</FieldName>
            <FieldType>ResultColumnDescriptor[]</FieldType>
        </Field>
        <Field>
            <FieldName>metadata</FieldName>
            <FieldType>ResultSetMetaData</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ContainedRoles</MethodName>
            <MethodComment>/** 
 * Constructor.
 * @param roleid The role identifier for which we want to find the set ofcontained roles (inclusive). The identifier is expected to be in SQL form (not case normal form).
 * @param inverse If != 0, use the inverse relation: find those roles whichall contain roleid (inclusive).
 * @throws SQLException This is a public API, so the internal exception iswrapped in SQLException.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>roleid</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>inverse</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ContainedRoles</MethodName>
            <MethodComment>/** 
 * Constructor.
 * @param roleid The role identifier for which we want to find the set ofcontained roles (inclusive). The identifier is expected to be in SQL form (not case normal form).
 * @throws SQLException This is a public API, so the internal exception iswrapped in SQLException.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>roleid</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>next</MethodName>
            <MethodComment>/** 
 * @see java.sql.ResultSet#next
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>close</MethodName>
            <MethodComment>/** 
 * @see java.sql.ResultSet#close
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMetaData</MethodName>
            <MethodComment>/** 
 * @see java.sql.ResultSet#getMetaData
 */
</MethodComment>
            <ReturnType>ResultSetMetaData</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getString</MethodName>
            <MethodComment>/** 
 * @see java.sql.ResultSet#getString
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>columnIndex</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>