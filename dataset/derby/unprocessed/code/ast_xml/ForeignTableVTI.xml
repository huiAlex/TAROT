<Class>
    <Id>514</Id>
    <Package>org.apache.derby.vti</Package>
    <ClassName>ForeignTableVTI</ClassName>
    <SuperClass>ForwardingVTI</SuperClass>
    <SuperInterfaceList>
        <SuperInterface>RestrictedVTI</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ForeignTableVTI  /** 
 * &lt;p&gt; This class contains a table function which can be used to bulk-import data from a foreign database. Because the table function is a RestrictedVTI, it can also be used to periodically and efficiently integrate data streams from a foreign database. &lt;/p&gt; &lt;p&gt; If you need to siphon data out of the foreign database on an ongoing basis, you can restrict the data you SELECT. Note that the local views are backed by RestrictedVTIs. That means that the actual query sent to the foreign database will only involve the columns you SELECT. In addition, the query will include the WHERE clause, provided that it is simple enough (see the javadoc for RestrictedVTI): &lt;/p&gt; &lt;p&gt; The following script shows how to use this table function: &lt;/p&gt; &lt;pre&gt; -- create a foreign database with a table in it connect 'jdbc:derby:memory:db;create=true;user=test_dbo;password=test_dbopassword'; call syscs_util.syscs_create_user( 'test_dbo', 'test_dbopassword' ); create table employee ( firstName   varchar( 50 ), lastName    varchar( 50 ), employeeID  int primary key ); insert into employee values ( 'Billy', 'Goatgruff', 1 ); insert into employee values ( 'Mary', 'Hadalittlelamb', 2 ); connect 'jdbc:derby:memory:db;shutdown=true'; -- now create the database where we will do our work connect 'jdbc:derby:memory:db1;create=true'; -- register a table function with the shape of the foreign table create function employeeFunction ( schemaName  varchar( 32672 ), tableName   varchar( 32672 ), connectionURL        varchar( 32672 ) ) returns table ( firstName   varchar( 50 ), lastName    varchar( 50 ), employeeID  int     ) language java parameter style derby_jdbc_result_set no sql external name 'org.apache.derby.vti.ForeignTableVTI.readForeignTable' ; -- create a convenience view to factor out the function parameters create view foreignEmployee as select firstName, lastName, employeeID from table ( employeeFunction ( 'TEST_DBO', 'EMPLOYEE', 'jdbc:derby:memory:db;user=test_dbo;password=test_dbopassword' ) ) s; -- now select from the view as though it were a local table select * from foreignEmployee; select lastName from foreignEmployee where employeeID = 2; &lt;/pre&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>_connections</FieldName>
            <FieldType>HashMap</FieldType>
        </Field>
        <Field>
            <FieldName>_connections</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>_foreignSchemaName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>_foreignTableName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>_connectionURL</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>_foreignConnection</FieldName>
            <FieldType>Connection</FieldType>
        </Field>
        <Field>
            <FieldName>_columnNames</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>_restriction</FieldName>
            <FieldType>Restriction</FieldType>
        </Field>
        <Field>
            <FieldName>_columnNumberMap</FieldName>
            <FieldType>int[]</FieldType>
        </Field>
        <Field>
            <FieldName>_foreignPreparedStatement</FieldName>
            <FieldType>PreparedStatement</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ForeignTableVTI</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Construct from the foreign schema and table name and a foreign connection. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>foreignSchemaName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>foreignTableName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>foreignConnection</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ForeignTableVTI</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>foreignSchemaName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>foreignTableName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>connectionURL</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readForeignTable</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Table function to read a table in a foreign database. &lt;/p&gt;
 * @param foreignSchemaName   Case-sensitive name of foreign schema
 * @param foreignTableName    Case-sensitive name of foreign table
 * @param connectionURL       URL for connecting to foreign database via DriverManager.getConnection()
 */
</MethodComment>
            <ReturnType>ForeignTableVTI</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>foreignSchemaName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>foreignTableName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>connectionURL</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>dropConnection</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Remove the cached connection to the foreign database. This method is called by ForeignDBViews.unloadTool(). &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>connectionURL</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>_connections;remove;[connectionURL]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>countConnections</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; This function is useful for verifying that the connection to the foreign database was dropped when the foreignViews tool was unloaded. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>close</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>next</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isClosed</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initScan</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>columnNames</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>restriction</ParamName>
                    <ParamType>Restriction</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [columnCount=_columnNames.length]</InnerVar>
                <InnerVar>int [foreignColumnID=1]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getForeignConnection</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Connection</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>connectionURL</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>foreignConnection</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=_connections.get(connectionURL)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeQuery</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Build the query which will be sent to the foreign database. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>StringBuilder [buffer=new StringBuilder()]</InnerVar>
                <InnerVar>int [possibleCount=_columnNames.length]</InnerVar>
                <InnerVar>int [actualCount=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>buffer;append;["select "]</InnerMethodInvoke>
                <InnerMethodInvoke>buffer;append;["\nfrom "]</InnerMethodInvoke>
                <InnerMethodInvoke>buffer;append;[delimitedID(_foreignSchemaName)]</InnerMethodInvoke>
                <InnerMethodInvoke>buffer;append;['.']</InnerMethodInvoke>
                <InnerMethodInvoke>buffer;append;[delimitedID(_foreignTableName)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>delimitedID</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>prepareStatement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PreparedStatement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conn</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>mapColumnNumber</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Map a 1-based Derby column number to a 1-based column number in the foreign query. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>derbyNumber</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>