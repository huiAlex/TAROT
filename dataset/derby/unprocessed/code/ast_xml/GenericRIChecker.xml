<Class>
    <Id>400</Id>
    <Package>org.apache.derby.impl.sql.execute</Package>
    <ClassName>GenericRIChecker</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>GenericRIChecker  /** 
 * Generic implementation of a Referential Integrity checker.  Abstract.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>fkInfo</FieldName>
            <FieldType>FKInfo</FieldType>
        </Field>
        <Field>
            <FieldName>fkDcocis</FieldName>
            <FieldType>DynamicCompiledOpenConglomInfo[]</FieldType>
        </Field>
        <Field>
            <FieldName>fkScocis</FieldName>
            <FieldType>StaticCompiledOpenConglomInfo[]</FieldType>
        </Field>
        <Field>
            <FieldName>refDcoci</FieldName>
            <FieldType>DynamicCompiledOpenConglomInfo</FieldType>
        </Field>
        <Field>
            <FieldName>refScoci</FieldName>
            <FieldType>StaticCompiledOpenConglomInfo</FieldType>
        </Field>
        <Field>
            <FieldName>tc</FieldName>
            <FieldType>TransactionController</FieldType>
        </Field>
        <Field>
            <FieldName>lcc</FieldName>
            <FieldType>LanguageConnectionContext</FieldType>
        </Field>
        <Field>
            <FieldName>deferredRowsHashTable</FieldName>
            <FieldType>BackingStoreHashtable</FieldType>
        </Field>
        <Field>
            <FieldName>scanControllers</FieldName>
            <FieldType>Hashtable</FieldType>
        </Field>
        <Field>
            <FieldName>scanControllers</FieldName>
            <FieldType>Long</FieldType>
        </Field>
        <Field>
            <FieldName>numColumns</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>identityMap</FieldName>
            <FieldType>int[]</FieldType>
        </Field>
        <Field>
            <FieldName>indexQualifierRow</FieldName>
            <FieldType>IndexRow</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>GenericRIChecker</MethodName>
            <MethodComment>/** 
 * @param lcc       the language connection context
 * @param tc		the xact controller
 * @param fkinfo	the foreign key information 
 * @exception StandardException		Thrown on failure
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lcc</ParamName>
                    <ParamType>LanguageConnectionContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tc</ParamName>
                    <ParamType>TransactionController</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fkinfo</ParamName>
                    <ParamType>FKInfo</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>doCheck</MethodName>
            <MethodComment>/** 
 * Check the validity of this row
 * @param a     The activation
 * @param row   The row to check
 * @param restrictCheckOnly {@code true} if the check is relevant only for RESTRICTEDreferential action.
 * @param deferredRowReq For referenced keys: The required number of duplicates that need to be present. Only used if  {@code postCheck==false}.
 * @exception StandardException on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>a</ParamName>
                    <ParamType>Activation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>ExecRow</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>restrictCheckOnly</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>deferredRowReq</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getScanController</MethodName>
            <MethodComment>/** 
 * Get a scan controller positioned using searchRow as the start/stop position.  The assumption is that searchRow is of the same format as the index being opened.  The scan is set up to return no columns. NOTE: We only need an instantaneous lock on the table that we are probing as we are just checking for the existence of a row.  All updaters, whether to the primary or foreign key tables, will hold an X lock on the table that they are updating and will be probing the other table, so instantaneous locks will not change the semantics. RESOLVE:  Due to the current RI implementation  we cannot always get instantaneous locks.  We will call a method to find out what kind of locking to do until the implementation changes.
 * @param conglomNumber		the particular conglomerate we are interested in
 * @param scoci
 * @param dcoci
 * @param searchRow			the row to match
 * @return                  scan controller
 * @exception StandardException on error
 */
</MethodComment>
            <ReturnType>ScanController</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conglomNumber</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>scoci</ParamName>
                    <ParamType>StaticCompiledOpenConglomInfo</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dcoci</ParamName>
                    <ParamType>DynamicCompiledOpenConglomInfo</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>searchRow</ParamName>
                    <ParamType>ExecRow</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [isoLevel=getRICheckIsolationLevel()]</InnerVar>
                <InnerVar>ScanController [scan]</InnerVar>
                <InnerVar>Long [hashKey=Long.valueOf(conglomNumber)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setupQualifierRow</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>baseRow</ParamName>
                    <ParamType>ExecRow</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DataValueDescriptor[] [indexColArray=indexQualifierRow.getRowArray()]</InnerVar>
                <InnerVar>DataValueDescriptor[] [baseColArray=baseRow.getRowArray()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isAnyFieldNull</MethodName>
            <MethodComment>/** 
 * Are any of the fields null in the row passed in.  The only fields that are checked are those corresponding to the colArray in fkInfo.
 * @param baseRow the row to check for null fields
 * @return {@code true} if any are null
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>baseRow</ParamName>
                    <ParamType>ExecRow</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DataValueDescriptor[] [baseColArray=baseRow.getRowArray()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>close</MethodName>
            <MethodComment>/** 
 * Clean up all scan controllers
 * @exception StandardException on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Enumeration&lt;ScanController&gt; [e=scanControllers.elements()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>scanControllers;clear;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRICheckIsolationLevel</MethodName>
            <MethodComment>/** 
 * Get the isolation level for the scan for the RI check. NOTE: The level will eventually be instantaneous locking once the implementation changes.
 * @return The isolation level for the scan forthe RI check.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>