<Class>
    <Id>1677</Id>
    <Package>org.apache.derby.client</Package>
    <ClassName>ClientPooledConnection</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>PooledConnection</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ClientPooledConnection  /** 
 * A physical connection to a data source, to be used for creating logical connections to the same data source.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>newPC_</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>listeners_</FieldName>
            <FieldType>ArrayList</FieldType>
        </Field>
        <Field>
            <FieldName>listeners_</FieldName>
            <FieldType>ConnectionEventListener</FieldType>
        </Field>
        <Field>
            <FieldName>eventIterators</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>physicalConnection_</FieldName>
            <FieldType>ClientConnection</FieldType>
        </Field>
        <Field>
            <FieldName>netXAPhysicalConnection_</FieldName>
            <FieldType>NetXAConnection</FieldType>
        </Field>
        <Field>
            <FieldName>statementCache</FieldName>
            <FieldType>JDBCStatementCache</FieldType>
        </Field>
        <Field>
            <FieldName>logicalConnection_</FieldName>
            <FieldType>LogicalConnection</FieldType>
        </Field>
        <Field>
            <FieldName>logWriter_</FieldName>
            <FieldType>LogWriter</FieldType>
        </Field>
        <Field>
            <FieldName>rmId_</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>statementEventListeners</FieldName>
            <FieldType>CopyOnWriteArrayList</FieldType>
        </Field>
        <Field>
            <FieldName>statementEventListeners</FieldName>
            <FieldType>StatementEventListener</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ClientPooledConnection</MethodName>
            <MethodComment>/** 
 * Constructor for non-XA pooled connections. &lt;p&gt; Using standard Java APIs, a CPDS is passed in. Arguments for user/password overrides anything on the data source.
 * @param ds data source creating this pooled connection
 * @param logWriter destination for log messages
 * @param user user name
 * @param password user password
 * @throws SQLException if creating the pooled connection fails due problemsin the database, or problems communicating with the database
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ds</ParamName>
                    <ParamType>BasicClientDataSource40</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>logWriter</ParamName>
                    <ParamType>LogWriter</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>user</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>password</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ClientPooledConnection</MethodName>
            <MethodComment>/** 
 * Constructor for XA pooled connections only. &lt;p&gt; Using standard Java APIs, a CPDS is passed in. Arguments for user/password overrides anything on the data source.
 * @param ds data source creating this pooled connection
 * @param logWriter destination for log messages
 * @param user user name
 * @param password user password
 * @param rmId resource manager id
 * @throws SQLException if creating the pooled connection fails due problemsin the database, or problems communicating with the database
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ds</ParamName>
                    <ParamType>BasicClientDataSource40</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>logWriter</ParamName>
                    <ParamType>LogWriter</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>user</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>password</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rmId</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isStatementPoolingEnabled</MethodName>
            <MethodComment>/** 
 * Tells is statement pooling is enabled or not.
 * @return {@code true} if enabled, {@code false} if disabled.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>finalize</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Throwable</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>close</MethodName>
            <MethodComment>/** 
 * Closes the physical connection to the data source and frees all associated resources.
 * @throws SQLException if closing the connection causes an error. Note thatthis connection can still be considered closed even if an error occurs.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getConnection</MethodName>
            <MethodComment>/** 
 * Creates a logical connection. &lt;p&gt; This is the standard API for getting a logical connection handle for a pooled connection. No "resettable" properties are passed, so user, password, and all other properties may not change.
 * @throws SQLException if creating a new logical connection fails
 */
</MethodComment>
            <ReturnType>Connection</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createLogicalConnection</MethodName>
            <MethodComment>/** 
 * Creates a new logical connection by performing all the required steps to be able to reuse the physical connection. &lt;p&gt;
 * @throws SqlException if there is no physical connection, or if any erroroccurs when recycling the physical connection or closing/craeting the logical connection
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addConnectionEventListener</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>listener</ParamName>
                    <ParamType>ConnectionEventListener</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>listeners_;add;[listener]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeConnectionEventListener</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>listener</ParamName>
                    <ParamType>ConnectionEventListener</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>listeners_;remove;[listener]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>recycleConnection</MethodName>
            <MethodComment>/** 
 * Inform listeners that the logical connection has been closed and that the physical connection is ready for reuse. &lt;p&gt; Not public, but needs to be visible to am.LogicalConnection
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;fireConnectionEventListeners;[null]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>informListeners</MethodName>
            <MethodComment>/** 
 * Inform listeners that an error has occured on the connection, if the error severity is high enough. &lt;p&gt; Not public, but needs to be visible to am.LogicalConnection
 * @param exception the exception that occurred on the connection
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>exception</ParamName>
                    <ParamType>SqlException</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fireConnectionEventListeners</MethodName>
            <MethodComment>/** 
 * Fire all the  {@code ConnectionEventListener}s registered. Callers must synchronize on  {@code this} to prevent others from modifying the list oflisteners.
 * @param exception the exception that caused the event, or {@code null} ifit is a close event
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>exception</ParamName>
                    <ParamType>SqlException</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nullLogicalConnection</MethodName>
            <MethodComment>/** 
 * Used by  {@code LogicalConnection.close} in some circumstances whenit disassociates itself from the pooled connection.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addStatementEventListener</MethodName>
            <MethodComment>/** 
 * Registers a StatementEventListener with this PooledConnection object. Components that wish to be informed of events associated with the PreparedStatement object created by this PooledConnection like the close or error occurred event can register a StatementEventListener with this PooledConnection object.
 * @param listener A component that implements the StatementEventListenerinterface and wants to be notified of Statement closed or or Statement error occurred events
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>listener</ParamName>
                    <ParamType>StatementEventListener</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeStatementEventListener</MethodName>
            <MethodComment>/** 
 * Removes the specified previously registered listener object from the list of components that would be informed of events with a PreparedStatement object.
 * @param listener The previously registered event listener that needs to beremoved from the list of components
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>listener</ParamName>
                    <ParamType>StatementEventListener</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>statementEventListeners;remove;[listener]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onStatementClose</MethodName>
            <MethodComment>/** 
 * Raise the statementClosed event for all the listeners when the corresponding events occurs.
 * @param statement The PreparedStatement that was closed
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>statement</ParamName>
                    <ParamType>PreparedStatement</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onStatementErrorOccurred</MethodName>
            <MethodComment>/** 
 * Raise the statementErrorOccurred event for all the listeners when the corresponding events occurs.
 * @param statement The PreparedStatement on which error occurred
 * @param sqle The SQLException associated with the error that caused theinvalidation of the PreparedStatements
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>statement</ParamName>
                    <ParamType>PreparedStatement</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sqle</ParamName>
                    <ParamType>SQLException</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>