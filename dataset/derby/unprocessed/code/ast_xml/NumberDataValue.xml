<Class>
    <Id>924</Id>
    <Package>org.apache.derby.iapi.types</Package>
    <ClassName>NumberDataValue</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>DataValueDescriptor</SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>MIN_DECIMAL_DIVIDE_SCALE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>MAX_DECIMAL_PRECISION_SCALE</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>plus</MethodName>
            <MethodComment>/** 
 * The SQL + operator.
 * @param addend1	One of the addends
 * @param addend2	The other addend
 * @param result	The result of the previous call to this method, nullif not called yet.
 * @return	The sum of the two addends
 * @exception StandardException		Thrown on error, if result is non-null then its value will be unchanged.
 */
</MethodComment>
            <ReturnType>NumberDataValue</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>addend1</ParamName>
                    <ParamType>NumberDataValue</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>addend2</ParamName>
                    <ParamType>NumberDataValue</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>result</ParamName>
                    <ParamType>NumberDataValue</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>minus</MethodName>
            <MethodComment>/** 
 * The SQL - operator.
 * @param left		The left operand
 * @param right		The right operand
 * @param result	The result of the previous call to this method, nullif not called yet.
 * @return	left - right
 * @exception StandardException		Thrown on error, if result is non-null then its value will be unchanged.
 */
</MethodComment>
            <ReturnType>NumberDataValue</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>left</ParamName>
                    <ParamType>NumberDataValue</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>right</ParamName>
                    <ParamType>NumberDataValue</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>result</ParamName>
                    <ParamType>NumberDataValue</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>times</MethodName>
            <MethodComment>/** 
 * The SQL * operator.
 * @param left		The left operand
 * @param right		The right operand
 * @param result	The result of the previous call to this method, nullif not called yet.
 * @return	left * right
 * @exception StandardException		Thrown on error, if result is non-null then its value will be unchanged.
 */
</MethodComment>
            <ReturnType>NumberDataValue</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>left</ParamName>
                    <ParamType>NumberDataValue</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>right</ParamName>
                    <ParamType>NumberDataValue</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>result</ParamName>
                    <ParamType>NumberDataValue</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>divide</MethodName>
            <MethodComment>/** 
 * The SQL / operator.
 * @param dividend		The numerator
 * @param divisor		The denominator
 * @param result		The result of the previous call to this method, nullif not called yet.
 * @return	dividend / divisor
 * @exception StandardException		Thrown on error, if result is non-null then its value will be unchanged.
 */
</MethodComment>
            <ReturnType>NumberDataValue</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dividend</ParamName>
                    <ParamType>NumberDataValue</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>divisor</ParamName>
                    <ParamType>NumberDataValue</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>result</ParamName>
                    <ParamType>NumberDataValue</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>divide</MethodName>
            <MethodComment>/** 
 * The SQL / operator.
 * @param dividend		The numerator
 * @param divisor		The denominator
 * @param result		The result of the previous call to this method, nullif not called yet.
 * @param scale			The scale of the result, for decimal type.  If passin value &amp;lt; 0, can calculate it dynamically.
 * @return	dividend / divisor
 * @exception StandardException		Thrown on error, if result is non-null then its value will be unchanged.
 */
</MethodComment>
            <ReturnType>NumberDataValue</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dividend</ParamName>
                    <ParamType>NumberDataValue</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>divisor</ParamName>
                    <ParamType>NumberDataValue</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>result</ParamName>
                    <ParamType>NumberDataValue</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>scale</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>mod</MethodName>
            <MethodComment>/** 
 * The SQL mod operator.
 * @param dividend		The numerator
 * @param divisor		The denominator
 * @param result		The result of the previous call to this method, nullif not called yet.
 * @return	dividend / divisor
 * @exception StandardException		Thrown on error, if result is non-null then its value will be unchanged.
 */
</MethodComment>
            <ReturnType>NumberDataValue</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dividend</ParamName>
                    <ParamType>NumberDataValue</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>divisor</ParamName>
                    <ParamType>NumberDataValue</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>result</ParamName>
                    <ParamType>NumberDataValue</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>minus</MethodName>
            <MethodComment>/** 
 * The SQL unary - operator.  Negates this NumberDataValue.
 * @param result	The result of the previous call to this method, nullif not called yet.
 * @return	- operand
 * @exception StandardException		Thrown on error, if result is non-null then its value will be unchanged.
 */
</MethodComment>
            <ReturnType>NumberDataValue</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>result</ParamName>
                    <ParamType>NumberDataValue</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>absolute</MethodName>
            <MethodComment>/** 
 * The SQL ABSOLUTE operator.  Absolute value of this NumberDataValue.
 * @param result    The result of the previous call to this method, nullif not called yet.
 * @exception StandardException     Thrown on error, if result is non-null then its value will be unchanged.
 */
</MethodComment>
            <ReturnType>NumberDataValue</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>result</ParamName>
                    <ParamType>NumberDataValue</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sqrt</MethodName>
            <MethodComment>/** 
 * The SQL SQRT operator.  Sqrt value of this NumberDataValue.
 * @param result    The result of the previous call to this method, nullif not call yet.
 * @exception StandardException     Thrown on error (a negative number), if result is non-null then its value will be unchanged.
 */
</MethodComment>
            <ReturnType>NumberDataValue</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>result</ParamName>
                    <ParamType>NumberDataValue</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setValue</MethodName>
            <MethodComment>/** 
 * Set the value of this NumberDataValue to the given value. This is only intended to be called when mapping values from the Java space into the SQL space, e.g. parameters and return types from procedures and functions. Each specific type is only expected to handle the explicit type according the JDBC. &lt;UL&gt; &lt;LI&gt; SMALLINT from java.lang.Integer &lt;LI&gt; INTEGER from java.lang.Integer &lt;LI&gt; LONG from java.lang.Long &lt;LI&gt; FLOAT from java.lang.Float &lt;LI&gt; DOUBLE from java.lang.Double &lt;LI&gt; DECIMAL from java.math.BigDecimal &lt;/UL&gt;
 * @param theValue	An Number containing the value to set thisNumberDataValue to.  Null means set the value to SQL null.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>theValue</ParamName>
                    <ParamType>Number</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>