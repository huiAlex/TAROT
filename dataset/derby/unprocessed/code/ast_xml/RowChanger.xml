<Class>
    <Id>1642</Id>
    <Package>org.apache.derby.iapi.sql.execute</Package>
    <ClassName>RowChanger</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>RowChanger  /** 
 * Perform row at a time DML operations of tables and maintain indexes.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>open</MethodName>
            <MethodComment>/** 
 * Open this RowChanger. &lt;P&gt;Note to avoid the cost of fixing indexes that do not change during update operations use openForUpdate(). 
 * @param lockMode	The lock mode to use(row or table, see TransactionController)
 * @exception StandardException thrown on failure to convert
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lockMode</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setRowHolder</MethodName>
            <MethodComment>/** 
 * Set the row holder for this changer to use. If the row holder is set, it wont bother  saving copies of rows needed for deferred processing.  Also, it will never close the passed in rowHolder.
 * @param rowHolder	the row holder
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rowHolder</ParamName>
                    <ParamType>TemporaryRowHolder</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setIndexNames</MethodName>
            <MethodComment>/** 
 * Sets the index names of the tables indices. Used for error reporting.
 * @param indexNames		Names of all the indices on this table.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>indexNames</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>openForUpdate</MethodName>
            <MethodComment>/** 
 * Open this RowChanger to avoid fixing indexes that do not change during update operations. 
 * @param fixOnUpdate fixOnUpdat[ix] == true ==&amp;gt; fix index 'ix' onan update operation.
 * @param lockMode	The lock mode to use(row or table, see TransactionController)
 * @param wait		If true, then the caller wants to wait for locks. False will bewhen we using a nested user xaction - we want to timeout right away if the parent holds the lock.  (bug 4821)
 * @exception StandardException thrown on failure to convert
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fixOnUpdate</ParamName>
                    <ParamType>boolean[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lockMode</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wait</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>insertRow</MethodName>
            <MethodComment>/** 
 * Insert a row into the table and perform associated index maintenance.
 * @param baseRow the row.
 * @param getRL return a row location of the inserted row
 * @return row location if requested, else {@code null}.
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>RowLocation</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>baseRow</ParamName>
                    <ParamType>ExecRow</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>getRL</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>deleteRow</MethodName>
            <MethodComment>/** 
 * Delete a row from the table and perform associated index maintenance.
 * @param baseRow the row.
 * @param baseRowLocation the row's base conglomeratelocation
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>baseRow</ParamName>
                    <ParamType>ExecRow</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>baseRowLocation</ParamName>
                    <ParamType>RowLocation</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>updateRow</MethodName>
            <MethodComment>/** 
 * Update a row in the table and perform associated index maintenance.
 * @param oldBaseRow the old image of the row.
 * @param newBaseRow the new image of the row.
 * @param baseRowLocation the row's base conglomeratelocation
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>oldBaseRow</ParamName>
                    <ParamType>ExecRow</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>newBaseRow</ParamName>
                    <ParamType>ExecRow</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>baseRowLocation</ParamName>
                    <ParamType>RowLocation</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>finish</MethodName>
            <MethodComment>/** 
 * Finish processing the changes.  This means applying the deferred inserts for updates to unique indexes.
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>close</MethodName>
            <MethodComment>/** 
 * Close this RowChanger.
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getHeapConglomerateController</MethodName>
            <MethodComment>/** 
 * Return the ConglomerateController from this RowChanger. This is useful when copying properties from heap to  temp conglomerate on insert/update/delete.
 * @return The ConglomerateController from this RowChanger.
 */
</MethodComment>
            <ReturnType>ConglomerateController</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>open</MethodName>
            <MethodComment>/** 
 * Open this RowChanger. &lt;P&gt;Note to avoid the cost of fixing indexes that do not change during update operations use openForUpdate(). 
 * @param lockMode	The lock mode to use(row or table, see TransactionController)
 * @param wait		If true, then the caller wants to wait for locks. False will bewhen we using a nested user xaction - we want to timeout right away if the parent holds the lock.  
 * @exception StandardException thrown on failure to convert
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lockMode</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wait</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findSelectedCol</MethodName>
            <MethodComment>/** 
 * Return what column no in the input ExecRow (cf nextBaseRow argument to #updateRow) would correspond to selected column, if any.
 * @param selectedCol the column number in the base table of a selectedcolumn or -1 (if selected column is not a base table column, e.g. i+4).
 * @return column no, or -1 if not found or not a base column
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>selectedCol</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>