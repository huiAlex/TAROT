<Class>
    <Id>1419</Id>
    <Package>org.apache.derby.shared.common.sanity</Package>
    <ClassName>SanityManager</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>SanityManager  /** 
 * The SanityService provides assertion checking and debug control. &lt;p&gt; Assertions and debug checks can only be used for testing conditions that might occur in development code but not in production code.	 &lt;b&gt;They are compiled out of production code.&lt;/b&gt; &lt;p&gt; Uses of assertions should not add AssertFailure catches or throws clauses; AssertFailure is under RuntimeException in the java exception hierarchy. Our outermost system block will bring the system down when it detects an assertion failure. &lt;p&gt; In addition to ASSERTs in code, classes can choose to implement an isConsistent method that would be used by ASSERTs, UnitTests, and any other code wanting to check the consistency of an object. &lt;p&gt; Assertions are meant to be used to verify the state of the system and bring the system down if the state is not correct. Debug checks are meant to display internal information about a running system. &lt;p&gt;
 * @see org.apache.derby.shared.common.sanity.AssertFailure
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>ASSERT</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>DEBUG</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>DEBUGDEBUG</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>debugStream</FieldName>
            <FieldType>java.io.PrintWriter</FieldType>
        </Field>
        <Field>
            <FieldName>DebugFlags</FieldName>
            <FieldType>Hashtable</FieldType>
        </Field>
        <Field>
            <FieldName>DebugFlags</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>AllDebugOn</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>AllDebugOff</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ASSERT</MethodName>
            <MethodComment>/** 
 * ASSERT checks the condition, and if it is false, throws AssertFailure. A message about the assertion failing is printed. &lt;p&gt;
 * @see org.apache.derby.shared.common.sanity.AssertFailure
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mustBeTrue</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ASSERT</MethodName>
            <MethodComment>/** 
 * ASSERT checks the condition, and if it is false, throws AssertFailure. The message will be printed and included in the assertion. &lt;p&gt;
 * @see org.apache.derby.shared.common.sanity.AssertFailure
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mustBeTrue</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>msgIfFail</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>THROWASSERT</MethodName>
            <MethodComment>/** 
 * THROWASSERT throws AssertFailure. This is used in cases where the caller has already detected the assertion failure (such as in the default case of a switch). This method should be used, rather than throwing AssertFailure directly, to allow us to  centralize all sanity checking.  The message argument will be printed and included in the assertion. &lt;p&gt;
 * @param msgIfFail message to print with the assertion
 * @see org.apache.derby.shared.common.sanity.AssertFailure
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>msgIfFail</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;THROWASSERT;[msgIfFail, null]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>THROWASSERT</MethodName>
            <MethodComment>/** 
 * THROWASSERT throws AssertFailure. This flavor will print the stack associated with the exception. The message argument will be printed and included in the assertion. &lt;p&gt;
 * @param msg message to print with the assertion
 * @param t exception to print with the assertion
 * @see org.apache.derby.shared.common.sanity.AssertFailure
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>msg</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Throwable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AssertFailure [af=new AssertFailure("ASSERT FAILED " + msg,t)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>THROWASSERT</MethodName>
            <MethodComment>/** 
 * THROWASSERT throws AssertFailure. This flavor will print the stack associated with the exception. &lt;p&gt;
 * @param t exception to print with the assertion
 * @see org.apache.derby.shared.common.sanity.AssertFailure
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Throwable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;THROWASSERT;[t.toString(), t]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>DEBUG</MethodName>
            <MethodComment>/** 
 * The DEBUG calls provide the ability to print information or perform actions based on whether a debug flag is set or not. debug flags are set in configurations and picked up by the sanity manager when the monitor finds them (see CONFIG below). &lt;p&gt; The message is output to the trace stream, so it ends up in db2j.LOG. It will include a header line of DEBUG &lt;flagname&gt; OUTPUT: before the message. &lt;p&gt; If the debugStream stream cannot be found, the message is printed to System.out.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>flag</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>message</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>DEBUG_ON</MethodName>
            <MethodComment>/** 
 * This can be called directly if you want to control what is done once the debug flag has been verified -- for example, if you are calling a routine that prints to the trace stream directly rather than returning a string to be printed, or if you want to perform more (or fewer!) &lt;p&gt; Calls to this method should be surrounded with if (SanityManager.DEBUG) { } so that they can be compiled out completely.
 * @return true if the flag has been set to "true"; falseif the flag is not set, or is set to something other than "true".
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>flag</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>DEBUG_SET</MethodName>
            <MethodComment>/** 
 * Set the named debug flag to true. &lt;p&gt; Calls to this method should be surrounded with if (SanityManager.DEBUG) { } so that they can be compiled out completely.
 * @param flag	The name of the debug flag to set to true
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>flag</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>DEBUG_CLEAR</MethodName>
            <MethodComment>/** 
 * Set the named debug flag to false. &lt;p&gt; Calls to this method should be surrounded with if (SanityManager.DEBUG) { } so that they can be compiled out completely.
 * @param flag	The name of the debug flag to set to false
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>flag</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>DEBUG_ALL_ON</MethodName>
            <MethodComment>/** 
 * This can be used to have the SanityManager return TRUE for any DEBUG_ON check. DEBUG_CLEAR of an individual flag will appear to have no effect.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>DEBUG_ALL_OFF</MethodName>
            <MethodComment>/** 
 * This can be used to have the SanityManager return FALSE for any DEBUG_ON check. DEBUG_SET of an individual flag will appear to have no effect.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>SET_DEBUG_STREAM</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pw</ParamName>
                    <ParamType>java.io.PrintWriter</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>GET_DEBUG_STREAM</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>java.io.PrintWriter</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>showTrace</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>af</ParamName>
                    <ParamType>AssertFailure</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>java.io.PrintWriter [assertStream=GET_DEBUG_STREAM()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>af;printStackTrace;[]</InnerMethodInvoke>
                <InnerMethodInvoke>assertStream;println;["Assertion trace:"]</InnerMethodInvoke>
                <InnerMethodInvoke>af;printStackTrace;[assertStream]</InnerMethodInvoke>
                <InnerMethodInvoke>assertStream;flush;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>showTrace</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Throwable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>java.io.PrintWriter [assertStream=GET_DEBUG_STREAM()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>assertStream;println;["Exception trace: "]</InnerMethodInvoke>
                <InnerMethodInvoke>t;printStackTrace;[assertStream]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>DEBUG_PRINT</MethodName>
            <MethodComment>/** 
 * The DEBUG_PRINT calls provides a convenient way to print debug information to the db2j.LOG file,  The message includes a header &lt;p&gt; DEBUG &lt;flag&gt; OUTPUT:  before the message &lt;p&gt; If the debugStream stream cannot be found, the message is printed to System.out.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>flag</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>message</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>java.io.PrintWriter [debugStream=GET_DEBUG_STREAM()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>debugStream;println;["DEBUG " + flag + " OUTPUT: "+ message]</InnerMethodInvoke>
                <InnerMethodInvoke>debugStream;flush;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>NOTREACHED</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;THROWASSERT;["code should not be reached"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>