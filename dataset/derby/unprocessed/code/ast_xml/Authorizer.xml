<Class>
    <Id>1023</Id>
    <Package>org.apache.derby.iapi.sql.conn</Package>
    <ClassName>Authorizer</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Authorizer  /** 
 * The Authorizer verifies a connected user has the authorization  to perform a requested database operation using the current connection. &lt;P&gt; Today no object based authorization is supported.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>SQL_WRITE_OP</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SQL_SELECT_OP</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SQL_ARBITARY_OP</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SQL_CALL_OP</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SQL_DDL_OP</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>PROPERTY_WRITE_OP</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>JAR_WRITE_OP</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>NULL_PRIV</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SELECT_PRIV</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>UPDATE_PRIV</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>REFERENCES_PRIV</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>INSERT_PRIV</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>DELETE_PRIV</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>TRIGGER_PRIV</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>EXECUTE_PRIV</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>USAGE_PRIV</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>MIN_SELECT_PRIV</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>PRIV_TYPE_COUNT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>CREATE_SCHEMA_PRIV</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>MODIFY_SCHEMA_PRIV</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>DROP_SCHEMA_PRIV</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>CREATE_ROLE_PRIV</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>DROP_ROLE_PRIV</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SYSTEM_AUTHORIZATION_ID</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>PUBLIC_AUTHORIZATION_ID</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>authorize</MethodName>
            <MethodComment>/** 
 * Verify the connected user is authorized to perform the requested operation. This variation should only be used with operations that do not use tables or routines. If the operation involves tables or routines then use the variation of the authorize method that takes an Activation parameter. The activation holds the table, column, and routine lists.
 * @param operation the enumeration code for the requsted operation.
 * @exception StandardException Thrown if the operation is not allowed
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>operation</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>authorize</MethodName>
            <MethodComment>/** 
 * Verify the connected user is authorized to perform the requested operation.
 * @param activation holds the list of tables, columns, and routines used.
 * @param operation the enumeration code for the requsted operation.
 * @exception StandardException Thrown if the operation is not allowed
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>activation</ParamName>
                    <ParamType>Activation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>operation</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>authorize</MethodName>
            <MethodComment>/** 
 * Verify the connected user possesses the indicated permissions
 * @param requiredPermissionsList    the required permissions
 * @param activation holds the execution logic
 * @exception StandardException Thrown if the operation is not allowed
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>requiredPermissionsList</ParamName>
                    <ParamType>StatementPermission</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>activation</ParamName>
                    <ParamType>Activation</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isReadOnlyConnection</MethodName>
            <MethodComment>/** 
 * Get the readOnly status for this authorizer's connection.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setReadOnlyConnection</MethodName>
            <MethodComment>/** 
 * Set the readOnly status for this authorizer's connection.
 * @param on true means set the connection to read only mode,false means set the connection to read wrte mode.
 * @param authorize true means to verify the caller has authorityto set the connection and false means do not check. 
 * @exception StandardException Oops not allowed.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>on</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>authorize</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>refresh</MethodName>
            <MethodComment>/** 
 * Refresh this authorizer to reflect a change in the database permissions.
 * @exception StandardException Oops.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>