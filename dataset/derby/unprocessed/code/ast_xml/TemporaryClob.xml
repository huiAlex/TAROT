<Class>
    <Id>2101</Id>
    <Package>org.apache.derby.impl.jdbc</Package>
    <ClassName>TemporaryClob</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>InternalClob</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>TemporaryClob  /** 
 * A Clob representation where the Clob is stored either in memory or on disk. &lt;p&gt; Character positions given as input to methods in this class are always 1-based. Byte positions are always 0-based.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>conChild</FieldName>
            <FieldType>ConnectionChild</FieldType>
        </Field>
        <Field>
            <FieldName>bytes</FieldName>
            <FieldType>LOBStreamControl</FieldType>
        </Field>
        <Field>
            <FieldName>released</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>cachedCharLength</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>internalReader</FieldName>
            <FieldType>UTF8Reader</FieldType>
        </Field>
        <Field>
            <FieldName>unclosableInternalReader</FieldName>
            <FieldType>FilterReader</FieldType>
        </Field>
        <Field>
            <FieldName>posCache</FieldName>
            <FieldType>CharToBytePositionCache</FieldType>
        </Field>
        <Field>
            <FieldName>charPos</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>bytePos</FieldName>
            <FieldType>long</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>cloneClobContent</MethodName>
            <MethodComment>/** 
 * Clones the content of another internal Clob.
 * @param dbName name of the assoicated database
 * @param conChild assoiated connection child
 * @param clob the Clob whose content to clone
 * @return A read-write Clob.
 * @throws IOException if accessing the I/O resources fail (read or write)
 * @throws SQLException if accessing underlying resources fail
 */
</MethodComment>
            <ReturnType>InternalClob</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dbName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>conChild</ParamName>
                    <ParamType>ConnectionChild</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>clob</ParamName>
                    <ParamType>InternalClob</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>TemporaryClob [newClob=new TemporaryClob(conChild)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>newClob;copyClobContent;[clob]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cloneClobContent</MethodName>
            <MethodComment>/** 
 * Clones the content of another internal Clob.
 * @param dbName name of the assoicated database
 * @param conChild assoiated connection child
 * @param clob the Clob whose content to clone
 * @param length number of chars in new InternalClob
 * @return A read-write Clob.
 * @throws IOException if accessing the I/O resources fail (read or write)
 * @throws SQLException if accessing underlying resources fail
 */
</MethodComment>
            <ReturnType>InternalClob</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dbName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>conChild</ParamName>
                    <ParamType>ConnectionChild</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>clob</ParamName>
                    <ParamType>InternalClob</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>length</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>TemporaryClob [newClob=new TemporaryClob(conChild)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>newClob;copyClobContent;[clob, length]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>TemporaryClob</MethodName>
            <MethodComment>/** 
 * Constructs a &lt;code&gt;TemporaryClob&lt;/code&gt; object used to perform operations on a CLOB value.
 * @param conChild connection object used to obtain synchronization object
 * @throws NullPointerException if &lt;code&gt;conChild&lt;/code&gt; is&lt;code&gt;null&lt;/code&gt;
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conChild</ParamName>
                    <ParamType>ConnectionChild</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>release</MethodName>
            <MethodComment>/** 
 * Releases this Clob by freeing assoicated resources.
 * @throws IOException if accessing underlying I/O resources fail
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRawByteStream</MethodName>
            <MethodComment>/** 
 * Returns a stream serving the raw bytes of this Clob. &lt;p&gt; The stream is managed by the underlying byte store, and can serve bytes both from memory and from a file on disk.
 * @return A stream serving the raw bytes of the stream, initialized atbyte position &lt;code&gt;0&lt;/code&gt;.
 * @throws IOException if obtaining the stream fails
 */
</MethodComment>
            <ReturnType>InputStream</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkIfValid;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>TemporaryClob</MethodName>
            <MethodComment>/** 
 * Constructs a &lt;code&gt;TemporaryClob&lt;/code&gt; object and initializes with a initial String.
 * @param data initial value in String
 * @param conChild connection object used to obtain synchronization object
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>data</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>conChild</ParamName>
                    <ParamType>ConnectionChild</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBytePosition</MethodName>
            <MethodComment>/** 
 * Finds the corresponding byte position for the given UTF-8 character position, starting from the byte position &lt;code&gt;startPos&lt;/code&gt;. See comments in SQLChar.readExternal for more notes on processing the UTF8 format.
 * @param charPos character position
 * @return Stream position in bytes for the given character position.
 * @throws EOFException if the character position specified is greater thanthe Clob length +1
 * @throws IOException if accessing underlying I/O resources fail
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>charPos</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>long [bytePos]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getUpdateCount</MethodName>
            <MethodComment>/** 
 * Returns the update count of this Clob.
 * @return Update count.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getWriter</MethodName>
            <MethodComment>/** 
 * Constructs and returns a &lt;code&gt;Writer&lt;/code&gt; for the CLOB value.
 * @param pos the initial position in bytes for the &lt;code&gt;Writer&lt;/code&gt;
 * @return A &lt;code&gt;Writer&lt;/code&gt; to write to the CLOB value.
 * @throws IOException
 * @throws SQLException if the specified position is invalid
 */
</MethodComment>
            <ReturnType>Writer</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pos</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkIfValid;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getReader</MethodName>
            <MethodComment>/** 
 * Constructs and returns a &lt;code&gt;Reader&lt;/code&gt;.
 * @param pos initial position of the returned &lt;code&gt;Reader&lt;/code&gt; innumber of characters. Expected to be non-negative. The first character is at position &lt;code&gt;0&lt;/code&gt;.
 * @return A &lt;code&gt;Reader&lt;/code&gt; with the underlying &lt;code&gt;CLOB&lt;/code&gt;value as source.
 * @throws IOException
 * @throws SQLException if the specified position is too big
 */
</MethodComment>
            <ReturnType>Reader</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pos</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Reader [isr=new UTF8Reader(getCSD(),conChild,conChild.getConnectionSynchronization())]</InnerVar>
                <InnerVar>long [leftToSkip=pos - 1]</InnerVar>
                <InnerVar>long [skipped]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkIfValid;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getInternalReader</MethodName>
            <MethodComment>/** 
 * @see #getReader
 */
</MethodComment>
            <ReturnType>Reader</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>characterPosition</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>close</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCharLength</MethodName>
            <MethodComment>/** 
 * Returns number of characters in the Clob.
 * @return The length of the Clob in number of characters.
 * @throws IOException if accessing the underlying I/O resources fail
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkIfValid;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCharLengthIfKnown</MethodName>
            <MethodComment>/** 
 * Returns the cached character count for the Clob, if any.
 * @return The number of characters in the Clob, or {@code -1} if unknown.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkIfValid;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getByteLength</MethodName>
            <MethodComment>/** 
 * Returns the size of the Clob in bytes.
 * @return Number of bytes in the &lt;code&gt;CLOB&lt;/code&gt; value.
 * @throws IOException if accessing the underlying I/O resources fail
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkIfValid;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>insertString</MethodName>
            <MethodComment>/** 
 * Inserts a string at the given position.
 * @param str the string to insert
 * @param insertionPoint the character position to insert the string at
 * @return Number of characters inserted.
 * @throws EOFException if the position is larger than the Clob length +1
 * @throws IOException if accessing the underlying I/O resources fail
 * @throws SQLException if accessing the underlying resources fail
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>str</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>insertionPoint</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>long [prevLength=cachedCharLength]</InnerVar>
                <InnerVar>long [byteInsertionPoint=getBytePosition(insertionPoint)]</InnerVar>
                <InnerVar>long [curByteLength=this.bytes.getLength()]</InnerVar>
                <InnerVar>byte[] [newBytes=getByteFromString(str)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkIfValid;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;updateInternalState;[insertionPoint]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isReleased</MethodName>
            <MethodComment>/** 
 * Tells if this Clob has been released.
 * @return {@code true} if released, {@code false} if not.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isWritable</MethodName>
            <MethodComment>/** 
 * Tells if this Clob is intended to be writable.
 * @return &lt;code&gt;true&lt;/code&gt;
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>truncate</MethodName>
            <MethodComment>/** 
 * Truncate the Clob to the specifiec size.
 * @param newCharLength the new length, in characters, of the Clob
 * @throws IOException if accessing the underlying I/O resources fails
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>newCharLength</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkIfValid;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getByteFromString</MethodName>
            <MethodComment>/** 
 * Converts a string into the modified UTF-8 byte encoding.
 * @param str string to represent with modified UTF-8 encoding
 * @return Byte array representing the string in modified UTF-8 encoding.
 */
</MethodComment>
            <ReturnType>byte[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>str</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>byte[] [buffer=new byte[3 * str.length()]]</InnerVar>
                <InnerVar>int [len=0]</InnerVar>
                <InnerVar>byte[] [buff=new byte[len]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>System;arraycopy;[buffer, 0, buff, 0, len]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>copyClobContent</MethodName>
            <MethodComment>/** 
 * Copies the content of another Clob into this one.
 * @param clob the Clob to copy from
 * @throws IOException if accessing I/O resources fail (both read and write)
 * @throws SQLException if accessing underlying resources fail
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clob</ParamName>
                    <ParamType>InternalClob</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>copyClobContent</MethodName>
            <MethodComment>/** 
 * Copies the content of another Clob into this one.
 * @param clob the Clob to copy from
 * @param charLength number of chars to copy
 * @throws EOFException if the length of the stream is shorter than thespecified length
 * @throws IOException if accessing I/O resources fail (both read and write)
 * @throws SQLException if accessing underlying resources fail
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clob</ParamName>
                    <ParamType>InternalClob</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>charLength</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkIfValid</MethodName>
            <MethodComment>/** 
 * Makes sure the Clob has not been released. &lt;p&gt; All operations are invalid on a released Clob.
 * @throws IllegalStateException if the Clob has been released
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>updateInternalState</MethodName>
            <MethodComment>/** 
 * Updates the internal state after a modification has been performed on the Clob content. &lt;p&gt; Currently the state update consists of dicarding the internal reader to stop it from delivering stale data, to reset the byte/char position cache if necessary, and to reset the cached length.
 * @param charChangePosition the position where the Clob change started
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>charChangePosition</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCSD</MethodName>
            <MethodComment>/** 
 * Returns a character stream descriptor for the stream. &lt;p&gt; All streams from the underlying source ( {@code LOBStreamControl}) are position aware and can be moved to a specific byte position cheaply. The maximum length is not really needed, nor known, at the moment, so the maximum allowed Clob length in Derby is used.
 * @return A character stream descriptor.
 * @throws IOException if obtaining the length of the stream fails
 */
</MethodComment>
            <ReturnType>CharacterStreamDescriptor</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>CharToBytePositionCache</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBytePos</MethodName>
            <MethodComment>/** 
 * Returns the last cached byte position.
 * @return The byte position for the last cached character position.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCharPos</MethodName>
            <MethodComment>/** 
 * Returns the last cached character position.
 * @return The last cached character position.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>updateCachedPos</MethodName>
            <MethodComment>/** 
 * Updates the position cache.
 * @param charPos the character position to cache the byte position for
 * @param bytePos byte position for the specified character position
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>charPos</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>bytePos</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reset</MethodName>
            <MethodComment>/** 
 * Resets the position cache.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>