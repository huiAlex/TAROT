<Class>
    <Id>652</Id>
    <Package>org.apache.derby.impl.sql.execute</Package>
    <ClassName>FKInfo</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Formatable</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>FKInfo  /** 
 * This is a simple class used to store the run time information about a foreign key.  Used by DML to figure out what to check.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>FOREIGN_KEY</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>REFERENCED_KEY</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>schemaName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>tableName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>type</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>refUUID</FieldName>
            <FieldType>UUID</FieldType>
        </Field>
        <Field>
            <FieldName>refConglomNumber</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>refConstraintID</FieldName>
            <FieldType>UUID</FieldType>
        </Field>
        <Field>
            <FieldName>refConstraintIsDeferrable</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>stmtType</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>rowLocation</FieldName>
            <FieldType>RowLocation</FieldType>
        </Field>
        <Field>
            <FieldName>fkConstraintNames</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>fkUUIDs</FieldName>
            <FieldType>UUID[]</FieldType>
        </Field>
        <Field>
            <FieldName>fkConglomNumbers</FieldName>
            <FieldType>long[]</FieldType>
        </Field>
        <Field>
            <FieldName>fkIds</FieldName>
            <FieldType>UUID[]</FieldType>
        </Field>
        <Field>
            <FieldName>fkIsSelfReferencing</FieldName>
            <FieldType>boolean[]</FieldType>
        </Field>
        <Field>
            <FieldName>colArray</FieldName>
            <FieldType>int[]</FieldType>
        </Field>
        <Field>
            <FieldName>raRules</FieldName>
            <FieldType>int[]</FieldType>
        </Field>
        <Field>
            <FieldName>deferrable</FieldName>
            <FieldType>boolean[]</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>FKInfo</MethodName>
            <MethodComment>/** 
 * Niladic constructor for Formattable
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>FKInfo</MethodName>
            <MethodComment>/** 
 * Constructor for FKInfo
 * @param fkConstraintNames the foreign key constraint names
 * @param schemaName the name of the schema of the table being modified
 * @param tableName	the name of the table being modified
 * @param stmtType	the type of the statement: e.g. StatementType.INSERT
 * @param type either FKInfo.REFERENCED_KEY or FKInfo.FOREIGN_KEY
 * @param refUUID UUID of the referenced constraint's supporting index
 * @param refConglomNumber conglomerate number of the referenced key
 * @param refConstraintID UUID of the referenced constraint
 * @param refConstraintIsDeferrable {@code true} iff the referenced keyconstraint is deferrable
 * @param fkUUIDs an array of fkUUIDs of backing indexes.  ifFOREIGN_KEY, then just one element, the backing index of the referenced keys.  if REFERENCED_KEY, then all the foreign keys
 * @param fkConglomNumbers array of conglomerate numbers, correspondsto fkUUIDs
 * @param fkIsSelfReferencing array of conglomerate booleans indicatingwhether the foreign key references a key in the same table
 * @param colArray map of columns to the base row that DMLis changing.  1 based.  Note that this maps the constraint index to a row in the target table of the current DML operation.
 * @param rowLocation a row location template for the target tableused to pass in a template row to tc.openScan()
 * @param raRules referential action rules
 * @param deferrable the corresponding constraint is deferrable
 * @param fkIds the foreign key constraints' uuids.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fkConstraintNames</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>schemaName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stmtType</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>refUUID</ParamName>
                    <ParamType>UUID</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>refConglomNumber</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>refConstraintID</ParamName>
                    <ParamType>UUID</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>refConstraintIsDeferrable</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fkUUIDs</ParamName>
                    <ParamType>UUID[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fkConglomNumbers</ParamName>
                    <ParamType>long[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fkIsSelfReferencing</ParamName>
                    <ParamType>boolean[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>colArray</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rowLocation</ParamName>
                    <ParamType>RowLocation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>raRules</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>deferrable</ParamName>
                    <ParamType>boolean[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fkIds</ParamName>
                    <ParamType>UUID[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>chooseRelevantFKInfos</MethodName>
            <MethodComment>/** 
 * Comb through the FKInfo structures and pick out the ones that have columns that intersect with the input columns.
 * @param fkInfo	        array of fkinfos
 * @param cols	            array of columns
 * @param addAllTypeIsFK    take all with type == FOREIGN_KEY
 * @return array of relevant fkinfos
 */
</MethodComment>
            <ReturnType>FKInfo[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fkInfo</ParamName>
                    <ParamType>FKInfo[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cols</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>addAllTypeIsFK</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Vector&lt;FKInfo&gt; [newfksVector=new Vector&lt;FKInfo&gt;()]</InnerVar>
                <InnerVar>FKInfo[] [newfks=null]</InnerVar>
                <InnerVar>int [size=newfksVector.size()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeExternal</MethodName>
            <MethodComment>/** 
 * Write this object out
 * @param out write bytes here
 * @exception IOException thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>ObjectOutput</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>FormatIdUtil;writeFormatIdInteger;[out, rowLocation.getTypeFormatId()]</InnerMethodInvoke>
                <InnerMethodInvoke>out;writeObject;[schemaName]</InnerMethodInvoke>
                <InnerMethodInvoke>out;writeObject;[tableName]</InnerMethodInvoke>
                <InnerMethodInvoke>out;writeInt;[type]</InnerMethodInvoke>
                <InnerMethodInvoke>out;writeInt;[stmtType]</InnerMethodInvoke>
                <InnerMethodInvoke>out;writeObject;[refUUID]</InnerMethodInvoke>
                <InnerMethodInvoke>out;writeLong;[refConglomNumber]</InnerMethodInvoke>
                <InnerMethodInvoke>out;writeObject;[refConstraintID]</InnerMethodInvoke>
                <InnerMethodInvoke>out;writeBoolean;[refConstraintIsDeferrable]</InnerMethodInvoke>
                <InnerMethodInvoke>ArrayUtil;writeArray;[out, fkConstraintNames]</InnerMethodInvoke>
                <InnerMethodInvoke>ArrayUtil;writeArray;[out, fkUUIDs]</InnerMethodInvoke>
                <InnerMethodInvoke>ArrayUtil;writeLongArray;[out, fkConglomNumbers]</InnerMethodInvoke>
                <InnerMethodInvoke>ArrayUtil;writeBooleanArray;[out, fkIsSelfReferencing]</InnerMethodInvoke>
                <InnerMethodInvoke>ArrayUtil;writeIntArray;[out, colArray]</InnerMethodInvoke>
                <InnerMethodInvoke>ArrayUtil;writeIntArray;[out, raRules]</InnerMethodInvoke>
                <InnerMethodInvoke>ArrayUtil;writeBooleanArray;[out, deferrable]</InnerMethodInvoke>
                <InnerMethodInvoke>ArrayUtil;writeArray;[out, fkIds]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readExternal</MethodName>
            <MethodComment>/** 
 * Read this object from a stream of stored objects.
 * @param in read this.
 * @exception IOException					thrown on error
 * @exception ClassNotFoundException		thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>in</ParamName>
                    <ParamType>ObjectInput</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>ClassNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTypeFormatId</MethodName>
            <MethodComment>/** 
 * Get the formatID which corresponds to this class.
 * @return	the formatID of this class
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>