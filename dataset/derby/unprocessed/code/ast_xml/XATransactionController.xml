<Class>
    <Id>1680</Id>
    <Package>org.apache.derby.iapi.store.access</Package>
    <ClassName>XATransactionController</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>TransactionController</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>XATransactionController  /** 
 * This interface allows access to commit,prepare,abort global transactions as part of a two phase commit protocol, during runtime.   These interfaces have been chosen to be exact implementations required to  implement the XAResource interfaces as part of the JTA standard extension. &lt;P&gt; It is expected that the following interfaces are only used during the  runtime portion of a 2 phase commit connection. &lt;P&gt; If a runtime exception causes a transaction abort (of a transaction that has not been successfully prepared), then the transaction will act as if  xa_rollback() had been called.  The transaction will be aborted and any other call other than destroy will throw exceptions. &lt;P&gt; The XAResource interface is a Java mapping of the industry standard XA resource manager interface.  Please refer to: X/Open CAE Specification - Distributed  Transaction Processing: The XA Specification, X/Open Document No. XO/CAE/91/300 or ISBN 1 872630 24 3. &lt;P&gt; NOTE - all calls to this interface assume that the caller has insured that there is no active work being done on the local instance of the transaction  in question.  RESOLVE - not sure whether this means that the connection  associated with the transaction must be closed, or if it just means that synchronization has been provided to provide correct MT behavior from above.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>XA_RDONLY</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>XA_OK</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>xa_commit</MethodName>
            <MethodComment>/** 
 * This method is called to commit the current XA global transaction. &lt;p&gt; Once this call has been made all other calls on this controller other than destroy will throw exceptions. &lt;p&gt;
 * @param onePhase If true, the resource manager should use a one-phasecommit protocol to commit the work done on behalf of  current xid.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>onePhase</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>xa_prepare</MethodName>
            <MethodComment>/** 
 * This method is called to ask the resource manager to prepare for a transaction commit of the transaction specified in xid. &lt;p&gt; If XA_OK is returned then any call other than xa_commit() or xa_abort() will throw exceptions.  If XA_RDONLY is returned then any call other than destroy() will throw exceptions.
 * @return         A value indicating the resource manager's vote on thethe outcome of the transaction.  The possible values are:  XA_RDONLY or XA_OK.  If the resource manager wants to roll back the transaction, it should do so by  throwing an appropriate XAException in the prepare method.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>xa_rollback</MethodName>
            <MethodComment>/** 
 * rollback the current global transaction. &lt;p&gt; The given transaction is roll'ed back and it's history is not maintained in the transaction table or long term log. &lt;p&gt; Once this call has been made all other calls on this controller other than destroy will throw exceptions. &lt;p&gt;
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>