<Class>
    <Id>418</Id>
    <Package>org.apache.derby.iapi.sql</Package>
    <ClassName>PreparedStatement</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Dependent</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>PreparedStatement  /** 
 * The PreparedStatement interface provides methods to execute prepared statements, store them, and get metadata about them.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>upToDate</MethodName>
            <MethodComment>/** 
 * Checks whether this PreparedStatement is up to date. A PreparedStatement can become out of date if any of several things happen: A schema used by the statement is dropped A table used by the statement is dropped A table used by the statement, or a column in such a table, is altered in one of several ways: a column is dropped, a privilege is dropped, a constraint is added or dropped, an index is dropped. A view used by the statement is dropped. In general, anything that happened since the plan was generated that might cause the plan to fail, or to generate incorrect results, will cause this method to return FALSE.
 * @return	TRUE if the PreparedStatement is up to date,FALSE if it is not up to date
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rePrepare</MethodName>
            <MethodComment>/** 
 * Re-prepare the statement if it is not up to date or, if requested, simply not optimal. If there are open cursors using this prepared statement, then we will not be able to recompile the statement.
 * @param lcc			The LanguageConnectionContext.
 * @exception StandardException thrown if unable to perform
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lcc</ParamName>
                    <ParamType>LanguageConnectionContext</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getActivation</MethodName>
            <MethodComment>/** 
 * PreparedStatements are re-entrant - that is, more than one execution can be active at a time for a single prepared statement. An Activation contains all the local state information to execute a prepared statement (as opposed to the constant information, such as literal values and code). Each Activation class contains the code specific to the prepared statement represented by an instance of this class (PreparedStatement).
 * @param lcc			The LanguageConnectionContext.
 * @return	The new activation.
 * @exception StandardException		Thrown on failure
 */
</MethodComment>
            <ReturnType>Activation</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lcc</ParamName>
                    <ParamType>LanguageConnectionContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>scrollable</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>execute</MethodName>
            <MethodComment>/** 
 * Execute the PreparedStatement and return results, used for top level statements (not substatements) in a connection. &lt;p&gt; There is no executeQuery() or executeUpdate(); a method is provided in ResultSet to tell whether to expect rows to be returned.
 * @param activation The activation containing all the local stateto execute the plan.
 * @param forMetaData true if this is a meta-data query
 * @param timeoutMillis timeout value in milliseconds.
 * @return	A ResultSet for a statement. A ResultSet representsthe results returned from the statement, if any. Will return NULL if the plan for the PreparedStatement has aged out of cache, or the plan is out of date.
 * @exception StandardException		Thrown on failure
 */
</MethodComment>
            <ReturnType>ResultSet</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>activation</ParamName>
                    <ParamType>Activation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>forMetaData</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>timeoutMillis</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>executeSubStatement</MethodName>
            <MethodComment>/** 
 * Execute a statement as part of another statement (ithout a nested connection) and return results. &lt;p&gt; There is no executeQuery() or executeUpdate(); a method is provided in ResultSet to tell whether to expect rows to be returned.
 * @param parent The activation of the superstatement
 * @param activation The activation containing all the local stateto execute the plan for substatement
 * @param rollbackParentContext True if in the event of a statement-levelexception, the parent context needs to be rolled back, too.
 * @param timeoutMillis timeout value in milliseconds.
 * @return	A ResultSet for a statement. A ResultSet representsthe results returned from the statement, if any. Will return NULL if the plan for the PreparedStatement has aged out of cache, or the plan is out of date.
 * @exception StandardException		Thrown on failure
 */
</MethodComment>
            <ReturnType>ResultSet</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parent</ParamName>
                    <ParamType>Activation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>activation</ParamName>
                    <ParamType>Activation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rollbackParentContext</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>timeoutMillis</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>executeSubStatement</MethodName>
            <MethodComment>/** 
 * Execute a statement as part of another statement (without a nested connection) and return results. &lt;p&gt; Creates a new single use activation and executes it, but also passes rollbackParentContext parameter.
 * @param lcc language connection context
 * @param rollbackParentContext  True if in the event of a statement-levelexception, the parent context needs to be rolled back, too.
 * @param timeoutMillis timeout value in milliseconds.
 * @see #executeSubStatement(Activation,Activation,boolean,long)
 */
</MethodComment>
            <ReturnType>ResultSet</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lcc</ParamName>
                    <ParamType>LanguageConnectionContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rollbackParentContext</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>timeoutMillis</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getResultDescription</MethodName>
            <MethodComment>/** 
 * Get the ResultDescription for the statement.  The ResultDescription describes what the results look like: what are the rows and columns? &lt;p&gt; This is available here and on the ResultSet so that users can see the shape of the result before they execute.
 * @return	A ResultDescription describing the results.
 */
</MethodComment>
            <ReturnType>ResultDescription</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>referencesSessionSchema</MethodName>
            <MethodComment>/** 
 * Return true if the query node for this statement references SESSION schema tables.
 * @return	true if references SESSION schema tables, else false
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getParameterTypes</MethodName>
            <MethodComment>/** 
 * Get an array of DataTypeDescriptors describing the types of the parameters of this PreparedStatement. The Nth element of the array describes the Nth parameter.
 * @return		An array of DataTypeDescriptors telling thetype, length, precision, scale, etc. of each parameter of this PreparedStatement.
 */
</MethodComment>
            <ReturnType>DataTypeDescriptor[]</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getParameterType</MethodName>
            <MethodComment>/** 
 * Get the type of the parameter at the given (0-based) index. Raises an exception if the index is out of range.
 */
</MethodComment>
            <ReturnType>DataTypeDescriptor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>idx</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSource</MethodName>
            <MethodComment>/** 
 * Return the SQL string that this statement is for.
 * @return the SQL string this statement is for.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSPSName</MethodName>
            <MethodComment>/** 
 * Return the SPS Name for this statement.
 * @return the SPS Name for this statement
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCompileTimeInMillis</MethodName>
            <MethodComment>/** 
 * Get the total compile time for the associated query in milliseconds. Compile time can be divided into parse, bind, optimize and generate times.
 * @return long		The total compile time for the associated query in milliseconds.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getParseTimeInMillis</MethodName>
            <MethodComment>/** 
 * Get the parse time for the associated query in milliseconds.
 * @return long		The parse time for the associated query in milliseconds.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBindTimeInMillis</MethodName>
            <MethodComment>/** 
 * Get the bind time for the associated query in milliseconds.
 * @return long		The bind time for the associated query in milliseconds.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOptimizeTimeInMillis</MethodName>
            <MethodComment>/** 
 * Get the optimize time for the associated query in milliseconds.
 * @return long		The optimize time for the associated query in milliseconds.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getGenerateTimeInMillis</MethodName>
            <MethodComment>/** 
 * Get the generate time for the associated query in milliseconds.
 * @return long		The generate time for the associated query in milliseconds.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBeginCompileTimestamp</MethodName>
            <MethodComment>/** 
 * Get the timestamp for the beginning of compilation
 * @return Timestamp	The timestamp for the beginning of compilation.
 */
</MethodComment>
            <ReturnType>Timestamp</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEndCompileTimestamp</MethodName>
            <MethodComment>/** 
 * Get the timestamp for the end of compilation
 * @return Timestamp	The timestamp for the end of compilation.
 */
</MethodComment>
            <ReturnType>Timestamp</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isAtomic</MethodName>
            <MethodComment>/** 
 * Returns whether or not this Statement requires should behave atomically -- i.e. whether a user is permitted to do a commit/rollback during the execution of this statement.
 * @return boolean	Whether or not this Statement is atomic
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCompileTimeWarnings</MethodName>
            <MethodComment>/** 
 * Return any compile time warnings. Null if no warnings exist.
 */
</MethodComment>
            <ReturnType>SQLWarning</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getVersionCounter</MethodName>
            <MethodComment>/** 
 * Get the version counter. A change in the value indicates a recompile has happened.
 * @return version counter
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>