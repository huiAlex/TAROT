<Class>
    <Id>1983</Id>
    <Package>org.apache.derby.client.am.stmtcache</Package>
    <ClassName>JDBCStatementCache</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>JDBCStatementCache  /** 
 * A cache for JDBC statement objects. &lt;p&gt; The entries in the cache contains objects implementing the &lt;code&gt;java.sql.PreparedStatement&lt;/code&gt; interface, and they are inserted with a key object implementing the interface &lt;code&gt;StatementKey&lt;/code&gt;. The cached objects can be either &lt;code&gt;java.sql.PreparedStatement&lt;/code&gt; or &lt;code&gt;java.sql.CallableStatement&lt;/code&gt;. These two should be separated by using different types of keys. &lt;p&gt; The cache only contains free statement objects, and on a successful request for a cached statement the statement is removed from the cache. The cache is not intended to hold duplicate statements. The physical prepared statement should be (re-)inserted into the cache when &lt;code&gt;close&lt;/code&gt; is called on the logical prepared statement using it. &lt;p&gt; There is a maximum number of cached statements associated with the cache. If this number is exceeded, the oldest entry will be thrown out. One can always throw out an entry, because the fact that it is in the cache means it is free and not in use.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>statements</FieldName>
            <FieldType>LinkedHashMap</FieldType>
        </Field>
        <Field>
            <FieldName>statements</FieldName>
            <FieldType>StatementKey</FieldType>
        </Field>
        <Field>
            <FieldName>maxSize</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>JDBCStatementCache</MethodName>
            <MethodComment>/** 
 * Creates a new, empty JDBC statement cache.
 * @param maxSize maximum number of statements in the cache
 * @throws IllegalArgumentException if &lt;code&gt;maxSize&lt;/code&gt; is less than one
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>maxSize</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCached</MethodName>
            <MethodComment>/** 
 * Retrieves a cached prepared statement if one exists.
 * @param statementKey key for the prepared statement to look up
 * @return A cached statement if one exists, &lt;code&gt;null&lt;/code&gt; otherwise.
 */
</MethodComment>
            <ReturnType>PreparedStatement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>statementKey</ParamName>
                    <ParamType>StatementKey</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cacheStatement</MethodName>
            <MethodComment>/** 
 * Cache the prepared statement if it does not already exist.
 * @param statementKey key to insert prepared statement with
 * @param ps prepared statement to cache
 * @return &lt;code&gt;true&lt;/code&gt; if added to the cache, &lt;code&gt;false&lt;/code&gt; ifnot.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>statementKey</ParamName>
                    <ParamType>StatementKey</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ps</ParamName>
                    <ParamType>PreparedStatement</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [alreadyCached=this.statements.containsKey(statementKey)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>BoundedLinkedHashMap</MethodName>
            <MethodComment>/** 
 * Creates a bounded  {@link LinkedHashMap} with the specified maximumsize. &lt;p&gt; Iteration is by insertion-order.
 * @param maxCapacity maximum size of the map
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>maxCapacity</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeEldestEntry</MethodName>
            <MethodComment>/** 
 * Tells if an entry should be removed from the map. &lt;p&gt; If the cache has exceeded its maximum size, the oldest element will be marked for removal. The oldest element will be removed after the new element has been inserted.
 * @param eldest the element picked out for removal
 * @return &lt;code&gt;true&lt;/code&gt; if the element is to be removed,&lt;code&gt;false&lt;/code&gt; if not.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>eldest</ParamName>
                    <ParamType>StatementKey</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [remove=size() &gt; maxSize]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>