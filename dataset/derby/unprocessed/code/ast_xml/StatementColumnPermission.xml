<Class>
    <Id>1039</Id>
    <Package>org.apache.derby.iapi.sql.dictionary</Package>
    <ClassName>StatementColumnPermission</ClassName>
    <SuperClass>StatementTablePermission</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>StatementColumnPermission  /** 
 * This class describes a column permission used (required) by a statement.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>columns</FieldName>
            <FieldType>FormatableBitSet</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>StatementColumnPermission</MethodName>
            <MethodComment>/** 
 * Constructor for StatementColumnPermission. Creates an instance of column permission requested for the given access.
 * @param tableUUID	UUID of the table
 * @param privType	Access privilege requested
 * @param columns	List of columns
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tableUUID</ParamName>
                    <ParamType>UUID</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>privType</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columns</ParamName>
                    <ParamType>FormatableBitSet</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getColumns</MethodName>
            <MethodComment>/** 
 * Return list of columns that need access
 * @return	FormatableBitSet of columns
 */
</MethodComment>
            <ReturnType>FormatableBitSet</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>equals</MethodName>
            <MethodComment>/** 
 * Method to check if another instance of column access descriptor matches this. Used to ensure only one access descriptor for a table/columns of given privilege is created.
 * @param obj	Another instance of StatementPermission
 * @return	true if match
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>obj</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>check</MethodName>
            <MethodComment>/** 
 * @see StatementPermission#check
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lcc</ParamName>
                    <ParamType>LanguageConnectionContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>forGrant</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>activation</ParamName>
                    <ParamType>Activation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DataDictionary [dd=lcc.getDataDictionary()]</InnerVar>
                <InnerVar>ExecPreparedStatement [ps=activation.getPreparedStatement()]</InnerVar>
                <InnerVar>String [currentUserId=lcc.getCurrentUserId(activation)]</InnerVar>
                <InnerVar>FormatableBitSet [permittedColumns=null]</InnerVar>
                <InnerVar>FormatableBitSet [unresolvedColumns=(FormatableBitSet)columns.clone()]</InnerVar>
                <InnerVar>String [role=lcc.getCurrentRoleId(activation)]</InnerVar>
                <InnerVar>RoleGrantDescriptor [rd=null]</InnerVar>
                <InnerVar>TableDescriptor [td=getTableDescriptor(dd)]</InnerVar>
                <InnerVar>int [remains=unresolvedColumns.anySetBit()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addPermittedColumns</MethodName>
            <MethodComment>/** 
 * Add one user's set of permitted columns to a list of permitted columns.
 */
</MethodComment>
            <ReturnType>FormatableBitSet</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dd</ParamName>
                    <ParamType>DataDictionary</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>forGrant</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>authorizationId</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>permittedColumns</ParamName>
                    <ParamType>FormatableBitSet</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ColPermsDescriptor [perms=dd.getColumnPermissions(tableUUID,privType,false,authorizationId)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPermissionDescriptor</MethodName>
            <MethodComment>/** 
 * @see StatementPermission#getPermissionDescriptor
 */
</MethodComment>
            <ReturnType>PermissionsDescriptor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>authid</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dd</ParamName>
                    <ParamType>DataDictionary</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ColPermsDescriptor [colsPermsDesc=dd.getColumnPermissions(tableUUID,privType,false,authid)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPUBLIClevelColPermsDescriptor</MethodName>
            <MethodComment>/** 
 * This method gets called in execution phase after it is established that  all the required privileges exist for the given sql. This method gets  called by create view/trigger/constraint to record their dependency on  various privileges. Special code is required to track column level privileges. It is possible that some column level privileges are available to the passed authorizer id but the rest required column level privileges are available at PUBLIC level. In this method, we check if all the required column level privileges are found for the passed authorizer. If yes, then simply return null, indicating that no dependency is  required at PUBLIC level, because all the required privileges were found at the user level. But if some column level privileges are not available at user level, then they have to exist at the PUBLIC level when this method gets called.  
 */
</MethodComment>
            <ReturnType>PermissionsDescriptor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>authid</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dd</ParamName>
                    <ParamType>DataDictionary</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ColPermsDescriptor [colsPermsDesc=dd.getColumnPermissions(tableUUID,privType,false,authid)]</InnerVar>
                <InnerVar>FormatableBitSet [permittedColumns=colsPermsDesc.getColumns()]</InnerVar>
                <InnerVar>boolean [allColumnsCoveredByUserLevelPrivilege=true]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>allColumnsCoveredByUserOrPUBLIC</MethodName>
            <MethodComment>/** 
 * Returns false if the current role is necessary to cover the necessary permission(s).
 * @param authid authentication id of the current user
 * @param dd data dictionary
 * @return false if the current role is required
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>authid</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dd</ParamName>
                    <ParamType>DataDictionary</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ColPermsDescriptor [colsPermsDesc=dd.getColumnPermissions(tableUUID,privType,false,authid)]</InnerVar>
                <InnerVar>FormatableBitSet [permittedColumns=colsPermsDesc.getColumns()]</InnerVar>
                <InnerVar>FormatableBitSet [unresolvedColumns=(FormatableBitSet)columns.clone()]</InnerVar>
                <InnerVar>boolean [result=true]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>tryRole</MethodName>
            <MethodComment>/** 
 * Try to use the supplied role r to see what column privileges are we  entitled to. 
 * @param lcc language connection context
 * @param dd  data dictionary
 * @param forGrant true of a GRANTable permission is sought
 * @param r the role to inspect to see if it can supply the requiredprivileges return the set of columns on which we have privileges through this role
 */
</MethodComment>
            <ReturnType>FormatableBitSet</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lcc</ParamName>
                    <ParamType>LanguageConnectionContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dd</ParamName>
                    <ParamType>DataDictionary</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>forGrant</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>r</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>FormatableBitSet [permittedColumns=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>