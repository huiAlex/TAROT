<Class>
    <Id>1265</Id>
    <Package>org.apache.derby.iapi.sql.dictionary</Package>
    <ClassName>IndexLister</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>IndexLister  /** 
 * This interface gathers up some tasty information about the indices on a table from the DataDictionary.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>tableDescriptor</FieldName>
            <FieldType>TableDescriptor</FieldType>
        </Field>
        <Field>
            <FieldName>indexRowGenerators</FieldName>
            <FieldType>IndexRowGenerator[]</FieldType>
        </Field>
        <Field>
            <FieldName>indexConglomerateNumbers</FieldName>
            <FieldType>long[]</FieldType>
        </Field>
        <Field>
            <FieldName>indexNames</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>distinctIndexRowGenerators</FieldName>
            <FieldType>IndexRowGenerator[]</FieldType>
        </Field>
        <Field>
            <FieldName>distinctIndexConglomerateNumbers</FieldName>
            <FieldType>long[]</FieldType>
        </Field>
        <Field>
            <FieldName>distinctIndexNames</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>IndexLister</MethodName>
            <MethodComment>/** 
 * Make an IndexLister
 * @param tableDescriptor	Describes the table in question.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tableDescriptor</ParamName>
                    <ParamType>TableDescriptor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getIndexRowGenerators</MethodName>
            <MethodComment>/** 
 * Returns an array of all the index row generators on a table.
 * @return	an array of index row generators
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>IndexRowGenerator[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getIndexConglomerateNumbers</MethodName>
            <MethodComment>/** 
 * Returns an array of all the index conglomerate ids on a table.
 * @return	an array of index conglomerate ids
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>long[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDistinctIndexRowGenerators</MethodName>
            <MethodComment>/** 
 * Returns an array of distinct index row generators on a table, erasing entries for duplicate indexes (which share same conglomerate).
 * @return	an array of index row generators
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>IndexRowGenerator[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDistinctIndexConglomerateNumbers</MethodName>
            <MethodComment>/** 
 * Returns an array of distinct index conglomerate ids on a table. erasing entries for duplicate indexes (which share same conglomerate).
 * @return	an array of index conglomerate ids
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>long[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDistinctIndexNames</MethodName>
            <MethodComment>/** 
 * Returns an array of index names for all distinct indexes on a table. erasing entries for duplicate indexes (which share same conglomerate).
 * @return	an array of index names
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>String[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAllIndexes</MethodName>
            <MethodComment>/** 
 * Reads all the indices on the table and populates arrays with the corresponding index row generators and index conglomerate ids.
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [indexCount=0]</InnerVar>
                <InnerVar>ConglomerateDescriptor[] [cds=tableDescriptor.getConglomerateDescriptors()]</InnerVar>
                <InnerVar>long[] [workSpace=new long[cds.length - 1]]</InnerVar>
                <InnerVar>int [distinctIndexCount=0, duplicateIndex=workSpace.length - 1]</InnerVar>
                <InnerVar>int [duplicatePtr=workSpace.length - 1]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>