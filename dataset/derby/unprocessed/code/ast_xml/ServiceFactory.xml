<Class>
    <Id>908</Id>
    <Package>org.osgi.framework</Package>
    <ClassName>ServiceFactory</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ServiceFactory  /** 
 * Allows services to provide customized service objects in the OSGi environment. &lt;p&gt; When registering a service, a &lt;code&gt;ServiceFactory&lt;/code&gt; object can be used instead of a service object, so that the bundle developer can gain control of the specific service object granted to a bundle that is using the service. &lt;p&gt; When this happens, the &lt;code&gt;BundleContext.getService(ServiceReference)&lt;/code&gt; method calls the &lt;code&gt;ServiceFactory.getService&lt;/code&gt; method to create a service object specifically for the requesting bundle. The service object returned by the &lt;code&gt;ServiceFactory&lt;/code&gt; is cached by the Framework until the bundle releases its use of the service. &lt;p&gt; When the bundle's use count for the service equals zero (including the bundle stopping or the service being unregistered), the &lt;code&gt;ServiceFactory.ungetService&lt;/code&gt; method is called. &lt;p&gt; &lt;code&gt;ServiceFactory&lt;/code&gt; objects are only used by the Framework and are not made available to other bundles in the OSGi environment. The Framework may concurrently call a &lt;code&gt;ServiceFactory&lt;/code&gt;.
 * @see BundleContext#getService
 * @ThreadSafe
 * @version $Revision: 1.10 $
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getService</MethodName>
            <MethodComment>/** 
 * Creates a new service object. &lt;p&gt; The Framework invokes this method the first time the specified &lt;code&gt;bundle&lt;/code&gt; requests a service object using the &lt;code&gt;BundleContext.getService(ServiceReference)&lt;/code&gt; method. The service factory can then return a specific service object for each bundle. &lt;p&gt; The Framework caches the value returned (unless it is &lt;code&gt;null&lt;/code&gt;), and will return the same service object on any future call to &lt;code&gt;BundleContext.getService&lt;/code&gt; from the same bundle. &lt;p&gt; The Framework will check if the returned service object is an instance of all the classes named when the service was registered. If not, then &lt;code&gt;null&lt;/code&gt; is returned to the bundle.
 * @param bundle The bundle using the service.
 * @param registration The &lt;code&gt;ServiceRegistration&lt;/code&gt; object for theservice.
 * @return A service object that &lt;strong&gt;must &lt;/strong&gt; be an instance ofall the classes named when the service was registered.
 * @see BundleContext#getService
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>bundle</ParamName>
                    <ParamType>Bundle</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>registration</ParamName>
                    <ParamType>ServiceRegistration</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ungetService</MethodName>
            <MethodComment>/** 
 * Releases a service object. &lt;p&gt; The Framework invokes this method when a service has been released by a bundle. The service object may then be destroyed.
 * @param bundle The bundle releasing the service.
 * @param registration The &lt;code&gt;ServiceRegistration&lt;/code&gt; object for theservice.
 * @param service The service object returned by a previous call to the&lt;code&gt;ServiceFactory.getService&lt;/code&gt; method.
 * @see BundleContext#ungetService
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>bundle</ParamName>
                    <ParamType>Bundle</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>registration</ParamName>
                    <ParamType>ServiceRegistration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>service</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>