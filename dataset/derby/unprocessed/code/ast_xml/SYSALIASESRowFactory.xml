<Class>
    <Id>1661</Id>
    <Package>org.apache.derby.impl.sql.catalog</Package>
    <ClassName>SYSALIASESRowFactory</ClassName>
    <SuperClass>CatalogRowFactory</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>SYSALIASESRowFactory  /** 
 * Factory for creating a SYSALIASES row. Here are the directions for adding a new system supplied alias. Misc: All system supplied aliases are class aliases at this point. Additional arrays will need to be added if we supply system aliases of other types. The preloadAliasIDs array is an array of hard coded UUIDs for the system supplied aliases. The preloadAliases array is the array of aliases for the system supplied aliases.  This array is in alphabetical order by package and class in Xena.  Each alias is the uppercase class name of the alias. The preloadJavaClassNames array is the array of full package.class names for the system supplied aliases.  This array is in alphabetical order by package and class in Xena.   SYSALIASES_NUM_BOOT_ROWS is the number of boot rows in sys.sysaliases in a new database.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>SYSALIASES_COLUMN_COUNT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SYSALIASES_ALIASID</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SYSALIASES_ALIAS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SYSALIASES_SCHEMAID</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SYSALIASES_JAVACLASSNAME</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SYSALIASES_ALIASTYPE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SYSALIASES_NAMESPACE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SYSALIASES_SYSTEMALIAS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SYSALIASES_ALIASINFO</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SYSALIASES_SPECIFIC_NAME</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SYSALIASES_INDEX1_ID</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SYSALIASES_INDEX2_ID</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SYSALIASES_INDEX3_ID</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>uniqueness</FieldName>
            <FieldType>boolean[]</FieldType>
        </Field>
        <Field>
            <FieldName>indexColumnPositions</FieldName>
            <FieldType>int[][]</FieldType>
        </Field>
        <Field>
            <FieldName>uuids</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>SYSALIASESRowFactory</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>uuidf</ParamName>
                    <ParamType>UUIDFactory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ef</ParamName>
                    <ParamType>ExecutionFactory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dvf</ParamName>
                    <ParamType>DataValueFactory</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;initInfo;[SYSALIASES_COLUMN_COUNT, "SYSALIASES", indexColumnPositions, uniqueness, uuids]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeRow</MethodName>
            <MethodComment>/** 
 * Make a SYSALIASES row
 * @return	Row suitable for inserting into SYSALIASES.
 * @exception StandardException thrown on failure
 */
</MethodComment>
            <ReturnType>ExecRow</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>td</ParamName>
                    <ParamType>TupleDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parent</ParamName>
                    <ParamType>TupleDescriptor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DataValueDescriptor [col]</InnerVar>
                <InnerVar>String [schemaID=null]</InnerVar>
                <InnerVar>String [javaClassName=null]</InnerVar>
                <InnerVar>String [sAliasType=null]</InnerVar>
                <InnerVar>String [aliasID=null]</InnerVar>
                <InnerVar>String [aliasName=null]</InnerVar>
                <InnerVar>String [specificName=null]</InnerVar>
                <InnerVar>char [cAliasType=AliasInfo.ALIAS_TYPE_PROCEDURE_AS_CHAR]</InnerVar>
                <InnerVar>char [cNameSpace=AliasInfo.ALIAS_NAME_SPACE_PROCEDURE_AS_CHAR]</InnerVar>
                <InnerVar>boolean [systemAlias=false]</InnerVar>
                <InnerVar>AliasInfo [aliasInfo=null]</InnerVar>
                <InnerVar>ExecRow [row=getExecutionFactory().getValueRow(SYSALIASES_COLUMN_COUNT)]</InnerVar>
                <InnerVar>String [sNameSpace=new String(new char[]{cNameSpace})]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>row;setColumn;[SYSALIASES_ALIASID, new SQLChar(aliasID)]</InnerMethodInvoke>
                <InnerMethodInvoke>row;setColumn;[SYSALIASES_ALIAS, new SQLVarchar(aliasName)]</InnerMethodInvoke>
                <InnerMethodInvoke>row;setColumn;[SYSALIASES_SCHEMAID, new SQLChar(schemaID)]</InnerMethodInvoke>
                <InnerMethodInvoke>row;setColumn;[SYSALIASES_JAVACLASSNAME, dvf.getLongvarcharDataValue(javaClassName)]</InnerMethodInvoke>
                <InnerMethodInvoke>row;setColumn;[SYSALIASES_ALIASTYPE, new SQLChar(sAliasType)]</InnerMethodInvoke>
                <InnerMethodInvoke>row;setColumn;[SYSALIASES_NAMESPACE, new SQLChar(sNameSpace)]</InnerMethodInvoke>
                <InnerMethodInvoke>row;setColumn;[SYSALIASES_SYSTEMALIAS, new SQLBoolean(systemAlias)]</InnerMethodInvoke>
                <InnerMethodInvoke>row;setColumn;[SYSALIASES_ALIASINFO, new UserType(aliasInfo)]</InnerMethodInvoke>
                <InnerMethodInvoke>row;setColumn;[SYSALIASES_SPECIFIC_NAME, new SQLVarchar(specificName)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildDescriptor</MethodName>
            <MethodComment>/** 
 * Make a AliasDescriptor out of a SYSALIASES row
 * @param row a SYSALIASES row
 * @param parentTupleDescriptor	Null for this kind of descriptor.
 * @param dd dataDictionary
 * @exception StandardException thrown on failure
 */
</MethodComment>
            <ReturnType>TupleDescriptor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>ExecRow</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parentTupleDescriptor</ParamName>
                    <ParamType>TupleDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dd</ParamName>
                    <ParamType>DataDictionary</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>char [cAliasType]</InnerVar>
                <InnerVar>char [cNameSpace]</InnerVar>
                <InnerVar>DataValueDescriptor [col]</InnerVar>
                <InnerVar>String [aliasID]</InnerVar>
                <InnerVar>UUID [aliasUUID]</InnerVar>
                <InnerVar>String [aliasName]</InnerVar>
                <InnerVar>String [javaClassName]</InnerVar>
                <InnerVar>String [sAliasType]</InnerVar>
                <InnerVar>String [sNameSpace]</InnerVar>
                <InnerVar>String [typeStr]</InnerVar>
                <InnerVar>boolean [systemAlias=false]</InnerVar>
                <InnerVar>AliasInfo [aliasInfo=null]</InnerVar>
                <InnerVar>UUID [schemaUUID=col.isNull() ? null : getUUIDFactory().recreateUUID(col.getString())]</InnerVar>
                <InnerVar>String [specificName=col.getString()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildColumnList</MethodName>
            <MethodComment>/** 
 * Builds a list of columns suitable for creating this Catalog. DERBY-1734 fixed an issue where older code created the BOOLEAN column SYSTEMALIAS with maximum length 0 instead of 1. DERBY-1742 was opened to track if upgrade changes are needed.
 * @return array of SystemColumn suitable for making this catalog.
 */
</MethodComment>
            <ReturnType>SystemColumn[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>