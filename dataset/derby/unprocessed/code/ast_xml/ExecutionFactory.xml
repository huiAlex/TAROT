<Class>
    <Id>804</Id>
    <Package>org.apache.derby.iapi.sql.execute</Package>
    <ClassName>ExecutionFactory</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ExecutionFactory  /** 
 * This is the factory for creating a factories needed by execution per connection, and the context to hold them. &lt;p&gt; There is expected to be one of these configured per database. &lt;p&gt; If a factory is needed outside of execution (say, data dictionary or compilation), then it belongs in the LanguageConnectionContext.
 * @see org.apache.derby.iapi.sql.conn.LanguageConnectionContext
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>MODULE</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getResultSetFactory</MethodName>
            <MethodComment>/** 
 * Only one result set factory is needed for a database in the system. We require that an execution factory be configured for each database. Each execution factory then needs to know about the result set factory it is maintaining for its database, so that it can provide it through calls to this method. So, we reuse the result set factory by making it  available to each connection in that connection's execution context.
 * @return the result set factory for this database.
 */
</MethodComment>
            <ReturnType>ResultSetFactory</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getResultSetStatisticsFactory</MethodName>
            <MethodComment>/** 
 * Get the ResultSetStatisticsFactory from this ExecutionFactory.
 * @return  The result set statistics factory associated with thisExecutionFactory
 * @exception StandardException     Thrown on error
 */
</MethodComment>
            <ReturnType>ResultSetStatisticsFactory</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getXPLAINFactory</MethodName>
            <MethodComment>/** 
 * Get the XPLAINFactory from this ExecutionFactory.
 * @return  The xplain factory associated with thisExecutionContext
 * @exception StandardException     Thrown on error
 */
</MethodComment>
            <ReturnType>XPLAINFactoryIF</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newExecutionContext</MethodName>
            <MethodComment>/** 
 * Get the ExecutionFactory from this ExecutionContext. We want an execution context so that we can push it onto the stack.  We could instead require the implementation push it onto the stack for us, but this way we know which context object exactly was pushed onto the stack.
 * @param cm  the context manager
 */
</MethodComment>
            <ReturnType>ExecutionContext</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cm</ParamName>
                    <ParamType>ContextManager</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getResultColumnDescriptor</MethodName>
            <MethodComment>/** 
 * Create an execution time ResultColumnDescriptor from a  compile time RCD.
 * @param compileRCD	The compile time RCD.
 * @return The execution time ResultColumnDescriptor
 */
</MethodComment>
            <ReturnType>ResultColumnDescriptor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>compileRCD</ParamName>
                    <ParamType>ResultColumnDescriptor</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getResultDescription</MethodName>
            <MethodComment>/** 
 * Create a result description given parameters for it.
 */
</MethodComment>
            <ReturnType>ResultDescription</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>columns</ParamName>
                    <ParamType>ResultColumnDescriptor[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>statementType</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getScanQualifier</MethodName>
            <MethodComment>/** 
 * Get an array of ScanQualifiers for a scan.  ScanQualifiers are used with the DataDictionary.
 * @param numQualifiers	The number of ScanQualifiers to get.
 */
</MethodComment>
            <ReturnType>ScanQualifier[][]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>numQualifiers</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>releaseScanQualifier</MethodName>
            <MethodComment>/** 
 * Release a ScanQualifier[] (back to the pool or free it).
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>scanQualifiers</ParamName>
                    <ParamType>ScanQualifier[][]</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getQualifier</MethodName>
            <MethodComment>/** 
 * Get a Qualifier to use with a scan of a conglomerate.
 * @param columnId	The store id of the column to qualify
 * @param operator	One of Orderable.ORDER_OP_EQUALS,Orderable.ORDER_OP_LESSTHAN, or Orderable.ORDER_OP_LESSOREQUALS
 * @param orderableGetter	A generated method that returns theOrderable to be compared with the column
 * @param activation	The Activation that acts as the receiver for thegenerated method
 * @param orderedNulls	True means that null == null for the sake ofthis Qualifier
 * @param unknownRV	The value to return if the comparison betweenthe column and the Orderable value returns the unknown truth value
 * @param negateCompareResult	True means to negate the result of the comparison.So, for example, to do a &amp;gt; comparison, you would pass ORDER_OP_LESSOREQUALS and set negate to true.
 * @param variantType	The variantType for the qualifier's orderable.(Determines whether or not to cache the value.)
 * @return	A new Qualifier
 */
</MethodComment>
            <ReturnType>Qualifier</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>columnId</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>operator</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>orderableGetter</ParamName>
                    <ParamType>GeneratedMethod</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>activation</ParamName>
                    <ParamType>Activation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>orderedNulls</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>unknownRV</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>negateCompareResult</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>variantType</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRowChanger</MethodName>
            <MethodComment>/** 
 * Create a new RowChanger for performing update and delete operations based on full before and after rows.
 * @param heapConglom	Conglomerate # for the heap
 * @param heapSCOCI The SCOCI for the heap.
 * @param heapDCOCI The DCOCI for the heap.
 * @param irgs the IndexRowGenerators for the table's indexes. We usepositions in this array as local id's for indexes. To support updates, only indexes that change need be included.
 * @param indexCIDS the conglomerateids for the table's idexes. indexCIDS[ix] corresponds to the same index as irgs[ix].
 * @param indexSCOCIs the SCOCIs for the table's idexes. indexSCOCIs[ix] corresponds to the same index as irgs[ix].
 * @param indexDCOCIs the DCOCIs for the table's idexes. indexDCOCIs[ix] corresponds to the same index as irgs[ix].
 * @param numberOfColumns Number of columns in a full row.
 * @param tc the transaction controller
 * @param streamStorableHeapColIds Column ids of stream storablecolumns. (0 based, Only needed for sync. null if none or not needed).
 * @param activation	The Activation.
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>RowChanger</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>heapConglom</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>heapSCOCI</ParamName>
                    <ParamType>StaticCompiledOpenConglomInfo</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>heapDCOCI</ParamName>
                    <ParamType>DynamicCompiledOpenConglomInfo</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>irgs</ParamName>
                    <ParamType>IndexRowGenerator[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indexCIDS</ParamName>
                    <ParamType>long[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indexSCOCIs</ParamName>
                    <ParamType>StaticCompiledOpenConglomInfo[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indexDCOCIs</ParamName>
                    <ParamType>DynamicCompiledOpenConglomInfo[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>numberOfColumns</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tc</ParamName>
                    <ParamType>TransactionController</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>changedColumnIds</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>streamStorableHeapColIds</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>activation</ParamName>
                    <ParamType>Activation</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRowChanger</MethodName>
            <MethodComment>/** 
 * Create a new RowChanger for doing insert update and delete operations based on partial before and after. 
 * @param heapConglom	Conglomerate # for the heap
 * @param heapSCOCI The SCOCI for the heap.
 * @param heapDCOCI The DCOCI for the heap.
 * @param irgs the IndexRowGenerators for the table's indexes. We usepositions in this array as local id's for indexes. To support updates, only indexes that change need be included.
 * @param indexCIDS the conglomerateids for the table's idexes. indexCIDS[ix] corresponds to the same index as irgs[ix].
 * @param indexSCOCIs the SCOCIs for the table's idexes. indexSCOCIs[ix] corresponds to the same index as irgs[ix].
 * @param indexDCOCIs the DCOCIs for the table's idexes. indexDCOCIs[ix] corresponds to the same index as irgs[ix].
 * @param numberOfColumns Number of columns in partial row.
 * @param tc the transaction controller 
 * @param changedColumnIds array of 1 based ints of columnsto be updated.  Used by update only.
 * @param baseRowReadList the columns in the base row that wereread (1 based)
 * @param baseRowReadMap baseRowReadMap[heapColId]-&amp;gt;readRowColId(0 based)
 * @param streamStorableColIds Column ids of stream storablecolumns. (0 based, Only needed for sync. null if none or not needed).
 * @param activation	The Activation.
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>RowChanger</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>heapConglom</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>heapSCOCI</ParamName>
                    <ParamType>StaticCompiledOpenConglomInfo</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>heapDCOCI</ParamName>
                    <ParamType>DynamicCompiledOpenConglomInfo</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>irgs</ParamName>
                    <ParamType>IndexRowGenerator[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indexCIDS</ParamName>
                    <ParamType>long[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indexSCOCIs</ParamName>
                    <ParamType>StaticCompiledOpenConglomInfo[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indexDCOCIs</ParamName>
                    <ParamType>DynamicCompiledOpenConglomInfo[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>numberOfColumns</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tc</ParamName>
                    <ParamType>TransactionController</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>changedColumnIds</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>baseRowReadList</ParamName>
                    <ParamType>FormatableBitSet</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>baseRowReadMap</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>streamStorableColIds</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>activation</ParamName>
                    <ParamType>Activation</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getValueRow</MethodName>
            <MethodComment>/** 
 * This returns a new row that is storable but not indexable 
 */
</MethodComment>
            <ReturnType>ExecRow</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>numColumns</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getIndexableRow</MethodName>
            <MethodComment>/** 
 * This returns an indexable row
 */
</MethodComment>
            <ReturnType>ExecIndexRow</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>numColumns</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getIndexableRow</MethodName>
            <MethodComment>/** 
 * This returns the value row as an indexable row 
 */
</MethodComment>
            <ReturnType>ExecIndexRow</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>valueRow</ParamName>
                    <ParamType>ExecRow</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>