<Class>
    <Id>738</Id>
    <Package>org.apache.derby.iapi.store.raw.xact</Package>
    <ClassName>TransactionFactory</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Corruptable</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>TransactionFactory  /** 
 * This module is intended to be used only within the RawStore. RawStore functionality is accessed only through the RawStoreFactory interface. The transaction manager is responsible for: &lt;UL&gt; &lt;LI&gt;Generating unique transaction identifiers. &lt;LI&gt;Keeping a list of all open transactions within the raw store. &lt;/UL&gt;
 * @see RawStoreFactory
 * @see Transaction
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>MODULE</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getLockFactory</MethodName>
            <MethodComment>/** 
 * Get the LockFactory to use with this store.
 */
</MethodComment>
            <ReturnType>LockFactory</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getXAResourceManager</MethodName>
            <MethodComment>/** 
 * Return the module providing XAresource interface to the transaction table.
 * @exception StandardException Standard Derby exception policy.
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startTransaction</MethodName>
            <MethodComment>/** 
 * Start a new transaction within the given raw store. This method will push a transaction context as described in RawStoreFactory.startTransaction
 * @param contextMgr is the context manager to use.  It must be the currentcontext manager.
 * @param transName is the transaction name. It will be displayed in thetransactiontable VTI.
 * @see RawStoreFactory#startTransaction
 * @exception StandardException Standard Derby error policy.
 */
</MethodComment>
            <ReturnType>RawTransaction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rsf</ParamName>
                    <ParamType>RawStoreFactory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>contextMgr</ParamName>
                    <ParamType>ContextManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>transName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startNestedReadOnlyUserTransaction</MethodName>
            <MethodComment>/** 
 * Start a new read only transaction within the given raw store. This  method will push a transaction context as described in RawStoreFactory.startNestedTransaction
 * @param rsf                      the RawStoreFactory
 * @param parentTransaction   the parent transaction
 * @param compatibilitySpace   compatibility space to use for locks.
 * @param contextMgr           is the context manager to use.  It must be the current context manager.
 * @param transName            is the transaction name. It will be displayed in the transactiontable VTI.
 * @see RawStoreFactory#startNestedReadOnlyUserTransaction
 * @exception StandardException Standard Derby error policy.
 */
</MethodComment>
            <ReturnType>RawTransaction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rsf</ParamName>
                    <ParamType>RawStoreFactory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parentTransaction</ParamName>
                    <ParamType>RawTransaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>compatibilitySpace</ParamName>
                    <ParamType>CompatibilitySpace</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>contextMgr</ParamName>
                    <ParamType>ContextManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>transName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startNestedUpdateUserTransaction</MethodName>
            <MethodComment>/** 
 * Start a new update transaction within the given raw store. This method  will push a transaction context as described in RawStoreFactory.startNestedTransaction
 * @param rsf                      the RawStoreFactory
 * @param parentTransaction   the parent transaction
 * @param contextMgr               is the context manager to use.  It mustbe the current context manager.
 * @param transName                is the transaction name. It will be displayed in the transactiontable VTI.
 * @param flush_log_on_xact_end    By default should the transaction commitand abort be synced to the log.  Normal usage should pick true, unless there is specific performance need and usage works correctly if a commit can be  lost on system crash.
 * @see RawStoreFactory#startNestedUpdateUserTransaction
 * @exception StandardException Standard Derby error policy.
 */
</MethodComment>
            <ReturnType>RawTransaction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rsf</ParamName>
                    <ParamType>RawStoreFactory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parentTransaction</ParamName>
                    <ParamType>RawTransaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>contextMgr</ParamName>
                    <ParamType>ContextManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>transName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>flush_log_on_xact_end</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startGlobalTransaction</MethodName>
            <MethodComment>/** 
 * Start a new transaction within the given raw store. This method will push a transaction context as described in RawStoreFactory.startTransaction
 * @param format_id  the format id part of the Xid - ie. Xid.getFormatId().
 * @param global_id  the global transaction identifier part of XID - ie.Xid.getGlobalTransactionId().
 * @param branch_id  The branch qualifier of the Xid - ie.Xid.getBranchQaulifier()
 * @param contextMgr is the context manager to use.  It must be the currentcontext manager.
 * @see RawStoreFactory#startGlobalTransaction
 * @exception StandardException Standard Derby error policy.
 */
</MethodComment>
            <ReturnType>RawTransaction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rsf</ParamName>
                    <ParamType>RawStoreFactory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>contextMgr</ParamName>
                    <ParamType>ContextManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>format_id</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>global_id</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>branch_id</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findUserTransaction</MethodName>
            <MethodComment>/** 
 * Find a user transaction within the given raw store and the given contextMgr.  If no user transaction exist, then start one with name transName. This method will push a transaction context as described in RawStoreFactory.startTransaction
 * @see RawStoreFactory#findUserTransaction
 * @see RawStoreFactory#startTransaction
 * @exception StandardException Standard Derby error policy.
 */
</MethodComment>
            <ReturnType>RawTransaction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rsf</ParamName>
                    <ParamType>RawStoreFactory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>contextMgr</ParamName>
                    <ParamType>ContextManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>transName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startNestedTopTransaction</MethodName>
            <MethodComment>/** 
 * Start a new nested top transaction within the given raw store. This method will push a transaction context as described in RawStoreFactory.startNestedTopTransaction
 * @see RawStoreFactory#startTransaction(ContextManager,String)
 * @exception StandardException Standard Derby error policy.
 */
</MethodComment>
            <ReturnType>RawTransaction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rsf</ParamName>
                    <ParamType>RawStoreFactory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>contextMgr</ParamName>
                    <ParamType>ContextManager</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startInternalTransaction</MethodName>
            <MethodComment>/** 
 * Start a new internal transaction within the given raw store. This  method will push a transaction context as described in  RawStoreFactory.startInternalTransaction
 * @see RawStoreFactory#startTransaction
 * @exception StandardException Standard Derby error policy.
 */
</MethodComment>
            <ReturnType>RawTransaction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rsf</ParamName>
                    <ParamType>RawStoreFactory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>contextMgr</ParamName>
                    <ParamType>ContextManager</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findTransaction</MethodName>
            <MethodComment>/** 
 * Find a transaction using a transactionId and make the passed in transaction assume the identity and properties of that transaction. Used in recovery only.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>id</ParamName>
                    <ParamType>TransactionId</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tran</ParamName>
                    <ParamType>RawTransaction</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>resetTranId</MethodName>
            <MethodComment>/** 
 * Reset any resettable transaction Id 
 * @exception StandardException Standard Derby error policy.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>firstUpdateInstant</MethodName>
            <MethodComment>/** 
 * The first log instant that belongs to a transaction that is still active in the raw store. This is the first log record of the longest running transaction at this moment. 
 */
</MethodComment>
            <ReturnType>LogInstant</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>handlePreparedXacts</MethodName>
            <MethodComment>/** 
 * Run through all prepared transactions known to this factory  and restore their state such that they remain after recovery, and can be found and handled by a XA transaction manager.  This includes creating a context manager for each, pushing a xact context, and reclaiming update locks on all data changed by the transaction. Used only in recovery.
 * @exception StandardException Derby Standard Error policy
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rsf</ParamName>
                    <ParamType>RawStoreFactory</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rollbackAllTransactions</MethodName>
            <MethodComment>/** 
 * Rollback and close all transactions known to this factory using a passed in transaction.  Used only in recovery.
 * @param recoveryTransaction the transaction used to rollback
 * @exception StandardException Derby Standard Error policy
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>recoveryTransaction</ParamName>
                    <ParamType>RawTransaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rsf</ParamName>
                    <ParamType>RawStoreFactory</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>submitPostCommitWork</MethodName>
            <MethodComment>/** 
 * Submit a post commit work to the post commit daemon. The work is always added to the deamon, regardless of the state it returns.
 * @return true if the daemon indicates it is being overloaded,false it's happy. &lt;MT&gt; must be MT-safe
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>work</ParamName>
                    <ParamType>Serviceable</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setRawStoreFactory</MethodName>
            <MethodComment>/** 
 * make Transaction factory aware of which raw store factory it belongs to
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rsf</ParamName>
                    <ParamType>RawStoreFactory</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>noActiveUpdateTransaction</MethodName>
            <MethodComment>/** 
 * Returns true if the transaction factory has no active updating  transaction
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasPreparedXact</MethodName>
            <MethodComment>/** 
 * Check if there are any prepared transanctions. &lt;P&gt;MT - unsafe, called during boot, which is single threaded.
 * @return   &lt;tt&gt;true&lt;/tt&gt; if prepared transactions exist,&lt;tt&gt;false&lt;/tt&gt; otherwise.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createFinished</MethodName>
            <MethodComment>/** 
 * Database creation finished
 * @exception StandardException Standard Derby exception policy.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTransactionTable</MethodName>
            <MethodComment>/** 
 * Return the transaction table so it can get logged with the checkpoint log record.
 */
</MethodComment>
            <ReturnType>Formatable</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>useTransactionTable</MethodName>
            <MethodComment>/** 
 * Use this transaction table, which is gotten from a checkpoint operation.  Use ONLY during recovery.
 * @exception StandardException Standard Derby exception policy.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>transactionTable</ParamName>
                    <ParamType>Formatable</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTransactionInfo</MethodName>
            <MethodComment>/** 
 * @see org.apache.derby.iapi.store.access.AccessFactory#getTransactionInfo
 */
</MethodComment>
            <ReturnType>TransactionInfo[]</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>blockBackupBlockingOperations</MethodName>
            <MethodComment>/** 
 * Checks if there any backup blocking operations are in progress and  prevents new ones from starting until the backup is finished. 
 * @param wait if &lt;tt&gt;true&lt;/tt&gt;, waits for the current backup blocking operations in progress to finish.
 * @return     &lt;tt&gt;true&lt;/tt&gt; if there are no backup blocking operations in progress. &lt;tt&gt;false&lt;/tt&gt; otherwise.
 * @exception StandardException if interrupted or a runtime exception occurs.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>wait</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>unblockBackupBlockingOperations</MethodName>
            <MethodComment>/** 
 * Backup completed. Allow backup blocking operations. 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>