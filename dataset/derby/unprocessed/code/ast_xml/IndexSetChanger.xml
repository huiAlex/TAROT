<Class>
    <Id>1417</Id>
    <Package>org.apache.derby.impl.sql.execute</Package>
    <ClassName>IndexSetChanger</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>IndexSetChanger  /** 
 * Perform Index maintenace associated with DML operations for a table's indexes.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>irgs</FieldName>
            <FieldType>IndexRowGenerator[]</FieldType>
        </Field>
        <Field>
            <FieldName>indexCIDS</FieldName>
            <FieldType>long[]</FieldType>
        </Field>
        <Field>
            <FieldName>indexDCOCIs</FieldName>
            <FieldType>DynamicCompiledOpenConglomInfo[]</FieldType>
        </Field>
        <Field>
            <FieldName>indexSCOCIs</FieldName>
            <FieldType>StaticCompiledOpenConglomInfo[]</FieldType>
        </Field>
        <Field>
            <FieldName>indexNames</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>baseCC</FieldName>
            <FieldType>ConglomerateController</FieldType>
        </Field>
        <Field>
            <FieldName>baseRowReadMap</FieldName>
            <FieldType>FormatableBitSet</FieldType>
        </Field>
        <Field>
            <FieldName>tc</FieldName>
            <FieldType>TransactionController</FieldType>
        </Field>
        <Field>
            <FieldName>rowHolder</FieldName>
            <FieldType>TemporaryRowHolderImpl</FieldType>
        </Field>
        <Field>
            <FieldName>indexChangers</FieldName>
            <FieldType>IndexChanger[]</FieldType>
        </Field>
        <Field>
            <FieldName>lockMode</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>fixOnUpdate</FieldName>
            <FieldType>boolean[]</FieldType>
        </Field>
        <Field>
            <FieldName>isOpen</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>NO_INDEXES</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>UPDATE_INDEXES</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>ALL_INDEXES</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>whatIsOpen</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>isolationLevel</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>activation</FieldName>
            <FieldType>Activation</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>IndexSetChanger</MethodName>
            <MethodComment>/** 
 * Create a new IndexSetChanger
 * @param irgs the IndexRowGenerators for the table's indexes. We usepositions in this array as local id's for indexes.
 * @param indexCIDS the conglomerate ids for the table's indexes.indexCIDS[ix] corresponds to the same index as irgs[ix].
 * @param indexSCOCIs the SCOCIs for the table's idexes. indexSCOCIs[ix] corresponds to the same index as irgs[ix].
 * @param indexDCOCIs the DCOCIs for the table's idexes. indexDCOCIs[ix] corresponds to the same index as irgs[ix].
 * @param baseCC a ConglomerateController for the base table.
 * @param tc	a TransactionController for managing temporary conglomerates
 * @param lockMode	The lock mode (granularity) for the indexes.
 * @param baseRowReadMap Map of columns read in.  1 based.
 * @param isolationLevel	Isolation level to use
 * @param activation	Current activation
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>irgs</ParamName>
                    <ParamType>IndexRowGenerator[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indexCIDS</ParamName>
                    <ParamType>long[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indexSCOCIs</ParamName>
                    <ParamType>StaticCompiledOpenConglomInfo[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indexDCOCIs</ParamName>
                    <ParamType>DynamicCompiledOpenConglomInfo[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indexNames</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>baseCC</ParamName>
                    <ParamType>ConglomerateController</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tc</ParamName>
                    <ParamType>TransactionController</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lockMode</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>baseRowReadMap</ParamName>
                    <ParamType>FormatableBitSet</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isolationLevel</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>activation</ParamName>
                    <ParamType>Activation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>open</MethodName>
            <MethodComment>/** 
 * Open this IndexSetchanger.
 * @param fixOnUpdate indicates which indexes to correct dueto an update. The entries in this array must be in the same order as the entries in the irgs array that was passed to the constructor.
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fixOnUpdate</ParamName>
                    <ParamType>boolean[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setRowHolder</MethodName>
            <MethodComment>/** 
 * Set the row holder for all underlying changers to use. If the row holder is set, underlying changers  wont bother  saving copies of rows needed for deferred processing.  Also, it will never close the passed in rowHolder.
 * @param rowHolder	the row holder
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rowHolder</ParamName>
                    <ParamType>TemporaryRowHolderImpl</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>openIndexes</MethodName>
            <MethodComment>/** 
 * Open the indexes that must be fixed if they are not already open.
 * @param whatToOpen must be one of ALL_INDEXES or UPDATE_INDEXES.
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>whatToOpen</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>delete</MethodName>
            <MethodComment>/** 
 * Perform index maintenance associated with deleting a row from a table.
 * @param baseRow the deleted row.
 * @param baseRowLocation the deleted row's base conglomeratelocation
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>baseRow</ParamName>
                    <ParamType>ExecRow</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>baseRowLocation</ParamName>
                    <ParamType>RowLocation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;openIndexes;[ALL_INDEXES]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>insert</MethodName>
            <MethodComment>/** 
 * Perform index maintenance associated with insering a row into a table.
 * @param baseRow the row.
 * @param baseRowLocation the row's base conglomeratelocation
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>baseRow</ParamName>
                    <ParamType>ExecRow</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>baseRowLocation</ParamName>
                    <ParamType>RowLocation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;openIndexes;[ALL_INDEXES]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>update</MethodName>
            <MethodComment>/** 
 * Perform index maintenance associated with updating a row in a table.
 * @param oldBaseRow the old image of the row.
 * @param newBaseRow the new image of the row.
 * @param baseRowLocation the row's base conglomeratelocation
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>oldBaseRow</ParamName>
                    <ParamType>ExecRow</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>newBaseRow</ParamName>
                    <ParamType>ExecRow</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>baseRowLocation</ParamName>
                    <ParamType>RowLocation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;openIndexes;[UPDATE_INDEXES]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setBaseCC</MethodName>
            <MethodComment>/** 
 * Propagate the heap's ConglomerateController to all of the underlying index changers.
 * @param baseCC	The heap's ConglomerateController.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>baseCC</ParamName>
                    <ParamType>ConglomerateController</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>finish</MethodName>
            <MethodComment>/** 
 * Finish processing the changes for this IndexSetChanger.  This means doing the deferred inserts for updates of unique indexes.
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>close</MethodName>
            <MethodComment>/** 
 * Close this IndexSetChanger.
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment>/** 
 * Create a string describing the state of this IndexSetChanger
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>