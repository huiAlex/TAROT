<Class>
    <Id>434</Id>
    <Package>org.apache.derby.iapi.services.locks</Package>
    <ClassName>LockOwner</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>LockOwner  /** 
 * Interface for classes that represent an owner of the locks within a compatibility space.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>noWait</MethodName>
            <MethodComment>/** 
 * Tells whether lock requests should time out immediately if the lock cannot be granted at once, even if  {@code C_LockFactory.TIMED_WAIT}was specified in the lock request. &lt;p&gt; Normally, this method should return  {@code false}, but in some very special cases it could be appropriate to return  {@code true}. One example is when a stored prepared statement (SPS) is compiled and stored in a system table. In order to prevent exclusive locks in the system table from being held until the transaction that triggered the compilation is finished, the SPS will be compiled in a nested transaction that is committed and releases all locks upon completion. There is however a risk that the transaction that triggered the compilation is holding locks that the nested transaction needs, in which case the nested transaction will time out. The timeout will be detected by the calling code, and the operation will be retried in the parent transaction. To avoid long waits in the cases where the nested transaction runs into a lock conflict with its parent, the nested transaction's  {@code LockOwner} instance could return {@code true} andthereby making it possible to detect lock conflicts instantly.
 * @return {@code true} if timed waits should time out immediately,{@code false} otherwise
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isNestedOwner</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Return true if this is a nested owner, e.g., a nested user transaction. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nestsUnder</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Return true if this owner nests under another owner. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>other</ParamName>
                    <ParamType>LockOwner</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>