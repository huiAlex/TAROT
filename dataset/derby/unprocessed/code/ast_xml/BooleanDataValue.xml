<Class>
    <Id>288</Id>
    <Package>org.apache.derby.iapi.types</Package>
    <ClassName>BooleanDataValue</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>DataValueDescriptor</SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getBoolean</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>and</MethodName>
            <MethodComment>/** 
 * The SQL AND operator.  This provides SQL semantics for AND with unknown truth values - consult any standard SQL reference for an explanation.
 * @param otherValue	The other BooleanDataValue to AND with this one
 * @return	this AND otherValue
 */
</MethodComment>
            <ReturnType>BooleanDataValue</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>otherValue</ParamName>
                    <ParamType>BooleanDataValue</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>or</MethodName>
            <MethodComment>/** 
 * The SQL OR operator.  This provides SQL semantics for OR with unknown truth values - consult any standard SQL reference for an explanation.
 * @param otherValue	The other BooleanDataValue to OR with this one
 * @return	this OR otherValue
 */
</MethodComment>
            <ReturnType>BooleanDataValue</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>otherValue</ParamName>
                    <ParamType>BooleanDataValue</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>is</MethodName>
            <MethodComment>/** 
 * The SQL IS operator - consult any standard SQL reference for an explanation. Implements the following truth table: otherValue | TRUE    | FALSE   | UNKNOWN this    |---------------------------- | TRUE    | TRUE    | FALSE   | FALSE FALSE   | FALSE   | TRUE    | FALSE UNKNOWN | FALSE   | FALSE   | TRUE
 * @param otherValue	BooleanDataValue to compare to. May be TRUE, FALSE, or UNKNOWN.
 * @return	whether this IS otherValue
 */
</MethodComment>
            <ReturnType>BooleanDataValue</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>otherValue</ParamName>
                    <ParamType>BooleanDataValue</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isNot</MethodName>
            <MethodComment>/** 
 * Implements NOT IS. This reverses the sense of the is() call.
 * @param otherValue	BooleanDataValue to compare to. May be TRUE, FALSE, or UNKNOWN.
 * @return	NOT( this IS otherValue )
 */
</MethodComment>
            <ReturnType>BooleanDataValue</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>otherValue</ParamName>
                    <ParamType>BooleanDataValue</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>throwExceptionIfFalse</MethodName>
            <MethodComment>/** 
 * Throw an exception with the given SQLState if this BooleanDataValue is false. This method is useful for evaluating constraints.
 * @param SQLState		The SQLState of the exception to throw ifthis SQLBoolean is false.
 * @param tableName		The name of the table to include in the exceptionmessage.
 * @param constraintName	The name of the failed constraint to includein the exception message.
 * @return	this
 * @exception StandardException	Thrown if this BooleanDataValueis false.
 */
</MethodComment>
            <ReturnType>BooleanDataValue</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>SQLState</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>constraintName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>throwExceptionIfImmediateAndFalse</MethodName>
            <MethodComment>/** 
 * If this value is false and we have a deferred constraint, remember the violation and proceed, else throw.  See also {@link org.apache.derby.impl.sql.compile.AndNoShortCircuitNode}.
 * @param SQLState      The SQLState of the exception to throw ifthis SQLBoolean is false.
 * @param tableName     The name of the table to include in the exceptionmessage.
 * @param constraintName    The name of the failed constraint to includein the exception message.
 * @param a             The activation
 * @param savedUUIDIdx  The saved object number of the constraint's UUID.
 * @return  this
 * @exception StandardException   Thrown if this BooleanDataValueis false.
 */
</MethodComment>
            <ReturnType>BooleanDataValue</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>SQLState</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>constraintName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>a</ParamName>
                    <ParamType>Activation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>savedUUIDIdx</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setValue</MethodName>
            <MethodComment>/** 
 * Set the value of this BooleanDataValue.
 * @param theValue	Contains the boolean value to set this BooleanDataValueto.  Null means set this BooleanDataValue to null.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>theValue</ParamName>
                    <ParamType>Boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>equals</MethodName>
            <MethodComment>/** 
 * Tell whether a BooleanDataValue has the given value.  This is useful for short-circuiting.
 * @param value		The value to look for
 * @return	true if the BooleanDataValue contains the given value.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getImmutable</MethodName>
            <MethodComment>/** 
 * Return an immutable BooleanDataValue with the same value as this.
 * @return An immutable BooleanDataValue with the same value as this.
 */
</MethodComment>
            <ReturnType>BooleanDataValue</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>