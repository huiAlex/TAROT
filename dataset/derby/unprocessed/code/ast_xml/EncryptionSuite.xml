<Class>
    <Id>989</Id>
    <Package>org.apache.derbyTesting.functionTests.suites</Package>
    <ClassName>EncryptionSuite</ClassName>
    <SuperClass>BaseJDBCTestCase</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>EncryptionSuite  /** 
 * A suite that runs a set of tests using encrypted databases with a number of algorithms. This is a general encryption test to see if tests run without any problems when encryption is enabled. &lt;BR&gt; It is not for testing of encryption functionality, e.g. testing that bootPassword must be a certain length etc. That should be in a specific JUnit test that probably needs to control database creation more carefully than this. &lt;BR&gt; The same set of tests is run for each algorithm, and each algorithm (obviously) uses a single use database with the required encryption setup.
 * @see Decorator#encryptedDatabase(Test)
 * @see Decorator#encryptedDatabase(Test,String)
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>EncryptionSuite</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>suite</MethodName>
            <MethodComment>/** 
 * Runs tests with a set of encryption algorithms. The set comes from the set of algorithms used for the same purpose in the old harness.
 */
</MethodComment>
            <ReturnType>Test</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>BaseTestSuite [suite=new BaseTestSuite("Encrpytion Suite")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>encryptedSuite</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Test</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>algorithm</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>baseSuite</MethodName>
            <MethodComment>/** 
 * Set of tests which are run for each encryption algorithm.
 */
</MethodComment>
            <ReturnType>Test</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>algorithm</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BaseTestSuite [suite=new BaseTestSuite("Encryption Algorithm: " + algorithm)]</InnerVar>
                <InnerVar>Properties [sysProps=new Properties()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>suite;addTestSuite;[EncryptionSuite.class]</InnerMethodInvoke>
                <InnerMethodInvoke>sysProps;put;["derby.optimizer.optimizeJoinOrder", "false"]</InnerMethodInvoke>
                <InnerMethodInvoke>sysProps;put;["derby.optimizer.ruleBasedOptimization", "true"]</InnerMethodInvoke>
                <InnerMethodInvoke>sysProps;put;["derby.optimizer.noTimeout", "true"]</InnerMethodInvoke>
                <InnerMethodInvoke>suite;addTestSuite;[AccessTest.class]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setUp</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>tearDown</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Statement [st=createStatement()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testEncryptedDBConnection</MethodName>
            <MethodComment>/** 
 * Very simple test that ensures we can get a connection to the booted encrypted database.
 * @throws SQLException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>getConnection();close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>