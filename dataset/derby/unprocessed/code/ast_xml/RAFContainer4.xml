<Class>
    <Id>24</Id>
    <Package>org.apache.derby.impl.store.raw.data</Package>
    <ClassName>RAFContainer4</ClassName>
    <SuperClass>RAFContainer</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>RAFContainer4  /** 
 * RAFContainer4 overrides a few methods in FileContainer/RAFContainer in order to use FileChannel from Java 1.4's New IO framework to issue multiple IO operations to the same file concurrently instead of strictly serializing IO operations using a mutex on the container object. Since we compile with Java 1.4, the override "annotations" are inside the method javadoc headers. &lt;p&gt; Note that our requests for multiple concurrent IOs may be serialized further down in the IO stack - this is entirely up to the JVM and OS. However, at least in Linux on Sun's 1.4.2_09 JVM we see the desired behavior: The FileChannel.read/write(ByteBuffer buf, long position) calls map to pread/pwrite system calls, which enable efficient IO to the same file descriptor by multiple threads. &lt;p&gt; This whole class should be merged back into RAFContainer when Derby officially stops supporting Java 1.3. &lt;p&gt; Significant behavior changes from RAFContainer: &lt;ol&gt; &lt;li&gt; Multiple concurrent IOs permitted. &lt;li&gt; State changes to the container (create, open, close) can now happen while IO is in progress due to the lack of locking. Closing a container while IO is in progress will cause IOExceptions in the thread calling readPage or writePage. If this happens something is probably amiss anyway. The iosInProgress variable is used in an attempt to detect this should it happen while running a debug build. &lt;/ol&gt;
 * @see java.nio.channels.FileChannel
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>ourChannel</FieldName>
            <FieldType>FileChannel</FieldType>
        </Field>
        <Field>
            <FieldName>channelCleanupMonitor</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>threadsInPageIO</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>restoreChannelInProgress</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>giveUpIO</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>giveUpIOm</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>iosInProgress</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>currentIdentity</FieldName>
            <FieldType>ContainerKey</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>RAFContainer4</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>factory</ParamName>
                    <ParamType>BaseDataFileFactory</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getChannel</MethodName>
            <MethodComment>/** 
 * Return the  {@code FileChannel} for the specified{@code StorageRandomAccessFile} if it is a {@code RandomAccessFile}. Otherwise, return  {@code null}.
 * @param file the file to get the channel for
 * @return a {@code FileChannel} if {@code file} is an instance of{@code RandomAccessFile},  {@code null} otherwise
 */
</MethodComment>
            <ReturnType>FileChannel</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>file</ParamName>
                    <ParamType>StorageRandomAccessFile</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getChannel</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Return the file channel for the current value of the  {@code fileData}field. If  {@code fileData} doesn't support file channels, return{@code null}. &lt;/p&gt; &lt;p&gt; Callers of this method must synchronize on the container object since two shared fields ( {@code fileData} and {@code ourChannel}) are accessed. &lt;/p&gt;
 * @return a {@code FileChannel} object, if supported, or {@code null}
 */
</MethodComment>
            <ReturnType>FileChannel</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>openContainer</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>newIdentity</ParamName>
                    <ParamType>ContainerKey</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createContainer</MethodName>
            <MethodComment>/** 
 * override of RAFContainer#createContainer
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>newIdentity</ParamName>
                    <ParamType>ContainerKey</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reopen</MethodName>
            <MethodComment>/** 
 * When the existing channel ( {@code ourChannel}) has been closed due to interrupt, we need to reopen the underlying RAF to get a fresh channel so we can resume IO.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;reopenContainer;[currentIdentity]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>closeContainer</MethodName>
            <MethodComment>/** 
 * override of RAFContainer#closeContainer
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readPage</MethodName>
            <MethodComment>/** 
 * Read a page into the supplied array. &lt;p/&gt; override of RAFContainer#readPage &lt;p/&gt; &lt;BR&gt; MT - thread safe
 * @exception IOException exception reading page
 * @exception StandardException Standard Derby error policy
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pageNumber</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pageData</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;readPage;[pageNumber, pageData, -1L]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readPage</MethodName>
            <MethodComment>/** 
 * Read a page into the supplied array. &lt;p/&gt; override of RAFContainer#readPage &lt;p/&gt; &lt;BR&gt; MT - thread safe
 * @param pageNumber the page number to read data from, or -1 (called fromgetEmbryonicPage)
 * @param pageData  the buffer to read data into
 * @param offset -1 normally (not used since offset is computed frompageNumber), but used if pageNumber == -1 (getEmbryonicPage)
 * @exception IOException exception reading page
 * @exception StandardException Standard Derby error policy
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pageNumber</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pageData</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>offset</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [holdsThis=Thread.holdsLock(this)]</InnerVar>
                <InnerVar>boolean [holdsAllocCache=Thread.holdsLock(allocCache)]</InnerVar>
                <InnerVar>boolean [stealthMode=holdsThis || holdsAllocCache]</InnerVar>
                <InnerVar>boolean [success=false]</InnerVar>
                <InnerVar>int [retries=InterruptStatus.MAX_INTERRUPT_RETRIES]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readPage0</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pageNumber</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pageData</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>offset</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>FileChannel [ioChannel]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writePage</MethodName>
            <MethodComment>/** 
 * Write a page from the supplied array. &lt;p/&gt; override of RAFContainer#writePage &lt;p/&gt; &lt;BR&gt; MT - thread safe
 * @exception StandardException Standard Derby error policy
 * @exception IOException IO error accessing page
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pageNumber</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pageData</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>syncPage</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [stealthMode=Thread.holdsLock(allocCache)]</InnerVar>
                <InnerVar>boolean [success=false]</InnerVar>
                <InnerVar>int [retries=InterruptStatus.MAX_INTERRUPT_RETRIES]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>handleClosedChannel</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; This method handles what to do when, during a NIO operation we receive a {@code ClosedChannelException}. Note the specialization hierarchy: &lt;/p&gt; &lt;p&gt; {@code ClosedChannelException} -&amp;gt; {@code AsynchronousCloseException} -&amp;gt;{@code ClosedByInterruptException}&lt;/p&gt; &lt;p&gt; If  {@code e} is a ClosedByInterruptException, we normally startcontainer recovery, i.e. we need to reopen the random access file so we get get a new interruptible channel and continue IO. &lt;/p&gt; &lt;p&gt; If  {@code e} is a {@code AsynchronousCloseException} or a plain {@code ClosedChannelException}, the behavior depends of  {@code stealthMode}: &lt;/p&gt; &lt;p&gt; If  {@code stealthMode == false}, the method will wait for another thread tp finish recovering the IO channel before returning. &lt;/p&gt; &lt;p&gt; If  {@code stealthMode == true}, the method throws  {@code InterruptDetectedException}, allowing retry at a higher level in the code.  The reason for this is that we sometimes need to release monitors on objects needed by the recovery thread. &lt;/p&gt;
 * @param e Should be an instance of {@code ClosedChannelException}.
 * @param stealthMode If {@code true}, do retry at a higher level
 * @param retries Give up waiting for another thread to reopen the channelwhen  {@code retries} reaches 0. Only applicable if {@code stealthMode == false}.
 * @throws InterruptDetectedException if retry at higher level is required{@code stealthMode == true}.
 * @throws StandardException standard error policy, incl. when we give upwaiting for another thread to reopen channel
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>e</ParamName>
                    <ParamType>ClosedChannelException</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stealthMode</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>retries</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>awaitRestoreChannel</MethodName>
            <MethodComment>/** 
 * Use when seeing an exception during IO and when another thread is presumably doing the recovery. &lt;p/&gt; If  {@code stealthMode == false}, wait for another thread to recover the container after an interrupt. If  {@code stealthMode == true}, throw internal exception  {@code InterruptDetectedException} to do retry fromhigher in the stack. &lt;p/&gt; If  {@code stealthMode == false}, maximum wait time for the container to become available again is determined by the product  {@code InterruptStatus.MAX_INTERRUPT_RETRIES  InterruptStatus.INTERRUPT_RETRY_SLEEP}. There is a chance this thread will not see any recovery occuring (yet), in which case it waits for a bit and just returns, so the caller must retry IO until success. &lt;p/&gt; If for some reason the recovering thread has given up on resurrecting the container, cf  {@code #giveUpIO}, the method throws  {@code FILE_IO_INTERRUPTED}.
 * @param e the exception we saw during IO
 * @param stealthMode true if the thread doing IO in stealth mode
 * @throws StandardException {@code InterruptDetectedException} and normalerror policy
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>e</ParamName>
                    <ParamType>Exception</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stealthMode</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [timesWaited=-1]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>recoverContainerAfterInterrupt</MethodName>
            <MethodComment>/** 
 * Use this when the thread has received a ClosedByInterruptException (or, prior to JDK 1.7 it may also be AsynchronousCloseException - a bug) exception during IO and its interruped flag is also set. This makes this thread a likely candicate to do container recovery, unless another thread started it already, cf. return value.
 * @param whence caller site (debug info)
 * @param stealthMode don't update threadsInPageIO if true
 * @return true if we did recovery, false if we saw someone else do it andabstained
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>whence</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stealthMode</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [retries=InterruptStatus.MAX_INTERRUPT_RETRIES]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writePage0</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pageNumber</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pageData</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>syncPage</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>FileChannel [ioChannel]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeAtOffset</MethodName>
            <MethodComment>/** 
 * Write a sequence of bytes at the given offset in a file.  This method operates in &lt;em&gt;stealth mode&lt;/em&gt;, see doc for  {@link #handleClosedChannel handleClosedChannel}. This presumes that IO retry happens at a higher level, i.e. the caller(s) must be prepared to handle  {@code InterruptDetectedException}. &lt;p/&gt; This method overrides FileContainer#writeAtOffset. &lt;p/&gt;
 * @param file the file to write to
 * @param bytes the bytes to write
 * @param offset the offset to start writing at
 * @throws IOException if an I/O error occurs while writing
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>file</ParamName>
                    <ParamType>StorageRandomAccessFile</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>bytes</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>offset</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>FileChannel [ioChannel=getChannel(file)]</InnerVar>
                <InnerVar>boolean [success=false]</InnerVar>
                <InnerVar>boolean [stealthMode=true]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEmbryonicPage</MethodName>
            <MethodComment>/** 
 * Read an embryonic page (that is, a section of the first alloc page that is so large that we know all the borrowed space is included in it) from the specified offset in a  {@code StorageRandomAccessFile}. &lt;p/&gt; override of FileContainer#getEmbryonicPage &lt;p/&gt;
 * @param file the file to read from
 * @param offset where to start reading (normally{@code FileContainer.FIRST_ALLOC_PAGE_OFFSET})
 * @return a byte array containing the embryonic page
 * @throws IOException if an I/O error occurs while reading
 * @throws StandardException if thread is interrupted.
 */
</MethodComment>
            <ReturnType>byte[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>file</ParamName>
                    <ParamType>StorageRandomAccessFile</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>offset</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>FileChannel [ioChannel=getChannel(file)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readFull</MethodName>
            <MethodComment>/** 
 * Attempts to fill buf completely from start until it's full. &lt;p/&gt; FileChannel has no readFull() method, so we roll our own. &lt;p/&gt;
 * @param dstBuffer buffer to read into
 * @param srcChannel channel to read from
 * @param position file position from where to read
 * @throws IOException if an I/O error occurs while reading
 * @throws StandardException If thread is interrupted.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dstBuffer</ParamName>
                    <ParamType>ByteBuffer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>srcChannel</ParamName>
                    <ParamType>FileChannel</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>position</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeFull</MethodName>
            <MethodComment>/** 
 * Attempts to write buf completely from start until end, at the given position in the destination fileChannel. &lt;p/&gt; FileChannel has no writeFull() method, so we roll our own. &lt;p/&gt;
 * @param srcBuffer buffer to write
 * @param dstChannel channel to write to
 * @param position file position to start writing at
 * @throws IOException if an I/O error occurs while writing
 * @throws StandardException If thread is interrupted.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>srcBuffer</ParamName>
                    <ParamType>ByteBuffer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dstChannel</ParamName>
                    <ParamType>FileChannel</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>position</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>debugTrace</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>msg</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>