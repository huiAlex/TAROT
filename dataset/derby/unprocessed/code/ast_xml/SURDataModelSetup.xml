<Class>
    <Id>2093</Id>
    <Package>org.apache.derbyTesting.functionTests.tests.jdbcapi</Package>
    <ClassName>SURDataModelSetup</ClassName>
    <SuperClass>BaseJDBCTestSetup</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>SURDataModelSetup  /** 
 * This class is a decorator for the Scrollable Updatable Resultset tests.  It sets up a datamodel and populates it with data.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>model</FieldName>
            <FieldType>SURDataModel</FieldType>
        </Field>
        <Field>
            <FieldName>recordCount</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>MODEL_WITH_NO_KEYS</FieldName>
            <FieldType>SURDataModel</FieldType>
        </Field>
        <Field>
            <FieldName>MODEL_WITH_PK</FieldName>
            <FieldType>SURDataModel</FieldType>
        </Field>
        <Field>
            <FieldName>MODEL_WITH_SECONDARY_KEY</FieldName>
            <FieldType>SURDataModel</FieldType>
        </Field>
        <Field>
            <FieldName>MODEL_WITH_PK_AND_SECONDARY_KEY</FieldName>
            <FieldType>SURDataModel</FieldType>
        </Field>
        <Field>
            <FieldName>values</FieldName>
            <FieldType>Set</FieldType>
        </Field>
        <Field>
            <FieldName>name</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>SURDataModelSetup</MethodName>
            <MethodComment>/** 
 * Constructor.
 * @param test test to decorate with this setup
 * @param model enumerator for which model to use.(Alternatively we could use a subclass for each model)
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>test</ParamName>
                    <ParamType>Test</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>model</ParamName>
                    <ParamType>SURDataModel</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createDataModel</MethodName>
            <MethodComment>/** 
 * Creates a datamodel for testing Scrollable Updatable ResultSets and populates the database model with data.
 * @param model enumerator for which model to use
 * @param con connection to database
 * @param records number of records in the data model
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>model</ParamName>
                    <ParamType>SURDataModel</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>con</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>records</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Statement [statement=con.createStatement()]</InnerVar>
                <InnerVar>PreparedStatement [ps=con.prepareStatement("insert into t1 values (?,?,?,?,?)")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>BaseJDBCTestCase;dropTable;[con, "T1"]</InnerMethodInvoke>
                <InnerMethodInvoke>statement;execute;[model.getCreateTableStatement()]</InnerMethodInvoke>
                <InnerMethodInvoke>BaseTestCase;println;[model.getCreateTableStatement()]</InnerMethodInvoke>
                <InnerMethodInvoke>ps;executeBatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>ps;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>statement;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>con;commit;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createDataModel</MethodName>
            <MethodComment>/** 
 * Creates a datamodel for testing Scrollable Updatable ResultSets and populates the database model with data. The model will be set up with the number of records as defined by the recordCount attribute.
 * @param model enumerator for which model to use
 * @param con connection to database
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>model</ParamName>
                    <ParamType>SURDataModel</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>con</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;createDataModel;[model, con, recordCount]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setUp</MethodName>
            <MethodComment>/** 
 * Creates a datamodel for testing Scrollable Updatable ResultSets and populates the database model with data.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;println;["Setting up datamodel: " + model]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>tearDown</MethodName>
            <MethodComment>/** 
 * Delete the datamodel
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>values</MethodName>
            <MethodComment>/** 
 * Returns an unmodifyable set of all valid data models
 */
</MethodComment>
            <ReturnType>Set</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasPrimaryKey</MethodName>
            <MethodComment>/** 
 * Returns true if this model has primary key 
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasSecondaryKey</MethodName>
            <MethodComment>/** 
 * Returns true if this model has a secondary key 
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCreateTableStatement</MethodName>
            <MethodComment>/** 
 * Returns the string for creating the table
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment>/** 
 * Returns a string representation of the model 
 * @return string representation of this object
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>SURDataModel</MethodName>
            <MethodComment>/** 
 * Constructor
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>printStackTrace</MethodName>
            <MethodComment>/** 
 * Prints the stack trace. If run in the harness, the harness will mark the test as failed if this method has been called.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Throwable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>BaseJDBCTestCase;printStackTrace;[t]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>