<Class>
    <Id>659</Id>
    <Package>org.apache.derby.impl.sql.compile</Package>
    <ClassName>OperatorNode</ClassName>
    <SuperClass>ValueNode</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>OperatorNode  /** 
 * Abstract base-class for the various operator nodes: UnaryOperatorNode, BinaryOperatorNode and TernarnyOperatorNode.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>OperatorNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cm</ParamName>
                    <ParamType>ContextManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>pushSqlXmlUtil</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Generate code that pushes an SqlXmlUtil instance onto the stack. The instance will be created and cached in the activation's constructor, so that we don't need to create a new instance for every row. &lt;/p&gt; &lt;p&gt; If the  {@code xmlQuery} parameter is non-null, there will also be codethat compiles the query when the SqlXmlUtil instance is created. &lt;/p&gt;
 * @param acb builder for the class in which the generated code lives
 * @param mb builder for the method that implements this operator
 * @param xmlQuery the XML query to be executed by the operator, or{@code null} if this isn't an XMLEXISTS or XMLQUERY operator
 * @param xmlOpName the name of the operator (ignored if {@code xmlQuery}is  {@code null})
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>acb</ParamName>
                    <ParamType>ExpressionClassBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mb</ParamName>
                    <ParamType>MethodBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>xmlQuery</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>xmlOpName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LocalField [sqlXmlUtil=acb.newFieldDeclaration(Modifier.PRIVATE | Modifier.FINAL,SqlXmlUtil.class.getName())]</InnerVar>
                <InnerVar>MethodBuilder [constructor=acb.getConstructor()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>constructor;pushNewStart;[SqlXmlUtil.class.getName()]</InnerMethodInvoke>
                <InnerMethodInvoke>constructor;pushNewComplete;[0]</InnerMethodInvoke>
                <InnerMethodInvoke>constructor;putField;[sqlXmlUtil]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;getField;[sqlXmlUtil]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>