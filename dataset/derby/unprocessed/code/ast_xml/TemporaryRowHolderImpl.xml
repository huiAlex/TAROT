<Class>
    <Id>1741</Id>
    <Package>org.apache.derby.impl.sql.execute</Package>
    <ClassName>TemporaryRowHolderImpl</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>TemporaryRowHolder</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>TemporaryRowHolderImpl  /** 
 * This is a class that is used to temporarily (non-persistently) hold rows that are used in language execution.  It will store them in an array, or a temporary conglomerate, depending on the number of rows.   &lt;p&gt; It is used for deferred DML processing.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>DEFAULT_OVERFLOWTHRESHOLD</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>STATE_UNINIT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>STATE_INSERT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>STATE_DRAIN</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>rowArray</FieldName>
            <FieldType>ExecRow[]</FieldType>
        </Field>
        <Field>
            <FieldName>lastArraySlot</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>numRowsIn</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>state</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>CID</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>conglomCreated</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>cc</FieldName>
            <FieldType>ConglomerateController</FieldType>
        </Field>
        <Field>
            <FieldName>properties</FieldName>
            <FieldType>Properties</FieldType>
        </Field>
        <Field>
            <FieldName>scan</FieldName>
            <FieldType>ScanController</FieldType>
        </Field>
        <Field>
            <FieldName>resultDescription</FieldName>
            <FieldType>ResultDescription</FieldType>
        </Field>
        <Field>
            <FieldName>activation</FieldName>
            <FieldType>Activation</FieldType>
        </Field>
        <Field>
            <FieldName>isUniqueStream</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>isVirtualMemHeap</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>uniqueIndexCreated</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>positionIndexCreated</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>uniqueIndexConglomId</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>positionIndexConglomId</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>uniqueIndex_cc</FieldName>
            <FieldType>ConglomerateController</FieldType>
        </Field>
        <Field>
            <FieldName>positionIndex_cc</FieldName>
            <FieldType>ConglomerateController</FieldType>
        </Field>
        <Field>
            <FieldName>uniqueIndexRow</FieldName>
            <FieldType>DataValueDescriptor[]</FieldType>
        </Field>
        <Field>
            <FieldName>positionIndexRow</FieldName>
            <FieldType>DataValueDescriptor[]</FieldType>
        </Field>
        <Field>
            <FieldName>destRowLocation</FieldName>
            <FieldType>RowLocation</FieldType>
        </Field>
        <Field>
            <FieldName>position_sqllong</FieldName>
            <FieldType>SQLLongint</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>TemporaryRowHolderImpl</MethodName>
            <MethodComment>/** 
 * Uses the default overflow to a conglomerate threshold (5).
 * @param activation the activation
 * @param properties the properties of the original table.  Usedto help the store use optimal page size, etc.
 * @param resultDescription the result description.  Relevant for the getResultDescriptioncall on the result set returned by getResultSet.  May be null
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>activation</ParamName>
                    <ParamType>Activation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>properties</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>resultDescription</ParamName>
                    <ParamType>ResultDescription</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>TemporaryRowHolderImpl</MethodName>
            <MethodComment>/** 
 * Uses the default overflow to a conglomerate threshold (5).
 * @param activation the activation
 * @param properties the properties of the original table.  Usedto help the store use optimal page size, etc.
 * @param resultDescription the result description.  Relevant for the getResultDescriptioncall on the result set returned by getResultSet.  May be null
 * @param isUniqueStream - true , if it has to be temporary row holder unique stream
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>activation</ParamName>
                    <ParamType>Activation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>properties</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>resultDescription</ParamName>
                    <ParamType>ResultDescription</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isUniqueStream</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>TemporaryRowHolderImpl</MethodName>
            <MethodComment>/** 
 * Create a temporary row holder with the defined overflow to conglom
 * @param activation the activation
 * @param properties the properties of the original table.  Usedto help the store use optimal page size, etc.
 * @param resultDescription the result description.  Relevant for the getResultDescriptioncall on the result set returned by getResultSet.  May be null
 * @param overflowToConglomThreshold on an attempt to insertthis number of rows, the rows will be put into a temporary conglomerate.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>activation</ParamName>
                    <ParamType>Activation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>properties</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>resultDescription</ParamName>
                    <ParamType>ResultDescription</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>overflowToConglomThreshold</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isUniqueStream</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isVirtualMemHeap</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cloneRow</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ExecRow</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>inputRow</ParamName>
                    <ParamType>ExecRow</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DataValueDescriptor[] [cols=inputRow.getRowArray()]</InnerVar>
                <InnerVar>int [ncols=cols.length]</InnerVar>
                <InnerVar>ExecRow [cloned=((ValueRow)inputRow).cloneMe()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>insert</MethodName>
            <MethodComment>/** 
 * Insert a row
 * @param inputRow the row to insert 
 * @exception StandardException on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>inputRow</ParamName>
                    <ParamType>ExecRow</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [status=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isRowAlreadyExist</MethodName>
            <MethodComment>/** 
 * Maintain an unique index based on the input row's row location in the base table, this index make sures that we don't insert duplicate rows  into the temporary heap.
 * @param inputRow  the row we are inserting to temporary row holder 
 * @exception StandardException on error
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>inputRow</ParamName>
                    <ParamType>ExecRow</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DataValueDescriptor [rlColumn]</InnerVar>
                <InnerVar>RowLocation [baseRowLocation]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>insertToPositionIndex</MethodName>
            <MethodComment>/** 
 * Maintain an index that will allow us to read  from the  temporary heap in the order we inserted.
 * @param position - the number of the row we are inserting into heap
 * @param rl the row to Location in the temporary heap 
 * @exception StandardException on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>position</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rl</ParamName>
                    <ParamType>RowLocation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>position_sqllong;setValue;[position]</InnerMethodInvoke>
                <InnerMethodInvoke>positionIndex_cc;insert;[positionIndexRow]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getResultSet</MethodName>
            <MethodComment>/** 
 * Get a result set for scanning what has been inserted so far.
 * @return a result set to use
 */
</MethodComment>
            <ReturnType>CursorResultSet</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>TransactionController [tc=activation.getTransactionController()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>truncate</MethodName>
            <MethodComment>/** 
 * Purge the row holder of all its rows. Resets the row holder so that it can accept new inserts.  A cheap way to recycle a row holder.
 * @exception StandardException on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTemporaryConglomId</MethodName>
            <MethodComment>/** 
 * Accessor to get the id of the temporary conglomerate. Temporary  conglomerates have negative ids. An id equal to zero means that no  temporary conglomerate has been created.
 * @return Conglomerate ID of temporary conglomerate
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPositionIndexConglomId</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeIndexProperties</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Properties</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>indexRowArray</ParamName>
                    <ParamType>DataValueDescriptor[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>conglomId</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [nCols=indexRowArray.length]</InnerVar>
                <InnerVar>Properties [props=new Properties()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>props;put;["allowDuplicates", "false"]</InnerMethodInvoke>
                <InnerMethodInvoke>props;put;["nKeyFields", String.valueOf(nCols)]</InnerMethodInvoke>
                <InnerMethodInvoke>props;put;["nUniqueColumns", String.valueOf(nCols - 1)]</InnerMethodInvoke>
                <InnerMethodInvoke>props;put;["rowLocationColumn", String.valueOf(nCols - 1)]</InnerMethodInvoke>
                <InnerMethodInvoke>props;put;["baseConglomerateId", String.valueOf(conglomId)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setRowHolderTypeToUniqueStream</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>close</MethodName>
            <MethodComment>/** 
 * Clean up
 * @exception StandardException on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>TransactionController [tc=activation.getTransactionController()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>