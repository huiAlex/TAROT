<Class>
    <Id>2129</Id>
    <Package>org.apache.derby.client.net</Package>
    <ClassName>NetCursor</ClassName>
    <SuperClass>Cursor</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>netResultSet_</FieldName>
            <FieldType>NetResultSet</FieldType>
        </Field>
        <Field>
            <FieldName>netAgent_</FieldName>
            <FieldType>NetAgent</FieldType>
        </Field>
        <Field>
            <FieldName>qrydscTypdef_</FieldName>
            <FieldType>Typdef</FieldType>
        </Field>
        <Field>
            <FieldName>maximumRowSize_</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>blocking_</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>typeToUseForComputingDataLength_</FieldName>
            <FieldType>int[]</FieldType>
        </Field>
        <Field>
            <FieldName>isGraphic_</FieldName>
            <FieldType>boolean[]</FieldType>
        </Field>
        <Field>
            <FieldName>extdtaPositions_</FieldName>
            <FieldType>HashMap</FieldType>
        </Field>
        <Field>
            <FieldName>extdtaPositions_</FieldName>
            <FieldType>Integer</FieldType>
        </Field>
        <Field>
            <FieldName>extdtaData_</FieldName>
            <FieldType>ArrayList</FieldType>
        </Field>
        <Field>
            <FieldName>extdtaData_</FieldName>
            <FieldType>byte[]</FieldType>
        </Field>
        <Field>
            <FieldName>rtnextrow_</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>qryclsimpEnabled_</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>NetCursor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>netAgent</ParamName>
                    <ParamType>NetAgent</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>NetCursor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>netAgent</ParamName>
                    <ParamType>NetAgent</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>qryprctyp</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>calculateColumnOffsetsForRow_</MethodName>
            <MethodComment>/** 
 * Calculate the column offsets for a row. &lt;p&gt; Pseudo-code: &lt;ol&gt; &lt;li&gt;parse thru the current row in dataBuffer computing column offsets&lt;/li&gt; &lt;li&gt;if (we hit the super.lastValidBytePosition, ie. encounter partial row) &lt;ol&gt; &lt;li&gt;shift partial row bytes to beginning of dataBuffer (this.shiftPartialRowToBeginning())&lt;/li&gt; &lt;li&gt;reset current row position (also done by this.shiftPartialRowToBeginning())&lt;/li&gt; &lt;li&gt;send and recv continue-query into commBuffer (rs.flowContinueQuery())&lt;/li&gt; &lt;li&gt;parse commBuffer up to QRYDTA (rs.flowContinueQuery())&lt;/li&gt; &lt;li&gt;copy query data from reply's commBuffer to our dataBuffer (this.copyQrydta())&lt;/li&gt; &lt;/ol&gt; &lt;/ol&gt;
 * @param rowIndex row index
 * @param allowServerFetch if true, allow fetching more data fromserver
 * @return &lt;code&gt;true&lt;/code&gt; if the current row position is avalid row position.
 * @exception SqlException
 * @exception DisconnectException
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rowIndex</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>allowServerFetch</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [daNullIndicator=CodePoint.NULLDATA]</InnerVar>
                <InnerVar>int [colNullIndicator=CodePoint.NULLDATA]</InnerVar>
                <InnerVar>int [length]</InnerVar>
                <InnerVar>int[] [columnDataPosition=null]</InnerVar>
                <InnerVar>int[] [columnDataComputedLength=null]</InnerVar>
                <InnerVar>boolean[] [columnDataIsNull=null]</InnerVar>
                <InnerVar>boolean [receivedDeleteHoleWarning=false]</InnerVar>
                <InnerVar>boolean [receivedRowUpdatedWarning=false]</InnerVar>
                <InnerVar>NetSqlca[] [netSqlca=this.parseSQLCARD(qrydscTypdef_)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setIsUpdataDeleteHole;[rowIndex, receivedDeleteHoleWarning]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setIsRowUpdated;[receivedRowUpdatedWarning]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
                <ExceptionType>DisconnectException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>scanDataBufferForEndOfData</MethodName>
            <MethodComment>/** 
 * Scan the data buffer to see if end of data (SQL state 02000) has been received. This method should only be called when the cursor is being closed since the pointer to the current row can be modified.
 * @exception SqlException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readFdocaInt</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [i=SignedBinary.getInt(dataBuffer_,position_)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkForSplitRowAndComplete;[4]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DisconnectException</ExceptionType>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readFdocaOneByte</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkForSplitRowAndComplete;[1]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DisconnectException</ExceptionType>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readFdocaOneByte</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>index</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkForSplitRowAndComplete;[1, index]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DisconnectException</ExceptionType>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readFdocaBytes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>byte[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>length</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>byte[] [b=new byte[length]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkForSplitRowAndComplete;[length]</InnerMethodInvoke>
                <InnerMethodInvoke>System;arraycopy;[dataBuffer_, position_, b, 0, length]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DisconnectException</ExceptionType>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readFdocaTwoByteLength</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkForSplitRowAndComplete;[2]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DisconnectException</ExceptionType>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readFdocaTwoByteLength</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>index</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkForSplitRowAndComplete;[2, index]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DisconnectException</ExceptionType>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>skipFdocaBytes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>length</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkForSplitRowAndComplete;[length]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DisconnectException</ExceptionType>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>skipFdocaBytes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>length</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>index</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkForSplitRowAndComplete;[length, index]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DisconnectException</ExceptionType>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>shiftPartialRowToBeginning</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [length=lastValidBytePosition_ - currentRowPosition_]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>dataBufferStream_;reset;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>adjustColumnOffsetsForColumnsPreviouslyCalculated</MethodName>
            <MethodComment>/** 
 * Adjust column offsets after fetching the next part of a split row.
 * @param index the index of the column that was split, or -1 when notfetching column data
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>index</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>resetCurrentRowPosition</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>calculateLobColumnPositionsForRow</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [currentPosition=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isNonTrivialDataLob</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>index</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>long [length=0L]</InnerVar>
                <InnerVar>int [position=columnDataPosition_[index]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clearLobData_</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>extdtaData_;clear;[]</InnerMethodInvoke>
                <InnerMethodInvoke>extdtaPositions_;clear;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseSQLCARD</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>NetSqlca[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>typdef</ParamName>
                    <ParamType>Typdef</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DisconnectException</ExceptionType>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseSQLCAGRP</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>NetSqlca[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>typdef</ParamName>
                    <ParamType>Typdef</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [sqlcode=readFdocaInt()]</InnerVar>
                <InnerVar>byte[] [sqlstate=readFdocaBytes(5)]</InnerVar>
                <InnerVar>byte[] [sqlerrproc=readFdocaBytes(8)]</InnerVar>
                <InnerVar>NetSqlca [netSqlca=new NetSqlca(netAgent_.netConnection_,sqlcode,sqlstate,sqlerrproc)]</InnerVar>
                <InnerVar>NetSqlca[] [sqlCa=parseSQLDIAGGRP()]</InnerVar>
                <InnerVar>NetSqlca[] [ret_val]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;parseSQLCAXGRP;[typdef, netSqlca]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DisconnectException</ExceptionType>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseSQLCAXGRP</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>typdef</ParamName>
                    <ParamType>Typdef</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>netSqlca</ParamName>
                    <ParamType>NetSqlca</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int[] [sqlerrd=new int[NetSqlca.SQL_ERR_LENGTH]]</InnerVar>
                <InnerVar>byte[] [sqlwarn=readFdocaBytes(11)]</InnerVar>
                <InnerVar>int [varcharLength=readFdocaTwoByteLength()]</InnerVar>
                <InnerVar>byte[] [sqlerrmc=null]</InnerVar>
                <InnerVar>int [sqlerrmcCcsid=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;parseVCS;[typdef]</InnerMethodInvoke>
                <InnerMethodInvoke>netSqlca;setSqlerrd;[sqlerrd]</InnerMethodInvoke>
                <InnerMethodInvoke>netSqlca;setSqlwarnBytes;[sqlwarn]</InnerMethodInvoke>
                <InnerMethodInvoke>netSqlca;setSqlerrmcBytes;[sqlerrmc]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DisconnectException</ExceptionType>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseSQLDIAGGRP</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>NetSqlca[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>NetSqlca[] [sqlca=parseSQLDIAGCI()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;parseSQLDIAGSTT;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;parseSQLDIAGCN;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DisconnectException</ExceptionType>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseSQLDIAGSTT</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>netAgent_;accumulateChainBreakingReadExceptionAndThrow;[new DisconnectException(netAgent_,new ClientMessageId(SQLState.DRDA_COMMAND_NOT_IMPLEMENTED),"parseSQLDIAGSTT")]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DisconnectException</ExceptionType>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseSQLDIAGCI</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>NetSqlca[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [num=readFdocaTwoByteLength()]</InnerVar>
                <InnerVar>NetSqlca[] [ret_val=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DisconnectException</ExceptionType>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseSQLDIAGCN</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>netAgent_;accumulateChainBreakingReadExceptionAndThrow;[new DisconnectException(netAgent_,new ClientMessageId(SQLState.DRDA_COMMAND_NOT_IMPLEMENTED),"parseSQLDIAGCN")]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DisconnectException</ExceptionType>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseSQLDCGRP</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>NetSqlca</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [sqldcCode=readFdocaInt()]</InnerVar>
                <InnerVar>String [sqldcState=readFdocaString(5,netAgent_.targetTypdef_.getCcsidSbcEncoding())]</InnerVar>
                <InnerVar>int [sqldcReason=readFdocaInt()]</InnerVar>
                <InnerVar>NetSqlca [sqlca=new NetSqlca(netAgent_.netConnection_,sqldcCode,sqldcState,(byte[])null)]</InnerVar>
                <InnerVar>String [sqldcMsg=parseVCS(qrydscTypdef_)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;skipFdocaBytes;[12]</InnerMethodInvoke>
                <InnerMethodInvoke>null;skipFdocaBytes;[49]</InnerMethodInvoke>
                <InnerMethodInvoke>null;parseSQLDCTOKS;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;skipFdocaBytes;[12]</InnerMethodInvoke>
                <InnerMethodInvoke>null;parseSQLDCXGRP;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DisconnectException</ExceptionType>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseSQLDCROW</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>NetSqlca</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DisconnectException</ExceptionType>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseSQLDCTOKS</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>netAgent_;accumulateChainBreakingReadExceptionAndThrow;[new DisconnectException(netAgent_,new ClientMessageId(SQLState.DRDA_COMMAND_NOT_IMPLEMENTED),"parseSQLDCTOKS")]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DisconnectException</ExceptionType>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseSQLDCXGRP</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>netAgent_;accumulateChainBreakingReadExceptionAndThrow;[new DisconnectException(netAgent_,new ClientMessageId(SQLState.DRDA_COMMAND_NOT_IMPLEMENTED),"parseSQLDCXGRP")]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DisconnectException</ExceptionType>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseVCS</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>typdefInEffect</ParamName>
                    <ParamType>Typdef</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DisconnectException</ExceptionType>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readFdocaString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>length</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>encoding</ParamName>
                    <ParamType>Charset</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [s=new String(dataBuffer_,position_,length,encoding)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkForSplitRowAndComplete;[length]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>allocateColumnOffsetAndLengthArrays</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findExtdtaData</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>byte[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>column</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>byte[] [data=null]</InnerVar>
                <InnerVar>Integer [extdtaQueuePosition=extdtaPositions_.get(column)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>locator</MethodName>
            <MethodComment>/** 
 * Get locator for LOB of the designated column &lt;p&gt; Note that this method cannot be invoked on a LOB column that is NULL.
 * @param column column number, starts at 1
 * @return locator value, &lt;code&gt;Lob.INVALID_LOCATOR&lt;/code&gt; if LOBvalue was sent instead of locator
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>column</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [locator=get_INTEGER(column)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBlobColumn_</MethodName>
            <MethodComment>/** 
 * @see org.apache.derby.client.am.Cursor#getBlobColumn_
 */
</MethodComment>
            <ReturnType>ClientBlob</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>column</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>agent</ParamName>
                    <ParamType>Agent</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>toBePublished</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [locator=locator(column)]</InnerVar>
                <InnerVar>int [index=column - 1]</InnerVar>
                <InnerVar>int [dataOffset]</InnerVar>
                <InnerVar>byte[] [data]</InnerVar>
                <InnerVar>ClientBlob [blob=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getClobColumn_</MethodName>
            <MethodComment>/** 
 * @see org.apache.derby.client.am.Cursor#getClobColumn_
 */
</MethodComment>
            <ReturnType>ClientClob</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>column</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>agent</ParamName>
                    <ParamType>Agent</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>toBePublished</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [locator=locator(column)]</InnerVar>
                <InnerVar>int [index=column - 1]</InnerVar>
                <InnerVar>int [dataOffset]</InnerVar>
                <InnerVar>byte[] [data]</InnerVar>
                <InnerVar>ClientClob [clob=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initializeColumnInfoArrays</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>typdef</ParamName>
                    <ParamType>Typdef</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columnCount</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setNumberOfColumns;[columnCount]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DisconnectException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMoreData_</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>netResultSet_;flowFetch;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nullDataForGC</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkForSplitRowAndComplete</MethodName>
            <MethodComment>/** 
 * Check if the data we want crosses a row split, and fetch more data if necessary.
 * @param length the length in bytes of the data needed
 * @param index the index of the column to be fetched, or -1 when notfetching column data
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>length</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>index</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkForSplitRowAndComplete</MethodName>
            <MethodComment>/** 
 * Check if the data we want crosses a row split, and fetch more data if necessary. This method is not for column data; use {@link #checkForSplitRowAndComplete(int,int)} for that.
 * @param length the length in bytes of the data needed
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>length</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkForSplitRowAndComplete;[length, -1]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkAndThrowReceivedEndqryrm</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkAndThrowReceivedEndqryrm</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lastValidBytePositionBeforeFetch</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkAndThrowReceivedEndqryrm;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>completeSplitRow</MethodName>
            <MethodComment>/** 
 * Fetch more data for a row that has been split up.
 * @param index the index of the column that was split, or -1 when notfetching column data
 * @return the value of {@code lastValidBytePosition_} before more datawas fetched
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>index</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [lastValidBytePositionBeforeFetch=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DisconnectException</ExceptionType>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>allocateColumnDataPositionArray</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int[] [columnDataPosition]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>allocateColumnDataComputedLengthArray</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int[] [columnDataComputedLength]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>allocateColumnDataIsNullArray</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean[] [columnDataIsNull]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDecimalLength</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>index</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setAllRowsReceivedFromServer</MethodName>
            <MethodComment>/** 
 * Set the value of value of allRowsReceivedFromServer_.
 * @param b a &lt;code&gt;boolean&lt;/code&gt; value indicating whether allrows are received from the server
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>b</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setQryclsimpEnabled</MethodName>
            <MethodComment>/** 
 * Set a flag indicating whether QRYCLSIMP is enabled.
 * @param flag true if QRYCLSIMP is enabled
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>flag</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getQryclsimpEnabled</MethodName>
            <MethodComment>/** 
 * Check whether QRYCLSIMP is enabled on this cursor.
 * @return true if QRYCLSIMP is enabled
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>