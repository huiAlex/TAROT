<Class>
    <Id>1796</Id>
    <Package>org.apache.derby.impl.sql.execute</Package>
    <ClassName>WriteCursorConstantAction</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>ConstantAction</SuperInterface>
        <SuperInterface>Formatable</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>WriteCursorConstantAction  /** 
 * This abstract class describes compiled constants that are passed into Delete, Insert, and Update ResultSets. This class and its sub-classes are not really implementations of ConstantAction, since they are not executed. A better name for these classes would be 'Constants'. E.g. WriteCursorConstants, DeleteConstants. Ideally one day the split will occur.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>conglomId</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>heapSCOCI</FieldName>
            <FieldType>StaticCompiledOpenConglomInfo</FieldType>
        </Field>
        <Field>
            <FieldName>irgs</FieldName>
            <FieldType>IndexRowGenerator[]</FieldType>
        </Field>
        <Field>
            <FieldName>indexCIDS</FieldName>
            <FieldType>long[]</FieldType>
        </Field>
        <Field>
            <FieldName>indexSCOCIs</FieldName>
            <FieldType>StaticCompiledOpenConglomInfo[]</FieldType>
        </Field>
        <Field>
            <FieldName>indexNames</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>deferred</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>targetProperties</FieldName>
            <FieldType>Properties</FieldType>
        </Field>
        <Field>
            <FieldName>targetUUID</FieldName>
            <FieldType>UUID</FieldType>
        </Field>
        <Field>
            <FieldName>lockMode</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>fkInfo</FieldName>
            <FieldType>FKInfo[]</FieldType>
        </Field>
        <Field>
            <FieldName>triggerInfo</FieldName>
            <FieldType>TriggerInfo</FieldType>
        </Field>
        <Field>
            <FieldName>baseRowReadList</FieldName>
            <FieldType>FormatableBitSet</FieldType>
        </Field>
        <Field>
            <FieldName>baseRowReadMap</FieldName>
            <FieldType>int[]</FieldType>
        </Field>
        <Field>
            <FieldName>streamStorableHeapColIds</FieldName>
            <FieldType>int[]</FieldType>
        </Field>
        <Field>
            <FieldName>singleRowSource</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>underMerge</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>WriteCursorConstantAction</MethodName>
            <MethodComment>/** 
 * Public niladic constructor. Needed for Formatable interface to work.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>WriteCursorConstantAction</MethodName>
            <MethodComment>/** 
 * Make the ConstantAction for a DELETE, INSERT, or UPDATE statement.
 * @param conglomId	Conglomerate ID of heap.
 * @param heapSCOCI	StaticCompiledOpenConglomInfo for heap.
 * @param irgs			Index descriptors
 * @param indexCIDS	Conglomerate IDs of indices
 * @param indexSCOCIs	StaticCompiledOpenConglomInfos for indexes.
 * @param indexNames   Names of indices on this table for error reporting.
 * @param deferred		True means process as a deferred update
 * @param targetProperties	Properties on the target table
 * @param targetUUID	UUID of target table
 * @param lockMode		The lock mode to use on the target table
 * @param fkInfo	Structure containing foreign key info, if any (may be null)
 * @param triggerInfo	Structure containing trigger info, if any (may be null)
 * @param baseRowReadMap	BaseRowReadMap[heapColId]-&amp;gt;ReadRowColumnId. (0 based)
 * @param streamStorableHeapColIds Null for non rep. (0 based)
 * @param singleRowSource		Whether or not source is a single row source
 * @param underMerge   True if this action is under a MERGE statement
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conglomId</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>heapSCOCI</ParamName>
                    <ParamType>StaticCompiledOpenConglomInfo</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>irgs</ParamName>
                    <ParamType>IndexRowGenerator[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indexCIDS</ParamName>
                    <ParamType>long[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indexSCOCIs</ParamName>
                    <ParamType>StaticCompiledOpenConglomInfo[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indexNames</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>deferred</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>targetProperties</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>targetUUID</ParamName>
                    <ParamType>UUID</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lockMode</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fkInfo</ParamName>
                    <ParamType>FKInfo[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>triggerInfo</ParamName>
                    <ParamType>TriggerInfo</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>baseRowReadList</ParamName>
                    <ParamType>FormatableBitSet</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>baseRowReadMap</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>streamStorableHeapColIds</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>singleRowSource</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>underMerge</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFKInfo</MethodName>
            <MethodComment>/** 
 * Gets the foreign key information for this constant action. A full list of foreign keys was compiled into this constant action.
 * @return	the list of foreign keys to enforce for this action
 */
</MethodComment>
            <ReturnType>FKInfo[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTriggerInfo</MethodName>
            <MethodComment>/** 
 * Basically, the same as getFKInfo but for triggers.
 * @return	the triggers that should be fired
 */
</MethodComment>
            <ReturnType>TriggerInfo</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>executeConstantAction</MethodName>
            <MethodComment>/** 
 * NOP routine. The work is done in InsertResultSet.
 * @see ConstantAction#executeConstantAction
 * @exception StandardException		Thrown on failure
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>activation</ParamName>
                    <ParamType>Activation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readExternal</MethodName>
            <MethodComment>/** 
 * Read this object from a stream of stored objects.
 * @param in read this.
 * @exception IOException					thrown on error
 * @exception ClassNotFoundException		thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>in</ParamName>
                    <ParamType>ObjectInput</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ArrayUtil;readArrayItems;[in, irgs]</InnerMethodInvoke>
                <InnerMethodInvoke>ArrayUtil;readArrayItems;[in, indexSCOCIs]</InnerMethodInvoke>
                <InnerMethodInvoke>ArrayUtil;readArrayItems;[in, fkInfo]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>ClassNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeExternal</MethodName>
            <MethodComment>/** 
 * Write this object to a stream of stored objects.
 * @param out write bytes here.
 * @exception IOException		thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>ObjectOutput</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>out;writeLong;[conglomId]</InnerMethodInvoke>
                <InnerMethodInvoke>out;writeObject;[heapSCOCI]</InnerMethodInvoke>
                <InnerMethodInvoke>ArrayUtil;writeArray;[out, irgs]</InnerMethodInvoke>
                <InnerMethodInvoke>ArrayUtil;writeLongArray;[out, indexCIDS]</InnerMethodInvoke>
                <InnerMethodInvoke>ArrayUtil;writeArray;[out, indexSCOCIs]</InnerMethodInvoke>
                <InnerMethodInvoke>out;writeBoolean;[deferred]</InnerMethodInvoke>
                <InnerMethodInvoke>out;writeObject;[targetProperties]</InnerMethodInvoke>
                <InnerMethodInvoke>out;writeObject;[targetUUID]</InnerMethodInvoke>
                <InnerMethodInvoke>out;writeInt;[lockMode]</InnerMethodInvoke>
                <InnerMethodInvoke>ArrayUtil;writeArray;[out, fkInfo]</InnerMethodInvoke>
                <InnerMethodInvoke>out;writeObject;[triggerInfo]</InnerMethodInvoke>
                <InnerMethodInvoke>out;writeObject;[baseRowReadList]</InnerMethodInvoke>
                <InnerMethodInvoke>ArrayUtil;writeIntArray;[out, baseRowReadMap]</InnerMethodInvoke>
                <InnerMethodInvoke>ArrayUtil;writeIntArray;[out, streamStorableHeapColIds]</InnerMethodInvoke>
                <InnerMethodInvoke>out;writeBoolean;[singleRowSource]</InnerMethodInvoke>
                <InnerMethodInvoke>ArrayUtil;writeArray;[out, indexNames]</InnerMethodInvoke>
                <InnerMethodInvoke>out;writeBoolean;[underMerge]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>underMerge</MethodName>
            <MethodComment>/** 
 * Return true if this is an action of a MERGE statement 
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getConglomerateId</MethodName>
            <MethodComment>/** 
 * Get the conglomerate id for the changed heap.
 * @return the conglomerate id.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTargetProperties</MethodName>
            <MethodComment>/** 
 * Get the targetProperties from the constant action.
 * @return The targetProperties
 */
</MethodComment>
            <ReturnType>Properties</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getProperty</MethodName>
            <MethodComment>/** 
 * The the value of the specified key, if it exists, from the targetProperties.
 * @param key		The key to search for
 * @return	The value for the specified key if it exists, otherwise null.(Return null if targetProperties is null.)
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBaseRowReadList</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>FormatableBitSet</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBaseRowReadMap</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStreamStorableHeapColIds</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getIndexNameFromCID</MethodName>
            <MethodComment>/** 
 * get the index name given the conglomerate id of the index.
 * @param indexCID		conglomerate ID of the index.
 * @return index name of given index.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>indexCID</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [size=indexCIDS.length]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getIndexNames</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>