<Class>
    <Id>1020</Id>
    <Package>org.apache.derby.impl.sql.compile</Package>
    <ClassName>AndNoShortCircuitNode</ClassName>
    <SuperClass>AndNode</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>AndNoShortCircuitNode  /** 
 * Used for deferrable CHECK constraint. When we evaluate check constraints for a row where at least one constraint is deferrable, we need to know exactly which set of constraints violated the checks.  The normal evaluation of check constraints is generated as one big (NOT c1) AND (NOT c2) AND ...  AND (NOT cn) using short-circuited (McCarthy) boolean evaluation. &lt;p&gt; This kind of evaluation of the expression can only tell us the first failing constraint, so we use full evaluation instead, as embodied in this node. See also  {@link org.apache.derby.iapi.types.BooleanDataValue#throwExceptionIfImmediateAndFalse}.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>AndNoShortCircuitNode</MethodName>
            <MethodComment>/** 
 * @param leftOperand The left operand of the AND
 * @param rightOperand The right operand of the AND
 * @param cm context manager
 * @throws StandardException standard error policy
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>leftOperand</ParamName>
                    <ParamType>ValueNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rightOperand</ParamName>
                    <ParamType>ValueNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cm</ParamName>
                    <ParamType>ContextManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateExpression</MethodName>
            <MethodComment>/** 
 * Generate code for no short-circuiting AND operator. Used to evaluate check constraints where at least one is deferrable, since we need to know exactly which constraint(s) violated the checks.
 * @throws StandardException standard error policy
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>acb</ParamName>
                    <ParamType>ExpressionClassBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mb</ParamName>
                    <ParamType>MethodBuilder</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>leftOperand;generateExpression;[acb, mb]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;upCast;[ClassName.BooleanDataValue]</InnerMethodInvoke>
                <InnerMethodInvoke>rightOperand;generateExpression;[acb, mb]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;upCast;[ClassName.BooleanDataValue]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;callMethod;[VMOpcode.INVOKEINTERFACE, (String)null, "and", ClassName.BooleanDataValue, 1]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>