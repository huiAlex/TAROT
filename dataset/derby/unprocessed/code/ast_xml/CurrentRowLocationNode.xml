<Class>
    <Id>284</Id>
    <Package>org.apache.derby.impl.sql.compile</Package>
    <ClassName>CurrentRowLocationNode</ClassName>
    <SuperClass>ValueNode</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>CurrentRowLocationNode  /** 
 * The CurrentRowLocation operator is used by DELETE and UPDATE to get the RowLocation of the current row for the target table.  The bind() operations for DELETE and UPDATE add a column to the target list of the SelectNode that represents the ResultSet to be deleted or updated.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>CurrentRowLocationNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cm</ParamName>
                    <ParamType>ContextManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>bindExpression</MethodName>
            <MethodComment>/** 
 * Binding this expression means setting the result DataTypeServices. In this case, the result type is always the same.
 * @param fromList			The FROM list for the statement.  This parameteris not used in this case.
 * @param subqueryList		The subquery list being built as we find SubqueryNodes
 * @param aggregates        The aggregate list being built as we find AggregateNodes
 * @return	The new top of the expression tree.
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>ValueNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fromList</ParamName>
                    <ParamType>FromList</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>subqueryList</ParamName>
                    <ParamType>SubqueryList</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>aggregates</ParamName>
                    <ParamType>AggregateNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setType;[new DataTypeDescriptor(TypeId.getBuiltInTypeId(TypeId.REF_NAME),false)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateExpression</MethodName>
            <MethodComment>/** 
 * CurrentRowLocationNode is used in updates and deletes.  See generate() in UpdateNode and DeleteNode to get the full overview of generate().  This class is responsible for generating the method that will return the RowLocation for the next row to be updated or deleted. This routine will generate a method of the form: private SQLRef	fieldx; ... protected DataValueDescriptor exprx() throws StandardException { return fieldx = &lt;SQLRefConstructor&gt;( "result set member".getRowLocation(), fieldx); } and return the generated code: exprx() ("result set member" is a member of the generated class added by UpdateNode or DeleteNode.) This exprx function is used within another exprx function, and so doesn't need a static field or to be public; but at present, it has both.  fieldx is a generated field that is initialized to null when the activation is constructed.  getSQLRef will re-use fieldx on calls after the first call, rather than allocate a new SQLRef for each call.
 * @param acb	The ExpressionClassBuilder for the class being built
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>acb</ParamName>
                    <ParamType>ExpressionClassBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mbex</ParamName>
                    <ParamType>MethodBuilder</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodBuilder [mb=acb.newGeneratedFun(ClassName.DataValueDescriptor,Modifier.PROTECTED)]</InnerVar>
                <InnerVar>LocalField [field=acb.newFieldDeclaration(Modifier.PRIVATE,ClassName.RefDataValue)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mb;pushThis;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;getField;[(String)null, acb.getRowLocationScanResultSetName(), ClassName.CursorResultSet]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;callMethod;[VMOpcode.INVOKEINTERFACE, (String)null, "getRowLocation", ClassName.RowLocation, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>acb;generateDataValue;[mb, getTypeCompiler(), getTypeServices().getCollationType(), field]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;putField;[field]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;methodReturn;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;complete;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mbex;pushThis;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mbex;callMethod;[VMOpcode.INVOKEVIRTUAL, (String)null, mb.getName(), ClassName.DataValueDescriptor, 0]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isEquivalent</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>o</ParamName>
                    <ParamType>ValueNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>