<Class>
    <Id>1373</Id>
    <Package>org.apache.derby.impl.store.access.conglomerate</Package>
    <ClassName>TemplateRow</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>TemplateRow</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>allocate_objects</MethodName>
            <MethodComment>/** 
 * Allocate new objects to array based on format id's and column_list. &lt;p&gt;
 * @param num_cols_to_allocate  The number of columns to allocate for array.
 * @param column_list           description of partial set of columns to built as described in RowUtil.  If null do  all the columns.
 * @param format_ids            An array of format ids representing every column in the table.  column_list describes which of these columns to populate into the  columns array.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>DataValueDescriptor[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rawtran</ParamName>
                    <ParamType>Transaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>num_cols_to_allocate</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>column_list</ParamName>
                    <ParamType>FormatableBitSet</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>format_ids</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>collation_ids</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DataValueDescriptor[] [ret_row=new DataValueDescriptor[num_cols_to_allocate]]</InnerVar>
                <InnerVar>int [num_cols=(column_list == null ? format_ids.length : column_list.size())]</InnerVar>
                <InnerVar>DataValueFactory [dvf=rawtran.getDataValueFactory()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newU8Row</MethodName>
            <MethodComment>/** 
 * Constuctor for creating a template row which stores n SQLLongint's
 */
</MethodComment>
            <ReturnType>DataValueDescriptor[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>nkeys</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DataValueDescriptor[] [columns=new DataValueDescriptor[nkeys]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newRow</MethodName>
            <MethodComment>/** 
 * Generate an "empty" row to match the format id specification. &lt;p&gt; Generate an array of new'd objects matching the format id specification passed in.  This routine is mostly used by the btree code to generate temporary rows needed during operations like split.  It is more efficient to allocate new objects based on the old object vs. calling the Monitor. &lt;p&gt;
 * @param template      An array which represents a row as described inRowUtil.
 * @exception StandardException  Standard exception policy.
 * @return The new row.
 * @see RowUtil
 */
</MethodComment>
            <ReturnType>DataValueDescriptor[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>template</ParamName>
                    <ParamType>DataValueDescriptor[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DataValueDescriptor[] [columns=new DataValueDescriptor[template.length]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newRow</MethodName>
            <MethodComment>/** 
 * Generate an "empty" row to match the format id specification. &lt;p&gt; Generate an array of new'd objects matching the format id specification passed in.  This routine is mostly used by the btree code to generate temporary rows needed during operations like split. &lt;p&gt;
 * @return The new row.
 * @param format_ids an array of format id's, one per column in row.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>DataValueDescriptor[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rawtran</ParamName>
                    <ParamType>Transaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>column_list</ParamName>
                    <ParamType>FormatableBitSet</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>format_ids</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>collation_ids</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newBranchRow</MethodName>
            <MethodComment>/** 
 * Generate an "empty" row to match the format id + coluumn specification. &lt;p&gt; Generate an array of new'd objects matching the format id specification passed in, and the column passed in.  The new row is first made up of columns matching the format ids, and then followed by one other column matching the column passed in.  This routine is mostly used by the  btree code to generate temporary branch rows needed during operations  like split. &lt;p&gt;
 * @return The new row.
 * @param format_ids an array of format id's, one per column in row.
 * @param page_ptr   The object to place in the last column of the template.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>DataValueDescriptor[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rawtran</ParamName>
                    <ParamType>Transaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>format_ids</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>collation_ids</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>page_ptr</ParamName>
                    <ParamType>DataValueDescriptor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DataValueDescriptor[] [columns=allocate_objects(rawtran,format_ids.length + 1,(FormatableBitSet)null,format_ids,collation_ids)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkColumnTypes</MethodName>
            <MethodComment>/** 
 * Check that columns in the row conform to a set of format id's,  both in number and type.
 * @return boolean indicating if template matches format id's
 * @param format_ids array of format ids which are the types of cols in row
 * @param row        the array of columns that make up the row.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dvf</ParamName>
                    <ParamType>DataValueFactory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>format_ids</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>collation_ids</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>DataValueDescriptor[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [ret_val=true]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>