<Class>
    <Id>1465</Id>
    <Package>org.apache.derbyTesting.functionTests.tests.upgradeTests</Package>
    <ClassName>Changes10_9</ClassName>
    <SuperClass>UpgradeChange</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Changes10_9  /** 
 * Upgrade test cases for 10.9.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>UPGRADE_REQUIRED</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>INVALID_PROVIDER_CHANGE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>SUPPORT_FILES_SOURCE</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>USERS</FieldName>
            <FieldType>String[][]</FieldType>
        </Field>
        <Field>
            <FieldName>pattern</FieldName>
            <FieldType>Goal[]</FieldType>
        </Field>
        <Field>
            <FieldName>REPEAT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>option</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>foundOnce</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>ranges</FieldName>
            <FieldType>char[][]</FieldType>
        </Field>
        <Field>
            <FieldName>c</FieldName>
            <FieldType>char</FieldType>
        </Field>
        <Field>
            <FieldName>option</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>foundOnce</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>Changes10_9</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;initPattern;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>suite</MethodName>
            <MethodComment>/** 
 * Return the suite of tests to test the changes made in 10.7.
 * @param phase an integer that indicates the current phase inthe upgrade test.
 * @return the test suite created.
 */
</MethodComment>
            <ReturnType>Test</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>phase</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BaseTestSuite [suite=new BaseTestSuite("Upgrade test for 10.9")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>suite;addTestSuite;[Changes10_9.class]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testDropStatisticsProc</MethodName>
            <MethodComment>/** 
 * Make sure that the drop statistics procedure only appears after  hard-upgrade.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Statement [s=createStatement()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>s;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testNativeAuthentication</MethodName>
            <MethodComment>/** 
 * Make sure that the catalogs and procedures for NATIVE authentication only appear after hard-upgrade.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Statement [s=createStatement()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>s;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>vetProcs</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>Statement</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>procCall</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>shouldExist</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>vetSYSUSERS</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>Statement</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>shouldExist</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ResultSet [rs=s.executeQuery("select count(*) from sys.systables where tablename = 'SYSUSERS'")]</InnerVar>
                <InnerVar>int [expectedValue=shouldExist ? 1 : 0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rs;next;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[expectedValue, rs.getInt(1)]</InnerMethodInvoke>
                <InnerMethodInvoke>rs;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>vetNativeProcs</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>Statement</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>shouldExist</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [defaultDigestAlgorithm=pushAuthenticationAlgorithm(s)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;vetProcs;[s, "call syscs_util.syscs_create_user( 'FRED', 'fredpassword' )", shouldExist]</InnerMethodInvoke>
                <InnerMethodInvoke>null;popAuthenticationAlgorithm;[s, defaultDigestAlgorithm]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>pushAuthenticationAlgorithm</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>Statement</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [defaultDigestAlgorithm=getDatabaseProperty(s,"derby.authentication.builtin.algorithm")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>popAuthenticationAlgorithm</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>Statement</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>defaultDigestAlgorithm</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setDatabaseProperty</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>Statement</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [command="call syscs_util.syscs_set_database_property( '" + key + "', "+ value+ " )"]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>s;execute;[command]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDatabaseProperty</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>Statement</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ResultSet [rs=s.executeQuery("values( syscs_util.syscs_get_database_property( '" + key + "' ) )")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testNativeLocalAuthentication</MethodName>
            <MethodComment>/** 
 * Make sure that NATIVE LOCAL authentication can't be turned on before hard-upgrade.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Statement [s=createStatement()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>s;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testBuiltinAuthenticationWithConfigurableHash</MethodName>
            <MethodComment>/** 
 * Make sure builtin authentication doesn't use a hash scheme that's not supported by the old version until the database has been hard upgraded. See DERBY-4483 and DERBY-5539.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>DataSource [ds=JDBCDataSource.getDataSourceLogical("BUILTIN_10_9")]</InnerVar>
                <InnerVar>Connection [c=ds.getConnection("dbo","the boss")]</InnerVar>
                <InnerVar>CallableStatement [setProp=c.prepareCall("call syscs_util.syscs_set_database_property(?, ?)")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;verifyCanConnect;[ds]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setPasswords;[setProp]</InnerMethodInvoke>
                <InnerMethodInvoke>setProp;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;verifyCanConnect;[ds]</InnerMethodInvoke>
                <InnerMethodInvoke>null;verifyPasswords;[c]</InnerMethodInvoke>
                <InnerMethodInvoke>c;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBCDataSource;setBeanProperty;[ds, "user", "dbo"]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBCDataSource;setBeanProperty;[ds, "password", "the boss"]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBCDataSource;shutdownDatabase;[ds]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setPasswords</MethodName>
            <MethodComment>/** 
 * Set the passwords for all users specified in  {@code USERS}.
 * @param cs a callable statement that sets database properties
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cs</ParamName>
                    <ParamType>CallableStatement</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>verifyPasswords</MethodName>
            <MethodComment>/** 
 * Verify that all passwords for the users in  {@code USERS} are storedas expected. Raise an assert failure on mismatch.
 * @param c a connection to the database
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [pwIdx]</InnerVar>
                <InnerVar>PreparedStatement [ps=c.prepareStatement("values syscs_util.syscs_get_database_property(?)")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ps;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>verifyCanConnect</MethodName>
            <MethodComment>/** 
 * Verify that all users specified in  {@code USERS} can connect to thedatabase.
 * @param ds a data source for connecting to the database
 * @throws SQLException if one of the users cannot connect to the database
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ds</ParamName>
                    <ParamType>DataSource</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testJarStorage</MethodName>
            <MethodComment>/** 
 * For 10.9 and later storage of jar files changed. DERBY-5357.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Statement [s=createStatement()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>s;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createSchema</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Statement [s=createStatement()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>s;executeUpdate;["create schema " + name]</InnerMethodInvoke>
                <InnerMethodInvoke>s;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>installJar</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>resource</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>jarName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>URL [jar=SupportFilesSetup.getReadOnlyURL(resource)]</InnerVar>
                <InnerVar>CallableStatement [cs=prepareCall("CALL SQLJ.INSTALL_JAR(?, ?, 0)")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cs;setString;[1, jar.toExternalForm()]</InnerMethodInvoke>
                <InnerMethodInvoke>cs;setString;[2, jarName]</InnerMethodInvoke>
                <InnerMethodInvoke>cs;executeUpdate;[]</InnerMethodInvoke>
                <InnerMethodInvoke>cs;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
                <ExceptionType>MalformedURLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>replaceJar</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>resource</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>jarName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>URL [jar=SupportFilesSetup.getReadOnlyURL(resource)]</InnerVar>
                <InnerVar>CallableStatement [cs=prepareCall("CALL SQLJ.REPLACE_JAR(?, ?)")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cs;setString;[1, jar.toExternalForm()]</InnerMethodInvoke>
                <InnerMethodInvoke>cs;setString;[2, jarName]</InnerMethodInvoke>
                <InnerMethodInvoke>cs;executeUpdate;[]</InnerMethodInvoke>
                <InnerMethodInvoke>cs;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
                <ExceptionType>MalformedURLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeJar</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>jarName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CallableStatement [cs=prepareCall("CALL SQLJ.REMOVE_JAR(?, 0)")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cs;setString;[1, jarName]</InnerMethodInvoke>
                <InnerMethodInvoke>cs;executeUpdate;[]</InnerMethodInvoke>
                <InnerMethodInvoke>cs;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setDBClasspath</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cp</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CallableStatement [cs=prepareCall("CALL SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(" + "'derby.database.classpath', ?)")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cs;setString;[1, cp]</InnerMethodInvoke>
                <InnerMethodInvoke>cs;executeUpdate;[]</InnerMethodInvoke>
                <InnerMethodInvoke>cs;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>tryCall</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>CallableStatement [cs=prepareCall("CALL EMC.ADDCONTACT(?, ?)")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cs;setInt;[1, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>cs;setString;[2, "now@classpathchange.com"]</InnerMethodInvoke>
                <InnerMethodInvoke>cs;executeUpdate;[]</InnerMethodInvoke>
                <InnerMethodInvoke>cs;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>verifyNewLocations</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>noOfObjects</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>TestConfiguration [tc=TestConfiguration.getCurrent()]</InnerVar>
                <InnerVar>String [dbPath=tc.getPhysicalDatabaseName(tc.getDefaultDatabaseName())]</InnerVar>
                <InnerVar>String [jarDirName="system" + File.separator + dbPath+ File.separator+ "jar"]</InnerVar>
                <InnerVar>File [jarDir=new File(jarDirName)]</InnerVar>
                <InnerVar>File[] [contents=jarDir.listFiles()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertTrue;[jarDir.isDirectory()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[noOfObjects, contents.length]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initPattern</MethodName>
            <MethodComment>/** 
 * Initialize a pattern corresponding to: &lt;p/&gt; &amp;lt;Derby uuid string&amp;gt;[.]jar[.]G[0-9]+ &lt;p/&gt; where: &lt;p/&gt; &amp;lt;Derby uuid string&amp;gt; has the form hhhhhhhh-hhhh-hhhh-hhhh-hhhhhhhhhhhh &lt;p/&gt; where &lt;em&gt;h&lt;/em&gt; id a lower case hex digit.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>List&lt;Goal&gt; [l=new ArrayList&lt;Goal&gt;(100)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>l;add;[new SingleChar('-')]</InnerMethodInvoke>
                <InnerMethodInvoke>l;add;[new SingleChar('.')]</InnerMethodInvoke>
                <InnerMethodInvoke>l;add;[new SingleChar('j')]</InnerMethodInvoke>
                <InnerMethodInvoke>l;add;[new SingleChar('a')]</InnerMethodInvoke>
                <InnerMethodInvoke>l;add;[new SingleChar('r')]</InnerMethodInvoke>
                <InnerMethodInvoke>l;add;[new SingleChar('.')]</InnerMethodInvoke>
                <InnerMethodInvoke>l;add;[new SingleChar('G')]</InnerMethodInvoke>
                <InnerMethodInvoke>l;add;[new CharRange(new char[][]{{'0','9'}},Goal.REPEAT)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>assertFileNameShape</MethodName>
            <MethodComment>/** 
 * assert that fName has the expected shape of a jar file in the database (version &amp;gt;= 10.9).
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertTrue;[matches(fName,pattern)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>matches</MethodName>
            <MethodComment>/** 
 * Poor man's regexp matcher: can match patterns of type below, where start "^" and end "$" is implied: must match whole string. &lt;p/&gt; reg.exp: ( '[' &amp;lt;fromchar&amp;gt;-&amp;lt;tochar&amp;gt; ] '+'? ']' | &amp;lt;char&amp;gt; '+'? )
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pattern</ParamName>
                    <ParamType>Goal[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [patIdx=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>matches</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>char</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isRepeatable</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setFoundOnce</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>foundOnce</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>CharRange</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ranges</ParamName>
                    <ParamType>char[][]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>CharRange</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ranges</ParamName>
                    <ParamType>char[][]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>option</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>matches</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>char</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>SingleChar</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>char</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>SingleChar</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>char</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>option</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>matches</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>char</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>test_5493</MethodName>
            <MethodComment>/** 
 * Test the changes introduced to fix correctness problems with sequences.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Connection [conn=getConnection()]</InnerVar>
                <InnerVar>Statement [s=createStatement()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>s;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNewFunctionID</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>Statement</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ResultSet [rs=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testDropOrphanedStatistics</MethodName>
            <MethodComment>/** 
 * Verifies that an orphaned statistics entry can be dropped by running the {@code SYSCS_DROP_STATISTICS} system procedure.&lt;p&gt; Relevant JIRAs: &lt;ul&gt; &lt;li&gt;DERBY-4115: Provide a way to drop statistics information&lt;/li&gt; &lt;li&gt;DERBY-5681: When a foreign key constraint on a table is dropped, the associated statistics row for the conglomerate&lt;/li&gt; &lt;/ul&gt; &lt;p&gt; DERBY-5702(Creating a foreign key constraint does not automatically create a statistics row if foreign key constraint will share a backing index created for a primay key) is causing a problem for us to test the hanging statistics row with 10.4 and prior releases. Following test relies on having hanging statistics rows which should have been dropped when the constraint owing it was dropped. The test then goes ahead and uses the new drop statisitcs procedure to drop the hanging statistics rows. But because of DERBY-5702, when a constraint is added which will reuse an existing backing index, no statistics row is created for that constraint unless a user were to say use an update statistics stored procedure to create the statistics for that constraint. And later when that constraint is dropped, we will find that because of DERBY-5681, the statistics row never gets dropped. But update statistics stored procedure was not introduced up until 10.5 and because of that, we can't really test for hanging index created through constraints sharing the same backing index prior to 10.5
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>IndexStatsUtil [stats=new IndexStatsUtil(openDefaultConnection())]</InnerVar>
                <InnerVar>Statement [s=createStatement()]</InnerVar>
                <InnerVar>int [expected=DisposableIndexStatistics.hasDerby5681Bug(getOldVersion()) ? 2 : 1]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testDisposableStatisticsExplicit</MethodName>
            <MethodComment>/** 
 * Verifies the behavior of the update statistics code when faced with "disposable statistics entries". &lt;p&gt; A disposable statistics entry is a row in SYS.SYSSTATISTICS that has been orphaned (see DERBY-5681) or it is on longer needed by the Derby optimizer (due to internal changes/improvements). &lt;p&gt; This test expects different things based on the phase: &lt;dl&gt; &lt;dt&gt;create&lt;/dt&gt; &lt;dd&gt;- run statements that will cause disposable statistics entries to be created&lt;/dd&gt; &lt;dt&gt;soft upgrade&lt;/dt&gt; &lt;dd&gt;- run the new update statistics code, expecting it to leave the disposable statistics intact&lt;/dd&gt; &lt;dt&gt;downgrade&lt;/dt&gt; &lt;dd&gt;- verify that the relevant statistics are present&lt;/dd&gt; &lt;dt&gt;hard upgrade&lt;/dt&gt; &lt;dd&gt;- run the new update statistics code, expecting it to get rid of the disposable statistics&lt;/dd&gt; &lt;/dl&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [TBL="ISTAT_DISPOSABLE_STATS"]</InnerVar>
                <InnerVar>String [updateStatsSQL="call syscs_util.syscs_update_statistics(" + "'APP', ?, null)"]</InnerVar>
                <InnerVar>DisposableIndexStatistics [dis=new DisposableIndexStatistics(getOldVersion(),getConnection(),TBL)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>