<Class>
    <Id>1527</Id>
    <Package>org.apache.derby.impl.sql.execute</Package>
    <ClassName>CreateTriggerConstantAction</ClassName>
    <SuperClass>DDLSingleTableConstantAction</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>CreateTriggerConstantAction  /** 
 * This class  describes actions that are ALWAYS performed for a CREATE TRIGGER Statement at Execution time.  
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>triggerName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>triggerSchemaName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>triggerTable</FieldName>
            <FieldType>TableDescriptor</FieldType>
        </Field>
        <Field>
            <FieldName>triggerTableId</FieldName>
            <FieldType>UUID</FieldType>
        </Field>
        <Field>
            <FieldName>eventMask</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>isBefore</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>isRow</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>isEnabled</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>referencingOld</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>referencingNew</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>whenSPSId</FieldName>
            <FieldType>UUID</FieldType>
        </Field>
        <Field>
            <FieldName>whenText</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>actionSPSId</FieldName>
            <FieldType>UUID</FieldType>
        </Field>
        <Field>
            <FieldName>actionText</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>originalWhenText</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>originalActionText</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>oldReferencingName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>newReferencingName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>spsCompSchemaId</FieldName>
            <FieldType>UUID</FieldType>
        </Field>
        <Field>
            <FieldName>referencedCols</FieldName>
            <FieldType>int[]</FieldType>
        </Field>
        <Field>
            <FieldName>referencedColsInTriggerAction</FieldName>
            <FieldType>int[]</FieldType>
        </Field>
        <Field>
            <FieldName>providerInfo</FieldName>
            <FieldType>ProviderInfo[]</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>CreateTriggerConstantAction</MethodName>
            <MethodComment>/** 
 * Make the ConstantAction for a CREATE TRIGGER statement.
 * @param triggerSchemaName	name for the schema that trigger lives in.
 * @param triggerName	Name of trigger
 * @param eventMask		TriggerDescriptor.TRIGGER_EVENT_XXXX
 * @param isBefore		is this a before (as opposed to after) trigger 
 * @param isRow			is this a row trigger or statement trigger
 * @param isEnabled		is this trigger enabled or disabled
 * @param triggerTable	the table upon which this trigger is defined
 * @param whenSPSId		the sps id for the when clause (may be null)
 * @param whenText		the text of the when clause (may be null)
 * @param actionSPSId	the spsid for the trigger action (may be null)
 * @param actionText	the text of the trigger action
 * @param spsCompSchemaId	the compilation schema for the action and whenspses.   If null, will be set to the current default schema
 * @param referencedCols	what columns does this trigger reference (may be null)
 * @param referencedColsInTriggerAction	what columns does the trigger action reference through old/new transition variables (may be null)
 * @param originalWhenText The original user text of the WHEN clause (may be null)
 * @param originalActionText The original user text of the trigger action
 * @param referencingOld whether or not OLD appears in REFERENCING clause
 * @param referencingNew whether or not NEW appears in REFERENCING clause
 * @param oldReferencingName old referencing table name, if any, that appears in REFERENCING clause
 * @param newReferencingName new referencing table name, if any, that appears in REFERENCING clause
 * @param providerInfo  array of providers that the trigger depends on
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>triggerSchemaName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>triggerName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>eventMask</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isBefore</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isRow</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isEnabled</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>triggerTable</ParamName>
                    <ParamType>TableDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>whenSPSId</ParamName>
                    <ParamType>UUID</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>whenText</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>actionSPSId</ParamName>
                    <ParamType>UUID</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>actionText</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>spsCompSchemaId</ParamName>
                    <ParamType>UUID</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>referencedCols</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>referencedColsInTriggerAction</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>originalWhenText</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>originalActionText</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>referencingOld</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>referencingNew</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>oldReferencingName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>newReferencingName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>providerInfo</ParamName>
                    <ParamType>ProviderInfo[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>executeConstantAction</MethodName>
            <MethodComment>/** 
 * This is the guts of the Execution-time logic for CREATE TRIGGER.
 * @see ConstantAction#executeConstantAction
 * @exception StandardException		Thrown on failure
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>activation</ParamName>
                    <ParamType>Activation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>SPSDescriptor [whenspsd=null]</InnerVar>
                <InnerVar>SPSDescriptor [actionspsd]</InnerVar>
                <InnerVar>LanguageConnectionContext [lcc=activation.getLanguageConnectionContext()]</InnerVar>
                <InnerVar>DataDictionary [dd=lcc.getDataDictionary()]</InnerVar>
                <InnerVar>DependencyManager [dm=dd.getDependencyManager()]</InnerVar>
                <InnerVar>TransactionController [tc=lcc.getTransactionExecute()]</InnerVar>
                <InnerVar>SchemaDescriptor [triggerSd=getSchemaDescriptorForCreate(dd,activation,triggerSchemaName)]</InnerVar>
                <InnerVar>String [tabName]</InnerVar>
                <InnerVar>UUID [tmpTriggerId=dd.getUUIDFactory().createUUID()]</InnerVar>
                <InnerVar>DataDescriptorGenerator [ddg=dd.getDataDescriptorGenerator()]</InnerVar>
                <InnerVar>TriggerDescriptor [triggerd=ddg.newTriggerDescriptor(triggerSd,tmpTriggerId,triggerName,eventMask,isBefore,isRow,isEnabled,triggerTable,whenSPSId,actionSPSId,makeCreationTimestamp(dd),referencedCols,referencedColsInTriggerAction,originalActionText,referencingOld,referencingNew,oldReferencingName,newReferencingName,originalWhenText)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>dd;startWriting;[lcc]</InnerMethodInvoke>
                <InnerMethodInvoke>null;lockTableForDDL;[tc, triggerTable.getHeapConglomerateId(), true]</InnerMethodInvoke>
                <InnerMethodInvoke>dm;invalidateFor;[triggerTable, DependencyManager.CREATE_TRIGGER, lcc]</InnerMethodInvoke>
                <InnerMethodInvoke>dd;addDescriptor;[triggerd, triggerSd, DataDictionary.SYSTRIGGERS_CATALOG_NUM, false, tc]</InnerMethodInvoke>
                <InnerMethodInvoke>dm;addDependency;[triggerd, actionspsd, lcc.getContextManager()]</InnerMethodInvoke>
                <InnerMethodInvoke>dm;addDependency;[triggerd, triggerTable, lcc.getContextManager()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;storeViewTriggerDependenciesOnPrivileges;[activation, triggerd]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createSPS</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>SPSDescriptor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lcc</ParamName>
                    <ParamType>LanguageConnectionContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ddg</ParamName>
                    <ParamType>DataDescriptorGenerator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dd</ParamName>
                    <ParamType>DataDictionary</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tc</ParamName>
                    <ParamType>TransactionController</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>triggerId</ParamName>
                    <ParamType>UUID</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sd</ParamName>
                    <ParamType>SchemaDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>spsId</ParamName>
                    <ParamType>UUID</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>compSchemaId</ParamName>
                    <ParamType>UUID</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isWhen</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>triggerTable</ParamName>
                    <ParamType>TableDescriptor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [spsName="TRIGGER" + (isWhen ? "WHEN_" : "ACTN_") + triggerId+ "_"+ triggerTable.getUUID().toString()]</InnerVar>
                <InnerVar>SPSDescriptor [spsd=new SPSDescriptor(dd,spsName,(spsId == null) ? dd.getUUIDFactory().createUUID() : spsId,sd.getUUID(),compSchemaId == null ? lcc.getDefaultSchema().getUUID() : compSchemaId,SPSDescriptor.SPS_TYPE_TRIGGER,true,text,true)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>spsd;prepareAndRelease;[lcc, triggerTable]</InnerMethodInvoke>
                <InnerMethodInvoke>dd;addSPSDescriptor;[spsd, tc]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeCreationTimestamp</MethodName>
            <MethodComment>/** 
 * Construct the creation timestamp for the trigger. DERBY-5866: Also make sure the creation timestamp is higher than any timestamp on an existing trigger on the same table. Otherwise, the triggers may not fire in the correct order.
 */
</MethodComment>
            <ReturnType>Timestamp</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dd</ParamName>
                    <ParamType>DataDictionary</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Timestamp [now=new Timestamp(System.currentTimeMillis())]</InnerVar>
                <InnerVar>TriggerDescriptorList [tdl=dd.getTriggerDescriptors(triggerTable)]</InnerVar>
                <InnerVar>int [numTriggers=tdl.size()]</InnerVar>
                <InnerVar>Timestamp [highest=tdl.get(numTriggers - 1).getCreationTimestamp()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>now;setTime;[highest.getTime() + 1]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>