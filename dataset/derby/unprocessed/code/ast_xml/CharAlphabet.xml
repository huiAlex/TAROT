<Class>
    <Id>2145</Id>
    <Package>org.apache.derbyTesting.functionTests.util.streams</Package>
    <ClassName>CharAlphabet</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>CharAlphabet  /** 
 * A looping alphabet, returning characters. The alphabet loops over a list of characters. The alphabet-object is used by looping readers, which in turn is used for testing methods requiring streaming inputs. The following alphabets have been defined: &lt;ul&gt;&lt;li&gt;&lt;em&gt;Modern latin, lowercase&lt;/em&gt; ; letters a - z (26) &lt;li&gt;&lt;em&gt;Norwegian/Danish, lowercase&lt;/em&gt; ; letters a - z, plus three additional letters (29) &lt;li&gt;&lt;em&gt;Tamil&lt;/em&gt; ; 46 Tamil letters from UNICODE U0B80 &lt;li&gt;&lt;em&gt;CJK subset&lt;/em&gt; ; 12 letter from UNICODE CJK U4E00  &lt;/ul&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>MODERNLATINLOWER</FieldName>
            <FieldType>char[]</FieldType>
        </Field>
        <Field>
            <FieldName>NO_DK_LOWER</FieldName>
            <FieldType>char[]</FieldType>
        </Field>
        <Field>
            <FieldName>TAMIL</FieldName>
            <FieldType>char[]</FieldType>
        </Field>
        <Field>
            <FieldName>CJKSUBSET</FieldName>
            <FieldType>char[]</FieldType>
        </Field>
        <Field>
            <FieldName>name</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>chars</FieldName>
            <FieldType>char[]</FieldType>
        </Field>
        <Field>
            <FieldName>charCount</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>off</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>modernLatinLowercase</MethodName>
            <MethodComment>/** 
 * Get a modern latin lowercase alphabet.
 */
</MethodComment>
            <ReturnType>CharAlphabet</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cjkSubset</MethodName>
            <MethodComment>/** 
 * Get a CJK subset alphabet.
 */
</MethodComment>
            <ReturnType>CharAlphabet</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>tamil</MethodName>
            <MethodComment>/** 
 * Get a Tamil alphabet
 */
</MethodComment>
            <ReturnType>CharAlphabet</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>singleChar</MethodName>
            <MethodComment>/** 
 * Get an alphabet consisting of a single character.
 */
</MethodComment>
            <ReturnType>CharAlphabet</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ch</ParamName>
                    <ParamType>char</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>CharAlphabet</MethodName>
            <MethodComment>/** 
 * Create an alphabet with the given name and characters.
 * @param name name of the alphabet
 * @param chars characters in the alphabet.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>chars</ParamName>
                    <ParamType>char[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getName</MethodName>
            <MethodComment>/** 
 * Return the name of the alphabet.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>charCount</MethodName>
            <MethodComment>/** 
 * Return the number of characters in the alphabet.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nextCharAsInt</MethodName>
            <MethodComment>/** 
 * Return the next char as an &lt;code&gt;integer&lt;/code&gt;.
 * @return the next character in the alphabet as an &lt;code&gt;integer&lt;/code&gt;
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nextChar</MethodName>
            <MethodComment>/** 
 * Return the next char.
 * @return the next character in the alphabet
 */
</MethodComment>
            <ReturnType>char</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nextCharToRead</MethodName>
            <MethodComment>/** 
 * Compute the next character to read after reading the specified number of characters.  Besides from returning the index, the internal state of the alphabet is updated.
 * @param charsRead the number of characters read
 * @return the index of the next character
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>charsRead</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reset</MethodName>
            <MethodComment>/** 
 * Reset the alphabet, the next character returned will be the first character in the alphabet.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getClone</MethodName>
            <MethodComment>/** 
 * Returns a clone of the alphabet.
 * @return A clone.
 */
</MethodComment>
            <ReturnType>CharAlphabet</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment>/** 
 * Returns a friendlier textual representation of the alphabet.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>