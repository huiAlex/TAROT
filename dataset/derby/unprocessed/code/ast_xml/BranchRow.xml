<Class>
    <Id>1763</Id>
    <Package>org.apache.derby.impl.store.access.btree</Package>
    <ClassName>BranchRow</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>BranchRow  /** 
 * Implements row which is stored in the branch pages of a btree.  A non-suffix compressed branch row contains all of the columns of the leaf rows of a btree and contains an additional field at the end.  The extra field of a branch row in a branch page at level N, is the child page field pointing the page at  level N-1 which has keys which follow or equal the branch row entry. There are 3 ways to use this class to produce a branch row: createEmptyTemplate()  creates a empty row template createBranchRowFromOldBranchRow()  creates a new row with reference to an old branch row. createBranchRowFromOldLeafRow() creates a new row with reference to an old leaf row.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>DUMMY_PAGE_NUMBER</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>branchrow</FieldName>
            <FieldType>DataValueDescriptor[]</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>BranchRow</MethodName>
            <MethodComment>/** 
 * Constuctor for creating an "empty" BranchRow template, suitable for reading in a branchRow from disk.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>BranchRow</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rawtran</ParamName>
                    <ParamType>Transaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>btree</ParamName>
                    <ParamType>BTree</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>SQLLongint [child_page=new SQLLongint(ContainerHandle.INVALID_PAGE_NUMBER)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getChildPage</MethodName>
            <MethodComment>/** 
 * Accessor for the child page field of the branch row.
 * @return The child page object.
 */
</MethodComment>
            <ReturnType>SQLLongint</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createEmptyTemplate</MethodName>
            <MethodComment>/** 
 * Create an empty branch row template suitable for reading branch rows in from disk. This routine will create newly allocated "empty" objects for every column in the template row.
 * @exception StandardException Standard exception policy.
 */
</MethodComment>
            <ReturnType>BranchRow</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rawtran</ParamName>
                    <ParamType>Transaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>btree</ParamName>
                    <ParamType>BTree</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createBranchRowFromOldBranchRow</MethodName>
            <MethodComment>/** 
 * Create a new branch row, given a old branch row and a new child page. Used by BranchControlRow to manufacture new branch rows when splitting or growing the tree. There is no way to "copy" values of a template row, so this class just stores a reference to each of the columns of the Indexable row passed  in.  This is ok as all usages of this class when instantiated this way, have an old branch row from which they are creating a new branch row with the same key values, and a different child page number. WARNING - this branch row is only valid while the old branch row is valid, as it contains references to the columns of the old branch row. So use of the row should only provide read-only access to the objects of the old branch row which are referenced.
 */
</MethodComment>
            <ReturnType>BranchRow</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>childpageno</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BranchRow [newbranch=new BranchRow()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>System;arraycopy;[this.branchrow, 0, newbranch.branchrow, 0, newbranch.branchrow.length - 1]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createBranchRowFromOldLeafRow</MethodName>
            <MethodComment>/** 
 * Create a new branch row, given a old leaf row and a new child page. Used by LeafControlRow to manufacture new branch rows when splitting or growing the tree. There is no way to "copy" values of a template row, so this class just stores a referece to the Indexable row passed in.  This is ok as all usages of this class when instantiated this way, have an old leaf row from which they are creating a new branch row with the same key values, and a different child page number. WARNING - this branch row is only valid while the old leaf row is valid, as it contains references to the columns of the old leaf row. So use of the row should only provide read-only access to the objects of the old leaf row which are referenced.
 */
</MethodComment>
            <ReturnType>BranchRow</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>leafrow</ParamName>
                    <ParamType>DataValueDescriptor[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>childpageno</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BranchRow [newbranch=new BranchRow()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>System;arraycopy;[leafrow, 0, newbranch.branchrow, 0, leafrow.length]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRow</MethodName>
            <MethodComment>/** 
 * Return the branch row. &lt;p&gt; Return the DataValueDescriptor array that represents the branch row,  for use in raw store calls to fetch, insert, and update. &lt;p&gt;
 * @return The branch row object array.
 */
</MethodComment>
            <ReturnType>DataValueDescriptor[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setPageNumber</MethodName>
            <MethodComment>/** 
 * Set the page number field of the branch row to a new value.
 * @param page_number the new page number.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>page_number</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>getChildPage();setValue;[page_number]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>