<Class>
    <Id>2053</Id>
    <Package>org.apache.derby.iapi.jdbc</Package>
    <ClassName>BrokeredConnectionControl</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>BrokeredConnectionControl  /** 
 * Provides control over a BrokeredConnection
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getRealConnection</MethodName>
            <MethodComment>/** 
 * Return the real JDBC connection for the brokered connection.
 */
</MethodComment>
            <ReturnType>EngineConnection</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>notifyException</MethodName>
            <MethodComment>/** 
 * Notify the control class that a SQLException was thrown during a call on one of the brokered connection's methods.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sqle</ParamName>
                    <ParamType>SQLException</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkAutoCommit</MethodName>
            <MethodComment>/** 
 * Allow control over setting auto commit mode.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>autoCommit</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkSavepoint</MethodName>
            <MethodComment>/** 
 * Allow control over creating a Savepoint (JDBC 3.0)
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkRollback</MethodName>
            <MethodComment>/** 
 * Allow control over calling rollback.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkCommit</MethodName>
            <MethodComment>/** 
 * Allow control over calling commit.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkClose</MethodName>
            <MethodComment>/** 
 * Check if the brokered connection can be closed.
 * @throws SQLException if it is not allowed to call close on the brokeredconnection
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkHoldCursors</MethodName>
            <MethodComment>/** 
 * Can cursors be held across commits.
 * @param downgrade true to downgrade the holdability,false to throw an exception.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>holdability</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>downgrade</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isIsolationLevelSetUsingSQLorJDBC</MethodName>
            <MethodComment>/** 
 * Returns true if isolation level has been set using JDBC/SQL.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>resetIsolationLevelFlag</MethodName>
            <MethodComment>/** 
 * Reset the isolation level flag used to keep state in  BrokeredConnection. It will get set to true when isolation level  is set using JDBC/SQL. It will get reset to false at the start and the end of a global transaction.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isInGlobalTransaction</MethodName>
            <MethodComment>/** 
 * Is this a global transaction
 * @return true if this is a global XA transaction
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>closingConnection</MethodName>
            <MethodComment>/** 
 * Close called on BrokeredConnection. If this call returns true then getRealConnection().close() will be called.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>wrapStatement</MethodName>
            <MethodComment>/** 
 * Optionally wrap a Statement with another Statement.
 */
</MethodComment>
            <ReturnType>Statement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>realStatement</ParamName>
                    <ParamType>Statement</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>wrapStatement</MethodName>
            <MethodComment>/** 
 * Optionally wrap a PreparedStatement with another PreparedStatement.
 */
</MethodComment>
            <ReturnType>PreparedStatement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>realStatement</ParamName>
                    <ParamType>PreparedStatement</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sql</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>generateKeys</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>wrapStatement</MethodName>
            <MethodComment>/** 
 * Optionally wrap a CallableStatement with an CallableStatement.
 */
</MethodComment>
            <ReturnType>CallableStatement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>realStatement</ParamName>
                    <ParamType>CallableStatement</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sql</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onStatementClose</MethodName>
            <MethodComment>/** 
 * Close called on the associated PreparedStatement object
 * @param statement PreparedStatement object on which the close event occurred     
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>statement</ParamName>
                    <ParamType>PreparedStatement</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onStatementErrorOccurred</MethodName>
            <MethodComment>/** 
 * Error occurred on associated PreparedStatement object
 * @param statement PreparedStatement object on which the error occured
 * @param sqle      The SQLExeption that caused the error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>statement</ParamName>
                    <ParamType>PreparedStatement</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sqle</ParamName>
                    <ParamType>SQLException</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>