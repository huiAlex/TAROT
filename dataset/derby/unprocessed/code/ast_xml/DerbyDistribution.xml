<Class>
    <Id>122</Id>
    <Package>org.apache.derbyTesting.junit</Package>
    <ClassName>DerbyDistribution</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Comparable</SuperInterface>
        <SuperInterface>DerbyDistribution</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>DerbyDistribution  /** 
 * Holds information required to run a Derby distribution and make choices based on the version of the Derby distribution. &lt;p&gt; &lt;em&gt;Implementation note&lt;/em&gt;: For simplicity distributions off the classes directory have been forbidden. The main reason for this is that it is sometimes a hard requirement that you must include only a single JAR from a distribution on the classpath. One such example is the compatibility test, where you need the testing code from one distribution and the client driver from another. While it is possible to support such a configuration running off the  {@code classes}-directory in many scenarios, it complicates the creation and handling of classpath string. Generating the JARs when testing on trunk seems like an acceptable price to pay.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>EMPTY_FILE_ARRAY</FieldName>
            <FieldType>File[]</FieldType>
        </Field>
        <Field>
            <FieldName>JAR_RUN</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>JAR_CLIENT</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>JAR_ENGINE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>JAR_NET</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>JAR_TESTING</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>REQUIRED_JARS</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>version</FieldName>
            <FieldType>DerbyVersion</FieldType>
        </Field>
        <Field>
            <FieldName>derbyRunJarPath</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>derbyClientJarPath</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>derbyEngineJarPath</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>derbyNetJarPath</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>productionClasspath</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>testingClasspath</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>DerbyDistribution</MethodName>
            <MethodComment>/** 
 * Derives the information for a Derby distribution.
 * @throws NullPointerException if version is {@code null}
 * @see #newInstance(DerbyVersion,File)
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>version</ParamName>
                    <ParamType>DerbyVersion</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>productionJars</ParamName>
                    <ParamType>File[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>testingJars</ParamName>
                    <ParamType>File[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>File [root=productionJars[0].getParentFile()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPath</MethodName>
            <MethodComment>/** 
 * Returns the absolute path to the JAR if it exists, otherwise null. 
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>root</ParamName>
                    <ParamType>File</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>jar</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>File [f=new File(root,jar)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasDerbyRunJar</MethodName>
            <MethodComment>/** 
 * Tells if this distribution has a  {@code derbyrun.jar}. 
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDerbyRunJarPath</MethodName>
            <MethodComment>/** 
 * Returns the path to  {@code derbyrun.jar}.
 * @return A path, or {@code null} if this distribution doesn't come with{@code derbyrun.jar}.
 * @see #hasDerbyRunJar()
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDerbyClientJarPath</MethodName>
            <MethodComment>/** 
 * Returns the path to  {@code derbyclient.jar}. 
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDerbyEngineJarPath</MethodName>
            <MethodComment>/** 
 * Returns the path to  {@code derby.jar}. 
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDerbyNetJarPath</MethodName>
            <MethodComment>/** 
 * Returns the path to  {@code derbynet.jar}. 
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getServerClasspath</MethodName>
            <MethodComment>/** 
 * Returns a classpath with the network server production JARs. 
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getProductionClasspath</MethodName>
            <MethodComment>/** 
 * Returns a classpath with all production JARs. 
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTestingClasspath</MethodName>
            <MethodComment>/** 
 * Returns a classpath with all testing JARs. 
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFullClassPath</MethodName>
            <MethodComment>/** 
 * Returns a classpath with all production and testing JARs. 
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getVersion</MethodName>
            <MethodComment>/** 
 * Returns the version of this distribution. 
 */
</MethodComment>
            <ReturnType>DerbyVersion</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compareTo</MethodName>
            <MethodComment>/** 
 * Orders this distribution and the other distribution based on the version.
 * @param o the other distribution
 * @return {@code 1} if this version is newer, {@code 0} if bothdistributions have the same version, and  {@code -1} if the otherversion is newer.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>o</ParamName>
                    <ParamType>DerbyDistribution</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasRequiredJars</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>jars</ParamName>
                    <ParamType>List</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getProductionJars</MethodName>
            <MethodComment>/** 
 * Helper method extracting Derby production JARs from a directory.
 * @param libDir directory
 * @return A list of JARs (possibly empty).
 */
</MethodComment>
            <ReturnType>File[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>libDir</ParamName>
                    <ParamType>File</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>File[] [pJars=libDir.listFiles(new FilenameFilter(){
  public boolean accept(  File dir,  String name){
    return name.toUpperCase().endsWith(".JAR") &amp;&amp; !isTestingJar(name);
  }
}
)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>accept</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dir</ParamName>
                    <ParamType>File</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTestingJars</MethodName>
            <MethodComment>/** 
 * Helper method extracting Derby testing JARs from a directory.
 * @param libDir directory
 * @return A list of JARs (possibly empty).
 */
</MethodComment>
            <ReturnType>File[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>libDir</ParamName>
                    <ParamType>File</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>File[] [tJars=libDir.listFiles(new FilenameFilter(){
  public boolean accept(  File dir,  String name){
    return isTestingJar(name);
  }
}
)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>accept</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dir</ParamName>
                    <ParamType>File</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getJars</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>File[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>libDir</ParamName>
                    <ParamType>File</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>File[] [jars=libDir.listFiles(new FilenameFilter(){
  public boolean accept(  File dir,  String name){
    return name.toUpperCase().endsWith(".JAR");
  }
}
)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>accept</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dir</ParamName>
                    <ParamType>File</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isTestingJar</MethodName>
            <MethodComment>/** 
 * Tells if the given file is a Derby testing JAR.
 * @param name name of the file
 * @return {@code true} if a testing JAR, {@code false} otherwise
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>constructJarClasspath</MethodName>
            <MethodComment>/** 
 * Merges a list of JAR files into a classpath string.
 * @param jars JAR files to merge
 * @return A classpath string.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>jars</ParamName>
                    <ParamType>File[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuffer [sb=new StringBuffer(512)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newInstance</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Returns a distribution with the specified version, based on the given library directory. &lt;/p&gt; &lt;p&gt; It is the responsibility of the caller to ensure that the specified version matches the JARs in the given directory. &lt;/p&gt;
 * @param version the version of the distribution
 * @param baseDir the base dir for the distribution, holding the Derby JARs
 * @return A representation of the distribution, or {@code null} ifthe specified directory doesn't contain a valid distribution.
 * @throws IllegalArgumentException if {@code version} is {@code null}
 */
</MethodComment>
            <ReturnType>DerbyDistribution</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>version</ParamName>
                    <ParamType>DerbyVersion</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>baseDir</ParamName>
                    <ParamType>File</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newInstance</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Returns a distribution with the specified version, based on the given library and testing directories. &lt;/p&gt; &lt;p&gt; It is the responsibility of the caller to ensure that the specified version matches the JARs in the given directories. &lt;/p&gt;
 * @param version the version of the distribution
 * @param baseDir the directory holding the production JARs
 * @param testDir the directory holding the testing JAR
 * @return A representation of the distribution, or {@code null} ifthe specified directories don't make up a valid distribution.
 * @throws IllegalArgumentException if {@code version} is {@code null}
 */
</MethodComment>
            <ReturnType>DerbyDistribution</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>version</ParamName>
                    <ParamType>DerbyVersion</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>baseDir</ParamName>
                    <ParamType>File</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>testDir</ParamName>
                    <ParamType>File</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>File[] [productionJars=getProductionJars(baseDir)]</InnerVar>
                <InnerVar>File[] [testingJars=getTestingJars(testDir)]</InnerVar>
                <InnerVar>List&lt;File&gt; [tmpJars=new ArrayList&lt;File&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>tmpJars;addAll;[Arrays.asList(productionJars)]</InnerMethodInvoke>
                <InnerMethodInvoke>tmpJars;addAll;[Arrays.asList(testingJars)]</InnerMethodInvoke>
                <InnerMethodInvoke>BaseTestCase;println;["Distribution deemed invalid (note that running " + "off classes isn't supported): " + baseDir.getAbsolutePath() + (baseDir.equals(testDir) ? "" : ", " + testDir.getAbsolutePath())]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>