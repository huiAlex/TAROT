<Class>
    <Id>2002</Id>
    <Package>org.apache.derby.impl.sql.compile</Package>
    <ClassName>ExpressionClassBuilder</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>ExpressionClassBuilderInterface</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ExpressionClassBuilder  /** 
 * ExpressionClassBuilder provides an interface to satisfy generation's common tasks in building classes that involve expressions. This is the common superclass of ActivationClassBuilder and FilterClassBuilder. See the documentation on ActivationClassBuilder.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>currentDatetimeFieldName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>cb</FieldName>
            <FieldType>ClassBuilder</FieldType>
        </Field>
        <Field>
            <FieldName>gc</FieldName>
            <FieldType>GeneratedClass</FieldType>
        </Field>
        <Field>
            <FieldName>nextExprNum</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>nextNonFastExpr</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>nextFieldNum</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>constructor</FieldName>
            <FieldType>MethodBuilder</FieldType>
        </Field>
        <Field>
            <FieldName>myCompCtx</FieldName>
            <FieldType>CompilerContext</FieldType>
        </Field>
        <Field>
            <FieldName>executeMethod</FieldName>
            <FieldType>MethodBuilder</FieldType>
        </Field>
        <Field>
            <FieldName>cdtField</FieldName>
            <FieldType>LocalField</FieldType>
        </Field>
        <Field>
            <FieldName>currentRowScanResultSetName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>getDVF</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>getRSF</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>getEF</FieldName>
            <FieldType>Object</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ExpressionClassBuilder</MethodName>
            <MethodComment>/** 
 * By the time this is done, it has constructed the following class: &lt;pre&gt; final public class #className extends #superClass { public #className() { super(); } } &lt;/pre&gt;
 * @exception StandardException thrown on failure
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>superClass</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>className</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cc</ParamName>
                    <ParamType>CompilerContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [modifiers=Modifier.PUBLIC | Modifier.FINAL]</InnerVar>
                <InnerVar>JavaFactory [javaFac=myCompCtx.getJavaFactory()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;beginConstructor;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPackageName</MethodName>
            <MethodComment>/** 
 * Get the name of the package that the generated class will live in.
 * @return	name of package that the generated class will live in.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRowCount</MethodName>
            <MethodComment>/** 
 * Get the number of ExecRows that must be allocated
 * @return	number of ExecRows that must be allocated
 * @exception StandardException thrown on failure
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setNumSubqueries</MethodName>
            <MethodComment>/** 
 * Sets the number of subqueries under this expression
 * @exception StandardException thrown on failure
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBaseClassName</MethodName>
            <MethodComment>/** 
 * Return the base class of the activation's hierarchy (the subclass of Object). This class is expected to hold methods used by all compilation code, such as datatype compilation code, e.g. getDataValueFactory.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getConstructor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>MethodBuilder</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getClassBuilder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClassBuilder</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getExecuteMethod</MethodName>
            <MethodComment>/** 
 * Get a method builder for adding code to the execute() method. The method builder does not actually build a method called execute. Instead, it creates a method that overrides the reinit() method, which is called from execute() on every execution in order to reinitialize the data structures.
 */
</MethodComment>
            <ReturnType>MethodBuilder</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>beginConstructor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>MethodBuilder [realConstructor=cb.newConstructorBuilder(Modifier.PUBLIC)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>realConstructor;callSuper;[]</InnerMethodInvoke>
                <InnerMethodInvoke>realConstructor;methodReturn;[]</InnerMethodInvoke>
                <InnerMethodInvoke>realConstructor;complete;[]</InnerMethodInvoke>
                <InnerMethodInvoke>constructor;addThrownException;[ClassName.StandardException]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>finishConstructor</MethodName>
            <MethodComment>/** 
 * Finish the constructor by newing the array of Rows and putting a return  at the end of it.
 * @exception StandardException thrown on failure
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [numResultSets]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setNumSubqueries;[]</InnerMethodInvoke>
                <InnerMethodInvoke>constructor;methodReturn;[]</InnerMethodInvoke>
                <InnerMethodInvoke>constructor;complete;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addNewArrayOfRows</MethodName>
            <MethodComment>/** 
 * Generate the assignment for row = new ExecRow[numResultSets]
 * @param numResultSets	The size of the array.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>numResultSets</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>constructor;pushThis;[]</InnerMethodInvoke>
                <InnerMethodInvoke>constructor;pushNewArray;[ClassName.ExecRow, numResultSets]</InnerMethodInvoke>
                <InnerMethodInvoke>constructor;putField;[ClassName.BaseActivation, "row", ClassName.ExecRow + "[]"]</InnerMethodInvoke>
                <InnerMethodInvoke>constructor;endStatement;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newFieldDeclaration</MethodName>
            <MethodComment>/** 
 * Add a field declaration to the generated class
 * @param modifiers	The | of the modifier values such as public, static, etc.
 * @param type		The type of the field in java language.
 * @param name		The name of the field.
 * @return None.
 */
</MethodComment>
            <ReturnType>LocalField</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>modifiers</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newFieldDeclaration</MethodName>
            <MethodComment>/** 
 * Add an arbitrarily named field to the generated class. This is used to generate fields where the caller doesn't care what the field is named.  It is especially useful for generating arbitrary numbers of fields, where the caller doesn't know in advance how many fields will be used.  For example, it is used for generating fields to hold intermediate values from expressions.
 * @param modifiers	The | of the modifier values such as public, static, etc.
 * @param type		The type of the field in java language.
 * @return	The name of the new field
 */
</MethodComment>
            <ReturnType>LocalField</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>modifiers</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newGeneratedFun</MethodName>
            <MethodComment>/** 
 * Activations might have need of internal functions that are not used by the result sets, but by other activation functions. Thus, we make it possible for functions to be generated directly as well as through the newExprFun interface.  newExprFun should be used when a static field pointing to the expression function is needed. &lt;p&gt; The generated function will generally have a generated name that can be viewed through the MethodBuilder interface. This name is generated to ensure uniqueness from other function names in the activation class. If you pass in a function name, think carefully about whether it will collide with other names.
 * @param returnType the return type of the function
 * @param modifiers the modifiers on the function
 * @see #newExprFun
 */
</MethodComment>
            <ReturnType>MethodBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>returnType</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>modifiers</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newGeneratedFun</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>MethodBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>returnType</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>modifiers</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>params</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [exprName="g".concat(Integer.toString(nextNonFastExpr++))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newGeneratedFun</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>MethodBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>exprName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>returnType</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>modifiers</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>params</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodBuilder [exprMethod]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>exprMethod;addThrownException;[ClassName.StandardException]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newExprFun</MethodName>
            <MethodComment>/** 
 * "ExprFun"s are the "expression functions" that are specific to a given JSQL statement. For example, an ExprFun is generated to evaluate the where clause of a select statement and return a boolean result. &lt;p&gt; All methods return by this are expected to be called via the GeneratedMethod interface. Thus the methods are public and return java.lang.Object. &lt;p&gt; Once the exprfun has been created, the caller will need to add statements to it, minimally a return statement. &lt;p&gt; ExprFuns  return Object types, since they are invoked through reflection and thus their return type would get wrapped in an object anyway. For example: return java.lang.Boolean, not boolean.
 */
</MethodComment>
            <ReturnType>MethodBuilder</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [exprName="e".concat(Integer.toString(nextExprNum++))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>pushMethodReference</MethodName>
            <MethodComment>/** 
 * Push an expression that is a GeneratedMethod reference to the passed in method. aka. a "function pointer".
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mb</ParamName>
                    <ParamType>MethodBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>exprMethod</ParamName>
                    <ParamType>MethodBuilder</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mb;pushThis;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;push;[exprMethod.getName()]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;callMethod;[VMOpcode.INVOKEINTERFACE, ClassName.GeneratedByteCode, "getMethod", ClassName.GeneratedMethod, 1]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newUserExprFun</MethodName>
            <MethodComment>/** 
 * Start a user expression.  The difference between a normal expression (returned by newExprFun) and a user expression is that a user expression catches all exceptions (because we don't want random exceptions thrown from user methods to propagate to the rest of the system.
 * @return	A new MethodBuilder
 */
</MethodComment>
            <ReturnType>MethodBuilder</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>MethodBuilder [mb=newExprFun()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mb;addThrownException;["java.lang.Exception"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCurrentDateExpression</MethodName>
            <MethodComment>/** 
 * This utility method returns an expression for CURRENT_DATE. Get the expression this way, because the activation needs to  generate support information for CURRENT_DATE, that would otherwise be painful to create manually.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mb</ParamName>
                    <ParamType>MethodBuilder</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LocalField [lf=getCurrentSetup()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mb;getField;[lf]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;callMethod;[VMOpcode.INVOKEVIRTUAL, (String)null, "getCurrentDate", "java.sql.Date", 0]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCurrentTimeExpression</MethodName>
            <MethodComment>/** 
 * This utility method returns an expression for CURRENT_TIME. Get the expression this way, because the activation needs to  generate support information for CURRENT_TIME, that would otherwise be painful to create manually.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mb</ParamName>
                    <ParamType>MethodBuilder</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LocalField [lf=getCurrentSetup()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mb;getField;[lf]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;callMethod;[VMOpcode.INVOKEVIRTUAL, (String)null, "getCurrentTime", "java.sql.Time", 0]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCurrentTimestampExpression</MethodName>
            <MethodComment>/** 
 * This utility method generates an expression for CURRENT_TIMESTAMP. Get the expression this way, because the activation needs to  generate support information for CURRENT_TIMESTAMP, that would otherwise be painful to create manually.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mb</ParamName>
                    <ParamType>MethodBuilder</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LocalField [lf=getCurrentSetup()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mb;getField;[lf]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;callMethod;[VMOpcode.INVOKEVIRTUAL, (String)null, "getCurrentTimestamp", "java.sql.Timestamp", 0]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getColumnOrdering</MethodName>
            <MethodComment>/** 
 * These utility methods buffers compilation from the IndexColumnOrder class. They create an ordering based on their parameter, stuff that into the prepared statement, and then return the entry # for use in the generated code. We could write another utility method to generate code to turn an entry # back into an object, but so far no-one needs it. WARNING: this is a crafty method that ASSUMES that  you want every column in the list ordered, and that every column in the list is the entire actual result colunm. It is only useful for DISTINCT in select.	
 */
</MethodComment>
            <ReturnType>FormatableArrayHolder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rclist</ParamName>
                    <ParamType>ResultColumnList</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>IndexColumnOrder[] [ordering]</InnerVar>
                <InnerVar>int [numCols=(rclist == null) ? 0 : rclist.size()]</InnerVar>
                <InnerVar>int [numRealCols=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addColumnToOrdering</MethodName>
            <MethodComment>/** 
 * Add a column to the existing Ordering list.  Takes a column id and only adds it if it isn't in the list.
 * @return the ColumnOrdering array
 */
</MethodComment>
            <ReturnType>FormatableArrayHolder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>orderingHolder</ParamName>
                    <ParamType>FormatableArrayHolder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columnNum</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ColumnOrdering[] [ordering=orderingHolder.getArray(ColumnOrdering[].class)]</InnerVar>
                <InnerVar>int [length=ordering.length]</InnerVar>
                <InnerVar>IndexColumnOrder[] [newOrdering=new IndexColumnOrder[length + 1]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>System;arraycopy;[ordering, 0, newOrdering, 0, length]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getColumnOrdering</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>FormatableArrayHolder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>oclist</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [numCols=(oclist == null) ? 0 : oclist.size()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addItem</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>o</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>pushDataValueFactory</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mb</ParamName>
                    <ParamType>MethodBuilder</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mb;pushThis;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;callMethod;[getDVF]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>pushGetResultSetFactoryExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mb</ParamName>
                    <ParamType>MethodBuilder</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mb;pushThis;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;callMethod;[getRSF]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>pushGetExecutionFactoryExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mb</ParamName>
                    <ParamType>MethodBuilder</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mb;pushThis;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;callMethod;[getEF]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>pushColumnReference</MethodName>
            <MethodComment>/** 
 * Generate a reference to a colunm in a result set.
 * @param rsNumber the result set number
 * @param colId the column number
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mb</ParamName>
                    <ParamType>MethodBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rsNumber</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>colId</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mb;pushThis;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;push;[rsNumber]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;push;[colId]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;callMethod;[VMOpcode.INVOKEVIRTUAL, ClassName.BaseActivation, "getColumnFromRow", ClassName.DataValueDescriptor, 2]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>pushPVSReference</MethodName>
            <MethodComment>/** 
 * Generate a reference to the parameter value set that all activations use.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mb</ParamName>
                    <ParamType>MethodBuilder</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mb;pushThis;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;getField;[ClassName.BaseActivation, "pvs", ClassName.ParameterValueSet]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCurrentSetup</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>LocalField</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>constructor;pushNewStart;[ClassName.CurrentDatetime]</InnerMethodInvoke>
                <InnerMethodInvoke>constructor;pushNewComplete;[0]</InnerMethodInvoke>
                <InnerMethodInvoke>constructor;setField;[cdtField]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newFieldName</MethodName>
            <MethodComment>/** 
 * generated the next field name available. these are of the form 'e#', where # is incremented each time. This shares the name space with the expression methods as Java allows names and fields to have the same name. This reduces the number of constant pool entries created for a generated class file.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTypeCompiler</MethodName>
            <MethodComment>/** 
 * Get the TypeCompiler associated with the given TypeId
 * @param typeId	The TypeId to get a TypeCompiler for
 * @return	The corresponding TypeCompiler
 */
</MethodComment>
            <ReturnType>TypeCompiler</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>typeId</ParamName>
                    <ParamType>TypeId</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getGeneratedClass</MethodName>
            <MethodComment>/** 
 * Take the generated class, and turn it into an actual class. &lt;p&gt; This method assumes, does not check, that the class and its parts are all complete.
 * @param savedBytes place to save generated bytes.if null, it is ignored
 * @exception StandardException thrown when exception occurs
 */
</MethodComment>
            <ReturnType>GeneratedClass</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>savedBytes</ParamName>
                    <ParamType>ByteArray</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>pushThisAsActivation</MethodName>
            <MethodComment>/** 
 * Get a "this" expression declared as an Activation. This is the commonly used type of the this expression.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mb</ParamName>
                    <ParamType>MethodBuilder</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mb;pushThis;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;upCast;[ClassName.Activation]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateNull</MethodName>
            <MethodComment>/** 
 * Generate a Null data value. Nothing is required on the stack, a SQL null data value is pushed.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mb</ParamName>
                    <ParamType>MethodBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tc</ParamName>
                    <ParamType>TypeCompiler</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>collationType</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;pushDataValueFactory;[mb]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;pushNull;[tc.interfaceName()]</InnerMethodInvoke>
                <InnerMethodInvoke>tc;generateNull;[mb, collationType]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateNullWithExpress</MethodName>
            <MethodComment>/** 
 * Generate a Null data value. The express value is required on the stack and will be popped, a SQL null data value is pushed.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mb</ParamName>
                    <ParamType>MethodBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tc</ParamName>
                    <ParamType>TypeCompiler</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>collationType</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;pushDataValueFactory;[mb]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;swap;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;cast;[tc.interfaceName()]</InnerMethodInvoke>
                <InnerMethodInvoke>tc;generateNull;[mb, collationType]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateDataValue</MethodName>
            <MethodComment>/** 
 * Generate a data value. The value is to be set in the SQL data value is required on the stack and will be popped, a SQL data value is pushed.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mb</ParamName>
                    <ParamType>MethodBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tc</ParamName>
                    <ParamType>TypeCompiler</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>collationType</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>field</ParamName>
                    <ParamType>LocalField</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;pushDataValueFactory;[mb]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;swap;[]</InnerMethodInvoke>
                <InnerMethodInvoke>tc;generateDataValue;[mb, collationType, field]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newRowLocationScanResultSetName</MethodName>
            <MethodComment>/** 
 * generates a variable name for the rowscanresultset. This can not be a fixed name because in cases like cascade delete same activation class will be dealing  more than one RowScanResultSets for dependent tables.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRowLocationScanResultSetName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>