<Class>
    <Id>492</Id>
    <Package>org.apache.derby.optional.dump</Package>
    <ClassName>RawDBReader</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>OptionalTool</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>RawDBReader  /** 
 * &lt;p&gt; OptionalTool to create wrapper functions and views for all of the user heap conglomerates in the seg0 subdirectory of a corrupt database. &lt;/p&gt;
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>RawDBReader</MethodName>
            <MethodComment>/** 
 * 0-arg constructor required by the OptionalTool contract 
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>loadTool</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Creates the following schema objects in a healthy database in order to siphon data out of a corrupt database: &lt;/p&gt; &lt;ul&gt; &lt;li&gt;A control schema containing views on SYSSCHEMAS, SYSCONGLOMERATES, SYSTABLES and SYSCOLUMNS in the corrupt database.&lt;/li&gt; &lt;li&gt;A schema for every user schema in the corrupt database.&lt;/li&gt; &lt;li&gt;Table functions and views on every user table in the corrupt database.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt; In addition, the tool creates a script for siphoning data out of the corrupt database. &lt;/p&gt; &lt;p&gt; Takes the following arguments: &lt;/p&gt; &lt;ul&gt; &lt;li&gt;recoveryScript (required) - Name of the recovery script file which the tool will write.&lt;/li&gt; &lt;li&gt;controlSchema (required) - Name of a schema in which control objects will be created. These include the views on the corrupt database's SYSSCHEMAS, SYSCONGLOMERATES, SYSTABLES, and SYSCOLUMNS catalogs. May not be null or an empty string.&lt;/li&gt; &lt;li&gt;schemaPrefix (required) - This prefix is prepended to the names of the schemas which are created in the healthy database. May not be null or empty.&lt;/li&gt; &lt;li&gt;corruptDBLocation (required) - Absolute path to the corrupt database directory. That is the directory which contains service.properties. May not be null or empty.&lt;/li&gt; &lt;li&gt;encryptionAttributes (required) - Encryption attributes which were used to connect to the corrupt database when it was bootable. May be null if encryption is not being used.&lt;/li&gt; &lt;li&gt;dbo (required) - User name of the owner of the corrupt database. May be null if authentication is not being used.&lt;/li&gt; &lt;li&gt;dboPassword (required) - Password for the owner of the corrupt database. May be null if authentication is not being used.&lt;/li&gt; &lt;/ul&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>configurationParameters</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [idx=0]</InnerVar>
                <InnerVar>String [recoveryScript=configurationParameters[idx++]]</InnerVar>
                <InnerVar>String [controlSchema=configurationParameters[idx++]]</InnerVar>
                <InnerVar>String [schemaPrefix=configurationParameters[idx++]]</InnerVar>
                <InnerVar>String [corruptDBLocation=configurationParameters[idx++]]</InnerVar>
                <InnerVar>String [encryptionAttributes=configurationParameters[idx++]]</InnerVar>
                <InnerVar>String [dbo=configurationParameters[idx++]]</InnerVar>
                <InnerVar>String [dboPassword=configurationParameters[idx++]]</InnerVar>
                <InnerVar>Connection [conn=getDerbyConnection()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;createControlSchema;[conn, controlSchema, corruptDBLocation, encryptionAttributes, dbo, dboPassword]</InnerMethodInvoke>
                <InnerMethodInvoke>null;createUserSchemas;[conn, controlSchema, schemaPrefix, corruptDBLocation, encryptionAttributes, dbo, dboPassword]</InnerMethodInvoke>
                <InnerMethodInvoke>null;createViews;[conn, recoveryScript, controlSchema, schemaPrefix, corruptDBLocation, encryptionAttributes, dbo, dboPassword]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nullOrEmpty</MethodName>
            <MethodComment>/** 
 * Returns true if the text is null or empty 
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>unloadTool</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Removes the schemas, table functions, and views created by loadTool(). &lt;/p&gt; &lt;p&gt; Takes the following arguments: &lt;/p&gt; &lt;ul&gt; &lt;li&gt;controlSchema (required) - Name of the schema in which loadTool() created control objects in the healthy database. May not be null or an empty string.&lt;/li&gt; &lt;li&gt;schemaPrefix (required) - This is the prefix which was prepended to the names of the schemas which loadTool() created in the healthy database. May not be null or empty.&lt;/li&gt; &lt;/ul&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>configurationParameters</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [idx=0]</InnerVar>
                <InnerVar>String [controlSchema=configurationParameters[idx++]]</InnerVar>
                <InnerVar>String [schemaPrefix=configurationParameters[idx++]]</InnerVar>
                <InnerVar>Connection [conn=getDerbyConnection()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;dropViews;[conn, schemaPrefix]</InnerMethodInvoke>
                <InnerMethodInvoke>null;dropUserSchemas;[conn, schemaPrefix]</InnerMethodInvoke>
                <InnerMethodInvoke>null;dropControlSchema;[conn, controlSchema]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>badArgs</MethodName>
            <MethodComment>/** 
 * Return a "bad args" exception 
 */
</MethodComment>
            <ReturnType>SQLException</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>message</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createControlSchema</MethodName>
            <MethodComment>/** 
 * Create and populate the schema which holds control objects.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conn</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>controlSchema</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>corruptDBLocation</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>encryptionAttributes</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dbo</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dboPassword</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;executeDDL;[conn, "create schema " + controlSchema]</InnerMethodInvoke>
                <InnerMethodInvoke>null;executeDDL;[conn, "set schema " + controlSchema]</InnerMethodInvoke>
                <InnerMethodInvoke>null;executeDDL;[conn, "create type serializable external name 'java.io.Serializable' language java"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;createTable;[conn, controlSchema, "SYSCONGLOMERATES", "( schemaid char(36), tableid char(36), conglomeratenumber bigint, conglomeratename varchar( 128), isindex boolean, descriptor serializable, isconstant boolean, conglomerateid char( 36 ) )", "c20.dat", corruptDBLocation, encryptionAttributes, dbo, dboPassword]</InnerMethodInvoke>
                <InnerMethodInvoke>null;createTable;[conn, controlSchema, "SYSCOLUMNS", "( referenceid char(36), columnname varchar(128), columnnumber int, columndatatype serializable, columndefault serializable, columndefaultid char(36), autoincrementvalue bigint, autoincrementstart bigint, autoincrementinc bigint, autoincrementcycle boolean )", "c90.dat", corruptDBLocation, encryptionAttributes, dbo, dboPassword]</InnerMethodInvoke>
                <InnerMethodInvoke>null;createTable;[conn, controlSchema, "SYSSCHEMAS", DataFileVTI.SYSSCHEMAS_SIGNATURE, DataFileVTI.SYSSCHEMAS_CONGLOMERATE_NAME, corruptDBLocation, encryptionAttributes, dbo, dboPassword]</InnerMethodInvoke>
                <InnerMethodInvoke>null;createTable;[conn, controlSchema, "SYSTABLES", DataFileVTI.SYSTABLES_SIGNATURE, DataFileVTI.SYSTABLES_CONGLOMERATE_NAME, corruptDBLocation, encryptionAttributes, dbo, dboPassword]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createTable</MethodName>
            <MethodComment>/** 
 * Create a table function and view for a corrupt database table.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conn</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>schema</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableSignature</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>heapFileName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>corruptDBLocation</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>encryptionAttributes</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dbo</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dboPassword</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [qualifiedName=schema + "." + tableName]</InnerVar>
                <InnerVar>String [dataFileVTIClassName=DataFileVTI.class.getName()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;executeDDL;[conn, "create function " + qualifiedName + "\n"+ "(\n"+ "    databaseDirectoryName varchar( 32672 ),\n"+ "    dataFileName varchar( 32672 ),\n"+ "    tableSignature varchar( 32672 ),\n"+ "    encryptionAttributes varchar( 32672 ),\n"+ "    userName varchar( 32672 ),\n"+ "    password varchar( 32672 )\n"+ ")\n"+ "returns table\n"+ tableSignature+ "language java\n"+ "parameter style derby_jdbc_result_set\n"+ "no sql\n"+ "external name '"+ dataFileVTIClassName+ ".dataFileVTI'\n"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;executeDDL;[conn, "create view " + qualifiedName + "\n"+ "as select * from table\n"+ "(\n"+ "    "+ qualifiedName+ "\n"+ "    (\n"+ "        '"+ corruptDBLocation+ "',\n"+ "        '"+ heapFileName+ "',\n"+ "        '"+ tableSignature+ "',\n"+ "        "+ singleQuote(encryptionAttributes)+ ",\n"+ "        "+ singleQuote(dbo)+ ",\n"+ "        "+ singleQuote(dboPassword)+ "\n"+ "    )\n"+ ") t\n"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createUserSchemas</MethodName>
            <MethodComment>/** 
 * Create user schemas.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conn</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>controlSchema</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>schemaPrefix</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>corruptDBLocation</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>encryptionAttributes</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dbo</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dboPassword</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PreparedStatement [ps=prepareStatement(conn,"select schemaName\n" + "from " + controlSchema + ".sysschemas\n"+ "where schemaName not like 'SYS%' and schemaName != 'NULLID' and schemaName != 'SQLJ'\n")]</InnerVar>
                <InnerVar>ResultSet [rs=ps.executeQuery()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rs;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>ps;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeSchemaName</MethodName>
            <MethodComment>/** 
 * Make the name of a local schema from a prefix and the name of a corrupt schema 
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>schemaPrefix</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>corruptName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createViews</MethodName>
            <MethodComment>/** 
 * Create table functions and views on corrupt user tables. These objects are created in the healthy database. Write the recovery script.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conn</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>recoveryScriptName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>controlSchema</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>schemaPrefix</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>corruptDBLocation</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>encryptionAttributes</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dbo</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dboPassword</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>File [recoveryScript=new File(recoveryScriptName)]</InnerVar>
                <InnerVar>PrintWriter [scriptWriter=null]</InnerVar>
                <InnerVar>String [localDBName=((EmbedConnection)conn).getDBName()]</InnerVar>
                <InnerVar>PreparedStatement [ps=prepareStatement(conn,"select s.schemaName, t.tableName, g.conglomerateNumber, c.columnName, c.columnNumber, c.columnDatatype\n" + "from " + controlSchema + ".sysschemas s,\n"+ controlSchema+ ".systables t,\n"+ controlSchema+ ".sysconglomerates g,\n"+ controlSchema+ ".syscolumns c\n"+ "where s.schemaName not like 'SYS%' and schemaName != 'NULLID' and schemaName != 'SQLJ'\n"+ "and s.schemaID = t.schemaID\n"+ "and t.tableID = g.tableID and not g.isindex\n"+ "and t.tableID = c.referenceID\n"+ "order by s.schemaName, t.tableName, c.columnNumber")]</InnerVar>
                <InnerVar>ResultSet [rs=ps.executeQuery()]</InnerVar>
                <InnerVar>ArrayList&lt;String&gt; [columnNames=new ArrayList&lt;String&gt;()]</InnerVar>
                <InnerVar>ArrayList&lt;TypeDescriptor&gt; [columnTypes=new ArrayList&lt;TypeDescriptor&gt;()]</InnerVar>
                <InnerVar>String [corruptSchemaName=null]</InnerVar>
                <InnerVar>String [corruptTableName=null]</InnerVar>
                <InnerVar>String [schemaName=null]</InnerVar>
                <InnerVar>String [tableName=null]</InnerVar>
                <InnerVar>long [conglomerateNumber=-1L]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>scriptWriter;println;["connect 'jdbc:derby:" + localDBName + "';\n"]</InnerMethodInvoke>
                <InnerMethodInvoke>rs;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>ps;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>scriptWriter;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>scriptWriter;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>normalizeColumnName</MethodName>
            <MethodComment>/** 
 * Use dblook methods to normalize the name of a column 
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>unnormalizedName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createView</MethodName>
            <MethodComment>/** 
 * Create the table function and view for a single corrupt table. Add statements to the recovery script for siphoning data out of the corrupt database into the healthy database.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conn</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>scriptWriter</ParamName>
                    <ParamType>PrintWriter</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>controlSchema</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>corruptSchemaName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>corruptTableName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>schemaName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>conglomerateNumber</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columnNames</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columnTypes</ParamName>
                    <ParamType>TypeDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>corruptDBLocation</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>encryptionAttributes</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dbo</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dboPassword</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [conglomerateName="c" + Long.toHexString(conglomerateNumber) + ".dat"]</InnerVar>
                <InnerVar>String [tableSignature=makeTableSignature(controlSchema,columnNames,columnTypes)]</InnerVar>
                <InnerVar>String [localTableName=IdUtil.normalToDelimited(corruptSchemaName) + "." + IdUtil.normalToDelimited(corruptTableName)]</InnerVar>
                <InnerVar>String [viewName=schemaName + "." + tableName]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>scriptWriter;println;["-- siphon data out of " + conglomerateName]</InnerMethodInvoke>
                <InnerMethodInvoke>scriptWriter;println;["create table " + localTableName + " as select * from "+ viewName+ " with no data;"]</InnerMethodInvoke>
                <InnerMethodInvoke>scriptWriter;println;["insert into " + localTableName + " select * from "+ viewName+ ";\n"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;createTable;[conn, schemaName, tableName, tableSignature, conglomerateName, corruptDBLocation, encryptionAttributes, dbo, dboPassword]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeTableSignature</MethodName>
            <MethodComment>/** 
 * Make the signature of a table from its column names and types 
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>controlSchema</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columnNames</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columnTypes</ParamName>
                    <ParamType>TypeDescriptor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuilder [buffer=new StringBuilder()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>buffer;append;["( "]</InnerMethodInvoke>
                <InnerMethodInvoke>buffer;append;[" )"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>singleQuote</MethodName>
            <MethodComment>/** 
 * Return "null" if string is null, otherwise single quote it 
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>dropViews</MethodName>
            <MethodComment>/** 
 * Drop the table functions and views on the corrupt user tables.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conn</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>schemaPrefix</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PreparedStatement [ps=prepareStatement(conn,"select s.schemaName, t.tableName\n" + "from sys.sysschemas s, sys.systables t\n" + "where s.schemaName like '" + schemaPrefix + "%'\n"+ "and s.schemaID = t.schemaID")]</InnerVar>
                <InnerVar>ResultSet [rs=ps.executeQuery()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rs;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>ps;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>dropTable</MethodName>
            <MethodComment>/** 
 * Drop the table function and view for a catalog in the corrupt database.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conn</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>schema</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [qualifiedName=schema + "." + tableName]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;executeDDL;[conn, "drop view " + qualifiedName]</InnerMethodInvoke>
                <InnerMethodInvoke>null;executeDDL;[conn, "drop function " + qualifiedName]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>dropUserSchemas</MethodName>
            <MethodComment>/** 
 * Drop the now empty schemas which held the table functions and views on conglomerates in the corrupt database.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conn</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>schemaPrefix</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PreparedStatement [ps=prepareStatement(conn,"select s.schemaName\n" + "from sys.sysschemas s\n" + "where s.schemaName like '" + schemaPrefix + "%'\n")]</InnerVar>
                <InnerVar>ResultSet [rs=ps.executeQuery()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rs;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>ps;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>dropControlSchema</MethodName>
            <MethodComment>/** 
 * Drop the schema which holds the table functions and views on the corrupt core conglomerates.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conn</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>controlSchema</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;executeDDL;[conn, "set schema sys"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;dropTable;[conn, controlSchema, "SYSTABLES"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;dropTable;[conn, controlSchema, "SYSSCHEMAS"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;dropTable;[conn, controlSchema, "SYSCOLUMNS"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;dropTable;[conn, controlSchema, "SYSCONGLOMERATES"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;executeDDL;[conn, "drop type " + controlSchema + ".serializable restrict"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;executeDDL;[conn, "drop schema " + controlSchema + " restrict"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDerbyConnection</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Connection</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>delimitedID</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>stringLiteral</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>executeDDL</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conn</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PreparedStatement [ddl=prepareStatement(conn,text)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ddl;execute;[]</InnerMethodInvoke>
                <InnerMethodInvoke>ddl;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>prepareStatement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PreparedStatement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conn</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>wrap</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>SQLException</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Throwable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [errorMessage=t.getMessage()]</InnerVar>
                <InnerVar>String [sqlState=org.apache.derby.shared.common.reference.SQLState.JAVA_EXCEPTION.substring(0,5)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>