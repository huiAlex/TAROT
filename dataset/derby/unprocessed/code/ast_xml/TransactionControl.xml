<Class>
    <Id>216</Id>
    <Package>org.apache.derby.iapi.transaction</Package>
    <ClassName>TransactionControl</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>TransactionControl  /** 
 * Provide support to transactions to manage sets of actions to perform at transaction boundaries. &lt;P&gt; Add rollback of savepoints? TODO: A
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>UNSPECIFIED_ISOLATION_LEVEL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>READ_UNCOMMITTED_ISOLATION_LEVEL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>READ_COMMITTED_ISOLATION_LEVEL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>REPEATABLE_READ_ISOLATION_LEVEL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SERIALIZABLE_ISOLATION_LEVEL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>CS_TO_JDBC_ISOLATION_LEVEL_MAP</FieldName>
            <FieldType>int[]</FieldType>
        </Field>
        <Field>
            <FieldName>CS_TO_SQL_ISOLATION_MAP</FieldName>
            <FieldType>String[][]</FieldType>
        </Field>
        <Field>
            <FieldName>listeners</FieldName>
            <FieldType>ArrayList</FieldType>
        </Field>
        <Field>
            <FieldName>listeners</FieldName>
            <FieldType>TransactionListener</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>jdbcIsolationLevel</MethodName>
            <MethodComment>/** 
 * Map a Derby isolation level to the corresponding JDBC level 
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>derbyIsolationLevel</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isolationTextNames</MethodName>
            <MethodComment>/** 
 * Map Derby isolation level to SQL text values 
 */
</MethodComment>
            <ReturnType>String[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>derbyIsolationLevel</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isolationMapCount</MethodName>
            <MethodComment>/** 
 * Get number of isolation string mappings 
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>TransactionControl</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addListener</MethodName>
            <MethodComment>/** 
 * Add a listener to the curent transaction. A listener may be added multiple times and it will receive multiple callbacks.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>listener</ParamName>
                    <ParamType>TransactionListener</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>listeners;add;[listener]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeListener</MethodName>
            <MethodComment>/** 
 * Remove a listener from the current transaction.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>listener</ParamName>
                    <ParamType>TransactionListener</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>listeners;remove;[listener]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>preCommitNotify</MethodName>
            <MethodComment>/** 
 * Notify all listeners that a commit is about to occur. If a listener throws an exception then no further listeners will be notified and a StandardException with rollback severity will be thrown.
 * @throws StandardException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>preRollbackNotify</MethodName>
            <MethodComment>/** 
 * Notify all listeners that a rollback is about to occur. If a listener throws an exception then no further listeners will be notified and a StandardException with shutdown database(?) severity will be thrown.
 * @throws StandardException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>