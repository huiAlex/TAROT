<Class>
    <Id>704</Id>
    <Package>org.apache.derby.iapi.store.raw.log</Package>
    <ClassName>Logger</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>logAndDo</MethodName>
            <MethodComment>/** 
 * Log the loggable operation under the context of the transaction and then apply the operation to the RawStore. &lt;BR&gt; Before you call this method, make sure that the Loggable's doMe method will succeed.  This method will go ahead and send the log record to disk, and once it does that, then doMe cannot fail or the system will be shut down and recovery may fail.  So it is &lt;B&gt; very important  &lt;/B&gt; to make sure that every resource you need for the loggable's doMe method, such as disk space, has be acquired or accounted for before calling logAndDo.
 * @param xact		the transaction that is affecting the change
 * @param operation	the loggable operation that describes the change
 * @return LogInstant that is the LogInstant of the loggable operation 
 * @exception StandardException	Standard Derby error policy
 */
</MethodComment>
            <ReturnType>LogInstant</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xact</ParamName>
                    <ParamType>RawTransaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>operation</ParamName>
                    <ParamType>Loggable</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>logAndUndo</MethodName>
            <MethodComment>/** 
 * Log the compensation operation under the context of the transaction  and then apply the undo to the RawStore. &lt;BR&gt; Before you call this method, make sure that the Compensation's doMe method will succeed.  This method will go ahead and send the log record to disk, and once it does that, then doMe cannot fail or the system will be shut down and recovery may fail.  So it is &lt;B&gt; very important  &lt;/B&gt; to make sure that every resource you need for the Compensation's  doMe method, such as disk space, has be acquired or accounted for before calling logAndUnDo.
 * @param xact		the transaction that is affecting the undo
 * @param operation	the compensation operation
 * @param undoInstant	the logInstant of the change that is to be undone
 * @param in			optional data
 * @return LogInstant that is the LogInstant of the compensation operation
 * @exception StandardException	Standard Derby error policy
 */
</MethodComment>
            <ReturnType>LogInstant</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xact</ParamName>
                    <ParamType>RawTransaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>operation</ParamName>
                    <ParamType>Compensation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>undoInstant</ParamName>
                    <ParamType>LogInstant</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>in</ParamName>
                    <ParamType>LimitObjectInput</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>flush</MethodName>
            <MethodComment>/** 
 * Flush all unwritten log record up to the log instance indicated to disk.
 * @param where flush log up to here
 * @exception StandardException cannot flush due to sync error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>where</ParamName>
                    <ParamType>LogInstant</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>flushAll</MethodName>
            <MethodComment>/** 
 * Flush all unwritten log to disk
 * @exception StandardException cannot flush due to sync error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reprepare</MethodName>
            <MethodComment>/** 
 * During recovery re-prepare a transaction. &lt;p&gt; After redo() and undo(), this routine is called on all outstanding  in-doubt (prepared) transactions.  This routine re-acquires all  logical write locks for operations in the xact, and then modifies the transaction table entry to make the transaction look as if it had just been prepared following startup after recovery. &lt;p&gt;
 * @param t             is the transaction performing the re-prepare
 * @param undoId        is the transaction ID to be re-prepared
 * @param undoStopAt    is where the log instant (inclusive) where the re-prepare should stop.
 * @param undoStartAt   is the log instant (inclusive) where re-prepare should begin, this is normally the log instant of  the last log record of the transaction that is to  be re-prepare.  If null, then re-prepare starts  from the end of the log.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>RawTransaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>undoId</ParamName>
                    <ParamType>TransactionId</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>undoStopAt</ParamName>
                    <ParamType>LogInstant</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>undoStartAt</ParamName>
                    <ParamType>LogInstant</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>undo</MethodName>
            <MethodComment>/** 
 * Undo transaction.
 * @param t is the transaction performing the rollback
 * @param undoId is the transaction ID to be rolled back
 * @param undoStopAt is where the log instant (inclusive) where the rollback should stop.
 * @param undoStartAt is the log instant (inclusive) where rollbackshould begin, this is normally the log instant of  the last log record of the transaction that is  to be rolled back.   If null, then rollback starts from the end of the log.
 * @exception StandardException	Standard Derby error policy
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>RawTransaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>undoId</ParamName>
                    <ParamType>TransactionId</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>undoStopAt</ParamName>
                    <ParamType>LogInstant</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>undoStartAt</ParamName>
                    <ParamType>LogInstant</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>