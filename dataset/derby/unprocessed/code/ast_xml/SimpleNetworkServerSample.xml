<Class>
    <Id>224</Id>
    <ClassName>SimpleNetworkServerSample</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>SimpleNetworkServerSample  /** 
 * In order for a database to be consistent, only one JVM is allowed to access it at a time. The embedded driver is loaded when the Network Server is started. Hence, the JVM that starts the Network Server can get an embedded connection to the same database that Network Server is accessing to serve the clients from other JVMs. This solution allows you to take advantage of the performance benefits of the embedded driver as well as allow for client connections from other JVMs to connect to the same database. In particular, this sample program 1) 	starts the Derby Network Server using a property and also loads the embedded driver 2)	checks if the Derby Network Server is up and running 3)	creates the database 'NSSimpleDB' if not already created 4)	obtains an embedded database connection 5)	tests the database connection by executing a sample query 6)	allows for client connections to connect to the server until the user decides to stop the server and exit the program 7)	closes the connections 8)	shuts down the Derby Network Server before exiting the program. Note: On running this program, there will be a NSSimpleDB database directory created if not present already, and there will be a derby.log file which contains messages from Derby. &lt;P&gt; Usage: java SimpleNetworkServerSample
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>DBNAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>main</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [embeddedConn=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startNetworkServer</MethodName>
            <MethodComment>/** 
 * Setting the derby.drda.startNetworkServer property to true, either in the System properties as we do here or in the derby.properties file, will cause the Network Server to start as soon as Derby is loaded. To load Derby, we just need to load the embedded driver with: Class.forName("org.apache.derby.jdbc.EmbeddedDriver").newInstance(); Then we will test for a while and make sure it is up, before we give up. Alternatively, the Network Server might be started from the command line or from some other program. Note: only the JVM that starts Network Server can make an embedded connection.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;startWithProperty;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;waitForStart;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startWithProperty</MethodName>
            <MethodComment>/** 
 * Start Derby Network Server using the property derby.drda.startNetworkServer. This property can be set as a system property or or in the derby.properties file. Setting this property to true starts the Network Server when Derby boots up. The port at which the Derby Network Server listens can be changed by setting the derby.drda.portNumber property. By default, the server starts at port 1527. Server output goes to derby.log.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Class&lt;?&gt; [clazz=Class.forName("org.apache.derby.jdbc.EmbeddedDriver")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>System.out;println;["Starting Network Server"]</InnerMethodInvoke>
                <InnerMethodInvoke>System;setProperty;["derby.drda.startNetworkServer", "true"]</InnerMethodInvoke>
                <InnerMethodInvoke>clazz.getConstructor();newInstance;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>waitForStart</MethodName>
            <MethodComment>/** 
 * Tries to check if the Network Server is up and running by calling ping If successful, it returns; otherwise, it tries for 50 seconds before giving up and throwing an exception.
 * @throws Exception when there is a problem with testing if the Network Server is upand running
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>org.apache.derby.drda.NetworkServerControl [server=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>System.out;println;["Testing if Network Server is up and running!"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["Derby Network Server now running"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEmbeddedConnection</MethodName>
            <MethodComment>/** 
 * Used to return an embedded Derby connection. The protocol used is "jdbc:derby:dbName" where dbName is the database name
 * @pre the Derby embedded JDBC driver must be loaded before callingthis method Alternatively, if the Derby Network Server is started in this JVM, the embedded driver org.apache.derby.jdbc.EmbeddedDriver is already loaded and it need not be loaded again.
 * @param dbName	database name (ie location of the database)
 * @param attributes attributes for the database connection(for example, create=true; upgrade=true;)
 * @return	returns embedded database connection
 * @throws Exception if there is any error
 */
</MethodComment>
            <ReturnType>Connection</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>database</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>attributes</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [dbUrl="jdbc:derby:" + database + ";"+ attributes]</InnerVar>
                <InnerVar>Connection [conn=DriverManager.getConnection(dbUrl)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>test</MethodName>
            <MethodComment>/** 
 * Test a connection by executing a sample query
 * @param conn 	database connection
 * @throws Exception if there is any error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conn</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Statement [stmt=null]</InnerVar>
                <InnerVar>ResultSet [rs=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>waitForExit</MethodName>
            <MethodComment>/** 
 * This method waits until the user presses Enter to stop the server and eventually exit this program Allows clients to continue to connect using client connections from other JVMs to the Derby Network Server that was started in this program
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>BufferedReader [in=new BufferedReader(new InputStreamReader(System.in))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>System.out;println;["Clients can continue to connect: "]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["Press [Enter] to stop Server"]</InnerMethodInvoke>
                <InnerMethodInvoke>in;readLine;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ijUsage</MethodName>
            <MethodComment>/** 
 * Returns a string with information as to how to connect to Derby Network Server
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [ijUsage="\nWhile my app is busy with embedded work, "]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>