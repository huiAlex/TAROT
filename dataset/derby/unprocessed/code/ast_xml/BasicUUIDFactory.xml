<Class>
    <Id>777</Id>
    <Package>org.apache.derby.impl.services.uuid</Package>
    <ClassName>BasicUUIDFactory</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>UUIDFactory</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>BasicUUIDFactory  /** 
 * A hack implementation of something similar to a DCE UUID  generator.  Generates unique 128-bit numbers based on the current machine's internet address, the current time, and a sequence number.  This implementation should be made to conform to the DCE specification. ("DEC/HP, Network Computing Architecture, Remote Procedure Call Runtime Extensions Specification, version OSF TX1.0.11," Steven Miller, July 23, 1992.  This is part of the OSF DCE Documentation. Chapter 10 describes the UUID generation algorithm.) &lt;P&gt; Some known deficiencies: &lt;ul&gt; &lt;li&gt; Rather than using the 48-bit hardware network address, it uses the 32-bit IP address. IP addresses are not guaranteed to be unique. &lt;li&gt; There is no provision for generating a suitably unique number if no IP address is available. &lt;li&gt; Two processes running on this machine which start their respective UUID services within a millisecond of one another may generate duplicate UUIDS. &lt;/ul&gt; &lt;P&gt; However, the intention is that UUIDs generated from this class will be unique with respect to UUIDs generated by other DCE UUID generators.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>majorId</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>timemillis</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>MODULUS</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>MULTIPLIER</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>STEP</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>INITIAL_VALUE</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>currentValue</FieldName>
            <FieldType>long</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>BasicUUIDFactory</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Object [env=getMonitor().getEnvironment()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;resetCounters;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createUUID</MethodName>
            <MethodComment>/** 
 * Generate a new UUID.
 * @see UUIDFactory#createUUID
 */
</MethodComment>
            <ReturnType>UUID</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>long [cv=currentValue=((MULTIPLIER * currentValue) + STEP) % MODULUS]</InnerVar>
                <InnerVar>int [sequence=(int)cv]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>recreateUUID</MethodName>
            <MethodComment>/** 
 * Recreate a UUID previously generated UUID value.
 * @see UUIDFactory#recreateUUID
 */
</MethodComment>
            <ReturnType>UUID</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>uuidstring</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>bumpMajor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>resetCounters</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMonitor</MethodName>
            <MethodComment>/** 
 * Privileged Monitor lookup. Must be private so that user code can't call this entry point.
 */
</MethodComment>
            <ReturnType>ModuleFactory</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ModuleFactory</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>