<Class>
    <Id>576</Id>
    <Package>org.apache.derby.impl.store.access.heap</Package>
    <ClassName>Heap_v10_2</ClassName>
    <SuperClass>Heap</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Heap_v10_2  /** 
 * @derby.formatId ACCESS_HEAP_V2_ID
 * @derby.purpose   The tag that describes the on disk representation of the Heapconglomerate object.  Access contains no "directory" of  conglomerate information.  In order to bootstrap opening a file it encodes the factory that can open the conglomerate in the  conglomerate id itself.  There exists a single HeapFactory which must be able to read all heap format id's.   This format was used for all Derby database Heap's in version 10.2 and previous versions.
 * @derby.upgrade   The format id of this object is currently always read from diskas the first field of the conglomerate itself.  A bootstrap problem exists as we don't know the format id of the heap  until we are in the "middle" of reading the Heap.  Thus the base Heap implementation must be able to read and write  all formats based on the reading the  "format_of_this_conglomerate".  soft upgrade to ACCESS_HEAP_V3_ID: read: old format is readable by current Heap implementation, with automatic in memory creation of default collation id needed by new format.  No code other than readExternal and writeExternal need know about old format. write: will never write out new format id in soft upgrade mode. Code in readExternal and writeExternal handles writing correct version.  Code in the factory handles making sure new conglomerates use the Heap_v10_2 class that will write out old format info. hard upgrade to ACCESS_HEAP_V3_ID: read: old format is readable by current Heap implementation, with automatic in memory creation of default collation id needed by new format. write: Only "lazy" upgrade will happen.  New format will only get written for new conglomerate created after the  upgrade.  Old conglomerates continue to be handled the same as soft upgrade.
 * @derby.diskLayout format_of_this_conlgomerate(byte[]) containerid(long) segmentid(int) number_of_columns(int) array_of_format_ids(byte[][])
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>Heap_v10_2</MethodName>
            <MethodComment>/** 
 * No arg constructor, required by Formatable.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTypeFormatId</MethodName>
            <MethodComment>/** 
 * Return my format identifier. &lt;p&gt; This identifier was used for Heap in all Derby versions prior to 10.3. Databases hard upgraded to a version 10.3 and later will write the new  format, see Heap.  Databases created in 10.3 and later will also write  the new format, see Heap.
 * @see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeExternal</MethodName>
            <MethodComment>/** 
 * Store the stored representation of the column value in the stream. &lt;p&gt; For more detailed description of the format see documentation at top of file.
 * @see java.io.Externalizable#writeExternal
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>ObjectOutput</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>