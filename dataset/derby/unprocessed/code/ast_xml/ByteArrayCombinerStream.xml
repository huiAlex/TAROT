<Class>
    <Id>1462</Id>
    <Package>org.apache.derby.client.am</Package>
    <ClassName>ByteArrayCombinerStream</ClassName>
    <SuperClass>InputStream</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ByteArrayCombinerStream  /** 
 * A stream whose source is a list of byte arrays. This class was created when first implementing the JDBC 4 length less overloads in the client driver. The reason was missing support for streaming data with unknown length from the client to the server. The purpose of the stream is to avoid having to repeatedly copy data to grow the byte buffer, or doing a single big copy to combine the byte arrays in the end. This is important for the temporary solution, since we must materialize the stream to find the length anyway. If there is less data available than the specified length, an exception is thrown. Available data is determined by the length of the byte arrays, not the contents of them. A byte array with all 0's is considered valid data. Besides from truncation, this stream does not change the underlying data in any way.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>arrays</FieldName>
            <FieldType>ArrayList</FieldType>
        </Field>
        <Field>
            <FieldName>arrays</FieldName>
            <FieldType>byte[]</FieldType>
        </Field>
        <Field>
            <FieldName>specifiedLength</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>gOffset</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>arrayIndex</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>curArray</FieldName>
            <FieldType>byte[]</FieldType>
        </Field>
        <Field>
            <FieldName>off</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ByteArrayCombinerStream</MethodName>
            <MethodComment>/** 
 * Create a stream whose source is a list of byte arrays.
 * @param arraysIn an &lt;code&gt;ArrayList&lt;/code&gt; with references to the sourcebyte arrays. The references are copied to a new &lt;code&gt;ArrayList&lt;/code&gt; instance.
 * @param length the length of the stream. Never published outsidethis object. Note that the length specified can be shorter than the actual number of bytes in the byte arrays.
 * @throws IllegalArgumentException if there is less data available thanspecified by &lt;code&gt;length&lt;/code&gt;, or &lt;code&gt;length&lt;/code&gt; is negative.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>arraysIn</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>length</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>long [tmpRemaining=length]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>read</MethodName>
            <MethodComment>/** 
 * Read a single byte.
 * @return a byte, or &lt;code&gt;-1&lt;/code&gt; if the end-of-stream is reached
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>read</MethodName>
            <MethodComment>/** 
 * Reads up to len bytes of data from the input stream into an array of bytes. An attempt is made to read as many as &lt;code&gt;len&lt;/code&gt; bytes, but a smaller number may be read. The number of bytes actually read is returned as an integer.
 * @param buf the array to copy bytes into
 * @param offset offset into the array
 * @param length the maximum number of bytes to read
 * @return the number of bytes read, or &lt;code&gt;-1&lt;/code&gt; if end-of-streamis reached
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>buf</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>offset</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>length</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [read=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>available</MethodName>
            <MethodComment>/** 
 * Return the number of available bytes. The method assumes the specified length of the stream is correct.
 * @return number of available bytes
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nextArray</MethodName>
            <MethodComment>/** 
 * Fetch the next array to read data from. The reference in the &lt;code&gt;ArrayList&lt;/code&gt; is cleared when the array is "taken out".
 * @return a &lt;code&gt;byte[]&lt;/code&gt;-object, or &lt;code&gt;null&lt;/code&gt; if there areno more arrays
 */
</MethodComment>
            <ReturnType>byte[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>byte[] [tmp=(byte[])arrays.get(arrayIndex)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>arrays;set;[arrayIndex++, null]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>