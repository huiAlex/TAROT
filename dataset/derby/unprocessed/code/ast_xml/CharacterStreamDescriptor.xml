<Class>
    <Id>1547</Id>
    <Package>org.apache.derby.iapi.jdbc</Package>
    <ClassName>CharacterStreamDescriptor</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>CharacterStreamDescriptor  /** 
 * A description of a byte stream representing characters. The description is used by decoders to properly configure themselves. Note that encoding is not included in the description, because all internal byte streams are expected to be using the modified UTF-8 encoding (see DataInput). &lt;p&gt; The information in the description is only guaranteed to be valid at the moment it is passed to the decoder object. As the decoder works on the stream, the information in the descriptor will be outdated. &lt;p&gt; To create a stream descriptor, obtain a  {@code Builder} instance and set therequired parameters.
 * @see Builder
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>BEFORE_FIRST</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>dataOffset</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>curBytePos</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>curCharPos</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>byteLength</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>charLength</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>maxCharLength</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>bufferable</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>positionAware</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>stream</FieldName>
            <FieldType>InputStream</FieldType>
        </Field>
        <Field>
            <FieldName>DEFAULT_MAX_CHAR_LENGTH</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>bufferable</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>positionAware</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>curBytePos</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>curCharPos</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>byteLength</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>charLength</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>dataOffset</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>maxCharLength</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>stream</FieldName>
            <FieldType>InputStream</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>CharacterStreamDescriptor</MethodName>
            <MethodComment>/** 
 * Creates a character stream descriptor, using the supplied builder. &lt;p&gt; Use the builder to create instances of this class.
 * @param b object builder
 * @see Builder
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>b</ParamName>
                    <ParamType>Builder</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isBufferable</MethodName>
            <MethodComment>/** 
 * Tells if the described stream should be buffered or not. &lt;p&gt; Some of the reasons a stream should not be buffered at this level, are the stream is already buffered, or it serves bytes directly from a byte array in memory.
 * @return {@code true} if the stream should be buffered for improvedperformance,  {@code false} if it should not be buffered.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isPositionAware</MethodName>
            <MethodComment>/** 
 * Tells if the described stream is aware of its own position, and that it can reposition itself on request.
 * @return {@code true} if the stream is position aware, @{code false}otherwise.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getByteLength</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCharLength</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCurBytePos</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCurCharPos</MethodName>
            <MethodComment>/** 
 * Returns the current character position.
 * @return The current character position, where the first character is atposition  {@code 1}, or  {@code BEFORE_FIRST} if the stream ispositioned before the first character.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDataOffset</MethodName>
            <MethodComment>/** 
 * Returns the first index of the described stream that contains real data. &lt;p&gt; The information is typically used to filter out meta data at the head of the stream, and to correctly reset the stream.
 * @return The first position in the stream containing real data.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMaxCharLength</MethodName>
            <MethodComment>/** 
 * Returns the imposed maximum character length on the described stream. &lt;p&gt; The default value is  {@code Long.MAX_VALUE}.
 * @return The max allowed character length of the stream, or {@code 0} ifno limit has been set.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStream</MethodName>
            <MethodComment>/** 
 * Returns the associated stream.
 * @return An {@code InputStream} reference.
 */
</MethodComment>
            <ReturnType>InputStream</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPositionedStream</MethodName>
            <MethodComment>/** 
 * Returns the associated positioned stream, if the stream is position aware.
 * @return A {@code PositionedStream} reference.
 * @throws ClassCastException if the stream cannot be cast to{@code PositionedStream}
 * @throws IllegalArgumentException if the method is called and theassoicated stream isn't described as position aware.
 * @see #isPositionAware
 */
</MethodComment>
            <ReturnType>PositionedStream</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>Builder</MethodName>
            <MethodComment>/** 
 * Creates a builder object.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>bufferable</MethodName>
            <MethodComment>/** 
 * Sets if the stream should be buffered, defaults to  {@code false}.
 * @param bufferable {@code true} if buffering is advised, {@code false}if not
 * @return The builder.
 */
</MethodComment>
            <ReturnType>Builder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>bufferable</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>positionAware</MethodName>
            <MethodComment>/** 
 * Sets if the stream can reposition itself or not, defaults to {@code false}.
 * @param positionAware {@code true} if the stream can repositionitself,  {@code false} if not
 * @return The builder.
 */
</MethodComment>
            <ReturnType>Builder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>positionAware</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>curBytePos</MethodName>
            <MethodComment>/** 
 * Sets the current byte position, defaults to  {@code 0}.
 * @param pos the current byte position
 * @return The builder.
 */
</MethodComment>
            <ReturnType>Builder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pos</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>curCharPos</MethodName>
            <MethodComment>/** 
 * Sets the current character position, defaults to  {@code 1}. &lt;p&gt; There is a special value for when the stream is position in the header area -  {@code BEFORE_FIRST}.
 * @param pos the current character position,starting at {@code 1}
 * @return The builder.
 * @see #BEFORE_FIRST
 */
</MethodComment>
            <ReturnType>Builder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pos</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>byteLength</MethodName>
            <MethodComment>/** 
 * Sets the byte length of the stream, defaults to  {@code 0}. &lt;p&gt; A length of  {@code 0} means the length is unknown.
 * @param length the byte length of the stream (including header)
 * @return The builder.
 */
</MethodComment>
            <ReturnType>Builder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>length</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>copyState</MethodName>
            <MethodComment>/** 
 * Copies the state of the specified descriptor.
 * @param csd the descriptor to copy
 * @return The builder.
 */
</MethodComment>
            <ReturnType>Builder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>csd</ParamName>
                    <ParamType>CharacterStreamDescriptor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>charLength</MethodName>
            <MethodComment>/** 
 * Sets the character length of the stream, defaults to  {@code 0}. &lt;p&gt; Headers are not included in this length, only the user data. A length of  {@code 0} means the length is unknown.
 * @param length the character length of the stream
 * @return The builder.
 */
</MethodComment>
            <ReturnType>Builder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>length</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>dataOffset</MethodName>
            <MethodComment>/** 
 * Sets the offset of the user data, defaults to  {@code 0}.
 * @param offset first index with user data, zero based
 * @return The builder.
 */
</MethodComment>
            <ReturnType>Builder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>offset</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>maxCharLength</MethodName>
            <MethodComment>/** 
 * Imposes a length limit on the stream, expressed in number of characters, defaults to  {@code Long.MAX_VALUE}.
 * @param length maximum number of characters
 * @return The builder.
 */
</MethodComment>
            <ReturnType>Builder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>length</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>stream</MethodName>
            <MethodComment>/** 
 * Sets the stream described by the descriptor. &lt;p&gt; The stream is not allowed to be  {@code null}.
 * @param stream the stream
 * @return The builder.
 */
</MethodComment>
            <ReturnType>Builder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>stream</ParamName>
                    <ParamType>InputStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>build</MethodName>
            <MethodComment>/** 
 * Creates a descriptor object based on the parameters kept in the builder instance. &lt;p&gt; Default values will be used for parameters for which a value hasn't been set. &lt;p&gt; &lt;b&gt;NOTE&lt;/b&gt;: Parameter validation is only performed in sane builds.
 * @return A character stream descriptor instance.
 */
</MethodComment>
            <ReturnType>CharacterStreamDescriptor</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment>/** 
 * Returns a textual representation of the builder.
 * @return The textual representation of the builder.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [str="CharacterStreamBuiler@" + hashCode() + ":bufferable="+ bufferable+ ", isPositionAware="+ positionAware+ ", curBytePos="+ curBytePos+ ", curCharPos="+ curCharPos+ ", dataOffset="+ dataOffset+ ", byteLength="+ byteLength+ ", charLength="+ charLength+ ", maxCharLength="+ maxCharLength+ ", stream="+ stream.getClass()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>