<Class>
    <Id>19</Id>
    <Package>org.apache.derby.iapi.store.raw</Package>
    <ClassName>Undoable</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Loggable</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Undoable  /** 
 * An Undoable operation is an operation that changed the state of the RawStore in the context of a transaction and this change can be rolled back.
 * @see Transaction#logAndDo
 * @see Compensation
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>generateUndo</MethodName>
            <MethodComment>/** 
 * Generate a loggable which will undo this change, using the optional input if necessary. &lt;P&gt;&lt;B&gt;NOTE&lt;/B&gt;&lt;BR&gt;Any logical undo logic must be hidden behind generateUndo. During recovery redo, it should not depend on any logical undo logic. &lt;P&gt; There are 3 ways to implement a redo-only log record: &lt;NL&gt; &lt;LI&gt;Make the log record a Loggable instead of an Undoable, this is the cleanest method. &lt;LI&gt;If you want to extend a log operation class that is an Undoable, you can then either have generateUndo return null - this is preferred - (the log operation's undoMe should never be called, so you can put a null body there if the super class you are extending does not implement a undoMe). &lt;LI&gt;Or, have undoMe do nothing - this is least preferred. &lt;/NL&gt; &lt;P&gt;Any resource (e.g., latched page) that is needed for the undoable.undoMe() must be acquired in undoable.generateUndo(). Moreover, that resource must be identified in the compensation operation, and reacquired in the compensation.needsRedo() method during recovery redo. &lt;BR&gt;&lt;B&gt;If you do write your own generateUndo or needsRedo, any resource you latch or acquire, you must release them in Compensation.doMe() or in Compensation.releaseResource().&lt;/B&gt; &lt;P&gt; To write a generateUndo operation, find the object that needs to be rolled back.  Assuming that it is a page, latch it, put together a Compensation operation with the undoOp set to this operation, and save the page number in the compensation operation, then return the Compensation operation to the logging system. &lt;P&gt; The sequence of events in a rollback of a undoable operation is &lt;NL&gt; &lt;LI&gt; The logging system calls undoable.generateUndo.  If this returns null, then there is nothing to undo. &lt;LI&gt; If generateUndo returns a Compensation operation, then the logging system will log the Compensation log record and call Compenstation.doMe().  (Hopefully, this just calls the undoable's undoMe) &lt;LI&gt; After the Compensation operation has been applied, the logging system will call compensation.releaseResource(). If you do overwrite a super class's releaseResource(), it would be prudent to call super.releaseResource() first. &lt;/NL&gt; &lt;P&gt; The available() method of in indicates how much data can be read, i.e. how much was originally written.
 * @param xact	the transaction doing the rollback
 * @return the compensation operation that will rollback this change, ornull if nothing to undo. 
 * @exception IOException Can be thrown by any of the methods of ObjectInput.
 * @exception StandardException Standard Derby policy.
 * @see Loggable#releaseResource
 * @see Loggable#needsRedo
 */
</MethodComment>
            <ReturnType>Compensation</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xact</ParamName>
                    <ParamType>Transaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>in</ParamName>
                    <ParamType>LimitObjectInput</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>