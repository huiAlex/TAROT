<Class>
    <Id>1161</Id>
    <Package>org.apache.derbyTesting.system.oe.client</Package>
    <ClassName>Display</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Display  /** 
 * Interface to display the results of the business operations. Methods are called by implementations of Operations. There is no requirement for implementations to follow the layout dictated by the TPC-C specification. All the information required by the TPC-C specification for display will be provided through the passed in parameters. &lt;BR&gt; Objects passed in from the data model (Customer etc.) may not be fully populated, but they will contain all the information required for that specific operation. &lt;BR&gt; Any display method must not retain references to any objects it is passed, the caller may be re-using the objects across transactions. &lt;P&gt; DECIMAL values are represented as String objects to allow Order Entry to be run on J2ME/CDC/Foundation which does not support BigDecimal.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>displayStockLevel</MethodName>
            <MethodComment>/** 
 * Display the result of a stock level. Stock level terminal i/o is described in clause 2.8.3.
 * @param displayData Client specific display information, such as servlet context.
 * @param w Warehouse (input)
 * @param d District (input)
 * @param threshold Threshold (input)
 * @param lowStock (result)
 * @throws Exception Error displaying data
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>displayData</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>w</ParamName>
                    <ParamType>short</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>d</ParamName>
                    <ParamType>short</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>threshold</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lowStock</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>displayOrderStatus</MethodName>
            <MethodComment>/** 
 * Display the result of an order status. Order status terminal i/o is decribed in clause 2.6.3.
 * @param displayData Client specific display information, such as servlet context.
 * @param byName Executed by name or by identifier.
 * @param customer Customer for order
 * @param order Order fetched.
 * @param lineItems Items for the order
 * @throws Exception
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>displayData</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>byName</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>customer</ParamName>
                    <ParamType>Customer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>order</ParamName>
                    <ParamType>Order</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lineItems</ParamName>
                    <ParamType>OrderLine[]</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>displayPayment</MethodName>
            <MethodComment>/** 
 * Display the result of a payment. Payment terminal i/o is described in clause 2.5.3.
 * @param displayData Client specific display information, such as servlet context.
 * @param amount Amount of payment.
 * @param byName Executed by name or by identifier.
 * @param warehouse Warehouse of payment
 * @param district District of payment
 * @param customer Customer of payment.
 * @throws Exception
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>displayData</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>amount</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>byName</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>warehouse</ParamName>
                    <ParamType>Warehouse</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>district</ParamName>
                    <ParamType>District</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>customer</ParamName>
                    <ParamType>Customer</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>displayNewOrder</MethodName>
            <MethodComment>/** 
 * Display the result of a new order. New order terminal i/o is described in clause 2.4.3. May need more parameters.
 * @param displayData Client specific display information, such as servlet context.
 * @param warehouse Warehouse of new order
 * @param district District of new order
 * @param customer Customer of new order
 * @param order The new order
 * @throws Exception
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>displayData</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>warehouse</ParamName>
                    <ParamType>Warehouse</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>district</ParamName>
                    <ParamType>District</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>customer</ParamName>
                    <ParamType>Customer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>order</ParamName>
                    <ParamType>Order</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>displayScheduleDelivery</MethodName>
            <MethodComment>/** 
 * Display the result of a delivery schedule.
 * @param displayData Client specific display information, such as servlet context.
 * @param w Warehouse identifier
 * @param carrier Carrier identifier
 * @throws Exception
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>displayData</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>w</ParamName>
                    <ParamType>short</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>carrier</ParamName>
                    <ParamType>short</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>