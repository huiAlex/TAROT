<Class>
    <Id>1864</Id>
    <Package>org.apache.derby.impl.drda</Package>
    <ClassName>Session</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Session  /** 
 * Session stores information about the current session It is used so that a DRDAConnThread can work on any session.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>INIT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>ATTEXC</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SECACC</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>CHKSEC</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>CLOSED</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>DRDA_SESSION</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>CMD_SESSION</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>TRACENAME_PREFIX</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>TRACENAME_SUFFIX</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>clientSocket</FieldName>
            <FieldType>Socket</FieldType>
        </Field>
        <Field>
            <FieldName>connNum</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>sessionInput</FieldName>
            <FieldType>InputStream</FieldType>
        </Field>
        <Field>
            <FieldName>sessionOutput</FieldName>
            <FieldType>OutputStream</FieldType>
        </Field>
        <Field>
            <FieldName>traceFileName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>traceOn</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>state</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>sessionType</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>drdaID</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>dssTrace</FieldName>
            <FieldType>DssTrace</FieldType>
        </Field>
        <Field>
            <FieldName>appRequester</FieldName>
            <FieldType>AppRequester</FieldType>
        </Field>
        <Field>
            <FieldName>database</FieldName>
            <FieldType>Database</FieldType>
        </Field>
        <Field>
            <FieldName>qryinsid</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>langUtil</FieldName>
            <FieldType>LocalizedResource</FieldType>
        </Field>
        <Field>
            <FieldName>dbtable</FieldName>
            <FieldType>Hashtable</FieldType>
        </Field>
        <Field>
            <FieldName>dbtable</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>nsctrl</FieldName>
            <FieldType>NetworkServerControlImpl</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>Session</MethodName>
            <MethodComment>/** 
 * Session constructor
 * @param connNum       connection number
 * @param clientSocket  communications socket for this session
 * @param traceDirectory    location for trace files
 * @param traceOn       whether to start tracing this connection
 * @exception throws IOException
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>nsctrl</ParamName>
                    <ParamType>NetworkServerControlImpl</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>connNum</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>clientSocket</ParamName>
                    <ParamType>Socket</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>traceDirectory</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>traceOn</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;initialize;[traceDirectory]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>close</MethodName>
            <MethodComment>/** 
 * Close session - close connection sockets and set state to closed
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initTrace</MethodName>
            <MethodComment>/** 
 * initialize a server trace for the DRDA protocol
 * @param traceDirectory - directory for trace file
 * @param throwException - true if we should throw an exception ifturning on tracing fails.  We do this for NetworkServerControl API commands.
 * @throws IOException 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>traceDirectory</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>throwException</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setTraceOn</MethodName>
            <MethodComment>/** 
 * Set tracing on
 * @param traceDirectory    directory for trace files
 * @throws Exception 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>traceDirectory</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>throwException</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;initTrace;[traceDirectory, throwException]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isTraceOn</MethodName>
            <MethodComment>/** 
 * Get whether tracing is on 
 * @return true if tracing is on false otherwise
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getConnNum</MethodName>
            <MethodComment>/** 
 * Get connection number
 * @return connection number
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setTraceOff</MethodName>
            <MethodComment>/** 
 * Set tracing off
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addDatabase</MethodName>
            <MethodComment>/** 
 * Add database to session table
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>d</ParamName>
                    <ParamType>Database</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>dbtable;put;[d.getDatabaseName(), d]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDatabase</MethodName>
            <MethodComment>/** 
 * Get database
 */
</MethodComment>
            <ReturnType>Database</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dbName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRequiredSecurityCodepoint</MethodName>
            <MethodComment>/** 
 * Get requried security checkpoint. Used to verify EXCSAT/ACCSEC/SECCHK order.
 * @return next required Security checkpoint or -1 if neither ACCSEC or SECCHK are required at this time.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>requiresSecurityCodepoint</MethodName>
            <MethodComment>/** 
 * Check if a security codepoint is required
 * @return true if ACCSEC or SECCHK are required at this time.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setState</MethodName>
            <MethodComment>/** 
 * Set Session state
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initialize</MethodName>
            <MethodComment>/** 
 * Get session into initial state
 * @param traceDirectory    - directory for trace files
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>traceDirectory</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildRuntimeInfo</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>indent</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>localLangUtil</ParamName>
                    <ParamType>LocalizedResource</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [s=""]</InnerVar>
                <InnerVar>Database [db=database]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>