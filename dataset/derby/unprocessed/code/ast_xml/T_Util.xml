<Class>
    <Id>277</Id>
    <Package>org.apache.derbyTesting.unitTests.store</Package>
    <ClassName>T_Util</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>rsFactory</FieldName>
            <FieldType>RawStoreFactory</FieldType>
        </Field>
        <Field>
            <FieldName>lFactory</FieldName>
            <FieldType>LockFactory</FieldType>
        </Field>
        <Field>
            <FieldName>csFactory</FieldName>
            <FieldType>ContextService</FieldType>
        </Field>
        <Field>
            <FieldName>openContainerMode</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>T_Util</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rsf</ParamName>
                    <ParamType>RawStoreFactory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lf</ParamName>
                    <ParamType>LockFactory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>csf</ParamName>
                    <ParamType>ContextService</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setOpenMode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>newMode</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_checkNullLockCount</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Transaction</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_checkPageNumber</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>page</ParamName>
                    <ParamType>Page</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pageNumber</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_checkRecordCount</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>page</ParamName>
                    <ParamType>Page</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>count</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nonDeleted</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_checkFieldCount</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>page</ParamName>
                    <ParamType>Page</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>slot</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>count</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_checkFetch</MethodName>
            <MethodComment>/** 
 * Fetch a record that is expected to exist using a record handle. The record has a T_RawStoreRow of 1 column and this column as value as specified by data, which could be null. Calls recordExists() before fetch to ensure that the record is there.
 * @param page the page in question
 * @param rh the record handle
 * @param data the string value that is expected in the row
 * @exception T_Fail Implementation failed expectation
 * @exception StandardException Unexpected exception from the implementation
 * @see Page#recordExists
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>page</ParamName>
                    <ParamType>Page</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rh</ParamName>
                    <ParamType>RecordHandle</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>data</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stringLen</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;t_checkFetch;[page, rh, T_Util.getStringFromData(data,stringLen)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_checkFetch</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>page</ParamName>
                    <ParamType>Page</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rh</ParamName>
                    <ParamType>RecordHandle</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>data</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>T_RawStoreRow [readRow=new T_RawStoreRow((String)null)]</InnerVar>
                <InnerVar>int [slot=page.getSlotNumber(rh)]</InnerVar>
                <InnerVar>RecordHandle [rhf=page.fetchFromSlot(rh,slot,readRow.getRow(),(FetchDescriptor)null,false)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_checkFetch</MethodName>
            <MethodComment>/** 
 * Fetch a record from a container that is expected to exist using a record handle. Calls recordExists() before fetch to ensure that the record is there.
 * @exception T_Fail Implementation failed expectation
 * @exception StandardException Unexpected exception from the implementation
 * @see Page#recordExists
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>ContainerHandle</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rh</ParamName>
                    <ParamType>RecordHandle</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>data</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Page [page=t_getPage(c,rh.getPageNumber())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_checkFetchFail</MethodName>
            <MethodComment>/** 
 * Check to make sure record is NOT there
 * @exception T_Fail Implementation failed expectation
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>ContainerHandle</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rh</ParamName>
                    <ParamType>RecordHandle</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Page [page=t_getPage(c,rh.getPageNumber())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_checkFetchDeleted</MethodName>
            <MethodComment>/** 
 * Fetch a deleted record from a container using a record handle.
 * @exception T_Fail Implementation failed expectation
 * @exception StandardException Unexpected exception from the implementation
 * @see Page#recordExists
 * @see Page#fetchFromSlot
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>ContainerHandle</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rh</ParamName>
                    <ParamType>RecordHandle</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>data</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Page [p=t_getPage(c,rh.getPageNumber())]</InnerVar>
                <InnerVar>T_RawStoreRow [readRow=new T_RawStoreRow((String)null)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_checkFetch</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>page</ParamName>
                    <ParamType>Page</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rh</ParamName>
                    <ParamType>RecordHandle</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>T_RawStoreRow</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [ncol=row.nColumns()]</InnerVar>
                <InnerVar>T_RawStoreRow [readRow=new T_RawStoreRow(ncol)]</InnerVar>
                <InnerVar>RecordHandle [rhf=page.fetchFromSlot(rh,page.getSlotNumber(rh),readRow.getRow(),null,false)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_checkFetchCol</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>page</ParamName>
                    <ParamType>Page</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rh</ParamName>
                    <ParamType>RecordHandle</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>colNum</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>numCols</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>data</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>T_RawStoreRow [readRow=new T_RawStoreRow(numCols)]</InnerVar>
                <InnerVar>FormatableBitSet [colList=new FormatableBitSet(numCols)]</InnerVar>
                <InnerVar>FetchDescriptor [desc=new FetchDescriptor(numCols,colList,null)]</InnerVar>
                <InnerVar>RecordHandle [rhf=page.fetchFromSlot(rh,page.getSlotNumber(rh),readRow.getRow(),desc,false)]</InnerVar>
                <InnerVar>String [col=readRow.getStorableColumn(colNum).toString()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>colList;set;[colNum]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_checkFetchFirst</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>RecordHandle</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>page</ParamName>
                    <ParamType>Page</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>data</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>T_RawStoreRow [readRow=new T_RawStoreRow((String)null)]</InnerVar>
                <InnerVar>int [slot=0]</InnerVar>
                <InnerVar>RecordHandle [rhf=page.fetchFromSlot((RecordHandle)null,slot,readRow.getRow(),(FetchDescriptor)null,false)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_checkFetchNext</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>RecordHandle</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>page</ParamName>
                    <ParamType>Page</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rh</ParamName>
                    <ParamType>RecordHandle</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>data</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>T_RawStoreRow [readRow=new T_RawStoreRow((String)null)]</InnerVar>
                <InnerVar>int [slot=page.getSlotNumber(rh) + 1]</InnerVar>
                <InnerVar>RecordHandle [rhf=page.fetchFromSlot((RecordHandle)null,slot,readRow.getRow(),(FetchDescriptor)null,false)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_checkFetchPrevious</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>RecordHandle</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>page</ParamName>
                    <ParamType>Page</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rh</ParamName>
                    <ParamType>RecordHandle</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>data</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>T_RawStoreRow [readRow=new T_RawStoreRow((String)null)]</InnerVar>
                <InnerVar>int [slot=page.getSlotNumber(rh) - 1]</InnerVar>
                <InnerVar>RecordHandle [rhf=page.fetchFromSlot((RecordHandle)null,slot,readRow.getRow(),(FetchDescriptor)null,false)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_checkFetchLast</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>RecordHandle</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>page</ParamName>
                    <ParamType>Page</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>data</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>T_RawStoreRow [readRow=new T_RawStoreRow((String)null)]</InnerVar>
                <InnerVar>int [slot=page.recordCount() - 1]</InnerVar>
                <InnerVar>RecordHandle [rhf=page.fetchFromSlot((RecordHandle)null,slot,readRow.getRow(),(FetchDescriptor)null,false)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_checkFetchBySlot</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>page</ParamName>
                    <ParamType>Page</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>slot</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>data</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>deleted</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>forUpdate</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>T_RawStoreRow [readRow=new T_RawStoreRow((String)null)]</InnerVar>
                <InnerVar>RecordHandle [rh=page.fetchFromSlot((RecordHandle)null,slot,readRow.getRow(),(FetchDescriptor)null,true)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_checkFetchColFromSlot</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>page</ParamName>
                    <ParamType>Page</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>slot</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fieldId</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>column</ParamName>
                    <ParamType>DataValueDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>forUpdate</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>data</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stringLen</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;t_checkFetchColFromSlot;[page, slot, fieldId, column, forUpdate, T_Util.getStringFromData(data,stringLen)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_checkFetchColFromSlot</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>page</ParamName>
                    <ParamType>Page</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>slot</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fieldId</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>column</ParamName>
                    <ParamType>DataValueDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>forUpdate</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>data</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DataValueDescriptor[] [fetch_row=new DataValueDescriptor[fieldId + 1]]</InnerVar>
                <InnerVar>FormatableBitSet [validCols=new FormatableBitSet(fieldId + 1)]</InnerVar>
                <InnerVar>RecordHandle [rh=page.fetchFromSlot(null,slot,fetch_row,new FetchDescriptor(fetch_row.length,validCols,(Qualifier[][])null),true)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>validCols;set;[fieldId]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_checkEmptyPage</MethodName>
            <MethodComment>/** 
 * Take an empty page and check it does actually seem to be empty.
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>page</ParamName>
                    <ParamType>Page</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;t_checkRecordCount;[page, 0, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;t_readOnlySlotOutOfRange;[page, Page.FIRST_SLOT_NUMBER]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_readOnlySlotOutOfRange</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>page</ParamName>
                    <ParamType>Page</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>slot</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_updateSlotOutOfRange</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>page</ParamName>
                    <ParamType>Page</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>slot</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>T_RawStoreRow [row=new T_RawStoreRow((String)null)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_checkInvalidSavePoint</MethodName>
            <MethodComment>/** 
 * Negative test - check that an invalid savepoint is detected.
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Transaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_checkInvalidSavePoint</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>T_TWC</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>csFactory;setCurrentContextManager;[ctx.cm]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_startTransaction</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Transaction</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Transaction [t1=rsFactory.startTransaction(csFactory.getCurrentContextManager(),AccessFactoryGlobals.USER_TRANS_NAME)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;t_checkNullLockCount;[t1]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_startGlobalTransaction</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Transaction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>format_id</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>global_id</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>branch_id</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Transaction [t1=rsFactory.startGlobalTransaction(csFactory.getCurrentContextManager(),format_id,global_id,branch_id)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;t_checkNullLockCount;[t1]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_startTransactionWithContext</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>T_TWC</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>T_TWC [ctx=new T_TWC(csFactory,lFactory,rsFactory)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ctx;startUserTransaction;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_startInternalTransaction</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Transaction</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Transaction [t1=rsFactory.startInternalTransaction(csFactory.getCurrentContextManager())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;t_checkNullLockCount;[t1]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_commit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Transaction</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t;commit;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;t_checkNullLockCount;[t]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_commit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>T_TWC</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>csFactory;setCurrentContextManager;[ctx.cm]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_close</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>T_TWC</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ctx.tran;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_abort</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Transaction</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t;abort;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;t_checkNullLockCount;[t]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_abort</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>T_TWC</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>csFactory;setCurrentContextManager;[ctx.cm]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_addContainer</MethodName>
            <MethodComment>/** 
 * Add a new container in the transaction
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Transaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>segmentId</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>long [cid=t.addContainer(segmentId,ContainerHandle.DEFAULT_ASSIGN_ID,ContainerHandle.MODE_DEFAULT,(Properties)null,0)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_addContainer</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>T_TWC</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>segmentId</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>csFactory;setCurrentContextManager;[ctx.cm]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_addContainer</MethodName>
            <MethodComment>/** 
 * Add a new container in the transaction with a specified page size
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Transaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>segmentId</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pageSize</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Properties [tableProperties=new Properties()]</InnerVar>
                <InnerVar>long [cid=t.addContainer(segmentId,ContainerHandle.DEFAULT_ASSIGN_ID,ContainerHandle.MODE_DEFAULT,tableProperties,0)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>tableProperties;put;[Property.PAGE_SIZE_PARAMETER, Integer.toString(pageSize)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_addContainer</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>T_TWC</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>segmentId</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pageSize</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>csFactory;setCurrentContextManager;[ctx.cm]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_addContainer</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Transaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>segmentId</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableProperties</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>long [cid=t.addContainer(segmentId,ContainerHandle.DEFAULT_ASSIGN_ID,ContainerHandle.MODE_DEFAULT,tableProperties,0)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_addContainer</MethodName>
            <MethodComment>/** 
 * Add a new container in the transaction with specified  pageSize, spareSpace, minimumRecordSize, and reusableRecordId
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Transaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>segmentId</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pageSize</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>spareSpace</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>minimumRecordSize</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>reusableRecordId</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Properties [tableProperties=new Properties()]</InnerVar>
                <InnerVar>long [cid=t.addContainer(segmentId,ContainerHandle.DEFAULT_ASSIGN_ID,ContainerHandle.MODE_DEFAULT,tableProperties,0)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>tableProperties;put;[Property.PAGE_SIZE_PARAMETER, Integer.toString(pageSize)]</InnerMethodInvoke>
                <InnerMethodInvoke>tableProperties;put;[RawStoreFactory.PAGE_RESERVED_SPACE_PARAMETER, Integer.toString(spareSpace)]</InnerMethodInvoke>
                <InnerMethodInvoke>tableProperties;put;[RawStoreFactory.MINIMUM_RECORD_SIZE_PARAMETER, Integer.toString(minimumRecordSize)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_addContainer</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>T_TWC</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>segmentId</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pageSize</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>spareSpace</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>minimumRecordSize</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>csFactory;setCurrentContextManager;[ctx.cm]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_openContainer</MethodName>
            <MethodComment>/** 
 * Open a container.
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>ContainerHandle</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Transaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>segmentId</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>containerId</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>forUpdate</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ContainerKey [id=new ContainerKey(segmentId,containerId)]</InnerVar>
                <InnerVar>ContainerHandle [c=t.openContainer(id,forUpdate ? (ContainerHandle.MODE_FORUPDATE | openContainerMode) : ContainerHandle.MODE_READONLY)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_openContainer</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ContainerHandle</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>T_TWC</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>segmentId</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>containerId</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>forUpdate</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>csFactory;setCurrentContextManager;[ctx.cm]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_dropContainer</MethodName>
            <MethodComment>/** 
 * Drop a container 
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Transaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>segmentId</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>containerId</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t;dropContainer;[new ContainerKey(segmentId,containerId)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_getLastPage</MethodName>
            <MethodComment>/** 
 * Get the last page in a container. Always returns a valid page or null if there is no page in the container.
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>Page</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>ContainerHandle</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Page [page=c.getFirstPage()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_getPage</MethodName>
            <MethodComment>/** 
 * Get a specific page in a container. Always returns a valid page.
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>Page</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>ContainerHandle</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pageNumber</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Page [page=c.getPage(pageNumber)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_addPage</MethodName>
            <MethodComment>/** 
 * Add a page to a container.
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>Page</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>ContainerHandle</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Page [page=c.addPage()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_removePage</MethodName>
            <MethodComment>/** 
 * Remove a page from a container.
 * @exception T_Fail Record handle returned is null.
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>ContainerHandle</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>p</ParamName>
                    <ParamType>Page</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>long [pnum=p.getPageNumber()]</InnerVar>
                <InnerVar>Page [badp=c.getPage(pnum)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>c;removePage;[p]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_checkGetLatchedPage</MethodName>
            <MethodComment>/** 
 * Check that it's not possible to get a page which is already latched by the same transaction.
 * @param c a container handle
 * @param pageNumber the page number to check
 * @exception StandardException if an unexpected error occurs
 * @exception T_Fail if the test fails
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>ContainerHandle</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pageNumber</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_insert</MethodName>
            <MethodComment>/** 
 * Call page.insert() and ensure that the return record handle is not null. This assumes the caller has called spaceForInsert.
 * @exception T_Fail Record handle returned is null.
 * @exception StandardException Unexpected exception from the implementation
 * @see Page#insert
 */
</MethodComment>
            <ReturnType>RecordHandle</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>page</ParamName>
                    <ParamType>Page</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>T_RawStoreRow</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>RecordHandle [rh=page.insert(row.getRow(),(FormatableBitSet)null,Page.INSERT_DEFAULT,100)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_insertAtSlot</MethodName>
            <MethodComment>/** 
 * Call page.insert() and ensure that the return record handle is not null. This assumes the caller has called spaceForInsert.
 * @exception T_Fail Record handle returned is null.
 * @exception StandardException Unexpected exception from the implementation
 * @see Page#insert
 */
</MethodComment>
            <ReturnType>RecordHandle</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>page</ParamName>
                    <ParamType>Page</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>slot</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>T_RawStoreRow</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>RecordHandle [rh=page.insertAtSlot(slot,row.getRow(),(FormatableBitSet)null,(LogicalUndo)null,Page.INSERT_DEFAULT,100)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_insertAtSlot</MethodName>
            <MethodComment>/** 
 * Call page.insert() and ensure that the return record handle is not null. This assumes the caller has called spaceForInsert.
 * @exception T_Fail Record handle returned is null.
 * @exception StandardException Unexpected exception from the implementation
 * @see Page#insert
 */
</MethodComment>
            <ReturnType>RecordHandle</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>page</ParamName>
                    <ParamType>Page</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>slot</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>T_RawStoreRow</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>insertFlag</ParamName>
                    <ParamType>byte</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>RecordHandle [rh=page.insertAtSlot(slot,row.getRow(),(FormatableBitSet)null,(LogicalUndo)null,insertFlag,100)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_insertAtSlot</MethodName>
            <MethodComment>/** 
 * Call page.insert() and ensure that the return record handle is not null. This assumes the caller has called spaceForInsert.
 * @exception T_Fail Record handle returned is null.
 * @exception StandardException Unexpected exception from the implementation
 * @see Page#insert
 */
</MethodComment>
            <ReturnType>RecordHandle</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>page</ParamName>
                    <ParamType>Page</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>slot</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>T_RawStoreRow</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>insertFlag</ParamName>
                    <ParamType>byte</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>overflowThreshold</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>RecordHandle [rh=page.insertAtSlot(slot,row.getRow(),(FormatableBitSet)null,(LogicalUndo)null,insertFlag,overflowThreshold)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_insert</MethodName>
            <MethodComment>/** 
 * Insert a record on the last page, if the row doesn't fit on the last page create a new page and insert there.
 * @exception T_Fail Record handle returned is null.
 * @exception StandardException Unexpected exception from the implementation
 * @see Page#insert
 */
</MethodComment>
            <ReturnType>RecordHandle</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>ContainerHandle</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>T_RawStoreRow</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Page [page=c.getPageForInsert(0)]</InnerVar>
                <InnerVar>boolean [addedPage=false]</InnerVar>
                <InnerVar>RecordHandle [rh=t_insert(page,row)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>page;unlatch;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_update</MethodName>
            <MethodComment>/** 
 * Update a record.
 * @exception T_Fail Record handle returned is null.
 * @exception StandardException Unexpected exception from the implementation
 * @see Page#updateAtSlot
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>ContainerHandle</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rh</ParamName>
                    <ParamType>RecordHandle</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>T_RawStoreRow</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Page [page=t_getPage(c,rh.getPageNumber())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_checkUpdateCol</MethodName>
            <MethodComment>/** 
 * Using sparse representation: Update a column of a record and check resulting value.
 * @exception T_Fail Record handle returned is null.
 * @exception StandardException Unexpected exception from the implementation
 * @see Page#updateAtSlot
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>page</ParamName>
                    <ParamType>Page</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rh</ParamName>
                    <ParamType>RecordHandle</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>colNum</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>numCols</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>data</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>T_RawStoreRow [writeRow=new T_RawStoreRow(numCols)]</InnerVar>
                <InnerVar>FormatableBitSet [colList=new FormatableBitSet(numCols)]</InnerVar>
                <InnerVar>int [slot=page.getSlotNumber(rh)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>writeRow;setColumn;[colNum, data]</InnerMethodInvoke>
                <InnerMethodInvoke>colList;set;[colNum]</InnerMethodInvoke>
                <InnerMethodInvoke>null;t_checkFetchCol;[page, rh, colNum, numCols, data]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_checkStringLengthFetch</MethodName>
            <MethodComment>/** 
 * Check to make sure a row (possibly with overflow) is of the correct length
 * @exception T_Fail Record handle returned is null.
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>page</ParamName>
                    <ParamType>Page</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>slot</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>expectedLength</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>T_RawStoreRow [rr=new T_RawStoreRow((String)null)]</InnerVar>
                <InnerVar>String [s=((SQLChar)(rr.getStorableColumn(0))).getString()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>page;fetchFromSlot;[(RecordHandle)null, slot, rr.getRow(), (FetchDescriptor)null, true]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_genRandomFile</MethodName>
            <MethodComment>/** 
 * Lazy people's random file generator: Generate a random file with specified name and file size
 * @exception T_Fail Record handle returned is null.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fileName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mode</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>size</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>RandomAccessFile [iFile=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStringFromData</MethodName>
            <MethodComment>/** 
 * Return a string of stringLen characters that starts with data and is padded with nulls.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>data</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stringLen</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>char[] [ca=new char[stringLen]]</InnerVar>
                <InnerVar>char[] [sd=data.toCharArray()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>System;arraycopy;[sd, 0, ca, 0, sd.length]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_wait</MethodName>
            <MethodComment>/** 
 * Make this thread wait a bit, probably for post commit to finish
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>milliSecond</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>Thread.currentThread();yield;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setEncryptionParam</MethodName>
            <MethodComment>/** 
 * Add in encryption parameters to the startParam if "testDataEncryption" is set to a non-null string.
 */
</MethodComment>
            <ReturnType>Properties</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>startParams</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [encryptionPassword=PropertyUtil.getSystemProperty("testDataEncryption")]</InnerVar>
                <InnerVar>String [encryptionProvider=PropertyUtil.getSystemProperty("testEncryptionProvider")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>