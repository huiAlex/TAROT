<Class>
    <Id>1191</Id>
    <Package>org.apache.derby.impl.store.replication.master</Package>
    <ClassName>MasterController</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>MasterFactory</SuperInterface>
        <SuperInterface>ModuleControl</SuperInterface>
        <SuperInterface>ModuleSupportable</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>MasterController  /** 
 * &lt;p&gt;  This is an implementation of the replication master controller service. The service is booted when this instance of Derby will have the replication master role for this database. &lt;/p&gt;  &lt;p&gt; Note: The current version of the class is far from complete. Code to control the replication master behavior will be added as more parts of the replication functionality is added to Derby.  &lt;/p&gt;
 * @see MasterFactory
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>DEFAULT_LOG_BUFFER_SIZE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>LOG_BUFFER_SIZE_MIN</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>LOG_BUFFER_SIZE_MAX</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>rawStoreFactory</FieldName>
            <FieldType>RawStoreFactory</FieldType>
        </Field>
        <Field>
            <FieldName>dataFactory</FieldName>
            <FieldType>DataFactory</FieldType>
        </Field>
        <Field>
            <FieldName>logFactory</FieldName>
            <FieldType>LogFactory</FieldType>
        </Field>
        <Field>
            <FieldName>logBuffer</FieldName>
            <FieldType>ReplicationLogBuffer</FieldType>
        </Field>
        <Field>
            <FieldName>logShipper</FieldName>
            <FieldType>AsynchronousLogShipper</FieldType>
        </Field>
        <Field>
            <FieldName>transmitter</FieldName>
            <FieldType>ReplicationMessageTransmit</FieldType>
        </Field>
        <Field>
            <FieldName>repLogger</FieldName>
            <FieldType>ReplicationLogger</FieldType>
        </Field>
        <Field>
            <FieldName>replicationMode</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>slaveAddr</FieldName>
            <FieldType>SlaveAddress</FieldType>
        </Field>
        <Field>
            <FieldName>dbname</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>logBufferSize</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>active</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>SLAVE_CONNECTION_ATTEMPT_TIMEOUT</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>MasterController</MethodName>
            <MethodComment>/** 
 * Empty constructor required by Monitor.bootServiceModule
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>boot</MethodName>
            <MethodComment>/** 
 * Used by Monitor.bootServiceModule to start the service. Currently only used to set up the replication mode.
 * @param create Currently ignored
 * @param properties Properties used to start the service in thecorrect mode. Currently initializes only the replicationMode property.
 * @exception StandardException Standard Derby exception policy,thrown on error.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>create</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>properties</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>canSupport</MethodName>
            <MethodComment>/** 
 * Used by Monitor.bootServiceModule to check if this class is usable for replication. To be usable, we require that asynchronous replication is specified in startParams by checking that a property with key MasterFactory.REPLICATION_MODE has the value MasterFactory.ASYNCHRONOUS_MODE. 
 * @param startParams The properties used to boot replication
 * @return true if asynchronous replication is requested, meaningthat this MasterController is a suitable implementation for the MasterFactory service. False otherwise
 * @see ModuleSupportable#canSupport 
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>startParams</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [modeParam=startParams.getProperty(MasterFactory.REPLICATION_MODE)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>stop</MethodName>
            <MethodComment>/** 
 * Will stop the replication master service.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startMaster</MethodName>
            <MethodComment>/** 
 * Will perform all the work that is needed to set up replication.
 * @param rawStore The RawStoreFactory for the database
 * @param dataFac The DataFactory for this database
 * @param logFac The LogFactory ensuring recoverability for this database
 * @param slavehost The hostname of the slave
 * @param slaveport The port the slave is listening on
 * @param dbname The master database that is being replicated.
 * @exception StandardException Standard Derby exception policy,1) thrown on replication startup error 2) thrown if the master has already been booted. 3) thrown if the specified replication mode is not supported.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rawStore</ParamName>
                    <ParamType>RawStoreFactory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dataFac</ParamName>
                    <ParamType>DataFactory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>logFac</ParamName>
                    <ParamType>LogFactory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>slavehost</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>slaveport</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dbname</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;getMasterProperties;[]</InnerMethodInvoke>
                <InnerMethodInvoke>Monitor;logTextMessage;[MessageId.REPLICATION_MASTER_STARTED, dbname]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>stopMaster</MethodName>
            <MethodComment>/** 
 * Will perform all work that is needed to shut down replication.
 * @throws StandardException If the replication master has been stoppedalready.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>logFactory;stopReplicationMasterRole;[]</InnerMethodInvoke>
                <InnerMethodInvoke>Monitor;logTextMessage;[MessageId.REPLICATION_MASTER_STOPPED, dbname]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startFailover</MethodName>
            <MethodComment>/** 
 * @see MasterFactory#startFailover()
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>ReplicationMessage [ack=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rawStoreFactory;freeze;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMasterProperties</MethodName>
            <MethodComment>/** 
 * Load relevant system property: replication log buffer size
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>handleFailoverFailure</MethodName>
            <MethodComment>/** 
 * used to handle the case when an attempt to failover the database fails.
 * @param t        The throwable which resulted in the aborted failoverattempt.
 * @throws StandardException Indicating the reason for the abortedfailover attempt. 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Throwable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;teardownNetwork;[]</InnerMethodInvoke>
                <InnerMethodInvoke>rawStoreFactory;unfreeze;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>appendLog</MethodName>
            <MethodComment>/** 
 * Append a chunk of log records to the log buffer. The method is not  threadsafe; only one thread should access this method at a time. 
 * @param greatestInstant   the instant of the log record that wasadded last to this chunk of log
 * @param log               the chunk of log records
 * @param logOffset         offset in log to start copy from
 * @param logLength         number of bytes to copy, startingfrom logOffset
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>greatestInstant</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>log</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>logOffset</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>logLength</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>flushedTo</MethodName>
            <MethodComment>/** 
 * Used by the LogFactory to notify the replication master controller that the log records up to this instant have been flushed to disk. The master controller takes action according to the current replication strategy when this method is called. When the asynchronous replication strategy is used, the method does not force log shipping to the slave; the log records may be shipped now or later at the MasterController's discretion. However, if another strategy like 2-safe replication is implemented in the future, a call to this method may force log shipment before returning control to the caller. Currently, only asynchronous replication is supported. Not implemented yet
 * @param instant The highest log instant that has been flushed todisk
 * @see MasterFactory#flushedTo
 * @see LogFactory#flush
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>instant</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>logShipper;flushedInstance;[instant]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setupConnection</MethodName>
            <MethodComment>/** 
 * Connects to the slave being replicated to.
 * @throws StandardException If a failure occurs while trying to openthe connection to the slave.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>handleExceptions</MethodName>
            <MethodComment>/** 
 * Used to handle the exceptions (IOException and StandardException) from  the log shipper.
 * @param exception the exception which caused the log shipper to terminatein an unexcepted manner.
 * @return an instance of the transmitter used to transmit messages to theslave.
 */
</MethodComment>
            <ReturnType>ReplicationMessageTransmit</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>exception</ParamName>
                    <ParamType>Exception</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>printStackAndStopMaster</MethodName>
            <MethodComment>/** 
 * used to print the error stack for the given exception and stop the master.
 * @param e the exception that needs to be handled.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>e</ParamName>
                    <ParamType>Exception</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>repLogger;logError;[MessageId.REPLICATION_LOGSHIPPER_EXCEPTION, e]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>workToDo</MethodName>
            <MethodComment>/** 
 * Used to notify the log shipper that a log buffer element is full.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>logShipper;workToDo;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>teardownNetwork</MethodName>
            <MethodComment>/** 
 * Stop log shipping, notify slave that replication is stopped and tear down network connection with slave.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDbName</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Returns a name of a database associated with this master controller. &lt;/p&gt; &lt;p&gt; Note: The only purpose of the method as of now is to give a  meaningful name to a log shipper thread. The log shipper thread  name should contain a name of a corresponding master database, and this method is used to access it. &lt;/p&gt;
 * @return a master database name
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getHostName</MethodName>
            <MethodComment>/** 
 * Used to return the host name of the slave being connected to.
 * @return a String containing the host name of the slave beingconnected to.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPortNumber</MethodName>
            <MethodComment>/** 
 * Used to return the port number of the slave being connected to.
 * @return an Integer that represents the port number of the slavebeing connected to.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>