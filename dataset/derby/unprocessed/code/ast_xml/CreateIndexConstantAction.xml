<Class>
    <Id>1987</Id>
    <Package>org.apache.derby.impl.sql.execute</Package>
    <ClassName>CreateIndexConstantAction</ClassName>
    <SuperClass>IndexConstantAction</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>CreateIndexConstantAction  /** 
 * ConstantAction to create an index either through a CREATE INDEX statement or as a backing index to a constraint.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>forCreateTable</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>unique</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>uniqueWithDuplicateNulls</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>uniqueDeferrable</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>hasDeferrableChecking</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>initiallyDeferred</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>constraintType</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>indexType</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>columnNames</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>isAscending</FieldName>
            <FieldType>boolean[]</FieldType>
        </Field>
        <Field>
            <FieldName>isConstraint</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>conglomerateUUID</FieldName>
            <FieldType>UUID</FieldType>
        </Field>
        <Field>
            <FieldName>properties</FieldName>
            <FieldType>Properties</FieldType>
        </Field>
        <Field>
            <FieldName>indexTemplateRow</FieldName>
            <FieldType>ExecRow</FieldType>
        </Field>
        <Field>
            <FieldName>conglomId</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>droppedConglomNum</FieldName>
            <FieldType>long</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>CreateIndexConstantAction</MethodName>
            <MethodComment>/** 
 * Make the ConstantAction to create an index.
 * @param forCreateTable                Being executed within a CREATE TABLEstatement
 * @param unique		                True means it will be a unique index
 * @param uniqueWithDuplicateNulls      True means index check and disallowany duplicate key if key has no  column with a null value.  If any  column in the key has a null value, no checking is done and insert will always succeed.
 * @param hasDeferrableChecking         True means this index backs adeferrable constraint. isConstraint will be true.
 * @param initiallyDeferred             True means the index representsa deferred constraint. Implies hasDeferrableChecking.
 * @param indexType	                    type of index (BTREE, for example)
 * @param schemaName	                schema that table (and index) lives in.
 * @param indexName	                    Name of the index
 * @param tableName	                    Name of table the index will be on
 * @param tableId		                UUID of table
 * @param columnNames	                Names of the columns in the index, in order
 * @param isAscending	                Array of booleans telling asc/desc on each column
 * @param isConstraint	                TRUE if index is backing up a constraint, else FALSE
 * @param conglomerateUUID	            ID of conglomerate
 * @param properties	                The optional properties list associated with the index.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>forCreateTable</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>unique</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>uniqueWithDuplicateNulls</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>hasDeferrableChecking</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>initiallyDeferred</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>constraintType</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indexType</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>schemaName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indexName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableId</ParamName>
                    <ParamType>UUID</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columnNames</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isAscending</ParamName>
                    <ParamType>boolean[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isConstraint</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>conglomerateUUID</ParamName>
                    <ParamType>UUID</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>properties</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>CreateIndexConstantAction</MethodName>
            <MethodComment>/** 
 * Make a ConstantAction that creates a new physical conglomerate based on index information stored in the received descriptors. Assumption is that the received ConglomerateDescriptor is still valid (meaning it has corresponding entries in the system tables and it describes some constraint/index that has _not_ been dropped--though the physical conglomerate underneath has). This constructor is used in cases where the physical conglomerate for an index has been dropped but the index still exists. That can happen if multiple indexes share a physical conglomerate but then the conglomerate is dropped as part of "drop index" processing for one of the indexes. (Note that "indexes" here includes indexes which were created to back constraints.) In that case we have to create a new conglomerate to satisfy the remaining sharing indexes, so that's what we're here for.  See ConglomerateDescriptor.drop() for details on when that is necessary.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>srcCD</ParamName>
                    <ParamType>ConglomerateDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>td</ParamName>
                    <ParamType>TableDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>properties</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>IndexRowGenerator [irg=srcCD.getIndexDescriptor()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>executeConstantAction</MethodName>
            <MethodComment>/** 
 * This is the guts of the Execution-time logic for  creating an index. &lt;P&gt; A index is represented as: &lt;UL&gt; &lt;LI&gt; ConglomerateDescriptor. &lt;/UL&gt; No dependencies are created.
 * @see ConglomerateDescriptor
 * @see SchemaDescriptor
 * @see ConstantAction#executeConstantAction
 * @exception StandardException		Thrown on failure
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>activation</ParamName>
                    <ParamType>Activation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>TableDescriptor [td]</InnerVar>
                <InnerVar>UUID [toid]</InnerVar>
                <InnerVar>ColumnDescriptor [columnDescriptor]</InnerVar>
                <InnerVar>int[] [baseColumnPositions]</InnerVar>
                <InnerVar>IndexRowGenerator [indexRowGenerator=null]</InnerVar>
                <InnerVar>ExecRow[] [baseRows]</InnerVar>
                <InnerVar>ExecIndexRow[] [indexRows]</InnerVar>
                <InnerVar>ExecRow[] [compactBaseRows]</InnerVar>
                <InnerVar>GroupFetchScanController [scan]</InnerVar>
                <InnerVar>RowLocationRetRowSource [rowSource]</InnerVar>
                <InnerVar>long [sortId]</InnerVar>
                <InnerVar>int [maxBaseColumnPosition=-1]</InnerVar>
                <InnerVar>LanguageConnectionContext [lcc=activation.getLanguageConnectionContext()]</InnerVar>
                <InnerVar>DataDictionary [dd=lcc.getDataDictionary()]</InnerVar>
                <InnerVar>DependencyManager [dm=dd.getDependencyManager()]</InnerVar>
                <InnerVar>TransactionController [tc=lcc.getTransactionExecute()]</InnerVar>
                <InnerVar>SchemaDescriptor [sd=dd.getSchemaDescriptor(schemaName,tc,true)]</InnerVar>
                <InnerVar>ConglomerateDescriptor[] [congDescs=td.getConglomerateDescriptors()]</InnerVar>
                <InnerVar>boolean [shareExisting=false]</InnerVar>
                <InnerVar>boolean [alreadyHaveConglomDescriptor=(droppedConglomNum &gt; -1L)]</InnerVar>
                <InnerVar>DataDescriptorGenerator [ddg=dd.getDataDescriptorGenerator()]</InnerVar>
                <InnerVar>Properties [indexProperties]</InnerVar>
                <InnerVar>boolean [needToDropSort=false]</InnerVar>
                <InnerVar>int [bulkFetchSize=(forCreateTable) ? 1 : 16]</InnerVar>
                <InnerVar>int [numColumns=td.getNumberOfColumns()]</InnerVar>
                <InnerVar>int [approximateRowSize=0]</InnerVar>
                <InnerVar>FormatableBitSet [bitSet=new FormatableBitSet(numColumns + 1)]</InnerVar>
                <InnerVar>FormatableBitSet [zeroBasedBitSet=RowUtil.shift(bitSet,1)]</InnerVar>
                <InnerVar>ConglomerateController [indexController=tc.openConglomerate(conglomId,false,0,TransactionController.MODE_TABLE,TransactionController.ISOLATION_SERIALIZABLE)]</InnerVar>
                <InnerVar>CardinalityCounter [cCount=(CardinalityCounter)rowSource]</InnerVar>
                <InnerVar>long [numRows=cCount.getRowCount()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>dd;startWriting;[lcc]</InnerMethodInvoke>
                <InnerMethodInvoke>null;lockTableForDDL;[tc, td.getHeapConglomerateId(), false]</InnerMethodInvoke>
                <InnerMethodInvoke>indexProperties;put;["baseConglomerateId", Long.toString(td.getHeapConglomerateId())]</InnerMethodInvoke>
                <InnerMethodInvoke>indexProperties;put;["nUniqueColumns", Integer.toString(unique ? baseColumnPositions.length : baseColumnPositions.length + 1)]</InnerMethodInvoke>
                <InnerMethodInvoke>indexProperties;put;["rowLocationColumn", Integer.toString(baseColumnPositions.length)]</InnerMethodInvoke>
                <InnerMethodInvoke>indexProperties;put;["nKeyFields", Integer.toString(baseColumnPositions.length + 1)]</InnerMethodInvoke>
                <InnerMethodInvoke>indexController;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addStatistics</MethodName>
            <MethodComment>/** 
 * Determines if a statistics entry is to be added for the index. &lt;p&gt; As an optimization, it may be better to not write a statistics entry to SYS.SYSSTATISTICS. If it isn't needed by Derby as part of query optimization there is no reason to spend resources keeping the statistics up to date.
 * @param dd the data dictionary
 * @param irg the index row generator
 * @param numRows the number of rows in the index
 * @return {@code true} if statistics should be written toSYS.SYSSTATISTICS,  {@code false} otherwise.
 * @throws StandardException if accessing the data dictionary fails
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dd</ParamName>
                    <ParamType>DataDictionary</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>irg</ParamName>
                    <ParamType>IndexRowGenerator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>numRows</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [add=(numRows &gt; 0)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getIndexTemplateRow</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ExecRow</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCreatedConglomNumber</MethodName>
            <MethodComment>/** 
 * Get the conglomerate number for the conglomerate that was created by this constant action.  Will return -1L if the constant action has not yet been executed.  This is used for updating conglomerate descriptors which share a conglomerate that has been dropped, in which case those "sharing" descriptors need to point to the newly-created conglomerate (the newly-created conglomerate replaces the dropped one).
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getReplacedConglomNumber</MethodName>
            <MethodComment>/** 
 * If the purpose of this constant action was to "replace" a dropped physical conglomerate, then this method returns the conglomerate number of the dropped conglomerate.  Otherwise this method will end up returning -1.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCreatedUUID</MethodName>
            <MethodComment>/** 
 * Get the UUID for the conglomerate descriptor that was created (or re-used) by this constant action.
 */
</MethodComment>
            <ReturnType>UUID</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>loadSorter</MethodName>
            <MethodComment>/** 
 * Scan the base conglomerate and insert the keys into a sorter, returning a rowSource on the sorter. 
 * @return RowSource on the sorted index keys.
 * @exception StandardException					thrown on error
 */
</MethodComment>
            <ReturnType>RowLocationRetRowSource</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>baseRows</ParamName>
                    <ParamType>ExecRow[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indexRows</ParamName>
                    <ParamType>ExecIndexRow[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tc</ParamName>
                    <ParamType>TransactionController</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>scan</ParamName>
                    <ParamType>GroupFetchScanController</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sortId</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rl</ParamName>
                    <ParamType>RowLocation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>SortController [sorter]</InnerVar>
                <InnerVar>long [rowCount=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>