<Class>
    <Id>454</Id>
    <Package>org.apache.derby.iapi.store.access</Package>
    <ClassName>AccessFactory</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>AccessFactory  /** 
 * Module interface for an access manager.  An access manager provides transactional access via access methods to data in a single storage manager. &lt;p&gt; An AccessFactory is typically obtained from the Monitor: &lt;p&gt; &lt;blockquote&gt;&lt;pre&gt; // Get the current transaction controller. AccessFactory af; af = (AccessFactory) Monitor.findServiceModule(this, AccessFactory.MODULE); &lt;/pre&gt;&lt;/blockquote&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>MODULE</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>registerAccessMethod</MethodName>
            <MethodComment>/** 
 * Register an access method that this access manager can use.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>factory</ParamName>
                    <ParamType>MethodFactory</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createFinished</MethodName>
            <MethodComment>/** 
 * Database creation has finished.
 * @exception StandardException Standard exception policy.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findMethodFactoryByImpl</MethodName>
            <MethodComment>/** 
 * Find an access method that implements an implementation type.
 * @exception StandardException Standard exception policy.
 */
</MethodComment>
            <ReturnType>MethodFactory</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>impltype</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findMethodFactoryByFormat</MethodName>
            <MethodComment>/** 
 * Find an access method that implements a format type.
 */
</MethodComment>
            <ReturnType>MethodFactory</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>format</ParamName>
                    <ParamType>UUID</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLockFactory</MethodName>
            <MethodComment>/** 
 * Get the LockFactory to use with this store.
 * @return The lock factory to use with this store.
 */
</MethodComment>
            <ReturnType>LockFactory</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getXAResourceManager</MethodName>
            <MethodComment>/** 
 * Return the XAResourceManager associated with this AccessFactory. &lt;p&gt; Returns an object which can be used to implement the "offline"  2 phase commit interaction between the accessfactory and outstanding transaction managers taking care of in-doubt transactions.
 * @return The XAResourceManager associated with this accessfactory.
 * @exception StandardException Standard exception policy.
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isReadOnly</MethodName>
            <MethodComment>/** 
 * Is the store read-only.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createReadMeFiles</MethodName>
            <MethodComment>/** 
 * DERBY-5996(Create readme files (cautioning users against modifying  database files) at database hard upgrade time) This gets called during hard upgrade. It will create 3 readme files one in database directory, one in "seg0" directory and one in log directory. These readme files warn users against touching any of files associated with derby database 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTransaction</MethodName>
            <MethodComment>/** 
 * Get a transaction controller with which to manipulate data within the access manager.  Implicitly creates an access context if one does not already exist.
 * @param cm    The context manager for the current context.
 * @exception StandardException Standard exception policy.
 * @see TransactionController
 */
</MethodComment>
            <ReturnType>TransactionController</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cm</ParamName>
                    <ParamType>ContextManager</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAndNameTransaction</MethodName>
            <MethodComment>/** 
 * Get a transaction. If a new transaction is  implicitly created, give it name transName.
 * @param cm            The context manager for the current context.
 * @param transName     If a new transaction is started, it will be given this name.  The name is displayed in the  transactiontable VTI.
 * @exception StandardException Standard exception policy.
 * @see TransactionController
 * @see AccessFactory#getTransaction
 */
</MethodComment>
            <ReturnType>TransactionController</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cm</ParamName>
                    <ParamType>ContextManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>transName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTransactionInfo</MethodName>
            <MethodComment>/** 
 * Return a snap shot of all transactions in the db. &lt;p&gt; Take a snap shot of all transactions currently in the database and make a record of their information.
 * @return an array of TransactionInfo, or null if there is no transaction in the database.
 */
</MethodComment>
            <ReturnType>TransactionInfo[]</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startXATransaction</MethodName>
            <MethodComment>/** 
 * Start a global transaction. &lt;p&gt; Get a transaction controller with which to manipulate data within the access manager.  Implicitly creates an access context. &lt;p&gt; Must only be called if no other transaction context exists in the current context manager.  If another transaction exists in the context an exception will be thrown. &lt;p&gt; The (format_id, global_id, branch_id) triplet is meant to come exactly from a javax.transaction.xa.Xid.  We don't use Xid so that the system can be delivered on a non-1.2 vm system and not require the javax classes in the path. &lt;p&gt; If the global transaction id given matches an existing in-doubt global transaction in the current system, then a StandardException will be thrown with a state of SQLState.STORE_XA_XAER_DUPID. &lt;p&gt;
 * @param cm        The context manager for the current context.
 * @param format_id the format id part of the Xid - ie. Xid.getFormatId().
 * @param global_id the global transaction identifier part of XID - ie.Xid.getGlobalTransactionId().
 * @param branch_id The branch qualifier of the Xid - ie.Xid.getBranchQaulifier()
 * @exception StandardException Standard exception policy.
 * @see TransactionController
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cm</ParamName>
                    <ParamType>ContextManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>format_id</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>global_id</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>branch_id</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startReplicationMaster</MethodName>
            <MethodComment>/** 
 * Start the replication master role for this database
 * @param dbmaster The master database that is being replicated.
 * @param host The hostname for the slave
 * @param port The port the slave is listening on
 * @param replicationMode The type of replication contract.Currently only asynchronous replication is supported, but 1-safe/2-safe/very-safe modes may be added later.
 * @exception StandardException Standard Derby exception policy,thrown on error.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dbmaster</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>host</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>port</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>replicationMode</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>stopReplicationMaster</MethodName>
            <MethodComment>/** 
 * Stop the replication master role for this database.
 * @exception StandardException Standard Derby exception policy,thrown on error.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>failover</MethodName>
            <MethodComment>/** 
 * Start the failover for this database.
 * @param dbname the replication database that is being failed over.
 * @exception StandardException Standard Derby exception policy,1) If the failover succeeds, an exception is thrown to indicate that the master database was shutdown after a successful failover 2) If a failure occurs during network  communication with slave.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dbname</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>freeze</MethodName>
            <MethodComment>/** 
 * Freeze the database temporarily so a backup can be taken. &lt;P&gt;Please see Derby on line documentation on backup and restore.
 * @exception StandardException Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>unfreeze</MethodName>
            <MethodComment>/** 
 * Unfreeze the database after a backup has been taken. &lt;P&gt;Please see Derby on line documentation on backup and restore.
 * @exception StandardException Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>backup</MethodName>
            <MethodComment>/** 
 * Backup the database to backupDir.   &lt;P&gt;Please see Derby on line documentation on backup and restore.
 * @param backupDir the name of the directory where the backup should bestored.
 * @param wait      if &lt;tt&gt;true&lt;/tt&gt;, waits for  all the backup blocking operations in progress to finish.
 * @exception StandardException Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>backupDir</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wait</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>backupAndEnableLogArchiveMode</MethodName>
            <MethodComment>/** 
 * Backup the database to a backup directory and enable the log archive mode that will keep the archived log files required for roll-forward from this version backup.
 * @param backupDir                     the directory name where the database backup should go.  This  directory will be created if not it does not exist.
 * @param deleteOnlineArchivedLogFiles  If true deletes online archived logfiles that exist before this backup, delete will occur only after backup is complete.
 * @param wait                          if &lt;tt&gt;true&lt;/tt&gt;, waits for all thebackup blocking operations in  progress to finish.
 * @exception StandardException Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>backupDir</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>deleteOnlineArchivedLogFiles</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wait</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>disableLogArchiveMode</MethodName>
            <MethodComment>/** 
 * disables the log archival process, i.e No old log files will be kept around for a roll-forward recovery.
 * @param deleteOnlineArchivedLogFiles  If true deletes all online archivedlog files that exist before this  call immediately; Only restore that can be performed after disabling log archive mode is version recovery.
 * @exception StandardException Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>deleteOnlineArchivedLogFiles</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkpoint</MethodName>
            <MethodComment>/** 
 * Checkpoints the database, that is, flushes all dirty data to disk. Records a checkpoint in the transaction log, if there is a log.
 * @exception StandardException Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>waitForPostCommitToFinishWork</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>