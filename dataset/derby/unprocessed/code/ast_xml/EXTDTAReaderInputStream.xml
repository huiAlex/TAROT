<Class>
    <Id>2063</Id>
    <Package>org.apache.derby.impl.drda</Package>
    <ClassName>EXTDTAReaderInputStream</ClassName>
    <SuperClass>InputStream</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>EXTDTAReaderInputStream  /** 
 * Implementation of InputStream which get EXTDTA from the DDMReader. &lt;p&gt; This class can be used to stream LOBs from Network client to the Network server. &lt;p&gt; To be able to correctly stream data from the client without reading the while value up front, a trailing Derby-specific status byte was introduced (version 10.6). It is used by the client to tell the server if the data it received was valid, or if it detected an error while streaming the data. The DRDA protocol, or at least Derby's implementation of it, doesn't enable the client to inform the server about the error whilst streaming (there is a mechanism in DRDA to interrupt a running request, but it didn't seem like a feasible approach in this case).
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>isLayerBStream</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>readStatusByte</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>statusSet</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>status</FieldName>
            <FieldType>byte</FieldType>
        </Field>
        <Field>
            <FieldName>suppressException</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>EXTDTAReaderInputStream</MethodName>
            <MethodComment>/** 
 * Initializes the class.
 * @param layerB whether or not DDM layer B streaming is being used
 * @param readStatusByte whether or not to read the trailing Derby-specificstatus byte
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>layerB</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>readStatusByte</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setStatus</MethodName>
            <MethodComment>/** 
 * Saves the status byte read off the wire.
 * @param status the status
 * @see DRDAConstants
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>status</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isStatusSet</MethodName>
            <MethodComment>/** 
 * Returns whether the status has been set or not.
 * @return {@code true} if set, {@code false} if not.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStatus</MethodName>
            <MethodComment>/** 
 * Returns the status byte. &lt;p&gt; &lt;em&gt;NOTE:&lt;/em&gt; Check if the status byte has been set by calling {@linkplain #isStatusSet()}.
 * @return The status byte.
 */
</MethodComment>
            <ReturnType>byte</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setSuppressException</MethodName>
            <MethodComment>/** 
 * Sets whether or not to suppress the exception when setting the status.
 * @param flag {@code true} to suppress, {@code false} to throw exceptionif an error condition is indicated by the status flag
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>flag</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isLayerBStream</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkStatus</MethodName>
            <MethodComment>/** 
 * Interprets the Derby-specific status byte, and throws an exception if an error condition has been detected on the client.
 * @param clientStatus the status flag sent by the client
 * @throws IOException if the status byte indicates an error condition
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clientStatus</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setStatus;[clientStatus]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onClientSideStreamingError</MethodName>
            <MethodComment>/** 
 * Performs necessary clean up when an error is signalled by the client.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>throwEXTDTATransferException</MethodName>
            <MethodComment>/** 
 * Throws an exception as mandated by the EXTDTA status byte.
 * @param status the EXTDTA status byte received from the client, shouldnot be  {@linkplain DRDAConstants#STREAM_OK}
 * @throws IOException the exception generated based on the status byte
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>status</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>