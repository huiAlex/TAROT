<Class>
    <Id>158</Id>
    <Package>org.apache.derby.iapi.types</Package>
    <ClassName>CharStreamHeaderGenerator</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>StreamHeaderGenerator</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>CharStreamHeaderGenerator  /** 
 * Generates stream headers for non-Clob string data types. &lt;p&gt; The stream header encodes the byte length of the stream. Since two bytes are used for the header, the maximum encodable length is 65535 bytes. There are three special cases, all handled by encoding zero into the header and possibly appending an EOF-marker to the stream: &lt;ul&gt; &lt;li&gt;Unknown length - with EOF marker&lt;/li&gt; &lt;li&gt;Length longer than maximum encodable length - with EOF marker&lt;/li&gt; &lt;li&gt;Length of zero - no EOF marker&lt;/li&gt; &lt;/ul&gt; The length is encoded like this: &lt;pre&gt; out.writeByte((byte)(byteLength &amp;gt;&amp;gt;&amp;gt; 8)); out.writeByte((byte)(byteLength &amp;gt;&amp;gt;&amp;gt; 0)); &lt;/pre&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>DERBY_EOF_MARKER</FieldName>
            <FieldType>byte[]</FieldType>
        </Field>
        <Field>
            <FieldName>MAX_ENCODABLE_LENGTH</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>expectsCharCount</MethodName>
            <MethodComment>/** 
 * A byte count is expected.
 * @return {@code false}.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeEOFMarker</MethodName>
            <MethodComment>/** 
 * Write the EOF marker to a byte array and return the EOF marker's length 
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>buffer</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>offset</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>System;arraycopy;[DERBY_EOF_MARKER, 0, buffer, offset, DERBY_EOF_MARKER.length]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeEOFMarker</MethodName>
            <MethodComment>/** 
 * Write the EOF marker to an Object stream  and return the EOF marker's length 
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>ObjectOutput</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>out;write;[DERBY_EOF_MARKER]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateInto</MethodName>
            <MethodComment>/** 
 * Generates the header for the specified length and writes it into the provided buffer, starting at the specified offset.
 * @param buffer the buffer to write into
 * @param offset starting offset in the buffer
 * @param byteLength the length to encode in the header
 * @return The number of bytes written into the buffer.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>buffer</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>offset</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>byteLength</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateInto</MethodName>
            <MethodComment>/** 
 * Generates the header for the specified length.
 * @param out the destination stream
 * @param byteLength the byte length to encode in the header
 * @return The number of bytes written to the destination stream.
 * @throws IOException if writing to the destination stream fails
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>ObjectOutput</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>byteLength</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeEOF</MethodName>
            <MethodComment>/** 
 * Writes a Derby-specific end-of-stream marker to the buffer for a stream of the specified byte length, if required.
 * @param buffer the buffer to write into
 * @param offset starting offset in the buffer
 * @param byteLength the byte length of the stream
 * @return Number of bytes written (zero or more).
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>buffer</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>offset</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>byteLength</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeEOF</MethodName>
            <MethodComment>/** 
 * Writes a Derby-specific end-of-stream marker to the destination stream for the specified byte length, if required.
 * @param out the destination stream
 * @param byteLength the length of the stream
 * @return Number of bytes written (zero or more).
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>ObjectOutput</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>byteLength</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMaxHeaderLength</MethodName>
            <MethodComment>/** 
 * Returns the maximum header length.
 * @return Maximum header length in bytes.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>