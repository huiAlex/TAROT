<Class>
    <Id>1673</Id>
    <Package>org.apache.derby.io</Package>
    <ClassName>StorageRandomAccessFile</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>DataInput</SuperInterface>
        <SuperInterface>DataOutput</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>StorageRandomAccessFile  /** 
 * This interface abstracts an object that implements reading and writing on a random access file. It extends DataInput and DataOutput, so it implicitly contains all the methods of those interfaces. Any method in this interface that also appears in the java.io.RandomAccessFile class should behave as the java.io.RandomAccessFile method does. &lt;p&gt; Each StorageRandomAccessFile has an associated file pointer, a byte offset in the file. All reading and writing takes place at the file pointer offset and advances it. &lt;p&gt; An implementation of StorageRandomAccessFile need not be thread safe. The database engine single-threads access to each StorageRandomAccessFile instance. Two threads will not access the same StorageRandomAccessFile instance at the same time. &lt;p&gt;
 * @see &lt;a href="http://java.sun.com/j2se/1.4.2/docs/api/java/io/RandomAccessFile.html"&gt;java.io.RandomAccessFile&lt;/a&gt;
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>close</MethodName>
            <MethodComment>/** 
 * Closes this file.
 * @exception IOException - if an I/O error occurs.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFilePointer</MethodName>
            <MethodComment>/** 
 * Get the current offset in this file.
 * @return the current file pointer. 
 * @exception IOException - if an I/O error occurs.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>length</MethodName>
            <MethodComment>/** 
 * Gets the length of this file.
 * @return the number of bytes this file. 
 * @exception IOException - if an I/O error occurs.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>seek</MethodName>
            <MethodComment>/** 
 * Set the file pointer. It may be moved beyond the end of the file, but this does not change the length of the file. The length of the file is not changed until data is actually written..
 * @param newFilePointer the new file pointer, measured in bytes from the beginning of the file.
 * @exception IOException - if newFilePointer is less than 0 or an I/O error occurs.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>newFilePointer</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setLength</MethodName>
            <MethodComment>/** 
 * Sets the length of this file, either extending or truncating it. &lt;p&gt; If the file is extended then the contents of the extension are not defined. &lt;p&gt; If the file is truncated and the file pointer is greater than the new length then the file pointer is set to the new length.
 * @param newLength The new file length.
 * @exception IOException If an I/O error occurs.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>newLength</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sync</MethodName>
            <MethodComment>/** 
 * Force any changes out to the persistent store. If the database is to be transient, that is, if the database does not survive a restart, then the sync method implementation need not do anything.
 * @exception java.io.SyncFailedException if a possibly recoverable error occurs.
 * @exception IOException If an IO error occurs.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>read</MethodName>
            <MethodComment>/** 
 * Reads up to &lt;code&gt;len&lt;/code&gt; bytes of data from this file into an array of bytes. This method blocks until at least one byte of input is available. &lt;p&gt;
 * @param b     the buffer into which the data is read.
 * @param off   the start offset in array &lt;code&gt;b&lt;/code&gt;at which the data is written.
 * @param len   the maximum number of bytes read.
 * @return the total number of bytes read into the buffer, or&lt;code&gt;-1&lt;/code&gt; if there is no more data because the end of the file has been reached.
 * @exception IOException If the first byte cannot be read for any reasonother than end of file, or if the random access file has been closed, or if some other I/O error occurs.
 * @exception NullPointerException If &lt;code&gt;b&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.
 * @exception IndexOutOfBoundsException If &lt;code&gt;off&lt;/code&gt; is negative,&lt;code&gt;len&lt;/code&gt; is negative, or &lt;code&gt;len&lt;/code&gt; is greater than &lt;code&gt;b.length - off&lt;/code&gt;
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>b</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>off</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>len</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clone</MethodName>
            <MethodComment>/** 
 * Clone this file abstraction 
 */
</MethodComment>
            <ReturnType>StorageRandomAccessFile</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>