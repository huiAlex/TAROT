<Class>
    <Id>253</Id>
    <Package>org.apache.derby.jdbc</Package>
    <ClassName>BasicEmbeddedDataSource40</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>javax.sql.DataSource</SuperInterface>
        <SuperInterface>java.io.Serializable</SuperInterface>
        <SuperInterface>EmbeddedDataSourceInterface</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>BasicEmbeddedDataSource40  /** 
 * This data source is suitable for an application using embedded Derby, running on Java 8 Compact Profile 2 or higher. &lt;p/&gt; BasicEmbeddedDataSource40 is similar to EmbeddedDataSource, but does not support JNDI naming, i.e. it does not implement {@code javax.naming.Referenceable}. &lt;p/&gt; The standard attributes provided are, cf. e.g. table 9.1 in the JDBC 4.2 specification. &lt;ul&gt; &lt;li&gt;databaseName&lt;/li&gt; &lt;li&gt;dataSourceName&lt;/li&gt; &lt;li&gt;description&lt;/li&gt; &lt;li&gt;password&lt;/li&gt; &lt;li&gt;user&lt;/li&gt; &lt;/ul&gt; These standard attributes are not supported: &lt;ul&gt; &lt;li&gt;networkProtocol&lt;/li&gt; &lt;li&gt;portNumber&lt;/li&gt; &lt;li&gt;roleName&lt;/li&gt; &lt;li&gt;serverName&lt;/li&gt; &lt;/ul&gt; The embedded Derby driver also supports these attributes: &lt;ul&gt; &lt;li&gt;loginTimeout&lt;/li&gt; @see javax.sql.CommonDataSource set/get &lt;li&gt;logWriter&lt;/li&gt; @see javax.sql.CommonDataSource set/get &lt;li&gt;createDatabase&lt;/li&gt; &lt;li&gt;connectionAttributes&lt;/li&gt; &lt;li&gt;shutdownDatabase&lt;/li&gt; &lt;li&gt;attributesAsPassword&lt;/li&gt; &lt;/ul&gt; &lt;br&gt; See the specific Derby DataSource implementation for details on their meaning. &lt;p/&gt; See also the JDBC specifications for more details.
 * @see EmbeddedDataSource
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>serialVersionUID</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>description</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>dataSourceName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>databaseName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>connectionAttributes</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>createDatabase</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>shutdownDatabase</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>attributesAsPassword</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>shortDatabaseName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>password</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>user</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>loginTimeout</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>printer</FieldName>
            <FieldType>PrintWriter</FieldType>
        </Field>
        <Field>
            <FieldName>jdbcurl</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>driver</FieldName>
            <FieldType>InternalDriver</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>BasicEmbeddedDataSource40</MethodName>
            <MethodComment>/** 
 * Constructs a basic embedded data source. See the class Javadoc.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;update;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setDatabaseName</MethodName>
            <MethodComment>/** 
 * Set the database name.  Setting this property is mandatory.  If a database named wombat at g:/db needs to be accessed, database name should be set to "g:/db/wombat".  The database will be booted if it is not already running in the system.
 * @param databaseName the name of the database
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>databaseName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;update;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDatabaseName</MethodName>
            <MethodComment>/** 
 * @return the database name set by {@link #setDatabaseName}.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getShortDatabaseName</MethodName>
            <MethodComment>/** 
 * Return database name with ant attributes stripped off.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setDataSourceName</MethodName>
            <MethodComment>/** 
 * Set the data source name.  The property is not mandatory.  It is used for informational purposes only.
 * @param dsn the name of the data source
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dsn</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDataSourceName</MethodName>
            <MethodComment>/** 
 * @return data source name as set in {@link #setDataSourceName}.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setDescription</MethodName>
            <MethodComment>/** 
 * Set the data source descripton. This property is not mandatory. It is used for informational purposes only.
 * @param desc the description of the data source
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>desc</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDescription</MethodName>
            <MethodComment>/** 
 * @return the description as set in {@link #setDescription}.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setUser</MethodName>
            <MethodComment>/** 
 * Set the  {@code user} property for the data source.&lt;p/&gt; This is user name for any data source  {@code getConnection()} callthat takes no arguments.
 * @param user The user
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>user</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getUser</MethodName>
            <MethodComment>/** 
 * @return the user name as set by {@link #setUser}.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setPassword</MethodName>
            <MethodComment>/** 
 * Set the  {@code password} property for the data source.&lt;p/&gt; This is user's password for any data source  {@code getConnection()} callthat takes no arguments.
 * @param password The password in plain text
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>password</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPassword</MethodName>
            <MethodComment>/** 
 * @return the password as set in {@link #setPassword}.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLoginTimeout</MethodName>
            <MethodComment>/** 
 * Gets the maximum time in seconds that this data source can wait while attempting to connect to a database.  A value of zero means that the timeout is the default system timeout if there is one; otherwise it means that there is no timeout. When a data source object is created, the login timeout is initially zero. See  {@link #setLoginTimeout}.
 * @return the data source login time limit
 * @exception SQLException if a database access error occurs.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setLoginTimeout</MethodName>
            <MethodComment>/** 
 * Sets the maximum time in seconds that this data source will wait while attempting to connect to a database.  A value of zero specifies that the timeout is the default system timeout if there is one; otherwise it specifies that there is no timeout. When a data source object is created, the login timeout is initially zero. &lt;p/&gt; &lt;b&gt;Derby currently ignores this property.&lt;/b&gt;
 * @param seconds the data source login time limit
 * @exception SQLException if a database access error occurs.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>seconds</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLogWriter</MethodName>
            <MethodComment>/** 
 * Get the log writer for this data source. &lt;p/&gt; The log writer is a character output stream to which all logging and tracing messages for this data source object instance will be printed.  This includes messages printed by the methods of this object, messages printed by methods of other objects manufactured by this object, and so on.  Messages printed to a data source specific log writer are not printed to the log writer associated with the  {@code java.sql.Drivermanager} class.When a data source object is created the log writer is initially null, in other words, logging is disabled.
 * @return the log writer for this data source, null if disabled
 * @exception SQLException if a database-access error occurs.
 */
</MethodComment>
            <ReturnType>PrintWriter</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setLogWriter</MethodName>
            <MethodComment>/** 
 * Set the log writer for this data source. &lt;p/&gt; The log writer is a character output stream to which all logging and tracing messages for this data source object instance will be printed.  This includes messages printed by the methods of this object, messages printed by methods of other objects manufactured by this object, and so on.  Messages printed to a data source specific log writer are not printed to the log writer associated with the  {@code java.sql.Drivermanager} class.When a data source object is created the log writer is initially null, in other words, logging is disabled.
 * @param out the new log writer; to disable, set to null
 * @exception SQLException if a database-access error occurs.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>PrintWriter</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>update</MethodName>
            <MethodComment>/** 
 * Update  {@link #jdbcurl} from attributes set.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>StringBuilder [sb=new StringBuilder(64)]</InnerVar>
                <InnerVar>String [dbName=getDatabaseName()]</InnerVar>
                <InnerVar>String [connAttrs=getConnectionAttributes()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>sb;append;[Attribute.PROTOCOL]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;[dbName]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setCreateDatabase</MethodName>
            <MethodComment>/** 
 * Set this property to create a new database.  If this property is not set, the database (identified by  {@code databaseName}) is assumed to be already existing.
 * @param create if set to the string {@code "create"}, this data source will try to create a new database of databaseName, or boot the database if one by that name already exists.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>create</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCreateDatabase</MethodName>
            <MethodComment>/** 
 * @return The string {@code "create"} if create is set, or {@code null} if not
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findDriver</MethodName>
            <MethodComment>/** 
 * Return a handle to the internal driver, possibly instantiating it first if it hasn't been booted or if it has been shut down.
 * @return The internal driver handle
 * @throws SQLException
 */
</MethodComment>
            <ReturnType>InternalDriver</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [url=jdbcurl]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setConnectionAttributes</MethodName>
            <MethodComment>/** 
 * Set this property to pass in more Derby specific connection URL attributes. &lt;br&gt; Any attributes that can be set using a property of this DataSource implementation (e.g user, password) should not be set in connection attributes. Conflicting settings in connection attributes and properties of the DataSource will lead to unexpected behaviour.
 * @param prop set to the list of Derby connection attributesseparated by semi-colons.  E.g., to specify an encryption bootPassword of "x8hhk2adf", and set upgrade to true, do the following: &lt;pre&gt; ds.setConnectionAttributes("bootPassword=x8hhk2adf;upgrade=true"); &lt;/pre&gt; See the Derby documentation for complete list.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>prop</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;update;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getConnectionAttributes</MethodName>
            <MethodComment>/** 
 * @return the Derby specific connection URL attributes, see{@link #setConnectionAttributes}.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setShutdownDatabase</MethodName>
            <MethodComment>/** 
 * Set this property if you wish to shutdown the database identified by {@code databaseName}.
 * @param shutdown if set to the string {@code "shutdown"}, this data source will shutdown the database if it is running.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>shutdown</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getShutdownDatabase</MethodName>
            <MethodComment>/** 
 * @return the string {@code "shutdown"} if shutdown is set, ornull if not, cf.   {@link #setShutdownDatabase}.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setAttributesAsPassword</MethodName>
            <MethodComment>/** 
 * Set  {@code attributeAsPassword} property to enable passing connectionrequest attributes in the password argument of {@link #getConnection(String,String)}. If the property is set to  {@code true} then the {@code password}argument of the  {@link #getConnection(String,String)}method call is taken to be a list of connection attributes with the same format as the  {@code connectionAttributes} property.
 * @param attributesAsPassword Use {@code true} to encode passwordargument as a set of connection attributes in a connection request.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>attributesAsPassword</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;update;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAttributesAsPassword</MethodName>
            <MethodComment>/** 
 * Return the value of the  {@code attributesAsPassword} property, cf.{@link #setAttributesAsPassword}.
 * @return the value
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>equals</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>other</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hashCode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [hash=5]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getConnection</MethodName>
            <MethodComment>/** 
 * Attempt to establish a database connection.
 * @return  a Connection to the database
 * @exception SQLException if a database-access error occurs.
 */
</MethodComment>
            <ReturnType>Connection</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getConnection</MethodName>
            <MethodComment>/** 
 * Attempt to establish a database connection with the given username and password.  If the  {@code attributeAsPassword} property is set to truethen the password argument is taken to be a list of connection attributes with the same format as the  {@code connectionAttributes}property.
 * @param username the database user on whose behalf the Connection isbeing made
 * @param password the user's password
 * @return  a Connection to the database
 * @exception SQLException if a database-access error occurs.
 */
</MethodComment>
            <ReturnType>Connection</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>username</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>password</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getConnection</MethodName>
            <MethodComment>/** 
 * Get a user connection: minion method.
 * @param username the user name
 * @param password the password
 * @param requestPassword {@code true} if the password came from thegetConnection() call with user and password arguments..
 * @return user connection
 * @throws SQLException
 */
</MethodComment>
            <ReturnType>Connection</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>username</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>password</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>requestPassword</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Properties [info=new Properties()]</InnerVar>
                <InnerVar>String [url=jdbcurl]</InnerVar>
                <InnerVar>Connection [conn=findDriver().connect(url,info,loginTimeout)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isWrapperFor</MethodName>
            <MethodComment>/** 
 * Returns false unless  {@code interFace} is implemented.
 * @param interFace a class defining an interface
 * @return {@code true} if this implements the interface or directly orindirectly wraps an object that does
 * @throws SQLException if an error occurs while determiningwhether this is a wrapper for an object with the given interface
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>interFace</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>unwrap</MethodName>
            <MethodComment>/** 
 * Returns  {@code this} if this class implements the specified interface.
 * @param iface a class defining an interface
 * @return an object that implements the interface
 * @throws SQLException if no object is found that implements theinterface
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>iface</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setupResourceAdapter</MethodName>
            <MethodComment>/** 
 * Return a resource adapter. Use  {@code ra} if non-null and active, elseget the one for the data base.
 * @param ds The data source
 * @param ra The cached value if any
 * @param user The user name
 * @param password The password in clear text
 * @param requestPassword If {@code true}, use the supplied user and password to boot the database if required
 * @return the resource adapter
 * @throws SQLException An error occurred
 */
</MethodComment>
            <ReturnType>ResourceAdapter</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ds</ParamName>
                    <ParamType>EmbeddedXADataSourceInterface</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ra</ParamName>
                    <ParamType>ResourceAdapter</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>user</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>password</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>requestPassword</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getParentLogger</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Logger</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLFeatureNotSupportedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMonitor</MethodName>
            <MethodComment>/** 
 * Privileged Monitor lookup. Must be private so that user code can't call this entry point.
 */
</MethodComment>
            <ReturnType>ModuleFactory</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ModuleFactory</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findService</MethodName>
            <MethodComment>/** 
 * Privileged service lookup. Must be private so that user code can't call this entry point.
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>factoryInterface</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>serviceName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>