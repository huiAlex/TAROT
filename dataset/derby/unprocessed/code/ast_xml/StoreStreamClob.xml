<Class>
    <Id>184</Id>
    <Package>org.apache.derby.impl.jdbc</Package>
    <ClassName>StoreStreamClob</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>InternalClob</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>StoreStreamClob  /** 
 * A read-only Clob representation operating on streams out of the Derby store module. &lt;p&gt; Note that the streams from the store are expected to have the following properties: &lt;ol&gt; &lt;li&gt;The first few bytes are used for length encoding. Currently the number of bytes is either 2 or 5. &lt;li&gt;A Derby-specific end-of-stream marker at the end of the stream can be present. The marker is expected to be &lt;code&gt;0xe0 0x00 0x00&lt;/code&gt; &lt;/ol&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>released</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>positionedStoreStream</FieldName>
            <FieldType>PositionedStoreStream</FieldType>
        </Field>
        <Field>
            <FieldName>csd</FieldName>
            <FieldType>CharacterStreamDescriptor</FieldType>
        </Field>
        <Field>
            <FieldName>conChild</FieldName>
            <FieldType>ConnectionChild</FieldType>
        </Field>
        <Field>
            <FieldName>synchronizationObject</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>internalReader</FieldName>
            <FieldType>UTF8Reader</FieldType>
        </Field>
        <Field>
            <FieldName>unclosableInternalReader</FieldName>
            <FieldType>FilterReader</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>StoreStreamClob</MethodName>
            <MethodComment>/** 
 * Creates a new Clob based on a stream from store. &lt;p&gt; The stream used as a source for this Clob has to implement the interface {@code Resetable}, as the stream interface from store only allows for movement forwards. If the stream has been advanced too far with regards to the user request, the stream must be reset and we start from the beginning.
 * @param csd descriptor for the source stream, including a reference to it
 * @param conChild the connection (child) this Clob belongs to
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>csd</ParamName>
                    <ParamType>CharacterStreamDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>conChild</ParamName>
                    <ParamType>ConnectionChild</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>release</MethodName>
            <MethodComment>/** 
 * Releases resources associated with this Clob.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCharLength</MethodName>
            <MethodComment>/** 
 * Returns the number of characters in the Clob.
 * @return Number of characters in the Clob.
 * @throws SQLException if any kind of error is encountered, be it relatedto I/O or something else
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkIfValid;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCharLengthIfKnown</MethodName>
            <MethodComment>/** 
 * Returns the cached character count for the Clob, if any.
 * @return The number of characters in the Clob, or {@code -1} if unknown.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkIfValid;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRawByteStream</MethodName>
            <MethodComment>/** 
 * Returns a stream serving the raw bytes of this Clob. &lt;p&gt; Note that the stream returned is an internal stream, and it should not be pulished to end users.
 * @return A stream serving the bytes of this Clob, initialized at byte 0 ofthe data. The buffer must be assumed to be unbuffered, but no such guarantee is made.
 * @throws IOException if accessing the I/O resources fail
 * @throws SQLException if accessing the store resources fail
 */
</MethodComment>
            <ReturnType>InputStream</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkIfValid;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getReader</MethodName>
            <MethodComment>/** 
 * Returns a reader for the Clob, initialized at the specified character position.
 * @param pos character position. The first character is at position 1.
 * @return A reader initialized at the specified position.
 * @throws EOFException if the positions is larger than the Clob
 * @throws IOException if accessing the I/O resources fail
 * @throws SQLException if accessing the store resources fail
 */
</MethodComment>
            <ReturnType>Reader</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pos</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Reader [reader=new UTF8Reader(csd,this.conChild,this.synchronizationObject)]</InnerVar>
                <InnerVar>long [leftToSkip=pos - 1]</InnerVar>
                <InnerVar>long [skipped]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkIfValid;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getInternalReader</MethodName>
            <MethodComment>/** 
 * Returns an internal reader for the Clob, initialized at the specified character position.
 * @param characterPosition 1-based character position.
 * @return A reader initialized at the specified position.
 * @throws EOFException if the positions is larger than the Clob
 * @throws IOException if accessing the I/O resources fail
 * @throws SQLException if accessing the store resources fail
 */
</MethodComment>
            <ReturnType>Reader</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>characterPosition</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>close</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getUpdateCount</MethodName>
            <MethodComment>/** 
 * Returns the update count of this Clob. &lt;p&gt; Always returns zero, as this Clob cannot be updated.
 * @return Zero (read-only Clob).
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getWriter</MethodName>
            <MethodComment>/** 
 * Not supported.
 * @see InternalClob#getWriter
 */
</MethodComment>
            <ReturnType>Writer</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pos</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>insertString</MethodName>
            <MethodComment>/** 
 * Not supported.
 * @see InternalClob#insertString
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>str</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pos</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isReleased</MethodName>
            <MethodComment>/** 
 * Tells if this Clob has been released.
 * @return {@code true} if released, {@code false} if not.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isWritable</MethodName>
            <MethodComment>/** 
 * Tells if this Clob can be modified.
 * @return &lt;code&gt;false&lt;/code&gt;, this Clob is read-only.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>truncate</MethodName>
            <MethodComment>/** 
 * Not supported.
 * @see InternalClob#truncate
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>newLength</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>noStateChangeLOB</MethodName>
            <MethodComment>/** 
 * Wrap real exception in a  {@link SQLException} to avoid changing the stateof the connection child by cleaning it up.
 * @param t real cause of error that we want to "ignore" with respect totransaction context cleanup
 * @return A {@link SQLException} wrapped around the real cause of the error
 */
</MethodComment>
            <ReturnType>SQLException</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Throwable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkIfValid</MethodName>
            <MethodComment>/** 
 * Makes sure the Clob has not been released. &lt;p&gt; All operations are invalid on a released Clob.
 * @throws IllegalStateException if the Clob has been released
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>