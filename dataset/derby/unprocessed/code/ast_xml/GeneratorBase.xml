<Class>
    <Id>86</Id>
    <Package>org.apache.derbyBuild</Package>
    <ClassName>GeneratorBase</ClassName>
    <SuperClass>Task</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>GeneratorBase  /** 
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>BANNER_LEVEL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>MAIN_SECTION_LEVEL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>ISSUE_DETAIL_LEVEL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>DESCRIPTION_HEADLINE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>ISSUE_ID_HEADLINE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>ANCHOR</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>BODY</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>BOLD</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>BORDER</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>COLUMN</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>COLUMN_HEADER</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>HORIZONTAL_LINE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>HTML</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>DIVISION</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>LIST</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>LIST_ELEMENT</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>PARAGRAPH</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>ROW</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>SPAN</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>TABLE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>SUM_PREVIOUS_RELEASE_ID</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>SUM_RELEASE_ID</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>SUM_EXCLUDE_RELEASE_ID</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>DEFAULT_TABLE_BORDER_WIDTH</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>docBldr</FieldName>
            <FieldType>DocumentBuilder</FieldType>
        </Field>
        <Field>
            <FieldName>summaryFileName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>summaryDoc</FieldName>
            <FieldType>Document</FieldType>
        </Field>
        <Field>
            <FieldName>summary</FieldName>
            <FieldType>ElementFacade</FieldType>
        </Field>
        <Field>
            <FieldName>bugListFileName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>bugList</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>outputFileName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>outputDoc</FieldName>
            <FieldType>Document</FieldType>
        </Field>
        <Field>
            <FieldName>outputFile</FieldName>
            <FieldType>File</FieldType>
        </Field>
        <Field>
            <FieldName>releaseID</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>previousReleaseID</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>excludeReleaseIDList</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>excludeReleaseIDList</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>branch</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>errors</FieldName>
            <FieldType>ArrayList</FieldType>
        </Field>
        <Field>
            <FieldName>errors</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>_invokedByAnt</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>GeneratorBase</MethodName>
            <MethodComment>/** 
 * Establishes state, including branch number.
 * @throws java.lang.Exception
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Properties [r=new Properties()]</InnerVar>
                <InnerVar>int [maint=Integer.parseInt(r.getProperty("maint"))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>r;load;[new FileInputStream("../ant/properties/release.properties")]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setSummaryFileName</MethodName>
            <MethodComment>/** 
 * Ant accessor to set the name of the summary file prepared by the Release Manager
 * @param summaryFileName name of xml file to use for the summary
 * @throws Exception
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>summaryFileName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>System.out;println;["Summary file (input): " + summaryFileName]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setBugListFileName</MethodName>
            <MethodComment>/** 
 * Ant mutator to set the name of the JIRA-generated list of bugs addressed by this release
 * @param bugListFileName name of an xml file from a Jira filter/query
 * @throws Exception
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>bugListFileName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setOutputFileName</MethodName>
            <MethodComment>/** 
 * Ant mutator to set the name of the generated output file
 * @param outputFileName name of file to use as pamphlet (output)
 * @throws Exception
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>outputFileName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setReleaseId</MethodName>
            <MethodComment>/** 
 * Ant mutator to set the id of the release
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>releaseID</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildDelta</MethodName>
            <MethodComment>/** 
 * Note that this release is a delta from the previous one.
 * @param parent
 * @throws java.lang.Exception
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parent</ParamName>
                    <ParamType>Element</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [deltaStatement="These notes describe the difference between Apache Derby release " + releaseID + " and the preceding release "+ previousReleaseID+ "."]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;addParagraph;[parent, deltaStatement]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>replaceVariables</MethodName>
            <MethodComment>/** 
 * Replace the known parameters with their corresponding text values.
 * @throws Exception
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;replaceTag;[outputDoc, SUM_RELEASE_ID, releaseID]</InnerMethodInvoke>
                <InnerMethodInvoke>null;replaceTag;[outputDoc, SUM_PREVIOUS_RELEASE_ID, previousReleaseID]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>printOutput</MethodName>
            <MethodComment>/** 
 * Print the generated output document to the output file.
 * @throws Exception
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Source [source=new DOMSource(outputDoc)]</InnerVar>
                <InnerVar>Result [result=new StreamResult(outputFile)]</InnerVar>
                <InnerVar>Transformer [transformer=TransformerFactory.newInstance().newTransformer()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>transformer;transform;[source, result]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>printErrors</MethodName>
            <MethodComment>/** 
 * Print accumulated errors.
 * @throws Exception
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;println;["The following other errors occurred:"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createSection</MethodName>
            <MethodComment>/** 
 * Create a section at the end of a parent element and link to it from a table of contents.
 * @param parent in document tree
 * @param sectionLevel in document
 * @param toc table of content element
 * @param sectionName for section being created
 * @param tocEntry key into table of content
 * @return resulting Element
 * @throws Exception
 */
</MethodComment>
            <ReturnType>Element</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parent</ParamName>
                    <ParamType>Element</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sectionLevel</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>toc</ParamName>
                    <ParamType>Element</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sectionName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tocEntry</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Document [doc=parent.getOwnerDocument()]</InnerVar>
                <InnerVar>Text [textNode=doc.createTextNode(tocEntry)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createSection</MethodName>
            <MethodComment>/** 
 * Create a section at the end of a parent element and link to it from a table of contents.
 * @param parent in document tree
 * @param sectionLevel in document
 * @param toc table of content element
 * @param sectionName for section being created
 * @param visibleText text to show
 * @return resulting Element
 * @throws Exception
 */
</MethodComment>
            <ReturnType>Element</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parent</ParamName>
                    <ParamType>Element</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sectionLevel</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>toc</ParamName>
                    <ParamType>Element</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sectionName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>visibleText</ParamName>
                    <ParamType>Node</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Document [doc=parent.getOwnerDocument()]</InnerVar>
                <InnerVar>Element [link=createLocalLink(doc,sectionName,visibleText)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;addListItem;[toc, link]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createHeader</MethodName>
            <MethodComment>/** 
 * Create a header at the end of the parent node. Return the block created to hold the text following this header.
 * @param parent
 * @param headerLevel
 * @param text
 * @return created header Element
 * @throws Exception
 */
</MethodComment>
            <ReturnType>Element</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parent</ParamName>
                    <ParamType>Element</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>headerLevel</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Document [doc=parent.getOwnerDocument()]</InnerVar>
                <InnerVar>Text [textNode=doc.createTextNode(text)]</InnerVar>
                <InnerVar>Element [header=doc.createElement(makeHeaderTag(headerLevel))]</InnerVar>
                <InnerVar>Element [anchor=doc.createElement(ANCHOR)]</InnerVar>
                <InnerVar>Element [block=doc.createElement(DIVISION)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>parent;appendChild;[header]</InnerMethodInvoke>
                <InnerMethodInvoke>anchor;setAttribute;[NAME, text]</InnerMethodInvoke>
                <InnerMethodInvoke>header;appendChild;[anchor]</InnerMethodInvoke>
                <InnerMethodInvoke>header;appendChild;[textNode]</InnerMethodInvoke>
                <InnerMethodInvoke>parent;appendChild;[block]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>wrapTextContentInDiv</MethodName>
            <MethodComment>/** 
 * Wraps the text content of the given node inside a div tag.
 * @param node node currently containing the text
 * @return The new div-element which has been appended to {@code node}.
 * @throws DOMException 
 */
</MethodComment>
            <ReturnType>Element</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>Element</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Document [doc=node.getOwnerDocument()]</InnerVar>
                <InnerVar>Element [div=doc.createElement(DIVISION)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>div;setTextContent;[node.getTextContent()]</InnerMethodInvoke>
                <InnerMethodInvoke>node;setTextContent;[""]</InnerMethodInvoke>
                <InnerMethodInvoke>node;appendChild;[div]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DOMException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setAttribute</MethodName>
            <MethodComment>/** 
 * Sets/overwrites the specified attribute.
 * @param node target node
 * @param name attribute name
 * @param value attribute value
 * @throws DOMException 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>Element</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Node [attr=node.getOwnerDocument().createAttribute(name)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>attr;setNodeValue;[value]</InnerMethodInvoke>
                <InnerMethodInvoke>node.getAttributes();setNamedItem;[attr]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DOMException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createTextElement</MethodName>
            <MethodComment>/** 
 * Create an html text element.
 * @param doc
 * @param tag
 * @param text
 * @return created text Element
 * @throws Exception
 */
</MethodComment>
            <ReturnType>Element</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>doc</ParamName>
                    <ParamType>Document</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tag</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Element [retval=doc.createElement(tag)]</InnerVar>
                <InnerVar>Text [textNode=doc.createTextNode(text)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>retval;appendChild;[textNode]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createLocalLink</MethodName>
            <MethodComment>/** 
 * Create a standard link to a local label.
 * @param doc
 * @param anchor
 * @param text
 * @return created link Element
 * @throws Exception
 */
</MethodComment>
            <ReturnType>Element</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>doc</ParamName>
                    <ParamType>Document</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>anchor</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Text [textNode=doc.createTextNode(text)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createLocalLink</MethodName>
            <MethodComment>/** 
 * Create a standard link to a local label.
 * @param doc
 * @param anchor
 * @param visibleText
 * @return created link Element
 * @throws Exception
 */
</MethodComment>
            <ReturnType>Element</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>doc</ParamName>
                    <ParamType>Document</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>anchor</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>visibleText</ParamName>
                    <ParamType>Node</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createLink</MethodName>
            <MethodComment>/** 
 * Create a hotlink.
 * @param doc
 * @param label
 * @param text
 * @return created link Element
 * @throws Exception
 */
</MethodComment>
            <ReturnType>Element</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>doc</ParamName>
                    <ParamType>Document</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>label</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Text [textNode=doc.createTextNode(text)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createLink</MethodName>
            <MethodComment>/** 
 * Create a hotlink.
 * @param doc
 * @param label
 * @param visibleText
 * @return created anchor Element
 * @throws Exception
 */
</MethodComment>
            <ReturnType>Element</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>doc</ParamName>
                    <ParamType>Document</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>label</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>visibleText</ParamName>
                    <ParamType>Node</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Element [hotlink=doc.createElement(ANCHOR)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>hotlink;setAttribute;["href", label]</InnerMethodInvoke>
                <InnerMethodInvoke>hotlink;appendChild;[visibleText]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createList</MethodName>
            <MethodComment>/** 
 * Insert a list at the end of the parent element.
 * @param parent
 * @return created list Element
 * @throws Exception
 */
</MethodComment>
            <ReturnType>Element</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parent</ParamName>
                    <ParamType>Element</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Document [doc=parent.getOwnerDocument()]</InnerVar>
                <InnerVar>Element [list=doc.createElement(LIST)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>parent;appendChild;[list]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addHeadlinedItem</MethodName>
            <MethodComment>/** 
 * Add an item with a bold name to the end of a list.
 * @param list
 * @param headline
 * @param text
 * @return created headline Element
 * @throws Exception
 */
</MethodComment>
            <ReturnType>Element</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>list</ParamName>
                    <ParamType>Element</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>headline</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Document [doc=list.getOwnerDocument()]</InnerVar>
                <InnerVar>Element [itemElement=doc.createElement(LIST_ELEMENT)]</InnerVar>
                <InnerVar>Element [boldText=boldText(doc,headline)]</InnerVar>
                <InnerVar>Text [textNode=doc.createTextNode(" - " + text)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>list;appendChild;[itemElement]</InnerMethodInvoke>
                <InnerMethodInvoke>itemElement;appendChild;[boldText]</InnerMethodInvoke>
                <InnerMethodInvoke>itemElement;appendChild;[textNode]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>boldText</MethodName>
            <MethodComment>/** 
 * Make some bold text.
 * @param doc
 * @param text
 * @return created bold Element
 * @throws Exception
 */
</MethodComment>
            <ReturnType>Element</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>doc</ParamName>
                    <ParamType>Document</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Element [bold=createTextElement(doc,BOLD,text)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addListItem</MethodName>
            <MethodComment>/** 
 * Add an item to the end of a list.
 * @param list
 * @param item
 * @return created item Element
 * @throws Exception
 */
</MethodComment>
            <ReturnType>Element</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>list</ParamName>
                    <ParamType>Element</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>item</ParamName>
                    <ParamType>Node</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Document [doc=list.getOwnerDocument()]</InnerVar>
                <InnerVar>Element [itemElement=doc.createElement(LIST_ELEMENT)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>list;appendChild;[itemElement]</InnerMethodInvoke>
                <InnerMethodInvoke>itemElement;appendChild;[item]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSection</MethodName>
            <MethodComment>/** 
 * Retrieve the indented block inside a section
 * @param doc
 * @param sectionLevel
 * @param sectionName
 * @return indented block Element
 * @throws Exception
 */
</MethodComment>
            <ReturnType>Element</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>doc</ParamName>
                    <ParamType>Document</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sectionLevel</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sectionName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [headerTag=makeHeaderTag(sectionLevel)]</InnerVar>
                <InnerVar>Element [root=doc.getDocumentElement()]</InnerVar>
                <InnerVar>NodeList [sectionList=root.getElementsByTagName(headerTag)]</InnerVar>
                <InnerVar>int [count=sectionList.getLength()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeHeaderTag</MethodName>
            <MethodComment>/** 
 * Make the tag for a header, given its level
 * @param headerLevel
 * @return header tag at specified level
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>headerLevel</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addParagraph</MethodName>
            <MethodComment>/** 
 * Add a paragraph to the end of a parent element.
 * @param parent
 * @param text
 * @return created paragraph Element
 * @throws Exception
 */
</MethodComment>
            <ReturnType>Element</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parent</ParamName>
                    <ParamType>Element</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Document [doc=parent.getOwnerDocument()]</InnerVar>
                <InnerVar>Text [textNode=doc.createTextNode(text)]</InnerVar>
                <InnerVar>Element [paragraph=doc.createElement(PARAGRAPH)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>parent;appendChild;[paragraph]</InnerMethodInvoke>
                <InnerMethodInvoke>paragraph;appendChild;[textNode]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createTable</MethodName>
            <MethodComment>/** 
 * Insert a table at the end of the parent element.
 * @param parent
 * @param borderWidth
 * @param columnHeadings
 * @return created table Element
 * @throws Exception
 */
</MethodComment>
            <ReturnType>Element</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parent</ParamName>
                    <ParamType>Element</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>borderWidth</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columnHeadings</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Document [doc=parent.getOwnerDocument()]</InnerVar>
                <InnerVar>Element [table=doc.createElement(TABLE)]</InnerVar>
                <InnerVar>Element [headingRow=insertRow(table)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>parent;appendChild;[table]</InnerMethodInvoke>
                <InnerMethodInvoke>table;setAttribute;[BORDER, Integer.toString(borderWidth)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fixWidthOfFirstColumn</MethodName>
            <MethodComment>/** 
 * Sets the width of the first column in the given table.
 * @param table target table
 * @throws DOMException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>table</ParamName>
                    <ParamType>Element</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>NodeList [headers=table.getElementsByTagName(COLUMN_HEADER)]</InnerVar>
                <InnerVar>Element [th=(Element)headers.item(0)]</InnerVar>
                <InnerVar>Element [div=wrapTextContentInDiv(th)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setAttribute;[div, "style", "width:110px;"]</InnerMethodInvoke>
                <InnerMethodInvoke>th;appendChild;[div]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DOMException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>insertRow</MethodName>
            <MethodComment>/** 
 * Insert a row at the end of a table
 * @param table
 * @return created row Element
 * @throws Exception
 */
</MethodComment>
            <ReturnType>Element</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>table</ParamName>
                    <ParamType>Element</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>insertColumn</MethodName>
            <MethodComment>/** 
 * Insert a column at the end of a row
 * @param row
 * @return created column Element
 * @throws Exception
 */
</MethodComment>
            <ReturnType>Element</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>Element</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>insertColumnHeader</MethodName>
            <MethodComment>/** 
 * Insert a header column at the end of the row.
 * @param row
 * @return Created column Element
 * @throws DOMException
 */
</MethodComment>
            <ReturnType>Element</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>Element</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DOMException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>insertTableElement</MethodName>
            <MethodComment>/** 
 * Inserts the specified element to the parent element.
 * @param parent enclosing element, typically a table or a row
 * @param type type of the new element to be inserted, typically acolumn value or a row
 * @return The newly inserted element.
 * @throws DOMException if modifying the DOM fails
 */
</MethodComment>
            <ReturnType>Element</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parent</ParamName>
                    <ParamType>Element</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Document [doc=parent.getOwnerDocument()]</InnerVar>
                <InnerVar>Element [newElement=doc.createElement(type)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>parent;appendChild;[newElement]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DOMException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>insertLine</MethodName>
            <MethodComment>/** 
 * Insert a horizontal line at the end of the parent element.
 * @param parent
 * @return created line Element
 * @throws Exception
 */
</MethodComment>
            <ReturnType>Element</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parent</ParamName>
                    <ParamType>Element</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Document [doc=parent.getOwnerDocument()]</InnerVar>
                <InnerVar>Element [line=doc.createElement(HORIZONTAL_LINE)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>parent;appendChild;[line]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFirstChild</MethodName>
            <MethodComment>/** 
 * Search the tree rooted at &lt;code&gt;node&lt;/code&gt; for nodes tagged with &lt;code&gt;childName&lt;/code&gt;. Return the first such node, or throws an exception if none is found.
 * @param node the node to search
 * @param childName name of child node to get
 * @return first child element
 * @throws Exception
 */
</MethodComment>
            <ReturnType>Element</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>Element</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>childName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Element [retval=getOptionalChild(node,childName)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNextChild</MethodName>
            <MethodComment>/** 
 * Search the tree rooted at &lt;code&gt;node&lt;/code&gt; for nodes tagged with &lt;code&gt;childName&lt;/code&gt;. Return the index'th such node.
 * @param node parent
 * @param childName tag name of qualifying child nodes
 * @param index of child node to return
 * @return selected child node
 * @throws java.lang.Exception
 */
</MethodComment>
            <ReturnType>Element</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>Element</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>childName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>index</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Element [retval=(Element)node.getElementsByTagName(childName).item(index)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOptionalChild</MethodName>
            <MethodComment>/** 
 * Search the tree rooted at &lt;code&gt;node&lt;/code&gt; for nodes tagged with &lt;code&gt;childName&lt;/code&gt;. Return the first such node, or null if tag is not found.
 * @param node root of subtree
 * @param childName type of child (tag) to search for
 * @return corresponding child if it exitsts, null otherwise.
 * @throws java.lang.Exception
 */
</MethodComment>
            <ReturnType>Element</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>Element</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>childName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>squeezeText</MethodName>
            <MethodComment>/** 
 * Squeeze the text out of an Element.
 * @param node with text child
 * @return String representation of node's first child
 * @throws java.lang.Exception
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>Element</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cloneChildren</MethodName>
            <MethodComment>/** 
 * Clone all of the children of a source node and add them as children of a target node.
 * @param source
 * @param target
 * @throws Exception
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>source</ParamName>
                    <ParamType>Node</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>target</ParamName>
                    <ParamType>Node</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Document [targetDoc=target.getOwnerDocument()]</InnerVar>
                <InnerVar>NodeList [sourceChildren=source.getChildNodes()]</InnerVar>
                <InnerVar>int [count=sourceChildren.getLength()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>replaceTag</MethodName>
            <MethodComment>/** 
 * Replace all instances of the tag with the indicated text.
 * @param doc
 * @param tag
 * @param replacementText
 * @throws Exception
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>doc</ParamName>
                    <ParamType>Document</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tag</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>replacementText</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>NodeList [sourceChildren=doc.getElementsByTagName(tag)]</InnerVar>
                <InnerVar>int [count=sourceChildren.getLength()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>formatError</MethodName>
            <MethodComment>/** 
 * Format an error for later reporting.
 * @param text description
 * @param t execption that occured
 * @return formatted error with stack trace
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Throwable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>stringifyStackTrace</MethodName>
            <MethodComment>/** 
 * Print a stack trace as a string.
 * @param t exception to dump stack for
 * @return String containing the stacl trace for the exception
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Throwable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringWriter [sw=new StringWriter()]</InnerVar>
                <InnerVar>PrintWriter [pw=new PrintWriter(sw,true)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t;printStackTrace;[pw]</InnerMethodInvoke>
                <InnerMethodInvoke>pw;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>sw;flush;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>println</MethodName>
            <MethodComment>/** 
 * Format a line of text.
 * @param text the line to format
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>