<Class>
    <Id>228</Id>
    <Package>org.apache.derby.iapi.services.io</Package>
    <ClassName>FormatIdOutputStream</ClassName>
    <SuperClass>DataOutputStream</SuperClass>
    <SuperInterfaceList>
        <SuperInterface>ObjectOutput</SuperInterface>
        <SuperInterface>ErrorInfo</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>FormatIdOutputStream  /** 
 * A stream for serializing objects with format id tags. &lt;P&gt;An ObjectOutput (henceforth 'out') preceeds objects it writes with a format id. The companion FormatIdInputStream (henceforth 'in') uses these format ids in parsing the stored data. The stream can be thought of as containing a sequence of (formatId,object) pairs interspersed with other data. The assumption is that out.writeObject() produces these pairs and in.readObject() uses the format ids to construct objects from the pairs that out.writeObject produced. The description below describes each supported pair and how in.readObject() processes it. &lt;OL&gt; &lt;LI&gt; (NULL_FORMAT_ID, nothing) in.readObject() returns null. &lt;LI&gt; (SRING_FORMAT_ID, UTF8 encoded string)in.readObject reads and returns this string. &lt;LI&gt; (SERIALIZABLE_FORMAT_ID,serialized object) in.readObject() reads the object using java serialization and returns it. &lt;LI&gt; (A format id for a Storable, isNull flag and object if isNull == false) (see note 1) in.readObject() reads the boolean isNull flag. If is null is true, in.readObject() returns a Storable object of the correct class which is null. If ifNull is false, in.readObject() restores the object using its readExternal() method. &lt;LI&gt; (A format id for a Formatable which is not Storable, the stored object) (see note 1) in.readObject restores the object using its readExternal() method. &lt;/OL&gt; &lt;P&gt;Note 1: The FormatIdInputStream uses Monitor.newInstanceFromIdentifier(format id) to get the class. &lt;P&gt;Note 2: An object may support more than one of the following interfaces Storable, Formatable, Serializable. In this case out.writeObject use the first of these interfaces which the object supports (based on the order listed here) to determine how to write the object.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>FormatIdOutputStream</MethodName>
            <MethodComment>/** 
 * Constructor for a FormatIdOutputStream
 * @param out output goes here.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>OutputStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeObject</MethodName>
            <MethodComment>/** 
 * Write a format id for the object provied followed by the object itself to this FormatIdOutputStream.
 * @param ref a reference to the object.
 * @exception java.io.IOException the exception.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ref</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>OutputStream [oldOut=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setOutput</MethodName>
            <MethodComment>/** 
 * Set the OutputStream for this FormatIdOutputStream to the stream provided. It is the responsibility of the caller to flush or close (as required) the previous stream this class was attached to.
 * @param out The new output stream.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>OutputStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getErrorInfo</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNestedException</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Exception</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>