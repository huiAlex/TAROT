<Class>
    <Id>700</Id>
    <Package>org.apache.derby.impl.store.access.sort</Package>
    <ClassName>UniqueWithDuplicateNullsMergeSort</ClassName>
    <SuperClass>MergeSort</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>UniqueWithDuplicateNullsMergeSort  /** 
 * This class extends and customizes MergeSort to support unique indexes with duplicate nulls. It overrides compare method to consider keypart - 1 parts of the keys while comparing (only for non null keys).
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>compare</MethodName>
            <MethodComment>/** 
 * Compares two keys.  If all the parts of the keys are not null then the leading  (keys.length - 1) parts are compared, else if a part of the key is null then all parts of the key are compared (keys.length). This behavior is useful for implementing unique constraints where multiple null values are allowed, but uniqueness must still be  guaranteed for keys with no null values.   In this case the leading parts of the key are the user key columns, while the last column is a system provided column which is guaranteed unique per base row.
 * @param r1 keys 
 * @param r2 keys
 * @return 0 for duplicates non zero for distinct keys 
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>r1</ParamName>
                    <ParamType>DataValueDescriptor[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>r2</ParamName>
                    <ParamType>DataValueDescriptor[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [colsToCompare=columnOrdering.length]</InnerVar>
                <InnerVar>int [r]</InnerVar>
                <InnerVar>boolean [nonull=true]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>