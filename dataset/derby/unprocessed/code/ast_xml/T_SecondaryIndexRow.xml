<Class>
    <Id>1080</Id>
    <Package>org.apache.derbyTesting.unitTests.store</Package>
    <ClassName>T_SecondaryIndexRow</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>T_SecondaryIndexRow  /** 
 * This class implements a row which will be stored in a secondary index on  a heap table.   &lt;p&gt; This class creates a new DataValueDescriptor array which will be the row used  to insert into the secondary index.  The fields of this object array are made  up of references to DataValueDescriptors provided by the caller: the  DataValueDescriptors in the template and a RowLocation. The interface is designed to support the standard access method interface where callers provide a single template and then read rows into that template over and over.  This class keeps a reference to the objects in the template and the rowlocation,  so the state of this object changes whenever the caller changes the template. The caller provides a template which will contain a heap row, and a RowLocation which provides the location of the row within the heap table. &lt;p&gt; So for example to create an index from a base table by reading the base table and inserting each row one at a time into the secondary index you would  do something like: DataValueDescriptors[] template = get_template_for_base_table(); RowLocation            rowloc   = ScanController_var.newRowLocationTemplate(); T_SecondaryIndexRow    indrow   = new T_SecondaryIndexRow(); indrow.init(template, rowloc, numcols_in_index); while (ScanController_variable.next()) {  fetch(template) fetchLocation(rowloc) ConglomerateController_on_btree.insert(indrow.getRow()); }
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>row</FieldName>
            <FieldType>DataValueDescriptor[]</FieldType>
        </Field>
        <Field>
            <FieldName>init_rowlocation</FieldName>
            <FieldType>RowLocation</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>T_SecondaryIndexRow</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>init</MethodName>
            <MethodComment>/** 
 * Initialize the class. &lt;p&gt; Save away pointers to the base table template row, and the rowlocation class.  Build default map of base columns to key columns, this map can be changed with setMap(). &lt;p&gt;
 * @param template    The template for the base table row.
 * @param rowlocation The template for the row location.
 * @param numkeys     The total number of columns in the secondary indexincluding the rowlocation column.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>template</ParamName>
                    <ParamType>DataValueDescriptor[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rowlocation</ParamName>
                    <ParamType>RowLocation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>numkeys</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>System;arraycopy;[template, 0, row, 0, template.length]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRow</MethodName>
            <MethodComment>/** 
 * Return the secondary index row. &lt;p&gt; Return the DataValueDescriptor array that represents the branch row,  for use in raw store calls to fetch, insert, and update. &lt;p&gt;
 * @return The branch row object array.
 */
</MethodComment>
            <ReturnType>DataValueDescriptor[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [s="{ "]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>