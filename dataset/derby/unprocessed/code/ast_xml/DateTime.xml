<Class>
    <Id>1855</Id>
    <Package>org.apache.derby.client.am</Package>
    <ClassName>DateTime</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>DateTime  /** 
 * High performance converters from date/time byte encodings to JDBC Date, Time and Timestamp objects. &lt;p/&gt; Using this class for direct date/time conversions from bytes offers superior performance over the alternative method of first constructing a Java String from the encoded bytes, and then using  {@link java.sql.Date#valueOf java.sql.Date.valueOf()},  {@link java.sql.Time#valueOf java.sql.Time.valueOf()} or {@link java.sql.Timestamp#valueOf java.sql.Timestamp.valueOf()}. &lt;p/&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>dateRepresentationLength</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>timeRepresentationLength</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>timestampRepresentationLength</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>DateTime</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>dateBytesToDate</MethodName>
            <MethodComment>/** 
 * Expected character representation is DERBY string representation of a date,  which is in JIS format: &lt;code&gt; yyyy-mm-dd &lt;/code&gt;
 * @param buffer    
 * @param offset    
 * @param recyclableCal
 * @param encoding            encoding of buffer data
 * @return  Date translated from  buffer with specified encoding
 */
</MethodComment>
            <ReturnType>Date</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>buffer</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>offset</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>recyclableCal</ParamName>
                    <ParamType>Calendar</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>encoding</ParamName>
                    <ParamType>Charset</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [year, month, day]</InnerVar>
                <InnerVar>String [date=new String(buffer,offset,DateTime.dateRepresentationLength,encoding)]</InnerVar>
                <InnerVar>int [yearIndx, monthIndx, dayIndx]</InnerVar>
                <InnerVar>int [zeroBase=((int)'0')]</InnerVar>
                <InnerVar>Calendar [cal=getCleanCalendar(recyclableCal)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cal;set;[year, month, day]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>timeBytesToTime</MethodName>
            <MethodComment>/** 
 * Expected character representation is DERBY string representation of time, which is in the format: &lt;code&gt; hh.mm.ss &lt;/code&gt;
 * @param buffer
 * @param offset
 * @param recyclableCal
 * @param encoding           encoding of buffer
 * @return  Time translated from buffer with specified encoding
 */
</MethodComment>
            <ReturnType>Time</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>buffer</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>offset</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>recyclableCal</ParamName>
                    <ParamType>Calendar</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>encoding</ParamName>
                    <ParamType>Charset</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [hour, minute, second]</InnerVar>
                <InnerVar>String [time=new String(buffer,offset,DateTime.timeRepresentationLength,encoding)]</InnerVar>
                <InnerVar>int [zeroBase=((int)'0')]</InnerVar>
                <InnerVar>Calendar [cal=getCleanCalendar(recyclableCal)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cal;set;[1970, Calendar.JANUARY, 1, hour, minute, second]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>timestampBytesToTimestamp</MethodName>
            <MethodComment>/** 
 * See getTimestampLength() for an explanation of how timestamps are formatted.
 * @param buffer
 * @param offset
 * @param recyclableCal
 * @param encoding                encoding of buffer
 * @param supportsTimestampNanoseconds true if the server supports nanoseconds in timestamps
 * @return TimeStamp translated from buffer with specified encoding
 */
</MethodComment>
            <ReturnType>Timestamp</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>buffer</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>offset</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>recyclableCal</ParamName>
                    <ParamType>Calendar</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>encoding</ParamName>
                    <ParamType>Charset</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>supportsTimestampNanoseconds</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [year, month, day, hour, minute, second, fraction]</InnerVar>
                <InnerVar>String [timestamp=new String(buffer,offset,getTimestampLength(supportsTimestampNanoseconds),encoding)]</InnerVar>
                <InnerVar>Calendar [cal=getCleanCalendar(recyclableCal)]</InnerVar>
                <InnerVar>int [nanos=parseTimestampString(timestamp,cal,supportsTimestampNanoseconds)]</InnerVar>
                <InnerVar>Timestamp [ts=new Timestamp(cal.getTimeInMillis())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ts;setNanos;[nanos]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseTimestampString</MethodName>
            <MethodComment>/** 
 * Parse a String of the form &lt;code&gt;yyyy-mm-dd-hh.mm.ss.ffffff[fff]&lt;/code&gt; and store the various fields into the received Calendar object.
 * @param timestamp Timestamp value to parse, as a String.
 * @param cal Calendar into which to store the parsed fields.  Should not be null.
 * @param supportsTimestampNanoseconds true if the server supports nanoseconds in timestamps
 * @return The nanoseconds field as parsed from the timestamp string.This cannot be set in the Calendar object but we still want to preserve the value, in case the caller needs it (for example, to create a java.sql.Timestamp with nanosecond precision).
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>timestamp</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cal</ParamName>
                    <ParamType>Calendar</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>supportsTimestampNanoseconds</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [zeroBase=((int)'0')]</InnerVar>
                <InnerVar>int [nanos=100000000 * (((int)timestamp.charAt(20)) - zeroBase) + 10000000 * (((int)timestamp.charAt(21)) - zeroBase) + 1000000 * (((int)timestamp.charAt(22)) - zeroBase) + 100000 * (((int)timestamp.charAt(23)) - zeroBase) + 10000 * (((int)timestamp.charAt(24)) - zeroBase) + 1000 * (((int)timestamp.charAt(25)) - zeroBase)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cal;set;[Calendar.YEAR, 1000 * (((int)timestamp.charAt(0)) - zeroBase) + 100 * (((int)timestamp.charAt(1)) - zeroBase) + 10 * (((int)timestamp.charAt(2)) - zeroBase) + (((int)timestamp.charAt(3)) - zeroBase)]</InnerMethodInvoke>
                <InnerMethodInvoke>cal;set;[Calendar.MONTH, 10 * (((int)timestamp.charAt(5)) - zeroBase) + (((int)timestamp.charAt(6)) - zeroBase) - 1]</InnerMethodInvoke>
                <InnerMethodInvoke>cal;set;[Calendar.DAY_OF_MONTH, 10 * (((int)timestamp.charAt(8)) - zeroBase) + (((int)timestamp.charAt(9)) - zeroBase)]</InnerMethodInvoke>
                <InnerMethodInvoke>cal;set;[Calendar.HOUR, 10 * (((int)timestamp.charAt(11)) - zeroBase) + (((int)timestamp.charAt(12)) - zeroBase)]</InnerMethodInvoke>
                <InnerMethodInvoke>cal;set;[Calendar.MINUTE, 10 * (((int)timestamp.charAt(14)) - zeroBase) + (((int)timestamp.charAt(15)) - zeroBase)]</InnerMethodInvoke>
                <InnerMethodInvoke>cal;set;[Calendar.SECOND, 10 * (((int)timestamp.charAt(17)) - zeroBase) + (((int)timestamp.charAt(18)) - zeroBase)]</InnerMethodInvoke>
                <InnerMethodInvoke>cal;set;[Calendar.MILLISECOND, nanos / 1000000]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>dateToDateBytes</MethodName>
            <MethodComment>/** 
 * Date is converted to a char representation in JDBC date format: &lt;code&gt;yyyy-mm-dd&lt;/code&gt; date format and then converted to bytes using UTF8 encoding
 * @param buffer  bytes in UTF8 encoding of the date
 * @param offset  write into the buffer from this offset 
 * @param date    date value
 * @return DateTime.dateRepresentationLength. This is the fixed length in bytes taken to represent the date value
 * @throws SqlException
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>buffer</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>offset</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>date</ParamName>
                    <ParamType>DateTimeValue</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [year=date.getYear()]</InnerVar>
                <InnerVar>int [month=date.getMonth() + 1]</InnerVar>
                <InnerVar>int [day=date.getDayOfMonth()]</InnerVar>
                <InnerVar>char[] [dateChars=new char[DateTime.dateRepresentationLength]]</InnerVar>
                <InnerVar>int [zeroBase=(int)'0']</InnerVar>
                <InnerVar>byte[] [dateBytes=(new String(dateChars)).getBytes(Typdef.UTF8ENCODING)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>System;arraycopy;[dateBytes, 0, buffer, offset, DateTime.dateRepresentationLength]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>timeToTimeBytes</MethodName>
            <MethodComment>/** 
 * java.sql.Time is converted to character representation which is in JDBC time escape format: &lt;code&gt;hh:mm:ss&lt;/code&gt;, which is the same as JIS time format in DERBY string  representation of a time.  The char representation is converted to bytes using UTF8  encoding.
 * @param buffer  bytes in UTF8 encoding of the time
 * @param offset  write into the buffer from this offset 
 * @param time  java.sql.Time value
 * @return DateTime.timeRepresentationLength. This is the fixed length in bytes taken to represent the time value
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>buffer</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>offset</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>time</ParamName>
                    <ParamType>DateTimeValue</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [hour=time.getHours()]</InnerVar>
                <InnerVar>int [minute=time.getMinutes()]</InnerVar>
                <InnerVar>int [second=time.getSeconds()]</InnerVar>
                <InnerVar>char[] [timeChars=new char[DateTime.timeRepresentationLength]]</InnerVar>
                <InnerVar>int [zeroBase=(int)'0']</InnerVar>
                <InnerVar>byte[] [timeBytes=(new String(timeChars)).getBytes(Typdef.UTF8ENCODING)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>System;arraycopy;[timeBytes, 0, buffer, offset, DateTime.timeRepresentationLength]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>timestampToTimestampBytes</MethodName>
            <MethodComment>/** 
 * See getTimestampLength() for an explanation of how timestamps are formatted.
 * @param buffer  bytes in UTF8 encoding of the timestamp
 * @param offset  write into the buffer from this offset 
 * @param timestamp  timestamp value
 * @param supportsTimestampNanoseconds true if the server supports nanoseconds in timestamps
 * @return DateTime.timestampRepresentationLength. This is the fixed  length in bytes, taken to represent the timestamp value
 * @throws SqlException
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>buffer</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>offset</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>timestamp</ParamName>
                    <ParamType>DateTimeValue</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>supportsTimestampNanoseconds</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [year=timestamp.getYear()]</InnerVar>
                <InnerVar>int [month=timestamp.getMonth() + 1]</InnerVar>
                <InnerVar>int [day=timestamp.getDayOfMonth()]</InnerVar>
                <InnerVar>int [hour=timestamp.getHours()]</InnerVar>
                <InnerVar>int [minute=timestamp.getMinutes()]</InnerVar>
                <InnerVar>int [second=timestamp.getSeconds()]</InnerVar>
                <InnerVar>int [microsecond=timestamp.getNanos() / 1000]</InnerVar>
                <InnerVar>int [arrayLength=getTimestampLength(supportsTimestampNanoseconds)]</InnerVar>
                <InnerVar>char[] [timestampChars=new char[arrayLength]]</InnerVar>
                <InnerVar>int [zeroBase=(int)'0']</InnerVar>
                <InnerVar>String [newtimestampString=new String(timestampChars)]</InnerVar>
                <InnerVar>byte[] [timestampBytes=newtimestampString.getBytes(Typdef.UTF8ENCODING)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>System;arraycopy;[timestampBytes, 0, buffer, offset, arrayLength]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>dateBytesToTimestamp</MethodName>
            <MethodComment>/** 
 * Expected character representation is DERBY string representation of a date which is in JIS format: &lt;code&gt; yyyy-mm-dd &lt;/code&gt;
 * @param buffer
 * @param offset
 * @param recyclableCal
 * @param encoding                encoding of buffer
 * @return Timestamp translated from buffer with specified encoding
 */
</MethodComment>
            <ReturnType>Timestamp</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>buffer</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>offset</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>recyclableCal</ParamName>
                    <ParamType>Calendar</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>encoding</ParamName>
                    <ParamType>Charset</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [year, month, day]</InnerVar>
                <InnerVar>String [date=new String(buffer,offset,DateTime.dateRepresentationLength,encoding)]</InnerVar>
                <InnerVar>int [yearIndx, monthIndx, dayIndx]</InnerVar>
                <InnerVar>int [zeroBase=((int)'0')]</InnerVar>
                <InnerVar>Calendar [cal=getCleanCalendar(recyclableCal)]</InnerVar>
                <InnerVar>Timestamp [ts=new Timestamp(cal.getTimeInMillis())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cal;set;[year, month, day, 0, 0, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>ts;setNanos;[0]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>timeBytesToTimestamp</MethodName>
            <MethodComment>/** 
 * Expected character representation is DERBY string representation of time which is in the format: &lt;code&gt; hh.mm.ss &lt;/code&gt;
 * @param buffer
 * @param offset
 * @param recyclableCal
 * @param encoding                 encoding of buffer
 * @return Timestamp translated from buffer with specified encoding 
 */
</MethodComment>
            <ReturnType>Timestamp</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>buffer</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>offset</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>recyclableCal</ParamName>
                    <ParamType>Calendar</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>encoding</ParamName>
                    <ParamType>Charset</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [hour, minute, second]</InnerVar>
                <InnerVar>String [time=new String(buffer,offset,DateTime.timeRepresentationLength,encoding)]</InnerVar>
                <InnerVar>int [zeroBase=((int)'0')]</InnerVar>
                <InnerVar>Calendar [cal=getCleanCalendar(recyclableCal)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cal;setTime;[new java.util.Date()]</InnerMethodInvoke>
                <InnerMethodInvoke>cal;set;[Calendar.HOUR_OF_DAY, hour]</InnerMethodInvoke>
                <InnerMethodInvoke>cal;set;[Calendar.MINUTE, minute]</InnerMethodInvoke>
                <InnerMethodInvoke>cal;set;[Calendar.SECOND, second]</InnerMethodInvoke>
                <InnerMethodInvoke>cal;set;[Calendar.MILLISECOND, 0]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>timestampBytesToDate</MethodName>
            <MethodComment>/** 
 * See getTimestampLength() for an explanation of how timestamps are formatted.
 * @param buffer
 * @param offset
 * @param recyclableCal
 * @param encoding             encoding of buffer
 * @return Date translated from buffer with specified encoding
 */
</MethodComment>
            <ReturnType>Date</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>buffer</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>offset</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>recyclableCal</ParamName>
                    <ParamType>Calendar</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>encoding</ParamName>
                    <ParamType>Charset</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [year, month, day]</InnerVar>
                <InnerVar>String [timestamp=new String(buffer,offset,DateTime.timestampRepresentationLength,encoding)]</InnerVar>
                <InnerVar>int [zeroBase=((int)'0')]</InnerVar>
                <InnerVar>Calendar [cal=getCleanCalendar(recyclableCal)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cal;set;[year, month, day]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>timestampBytesToTime</MethodName>
            <MethodComment>/** 
 * See getTimestampLength() for an explanation of how timestamps are formatted.
 * @param buffer
 * @param offset
 * @param recyclableCal
 * @param encoding            encoding of buffer
 * @return  Time translated from buffer with specified Encoding
 */
</MethodComment>
            <ReturnType>Time</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>buffer</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>offset</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>recyclableCal</ParamName>
                    <ParamType>Calendar</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>encoding</ParamName>
                    <ParamType>Charset</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [timestamp=new String(buffer,offset,DateTime.timestampRepresentationLength,encoding)]</InnerVar>
                <InnerVar>Calendar [cal=getCleanCalendar(recyclableCal)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;parseTimestampString;[timestamp, cal, false]</InnerMethodInvoke>
                <InnerMethodInvoke>cal;set;[1970, Calendar.JANUARY, 1]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCleanCalendar</MethodName>
            <MethodComment>/** 
 * Return a clean (i.e. all values cleared out) Calendar object that can be used for creating Time, Timestamp, and Date objects. If the received Calendar object is non-null, then just clear that and return it.
 * @param recyclableCal Calendar object to use if non-null.
 */
</MethodComment>
            <ReturnType>Calendar</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>recyclableCal</ParamName>
                    <ParamType>Calendar</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Calendar [result=new GregorianCalendar()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>result;clear;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTimestampLength</MethodName>
            <MethodComment>/** 
 * Return the length of a timestamp depending on whether timestamps should have full nanosecond precision or be truncated to just microseconds. java.sql.Timestamp is converted to a character representation which is a DERBY string  representation of a timestamp converted to bytes using UTF8 encoding. For Derby 10.6 and above, this is &lt;code&gt;yyyy-mm-dd-hh.mm.ss.fffffffff&lt;/code&gt;. For Derby 10.5 and below, this is &lt;code&gt;yyyy-mm-dd-hh.mm.ss.ffffff&lt;/code&gt;. See DERBY-2602. and then converted to bytes using UTF8 encoding
 * @param supportsTimestampNanoseconds true if the connection supports nanoseconds in timestamps
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>supportsTimestampNanoseconds</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>