<Class>
    <Id>2035</Id>
    <Package>org.apache.derby.impl.store.access.conglomerate</Package>
    <ClassName>GenericCostController</ClassName>
    <SuperClass>GenericController</SuperClass>
    <SuperInterfaceList>
        <SuperInterface>StoreCostController</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>GenericCostController  /** 
 * A Generic class which implements the basic functionality needed for a cost  controller.  
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getFetchFromFullKeyCost</MethodName>
            <MethodComment>/** 
 * Return the cost of exact key lookup. &lt;p&gt; Return the estimated cost of calling ScanController.fetch() on the current conglomerate, with start and stop positions set such that an exact match is expected. &lt;p&gt; This call returns the cost of a fetchNext() performed on a scan which has been positioned with a start position which specifies exact match on all keys in the row. &lt;p&gt; Example: &lt;p&gt; In the case of a btree this call can be used to determine the cost of doing an exact probe into btree, giving all key columns.  This cost can be used if the client knows it will be doing an exact key probe but does not have the key's at optimize time to use to make a call to getScanCost() &lt;p&gt;
 * @param validColumns    A description of which columns to return fromrow on the page into "templateRow."  templateRow, and validColumns work together to describe the row to be returned by the fetch -  see RowUtil for description of how these three  parameters work together to describe a fetched  "row".
 * @param access_type     Describe the type of access the query will beperforming to the ScanController.   STORECOST_CLUSTERED - The location of one scan is likely clustered "close" to the previous  scan.  For instance if the query plan were to used repeated "reopenScan()'s" to probe for the next key in an index, then this flag should be be specified.  If this flag is not  set then each scan will be costed independant of any other predicted scan access.
 * @return The cost of the fetch.
 * @exception StandardException  Standard exception policy.
 * @see org.apache.derby.iapi.store.access.RowUtil
 */
</MethodComment>
            <ReturnType>double</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>validColumns</ParamName>
                    <ParamType>FormatableBitSet</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>access_type</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>