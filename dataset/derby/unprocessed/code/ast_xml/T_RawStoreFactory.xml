<Class>
    <Id>1949</Id>
    <Package>org.apache.derbyTesting.unitTests.store</Package>
    <ClassName>T_RawStoreFactory</ClassName>
    <SuperClass>T_MultiThreadedIterations</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>T_RawStoreFactory  /** 
 * A protocol unit test for the RawStore interface.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>REC_001</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>REC_002</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>REC_003</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>REC_004</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>REC_005</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>REC_006</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>REC_007</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>REC_008</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>REC_009</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>REC_010</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>REC_011</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>REC_012</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>REC_013</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>REC_014</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>REC_015</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>REC_016</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>REC_017</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>REC_018</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>REC_UNDO</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>REC_NULL</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>BS_COL_0</FieldName>
            <FieldType>FormatableBitSet</FieldType>
        </Field>
        <Field>
            <FieldName>SP1</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>SP2</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>TEST_ROLLBACK_OFF</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>testRollbackProperty</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>testRollback</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>factory</FieldName>
            <FieldType>RawStoreFactory</FieldType>
        </Field>
        <Field>
            <FieldName>lf</FieldName>
            <FieldType>LockFactory</FieldType>
        </Field>
        <Field>
            <FieldName>contextService</FieldName>
            <FieldType>ContextService</FieldType>
        </Field>
        <Field>
            <FieldName>uuidfactory</FieldName>
            <FieldType>UUIDFactory</FieldType>
        </Field>
        <Field>
            <FieldName>t_util</FieldName>
            <FieldType>T_Util</FieldType>
        </Field>
        <Field>
            <FieldName>openMode</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>logDataForPurges</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>T_RawStoreFactory</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>BS_COL_0;set;[0]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>boot</MethodName>
            <MethodComment>/** 
 * @exception StandardException cannot startup the context service
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>create</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>startParams</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getModuleToTestProtocolName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setupTest</MethodName>
            <MethodComment>/** 
 * Set up test
 * @exception T_Fail Unexpected behaviour from the API
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [rollbackOff=PropertyUtil.getSystemProperty(TEST_ROLLBACK_OFF)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>startParams;put;[Property.NO_AUTO_BOOT, Boolean.TRUE.toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>startParams;put;[Property.DELETE_ON_CREATE, Boolean.TRUE.toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;REPORT;["testRollback=" + testRollback]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTestService</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>joinSetupTest</MethodName>
            <MethodComment>/** 
 * T_MultiThreadedIteration method
 * @exception T_Fail Unexpected behaviour from the API
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>T_Fail;T_ASSERT;[factory != null, "raw store factory not setup "]</InnerMethodInvoke>
                <InnerMethodInvoke>T_Fail;T_ASSERT;[lf != null, "Lock factory not setup "]</InnerMethodInvoke>
                <InnerMethodInvoke>T_Fail;T_ASSERT;[contextService != null, "Context service not setup "]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newTestObject</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>T_MultiThreadedIterations</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>runTestSet</MethodName>
            <MethodComment>/** 
 * run the test
 * @exception T_Fail Unexpected behaviour from the API
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>ContextManager [cm1=contextService.newContextManager()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>contextService;setCurrentContextManager;[cm1]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>runEachTest</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t_util;setOpenMode;[openMode]</InnerMethodInvoke>
                <InnerMethodInvoke>null;T000;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;T001;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;T002;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;T003;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;T004;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;T005;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;T006;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;T007;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;T008;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;T009;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;T010;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;T011;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;T012;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;C010;[0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;C011;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;C012;[1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;C014;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;C200;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;C201;[0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;C201;[1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P001;[0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P002;[0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P005;[0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P006;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P007;[0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P008;[0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P009;[0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P011;[0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P012;[0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P013;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P014;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P015;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P016;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P017;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P018;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P019;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P020;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P021;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P022;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P023;[0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P024;[0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P030;[0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P031;[0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P032;[0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P033;[0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P034;[0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P035;[0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P036;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P037;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P038;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P039;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P040;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P041;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P042;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P043;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P050;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P051;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P053;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P054;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P055;[0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P056;[0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P061;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P071;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P701;[0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P702;[0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P703;[0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P704;[0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P705;[0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P706;[0, false]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P706;[0, true]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P707;[0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P708;[0, false]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P708;[0, true]</InnerMethodInvoke>
                <InnerMethodInvoke>null;L001;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;CP001;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>runTempTests</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;REPORT;["Thread " + threadNumber + " entering temp tests "]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;setOpenMode;[openMode]</InnerMethodInvoke>
                <InnerMethodInvoke>null;C010;[ContainerHandle.TEMPORARY_SEGMENT]</InnerMethodInvoke>
                <InnerMethodInvoke>null;C012;[ContainerHandle.TEMPORARY_SEGMENT]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P005;[ContainerHandle.TEMPORARY_SEGMENT]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P011;[ContainerHandle.TEMPORARY_SEGMENT]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P012;[ContainerHandle.TEMPORARY_SEGMENT]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P030;[ContainerHandle.TEMPORARY_SEGMENT]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P055;[ContainerHandle.TEMPORARY_SEGMENT]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P056;[ContainerHandle.TEMPORARY_SEGMENT]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P701;[ContainerHandle.TEMPORARY_SEGMENT]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P702;[ContainerHandle.TEMPORARY_SEGMENT]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P703;[ContainerHandle.TEMPORARY_SEGMENT]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P704;[ContainerHandle.TEMPORARY_SEGMENT]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P705;[ContainerHandle.TEMPORARY_SEGMENT]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P706;[ContainerHandle.TEMPORARY_SEGMENT, false]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P706;[ContainerHandle.TEMPORARY_SEGMENT, true]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P707;[ContainerHandle.TEMPORARY_SEGMENT]</InnerMethodInvoke>
                <InnerMethodInvoke>null;TC001;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;TC002;[ContainerHandle.MODE_TRUNCATE_ON_COMMIT, true]</InnerMethodInvoke>
                <InnerMethodInvoke>null;TC002;[ContainerHandle.MODE_TRUNCATE_ON_COMMIT, false]</InnerMethodInvoke>
                <InnerMethodInvoke>null;TC002;[0, false]</InnerMethodInvoke>
                <InnerMethodInvoke>null;TC003;[ContainerHandle.MODE_TRUNCATE_ON_COMMIT, true]</InnerMethodInvoke>
                <InnerMethodInvoke>null;TC003;[ContainerHandle.MODE_TRUNCATE_ON_COMMIT, false]</InnerMethodInvoke>
                <InnerMethodInvoke>null;TC003;[0, false]</InnerMethodInvoke>
                <InnerMethodInvoke>null;TC003;[0, true]</InnerMethodInvoke>
                <InnerMethodInvoke>null;TC003;[ContainerHandle.MODE_DROP_ON_COMMIT, true]</InnerMethodInvoke>
                <InnerMethodInvoke>null;TC003;[ContainerHandle.MODE_DROP_ON_COMMIT, false]</InnerMethodInvoke>
                <InnerMethodInvoke>null;TC004all;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;REPORT;["Thread " + threadNumber + " exiting temp tests "]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>runPurgeWithNoDataLoggesTests</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;REPORT;["Thread " + threadNumber + " entering purges with no data logged tests "]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P005;[0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P006;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P014;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P036;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P037;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P709;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P710;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P711;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;REPORT;["Thread " + threadNumber + " exiting purge with no data logged tests "]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>T000</MethodName>
            <MethodComment>/** 
 * T000 - ensure a transaction starts out idle.
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Transaction [t1=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>Transaction [ti=t_util.t_startInternalTransaction()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t1;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t1;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>ti;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t1;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["T000"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>T001</MethodName>
            <MethodComment>/** 
 * T001 - start and commit an empty transaction.
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Transaction [t1=t_util.t_startTransaction()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t_util;t_commit;[t1]</InnerMethodInvoke>
                <InnerMethodInvoke>t1;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["T001"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>T002</MethodName>
            <MethodComment>/** 
 * T002 - start and abort an empty transaction.
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Transaction [t1=t_util.t_startTransaction()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t_util;t_abort;[t1]</InnerMethodInvoke>
                <InnerMethodInvoke>t1;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["T002"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>T003</MethodName>
            <MethodComment>/** 
 * T003 - start and commit an empty transaction and then ensure that the transaction remains open for another commit.
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Transaction [t1=t_util.t_startTransaction()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t_util;t_commit;[t1]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t1]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_abort;[t1]</InnerMethodInvoke>
                <InnerMethodInvoke>t1;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["T003"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>T004</MethodName>
            <MethodComment>/** 
 * T004 - start and abort an empty transaction and then ensure that the transaction remains open for a commit and another abort.
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Transaction [t1=t_util.t_startTransaction()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t_util;t_abort;[t1]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t1]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_abort;[t1]</InnerMethodInvoke>
                <InnerMethodInvoke>t1;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["T004"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>T005</MethodName>
            <MethodComment>/** 
 * T005 check transaction identifiers on idle transactions.
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Transaction [t1=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>GlobalTransactionId [id1=t1.getGlobalId()]</InnerVar>
                <InnerVar>byte[] [global_id={0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63}]</InnerVar>
                <InnerVar>byte[] [branch_id={0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63}]</InnerVar>
                <InnerVar>Transaction [t2=t_util.t_startGlobalTransaction(42,global_id,branch_id)]</InnerVar>
                <InnerVar>GlobalTransactionId [id2=t2.getGlobalId()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t1;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t1;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t2;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["T005"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>T006</MethodName>
            <MethodComment>/** 
 * T006 - savepoint basic API testing
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Transaction [t1=t_util.t_startTransaction()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t_util;t_checkInvalidSavePoint;[t1, "sdfjsdfg"]</InnerMethodInvoke>
                <InnerMethodInvoke>t1;setSavePoint;[SP1, null]</InnerMethodInvoke>
                <InnerMethodInvoke>t1;rollbackToSavePoint;[SP1, null]</InnerMethodInvoke>
                <InnerMethodInvoke>t1;rollbackToSavePoint;[SP1, null]</InnerMethodInvoke>
                <InnerMethodInvoke>t1;releaseSavePoint;[SP1, null]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkInvalidSavePoint;[t1, SP1]</InnerMethodInvoke>
                <InnerMethodInvoke>t1;setSavePoint;[SP1, null]</InnerMethodInvoke>
                <InnerMethodInvoke>t1;rollbackToSavePoint;[SP1, null]</InnerMethodInvoke>
                <InnerMethodInvoke>t1;rollbackToSavePoint;[SP1, null]</InnerMethodInvoke>
                <InnerMethodInvoke>t1;releaseSavePoint;[SP1, null]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkInvalidSavePoint;[t1, SP1]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t1]</InnerMethodInvoke>
                <InnerMethodInvoke>t1;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["T006"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>T007</MethodName>
            <MethodComment>/** 
 * T007 - savepoint nesting testing
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Transaction [t1=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>int [position=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t1;setSavePoint;[SP1, null]</InnerMethodInvoke>
                <InnerMethodInvoke>t1;setSavePoint;[SP2, null]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkInvalidSavePoint;[t1, SP1]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkInvalidSavePoint;[t1, SP2]</InnerMethodInvoke>
                <InnerMethodInvoke>t1;setSavePoint;[SP1, null]</InnerMethodInvoke>
                <InnerMethodInvoke>t1;setSavePoint;[SP2, null]</InnerMethodInvoke>
                <InnerMethodInvoke>t1;rollbackToSavePoint;[SP2, null]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkInvalidSavePoint;[t1, SP2]</InnerMethodInvoke>
                <InnerMethodInvoke>t1;rollbackToSavePoint;[SP1, null]</InnerMethodInvoke>
                <InnerMethodInvoke>t1;releaseSavePoint;[SP1, null]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkInvalidSavePoint;[t1, SP1]</InnerMethodInvoke>
                <InnerMethodInvoke>t1;setSavePoint;[SP1, null]</InnerMethodInvoke>
                <InnerMethodInvoke>t1;setSavePoint;[SP2, null]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkInvalidSavePoint;[t1, SP2]</InnerMethodInvoke>
                <InnerMethodInvoke>t1;rollbackToSavePoint;[SP1, null]</InnerMethodInvoke>
                <InnerMethodInvoke>t1;releaseSavePoint;[SP1, null]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t1]</InnerMethodInvoke>
                <InnerMethodInvoke>t1;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["T007"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>T008</MethodName>
            <MethodComment>/** 
 * T008 - savepoint  testing, ensure save points disappear at commit or abort.
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Transaction [t1=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>int [position1=0]</InnerVar>
                <InnerVar>int [position2=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t1;commit;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkInvalidSavePoint;[t1, SP1]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkInvalidSavePoint;[t1, SP2]</InnerMethodInvoke>
                <InnerMethodInvoke>t1;abort;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t1;abort;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkInvalidSavePoint;[t1, SP1]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkInvalidSavePoint;[t1, SP2]</InnerMethodInvoke>
                <InnerMethodInvoke>t1;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["T008"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>T009</MethodName>
            <MethodComment>/** 
 * T009 - add a container and remove it within the same transaction.
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,0,4096)]</InnerVar>
                <InnerVar>ContainerKey [id=new ContainerKey(0,cid)]</InnerVar>
                <InnerVar>ContainerHandle [ch=t.openContainer(id,ContainerHandle.MODE_READONLY)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t_util;t_dropContainer;[t, 0, cid]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["T009"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>T010</MethodName>
            <MethodComment>/** 
 * T010 - add a container with a default size and remove it within the same transaction.
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Transaction [t1=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t1,0)]</InnerVar>
                <InnerVar>ContainerKey [id=new ContainerKey(0,cid)]</InnerVar>
                <InnerVar>ContainerHandle [ch=t1.openContainer(id,ContainerHandle.MODE_READONLY)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t_util;t_dropContainer;[t1, 0, cid]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t1]</InnerMethodInvoke>
                <InnerMethodInvoke>t1;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["T010"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>T011</MethodName>
            <MethodComment>/** 
 * T011 - see that a container remains open over the commit of an open transaction..
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Transaction [t=t_util.t_startInternalTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,0)]</InnerVar>
                <InnerVar>ContainerHandle [c]</InnerVar>
                <InnerVar>Page [page=t_util.t_getPage(c,ContainerHandle.FIRST_PAGE_NUMBER)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t;commit;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t;commit;[]</InnerMethodInvoke>
                <InnerMethodInvoke>page;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>c;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t;commit;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t;abort;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_dropContainer;[t, 0, cid]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["T011"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>T012</MethodName>
            <MethodComment>/** 
 * Test Xact.makeRecordHandle()
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,0)]</InnerVar>
                <InnerVar>ContainerHandle [c=t_util.t_openContainer(t,0,cid,true)]</InnerVar>
                <InnerVar>Page [page=t_util.t_getPage(c,ContainerHandle.FIRST_PAGE_NUMBER)]</InnerVar>
                <InnerVar>RecordHandle [r1, r2]</InnerVar>
                <InnerVar>RecordHandle [new_r1, new_r2]</InnerVar>
                <InnerVar>T_RawStoreRow [row1=new T_RawStoreRow(REC_001)]</InnerVar>
                <InnerVar>T_RawStoreRow [row2=new T_RawStoreRow(REC_002)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t_util;t_checkFetch;[page, new_r1, REC_001]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["T012"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>C010</MethodName>
            <MethodComment>/** 
 * C010 - Create a container within a transaction, commit and the re-open the container twice.
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>segment</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,segment)]</InnerVar>
                <InnerVar>ContainerHandle [c1, c2]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_dropContainer;[t, segment, cid]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["C010"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>C011</MethodName>
            <MethodComment>/** 
 * C011 - Create a container withina transaction, commit and the re-open the container in update and non-update mode.
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,0)]</InnerVar>
                <InnerVar>ContainerHandle [c1, c2]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_dropContainer;[t, 0, cid]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["C011"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>C012</MethodName>
            <MethodComment>/** 
 * C012 - Drop a container within a transaction, commit, see that it is deleted. Drop a container within a transaction, rollback and re-open and see that it is not deleted. 
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Standard Derby error policy
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>segment</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,segment)]</InnerVar>
                <InnerVar>ContainerHandle [c1=t_util.t_openContainer(t,segment,cid,true)]</InnerVar>
                <InnerVar>ContainerKey [id=new ContainerKey(segment,cid)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_dropContainer;[t, segment, cid]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["C012"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>C014</MethodName>
            <MethodComment>/** 
 * C014 - Open a container for locking only.
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Standard Derby error policy
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>ContainerKey [id=new ContainerKey(77,45)]</InnerVar>
                <InnerVar>ContainerHandle [c=t.openContainer(id,ContainerHandle.MODE_OPEN_FOR_LOCK_ONLY)]</InnerVar>
                <InnerVar>RecordHandle [rh1=c.makeRecordHandle(23,456)]</InnerVar>
                <InnerVar>RecordHandle [rh2=c.makeRecordHandle(23,7)]</InnerVar>
                <InnerVar>RecordHandle [rh3=c.makeRecordHandle(23,9)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>c.getLockingPolicy();lockRecordForRead;[t, c, rh1, true, true]</InnerMethodInvoke>
                <InnerMethodInvoke>c.getLockingPolicy();lockRecordForRead;[t, c, rh2, true, false]</InnerMethodInvoke>
                <InnerMethodInvoke>c.getLockingPolicy();lockRecordForWrite;[t, rh3, false, true]</InnerMethodInvoke>
                <InnerMethodInvoke>c.getLockingPolicy();unlockRecordAfterRead;[t, c, rh2, false, true]</InnerMethodInvoke>
                <InnerMethodInvoke>c;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t;commit;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["C014"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>C200</MethodName>
            <MethodComment>/** 
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Transaction [t1=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t1,0)]</InnerVar>
                <InnerVar>ContainerHandle [c1]</InnerVar>
                <InnerVar>Page [lastPage]</InnerVar>
                <InnerVar>RecordHandle [rh001, rh002, rh003]</InnerVar>
                <InnerVar>T_RawStoreRow [row]</InnerVar>
                <InnerVar>int [slot1=lastPage.getSlotNumber(rh001)]</InnerVar>
                <InnerVar>int [slot2=lastPage.getSlotNumber(rh002)]</InnerVar>
                <InnerVar>T_RawStoreRow [urow=new T_RawStoreRow(REC_004)]</InnerVar>
                <InnerVar>int [slot3=lastPage.getSlotNumber(rh003)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t_util;t_commit;[t1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;REPORT;["see if the container can be opened again"]</InnerMethodInvoke>
                <InnerMethodInvoke>c1;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;REPORT;["insert a record into the container."]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[lastPage, rh001, REC_001]</InnerMethodInvoke>
                <InnerMethodInvoke>lastPage;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;REPORT;["read record just inserted."]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[lastPage, rh001, REC_001]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchFirst;[lastPage, REC_001]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchLast;[lastPage, REC_001]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;REPORT;["insert 2 more records."]</InnerMethodInvoke>
                <InnerMethodInvoke>lastPage;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;REPORT;["checks on all 3 records."]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[lastPage, rh001, REC_001]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[lastPage, rh002, REC_002]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[lastPage, rh003, REC_003]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[lastPage, lastPage.getRecordHandle(rh001.getId()), REC_001]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[lastPage, lastPage.getRecordHandle(rh002.getId()), REC_002]</InnerMethodInvoke>
                <InnerMethodInvoke>lastPage;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;REPORT;["start deleting."]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[lastPage, rh001, REC_001]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[lastPage, rh002, REC_002]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[lastPage, rh003, REC_003]</InnerMethodInvoke>
                <InnerMethodInvoke>lastPage;deleteAtSlot;[slot1, true, null]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[lastPage, rh002, REC_002]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[lastPage, rh003, REC_003]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchNext;[lastPage, rh002, REC_003]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchPrevious;[lastPage, rh003, REC_002]</InnerMethodInvoke>
                <InnerMethodInvoke>lastPage;deleteAtSlot;[slot2, true, null]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[lastPage, rh003, REC_003]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchFirst;[lastPage, REC_003]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchLast;[lastPage, REC_003]</InnerMethodInvoke>
                <InnerMethodInvoke>lastPage;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;REPORT;["update the remaining record."]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[lastPage, rh003, REC_003]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[lastPage, rh003, REC_004]</InnerMethodInvoke>
                <InnerMethodInvoke>lastPage;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t1]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_dropContainer;[t1, 0, cid]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t1]</InnerMethodInvoke>
                <InnerMethodInvoke>t1;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["C200"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>C201</MethodName>
            <MethodComment>/** 
 * C201 - Create container with different page size, minimum record size, inserting into these containers to check if the variables are set correctly.
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>whatPage</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [pageSize=(whatPage == 0 ? 4096 : 32768)]</InnerVar>
                <InnerVar>Transaction [t1=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t1,0,pageSize,0,pageSize / 2,false)]</InnerVar>
                <InnerVar>ContainerHandle [c1]</InnerVar>
                <InnerVar>Page [lastPage]</InnerVar>
                <InnerVar>RecordHandle [rh001, rh002, rh003]</InnerVar>
                <InnerVar>T_RawStoreRow [row]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;REPORT;["create container with pageSize " + pageSize + ", spareSpace "+ 0+ ", minimumRecordSize "+ pageSize / 2]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;REPORT;["see if the container can be opened again"]</InnerMethodInvoke>
                <InnerMethodInvoke>c1;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;REPORT;["insert a record into the container."]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[lastPage, rh001, REC_001]</InnerMethodInvoke>
                <InnerMethodInvoke>lastPage;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;REPORT;["read record just inserted."]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[lastPage, rh001, REC_001]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchFirst;[lastPage, REC_001]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchLast;[lastPage, REC_001]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;REPORT;["try inserting 1 more record, but there should be no room on page for it."]</InnerMethodInvoke>
                <InnerMethodInvoke>lastPage;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t1]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_dropContainer;[t1, 0, cid]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;REPORT;["create container with pageSize " + pageSize + ", spareSpace "+ 0+ ", minimumRecordSize "+ pageSize]</InnerMethodInvoke>
                <InnerMethodInvoke>null;REPORT;["this should set minimumRecordSize to the default 100"]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;REPORT;["see if the container can be opened again"]</InnerMethodInvoke>
                <InnerMethodInvoke>c1;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;REPORT;["insert a record into the container."]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[lastPage, rh001, REC_001]</InnerMethodInvoke>
                <InnerMethodInvoke>lastPage;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;REPORT;["read record just inserted."]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[lastPage, rh001, REC_001]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchFirst;[lastPage, REC_001]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchLast;[lastPage, REC_001]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;REPORT;["insert 2 more records."]</InnerMethodInvoke>
                <InnerMethodInvoke>lastPage;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;REPORT;["checks on all 3 records."]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[lastPage, rh001, REC_001]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[lastPage, rh002, REC_002]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[lastPage, rh003, REC_003]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[lastPage, lastPage.getRecordHandle(rh001.getId()), REC_001]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[lastPage, lastPage.getRecordHandle(rh002.getId()), REC_002]</InnerMethodInvoke>
                <InnerMethodInvoke>lastPage;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t1]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_dropContainer;[t1, 0, cid]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t1]</InnerMethodInvoke>
                <InnerMethodInvoke>t1;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["C201 - " + whatPage]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>P001</MethodName>
            <MethodComment>/** 
 * Create a container, ensure it has one page with no records. Then test all the things we can do with an empty page opened read-only in the container. Then add a new page, ensure it has the correct page number and is empty.
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>segment</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,segment)]</InnerVar>
                <InnerVar>ContainerHandle [c=t_util.t_openContainer(t,segment,cid,false)]</InnerVar>
                <InnerVar>Page [page=t_util.t_getPage(c,ContainerHandle.FIRST_PAGE_NUMBER)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkEmptyPage;[page]</InnerMethodInvoke>
                <InnerMethodInvoke>page;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkPageNumber;[page, ContainerHandle.FIRST_PAGE_NUMBER]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkEmptyPage;[page]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkPageNumber;[page, ContainerHandle.FIRST_PAGE_NUMBER + 1]</InnerMethodInvoke>
                <InnerMethodInvoke>page;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkPageNumber;[page, ContainerHandle.FIRST_PAGE_NUMBER + 2]</InnerMethodInvoke>
                <InnerMethodInvoke>page;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_updateSlotOutOfRange;[page, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_updateSlotOutOfRange;[page, -1]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_updateSlotOutOfRange;[page, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_dropContainer;[t, segment, cid]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["P001"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>P002</MethodName>
            <MethodComment>/** 
 * Insert rows on the first page until the page is full, then add a page and repeat the test (for a total of three pages with full rows). Fetch the rows back by handle and slot methods.
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>segment</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,segment)]</InnerVar>
                <InnerVar>ContainerHandle [c=t_util.t_openContainer(t,segment,cid,true)]</InnerVar>
                <InnerVar>Page [page=t_util.t_getPage(c,ContainerHandle.FIRST_PAGE_NUMBER)]</InnerVar>
                <InnerVar>RecordHandle [rh]</InnerVar>
                <InnerVar>T_RawStoreRow [row]</InnerVar>
                <InnerVar>int [recordCount[]={0,0,0}]</InnerVar>
                <InnerVar>long [pageNumber=ContainerHandle.FIRST_PAGE_NUMBER]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t_util;t_checkEmptyPage;[page]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_dropContainer;[t, segment, cid]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["P002"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>P005</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>segment</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,segment)]</InnerVar>
                <InnerVar>ContainerHandle [c=t_util.t_openContainer(t,segment,cid,true)]</InnerVar>
                <InnerVar>Page [page1=t_util.t_getLastPage(c)]</InnerVar>
                <InnerVar>T_RawStoreRow [row0=new T_RawStoreRow("long row xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx long row ")]</InnerVar>
                <InnerVar>T_RawStoreRow [row1=new T_RawStoreRow("medium row yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy medium row")]</InnerVar>
                <InnerVar>int [i=0]</InnerVar>
                <InnerVar>int [count1=page1.recordCount()]</InnerVar>
                <InnerVar>Page [page2=t_util.t_addPage(c)]</InnerVar>
                <InnerVar>int [count2=page2.recordCount()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t_util;t_insertAtSlot;[page1, 0, row0]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_insertAtSlot;[page2, 0, row0]</InnerMethodInvoke>
                <InnerMethodInvoke>page1;purgeAtSlot;[1, page1.recordCount() - 1, logDataForPurges]</InnerMethodInvoke>
                <InnerMethodInvoke>page2;purgeAtSlot;[1, page2.recordCount() - 1, logDataForPurges]</InnerMethodInvoke>
                <InnerMethodInvoke>page1;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>page2;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_dropContainer;[t, segment, cid]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["P005"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>P006</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>PageTimeStamp [ts]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,0)]</InnerVar>
                <InnerVar>ContainerHandle [c=t_util.t_openContainer(t,0,cid,true)]</InnerVar>
                <InnerVar>Page [page1=t_util.t_getLastPage(c)]</InnerVar>
                <InnerVar>T_RawStoreRow [row=new T_RawStoreRow(REC_001)]</InnerVar>
                <InnerVar>RecordHandle [rh=t_util.t_insert(page1,row)]</InnerVar>
                <InnerVar>T_RawStoreRow [row2=new T_RawStoreRow(REC_002)]</InnerVar>
                <InnerVar>int [slot2=page1.getSlotNumber(rh)]</InnerVar>
                <InnerVar>T_RawStoreRow [upd1=new T_RawStoreRow(REC_003)]</InnerVar>
                <InnerVar>int [slot=page1.getSlotNumber(rh)]</InnerVar>
                <InnerVar>Page [page2=c.addPage()]</InnerVar>
                <InnerVar>Page [page3=c.addPage()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>page1;setTimeStamp;[ts]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_updateSlotOutOfRange;[page1, 3]</InnerMethodInvoke>
                <InnerMethodInvoke>page1;updateAtSlot;[slot2, row2.getRow(), null]</InnerMethodInvoke>
                <InnerMethodInvoke>page1;setTimeStamp;[ts]</InnerMethodInvoke>
                <InnerMethodInvoke>page1;updateAtSlot;[slot, upd1.getRow(), BS_COL_0]</InnerMethodInvoke>
                <InnerMethodInvoke>page1;setTimeStamp;[ts]</InnerMethodInvoke>
                <InnerMethodInvoke>page1;deleteAtSlot;[slot, true, null]</InnerMethodInvoke>
                <InnerMethodInvoke>page1;setTimeStamp;[ts]</InnerMethodInvoke>
                <InnerMethodInvoke>page1;purgeAtSlot;[0, 1, logDataForPurges]</InnerMethodInvoke>
                <InnerMethodInvoke>page1;setTimeStamp;[ts]</InnerMethodInvoke>
                <InnerMethodInvoke>page1;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>page2;setTimeStamp;[ts]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_dropContainer;[t, 0, cid]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["P006"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>P007</MethodName>
            <MethodComment>/** 
 * P007 this test exercises repeated updates on a 1K page 2 rows (with 1 column) will be inserted into the page. We expand the row data in slot 0 by 1 byte until the page is completely full, and overflows the record to an overflow page.
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>segment</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,segment,4096,0,1,false)]</InnerVar>
                <InnerVar>ContainerHandle [c=t_util.t_openContainer(t,segment,cid,true)]</InnerVar>
                <InnerVar>Page [page=t_util.t_getLastPage(c)]</InnerVar>
                <InnerVar>T_RawStoreRow [row=new T_RawStoreRow(REC_001)]</InnerVar>
                <InnerVar>T_RawStoreRow [row2=new T_RawStoreRow(new String(new char[300]))]</InnerVar>
                <InnerVar>RecordHandle [r1=t_util.t_insertAtSlot(page,0,row)]</InnerVar>
                <InnerVar>RecordHandle [r2=t_util.t_insertAtSlot(page,1,row2)]</InnerVar>
                <InnerVar>String [rowData=REC_001]</InnerVar>
                <InnerVar>long [pid=page.getPageNumber()]</InnerVar>
                <InnerVar>Page [page2=t_util.t_addPage(c)]</InnerVar>
                <InnerVar>long [pid2=page2.getPageNumber()]</InnerVar>
                <InnerVar>Page [page3=t_util.t_addPage(c)]</InnerVar>
                <InnerVar>long [pid3=page3.getPageNumber()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t_util;t_dropContainer;[t, segment, cid]</InnerMethodInvoke>
                <InnerMethodInvoke>row;setColumn;[0, REC_001]</InnerMethodInvoke>
                <InnerMethodInvoke>row;setColumn;[1, new String(new char[400])]</InnerMethodInvoke>
                <InnerMethodInvoke>row;setColumn;[0, REC_001 + new String(new char[300])]</InnerMethodInvoke>
                <InnerMethodInvoke>row;setColumn;[1, new String(new char[100])]</InnerMethodInvoke>
                <InnerMethodInvoke>page;updateAtSlot;[0, row.getRow(), (FormatableBitSet)null]</InnerMethodInvoke>
                <InnerMethodInvoke>row;setColumn;[0, REC_001]</InnerMethodInvoke>
                <InnerMethodInvoke>row;setColumn;[1, new String(new char[400])]</InnerMethodInvoke>
                <InnerMethodInvoke>page;updateAtSlot;[0, row.getRow(), (FormatableBitSet)null]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_dropContainer;[t, segment, cid]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["P007"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>P008</MethodName>
            <MethodComment>/** 
 * P008 this test exercises repeated inserts with small rows on a 1K page we will insert as many rows as possible into the page.  Then we reduce the row by 1 byte at a time, we will try to insert another smaller row. This test also tests spaceForInsert().
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>segment</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,segment,4096,0,1,false)]</InnerVar>
                <InnerVar>ContainerHandle [c=t_util.t_openContainer(t,segment,cid,true)]</InnerVar>
                <InnerVar>Page [page1=t_util.t_getLastPage(c)]</InnerVar>
                <InnerVar>T_RawStoreRow [row=new T_RawStoreRow(REC_001)]</InnerVar>
                <InnerVar>int [i=0]</InnerVar>
                <InnerVar>String[] [s=new String[7]]</InnerVar>
                <InnerVar>boolean [notDone=true]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t_util;t_insertAtSlot;[page1, 0, row]</InnerMethodInvoke>
                <InnerMethodInvoke>null;REPORT;[i + " rows inserted."]</InnerMethodInvoke>
                <InnerMethodInvoke>page1;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_dropContainer;[t, segment, cid]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["P008"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>P009</MethodName>
            <MethodComment>/** 
 * P009 this test exercises repeated shrinking and expanding of fields using updateFieldBySlot we will insert as many rows as possible into the page. Then set some of the columns to null, That should not create more space on the page for inserts, because the extra space become reservedspace for the row.  So, the next insert should fail.
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>segment</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [slot=0]</InnerVar>
                <InnerVar>int [i=0]</InnerVar>
                <InnerVar>int [j=0]</InnerVar>
                <InnerVar>String [field=REC_001]</InnerVar>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,segment)]</InnerVar>
                <InnerVar>ContainerHandle [c=t_util.t_openContainer(t,segment,cid,true)]</InnerVar>
                <InnerVar>Page [page=t_util.t_getPage(c,ContainerHandle.FIRST_PAGE_NUMBER)]</InnerVar>
                <InnerVar>T_RawStoreRow [row=new T_RawStoreRow(13)]</InnerVar>
                <InnerVar>int [numRows=0]</InnerVar>
                <InnerVar>DataValueDescriptor [col=new SQLChar()]</InnerVar>
                <InnerVar>DataValueDescriptor [storedColumn=new SQLChar()]</InnerVar>
                <InnerVar>String [field_pre=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t_util;t_checkEmptyPage;[page]</InnerMethodInvoke>
                <InnerMethodInvoke>row;setColumn;[0, (String)null]</InnerMethodInvoke>
                <InnerMethodInvoke>row;setColumn;[1, REC_001]</InnerMethodInvoke>
                <InnerMethodInvoke>row;setColumn;[2, REC_002]</InnerMethodInvoke>
                <InnerMethodInvoke>row;setColumn;[3, REC_003]</InnerMethodInvoke>
                <InnerMethodInvoke>row;setColumn;[4, REC_004]</InnerMethodInvoke>
                <InnerMethodInvoke>row;setColumn;[5, REC_005]</InnerMethodInvoke>
                <InnerMethodInvoke>row;setColumn;[6, REC_006]</InnerMethodInvoke>
                <InnerMethodInvoke>row;setColumn;[7, REC_007]</InnerMethodInvoke>
                <InnerMethodInvoke>row;setColumn;[8, (String)null]</InnerMethodInvoke>
                <InnerMethodInvoke>row;setColumn;[9, (String)null]</InnerMethodInvoke>
                <InnerMethodInvoke>row;setColumn;[10, REC_007]</InnerMethodInvoke>
                <InnerMethodInvoke>row;setColumn;[11, (String)null]</InnerMethodInvoke>
                <InnerMethodInvoke>row;setColumn;[12, REC_006]</InnerMethodInvoke>
                <InnerMethodInvoke>null;REPORT;[numRows + " rows inserted "]</InnerMethodInvoke>
                <InnerMethodInvoke>page;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>factory;idle;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;REPORT;["updated col1 in row 1 to same length"]</InnerMethodInvoke>
                <InnerMethodInvoke>page;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>factory;idle;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["P009: segment " + segment]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>P011</MethodName>
            <MethodComment>/** 
 * P011 this test exercises insertAtSlot, (LogicalUndo)null
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>segment</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,segment)]</InnerVar>
                <InnerVar>ContainerHandle [c=t_util.t_openContainer(t,segment,cid,true)]</InnerVar>
                <InnerVar>Page [page=t_util.t_getPage(c,ContainerHandle.FIRST_PAGE_NUMBER)]</InnerVar>
                <InnerVar>T_RawStoreRow [row1=new T_RawStoreRow(REC_001)]</InnerVar>
                <InnerVar>T_RawStoreRow [row2=new T_RawStoreRow(REC_002)]</InnerVar>
                <InnerVar>T_RawStoreRow [row3=new T_RawStoreRow(REC_003)]</InnerVar>
                <InnerVar>T_RawStoreRow [row4=new T_RawStoreRow(REC_004)]</InnerVar>
                <InnerVar>RecordHandle [r1, r2, r3, r4]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[page, r3, REC_003]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchBySlot;[page, Page.FIRST_SLOT_NUMBER, REC_003, false, false]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchFirst;[page, REC_001]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchNext;[page, r1, REC_002]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchNext;[page, r2, REC_003]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchNext;[page, r3, REC_004]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchLast;[page, REC_004]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchBySlot;[page, Page.FIRST_SLOT_NUMBER, REC_001, false, true]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchBySlot;[page, Page.FIRST_SLOT_NUMBER + 1, REC_002, false, false]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchBySlot;[page, Page.FIRST_SLOT_NUMBER + 2, REC_003, false, true]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchBySlot;[page, Page.FIRST_SLOT_NUMBER + 3, REC_004, false, false]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_dropContainer;[t, segment, cid]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["P011"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>P012</MethodName>
            <MethodComment>/** 
 * P012 this test exercises updateAtSlot
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>segment</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,segment)]</InnerVar>
                <InnerVar>ContainerHandle [c=t_util.t_openContainer(t,segment,cid,true)]</InnerVar>
                <InnerVar>Page [page=t_util.t_getPage(c,ContainerHandle.FIRST_PAGE_NUMBER)]</InnerVar>
                <InnerVar>T_RawStoreRow [row1=new T_RawStoreRow(REC_001)]</InnerVar>
                <InnerVar>T_RawStoreRow [row2=new T_RawStoreRow(2)]</InnerVar>
                <InnerVar>T_RawStoreRow [row3=new T_RawStoreRow(3)]</InnerVar>
                <InnerVar>RecordHandle [r1, r2, r3]</InnerVar>
                <InnerVar>T_RawStoreRow [upd1=new T_RawStoreRow(2)]</InnerVar>
                <InnerVar>T_RawStoreRow [upd2=new T_RawStoreRow(REC_004)]</InnerVar>
                <InnerVar>T_RawStoreRow [upd3=new T_RawStoreRow(3)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>row2;setColumn;[0, (String)null]</InnerMethodInvoke>
                <InnerMethodInvoke>row2;setColumn;[1, REC_001]</InnerMethodInvoke>
                <InnerMethodInvoke>row3;setColumn;[0, REC_001]</InnerMethodInvoke>
                <InnerMethodInvoke>row3;setColumn;[1, REC_002]</InnerMethodInvoke>
                <InnerMethodInvoke>row3;setColumn;[2, REC_003]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[page, r1, row1]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[page, r2, row2]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[page, r3, row3]</InnerMethodInvoke>
                <InnerMethodInvoke>upd1;setColumn;[0, (String)null]</InnerMethodInvoke>
                <InnerMethodInvoke>upd1;setColumn;[1, REC_001]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[page, r1, upd1]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[page, r2, row2]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[page, r3, row3]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[page, r1, upd1]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[page, r2, upd2]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[page, r3, row3]</InnerMethodInvoke>
                <InnerMethodInvoke>upd3;setColumn;[0, REC_003]</InnerMethodInvoke>
                <InnerMethodInvoke>upd3;setColumn;[1, REC_002]</InnerMethodInvoke>
                <InnerMethodInvoke>upd3;setColumn;[2, REC_001]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[page, r1, upd1]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[page, r2, upd2]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[page, r3, upd3]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["P012"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>P013</MethodName>
            <MethodComment>/** 
 * P013 this test exercises deleteAtSlot and isDeletedAtSlot
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,0)]</InnerVar>
                <InnerVar>ContainerHandle [c=t_util.t_openContainer(t,0,cid,true)]</InnerVar>
                <InnerVar>Page [page=t_util.t_getPage(c,ContainerHandle.FIRST_PAGE_NUMBER)]</InnerVar>
                <InnerVar>T_RawStoreRow [row1=new T_RawStoreRow(REC_001)]</InnerVar>
                <InnerVar>T_RawStoreRow [row2=new T_RawStoreRow(REC_002)]</InnerVar>
                <InnerVar>RecordHandle [r1=t_util.t_insertAtSlot(page,0,row1)]</InnerVar>
                <InnerVar>RecordHandle [r2]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkRecordCount;[page, 2, 2]</InnerMethodInvoke>
                <InnerMethodInvoke>page;deleteAtSlot;[0, true, (LogicalUndo)null]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkRecordCount;[page, 2, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>page;deleteAtSlot;[1, true, (LogicalUndo)null]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkRecordCount;[page, 2, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>page;deleteAtSlot;[0, false, (LogicalUndo)null]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkRecordCount;[page, 2, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>page;deleteAtSlot;[1, false, (LogicalUndo)null]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkRecordCount;[page, 2, 2]</InnerMethodInvoke>
                <InnerMethodInvoke>page;deleteAtSlot;[0, true, (LogicalUndo)null]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkRecordCount;[page, 2, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["P013"]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_dropContainer;[t, 0, cid]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>P014</MethodName>
            <MethodComment>/** 
 * P014 this test exercises purgeAtSlot
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,0)]</InnerVar>
                <InnerVar>ContainerHandle [c=t_util.t_openContainer(t,0,cid,true)]</InnerVar>
                <InnerVar>Page [page=t_util.t_getPage(c,ContainerHandle.FIRST_PAGE_NUMBER)]</InnerVar>
                <InnerVar>T_RawStoreRow [row0=new T_RawStoreRow(REC_001)]</InnerVar>
                <InnerVar>T_RawStoreRow [row1=new T_RawStoreRow(REC_001)]</InnerVar>
                <InnerVar>T_RawStoreRow [row2=new T_RawStoreRow(REC_002)]</InnerVar>
                <InnerVar>T_RawStoreRow [row3=new T_RawStoreRow(REC_003)]</InnerVar>
                <InnerVar>T_RawStoreRow [row4=new T_RawStoreRow(REC_004)]</InnerVar>
                <InnerVar>RecordHandle [r0, r1, r2, r3, r4]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>page;purgeAtSlot;[1, 2, logDataForPurges]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchBySlot;[page, 0, REC_001, false, true]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchBySlot;[page, 1, REC_003, true, true]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchBySlot;[page, 2, REC_004, false, true]</InnerMethodInvoke>
                <InnerMethodInvoke>page;purgeAtSlot;[0, 3, logDataForPurges]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["P014"]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_dropContainer;[t, 0, cid]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>P015</MethodName>
            <MethodComment>/** 
 * P015 this test exercises updateAtSlot
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,0)]</InnerVar>
                <InnerVar>ContainerHandle [c=t_util.t_openContainer(t,0,cid,true)]</InnerVar>
                <InnerVar>Page [page=t_util.t_getPage(c,ContainerHandle.FIRST_PAGE_NUMBER)]</InnerVar>
                <InnerVar>T_RawStoreRow [row1=new T_RawStoreRow(REC_001)]</InnerVar>
                <InnerVar>T_RawStoreRow [row2=new T_RawStoreRow(2)]</InnerVar>
                <InnerVar>T_RawStoreRow [row3=new T_RawStoreRow(3)]</InnerVar>
                <InnerVar>RecordHandle [r1, r2, r3]</InnerVar>
                <InnerVar>T_RawStoreRow [row2u=new T_RawStoreRow(2)]</InnerVar>
                <InnerVar>FormatableBitSet [validColumn=new FormatableBitSet(2)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>row2;setColumn;[0, (String)null]</InnerMethodInvoke>
                <InnerMethodInvoke>row2;setColumn;[1, REC_001]</InnerMethodInvoke>
                <InnerMethodInvoke>row3;setColumn;[0, REC_001]</InnerMethodInvoke>
                <InnerMethodInvoke>row3;setColumn;[1, REC_002]</InnerMethodInvoke>
                <InnerMethodInvoke>row3;setColumn;[2, REC_003]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[page, r1, row1]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[page, r2, row2]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[page, r3, row3]</InnerMethodInvoke>
                <InnerMethodInvoke>row2u;setColumn;[0, "012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789"]</InnerMethodInvoke>
                <InnerMethodInvoke>row2u;setColumn;[1, "0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789"]</InnerMethodInvoke>
                <InnerMethodInvoke>page;updateAtSlot;[1, row2u.getRow(), (FormatableBitSet)null]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[page, r2, row2u]</InnerMethodInvoke>
                <InnerMethodInvoke>((T_RawStoreRow)row1);setColumn;[0, "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz"]</InnerMethodInvoke>
                <InnerMethodInvoke>validColumn;clear;[]</InnerMethodInvoke>
                <InnerMethodInvoke>validColumn;set;[0]</InnerMethodInvoke>
                <InnerMethodInvoke>page;updateAtSlot;[0, row1.getRow(), validColumn]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[page, r1, row1]</InnerMethodInvoke>
                <InnerMethodInvoke>((T_RawStoreRow)row3);setColumn;[1, "XXabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz"]</InnerMethodInvoke>
                <InnerMethodInvoke>validColumn;clear;[]</InnerMethodInvoke>
                <InnerMethodInvoke>validColumn;set;[1]</InnerMethodInvoke>
                <InnerMethodInvoke>page;updateAtSlot;[2, row3.getRow(), validColumn]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[page, r3, row3]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["P015"]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_dropContainer;[t, 0, cid]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>P016</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,0)]</InnerVar>
                <InnerVar>long [cid2=t_util.t_addContainer(t,0)]</InnerVar>
                <InnerVar>ContainerHandle [c=t_util.t_openContainer(t,0,cid,true)]</InnerVar>
                <InnerVar>Page [page1=t_util.t_getPage(c,ContainerHandle.FIRST_PAGE_NUMBER)]</InnerVar>
                <InnerVar>Page [page2=t_util.t_addPage(c)]</InnerVar>
                <InnerVar>long [pid1=page1.getPageNumber()]</InnerVar>
                <InnerVar>long [pid2=page2.getPageNumber()]</InnerVar>
                <InnerVar>int [i=0]</InnerVar>
                <InnerVar>int [deleted=0]</InnerVar>
                <InnerVar>RecordHandle [rh]</InnerVar>
                <InnerVar>T_RawStoreRow [row]</InnerVar>
                <InnerVar>int [recordCount=i]</InnerVar>
                <InnerVar>ContainerHandle [c2=t_util.t_openContainer(t,0,cid2,true)]</InnerVar>
                <InnerVar>Page [wrongPage=t_util.t_getPage(c2,ContainerHandle.FIRST_PAGE_NUMBER)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkEmptyPage;[page2]</InnerMethodInvoke>
                <InnerMethodInvoke>page1;copyAndPurge;[page2, 0, recordCount, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkEmptyPage;[page1]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkRecordCount;[page2, recordCount, recordCount - deleted]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_dropContainer;[t, 0, cid]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_dropContainer;[t, 0, cid2]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>P017</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,0)]</InnerVar>
                <InnerVar>ContainerHandle [c=t_util.t_openContainer(t,0,cid,true)]</InnerVar>
                <InnerVar>Page [page1=t_util.t_getPage(c,ContainerHandle.FIRST_PAGE_NUMBER)]</InnerVar>
                <InnerVar>T_RawStoreRow [row1=new T_RawStoreRow(REC_001)]</InnerVar>
                <InnerVar>RecordHandle [valid=t_util.t_insert(page1,row1)]</InnerVar>
                <InnerVar>RecordHandle[] [rhs=new RecordHandle[RecordHandle.FIRST_RECORD_ID]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;PASS;["P017"]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_dropContainer;[t, 0, cid]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>P018</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,0,4096,0,1,false)]</InnerVar>
                <InnerVar>ContainerHandle [c=t_util.t_openContainer(t,0,cid,true)]</InnerVar>
                <InnerVar>Page [page1=t_util.t_getPage(c,ContainerHandle.FIRST_PAGE_NUMBER)]</InnerVar>
                <InnerVar>Page [page2=t_util.t_addPage(c)]</InnerVar>
                <InnerVar>long [pid1=page1.getPageNumber()]</InnerVar>
                <InnerVar>long [pid2=page2.getPageNumber()]</InnerVar>
                <InnerVar>int [i=0]</InnerVar>
                <InnerVar>int [deleted=0]</InnerVar>
                <InnerVar>RecordHandle [rh]</InnerVar>
                <InnerVar>T_RawStoreRow [row]</InnerVar>
                <InnerVar>long [pnum2=page2.getPageNumber()]</InnerVar>
                <InnerVar>int [numrows=page2.recordCount()]</InnerVar>
                <InnerVar>int [tries=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkEmptyPage;[page2]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_dropContainer;[t, 0, cid]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkEmptyPage;[page2]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_removePage;[c, page1]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkRecordCount;[page2, numrows, numrows]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkEmptyPage;[page1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["P018"]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_dropContainer;[t, 0, cid]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>P019</MethodName>
            <MethodComment>/** 
 * Test bulk load and preallocation
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,0,4096,0,1,false)]</InnerVar>
                <InnerVar>ContainerHandle [c=t_util.t_openContainer(t,0,cid,true)]</InnerVar>
                <InnerVar>Page [p1=c.addPage(ContainerHandle.ADD_PAGE_BULK)]</InnerVar>
                <InnerVar>long [pnum1=p1.getPageNumber()]</InnerVar>
                <InnerVar>Page [p2=c.addPage()]</InnerVar>
                <InnerVar>long [pnum2=p2.getPageNumber()]</InnerVar>
                <InnerVar>Page [p3=c.addPage(ContainerHandle.ADD_PAGE_BULK)]</InnerVar>
                <InnerVar>long [pnum3=p3.getPageNumber()]</InnerVar>
                <InnerVar>Page [p=c.getFirstPage()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>p1;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>p2;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>p3;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["P019 - container " + cid]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>P020</MethodName>
            <MethodComment>/** 
 * Test create container with initial page set to 100 pages
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>Properties [tableProperties=new Properties()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,0,tableProperties)]</InnerVar>
                <InnerVar>ContainerHandle [c=t_util.t_openContainer(t,0,cid,true)]</InnerVar>
                <InnerVar>Page [p1=c.getFirstPage()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>tableProperties;put;[Property.PAGE_SIZE_PARAMETER, Integer.toString(4096)]</InnerMethodInvoke>
                <InnerMethodInvoke>tableProperties;put;[RawStoreFactory.CONTAINER_INITIAL_PAGES, Integer.toString(100)]</InnerMethodInvoke>
                <InnerMethodInvoke>p1;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_dropContainer;[t, 0, cid]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["P020 - container " + cid]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>P021</MethodName>
            <MethodComment>/** 
 * Test preAllocate
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,0,4096)]</InnerVar>
                <InnerVar>ContainerHandle [c=t_util.t_openContainer(t,0,cid,true)]</InnerVar>
                <InnerVar>Page [p1=c.getFirstPage()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>c;preAllocate;[10]</InnerMethodInvoke>
                <InnerMethodInvoke>p1;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_dropContainer;[t, 0, cid]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["P021 - container " + cid]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>P022</MethodName>
            <MethodComment>/** 
 * Test minimumRecordSize: this is to make sure that logRow and storeRecord are consistent with each other when it comes to reserve space.
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,0,4096,0,9,false)]</InnerVar>
                <InnerVar>ContainerHandle [c=t_util.t_openContainer(t,0,cid,true)]</InnerVar>
                <InnerVar>Page [page1=t_util.t_getPage(c,ContainerHandle.FIRST_PAGE_NUMBER)]</InnerVar>
                <InnerVar>RecordHandle [rh]</InnerVar>
                <InnerVar>T_RawStoreRow [row]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_dropContainer;[t, 0, cid]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["P022"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>P023</MethodName>
            <MethodComment>/** 
 * Test overflowThreshold: this is to make sure that logRow and storeRecord are consistent with each other when it comes to reserve space.
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>segment</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,segment,4096,0,0,false)]</InnerVar>
                <InnerVar>ContainerHandle [c=t_util.t_openContainer(t,segment,cid,true)]</InnerVar>
                <InnerVar>Page [page=t_util.t_getPage(c,ContainerHandle.FIRST_PAGE_NUMBER)]</InnerVar>
                <InnerVar>int [overflowThreshold=50]</InnerVar>
                <InnerVar>int [insertFlag=Page.INSERT_INITIAL | Page.INSERT_DEFAULT]</InnerVar>
                <InnerVar>T_RawStoreRow [r1=new T_RawStoreRow(1)]</InnerVar>
                <InnerVar>RecordHandle [rh1=t_util.t_insertAtSlot(page,0,r1,(byte)insertFlag,overflowThreshold)]</InnerVar>
                <InnerVar>RecordHandle [rh2=t_util.t_insertAtSlot(page,1,r1,(byte)insertFlag,overflowThreshold)]</InnerVar>
                <InnerVar>T_RawStoreRow [r2=new T_RawStoreRow(1)]</InnerVar>
                <InnerVar>T_RawStoreRow [r3=new T_RawStoreRow(2)]</InnerVar>
                <InnerVar>T_RawStoreRow [r4=new T_RawStoreRow(2)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkEmptyPage;[page]</InnerMethodInvoke>
                <InnerMethodInvoke>r1;setColumn;[0, 200, REC_001]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[page, rh1, r1]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[page, rh2, r1]</InnerMethodInvoke>
                <InnerMethodInvoke>page;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;REPORT;["test 1: 2 rows under threshold inserted..."]</InnerMethodInvoke>
                <InnerMethodInvoke>r2;setColumn;[0, 2000, REC_001]</InnerMethodInvoke>
                <InnerMethodInvoke>page;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;REPORT;["test 2: 2 rows over threshold not inserted..."]</InnerMethodInvoke>
                <InnerMethodInvoke>r3;setColumn;[0, 400, REC_001]</InnerMethodInvoke>
                <InnerMethodInvoke>r3;setColumn;[1, 400, REC_001]</InnerMethodInvoke>
                <InnerMethodInvoke>page;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;REPORT;["test 3: 2 rows with 2 columns under the threshold inserted..."]</InnerMethodInvoke>
                <InnerMethodInvoke>r4;setColumn;[0, 800, REC_001]</InnerMethodInvoke>
                <InnerMethodInvoke>r4;setColumn;[1, 800, REC_001]</InnerMethodInvoke>
                <InnerMethodInvoke>page;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;REPORT;["test 4: 2 rows with 2 columns over the threshold not inserted..."]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_dropContainer;[t, segment, cid]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["P023"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>P024</MethodName>
            <MethodComment>/** 
 * Test that latches are exclusive.
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>segment</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,segment,4096,0,1,false)]</InnerVar>
                <InnerVar>ContainerHandle [c=t_util.t_openContainer(t,segment,cid,true)]</InnerVar>
                <InnerVar>Page [page1=t_util.t_getLastPage(c)]</InnerVar>
                <InnerVar>Page [page2=t_util.t_addPage(c)]</InnerVar>
                <InnerVar>long [p1=page1.getPageNumber()]</InnerVar>
                <InnerVar>long [p2=page2.getPageNumber()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t_util;t_checkGetLatchedPage;[c, p1]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkGetLatchedPage;[c, p2]</InnerMethodInvoke>
                <InnerMethodInvoke>page1;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkGetLatchedPage;[c, p2]</InnerMethodInvoke>
                <InnerMethodInvoke>page1;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>page2;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_dropContainer;[t, segment, cid]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["P024"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>P030</MethodName>
            <MethodComment>/** 
 * Insert small rows and update them so that they overflow a page.
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>segment</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,segment,4096)]</InnerVar>
                <InnerVar>ContainerHandle [c=t_util.t_openContainer(t,segment,cid,true)]</InnerVar>
                <InnerVar>Page [page=t_util.t_getPage(c,ContainerHandle.FIRST_PAGE_NUMBER)]</InnerVar>
                <InnerVar>T_RawStoreRow [r0=new T_RawStoreRow(0)]</InnerVar>
                <InnerVar>T_RawStoreRow [r1=new T_RawStoreRow((String)null)]</InnerVar>
                <InnerVar>T_RawStoreRow [r2=new T_RawStoreRow("0123456789")]</InnerVar>
                <InnerVar>T_RawStoreRow [r1u=new T_RawStoreRow(String.valueOf(new char[1937]))]</InnerVar>
                <InnerVar>T_RawStoreRow [r2u=new T_RawStoreRow(String.valueOf(new char[1099]))]</InnerVar>
                <InnerVar>T_RawStoreRow [r0u=new T_RawStoreRow(String.valueOf(new char[423]))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t_util;t_checkEmptyPage;[page]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_insertAtSlot;[page, 0, r0]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_insertAtSlot;[page, 1, r1]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_insertAtSlot;[page, 2, r2]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkRecordCount;[page, 3, 3]</InnerMethodInvoke>
                <InnerMethodInvoke>page;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkStringLengthFetch;[page, 1, -1]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkStringLengthFetch;[page, 2, 10]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFieldCount;[page, 0, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFieldCount;[page, 1, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFieldCount;[page, 2, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>page;updateAtSlot;[1, r1u.getRow(), (FormatableBitSet)null]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkStringLengthFetch;[page, 1, 1937]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkStringLengthFetch;[page, 2, 10]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFieldCount;[page, 0, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFieldCount;[page, 1, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFieldCount;[page, 2, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>page;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>page;updateAtSlot;[2, r2u.getRow(), (FormatableBitSet)null]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkStringLengthFetch;[page, 1, 1937]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkStringLengthFetch;[page, 2, 1099]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFieldCount;[page, 0, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFieldCount;[page, 1, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFieldCount;[page, 2, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>page;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkStringLengthFetch;[page, 1, 1937]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkStringLengthFetch;[page, 2, 1099]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFieldCount;[page, 0, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFieldCount;[page, 1, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFieldCount;[page, 2, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>page;updateAtSlot;[0, r0u.getRow(), (FormatableBitSet)null]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkStringLengthFetch;[page, 0, 423]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkStringLengthFetch;[page, 1, 1937]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkStringLengthFetch;[page, 2, 1099]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFieldCount;[page, 0, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFieldCount;[page, 1, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFieldCount;[page, 2, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>page;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>page;updateAtSlot;[0, r0u.getRow(), (FormatableBitSet)null]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkStringLengthFetch;[page, 0, 399]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkStringLengthFetch;[page, 1, 1937]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkStringLengthFetch;[page, 2, 1099]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFieldCount;[page, 0, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFieldCount;[page, 1, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFieldCount;[page, 2, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>page;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>page;updateAtSlot;[0, r0u.getRow(), (FormatableBitSet)null]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkStringLengthFetch;[page, 0, 1400]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkStringLengthFetch;[page, 1, 1937]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkStringLengthFetch;[page, 2, 1099]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFieldCount;[page, 0, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFieldCount;[page, 1, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFieldCount;[page, 2, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>page;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["P030: segment = " + segment]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>P031</MethodName>
            <MethodComment>/** 
 * Insert 4-column long rows into 1K pages, each column is less than a page.
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>segment</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,segment,4096)]</InnerVar>
                <InnerVar>ContainerHandle [c=t_util.t_openContainer(t,segment,cid,true)]</InnerVar>
                <InnerVar>Page [page=t_util.t_getPage(c,ContainerHandle.FIRST_PAGE_NUMBER)]</InnerVar>
                <InnerVar>T_RawStoreRow [r0=new T_RawStoreRow(4)]</InnerVar>
                <InnerVar>int [insertFlag=Page.INSERT_INITIAL]</InnerVar>
                <InnerVar>RecordHandle [rh0=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t_util;t_checkEmptyPage;[page]</InnerMethodInvoke>
                <InnerMethodInvoke>r0;setColumn;[0, 256, REC_001]</InnerMethodInvoke>
                <InnerMethodInvoke>r0;setColumn;[1, 256, REC_002]</InnerMethodInvoke>
                <InnerMethodInvoke>r0;setColumn;[2, 256, REC_003]</InnerMethodInvoke>
                <InnerMethodInvoke>r0;setColumn;[3, 256, REC_004]</InnerMethodInvoke>
                <InnerMethodInvoke>page;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["P031: segment = " + segment]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>P032</MethodName>
            <MethodComment>/** 
 * Insert 60-column long rows into 1K pages, each column is less than a page.
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>segment</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,segment,4096)]</InnerVar>
                <InnerVar>ContainerHandle [c=t_util.t_openContainer(t,segment,cid,true)]</InnerVar>
                <InnerVar>Page [page=t_util.t_getPage(c,ContainerHandle.FIRST_PAGE_NUMBER)]</InnerVar>
                <InnerVar>int [insertFlag=Page.INSERT_INITIAL]</InnerVar>
                <InnerVar>T_RawStoreRow [r0=new T_RawStoreRow(60)]</InnerVar>
                <InnerVar>RecordHandle [rh0=null]</InnerVar>
                <InnerVar>RecordHandle [rh1=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t_util;t_checkEmptyPage;[page]</InnerMethodInvoke>
                <InnerMethodInvoke>page;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["P032: segment = " + segment]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>P033</MethodName>
            <MethodComment>/** 
 * Insert 100-column long rows into 1K pages, each column is less than a page.
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>segment</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,segment,4096)]</InnerVar>
                <InnerVar>ContainerHandle [c=t_util.t_openContainer(t,segment,cid,true)]</InnerVar>
                <InnerVar>Page [page=t_util.t_getPage(c,ContainerHandle.FIRST_PAGE_NUMBER)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;PASS;["P033: segment = " + segment]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>P034</MethodName>
            <MethodComment>/** 
 * Insert 401 column long row with many small columns in the beginning, and one large column at the end into 4K pages.
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>segment</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,segment,4096)]</InnerVar>
                <InnerVar>ContainerHandle [c=t_util.t_openContainer(t,segment,cid,true)]</InnerVar>
                <InnerVar>Page [page=t_util.t_getPage(c,ContainerHandle.FIRST_PAGE_NUMBER)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;PASS;["P034: segment = " + segment]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>P035</MethodName>
            <MethodComment>/** 
 * Insert a single long column long row into a 1K page.
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>segment</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,segment,4096)]</InnerVar>
                <InnerVar>ContainerHandle [c=t_util.t_openContainer(t,segment,cid,true)]</InnerVar>
                <InnerVar>Page [page=t_util.t_getPage(c,ContainerHandle.FIRST_PAGE_NUMBER)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;PASS;["P035: segment = " + segment]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>P036</MethodName>
            <MethodComment>/** 
 * Test space reclaimation - purging of a long row gets back all the row pieces.
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>long [segment=0]</InnerVar>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,segment,4096)]</InnerVar>
                <InnerVar>ContainerHandle [c=t_util.t_openContainer(t,segment,cid,true)]</InnerVar>
                <InnerVar>Page [page=t_util.t_getPage(c,ContainerHandle.FIRST_PAGE_NUMBER)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;PASS;["P036"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>P037</MethodName>
            <MethodComment>/** 
 * Test space reclaimation - purging of a row with serveral long columns get back all the column chains.
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>long [segment=0]</InnerVar>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,segment,4096)]</InnerVar>
                <InnerVar>ContainerHandle [c=t_util.t_openContainer(t,segment,cid,true)]</InnerVar>
                <InnerVar>Page [page=t_util.t_getPage(c,ContainerHandle.FIRST_PAGE_NUMBER)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;PASS;["P037"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>P038</MethodName>
            <MethodComment>/** 
 * Test space reclaimation - rollback of an insert (with purge) of a row that overflows and with long column get back all the space in the row and column chain. 
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>long [segment=0]</InnerVar>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,segment,4096)]</InnerVar>
                <InnerVar>ContainerHandle [c=t_util.t_openContainer(t,segment,cid,true)]</InnerVar>
                <InnerVar>Page [page=t_util.t_getPage(c,ContainerHandle.FIRST_PAGE_NUMBER)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["P038"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>P039</MethodName>
            <MethodComment>/** 
 * Test space reclaimation - shrink a head row piece.
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>long [segment=0]</InnerVar>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,segment,8 * 1024)]</InnerVar>
                <InnerVar>T_RawStoreRow [bigRow=new T_RawStoreRow(3)]</InnerVar>
                <InnerVar>ContainerHandle [c=t_util.t_openContainer(t,segment,cid,true)]</InnerVar>
                <InnerVar>Page [page=t_util.t_getPage(c,ContainerHandle.FIRST_PAGE_NUMBER)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>bigRow;setColumn;[0, 50, REC_001]</InnerMethodInvoke>
                <InnerMethodInvoke>bigRow;setColumn;[1, 750, REC_002]</InnerMethodInvoke>
                <InnerMethodInvoke>bigRow;setColumn;[2, 200, REC_003]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["P039"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>P040</MethodName>
            <MethodComment>/** 
 * Test space reclaimation - shrink a non head row piece.
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>long [segment=0]</InnerVar>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,0,4096)]</InnerVar>
                <InnerVar>ContainerHandle [c=t_util.t_openContainer(t,segment,cid,true)]</InnerVar>
                <InnerVar>Page [page=t_util.t_getPage(c,ContainerHandle.FIRST_PAGE_NUMBER)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;PASS;["P040"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>P041</MethodName>
            <MethodComment>/** 
 * Test space reclaimation - update a long column to another long column.
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>long [segment=0]</InnerVar>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,segment,4096)]</InnerVar>
                <InnerVar>ContainerHandle [c=t_util.t_openContainer(t,segment,cid,true)]</InnerVar>
                <InnerVar>Page [page=t_util.t_getPage(c,ContainerHandle.FIRST_PAGE_NUMBER)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;PASS;["P041"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>P042</MethodName>
            <MethodComment>/** 
 * Test space reclaimation - rollback of an update that create a long column. 
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>long [segment=0]</InnerVar>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,segment,4096)]</InnerVar>
                <InnerVar>ContainerHandle [c=t_util.t_openContainer(t,segment,cid,true)]</InnerVar>
                <InnerVar>Page [page=t_util.t_getPage(c,ContainerHandle.FIRST_PAGE_NUMBER)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;PASS;["P042"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>P043</MethodName>
            <MethodComment>/** 
 * Test space reclaimation - rollback of an update that create a new row piece. 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>P050</MethodName>
            <MethodComment>/** 
 * Test that post commit processor does not stubbify a drop table that is rolled back in a savepoint
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,0)]</InnerVar>
                <InnerVar>ContainerHandle [c=t_util.t_openContainer(t,0,cid,true)]</InnerVar>
                <InnerVar>long [cid2=t_util.t_addContainer(t,0)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t;setSavePoint;[SP1, null]</InnerMethodInvoke>
                <InnerMethodInvoke>t;dropContainer;[new ContainerKey(0,cid)]</InnerMethodInvoke>
                <InnerMethodInvoke>t;rollbackToSavePoint;[SP1, null]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_addPage;[c]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_addPage;[c]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_addPage;[c]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_addPage;[c]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_addPage;[c]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["P050"]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_dropContainer;[t, 0, cid]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_dropContainer;[t, 0, cid2]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>P051</MethodName>
            <MethodComment>/** 
 * Test rollback of Page.insert
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,0)]</InnerVar>
                <InnerVar>T_RawStoreRow [row=new T_RawStoreRow(REC_001)]</InnerVar>
                <InnerVar>ContainerHandle [c=t_util.t_openContainer(t,0,cid,true)]</InnerVar>
                <InnerVar>Page [page=t_util.t_getPage(c,ContainerHandle.FIRST_PAGE_NUMBER)]</InnerVar>
                <InnerVar>RecordHandle [rh1=t_util.t_insert(page,row)]</InnerVar>
                <InnerVar>RecordHandle [rh2=t_util.t_insert(c,row)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[c, rh1, REC_001]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[c, rh1, REC_001]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[c, rh2, REC_002]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_abort;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[c, rh1, REC_001]</InnerMethodInvoke>
                <InnerMethodInvoke>page;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["P051"]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_dropContainer;[t, 0, cid]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>P053</MethodName>
            <MethodComment>/** 
 * Test insertAtSlot that rolls back with a purge
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>P054</MethodName>
            <MethodComment>/** 
 * Test internal transaction 
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>ContextManager [previousCM=contextService.getCurrentContextManager()]</InnerVar>
                <InnerVar>ContextManager [cm1=contextService.newContextManager()]</InnerVar>
                <InnerVar>Transaction [tuser=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>Transaction [tinternal=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>contextService;setCurrentContextManager;[cm1]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>P055</MethodName>
            <MethodComment>/** 
 * Test rollback of partial row update. Create a long row with 10 columns on 2 pages (5 columns on each page). Update the 1st column on the 2nd page (the 6th column) which causes the last column (10th column) to move off the page. Then abort and make sure that all the original columns are there and correct. NOTE: stored length is twice string length + 2
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>segment</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,segment,4096)]</InnerVar>
                <InnerVar>ContainerHandle [c=t_util.t_openContainer(t,segment,cid,true)]</InnerVar>
                <InnerVar>Page [page=t_util.t_getPage(c,ContainerHandle.FIRST_PAGE_NUMBER)]</InnerVar>
                <InnerVar>int [colSize=90]</InnerVar>
                <InnerVar>T_RawStoreRow [r0=new T_RawStoreRow(10)]</InnerVar>
                <InnerVar>int [insertFlag=Page.INSERT_INITIAL]</InnerVar>
                <InnerVar>RecordHandle [rh0=null]</InnerVar>
                <InnerVar>T_RawStoreRow [updateRow=new T_RawStoreRow(10)]</InnerVar>
                <InnerVar>FormatableBitSet [colList=new FormatableBitSet(10)]</InnerVar>
                <InnerVar>DataValueDescriptor [column=new SQLChar()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t_util;t_checkEmptyPage;[page]</InnerMethodInvoke>
                <InnerMethodInvoke>r0;setColumn;[0, colSize, REC_001]</InnerMethodInvoke>
                <InnerMethodInvoke>r0;setColumn;[1, colSize, REC_002]</InnerMethodInvoke>
                <InnerMethodInvoke>r0;setColumn;[2, colSize, REC_003]</InnerMethodInvoke>
                <InnerMethodInvoke>r0;setColumn;[3, colSize, REC_004]</InnerMethodInvoke>
                <InnerMethodInvoke>r0;setColumn;[4, colSize, REC_005]</InnerMethodInvoke>
                <InnerMethodInvoke>r0;setColumn;[5, colSize, REC_009]</InnerMethodInvoke>
                <InnerMethodInvoke>r0;setColumn;[6, colSize, REC_010]</InnerMethodInvoke>
                <InnerMethodInvoke>r0;setColumn;[7, colSize, REC_011]</InnerMethodInvoke>
                <InnerMethodInvoke>r0;setColumn;[8, colSize, REC_012]</InnerMethodInvoke>
                <InnerMethodInvoke>r0;setColumn;[9, colSize, REC_013]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>updateRow;setColumn;[5, colSize * 2, REC_009]</InnerMethodInvoke>
                <InnerMethodInvoke>colList;set;[5]</InnerMethodInvoke>
                <InnerMethodInvoke>page;updateAtSlot;[0, updateRow.getRow(), colList]</InnerMethodInvoke>
                <InnerMethodInvoke>null;REPORT;["about to check fetch after update ..."]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchColFromSlot;[page, page.FIRST_SLOT_NUMBER, 0, column, false, REC_001, colSize]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchColFromSlot;[page, page.FIRST_SLOT_NUMBER, 1, column, false, REC_002, colSize]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchColFromSlot;[page, page.FIRST_SLOT_NUMBER, 2, column, false, REC_003, colSize]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchColFromSlot;[page, page.FIRST_SLOT_NUMBER, 3, column, false, REC_004, colSize]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchColFromSlot;[page, page.FIRST_SLOT_NUMBER, 4, column, false, REC_005, colSize]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchColFromSlot;[page, page.FIRST_SLOT_NUMBER, 5, column, false, REC_009, colSize * 2]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchColFromSlot;[page, page.FIRST_SLOT_NUMBER, 6, column, false, REC_010, colSize]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchColFromSlot;[page, page.FIRST_SLOT_NUMBER, 7, column, false, REC_011, colSize]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchColFromSlot;[page, page.FIRST_SLOT_NUMBER, 8, column, false, REC_012, colSize]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchColFromSlot;[page, page.FIRST_SLOT_NUMBER, 9, column, false, REC_013, colSize]</InnerMethodInvoke>
                <InnerMethodInvoke>page;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_abort;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>null;REPORT;["about to check fetch after abort ..."]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchColFromSlot;[page, page.FIRST_SLOT_NUMBER, 0, column, false, REC_001, colSize]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchColFromSlot;[page, page.FIRST_SLOT_NUMBER, 1, column, false, REC_002, colSize]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchColFromSlot;[page, page.FIRST_SLOT_NUMBER, 2, column, false, REC_003, colSize]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchColFromSlot;[page, page.FIRST_SLOT_NUMBER, 3, column, false, REC_004, colSize]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchColFromSlot;[page, page.FIRST_SLOT_NUMBER, 4, column, false, REC_005, colSize]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchColFromSlot;[page, page.FIRST_SLOT_NUMBER, 5, column, false, REC_009, colSize]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchColFromSlot;[page, page.FIRST_SLOT_NUMBER, 6, column, false, REC_010, colSize]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchColFromSlot;[page, page.FIRST_SLOT_NUMBER, 7, column, false, REC_011, colSize]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchColFromSlot;[page, page.FIRST_SLOT_NUMBER, 8, column, false, REC_012, colSize]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchColFromSlot;[page, page.FIRST_SLOT_NUMBER, 9, column, false, REC_013, colSize]</InnerMethodInvoke>
                <InnerMethodInvoke>page;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["P055: segment = " + segment]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>P056</MethodName>
            <MethodComment>/** 
 * Test rollback of partial row update. Create a long row with 15 columns on 3 pages (5 columns on each page). Update the 1st column on the 2nd page (the 6th column) which causes the last column of that page (10th column) to move off the page. Then abort and make sure that all the original columns are there and correct. NOTE: stored length is twice string length + 2
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>segment</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,segment,4096)]</InnerVar>
                <InnerVar>ContainerHandle [c=t_util.t_openContainer(t,segment,cid,true)]</InnerVar>
                <InnerVar>Page [page=t_util.t_getPage(c,ContainerHandle.FIRST_PAGE_NUMBER)]</InnerVar>
                <InnerVar>int [colSize=90]</InnerVar>
                <InnerVar>T_RawStoreRow [r0=new T_RawStoreRow(15)]</InnerVar>
                <InnerVar>int [insertFlag=Page.INSERT_INITIAL]</InnerVar>
                <InnerVar>RecordHandle [rh0=null]</InnerVar>
                <InnerVar>T_RawStoreRow [updateRow=new T_RawStoreRow(15)]</InnerVar>
                <InnerVar>FormatableBitSet [colList=new FormatableBitSet(15)]</InnerVar>
                <InnerVar>DataValueDescriptor [column=new SQLChar()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t_util;t_checkEmptyPage;[page]</InnerMethodInvoke>
                <InnerMethodInvoke>r0;setColumn;[0, colSize, REC_001]</InnerMethodInvoke>
                <InnerMethodInvoke>r0;setColumn;[1, colSize, REC_002]</InnerMethodInvoke>
                <InnerMethodInvoke>r0;setColumn;[2, colSize, REC_003]</InnerMethodInvoke>
                <InnerMethodInvoke>r0;setColumn;[3, colSize, REC_004]</InnerMethodInvoke>
                <InnerMethodInvoke>r0;setColumn;[4, colSize, REC_005]</InnerMethodInvoke>
                <InnerMethodInvoke>r0;setColumn;[5, colSize, REC_009]</InnerMethodInvoke>
                <InnerMethodInvoke>r0;setColumn;[6, colSize, REC_010]</InnerMethodInvoke>
                <InnerMethodInvoke>r0;setColumn;[7, colSize, REC_011]</InnerMethodInvoke>
                <InnerMethodInvoke>r0;setColumn;[8, colSize, REC_012]</InnerMethodInvoke>
                <InnerMethodInvoke>r0;setColumn;[9, colSize, REC_013]</InnerMethodInvoke>
                <InnerMethodInvoke>r0;setColumn;[10, colSize, REC_014]</InnerMethodInvoke>
                <InnerMethodInvoke>r0;setColumn;[11, colSize, REC_015]</InnerMethodInvoke>
                <InnerMethodInvoke>r0;setColumn;[12, colSize, REC_016]</InnerMethodInvoke>
                <InnerMethodInvoke>r0;setColumn;[13, colSize, REC_017]</InnerMethodInvoke>
                <InnerMethodInvoke>r0;setColumn;[14, colSize, REC_018]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>updateRow;setColumn;[5, colSize * 2, REC_009]</InnerMethodInvoke>
                <InnerMethodInvoke>colList;set;[5]</InnerMethodInvoke>
                <InnerMethodInvoke>page;updateAtSlot;[0, updateRow.getRow(), colList]</InnerMethodInvoke>
                <InnerMethodInvoke>null;REPORT;["about to check fetch after update ..."]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchColFromSlot;[page, page.FIRST_SLOT_NUMBER, 0, column, false, REC_001, colSize]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchColFromSlot;[page, page.FIRST_SLOT_NUMBER, 1, column, false, REC_002, colSize]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchColFromSlot;[page, page.FIRST_SLOT_NUMBER, 2, column, false, REC_003, colSize]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchColFromSlot;[page, page.FIRST_SLOT_NUMBER, 3, column, false, REC_004, colSize]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchColFromSlot;[page, page.FIRST_SLOT_NUMBER, 4, column, false, REC_005, colSize]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchColFromSlot;[page, page.FIRST_SLOT_NUMBER, 5, column, false, REC_009, colSize * 2]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchColFromSlot;[page, page.FIRST_SLOT_NUMBER, 6, column, false, REC_010, colSize]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchColFromSlot;[page, page.FIRST_SLOT_NUMBER, 7, column, false, REC_011, colSize]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchColFromSlot;[page, page.FIRST_SLOT_NUMBER, 8, column, false, REC_012, colSize]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchColFromSlot;[page, page.FIRST_SLOT_NUMBER, 9, column, false, REC_013, colSize]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchColFromSlot;[page, page.FIRST_SLOT_NUMBER, 10, column, false, REC_014, colSize]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchColFromSlot;[page, page.FIRST_SLOT_NUMBER, 11, column, false, REC_015, colSize]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchColFromSlot;[page, page.FIRST_SLOT_NUMBER, 12, column, false, REC_016, colSize]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchColFromSlot;[page, page.FIRST_SLOT_NUMBER, 13, column, false, REC_017, colSize]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchColFromSlot;[page, page.FIRST_SLOT_NUMBER, 14, column, false, REC_018, colSize]</InnerMethodInvoke>
                <InnerMethodInvoke>page;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_abort;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>null;REPORT;["about to check fetch after abort ..."]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchColFromSlot;[page, page.FIRST_SLOT_NUMBER, 0, column, false, REC_001, colSize]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchColFromSlot;[page, page.FIRST_SLOT_NUMBER, 1, column, false, REC_002, colSize]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchColFromSlot;[page, page.FIRST_SLOT_NUMBER, 2, column, false, REC_003, colSize]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchColFromSlot;[page, page.FIRST_SLOT_NUMBER, 3, column, false, REC_004, colSize]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchColFromSlot;[page, page.FIRST_SLOT_NUMBER, 4, column, false, REC_005, colSize]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchColFromSlot;[page, page.FIRST_SLOT_NUMBER, 5, column, false, REC_009, colSize]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchColFromSlot;[page, page.FIRST_SLOT_NUMBER, 6, column, false, REC_010, colSize]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchColFromSlot;[page, page.FIRST_SLOT_NUMBER, 7, column, false, REC_011, colSize]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchColFromSlot;[page, page.FIRST_SLOT_NUMBER, 8, column, false, REC_012, colSize]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchColFromSlot;[page, page.FIRST_SLOT_NUMBER, 9, column, false, REC_013, colSize]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchColFromSlot;[page, page.FIRST_SLOT_NUMBER, 10, column, false, REC_014, colSize]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchColFromSlot;[page, page.FIRST_SLOT_NUMBER, 11, column, false, REC_015, colSize]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchColFromSlot;[page, page.FIRST_SLOT_NUMBER, 12, column, false, REC_016, colSize]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchColFromSlot;[page, page.FIRST_SLOT_NUMBER, 13, column, false, REC_017, colSize]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchColFromSlot;[page, page.FIRST_SLOT_NUMBER, 14, column, false, REC_018, colSize]</InnerMethodInvoke>
                <InnerMethodInvoke>page;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["P056: segment = " + segment]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>P061</MethodName>
            <MethodComment>/** 
 * Sparse row test. Test sparse representation of rows using the FormatableBitSet class. Insert, fetch and update a row having gaps.
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>long [segment=0]</InnerVar>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,segment)]</InnerVar>
                <InnerVar>int [numCols=6]</InnerVar>
                <InnerVar>T_RawStoreRow [row1=new T_RawStoreRow(numCols)]</InnerVar>
                <InnerVar>ContainerHandle [c=t_util.t_openContainer(t,segment,cid,true)]</InnerVar>
                <InnerVar>Page [page=t_util.t_getPage(c,ContainerHandle.FIRST_PAGE_NUMBER)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>row1;setColumn;[0, (String)null]</InnerMethodInvoke>
                <InnerMethodInvoke>row1;setColumn;[1, REC_001]</InnerMethodInvoke>
                <InnerMethodInvoke>row1;setColumn;[2, (String)null]</InnerMethodInvoke>
                <InnerMethodInvoke>row1;setColumn;[3, REC_002]</InnerMethodInvoke>
                <InnerMethodInvoke>row1;setColumn;[4, (String)null]</InnerMethodInvoke>
                <InnerMethodInvoke>row1;setColumn;[5, REC_003]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["P061"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>P071</MethodName>
            <MethodComment>/** 
 * Serializable column test. Want to make sure we hit some otherwise dead code in StoredPage, used for storing/reading Serializable/Externalizable data to/from a page.
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;PASS;["P071"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>P701</MethodName>
            <MethodComment>/** 
 * Insert a single row and keep updating it, adding columns not using partial rows.
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>segment</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,segment,4096)]</InnerVar>
                <InnerVar>ContainerHandle [c=t_util.t_openContainer(t,segment,cid,true)]</InnerVar>
                <InnerVar>Page [page=t_util.t_getPage(c,ContainerHandle.FIRST_PAGE_NUMBER)]</InnerVar>
                <InnerVar>T_RawStoreRow [row=new T_RawStoreRow(0)]</InnerVar>
                <InnerVar>RecordHandle [rh=t_util.t_insertAtSlot(page,0,row,(byte)(Page.INSERT_INITIAL | Page.INSERT_OVERFLOW))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t_util;t_checkEmptyPage;[page]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[page, rh, row]</InnerMethodInvoke>
                <InnerMethodInvoke>page;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>page;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["P701: segment = " + segment]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>P702</MethodName>
            <MethodComment>/** 
 * Insert a single row and keep updating it, adding columns using partial rows.
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>segment</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,segment,4096)]</InnerVar>
                <InnerVar>ContainerHandle [c=t_util.t_openContainer(t,segment,cid,true)]</InnerVar>
                <InnerVar>Page [page=t_util.t_getPage(c,ContainerHandle.FIRST_PAGE_NUMBER)]</InnerVar>
                <InnerVar>T_RawStoreRow [row=new T_RawStoreRow(0)]</InnerVar>
                <InnerVar>RecordHandle [rh=t_util.t_insertAtSlot(page,0,row,(byte)(Page.INSERT_INITIAL | Page.INSERT_OVERFLOW))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t_util;t_checkEmptyPage;[page]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[page, rh, row]</InnerMethodInvoke>
                <InnerMethodInvoke>page;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>page;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["P702: segment = " + segment]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>P703</MethodName>
            <MethodComment>/** 
 * Simple set of partial row updates on a singel page with shrinking and expanding columns.
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>segment</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,segment,4096)]</InnerVar>
                <InnerVar>ContainerHandle [c=t_util.t_openContainer(t,segment,cid,true)]</InnerVar>
                <InnerVar>Page [page=t_util.t_getPage(c,ContainerHandle.FIRST_PAGE_NUMBER)]</InnerVar>
                <InnerVar>T_RawStoreRow [row=new T_RawStoreRow(2)]</InnerVar>
                <InnerVar>RecordHandle [rh=t_util.t_insertAtSlot(page,0,row,(byte)(Page.INSERT_INITIAL | Page.INSERT_OVERFLOW))]</InnerVar>
                <InnerVar>FormatableBitSet [colList=new FormatableBitSet(2)]</InnerVar>
                <InnerVar>int [slot=page.getSlotNumber(rh)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t_util;t_checkEmptyPage;[page]</InnerMethodInvoke>
                <InnerMethodInvoke>null;REPORT;["P703 - start "]</InnerMethodInvoke>
                <InnerMethodInvoke>row;setColumn;[0, REC_001]</InnerMethodInvoke>
                <InnerMethodInvoke>row;setColumn;[1, REC_002]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[page, rh, row]</InnerMethodInvoke>
                <InnerMethodInvoke>null;REPORT;["P703 - insert Ok "]</InnerMethodInvoke>
                <InnerMethodInvoke>page;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P703Helper;[page, rh, 0, REC_006, REC_002]</InnerMethodInvoke>
                <InnerMethodInvoke>null;REPORT;["P703 - case 1 passed"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P703Helper;[page, rh, 1, REC_007, REC_006]</InnerMethodInvoke>
                <InnerMethodInvoke>null;REPORT;["P703 - case 2 passed"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P703Helper;[page, rh, 0, REC_003, REC_007]</InnerMethodInvoke>
                <InnerMethodInvoke>null;REPORT;["P703 - case 3 passed"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P703Helper;[page, rh, 1, REC_004, REC_003]</InnerMethodInvoke>
                <InnerMethodInvoke>null;REPORT;["P703 - case 4 passed"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P703Helper;[page, rh, 0, null, REC_004]</InnerMethodInvoke>
                <InnerMethodInvoke>null;REPORT;["P703 - case 5 passed"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P703Helper;[page, rh, 1, null, null]</InnerMethodInvoke>
                <InnerMethodInvoke>null;REPORT;["P703 - case 6 passed"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P703Helper;[page, rh, 0, REC_002, null]</InnerMethodInvoke>
                <InnerMethodInvoke>null;REPORT;["P703 - case 7 passed"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P703Helper;[page, rh, 1, REC_001, REC_002]</InnerMethodInvoke>
                <InnerMethodInvoke>null;REPORT;["P703 - case 8 passed"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;P703Helper;[page, rh, -1, REC_002, REC_001]</InnerMethodInvoke>
                <InnerMethodInvoke>null;REPORT;["P703 - case 9 passed"]</InnerMethodInvoke>
                <InnerMethodInvoke>colList;set;[0]</InnerMethodInvoke>
                <InnerMethodInvoke>colList;set;[1]</InnerMethodInvoke>
                <InnerMethodInvoke>row;setColumn;[0, REC_004]</InnerMethodInvoke>
                <InnerMethodInvoke>row;setColumn;[1, REC_003]</InnerMethodInvoke>
                <InnerMethodInvoke>page;updateAtSlot;[slot, row.getRow(), colList]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[page, rh, row]</InnerMethodInvoke>
                <InnerMethodInvoke>null;REPORT;["P703 - case 10 passed"]</InnerMethodInvoke>
                <InnerMethodInvoke>page;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t;commit;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["P703: segment = " + segment]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>P703Helper</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>page</ParamName>
                    <ParamType>Page</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rh</ParamName>
                    <ParamType>RecordHandle</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>colNum</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>newVal</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>unchangedCol</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>FormatableBitSet [colList=new FormatableBitSet(2)]</InnerVar>
                <InnerVar>T_RawStoreRow [rowU=new T_RawStoreRow(2)]</InnerVar>
                <InnerVar>int [slot=page.getSlotNumber(rh)]</InnerVar>
                <InnerVar>T_RawStoreRow [row=new T_RawStoreRow(2)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>page;updateAtSlot;[slot, rowU.getRow(), colList]</InnerMethodInvoke>
                <InnerMethodInvoke>row;setColumn;[colNum, newVal]</InnerMethodInvoke>
                <InnerMethodInvoke>row;setColumn;[colNum == 0 ? 1 : 0, unchangedCol]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[page, rh, row]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>P704</MethodName>
            <MethodComment>/** 
 * Insert a single row with multiple portions. Update fields in the various portions that grow.
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>segment</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,segment,4096)]</InnerVar>
                <InnerVar>ContainerHandle [c=t_util.t_openContainer(t,segment,cid,true)]</InnerVar>
                <InnerVar>Page [page=t_util.t_getPage(c,ContainerHandle.FIRST_PAGE_NUMBER)]</InnerVar>
                <InnerVar>T_RawStoreRow [row=new T_RawStoreRow(15)]</InnerVar>
                <InnerVar>RecordHandle [rh=t_util.t_insertAtSlot(page,0,row,(byte)(Page.INSERT_INITIAL | Page.INSERT_OVERFLOW))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t_util;t_checkEmptyPage;[page]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[page, rh, row]</InnerMethodInvoke>
                <InnerMethodInvoke>page;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>page;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["P704: segment = " + segment]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>P705</MethodName>
            <MethodComment>/** 
 * Same as 704 but update fields in the reverse order.
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>segment</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,segment,4096)]</InnerVar>
                <InnerVar>ContainerHandle [c=t_util.t_openContainer(t,segment,cid,true)]</InnerVar>
                <InnerVar>Page [page=t_util.t_getPage(c,ContainerHandle.FIRST_PAGE_NUMBER)]</InnerVar>
                <InnerVar>T_RawStoreRow [row=new T_RawStoreRow(15)]</InnerVar>
                <InnerVar>RecordHandle [rh=t_util.t_insertAtSlot(page,0,row,(byte)(Page.INSERT_INITIAL | Page.INSERT_OVERFLOW))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t_util;t_checkEmptyPage;[page]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[page, rh, row]</InnerMethodInvoke>
                <InnerMethodInvoke>page;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>page;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["P705: segment = " + segment]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>P706</MethodName>
            <MethodComment>/** 
 * Insert a single row with single or multiple portions. Update every other field with a long col The update each column back to a null
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>segment</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>multiPortion</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,segment,4096)]</InnerVar>
                <InnerVar>ContainerHandle [c=t_util.t_openContainer(t,segment,cid,true)]</InnerVar>
                <InnerVar>Page [page=t_util.t_getPage(c,ContainerHandle.FIRST_PAGE_NUMBER)]</InnerVar>
                <InnerVar>T_RawStoreRow [row=new T_RawStoreRow(15)]</InnerVar>
                <InnerVar>RecordHandle [rh=t_util.t_insertAtSlot(page,0,row,(byte)(Page.INSERT_INITIAL | Page.INSERT_OVERFLOW))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t_util;t_checkEmptyPage;[page]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[page, rh, row]</InnerMethodInvoke>
                <InnerMethodInvoke>page;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>page;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["P706: multiPortion " + multiPortion + " segment = "+ segment]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>P707</MethodName>
            <MethodComment>/** 
 * Insert a single record that has several chunks and every other column is a long column
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>segment</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,segment,4096)]</InnerVar>
                <InnerVar>ContainerHandle [c=t_util.t_openContainer(t,segment,cid,true)]</InnerVar>
                <InnerVar>Page [page=t_util.t_getPage(c,ContainerHandle.FIRST_PAGE_NUMBER)]</InnerVar>
                <InnerVar>T_RawStoreRow [row=new T_RawStoreRow(20)]</InnerVar>
                <InnerVar>RecordHandle [rh=t_util.t_insertAtSlot(page,0,row,(byte)(Page.INSERT_INITIAL | Page.INSERT_OVERFLOW))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t_util;t_checkEmptyPage;[page]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[page, rh, row]</InnerMethodInvoke>
                <InnerMethodInvoke>page;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["P707: segment = " + segment]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>P708</MethodName>
            <MethodComment>/** 
 * Insert a single row with single or multiple portions. Update every other field with a long col rollback. The update each column back to a null and rollback
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>segment</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>multiPortion</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,segment,4096)]</InnerVar>
                <InnerVar>ContainerHandle [c=t_util.t_openContainer(t,segment,cid,true)]</InnerVar>
                <InnerVar>Page [page=t_util.t_getPage(c,ContainerHandle.FIRST_PAGE_NUMBER)]</InnerVar>
                <InnerVar>T_RawStoreRow [row=new T_RawStoreRow(15)]</InnerVar>
                <InnerVar>RecordHandle [rh=t_util.t_insertAtSlot(page,0,row,(byte)(Page.INSERT_INITIAL | Page.INSERT_OVERFLOW))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t_util;t_checkEmptyPage;[page]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[page, rh, row]</InnerMethodInvoke>
                <InnerMethodInvoke>page;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_abort;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetch;[page, rh, row]</InnerMethodInvoke>
                <InnerMethodInvoke>page;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["P708: multiPortion " + multiPortion + " segment = "+ segment]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>P709</MethodName>
            <MethodComment>/** 
 * P709: this test exercises purgeAtSlot , rollsback and purges the slot again, to make sure not logging the data does not have any impact on repurging the rollbacked purges.
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,0)]</InnerVar>
                <InnerVar>ContainerHandle [c=t_util.t_openContainer(t,0,cid,true)]</InnerVar>
                <InnerVar>Page [page=t_util.t_getPage(c,ContainerHandle.FIRST_PAGE_NUMBER)]</InnerVar>
                <InnerVar>T_RawStoreRow [row0=new T_RawStoreRow(REC_001)]</InnerVar>
                <InnerVar>T_RawStoreRow [row1=new T_RawStoreRow(REC_001)]</InnerVar>
                <InnerVar>T_RawStoreRow [row2=new T_RawStoreRow(REC_002)]</InnerVar>
                <InnerVar>T_RawStoreRow [row3=new T_RawStoreRow(REC_003)]</InnerVar>
                <InnerVar>T_RawStoreRow [row4=new T_RawStoreRow(REC_004)]</InnerVar>
                <InnerVar>RecordHandle [r0, r1, r2, r3, r4]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>page;purgeAtSlot;[1, 2, logDataForPurges]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchBySlot;[page, 0, REC_001, false, true]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchBySlot;[page, 1, REC_003, true, true]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchBySlot;[page, 2, REC_004, false, true]</InnerMethodInvoke>
                <InnerMethodInvoke>page;purgeAtSlot;[0, 3, logDataForPurges]</InnerMethodInvoke>
                <InnerMethodInvoke>null;REPORT;["purging again the purges rolled back earlier"]</InnerMethodInvoke>
                <InnerMethodInvoke>page;purgeAtSlot;[1, 2, logDataForPurges]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchBySlot;[page, 0, REC_NULL, false, true]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchBySlot;[page, 1, REC_NULL, true, true]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchBySlot;[page, 2, REC_NULL, false, true]</InnerMethodInvoke>
                <InnerMethodInvoke>page;purgeAtSlot;[0, 3, logDataForPurges]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_abort;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>page;purgeAtSlot;[2, 3, logDataForPurges]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchBySlot;[page, 0, REC_NULL, false, true]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchBySlot;[page, 1, REC_NULL, false, true]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchBySlot;[page, 0, REC_NULL, false, true]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkFetchBySlot;[page, 1, REC_NULL, false, true]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["P709"]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_dropContainer;[t, 0, cid]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>P710</MethodName>
            <MethodComment>/** 
 * Test space reclaimation - purging of a long rows with a rollback and purging againg with no data logging for purges
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>long [segment=0]</InnerVar>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,segment,4096)]</InnerVar>
                <InnerVar>ContainerHandle [c=t_util.t_openContainer(t,segment,cid,true)]</InnerVar>
                <InnerVar>Page [page=t_util.t_getPage(c,ContainerHandle.FIRST_PAGE_NUMBER)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;PASS;["P710"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>P711</MethodName>
            <MethodComment>/** 
 * Test space reclaimation - purging of a row with serveral long columns rollback and repurge them again.
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>long [segment=0]</InnerVar>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,segment,4096)]</InnerVar>
                <InnerVar>ContainerHandle [c=t_util.t_openContainer(t,segment,cid,true)]</InnerVar>
                <InnerVar>Page [page=t_util.t_getPage(c,ContainerHandle.FIRST_PAGE_NUMBER)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;PASS;["P711"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>L001</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>int [loop=10]</InnerVar>
                <InnerVar>int [logSize=(threadNumber == 0) ? 50000 : 50]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>CP001</MethodName>
            <MethodComment>/** 
 * Test checkpoint
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>ContextManager [previousCM=contextService.getCurrentContextManager()]</InnerVar>
                <InnerVar>Transaction [longtran=null]</InnerVar>
                <InnerVar>ContextManager [cm1=null]</InnerVar>
                <InnerVar>Transaction [t1=null]</InnerVar>
                <InnerVar>ContextManager [cm2=null]</InnerVar>
                <InnerVar>Transaction [t2=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>TC001</MethodName>
            <MethodComment>/** 
 * TC001 - Test the drop on commit mode for temp containers.
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,ContainerHandle.TEMPORARY_SEGMENT)]</InnerVar>
                <InnerVar>ContainerHandle [c=t_util.t_openContainer(t,ContainerHandle.TEMPORARY_SEGMENT,cid,true)]</InnerVar>
                <InnerVar>ContainerKey [id=new ContainerKey(ContainerHandle.TEMPORARY_SEGMENT,cid)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t_util;setOpenMode;[openMode | ContainerHandle.MODE_DROP_ON_COMMIT]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>c;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>c;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;setOpenMode;[openMode | ContainerHandle.MODE_DROP_ON_COMMIT]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_abort;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["TC001"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>populateTempTable</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>ContainerHandle</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Page [page=t_util.t_getPage(c,ContainerHandle.FIRST_PAGE_NUMBER)]</InnerVar>
                <InnerVar>RecordHandle [rh]</InnerVar>
                <InnerVar>T_RawStoreRow [row]</InnerVar>
                <InnerVar>int[] [recordCount={0,0,0}]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t_util;t_checkEmptyPage;[page]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>TC002</MethodName>
            <MethodComment>/** 
 * A clone of P002 for temporary containers. Insert rows on the first page until the page is full, then add a page and repeat the test (for a total of three pages with full rows). Fetch the rows back by handle methods. Commit or abort the transaction, and see if table is empty. Can be used as follows: &lt;PRE&gt; mode                   doCommit TRUNCATE_ON_COMMIT     true       Ensure the table has only one empty page after commit TRUNCATE_ON_COMMIT     false      Ensure the table has only one empty page after abort 0                      false      Ensure the table has only one empty page after abort &lt;/PRE&gt;
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mode</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>doCommit</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,ContainerHandle.TEMPORARY_SEGMENT)]</InnerVar>
                <InnerVar>ContainerHandle [c=t_util.t_openContainer(t,ContainerHandle.TEMPORARY_SEGMENT,cid,true)]</InnerVar>
                <InnerVar>int[] [recordCount=populateTempTable(c)]</InnerVar>
                <InnerVar>long [pageNumber=ContainerHandle.FIRST_PAGE_NUMBER]</InnerVar>
                <InnerVar>Page [page=t_util.t_getPage(c,ContainerHandle.FIRST_PAGE_NUMBER)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;REPORT;["TC002 container id = " + cid]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;setOpenMode;[openMode | mode]</InnerMethodInvoke>
                <InnerMethodInvoke>c;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;setOpenMode;[openMode]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_checkEmptyPage;[page]</InnerMethodInvoke>
                <InnerMethodInvoke>page;unlatch;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["TC002 " + mode + " "+ doCommit]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>TC003</MethodName>
            <MethodComment>/** 
 * Add a number of rows to a temp table opened in various modes, and drop it before commit/abort.
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mode</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>doCommit</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,ContainerHandle.TEMPORARY_SEGMENT)]</InnerVar>
                <InnerVar>ContainerHandle [c=t_util.t_openContainer(t,ContainerHandle.TEMPORARY_SEGMENT,cid,true)]</InnerVar>
                <InnerVar>ContainerKey [id=new ContainerKey(ContainerHandle.TEMPORARY_SEGMENT,cid)]</InnerVar>
                <InnerVar>ContainerHandle [ce=t.openContainer(id,ContainerHandle.MODE_READONLY)]</InnerVar>
                <InnerVar>ContainerHandle [cd=t.openContainer(id,ContainerHandle.MODE_READONLY)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;REPORT;["TC003 container id = " + cid]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;setOpenMode;[openMode | mode]</InnerMethodInvoke>
                <InnerMethodInvoke>null;populateTempTable;[c]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_dropContainer;[t, ContainerHandle.TEMPORARY_SEGMENT, cid]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["TC003 " + mode + " "+ doCommit]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>TC004all</MethodName>
            <MethodComment>/** 
 * Open a temp table several times with different modes and ensure the correct behaviour (most severe open wins).
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int[] [modes={0,ContainerHandle.MODE_DROP_ON_COMMIT,ContainerHandle.MODE_TRUNCATE_ON_COMMIT}]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>TC004</MethodName>
            <MethodComment>/** 
 * Open a temp table several time swith different modes and ensure the correct behaviour (most severe open wins).
 * @exception T_Fail Unexpected behaviour from the API
 * @exception StandardException Unexpected exception from the implementation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mode1</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mode2</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mode3</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>doCommit</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>closeThem</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [testInfo="TC004 mode1 " + mode1 + " mode2 "+ mode2+ " mode3 "+ mode3+ " doCommit "+ doCommit+ " closeThem "+ closeThem]</InnerVar>
                <InnerVar>Transaction [t=t_util.t_startTransaction()]</InnerVar>
                <InnerVar>long [cid=t_util.t_addContainer(t,ContainerHandle.TEMPORARY_SEGMENT)]</InnerVar>
                <InnerVar>ContainerHandle [c1=t_util.t_openContainer(t,ContainerHandle.TEMPORARY_SEGMENT,cid,true)]</InnerVar>
                <InnerVar>ContainerHandle [c2=t_util.t_openContainer(t,ContainerHandle.TEMPORARY_SEGMENT,cid,true)]</InnerVar>
                <InnerVar>ContainerHandle [c3=t_util.t_openContainer(t,ContainerHandle.TEMPORARY_SEGMENT,cid,true)]</InnerVar>
                <InnerVar>int [fullMode=mode1 | mode2 | mode3]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;REPORT;["start " + testInfo]</InnerMethodInvoke>
                <InnerMethodInvoke>null;REPORT;["TC004 container id = " + cid]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;setOpenMode;[openMode | mode1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;populateTempTable;[c1]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;setOpenMode;[openMode | mode2]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;setOpenMode;[openMode | mode3]</InnerMethodInvoke>
                <InnerMethodInvoke>t_util;t_commit;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>t;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;[testInfo]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getContextService</MethodName>
            <MethodComment>/** 
 * Privileged lookup of the ContextService. Must be private so that user code can't call this entry point.
 */
</MethodComment>
            <ReturnType>ContextService</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ContextService</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMonitor</MethodName>
            <MethodComment>/** 
 * Privileged Monitor lookup. Must be private so that user code can't call this entry point.
 */
</MethodComment>
            <ReturnType>ModuleFactory</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ModuleFactory</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createPersistentService</MethodName>
            <MethodComment>/** 
 * Privileged startup. Must be private so that user code can't call this entry point.
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>factoryInterface</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>serviceName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>properties</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>