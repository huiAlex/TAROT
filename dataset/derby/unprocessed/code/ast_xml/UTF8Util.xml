<Class>
    <Id>1067</Id>
    <Package>org.apache.derby.iapi.util</Package>
    <ClassName>UTF8Util</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>UTF8Util  /** 
 * Utility methods for handling UTF-8 encoded byte streams. &lt;p&gt; Note that when the  {@code skip} methods mention detection of invalidUTF-8 encodings, it only checks the first byte of a character. For multibyte encodings, the second and third byte are not checked for correctness, just skipped and ignored.
 * @see java.io.DataInput
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>byteCount</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>charCount</FieldName>
            <FieldType>long</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>UTF8Util</MethodName>
            <MethodComment>/** 
 * This class cannot be instantiated. 
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>skipUntilEOF</MethodName>
            <MethodComment>/** 
 * Skip until the end-of-stream is reached.
 * @param in byte stream with UTF-8 encoded characters
 * @return The number of characters skipped.
 * @throws IOException if reading from the stream fails
 * @throws UTFDataFormatException if an invalid UTF-8 encoding is detected
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>in</ParamName>
                    <ParamType>InputStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>skipFully</MethodName>
            <MethodComment>/** 
 * Skip the requested number of characters from the stream. &lt;p&gt;
 * @param in byte stream with UTF-8 encoded characters
 * @param charsToSkip number of characters to skip
 * @return The number of bytes skipped.
 * @throws EOFException if end-of-stream is reached before the requestednumber of characters are skipped
 * @throws IOException if reading from the stream fails
 * @throws UTFDataFormatException if an invalid UTF-8 encoding is detected
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>in</ParamName>
                    <ParamType>InputStream</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>charsToSkip</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>SkipCount [skipped=internalSkip(in,charsToSkip)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>EOFException</ExceptionType>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>internalSkip</MethodName>
            <MethodComment>/** 
 * Skip characters in the stream. &lt;p&gt; Note that a smaller number than requested might be skipped if the end-of-stream is reached before the specified number of characters has been decoded. It is up to the caller to decide if this is an error or not. For instance, when determining the character length of a stream, &lt;code&gt;Long.MAX_VALUE&lt;/code&gt; could be passed as the requested number of characters to skip.
 * @param in byte stream with UTF-8 encoded characters
 * @param charsToSkip the number of characters to skip
 * @return A long array with counts; the characters skipped at position&lt;code&gt;CHAR_COUNT&lt;/code&gt;, the bytes skipped at position &lt;code&gt;BYTE_COUNT&lt;/code&gt;. Note that the number of characters skipped may be smaller than the requested number.
 * @throws IOException if reading from the stream fails
 * @throws UTFDataFormatException if an invalid UTF-8 encoding is detected
 */
</MethodComment>
            <ReturnType>SkipCount</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>in</ParamName>
                    <ParamType>InputStream</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>charsToSkip</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>long [charsSkipped=0]</InnerVar>
                <InnerVar>long [bytesSkipped=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>SkipCount</MethodName>
            <MethodComment>/** 
 * Creates a holder for the specified skip counts.
 * @param byteCount number of bytes
 * @param charCount number of characters
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>charCount</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>byteCount</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>charsSkipped</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>bytesSkipped</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>