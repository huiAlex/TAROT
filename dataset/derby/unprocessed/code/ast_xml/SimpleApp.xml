<Class>
    <Id>2061</Id>
    <ClassName>SimpleApp</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>SimpleApp  /** 
 * &lt;p&gt; This sample program is a minimal Java application showing JDBC access to a Derby database.&lt;/p&gt; &lt;p&gt; Instructions for how to run this program are given in &lt;A HREF=example.html&gt;example.html&lt;/A&gt;, by default located in the same directory as this source file ($DERBY_HOME/demo/programs/simple/).&lt;/p&gt; &lt;p&gt; Derby applications can run against Derby running in an embedded or a client/server framework.&lt;/p&gt; &lt;p&gt; When Derby runs in an embedded framework, the JDBC application and Derby run in the same Java Virtual Machine (JVM). The application starts up the Derby engine.&lt;/p&gt; &lt;p&gt; When Derby runs in a client/server framework, the application runs in a different JVM from Derby. The connectivity framework (in this case the Derby Network Server) provides network connections. The client driver is loaded automatically.&lt;/p&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>framework</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>protocol</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>main</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Starts the demo by creating a new instance of this class and running the &lt;code&gt;go()&lt;/code&gt; method.&lt;/p&gt; &lt;p&gt; When you run this application, you may give one of the following arguments: &lt;ul&gt; &lt;li&gt;&lt;code&gt;embedded&lt;/code&gt; - default, if none specified. Will use Derby's embedded driver. This driver is included in the derby.jar file.&lt;/li&gt; &lt;li&gt;&lt;code&gt;derbyclient&lt;/code&gt; - will use the Derby client driver to access the Derby Network Server. This driver is included in the derbyclient.jar file.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt; When you are using a client/server framework, the network server must already be running when trying to obtain client connections to Derby. This demo program will will try to connect to a network server on this host (the localhost), see the &lt;code&gt;protocol&lt;/code&gt; instance variable. &lt;/p&gt; &lt;p&gt; When running this demo, you must include the correct driver in the classpath of the JVM. See &lt;a href="example.html"&gt;example.html&lt;/a&gt; for details. &lt;/p&gt;
 * @param args This program accepts one optional argument specifying whichconnection framework (JDBC driver) to use (see above). The default is to use the embedded JDBC driver.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>new SimpleApp();go;[args]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["SimpleApp finished"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>go</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Starts the actual demo activities. This includes creating a database by making a connection to Derby (automatically loading the driver), creating a table in the database, and inserting, updating and retrieving some data. Some of the retrieved data is then verified (compared) against the expected results. Finally, the table is deleted and, if the embedded framework is used, the database is shut down.&lt;/p&gt; &lt;p&gt; Generally, when using a client/server framework, other clients may be (or want to be) connected to the database, so you should be careful about doing shutdown unless you know that no one else needs to access the database until it is rebooted. That is why this demo will not shut down the database unless it is running Derby embedded.&lt;/p&gt;
 * @param args - Optional argument specifying which framework or JDBC driverto use to connect to Derby. Default is the embedded framework, see the &lt;code&gt;main()&lt;/code&gt; method for details.
 * @see #main(String[])
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=null]</InnerVar>
                <InnerVar>ArrayList&lt;Statement&gt; [statements=new ArrayList&lt;Statement&gt;()]</InnerVar>
                <InnerVar>PreparedStatement [psInsert]</InnerVar>
                <InnerVar>PreparedStatement [psUpdate]</InnerVar>
                <InnerVar>Statement [s]</InnerVar>
                <InnerVar>ResultSet [rs=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;parseArguments;[args]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["SimpleApp starting in " + framework + " mode"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reportFailure</MethodName>
            <MethodComment>/** 
 * Reports a data verification failure to System.err with the given message.
 * @param message A message describing what failed.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>message</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>System.err;println;["\nData verification failed:"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.err;println;['\t' + message]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>printSQLException</MethodName>
            <MethodComment>/** 
 * Prints details of an SQLException chain to &lt;code&gt;System.err&lt;/code&gt;. Details included are SQL State, Error code, Exception message.
 * @param e the SQLException from which to print details.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>e</ParamName>
                    <ParamType>SQLException</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseArguments</MethodName>
            <MethodComment>/** 
 * Parses the arguments given and sets the values of this class's instance variables accordingly - that is, which framework to use, the name of the JDBC driver class, and which connection protocol to use. The protocol should be used as part of the JDBC URL when connecting to Derby. &lt;p&gt; If the argument is "embedded" or invalid, this method will not change anything, meaning that the default values will be used.&lt;/p&gt; &lt;p&gt;
 * @param args JDBC connection framework, either "embedded" or "derbyclient".Only the first argument will be considered, the rest will be ignored.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>