<Class>
    <Id>750</Id>
    <Package>org.apache.derby.iapi.sql</Package>
    <ClassName>ResultDescription</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ResultDescription  /** 
 * The ResultDescription interface provides methods to get metadata on the results returned by a statement.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getStatementType</MethodName>
            <MethodComment>/** 
 * Returns an identifier that tells what type of statement has been executed. This can be used to determine what other methods to call to get the results back from a statement. For example, a SELECT statement returns rows and columns, while other statements don't, so you would only call getColumnCount() or getColumnType() for SELECT statements.
 * @return	A String identifier telling what type of statement thisis.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getColumnCount</MethodName>
            <MethodComment>/** 
 * Returns the number of columns in the result set.
 * @return	The number of columns in the result set.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getColumnInfo</MethodName>
            <MethodComment>/** 
 * Return information about all the columns.
 */
</MethodComment>
            <ReturnType>ResultColumnDescriptor[]</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getColumnInfo</MethodName>
            <MethodComment>/** 
 * Return the information about a single column (0-based indexing)
 */
</MethodComment>
            <ReturnType>ResultColumnDescriptor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>idx</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getColumnDescriptor</MethodName>
            <MethodComment>/** 
 * Returns a ResultColumnDescriptor for the column, given the ordiinal position of the column. NOTE - position is 1-based.
 * @param position	The oridinal position of a column in theResultSet.
 * @return		A ResultColumnDescriptor describing thecolumn in the ResultSet.
 */
</MethodComment>
            <ReturnType>ResultColumnDescriptor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>position</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>truncateColumns</MethodName>
            <MethodComment>/** 
 * Get a new result description that has been truncated from input column number.   If the input column is 5, then columns 5 to getColumnCount() are removed. The new ResultDescription points to the same ColumnDescriptors (this method performs a shallow copy. The saved JDBC ResultSetMetaData will not be copied.
 * @param truncateFrom the starting column to remove,1-based.
 * @return a new ResultDescription
 */
</MethodComment>
            <ReturnType>ResultDescription</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>truncateFrom</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setMetaData</MethodName>
            <MethodComment>/** 
 * Set the JDBC ResultSetMetaData for this ResultDescription. A ResultSetMetaData object can be saved in the statement plan using this method. This only works while the ResultSetMetaData api does not contain a getConnection() method or a close method. &lt;BR&gt; If this object already has a saved meta data object this call will do nothing. Due to synchronization the saved ResultSetMetaData object may not be the one passed in, ie. if two threads call this concurrently, only one will be saved. It is assumed the JDBC layer passes in a ResultSetMetaData object based upon this.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rsmd</ParamName>
                    <ParamType>java.sql.ResultSetMetaData</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMetaData</MethodName>
            <MethodComment>/** 
 * Get the saved JDBC ResultSetMetaData. Will return null if setMetaData() has not been called on this object. The caller then should manufacture a ResultSetMetaData object and pass it into setMetaData.
 */
</MethodComment>
            <ReturnType>java.sql.ResultSetMetaData</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findColumnInsenstive</MethodName>
            <MethodComment>/** 
 * Return the position of the column matching the passed in names following the JDBC rules for ResultSet.getXXX and updateXXX. Rules are the matching is case insensitive and the insensitive name matches the first column found that matches (starting at postion 1).
 * @param name
 * @return Position of the column (1-based), -1 if no match.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>