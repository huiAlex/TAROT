<Class>
    <Id>591</Id>
    <Package>org.apache.derby.impl.sql.execute</Package>
    <ClassName>ScrollInsensitiveResultSet</ClassName>
    <SuperClass>NoPutResultSetImpl</SuperClass>
    <SuperInterfaceList>
        <SuperInterface>CursorResultSet</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ScrollInsensitiveResultSet  /** 
 * Provide insensitive scrolling functionality for the underlying result set.  We build a disk backed hash table of rows as the  user scrolls forward, with the position as the key. For read-only result sets the hash table will containg the following columns: &lt;pre&gt; +-------------------------------+ | KEY                           | +-------------------------------+ | Row                           | +-------------------------------+ &lt;/pre&gt; where key is the position of the row in the result set and row is the data. And for updatable result sets it will contain: &lt;pre&gt; +-------------------------------+ | KEY                           | [0] +-------------------------------+ | RowLocation                   | [POS_ROWLOCATION] +-------------------------------+ | Deleted                       | [POS_ROWDELETED] +-------------------------------+ | Updated                       | [POS_ROWUPDATED] +-------------------------------+ | Row                           | [extraColumns ... n] +-------------------------------+ &lt;/pre&gt; where key is the position of the row in the result set, rowLocation is the row location of that row in the Heap, Deleted indicates whether the row has been deleted, Updated indicates whether the row has been updated, and row is the data.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>source</FieldName>
            <FieldType>NoPutResultSet</FieldType>
        </Field>
        <Field>
            <FieldName>sourceRowWidth</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>ht</FieldName>
            <FieldType>BackingStoreHashtable</FieldType>
        </Field>
        <Field>
            <FieldName>resultRow</FieldName>
            <FieldType>ExecRow</FieldType>
        </Field>
        <Field>
            <FieldName>positionInSource</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>currentPosition</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>lastPosition</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>seenFirst</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>seenLast</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>beforeFirst</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>afterLast</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>numFromHashTable</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>numToHashTable</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>maxRows</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>keepAfterCommit</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>extraColumns</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>positionInHashTable</FieldName>
            <FieldType>SQLInteger</FieldType>
        </Field>
        <Field>
            <FieldName>target</FieldName>
            <FieldType>CursorResultSet</FieldType>
        </Field>
        <Field>
            <FieldName>needsRepositioning</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>POS_ROWLOCATION</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>POS_ROWDELETED</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>POS_ROWUPDATED</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>LAST_EXTRA_COLUMN</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ScrollInsensitiveResultSet</MethodName>
            <MethodComment>/** 
 * Constructor for a ScrollInsensitiveResultSet
 * @param source					The NoPutResultSet from which to get rowsto scroll through
 * @param activation				The activation for this execution
 * @param resultSetNumber			The resultSetNumber
 * @param sourceRowWidth			# of columns in the source row
 * @exception StandardException	on error
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>source</ParamName>
                    <ParamType>NoPutResultSet</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>activation</ParamName>
                    <ParamType>Activation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>resultSetNumber</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sourceRowWidth</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>optimizerEstimatedRowCount</ParamName>
                    <ParamType>double</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>optimizerEstimatedCost</ParamName>
                    <ParamType>double</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;recordConstructorTime;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>openCore</MethodName>
            <MethodComment>/** 
 * open a scan on the source. scan parameters are evaluated at each open, so there is probably some way of altering their values...
 * @exception StandardException thrown on failure 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int[] [keyCols=new int[]{0}]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>source;openCore;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setBeforeFirstRow;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reopenCore</MethodName>
            <MethodComment>/** 
 * reopen a scan on the table. scan parameters are evaluated at each open, so there is probably some way of altering their values...
 * @exception StandardException thrown if cursor finished.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>boolean [constantEval=true]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setBeforeFirstRow;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAbsoluteRow</MethodName>
            <MethodComment>/** 
 * Returns the row at the absolute position from the query,  and returns NULL when there is no such position. (Negative position means from the end of the result set.) Moving the cursor to an invalid position leaves the cursor positioned either before the first row (negative position) or after the last row (positive position). NOTE: An exception will be thrown on 0.
 * @param row	The position.
 * @return	The row at the absolute position, or NULL if no such position.
 * @exception StandardException		Thrown on failure
 * @see org.apache.derby.iapi.sql.Row
 */
</MethodComment>
            <ReturnType>ExecRow</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;attachStatementContext;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRelativeRow</MethodName>
            <MethodComment>/** 
 * Returns the row at the relative position from the current cursor position, and returns NULL when there is no such position. (Negative position means toward the beginning of the result set.) Moving the cursor to an invalid position leaves the cursor positioned either before the first row (negative position) or after the last row (positive position). NOTE: 0 is valid. NOTE: An exception is thrown if the cursor is not currently positioned on a row.
 * @param row	The position.
 * @return	The row at the relative position, or NULL if no such position.
 * @exception StandardException		Thrown on failure
 * @see org.apache.derby.iapi.sql.Row
 */
</MethodComment>
            <ReturnType>ExecRow</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;attachStatementContext;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setBeforeFirstRow</MethodName>
            <MethodComment>/** 
 * Sets the current position to before the first row and returns NULL because there is no current row.
 * @return	NULL.
 * @see org.apache.derby.iapi.sql.Row
 */
</MethodComment>
            <ReturnType>ExecRow</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFirstRow</MethodName>
            <MethodComment>/** 
 * Returns the first row from the query, and returns NULL when there are no rows.
 * @return	The first row, or NULL if no rows.
 * @exception StandardException		Thrown on failure
 * @see org.apache.derby.iapi.sql.Row
 */
</MethodComment>
            <ReturnType>ExecRow</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;attachStatementContext;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNextRowCore</MethodName>
            <MethodComment>/** 
 * @exception StandardException thrown on failure 
 */
</MethodComment>
            <ReturnType>ExecRow</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>ExecRow [result=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setCurrentRow;[result]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPreviousRow</MethodName>
            <MethodComment>/** 
 * Returns the previous row from the query, and returns NULL when there are no more previous rows.
 * @return	The previous row, or NULL if no more previous rows.
 * @exception StandardException		Thrown on failure
 * @see org.apache.derby.iapi.sql.Row
 */
</MethodComment>
            <ReturnType>ExecRow</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLastRow</MethodName>
            <MethodComment>/** 
 * Returns the last row from the query, and returns NULL when there are no rows.
 * @return	The last row, or NULL if no rows.
 * @exception StandardException		Thrown on failure
 * @see org.apache.derby.iapi.sql.Row
 */
</MethodComment>
            <ReturnType>ExecRow</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setAfterLastRow</MethodName>
            <MethodComment>/** 
 * Sets the current position to after the last row and returns NULL because there is no current row.
 * @return	NULL.
 * @exception StandardException		Thrown on failure
 * @see org.apache.derby.iapi.sql.Row
 */
</MethodComment>
            <ReturnType>ExecRow</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkRowPosition</MethodName>
            <MethodComment>/** 
 * Determine if the cursor is before the first row in the result  set.   
 * @return true if before the first row, false otherwise. Returnsfalse when the result set contains no rows.
 * @exception StandardException Thrown on error.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>isType</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRowNumber</MethodName>
            <MethodComment>/** 
 * Returns the row number of the current row.  Row numbers start from 1 and go to 'n'.  Corresponds to row numbering used to position current row in the result set (as per JDBC).
 * @return	the row number, or 0 if not on a row
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNextRowFromSource</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ExecRow</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>ExecRow [sourceRow=null]</InnerVar>
                <InnerVar>ExecRow [result=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>close</MethodName>
            <MethodComment>/** 
 * If the result set has been opened, close the open scan.
 * @exception StandardException thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setBeforeFirstRow;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>finish</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>source;finish;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;finishAndRTS;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTimeSpent</MethodName>
            <MethodComment>/** 
 * Return the total amount of time spent in this ResultSet
 * @param type	CURRENT_RESULTSET_ONLY - time spent only in this ResultSetENTIRE_RESULTSET_TREE  - time spent in this ResultSet and below.
 * @return long		The total amount of time spent (in milliseconds).
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>long [totTime=constructorTime + openTime + nextTime+ closeTime]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRowLocation</MethodName>
            <MethodComment>/** 
 * Gets information from its source. We might want to have this take a CursorResultSet in its constructor some day, instead of doing a cast here?
 * @see CursorResultSet
 * @return the row location of the current cursor row.
 * @exception StandardException thrown on failure 
 */
</MethodComment>
            <ReturnType>RowLocation</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCurrentRow</MethodName>
            <MethodComment>/** 
 * Gets information from last getNextRow call.
 * @see CursorResultSet
 * @return the last row returned.
 */
</MethodComment>
            <ReturnType>ExecRow</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addRowToHashTable</MethodName>
            <MethodComment>/** 
 * Add a row to the backing hash table, keyed on position. When a row gets updated when using scrollable insensitive updatable result sets, the old entry for the row will be deleted from the hash  table and this method will be called to add the new values for the row to the hash table, with the parameter rowUpdated = true so as to mark  the row as updated. The latter is done in order to implement  detectability of own changes for result sets of this type.
 * @param sourceRow	The row to add.
 * @param position The key
 * @param rowLoc The rowLocation of the row to add.
 * @param rowUpdated Indicates whether the row has been updated.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sourceRow</ParamName>
                    <ParamType>ExecRow</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>position</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rowLoc</ParamName>
                    <ParamType>RowLocation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rowUpdated</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DataValueDescriptor[] [hashRowArray=new DataValueDescriptor[sourceRowWidth + extraColumns]]</InnerVar>
                <InnerVar>DataValueDescriptor[] [sourceRowArray=sourceRow.getRowArray()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>System;arraycopy;[sourceRowArray, 0, hashRowArray, extraColumns, sourceRowArray.length]</InnerMethodInvoke>
                <InnerMethodInvoke>ht;putRow;[true, hashRowArray, null]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRowFromHashTable</MethodName>
            <MethodComment>/** 
 * Get the row at the specified position from the hash table.
 * @param position	The specified position.
 * @return	The row at that position.
 * @exception StandardException thrown on failure 
 */
</MethodComment>
            <ReturnType>ExecRow</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>position</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DataValueDescriptor[] [hashRowArray=getCurrentRowFromHashtable()]</InnerVar>
                <InnerVar>DataValueDescriptor[] [resultRowArray=new DataValueDescriptor[hashRowArray.length - extraColumns]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>positionInHashTable;setValue;[position]</InnerMethodInvoke>
                <InnerMethodInvoke>System;arraycopy;[hashRowArray, extraColumns, resultRowArray, 0, resultRowArray.length]</InnerMethodInvoke>
                <InnerMethodInvoke>resultRow;setRowArray;[resultRowArray]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setCurrentRow;[resultRow]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRowArrayFromHashTable</MethodName>
            <MethodComment>/** 
 * Get the row data at the specified position  from the hash table.
 * @param position	The specified position.
 * @return	The row data at that position.
 * @exception StandardException thrown on failure 
 */
</MethodComment>
            <ReturnType>DataValueDescriptor[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>position</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DataValueDescriptor[] [hashRowArray=getCurrentRowFromHashtable()]</InnerVar>
                <InnerVar>DataValueDescriptor[] [resultRowArray=new DataValueDescriptor[hashRowArray.length - extraColumns]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>positionInHashTable;setValue;[position]</InnerMethodInvoke>
                <InnerMethodInvoke>System;arraycopy;[hashRowArray, extraColumns, resultRowArray, 0, resultRowArray.length]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>positionInLastFetchedRow</MethodName>
            <MethodComment>/** 
 * Positions the cursor in the last fetched row. This is done before navigating to a row that has not previously been fetched, so that getNextRowCore() will re-start from where it stopped.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>updateRow</MethodName>
            <MethodComment>/** 
 * @see NoPutResultSet#updateRow Sets the updated column of the hash table to true and updates the row in the hash table with the new values for the row.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>ExecRow</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rowChanger</ParamName>
                    <ParamType>RowChanger</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ProjectRestrictResultSet [prRS=null]</InnerVar>
                <InnerVar>DataValueDescriptor[] [hashRowArray=getCurrentRowFromHashtable()]</InnerVar>
                <InnerVar>RowLocation [rowLoc=(RowLocation)hashRowArray[POS_ROWLOCATION]]</InnerVar>
                <InnerVar>int[] [map]</InnerVar>
                <InnerVar>ExecRow [newRow=new ValueRow(map.length)]</InnerVar>
                <InnerVar>DataValueDescriptor[] [backedData=getRowArrayFromHashTable(currentPosition)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>positionInHashTable;setValue;[currentPosition]</InnerMethodInvoke>
                <InnerMethodInvoke>ht;remove;[new SQLInteger(currentPosition)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addRowToHashTable;[newRow, currentPosition, rowLoc, true]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>markRowAsDeleted</MethodName>
            <MethodComment>/** 
 * @see NoPutResultSet#markRowAsDeleted Sets the deleted column of the hash table to true in the current row.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>DataValueDescriptor[] [hashRowArray=getCurrentRowFromHashtable()]</InnerVar>
                <InnerVar>RowLocation [rowLoc=(RowLocation)hashRowArray[POS_ROWLOCATION]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>positionInHashTable;setValue;[currentPosition]</InnerMethodInvoke>
                <InnerMethodInvoke>ht;remove;[new SQLInteger(currentPosition)]</InnerMethodInvoke>
                <InnerMethodInvoke>((SQLBoolean)hashRowArray[POS_ROWDELETED]);setValue;[true]</InnerMethodInvoke>
                <InnerMethodInvoke>ht;putRow;[true, hashRowArray, null]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isDeleted</MethodName>
            <MethodComment>/** 
 * Returns TRUE if the row was been deleted within the transaction, otherwise returns FALSE
 * @return True if the row has been deleted, otherwise false
 * @exception StandardException on error
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isUpdated</MethodName>
            <MethodComment>/** 
 * Returns TRUE if the row was been updated within the transaction, otherwise returns FALSE
 * @return True if the row has been deleted, otherwise false
 * @exception StandardException on error
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isForUpdate</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCurrentRowFromHashtable</MethodName>
            <MethodComment>/** 
 * Get the column array from the current position in the hash table 
 */
</MethodComment>
            <ReturnType>DataValueDescriptor[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>