<Class>
    <Id>534</Id>
    <Package>org.apache.derby.impl.sql.catalog</Package>
    <ClassName>DropDependencyFilter</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>TupleFilter</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>DropDependencyFilter  /** 
 * A Filter to qualify tuples coming from a scan of SYSDEPENDS. Tuples qualify if they have the right providerID.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>providerID</FieldName>
            <FieldType>UUID</FieldType>
        </Field>
        <Field>
            <FieldName>uuidFactory</FieldName>
            <FieldType>UUIDFactory</FieldType>
        </Field>
        <Field>
            <FieldName>dataValueFactory</FieldName>
            <FieldType>DataValueFactory</FieldType>
        </Field>
        <Field>
            <FieldName>trueValue</FieldName>
            <FieldType>BooleanDataValue</FieldType>
        </Field>
        <Field>
            <FieldName>falseValue</FieldName>
            <FieldType>BooleanDataValue</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>DropDependencyFilter</MethodName>
            <MethodComment>/** 
 * Construct a TupleFilter to qualify SYSDEPENDS rows with the designated providerID.
 * @param providerID	UUID of provider. Tuples with this ID qualify.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>providerID</ParamName>
                    <ParamType>UUID</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>init</MethodName>
            <MethodComment>/** 
 * Initialize a Filter with a vector of parameters. This is a NOP. We initialize this filter at Constructor time.
 * @param parameters	An ExecRow of parameter values
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parameters</ParamName>
                    <ParamType>ExecRow</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>execute</MethodName>
            <MethodComment>/** 
 * Pump a SYSDEPENDS row through the Filter. If the providerID of the row matches our providerID, we return true. Otherwise we return false.
 * @param currentRow		SYSDEPENDS row
 * @return	True if the row has our providerID. False otherwise.
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>BooleanDataValue</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>currentRow</ParamName>
                    <ParamType>ExecRow</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DataValueDescriptor [col=currentRow.getColumn(SYSDEPENDSRowFactory.SYSDEPENDS_PROVIDERID)]</InnerVar>
                <InnerVar>String [providerIDstring=col.getString()]</InnerVar>
                <InnerVar>UUID [providerUUID=getUUIDFactory().recreateUUID(providerIDstring)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getUUIDFactory</MethodName>
            <MethodComment>/** 
 * Get the UUID factory
 * @return	the UUID factory
 * @exception StandardException thrown on failure
 */
</MethodComment>
            <ReturnType>UUIDFactory</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTrueValue</MethodName>
            <MethodComment>/** 
 * Gets a BooleanDataValue representing TRUE.
 * @return	a TRUE value
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>BooleanDataValue</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFalseValue</MethodName>
            <MethodComment>/** 
 * Gets a BooleanDataValue representing FALSE
 * @return	a FALSE value
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>BooleanDataValue</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>