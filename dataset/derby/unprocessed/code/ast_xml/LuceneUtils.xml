<Class>
    <Id>572</Id>
    <Package>org.apache.derby.optional.api</Package>
    <ClassName>LuceneUtils</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>LuceneUtils  /** 
 * &lt;p&gt; Utility methods for the Lucene optional tool. &lt;/p&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>TEXT_FIELD_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>_analyzerClasses</FieldName>
            <FieldType>HashMap</FieldType>
        </Field>
        <Field>
            <FieldName>_analyzerClasses</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>currentVersion</MethodName>
            <MethodComment>/** 
 * Get the version of the Lucene library on the classpath. 
 */
</MethodComment>
            <ReturnType>Version</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Version [retval=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>defaultAnalyzer</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Get the default Analyzer associated with the database Locale. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>Analyzer</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAnalyzerForLocale</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Get the Analyzer associated with the given Locale. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>Analyzer</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>locale</ParamName>
                    <ParamType>Locale</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [language=locale.getLanguage()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>standardAnalyzer</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Get the StandardAnalyzer for parsing text. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>Analyzer</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>defaultQueryParser</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Get the default, classic QueryParser. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>QueryParser</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>version</ParamName>
                    <ParamType>Version</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fieldNames</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>analyzer</ParamName>
                    <ParamType>Analyzer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>defaultIndexDescriptor</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Get the default index descriptor. This has a single field named TEXT, a defaultAnalyzer() and a defaultQueryParser(). &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>LuceneIndexDescriptor</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>storeAnalyzerClass</MethodName>
            <MethodComment>/** 
 * Store an Analyzer class in the HashMap of Analyzers, keyed by language code 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>analyzerClass</ParamName>
                    <ParamType>? extends Analyzer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>_analyzerClasses;put;[getLanguageCode(analyzerClass), analyzerClass]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLanguageCode</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Get the language code for a Lucene Analyzer. Each of the Analyzers lives in a package whose last leg is the language code. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>analyzerClass</ParamName>
                    <ParamType>? extends Analyzer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [className=analyzerClass.getName()]</InnerVar>
                <InnerVar>String [packageName=className.substring(0,className.lastIndexOf("."))]</InnerVar>
                <InnerVar>String [languageCode=packageName.substring(packageName.lastIndexOf(".") + 1,packageName.length())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>DefaultIndexDescriptor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFieldNames</MethodName>
            <MethodComment>/** 
 * Return the default array of field names { TEXT_FIELD_NAME }. 
 */
</MethodComment>
            <ReturnType>String[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAnalyzer</MethodName>
            <MethodComment>/** 
 * Return LuceneUtils.defaultAnalyzer() 
 */
</MethodComment>
            <ReturnType>Analyzer</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getQueryParser</MethodName>
            <MethodComment>/** 
 * Return LuceneUtils.defaultQueryParser(  LuceneUtils.currentVersion(), getFieldNames(), getAnalyzer() ).
 */
</MethodComment>
            <ReturnType>QueryParser</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>