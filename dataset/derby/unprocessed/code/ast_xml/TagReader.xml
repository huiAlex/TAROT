<Class>
    <Id>139</Id>
    <Package>org.apache.derbyBuild</Package>
    <ClassName>TagReader</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>TagReader  /** 
 * &lt;p&gt; This little machine is constructed from an xml/html document/element and is used to parse content inside that element. This machine advances through the element, letting the operator look for substrings. This machine was created to read elements in JIRA's html reports, which are not well-formed xml documents. &lt;/p&gt; &lt;p&gt; To operate the TagReader, keep positioning on substrings, following some pattern which allows you to navigate to the content you need. &lt;/p&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>NOT_FOUND</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>_content</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>_cursor</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>TagReader</MethodName>
            <MethodComment>/** 
 * Wrap a TagReader around a piece of content 
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>content</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;init;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>TagReader</MethodName>
            <MethodComment>/** 
 * Wrap a TagReader around the content siphoned out of a stream 
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>is</ParamName>
                    <ParamType>InputStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringWriter [buffer=new StringWriter()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>is;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;init;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>init</MethodName>
            <MethodComment>/** 
 * Initialization common to all constructors 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;reset;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reset</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Resets the reader to the beginning of the content. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>position</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Starting at the current position, search for a substring in the content. If the substring is found, positions the reader AFTER the substring and returns that new cursor position. If the substring is not found, does not advance the cursor, but returns -1. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tag</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>failIfNotFound</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [retval=NOT_FOUND]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ParseException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getUpTill</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Starting at the current position, search for a substring in the content. If the substring is found, return everything from the cursor up to the start of the substring and position the reader AFTER the substring. If the substring is not found, return null and do not alter the cursor. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tag</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>failIfNotFound</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [oldCursor=_cursor]</InnerVar>
                <InnerVar>int [endIdx=position(tag,failIfNotFound)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ParseException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>