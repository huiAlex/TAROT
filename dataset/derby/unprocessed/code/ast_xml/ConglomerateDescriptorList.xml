<Class>
    <Id>1589</Id>
    <Package>org.apache.derby.iapi.sql.dictionary</Package>
    <ClassName>ConglomerateDescriptorList</ClassName>
    <SuperClass>ArrayList</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getConglomerateDescriptor</MethodName>
            <MethodComment>/** 
 * Get a conglomerate descriptor by its number
 * @param conglomerateNumber	The number of the conglomerate we're looking for
 * @return	The ConglomerateDescriptor if found in this list,null if not found.
 */
</MethodComment>
            <ReturnType>ConglomerateDescriptor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conglomerateNumber</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ConglomerateDescriptor [returnValue=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getConglomerateDescriptors</MethodName>
            <MethodComment>/** 
 * Get an array of conglomerate descriptors with the given conglomerate number.  We get more than one descriptors if duplicate indexes share one conglomerate.
 * @param conglomerateNumber	The number of the conglomerate
 * @return	Array of ConglomerateDescriptors if found in this list,size 0 array if not found.
 */
</MethodComment>
            <ReturnType>ConglomerateDescriptor[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conglomerateNumber</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [size=size(), j=0]</InnerVar>
                <InnerVar>ConglomerateDescriptor[] [draft=new ConglomerateDescriptor[size]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getConglomerateDescriptor</MethodName>
            <MethodComment>/** 
 * Get a conglomerate descriptor by its Name
 * @param conglomerateName	The Name of the conglomerate we're looking for
 * @return	The ConglomerateDescriptor if found in this list,null if not found.
 */
</MethodComment>
            <ReturnType>ConglomerateDescriptor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conglomerateName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ConglomerateDescriptor [returnValue=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getConglomerateDescriptor</MethodName>
            <MethodComment>/** 
 * Get a conglomerate descriptor by its UUID String
 * @param uuid	The UUID of the conglomerate we're looking for
 * @return	The ConglomerateDescriptor if found in this list,null if not found.
 * @exception StandardException thrown on failure
 */
</MethodComment>
            <ReturnType>ConglomerateDescriptor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>uuid</ParamName>
                    <ParamType>UUID</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ConglomerateDescriptor [returnValue=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getConglomerateDescriptors</MethodName>
            <MethodComment>/** 
 * Get an array of conglomerate descriptors by a UUID String.  We get more than one descriptors if duplicate indexes share one conglomerate.
 * @param uuid	The UUID of the conglomerate
 * @return	Array of ConglomerateDescriptors if found in this list,size 0 array if not found.
 */
</MethodComment>
            <ReturnType>ConglomerateDescriptor[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>uuid</ParamName>
                    <ParamType>UUID</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [size=size(), j=0]</InnerVar>
                <InnerVar>ConglomerateDescriptor[] [draft=new ConglomerateDescriptor[size]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>dropConglomerateDescriptor</MethodName>
            <MethodComment>/** 
 * Remove the specified conglomerate descriptor from the conglomerate descriptor list.  If the descriptor is not found, no errors are issued.
 * @param tableID table uuid, ignored
 * @param cgDesc the conglomerate
 * @exception StandardException thrown on failure
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tableID</ParamName>
                    <ParamType>UUID</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cgDesc</ParamName>
                    <ParamType>ConglomerateDescriptor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Iterator&lt;ConglomerateDescriptor&gt; [iterator=iterator()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>dropConglomerateDescriptorByUUID</MethodName>
            <MethodComment>/** 
 * Remove the specified conglomerate descriptor from the conglomerate descriptor list.  If the descriptor is not found, no errors are issued.
 * @param conglomerateID table uuid, ignored
 * @exception StandardException thrown on failure
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conglomerateID</ParamName>
                    <ParamType>UUID</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Iterator&lt;ConglomerateDescriptor&gt; [iterator=iterator()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>