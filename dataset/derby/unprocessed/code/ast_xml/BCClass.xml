<Class>
    <Id>1134</Id>
    <Package>org.apache.derby.impl.services.bytecode</Package>
    <ClassName>BCClass</ClassName>
    <SuperClass>GClass</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>BCClass  /** 
 * ClassBuilder is used to construct a java class's byte array representation. Limitations: No checking for language use violations such as invalid modifiers or duplicate field names. All classes must have a superclass; java.lang.Object must be supplied if there is no superclass. &lt;p&gt; When a class is first created, it has: &lt;ul&gt; &lt;li&gt; a superclass &lt;li&gt; modifiers &lt;li&gt; a name &lt;li&gt; a package &lt;li&gt; no superinterfaces, methods, fields, or constructors &lt;li&gt; an empty static initializer &lt;li&gt; an empty initializer &lt;/ul&gt; &lt;p&gt; MethodBuilder implementations are required to supply a way for Generators to give them code.  Most typically, they may have a stream to which the Generator writes the code that is of the type to satisfy what the Generator is writing. &lt;p&gt; BCClass is a ClassBuilder implementation for generating java bytecode directly.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>limitMsg</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>classHold</FieldName>
            <FieldType>ClassHolder</FieldType>
        </Field>
        <Field>
            <FieldName>superClassName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>name</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>factory</FieldName>
            <FieldType>BCJava</FieldType>
        </Field>
        <Field>
            <FieldName>classType</FieldName>
            <FieldType>Type</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>addField</MethodName>
            <MethodComment>/** 
 * add a field to this class. Fields cannot be initialized here, they must be initialized in the static initializer code (static fields) or in the constructors. &lt;p&gt; static fields also added to this list, with the modifier set appropriately.
 */
</MethodComment>
            <ReturnType>LocalField</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>javaType</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>modifiers</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Type [type=factory.type(javaType)]</InnerVar>
                <InnerVar>ClassMember [field=classHold.addMember(name,type.vmName(),modifiers)]</InnerVar>
                <InnerVar>int [cpi=classHold.addFieldReference(field)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getClassBytecode</MethodName>
            <MethodComment>/** 
 * At the time the class is completed and bytecode generated, if there are no constructors then the default no-arg constructor will be defined.
 */
</MethodComment>
            <ReturnType>ByteArray</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getName</MethodName>
            <MethodComment>/** 
 * the class's unqualified name
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newMethodBuilder</MethodName>
            <MethodComment>/** 
 * a method. Once it is created, thrown exceptions, statements, and local variable declarations must be added to it. It is put into its defining class when it is created. &lt;verbatim&gt; Java: #modifiers #returnType #methodName() {} // modifiers is the | of the JVM constants for // the modifiers such as static, public, etc. &lt;/verbatim&gt; &lt;p&gt; This is used to start a constructor as well; pass in null for the returnType when used in that manner. See java.lang.reflect.Modifiers
 * @param modifiers the | of the Modifiersconstants representing the visibility and control of this method.
 * @param returnType the return type of the method as itsJava language type name.
 * @param methodName the name of the method.
 * @return the method builder.
 */
</MethodComment>
            <ReturnType>MethodBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>modifiers</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>returnType</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>methodName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newMethodBuilder</MethodName>
            <MethodComment>/** 
 * a method with parameters. Once it is created, thrown exceptions, statements, and local variable declarations must be added to it. It is put into its defining class when it is created. &lt;verbatim&gt; Java: #modifiers #returnType #methodName() {} // modifiers is the | of the JVM constants for // the modifiers such as static, public, etc. &lt;/verbatim&gt; &lt;p&gt; This is used to start a constructor as well; pass in null for the returnType when used in that manner. See java.lang.reflect.Modifiers
 * @param modifiers the | of the Modifiersconstants representing the visibility and control of this method.
 * @param returnType the return type of the method as itsJava language type name.
 * @param methodName the name of the method.
 * @param parms an array of ParameterDeclarations representing themethod's parameters
 * @return the method builder.
 */
</MethodComment>
            <ReturnType>MethodBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>modifiers</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>returnType</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>methodName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parms</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BCMethod [m=new BCMethod(this,returnType,methodName,modifiers,parms,factory)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newConstructorBuilder</MethodName>
            <MethodComment>/** 
 * a constructor. Once it is created, thrown exceptions, statements, and local variable declarations must be added to it. It is put into its defining class when it is created. &lt;verbatim&gt; Java: #modifiers #className() {} // modifiers is the | of the JVM constants for // the modifiers such as static, public, etc. // className is taken from definingClass.getName() &lt;/verbatim&gt; &lt;p&gt; This is used to start a constructor as well; pass in null for the returnType when used in that manner. &lt;p&gt; See Modifiers
 * @param modifiers the | of the Modifiersconstants representing the visibility and control of this method.
 * @return the method builder for the constructor.
 */
</MethodComment>
            <ReturnType>MethodBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>modifiers</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSuperClassName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>modify</MethodName>
            <MethodComment>/** 
 * Let those that need to get to the classModify tool to alter the class definition.
 */
</MethodComment>
            <ReturnType>ClassHolder</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>BCClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cf</ParamName>
                    <ParamType>ClassFactory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>packageName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classModifiers</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>className</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>superClassName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>factory</ParamName>
                    <ParamType>BCJava</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getClassFactory</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClassFactory</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addLimitExceeded</MethodName>
            <MethodComment>/** 
 * Add the fact that some class limit was exceeded while generating the class. We create a set of them and report at the end, this allows the generated class file to still be dumped.
 * @param mb
 * @param limitName
 * @param limit
 * @param value
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mb</ParamName>
                    <ParamType>BCMethod</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>limitName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>limit</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuffer [sb=new StringBuffer()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>sb;append;["method:"]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;[mb.getName()]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;[" "]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;[limitName]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;[" ("]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;[value]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;[" &gt; "]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;[limit]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;[")"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addLimitExceeded</MethodName>
            <MethodComment>/** 
 * Add the fact that some class limit was exceeded while generating the class. Text is the simple string passed in.
 * @param rawText Text to be reported.
 * @see BCClass#addLimitExceeded(BCMethod,String,int,int)
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rawText</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>