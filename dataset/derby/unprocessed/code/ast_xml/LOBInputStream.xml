<Class>
    <Id>451</Id>
    <Package>org.apache.derby.impl.jdbc</Package>
    <ClassName>LOBInputStream</ClassName>
    <SuperClass>InputStream</SuperClass>
    <SuperInterfaceList>
        <SuperInterface>PositionedStream</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>LOBInputStream  /** 
 * This input stream is built on top of  {@link LOBStreamControl}. &lt;p&gt; All the read methods are routed to  {@link LOBStreamControl}.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>closed</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>control</FieldName>
            <FieldType>LOBStreamControl</FieldType>
        </Field>
        <Field>
            <FieldName>pos</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>updateCount</FieldName>
            <FieldType>long</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>LOBInputStream</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>control</ParamName>
                    <ParamType>LOBStreamControl</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>position</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>read</MethodName>
            <MethodComment>/** 
 * Reads up to &lt;code&gt;len&lt;/code&gt; bytes of data from the input stream into an array of bytes.  An attempt is made to read as many as &lt;code&gt;len&lt;/code&gt; bytes, but a smaller number may be read. The number of bytes actually read is returned as an integer. &lt;p&gt; This method blocks until input data is available, end of file is detected, or an exception is thrown. &lt;p&gt; If &lt;code&gt;b&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, a &lt;code&gt;NullPointerException&lt;/code&gt; is thrown. &lt;p&gt; If &lt;code&gt;off&lt;/code&gt; is negative, or &lt;code&gt;len&lt;/code&gt; is negative, or &lt;code&gt;off+len&lt;/code&gt; is greater than the length of the array &lt;code&gt;b&lt;/code&gt;, then an &lt;code&gt;IndexOutOfBoundsException&lt;/code&gt; is thrown. &lt;p&gt; If &lt;code&gt;len&lt;/code&gt; is zero, then no bytes are read and &lt;code&gt;0&lt;/code&gt; is returned; otherwise, there is an attempt to read at least one byte. If no byte is available because the stream is at end of file, the value &lt;code&gt;-1&lt;/code&gt; is returned; otherwise, at least one byte is read and stored into &lt;code&gt;b&lt;/code&gt;. &lt;p&gt; The first byte read is stored into element &lt;code&gt;b[off]&lt;/code&gt;, the next one into &lt;code&gt;b[off+1]&lt;/code&gt;, and so on. The number of bytes read is, at most, equal to &lt;code&gt;len&lt;/code&gt;. Let &lt;i&gt;k&lt;/i&gt; be the number of bytes actually read; these bytes will be stored in elements &lt;code&gt;b[off]&lt;/code&gt; through &lt;code&gt;b[off+&lt;/code&gt;&lt;i&gt;k&lt;/i&gt;&lt;code&gt;-1]&lt;/code&gt;, leaving elements &lt;code&gt;b[off+&lt;/code&gt;&lt;i&gt;k&lt;/i&gt;&lt;code&gt;]&lt;/code&gt; through &lt;code&gt;b[off+len-1]&lt;/code&gt; unaffected. &lt;p&gt; In every case, elements &lt;code&gt;b[0]&lt;/code&gt; through &lt;code&gt;b[off]&lt;/code&gt; and elements &lt;code&gt;b[off+len]&lt;/code&gt; through &lt;code&gt;b[b.length-1]&lt;/code&gt; are unaffected. &lt;p&gt; If the first byte cannot be read for any reason other than end of file, then an &lt;code&gt;IOException&lt;/code&gt; is thrown. In particular, an &lt;code&gt;IOException&lt;/code&gt; is thrown if the input stream has been closed. &lt;p&gt; The &lt;code&gt;read(b,&lt;/code&gt; &lt;code&gt;off,&lt;/code&gt; &lt;code&gt;len)&lt;/code&gt; method for class &lt;code&gt;InputStream&lt;/code&gt; simply calls the method &lt;code&gt;read()&lt;/code&gt; repeatedly. If the first such call results in an &lt;code&gt;IOException&lt;/code&gt;, that exception is returned from the call to the &lt;code&gt;read(b,&lt;/code&gt; &lt;code&gt;off,&lt;/code&gt; &lt;code&gt;len)&lt;/code&gt; method.  If any subsequent call to &lt;code&gt;read()&lt;/code&gt; results in a &lt;code&gt;IOException&lt;/code&gt;, the exception is caught and treated as if it were end of file; the bytes read up to that point are stored into &lt;code&gt;b&lt;/code&gt; and the number of bytes read before the exception occurred is returned.  Subclasses are encouraged to provide a more efficient implementation of this method.
 * @param b     the buffer into which the data is read.
 * @param off   the start offset in array &lt;code&gt;b&lt;/code&gt;at which the data is written.
 * @param len   the maximum number of bytes to read.
 * @return the total number of bytes read into the buffer, or&lt;code&gt;-1&lt;/code&gt; if there is no more data because the end of the stream has been reached.
 * @exception IOException  if an I/O error occurs.
 * @exception NullPointerException  if &lt;code&gt;b&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.
 * @see java.io.InputStream#read()
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>b</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>off</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>len</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>close</MethodName>
            <MethodComment>/** 
 * Closes this input stream and releases any system resources associated with the stream. &lt;p&gt; The &lt;code&gt;close&lt;/code&gt; method of &lt;code&gt;InputStream&lt;/code&gt; does nothing.
 * @exception IOException  if an I/O error occurs.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>read</MethodName>
            <MethodComment>/** 
 * Reads the next byte of data from the input stream. The value byte is returned as an &lt;code&gt;int&lt;/code&gt; in the range &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;255&lt;/code&gt;. If no byte is available because the end of the stream has been reached, the value &lt;code&gt;-1&lt;/code&gt; is returned. This method blocks until input data is available, the end of the stream is detected, or an exception is thrown. &lt;p&gt; A subclass must provide an implementation of this method.
 * @return the next byte of data, or &lt;code&gt;-1&lt;/code&gt; if the end of thestream is reached.
 * @exception IOException  if an I/O error occurs.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isObsolete</MethodName>
            <MethodComment>/** 
 * Checks if underlying StreamControl has been updated.
 * @return if stream is modified since created
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reInitialize</MethodName>
            <MethodComment>/** 
 * Reinitializes the stream and sets the current pointer to zero.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>length</MethodName>
            <MethodComment>/** 
 * Returns size of stream in bytes.
 * @return size of stream.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>asInputStream</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>InputStream</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPosition</MethodName>
            <MethodComment>/** 
 * Returns the current byte position.
 * @return The current byte position.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reposition</MethodName>
            <MethodComment>/** 
 * Repositions the stream to the requested byte position.
 * @param requestedPos the requested position, starting at {@code 0}
 * @throws EOFException if the requested position is larger than the length
 * @throws IOException if obtaining the stream length fails
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>requestedPos</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>