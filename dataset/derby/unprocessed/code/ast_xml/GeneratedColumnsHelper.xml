<Class>
    <Id>1120</Id>
    <Package>org.apache.derbyTesting.functionTests.tests.lang</Package>
    <ClassName>GeneratedColumnsHelper</ClassName>
    <SuperClass>BaseJDBCTestCase</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>GeneratedColumnsHelper  /** 
 * &lt;p&gt; Helper routines for testing generated columns. See DERBY-481. &lt;/p&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>NOT_IMPLEMENTED</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>OBJECT_DOES_NOT_EXIST</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>NONEXISTENT_OBJECT</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>REDUNDANT_CLAUSE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>CANT_CONTAIN_NULLS</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>ILLEGAL_AGGREGATE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>UNSTABLE_RESULTS</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>CANT_OVERRIDE_GENERATION_CLAUSE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>CANT_REFERENCE_GENERATED_COLUMN</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>ROUTINE_CANT_ISSUE_SQL</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>BAD_FOREIGN_KEY_ACTION</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>ILLEGAL_ADD_DEFAULT</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>ILLEGAL_RENAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>NEED_EXPLICIT_DATATYPE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>BAD_BEFORE_TRIGGER</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>NOT_NULL_NEEDS_DATATYPE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>NOT_NULL_VIOLATION</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>CONSTRAINT_VIOLATION</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>FOREIGN_KEY_VIOLATION</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>ILLEGAL_DUPLICATE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>SYNTAX_ERROR</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>LEXICAL_ERROR</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>COLUMN_OUT_OF_SCOPE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>OPERATION_FORBIDDEN</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>LACK_TABLE_PRIV</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>LACK_COLUMN_PRIV</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>LACK_EXECUTE_PRIV</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>LACK_USAGE_PRIV</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>CANT_MODIFY_IDENTITY</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>CASCADED_COLUMN_DROP_WARNING</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>CONSTRAINT_DROPPED_WARNING</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>TRIGGER_DROPPED_WARNING</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>LANG_INVALID_USE_OF_DEFAULT</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>GRANT_REVOKE_NOT_ALLOWED</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>MISSING_OBJECT</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>ROUTINE_DEPENDS_ON_TYPE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>TABLE_DEPENDS_ON_TYPE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>VIEW_DEPENDENCY</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>NON_EMPTY_SCHEMA</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>JAVA_EXCEPTION</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>ILLEGAL_UDT_CLASS</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>FORBIDDEN_ORDERING_OPERATION</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>ILLEGAL_AGG</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>ILLEGAL_COMPARISON</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>ILLEGAL_STORAGE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>BAD_CAST</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>DUPLICATE_CLAUSE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>FORBIDDEN_DROP_TRIGGER</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>LOCK_TIMEOUT</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>TOO_MUCH_CONTENTION</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>STRING_TRUNCATION</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>NO_GENERIC_PERMISSION</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>NO_SELECT_OR_UPDATE_PERMISSION</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>NO_TABLE_PERMISSION</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>GeneratedColumnsHelper</MethodName>
            <MethodComment>/** 
 * Create a new instance.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>expectUpdateRowError</MethodName>
            <MethodComment>/** 
 * Assert that the in-place update raises the expected error.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rs</ParamName>
                    <ParamType>ResultSet</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sqlState</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;println;["\nExpecting " + sqlState + " when updating row"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>expectInsertRowError</MethodName>
            <MethodComment>/** 
 * Assert that the in-place insert raises the expected error.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rs</ParamName>
                    <ParamType>ResultSet</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sqlState</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;println;["\nExpecting " + sqlState + " when inserting row"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>expectExecutionWarning</MethodName>
            <MethodComment>/** 
 * Assert that the statement text, when executed, raises a warning.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conn</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sqlState</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>query</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;expectExecutionWarnings;[conn, new String[]{sqlState}, query]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>expectNoWarning</MethodName>
            <MethodComment>/** 
 * Assert that the statement text, when executed, raises no warnings.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conn</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>query</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;expectExecutionWarnings;[conn, new String[]{}, query]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>expectExecutionWarnings</MethodName>
            <MethodComment>/** 
 * Assert that the statement text, when executed, raises a warning.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conn</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sqlStates</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>query</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PreparedStatement [ps=chattyPrepare(conn,query)]</InnerVar>
                <InnerVar>int [idx=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;println;["\nExpecting warnings " + fill(sqlStates).toString() + " when executing:\n\t"]</InnerMethodInvoke>
                <InnerMethodInvoke>ps;execute;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[idx, sqlStates.length]</InnerMethodInvoke>
                <InnerMethodInvoke>ps;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>assertDeterministic</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Assert whether a routine is expected to be DETERMINISTIC. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conn</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>routineName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isDeterministic</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PreparedStatement [ps=conn.prepareStatement("select a.aliasinfo\n" + "from sys.sysaliases a\n" + "where alias =  ?")]</InnerVar>
                <InnerVar>ResultSet [rs=ps.executeQuery()]</InnerVar>
                <InnerVar>RoutineAliasInfo [rai=(RoutineAliasInfo)rs.getObject(1)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ps;setString;[1, routineName]</InnerMethodInvoke>
                <InnerMethodInvoke>rs;next;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[isDeterministic, rai.isDeterministic()]</InnerMethodInvoke>
                <InnerMethodInvoke>rs;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>ps;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>assertColumnTypes</MethodName>
            <MethodComment>/** 
 * Assert that a table has the correct column types.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conn</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columnTypes</ParamName>
                    <ParamType>String[][]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PreparedStatement [ps=chattyPrepare(conn,"select c.columnname, c.columndatatype\n" + "from sys.syscolumns c, sys.systables t\n" + "where t.tablename = ?\n"+ "and t.tableid = c.referenceid\n"+ "order by c.columnname\n")]</InnerVar>
                <InnerVar>ResultSet [rs=ps.executeQuery()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ps;setString;[1, tableName]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertResults;[rs, columnTypes, true]</InnerMethodInvoke>
                <InnerMethodInvoke>rs;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>ps;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>verifyRevokePrivilege</MethodName>
            <MethodComment>/** 
 * Test that a privilege can't be revoked if an object depends on it.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>grantorConnection</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>granteeConnection</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>grantStatement</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>revokeStatement</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>createStatement</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dropStatement</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>badRevokeSQLState</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;expectExecutionError;[granteeConnection, LACK_USAGE_PRIV, createStatement]</InnerMethodInvoke>
                <InnerMethodInvoke>null;goodStatement;[grantorConnection, grantStatement]</InnerMethodInvoke>
                <InnerMethodInvoke>null;goodStatement;[granteeConnection, createStatement]</InnerMethodInvoke>
                <InnerMethodInvoke>null;expectExecutionError;[grantorConnection, badRevokeSQLState, revokeStatement]</InnerMethodInvoke>
                <InnerMethodInvoke>null;goodStatement;[granteeConnection, dropStatement]</InnerMethodInvoke>
                <InnerMethodInvoke>null;goodStatement;[grantorConnection, revokeStatement]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>verifyRestrictedDrop</MethodName>
            <MethodComment>/** 
 * Test that a restricted drop is blocked by an object.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conn</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>createDependentObject</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dropDependentObject</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>createStatement</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dropStatement</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>badDropState</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;goodStatement;[conn, createStatement]</InnerMethodInvoke>
                <InnerMethodInvoke>null;goodStatement;[conn, createDependentObject]</InnerMethodInvoke>
                <InnerMethodInvoke>null;expectExecutionError;[conn, badDropState, dropStatement]</InnerMethodInvoke>
                <InnerMethodInvoke>null;goodStatement;[conn, dropDependentObject]</InnerMethodInvoke>
                <InnerMethodInvoke>null;goodStatement;[conn, dropStatement]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fill</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Fill an ArrayList from an array. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>raw</ParamName>
                    <ParamType>T[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>