<Class>
    <Id>1836</Id>
    <Package>org.apache.derbyTesting.functionTests.tests.lang</Package>
    <ClassName>SGVetter</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>SGVetter  /** 
 * &lt;p&gt; Machine to validate the operation of the sequence generator. This is a re-implementation of the sequence generator in a less efficient style whose correctness is easier to reason about. &lt;/p&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>MINIMUM_CACHED_VALUE_COUNT</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>_CAN_CYCLE</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>_STEP</FieldName>
            <FieldType>BigInteger</FieldType>
        </Field>
        <Field>
            <FieldName>_MAX</FieldName>
            <FieldType>BigInteger</FieldType>
        </Field>
        <Field>
            <FieldName>_MIN</FieldName>
            <FieldType>BigInteger</FieldType>
        </Field>
        <Field>
            <FieldName>_RESTART</FieldName>
            <FieldType>BigInteger</FieldType>
        </Field>
        <Field>
            <FieldName>_ALLOCATION_COUNT</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>_INCREASING</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>_currentValue</FieldName>
            <FieldType>BigInteger</FieldType>
        </Field>
        <Field>
            <FieldName>_valuesRemaining</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>_upperBound</FieldName>
            <FieldType>BigInteger</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>SGVetter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>currentValue</ParamName>
                    <ParamType>Long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>canCycle</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>step</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>max</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>min</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>restart</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>allocationCount</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNextValue</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Get the next value in the sequence. Returns null if the sequence is exhausted. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>Long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>BigInteger [retval=cloneBigInteger(_currentValue)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;advance;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getUpperBound</MethodName>
            <MethodComment>/** 
 * Get the upper bound 
 */
</MethodComment>
            <ReturnType>Long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>advance</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>BigInteger [newValue=bump(_currentValue)]</InnerVar>
                <InnerVar>boolean [overflowed=(newValue.compareTo(_currentValue) == 0)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>bump</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BigInteger</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>original</ParamName>
                    <ParamType>BigInteger</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BigInteger [newValue=original.add(_STEP)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>overflowed</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>newValue</ParamName>
                    <ParamType>BigInteger</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [overflowed=_INCREASING ? (newValue.compareTo(_MAX) &gt; 0) : (newValue.compareTo(_MIN) &lt; 0)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cloneBigInteger</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BigInteger</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>original</ParamName>
                    <ParamType>BigInteger</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>