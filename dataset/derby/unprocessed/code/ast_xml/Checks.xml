<Class>
    <Id>1100</Id>
    <Package>org.apache.derbyTesting.system.oe.run</Package>
    <ClassName>Checks</ClassName>
    <SuperClass>JDBCPerfTestCase</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Checks  /** 
 * Do some checks on the Order Entry database.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>scale</FieldName>
            <FieldType>short</FieldType>
        </Field>
        <Field>
            <FieldName>check</FieldName>
            <FieldType>OEChecks</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>Checks</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>Checks</MethodName>
            <MethodComment>/** 
 * @param name -test name
 * @param scale -warehouse scale factor
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>scale</ParamName>
                    <ParamType>short</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setUp</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>check;initialize;[new HandleCheckError(){
  public void handleCheckError(  String error){
    fail(error);
  }
}
, getConnection(), scale]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>handleCheckError</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>error</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;fail;[error]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkAllRowCounts</MethodName>
            <MethodComment>/** 
 * Return suite of tests that checks the row counts for all the tables in the Order Entry bechmark.
 * @param scale
 */
</MethodComment>
            <ReturnType>Test</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>scale</ParamName>
                    <ParamType>short</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BaseTestSuite [suite=new BaseTestSuite("Order Entry -Check Row Counts")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>suite;addTest;[new Checks("testWarehouseRows",scale)]</InnerMethodInvoke>
                <InnerMethodInvoke>suite;addTest;[new Checks("testStockRows",scale)]</InnerMethodInvoke>
                <InnerMethodInvoke>suite;addTest;[new Checks("testItemRows",scale)]</InnerMethodInvoke>
                <InnerMethodInvoke>suite;addTest;[new Checks("testCustomerRows",scale)]</InnerMethodInvoke>
                <InnerMethodInvoke>suite;addTest;[new Checks("testDistrictRows",scale)]</InnerMethodInvoke>
                <InnerMethodInvoke>suite;addTest;[new Checks("testOrdersRows",scale)]</InnerMethodInvoke>
                <InnerMethodInvoke>suite;addTest;[new Checks("testNewOrdersRows",scale)]</InnerMethodInvoke>
                <InnerMethodInvoke>suite;addTest;[new Checks("testOrderLineRows",scale)]</InnerMethodInvoke>
                <InnerMethodInvoke>suite;addTest;[new Checks("testHistoryRows",scale)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>consistencyChecks</MethodName>
            <MethodComment>/** 
 * Consistency checks per Section 3.3.2 of TPC-C spec
 */
</MethodComment>
            <ReturnType>Test</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>BaseTestSuite [suite=new BaseTestSuite("Order Entry -Consistency checks")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>suite;addTest;[new Checks("testCondition1")]</InnerMethodInvoke>
                <InnerMethodInvoke>suite;addTest;[new Checks("testCondition2")]</InnerMethodInvoke>
                <InnerMethodInvoke>suite;addTest;[new Checks("testCondition3")]</InnerMethodInvoke>
                <InnerMethodInvoke>suite;addTest;[new Checks("testCondition4")]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>suite</MethodName>
            <MethodComment>/** 
 * @return suite of tests that perform certain consistency checks on the OEdatabase
 */
</MethodComment>
            <ReturnType>Test</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>BaseTestSuite [suite=new BaseTestSuite("OrderEntry - checks")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>suite;addTest;[checkAllRowCounts((short)1)]</InnerMethodInvoke>
                <InnerMethodInvoke>suite;addTest;[consistencyChecks()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testCondition1</MethodName>
            <MethodComment>/** 
 * Section 3.3.2.1 of TPC-C specification. Entries in the WAREHOUSE and DISTRICT tables must satisfy the relationship: W_YTD = sum(D_YTD) for each warehouse defined by (W_ID = D_W_ID).
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Statement [s=createStatement()]</InnerVar>
                <InnerVar>ResultSet [rs=s.executeQuery("SELECT W.W_ID,W.W_YTD, SUM(D.D_YTD) " + "from WAREHOUSE W , DISTRICT D where W.W_ID=D.D_W_ID" + " GROUP BY W.W_ID,W.W_YTD")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;commit;[]</InnerMethodInvoke>
                <InnerMethodInvoke>rs;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>s;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testCondition2</MethodName>
            <MethodComment>/** 
 * Section 3.3.2.2 Consistency Condition 2 (TPC-C spec) Entries in the DISTRICT, ORDER, and NEW-ORDER tables must satisfy the relationship: D_NEXT_O_ID - 1 = max(O_ID) = max(NO_O_ID) for each district defined by (D_W_ID = O_W_ID = NO_W_ID) and (D_ID = O_D_ID = NO_D_ID). This condition does not apply to the NEW-ORDER table for any districts which have no outstanding new orders (i.e., the number of rows is zero).
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Statement [s=createStatement()]</InnerVar>
                <InnerVar>ResultSet [rs=s.executeQuery("SELECT D.D_ID, D.D_W_ID,D.D_NEXT_O_ID, " + "MAX(O.O_ID),MAX(N.NO_O_ID) FROM NEWORDERS N, " + "DISTRICT D, ORDERS O WHERE D.D_W_ID=O.O_W_ID "+ "AND D.D_W_ID = N.NO_W_ID AND D.D_ID = O.O_D_ID "+ "AND D.D_ID = N.NO_D_ID GROUP BY "+ "D.D_ID,D.D_W_ID,D.D_NEXT_O_ID")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;commit;[]</InnerMethodInvoke>
                <InnerMethodInvoke>rs;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>s;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testCondition3</MethodName>
            <MethodComment>/** 
 * 3.3.2.3 Consistency Condition 3  Entries in the NEW-ORDER table must satisfy the relationship: max(NO_O_ID) - min(NO_O_ID) + 1 = [number of rows in the NEW-ORDER table for this district] for each district defined by NO_W_ID and NO_D_ID. This condition does not apply to any districts which have no outstanding new orders (i.e., the number of rows is zero).
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Statement [s=createStatement()]</InnerVar>
                <InnerVar>ResultSet [rs=s.executeQuery("SELECT NO_W_ID,NO_D_ID," + "MAX(NO_O_ID) - MIN(NO_O_ID) +1, COUNT(*)" + " FROM NEWORDERS GROUP BY NO_W_ID,NO_D_ID")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;commit;[]</InnerMethodInvoke>
                <InnerMethodInvoke>rs;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>s;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testCondition4</MethodName>
            <MethodComment>/** 
 * 3.3.2.4 Consistency Condition 4  Entries in the ORDER and ORDER-LINE tables must satisfy the relationship: sum(O_OL_CNT) = [number of rows in the ORDER-LINE table for this district] for each district defined by (O_W_ID = OL_W_ID) and (O_D_ID = OL_D_ID).
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Statement [s=createStatement()]</InnerVar>
                <InnerVar>ResultSet [rs=s.executeQuery("SELECT " + "T1.SUM_OL_CNT,T2.NUM_OL_ROWS, T1.O_W_ID," + "T1.O_D_ID FROM "+ "(SELECT O.O_W_ID, O.O_D_ID, "+ "SUM(CAST(O.O_OL_CNT AS BIGINT)) AS "+ "SUM_OL_CNT FROM ORDERS "+ "O GROUP BY O.O_W_ID,O.O_D_ID) T1 ,"+ "(SELECT OL_W_ID,OL_D_ID,COUNT(*) AS "+ "NUM_OL_ROWS FROM ORDERLINE "+ "OL GROUP BY OL.OL_W_ID,OL.OL_D_ID) T2"+ " WHERE (T1.O_W_ID = T2.OL_W_ID) AND"+ " (T1.O_D_ID = T2.OL_D_ID)")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;commit;[]</InnerMethodInvoke>
                <InnerMethodInvoke>rs;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>s;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testWarehouseRows</MethodName>
            <MethodComment>/** 
 * Test cardinality of WAREHOUSE table
 * @throws Exception
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>check;testWarehouseRows;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testStockRows</MethodName>
            <MethodComment>/** 
 * Test cardinality of STOCK table
 * @throws Exception
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>check;testStockRows;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testOrdersRows</MethodName>
            <MethodComment>/** 
 * Test cardinality of ORDERS table
 * @throws Exception
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>check;testOrdersRows;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testDistrictRows</MethodName>
            <MethodComment>/** 
 * Test cardinality of DISTRICT table
 * @throws Exception
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>check;testDistrictRows;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testCustomerRows</MethodName>
            <MethodComment>/** 
 * Test cardinality of CUSTOMER table
 * @throws Exception
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>check;testCustomerRows;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testItemRows</MethodName>
            <MethodComment>/** 
 * Test cardinality of ITEM table
 * @throws Exception
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>check;testItemRows;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testNewOrdersRows</MethodName>
            <MethodComment>/** 
 * Test cardinality of NEWORDERS table
 * @throws Exception
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>check;testNewOrdersRows;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testHistoryRows</MethodName>
            <MethodComment>/** 
 * Test cardinality of HISTORY table
 * @throws Exception
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>check;testHistoryRows;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testOrderLineRows</MethodName>
            <MethodComment>/** 
 * Test cardinality of ORDERLINE table
 * @throws Exception
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>check;testOrderLineRows;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>