<Class>
    <Id>701</Id>
    <Package>org.apache.derby.optional.api</Package>
    <ClassName>SimpleJsonUtils</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>SimpleJsonUtils  /** 
 * &lt;p&gt; Utility methods for simple JSON support. &lt;/p&gt;
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>toJSON</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Pack a ResultSet into a JSONArray. This method could be called client-side on any query result from any DBMS. Each row is converted into a JSONObject whose keys are the corresponding column names from the ResultSet. Closes the ResultSet once it has been drained. Datatypes map to JSON values as follows: &lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;i&gt;NULL&lt;/i&gt; - The JSON null literal.&lt;/li&gt; &lt;li&gt;&lt;i&gt;SMALLINT, INT, BIGINT&lt;/i&gt; - JSON integer values.&lt;/li&gt; &lt;li&gt;&lt;i&gt;DOUBLE, FLOAT, REAL, DECIMAL, NUMERIC&lt;/i&gt; - JSON floating point values.&lt;/li&gt; &lt;li&gt;&lt;i&gt;CHAR, VARCHAR, LONG VARCHAR, CLOB&lt;/i&gt; - JSON string values.&lt;/li&gt; &lt;li&gt;&lt;i&gt;BLOB, VARCHAR FOR BIT DATA, LONG VARCHAR FOR BIT DATA&lt;/i&gt; - The byte array is turned into a hex string (2 hex digits per byte) and the result is returned as a JSON string.&lt;/li&gt; &lt;li&gt;&lt;i&gt;All other types&lt;/i&gt; - Converted to JSON string values via their toString() methods.&lt;/li&gt; &lt;/ul&gt;
 */
</MethodComment>
            <ReturnType>JSONArray</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rs</ParamName>
                    <ParamType>ResultSet</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ResultSetMetaData [rsmd=rs.getMetaData()]</InnerVar>
                <InnerVar>int [columnCount=rsmd.getColumnCount()]</InnerVar>
                <InnerVar>JSONArray [result=new JSONArray()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readArray</MethodName>
            <MethodComment>/** 
 * Construct a JSONArray from a Reader.
 */
</MethodComment>
            <ReturnType>JSONArray</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>reader</ParamName>
                    <ParamType>Reader</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>JSONParser [parser=new JSONParser()]</InnerVar>
                <InnerVar>Object [obj=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readArrayFromString</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; SQL FUNCTION to convert a JSON document string into a JSONArray. This function is registered by the simpleJson optional tool. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>JSONArray</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>document</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readArrayFromStream</MethodName>
            <MethodComment>/** 
 * Read a JSONArray from an InputStream. Close the stream after reading the JSONArray.
 */
</MethodComment>
            <ReturnType>JSONArray</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>inputStream</ParamName>
                    <ParamType>InputStream</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>characterSetName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readArrayFromFile</MethodName>
            <MethodComment>/** 
 * SQL FUNCTION to read a JSONArray from a File. This function is registered by the simpleJson optional tool.
 */
</MethodComment>
            <ReturnType>JSONArray</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fileName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>characterSetName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>FileInputStream [fis=null]</InnerVar>
                <InnerVar>String [name_of_file=fileName]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>FileInputStream</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readArrayFromURL</MethodName>
            <MethodComment>/** 
 * SQL FUNCTION to read a JSONArray from an URL address. This function is registered by the simpleJson optional tool.
 */
</MethodComment>
            <ReturnType>JSONArray</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>urlString</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>characterSetName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>InputStream [inputStream=null]</InnerVar>
                <InnerVar>String [url_string=urlString]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>InputStream</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>URL [url=new URL(url_string)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>MalformedURLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>arrayToClob</MethodName>
            <MethodComment>/** 
 * SQL FUNCTION to convert a JSONArray into a CLOB.
 */
</MethodComment>
            <ReturnType>Clob</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>array</ParamName>
                    <ParamType>JSONArray</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLegalJsonValue</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Turns an object into something which is a legal JSON value. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>obj</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>formatBytes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>bytes</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDerbyConnection</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Connection</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>