<Class>
    <Id>685</Id>
    <Package>org.apache.derby.iapi.transaction</Package>
    <ClassName>TransactionListener</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>TransactionListener  /** 
 * An interface that must be implemented by a object that wants to be notified when a significant transaction event occurs.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>preCommit</MethodName>
            <MethodComment>/** 
 * Notifies registered listener that the transaction is about to commit. Called before the commit is recorded and flushed to the transaction log device.
 * @return true to remove this listener once thismethod returns.
 * @throws StandardException If thrown the commit attemptwill be stopped and instead the transaction will be rolled back.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>preRollback</MethodName>
            <MethodComment>/** 
 * Notifies registered listener that the transaction is about to rollback. Called before any physical rollback. The listener will be removed from the current transaction once the method returns.
 * @throws StandardException If thrown the rollback attemptwill be stopped and instead the database will be shut down. TODO: Define behaviour on exception during rollback.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>