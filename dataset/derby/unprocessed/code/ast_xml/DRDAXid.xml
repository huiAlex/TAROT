<Class>
    <Id>661</Id>
    <Package>org.apache.derby.impl.drda</Package>
    <ClassName>DRDAXid</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Xid</SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>format_id</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>global_id</FieldName>
            <FieldType>byte[]</FieldType>
        </Field>
        <Field>
            <FieldName>branch_id</FieldName>
            <FieldType>byte[]</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>DRDAXid</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>formatid</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>globalid</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>branchid</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFormatId</MethodName>
            <MethodComment>/** 
 * Obtain the format id part of the Xid. &lt;p&gt;
 * @return Format identifier. O means the OSI CCR format.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getGlobalTransactionId</MethodName>
            <MethodComment>/** 
 * Obtain the global transaction identifier part of XID as an array of  bytes. &lt;p&gt;
 * @return A byte array containing the global transaction identifier.
 */
</MethodComment>
            <ReturnType>byte[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBranchQualifier</MethodName>
            <MethodComment>/** 
 * Obtain the transaction branch qualifier part of the Xid in a byte array. &lt;p&gt;
 * @return A byte array containing the branch qualifier of the transaction.
 */
</MethodComment>
            <ReturnType>byte[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [s="{DRDAXid: " + "formatId(" + format_id + "), "+ "globalTransactionId("+ convertToHexString(global_id)+ ")"+ "branchQualifier("+ convertToHexString(branch_id)+ ")"]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>convertToHexString</MethodName>
            <MethodComment>/** 
 * convert byte array to a Hex string
 * @param buf buffer to  convert
 * @return hex string representation of byte array
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>buf</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuffer [str=new StringBuffer()]</InnerVar>
                <InnerVar>String [val]</InnerVar>
                <InnerVar>int [byteVal]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>str;append;["0x"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>