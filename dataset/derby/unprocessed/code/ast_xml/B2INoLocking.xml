<Class>
    <Id>2001</Id>
    <Package>org.apache.derby.impl.store.access.btree.index</Package>
    <ClassName>B2INoLocking</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>BTreeLockingPolicy</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>B2INoLocking  /** 
 * Secondary index locking policy that does no locking. &lt;p&gt; This is used when the caller knows that logical locks are already obtained  so need not be requested again.  For instance when inserting a row into an index, a X row lock has already been obtained when the row was inserted into the base table, so there is no need to get another lock in the  secondary index. &lt;p&gt; This class overrides all interfaces of BTreeLockingPolicy making them no-ops.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>B2INoLocking</MethodName>
            <MethodComment>/** 
 * Constructors for This class:
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rawtran</ParamName>
                    <ParamType>Transaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lock_level</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>locking_policy</ParamName>
                    <ParamType>LockingPolicy</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>base_cc</ParamName>
                    <ParamType>ConglomerateController</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>open_btree</ParamName>
                    <ParamType>OpenBTree</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>B2INoLocking</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>lockScanCommittedDeletedRow</MethodName>
            <MethodComment>/** 
 * Lock a btree row to determine if it is a committed deleted row. &lt;p&gt; Request an exclusive lock on the row located at the given slot, NOWAIT. Return true if the lock is granted, otherwise false. &lt;p&gt;
 * @param open_btree        The conglomerate we are locking.
 * @param leaf              The leaf page with the row to lock.
 * @param template          A scratch area to use to read in RowLocation.
 * @param slot_no           The slot of row on "current_leaf" 
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>open_btree</ParamName>
                    <ParamType>OpenBTree</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>leaf</ParamName>
                    <ParamType>LeafControlRow</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>template</ParamName>
                    <ParamType>DataValueDescriptor[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lock_fetch_desc</ParamName>
                    <ParamType>FetchDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>slot_no</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>lockScanRow</MethodName>
            <MethodComment>/** 
 * Lock a row as part of doing the scan. &lt;p&gt; Lock the row at the given slot (or the previous row if slot is 0). &lt;p&gt; If this routine returns true all locks were acquired while maintaining the latch on leaf.  If this routine returns false, locks may or may not have been acquired, and the routine should be called again after the client has researched the tree to reget the latch on the  appropriate page.
 * @return Whether locks were acquired without releasing latch on leaf.
 * @param pos               The position of the row to lock.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>open_btree</ParamName>
                    <ParamType>OpenBTree</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pos</ParamName>
                    <ParamType>BTreeRowPosition</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lock_fetch_desc</ParamName>
                    <ParamType>FetchDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lock_template</ParamName>
                    <ParamType>DataValueDescriptor[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lock_row_loc</ParamName>
                    <ParamType>RowLocation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>previous_key_lock</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>forUpdate</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lock_operation</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>unlockScanRecordAfterRead</MethodName>
            <MethodComment>/** 
 * Release read lock on a row.
 * @param forUpdate         Is the scan for update or for read only.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pos</ParamName>
                    <ParamType>BTreeRowPosition</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>forUpdate</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>lockNonScanPreviousRow</MethodName>
            <MethodComment>/** 
 * Lock the row previous to the input row. &lt;p&gt; See BTree.lockPreviousRow() for more info.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>current_leaf</ParamName>
                    <ParamType>LeafControlRow</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>current_slot</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lock_fetch_desc</ParamName>
                    <ParamType>FetchDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lock_template</ParamName>
                    <ParamType>DataValueDescriptor[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lock_row_loc</ParamName>
                    <ParamType>RowLocation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>open_btree</ParamName>
                    <ParamType>OpenBTree</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lock_operation</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lock_duration</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>lockNonScanRow</MethodName>
            <MethodComment>/** 
 * Lock the in memory row. &lt;p&gt; See BTree.lockRow() for more info.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>btree</ParamName>
                    <ParamType>BTree</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>current_leaf</ParamName>
                    <ParamType>LeafControlRow</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>aux_leaf</ParamName>
                    <ParamType>LeafControlRow</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>current_row</ParamName>
                    <ParamType>DataValueDescriptor[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lock_operation</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>lockNonScanRowOnPage</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>current_leaf</ParamName>
                    <ParamType>LeafControlRow</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>current_slot</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lock_fetch_desc</ParamName>
                    <ParamType>FetchDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lock_template</ParamName>
                    <ParamType>DataValueDescriptor[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lock_row_loc</ParamName>
                    <ParamType>RowLocation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lock_operation</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>