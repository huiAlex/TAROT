<Class>
    <Id>443</Id>
    <Package>org.apache.derby.impl.sql.compile</Package>
    <ClassName>WindowResultSetNode</ClassName>
    <SuperClass>SingleChildResultSetNode</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>WindowResultSetNode  /** 
 * A WindowResultSetNode represents a result set for a window partitioning on a select. Modeled on the code in GroupByNode.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>parent</FieldName>
            <FieldType>FromTable</FieldType>
        </Field>
        <Field>
            <FieldName>windowFuncCalls</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>windowFuncCalls</FieldName>
            <FieldType>WindowFunctionNode</FieldType>
        </Field>
        <Field>
            <FieldName>wdn</FieldName>
            <FieldType>WindowDefinitionNode</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>WindowResultSetNode</MethodName>
            <MethodComment>/** 
 * Constructor for a WindowResultSetNode.
 * @param bottomPR     The project restrict result set we want to wrap
 * @param windowDef    The window definition
 * @param windowFuncCalls All window function calls in SELECT's select list and order by list.
 * @param nestingLevel Nesting level
 * @param cm           The context manager
 * @exception StandardException     Thrown on error
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>bottomPR</ParamName>
                    <ParamType>ResultSetNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>windowDef</ParamName>
                    <ParamType>WindowDefinitionNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>windowFuncCalls</ParamName>
                    <ParamType>WindowFunctionNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nestingLevel</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cm</ParamName>
                    <ParamType>ContextManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ResultColumnList [newBottomRCL]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setLevel;[nestingLevel]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setResultColumns;[childResult.getResultColumns()]</InnerMethodInvoke>
                <InnerMethodInvoke>childResult;setResultColumns;[newBottomRCL]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addNewPRNode;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addNewColumns;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addNewPRNode</MethodName>
            <MethodComment>/** 
 * Add a new PR node.  Put the new PR under any sort.
 * @throws StandardException standard error policy
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>ResultColumnList [rclNew=new ResultColumnList(getContextManager())]</InnerVar>
                <InnerVar>CollectNodesVisitor&lt;ColumnReference&gt; [getCRVisitor=new CollectNodesVisitor&lt;ColumnReference&gt;(ColumnReference.class)]</InnerVar>
                <InnerVar>ArrayList&lt;ValueNode&gt; [uniqueCols=new ArrayList&lt;ValueNode&gt;()]</InnerVar>
                <InnerVar>CollectNodesVisitor&lt;VirtualColumnNode&gt; [getVCVisitor=new CollectNodesVisitor&lt;VirtualColumnNode&gt;(VirtualColumnNode.class)]</InnerVar>
                <InnerVar>ResultColumnList [bottomRCL=childResult.getResultColumns()]</InnerVar>
                <InnerVar>ResultColumnList [windowingRCL=getResultColumns()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rclNew;copyOrderBySelect;[getResultColumns()]</InnerMethodInvoke>
                <InnerMethodInvoke>childResult;setResultColumns;[new ResultColumnList(getContextManager())]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setResultColumns;[new ResultColumnList(getContextManager())]</InnerMethodInvoke>
                <InnerMethodInvoke>parent.getResultColumns();accept;[getCRVisitor]</InnerMethodInvoke>
                <InnerMethodInvoke>parent.getResultColumns();accept;[getVCVisitor]</InnerMethodInvoke>
                <InnerMethodInvoke>uniqueCols;addAll;[getVCVisitor.getList()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>colRefAlreadySeen</MethodName>
            <MethodComment>/** 
 * @param uniqueColRefs list of unique column references
 * @param cand the candidate to check is present in list
 * @return {@code true} if an equivalent column reference to {@code cand}is already present in  {@code uniqueColRefs}
 * @throws StandardException standard error policy
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>uniqueColRefs</ParamName>
                    <ParamType>ValueNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cand</ParamName>
                    <ParamType>ColumnReference</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addNewColumns</MethodName>
            <MethodComment>/** 
 * Substitute new result columns for window function calls and add the result columns to childResult's list of columns.
 * @throws StandardException standard error policy
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>ResultColumnList [bottomRCL=childResult.getResultColumns()]</InnerVar>
                <InnerVar>ResultColumnList [windowingRCL=getResultColumns()]</InnerVar>
                <InnerVar>ReplaceWindowFuncCallsWithCRVisitor [replaceCallsVisitor=new ReplaceWindowFuncCallsWithCRVisitor(new ResultColumnList(getContextManager()),((FromTable)childResult).getTableNumber(),ResultSetNode.class)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>parent.getResultColumns();accept;[replaceCallsVisitor]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generate</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>acb</ParamName>
                    <ParamType>ActivationClassBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mb</ParamName>
                    <ParamType>MethodBuilder</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [rclSize=getResultColumns().size()]</InnerVar>
                <InnerVar>FormatableBitSet [referencedCols=new FormatableBitSet(rclSize)]</InnerVar>
                <InnerVar>int [erdNumber=acb.addItem(referencedCols)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assignResultSetNumber;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setCostEstimate;[childResult.getFinalCostEstimate()]</InnerMethodInvoke>
                <InnerMethodInvoke>acb;pushGetResultSetFactoryExpression;[mb]</InnerMethodInvoke>
                <InnerMethodInvoke>acb;pushThisAsActivation;[mb]</InnerMethodInvoke>
                <InnerMethodInvoke>childResult;generate;[acb, mb]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;upCast;[ClassName.NoPutResultSet]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;push;[acb.addItem(getResultColumns().buildRowTemplate())]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;push;[getResultSetNumber()]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;push;[erdNumber]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;pushNull;[ClassName.GeneratedMethod]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;push;[getCostEstimate().rowCount()]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;push;[getCostEstimate().getEstimatedCost()]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;callMethod;[VMOpcode.INVOKEINTERFACE, (String)null, "getWindowResultSet", ClassName.NoPutResultSet, 8]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getParent</MethodName>
            <MethodComment>/** 
 * @return parent of this node, a PRN, used by SelectNode to retrieve newtop result set node after window result set rewrite of result set tree.
 */
</MethodComment>
            <ReturnType>FromTable</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>printSubNodes</MethodName>
            <MethodComment>/** 
 * QueryTreeNode override
 * @see QueryTreeNode#printSubNodes
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>depth</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>