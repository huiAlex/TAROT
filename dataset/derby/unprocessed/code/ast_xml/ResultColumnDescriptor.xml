<Class>
    <Id>1027</Id>
    <Package>org.apache.derby.iapi.sql</Package>
    <ClassName>ResultColumnDescriptor</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ResultColumnDescriptor  /** 
 * A ResultColumnDescriptor describes a result column in a ResultSet.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getType</MethodName>
            <MethodComment>/** 
 * Returns a DataTypeDescriptor for the column. This DataTypeDescriptor will not represent an actual value, it will only represent the type that all values in the column will have.
 * @return	A DataTypeDescriptor describing the type of the column.
 */
</MethodComment>
            <ReturnType>DataTypeDescriptor</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getName</MethodName>
            <MethodComment>/** 
 * Returns the name of the Column.
 * @return	A String containing the name of the column.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSourceSchemaName</MethodName>
            <MethodComment>/** 
 * Get the name of the schema for the Column's base table, if any. Following example queries will all return APP (assuming user is in schema APP) select t.a from t select b.a from t as b select app.t.a from t
 * @return	The name of the schema of the Column's base table. If the columnis not in a schema (i.e. is a derived column), it returns NULL.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSourceTableName</MethodName>
            <MethodComment>/** 
 * Get the name of the underlying(base) table this column comes from, if any. Following example queries will all return T select a from t select b.a from t as b select t.a from t
 * @return	A String containing the name of the base table of the Columnis in. If the column is not in a table (i.e. is a derived column), it returns NULL. The name of the Column's base table. If the column is not in a schema (i.e. is a derived column), it returns NULL.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>updatableByCursor</MethodName>
            <MethodComment>/** 
 * Return true if the column is wirtable by a positioned update.
 * @return TRUE, if the column is a base column of a table and is writable by a positioned update.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getColumnPosition</MethodName>
            <MethodComment>/** 
 * Get the position of the Column. NOTE - position is 1-based.
 * @return	An int containing the position of the Columnwithin the table.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isAutoincrement</MethodName>
            <MethodComment>/** 
 * Tell us if the column is an autoincrement column or not.
 * @return TRUE, if the column is a base column of a table and is anautoincrement column.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasGenerationClause</MethodName>
            <MethodComment>/** 
 * Return true if this result column represents a generated column.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>