<Class>
    <Id>1758</Id>
    <Package>org.apache.derby.impl.jdbc</Package>
    <ClassName>PositionedStoreStream</ClassName>
    <SuperClass>InputStream</SuperClass>
    <SuperInterfaceList>
        <SuperInterface>PositionedStream</SuperInterface>
        <SuperInterface>Resetable</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>PositionedStoreStream  /** 
 * A wrapper-stream able to reposition the underlying store stream. &lt;p&gt; Where a user expects the underlying stream to be at a given position, {@link #reposition} must be called with the expected position first. A usecase for this scenario is the LOB objects, where you can request a stream and at the same time (this does not mean concurrently) query the LOB about its length or ask to get a part of the LOB returned. Such multiplexed operations must result in consistent and valid data, and to achieve this the underlying store stream must be able to reposition itself. &lt;em&gt;Synchronization&lt;/em&gt;: Access to instances of this class must be externally synchronized on the connection synchronization object. There are two reasons for this: &lt;ul&gt; &lt;li&gt;Access to store must be single threaded. &lt;li&gt;This class is not thread safe, and calling the various methods from different threads concurrently can result in inconsistent position values. To avoid redundant internal synchronization, this class assumes and &lt;b&gt;requires&lt;/b&gt; external synchronization (also called client-side locking). &lt;/ul&gt;
 * @see EmbedConnection#getConnectionSynchronization
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>stream</FieldName>
            <FieldType>InputStream</FieldType>
        </Field>
        <Field>
            <FieldName>pos</FieldName>
            <FieldType>long</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>PositionedStoreStream</MethodName>
            <MethodComment>/** 
 * Creates a positioned store stream on top of the specified resettable stream. &lt;p&gt; Upon creation, the underlying stream is initiated and reset to make sure the states of the streams are in sync with each other.
 * @param in a {@link Resetable}-stream
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>in</ParamName>
                    <ParamType>InputStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>((Resetable)in);initStream;[]</InnerMethodInvoke>
                <InnerMethodInvoke>((Resetable)in);resetStream;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>read</MethodName>
            <MethodComment>/** 
 * Reads a number of bytes from the underlying stream and stores them in the specified byte array.
 * @return The actual number of bytes read, or -1 if the end of the streamis reached.
 * @throws IOException if an I/O error occurs
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>b</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>read</MethodName>
            <MethodComment>/** 
 * Reads a number of bytes from the underlying stream and stores them in the specified byte array at the specified offset.
 * @return The actual number of bytes read, or -1 if the end of the streamis reached.
 * @throws IOException if an I/O error occurs
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>b</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>off</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>len</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [ret=this.stream.read(b,off,len)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>read</MethodName>
            <MethodComment>/** 
 * Reads a single byte from the underlying stream.
 * @return The next byte of data, or -1 if the end of the stream is reached.
 * @throws IOException if an I/O error occurs
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [ret=this.stream.read()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>skip</MethodName>
            <MethodComment>/** 
 * Skips up to the specified number of bytes from the underlying stream.
 * @return The actual number of bytes skipped.
 * @throws IOException if an I/O error occurs
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>toSkip</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>long [ret=this.stream.skip(toSkip)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>resetStream</MethodName>
            <MethodComment>/** 
 * Resets the resettable stream.
 * @throws IOException
 * @throws StandardException if resetting the stream in store fails
 * @see Resetable#resetStream
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>((Resetable)this.stream);resetStream;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initStream</MethodName>
            <MethodComment>/** 
 * Initialize the resettable stream for use.
 * @throws StandardException if initializing the store in stream fails
 * @see Resetable#initStream
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>((Resetable)this.stream);initStream;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>closeStream</MethodName>
            <MethodComment>/** 
 * Closes the resettable stream.
 * @see Resetable#closeStream
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>((Resetable)this.stream);closeStream;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reposition</MethodName>
            <MethodComment>/** 
 * Repositions the underlying store stream to the requested position. &lt;p&gt; Repositioning is required because there can be several uses of the store stream, which changes the position of it. If a class is dependent on the underlying stream not changing its position, it must call reposition with the position it expects before using the stream again. &lt;p&gt; If the repositioning fails because the stream is exhausted, most likely because of an invalid position specified by the user, the stream is reset to position zero and the  {@code EOFException} is rethrown.
 * @throws EOFException if the stream is exhausted before the requestedposition is reached
 * @throws IOException if reading from the store stream fails
 * @throws StandardException if resetting the store in stream fails, orsome other exception happens in store
 * @see #getPosition
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>requestedPos</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPosition</MethodName>
            <MethodComment>/** 
 * Returns the current position of the underlying store stream.
 * @return Current byte position of the store stream.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>asInputStream</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>InputStream</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>