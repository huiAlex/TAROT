<Class>
    <Id>2196</Id>
    <Package>org.apache.derby.impl.sql.compile</Package>
    <ClassName>InListOperatorNode</ClassName>
    <SuperClass>BinaryListOperatorNode</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>InListOperatorNode  /** 
 * An InListOperatorNode represents an IN list.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>isOrdered</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>sortDescending</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>InListOperatorNode</MethodName>
            <MethodComment>/** 
 * @param leftOperand The left operand of the node
 * @param rightOperandList The right operand list of the node
 * @param cm Context manager
 * @throws StandardException
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>leftOperand</ParamName>
                    <ParamType>ValueNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rightOperandList</ParamName>
                    <ParamType>ValueNodeList</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cm</ParamName>
                    <ParamType>ContextManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment>/** 
 * Convert this object to a String.  See comments in QueryTreeNode.java for how this should be done for tree printing.
 * @return	This object as a String
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>shallowCopy</MethodName>
            <MethodComment>/** 
 * Create a shallow copy of this InListOperatorNode whose operands are the same as this node's operands.  Copy over all other necessary state, as well.
 */
</MethodComment>
            <ReturnType>InListOperatorNode</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>InListOperatorNode [ilon=new InListOperatorNode(leftOperand,rightOperandList,getContextManager())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ilon;copyFields;[this]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>preprocess</MethodName>
            <MethodComment>/** 
 * Preprocess an expression tree.  We do a number of transformations here (including subqueries, IN lists, LIKE and BETWEEN) plus subquery flattening. NOTE: This is done before the outer ResultSetNode is preprocessed.
 * @param numTables			Number of tables in the DML Statement
 * @param outerFromList		FromList from outer query block
 * @param outerSubqueryList	SubqueryList from outer query block
 * @param outerPredicateList	PredicateList from outer query block
 * @return		The modified expression
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>ValueNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>numTables</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>outerFromList</ParamName>
                    <ParamType>FromList</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>outerSubqueryList</ParamName>
                    <ParamType>SubqueryList</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>outerPredicateList</ParamName>
                    <ParamType>PredicateList</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DataTypeDescriptor [targetType=getDominantType()]</InnerVar>
                <InnerVar>int [targetTypePrecedence=targetType.getTypeId().typePrecedence()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDominantType</MethodName>
            <MethodComment>/** 
 * Get the dominant type of all the operands in this IN list.
 * @return the type descriptor for the dominant type
 * @see DataTypeDescriptor#getDominantType(DataTypeDescriptor,ClassFactory)
 */
</MethodComment>
            <ReturnType>DataTypeDescriptor</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>DataTypeDescriptor [targetType=leftOperand.getTypeServices()]</InnerVar>
                <InnerVar>TypeId [judgeTypeId=targetType.getTypeId()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>eliminateNots</MethodName>
            <MethodComment>/** 
 * Eliminate NotNodes in the current query block.  We traverse the tree,  inverting ANDs and ORs and eliminating NOTs as we go.  We stop at  ComparisonOperators and boolean expressions.  We invert  ComparisonOperators and replace boolean expressions with  boolean expression = false. NOTE: Since we do not recurse under ComparisonOperators, there still could be NotNodes left in the tree.
 * @param underNotNode		Whether or not we are under a NotNode.
 * @return		The modified expression
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>ValueNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>underNotNode</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BinaryComparisonOperatorNode [leftBCO]</InnerVar>
                <InnerVar>BinaryComparisonOperatorNode [rightBCO]</InnerVar>
                <InnerVar>int [listSize=rightOperandList.size()]</InnerVar>
                <InnerVar>ValueNode [leftSide]</InnerVar>
                <InnerVar>ValueNode [leftClone=(leftOperand instanceof ColumnReference) ? leftOperand.getClone() : leftOperand]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>leftBCO;bindComparisonOperator;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>selfReference</MethodName>
            <MethodComment>/** 
 * See if this IN list operator is referencing the same table.
 * @param cr	The column reference.
 * @return	true if in list references the same table as in cr.
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cr</ParamName>
                    <ParamType>ColumnReference</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>selectivity</MethodName>
            <MethodComment>/** 
 * The selectivity for an "IN" predicate is generally very small. This is an estimate applicable when in list are not all constants.
 */
</MethodComment>
            <ReturnType>double</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>optTable</ParamName>
                    <ParamType>Optimizable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateExpression</MethodName>
            <MethodComment>/** 
 * Do code generation for this IN list operator.
 * @param acb	The ExpressionClassBuilder for the class we're generating
 * @param mb The MethodBuilder the expression will go into
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>acb</ParamName>
                    <ParamType>ExpressionClassBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mb</ParamName>
                    <ParamType>MethodBuilder</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [listSize=rightOperandList.size()]</InnerVar>
                <InnerVar>String [resultTypeName]</InnerVar>
                <InnerVar>String [receiverType=ClassName.DataValueDescriptor]</InnerVar>
                <InnerVar>String [leftInterfaceType=ClassName.DataValueDescriptor]</InnerVar>
                <InnerVar>String [rightInterfaceType=ClassName.DataValueDescriptor + "[]"]</InnerVar>
                <InnerVar>LocalField [arrayField=generateListAsArray(acb,mb)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>leftOperand;generateExpression;[acb, mb]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;dup;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;upCast;[leftInterfaceType]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;getField;[arrayField]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;push;[isOrdered]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;callMethod;[VMOpcode.INVOKEINTERFACE, receiverType, methodName, resultTypeName, 3]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateListAsArray</MethodName>
            <MethodComment>/** 
 * Generate the code to create an array of DataValueDescriptors that will hold the IN-list values at execution time.  The array gets created in the constructor.  All constant elements in the array are initialized in the constructor.  All non-constant elements, if any, are initialized each time the IN list is evaluated.
 * @param acb The ExpressionClassBuilder for the class we're generating
 * @param mb The MethodBuilder the expression will go into
 */
</MethodComment>
            <ReturnType>LocalField</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>acb</ParamName>
                    <ParamType>ExpressionClassBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mb</ParamName>
                    <ParamType>MethodBuilder</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [listSize=rightOperandList.size()]</InnerVar>
                <InnerVar>LocalField [arrayField=acb.newFieldDeclaration(Modifier.PRIVATE,ClassName.DataValueDescriptor + "[]")]</InnerVar>
                <InnerVar>MethodBuilder [cb=acb.getConstructor()]</InnerVar>
                <InnerVar>int [numConstants=0]</InnerVar>
                <InnerVar>MethodBuilder [nonConstantMethod=null]</InnerVar>
                <InnerVar>MethodBuilder [currentConstMethod=cb]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cb;pushNewArray;[ClassName.DataValueDescriptor, listSize]</InnerMethodInvoke>
                <InnerMethodInvoke>cb;setField;[arrayField]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateStartStopKey</MethodName>
            <MethodComment>/** 
 * Generate start/stop key for this IN list operator.  Bug 3858.
 * @param isAsc		is the index ascending on the column in question
 * @param isStartKey	are we generating start key or not
 * @param acb	The ExpressionClassBuilder for the class we're generating
 * @param mb The MethodBuilder the expression will go into
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>isAsc</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isStartKey</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>acb</ParamName>
                    <ParamType>ExpressionClassBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mb</ParamName>
                    <ParamType>MethodBuilder</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [leftTypeFormatId=leftOperand.getTypeId().getTypeFormatId()]</InnerVar>
                <InnerVar>int [leftPrecision=leftOperand.getTypeServices().getPrecision()]</InnerVar>
                <InnerVar>int [leftScale=leftOperand.getTypeServices().getScale()]</InnerVar>
                <InnerVar>boolean [leftIsNullable=leftOperand.getTypeServices().isNullable()]</InnerVar>
                <InnerVar>int [leftMaximumWidth=leftOperand.getTypeServices().getMaximumWidth()]</InnerVar>
                <InnerVar>int [leftCollationType=leftOperand.getTypeServices().getCollationType()]</InnerVar>
                <InnerVar>int [leftCollationDerivation=leftOperand.getTypeServices().getCollationDerivation()]</InnerVar>
                <InnerVar>int [leftJDBCTypeId=leftOperand.getTypeId().isUserDefinedTypeId() ? leftOperand.getTypeId().getJDBCTypeId() : -1]</InnerVar>
                <InnerVar>int [listSize=rightOperandList.size()]</InnerVar>
                <InnerVar>int [numLoops, numValInLastLoop, currentOpnd=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>markAsOrdered</MethodName>
            <MethodComment>/** 
 * Indicate that the IN-list values for this node are ordered (i.e. they are all constants and they have been sorted).
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>markSortDescending</MethodName>
            <MethodComment>/** 
 * Indicate that the IN-list values for this node must be sorted in DESCENDING order.  This only applies to in-list "multi-probing", where the rows are processed in the order of the IN list elements themselves.  In that case, any requirement to sort the rows in descending order means that the values in the IN list have to be sorted in descending order, as well.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isOrdered</MethodName>
            <MethodComment>/** 
 * Return whether or not the IN-list values for this node are ordered. This is used for determining whether or not we need to do an execution- time sort.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sortDescending</MethodName>
            <MethodComment>/** 
 * Return whether or not the IN-list values for this node must be sorted in DESCENDING order.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>