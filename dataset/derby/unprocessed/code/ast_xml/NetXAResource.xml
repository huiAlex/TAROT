<Class>
    <Id>1685</Id>
    <Package>org.apache.derby.client.net</Package>
    <ClassName>NetXAResource</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>XAResource</SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>INITIAL_CALLINFO_ELEMENTS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>nullXid</FieldName>
            <FieldType>ClientXid</FieldType>
        </Field>
        <Field>
            <FieldName>XAFUNC_COMMIT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>XAFUNC_END</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>XAFUNC_FORGET</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>XAFUNC_PREPARE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>XAFUNC_RECOVER</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>XAFUNC_ROLLBACK</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>XAFUNC_START</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>XAFUNCSTR_NONE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>XAFUNCSTR_COMMIT</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>XAFUNCSTR_END</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>XAFUNCSTR_FORGET</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>XAFUNCSTR_PREPARE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>XAFUNCSTR_RECOVER</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>XAFUNCSTR_ROLLBACK</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>XAFUNCSTR_START</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>exceptionsOnXA</FieldName>
            <FieldType>SqlException</FieldType>
        </Field>
        <Field>
            <FieldName>netXAConn_</FieldName>
            <FieldType>NetXAConnection</FieldType>
        </Field>
        <Field>
            <FieldName>conn_</FieldName>
            <FieldType>NetConnection</FieldType>
        </Field>
        <Field>
            <FieldName>keepIsolationLevel</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>callInfoArray_</FieldName>
            <FieldType>NetXACallInfo</FieldType>
        </Field>
        <Field>
            <FieldName>timeoutSeconds</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>NetXAResource</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xaconn</ParamName>
                    <ParamType>XAConnection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>conn</ParamName>
                    <ParamType>NetXAConnection</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>conn;setNetXAResource;[this]</InnerMethodInvoke>
                <InnerMethodInvoke>callInfoArray_[0];saveConnectionVariables;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>commit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xid</ParamName>
                    <ParamType>Xid</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>onePhase</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>NetAgent [netAgent=conn_.netAgent_]</InnerVar>
                <InnerVar>int [rc=XAResource.XA_OK]</InnerVar>
                <InnerVar>NetXACallInfo [callInfo=callInfoArray_[conn_.currXACallInfoOffset_]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>XAException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSqlExceptionXAErrorCode</MethodName>
            <MethodComment>/** 
 * Get XAException.errorCode from SqlException For disconnect exception, return XAER_RMFAIL For other exceptions return XAER_RMERR For server side SQLExceptions during  XA operations the errorCode has already been determined and wrapped in an XAException for return to the client. see EmbedXAResource.wrapInXAException
 * @param sqle  SqlException to evaluate.
 * @return XAException.XAER_RMFAIL for disconnect exception,XAException.XAER_RMERR for other exceptions.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sqle</ParamName>
                    <ParamType>SqlException</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [seErrorCode=sqle.getErrorCode()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>end</MethodName>
            <MethodComment>/** 
 * Ends the work performed on behalf of a transaction branch. The resource manager dissociates the XA resource from the transaction branch specified and let the transaction be completed. &lt;p/&gt; If TMSUSPEND is specified in flags, the transaction branch is temporarily suspended in incomplete state. The transaction context is in suspened state and must be resumed via start with TMRESUME specified. &lt;p/&gt; If TMFAIL is specified, the portion of work has failed. The resource manager may mark the transaction as rollback-only &lt;p/&gt; If TMSUCCESS is specified, the portion of work has completed successfully.
 * @param xid   A global transaction identifier that is the same as what was used previously in the start method.
 * @param flags One of TMSUCCESS, TMFAIL, or TMSUSPEND
 * @throws XAException An error has occurred. Possible XAException values are XAER_RMERR, XAER_RMFAILED, XAER_NOTA,XAER_INVAL, XAER_PROTO, or XA_RB*.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xid</ParamName>
                    <ParamType>Xid</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>flags</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>NetAgent [netAgent=conn_.netAgent_]</InnerVar>
                <InnerVar>int [rc=XAResource.XA_OK]</InnerVar>
                <InnerVar>NetXACallInfo [callInfo=callInfoArray_[conn_.currXACallInfoOffset_]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>XAException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>forget</MethodName>
            <MethodComment>/** 
 * Tell the resource manager to forget about a heuristically (MANUALLY) completed transaction branch.
 * @param xid A global transaction identifier
 * @throws XAException An error has occurred. Possible exception values are XAER_RMERR, XAER_RMFAIL, XAER_NOTA,XAER_INVAL, or XAER_PROTO.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xid</ParamName>
                    <ParamType>Xid</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>NetAgent [netAgent=conn_.netAgent_]</InnerVar>
                <InnerVar>int [rc=XAResource.XA_OK]</InnerVar>
                <InnerVar>NetXACallInfo [callInfo=callInfoArray_[conn_.currXACallInfoOffset_]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>XAException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTransactionTimeout</MethodName>
            <MethodComment>/** 
 * Obtain the current transaction timeout value set for this XAResource instance. If XAResource.setTransactionTimeout was not use prior to invoking this method, the return value is 0; otherwise, the value used in the previous setTransactionTimeout call is returned.
 * @return the transaction timeout value in seconds. If the returned valueis equal to Integer.MAX_VALUE it means no timeout.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>XAException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>prepare</MethodName>
            <MethodComment>/** 
 * Ask the resource manager to prepare for a transaction commit of the transaction specified in xid.
 * @param xid A global transaction identifier
 * @return A value indicating the resource manager's vote on the outcome of the transaction. The possible valuesare: XA_RDONLY or XA_OK. If the resource manager wants to roll back the transaction, it should do so by raising an appropriate XAException in the prepare method.
 * @throws XAException An error has occurred. Possible exception values are: XA_RB*, XAER_RMERR, XAER_RMFAIL,XAER_NOTA, XAER_INVAL, or XAER_PROTO.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xid</ParamName>
                    <ParamType>Xid</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>NetAgent [netAgent=conn_.netAgent_]</InnerVar>
                <InnerVar>int [rc=XAResource.XA_OK]</InnerVar>
                <InnerVar>NetXACallInfo [callInfo=callInfoArray_[conn_.currXACallInfoOffset_]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>XAException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>recover</MethodName>
            <MethodComment>/** 
 * Obtain a list of prepared transaction branches from a resource manager. The transaction manager calls this method during recovery to obtain the list of transaction branches that are currently in prepared or heuristically completed states.
 * @param flag One of TMSTARTRSCAN, TMENDRSCAN, TMNOFLAGS. TMNOFLAGS must be used when no other flags are set inflags.
 * @return The resource manager returns zero or more XIDs for the transaction branches that are currently in aprepared or heuristically completed state. If an error occurs during the operation, the resource manager should raise the appropriate XAException.
 * @throws XAException An error has occurred. Possible values are XAER_RMERR, XAER_RMFAIL, XAER_INVAL, andXAER_PROTO.
 */
</MethodComment>
            <ReturnType>Xid[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>flag</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [rc=XAResource.XA_OK]</InnerVar>
                <InnerVar>NetAgent [netAgent=conn_.netAgent_]</InnerVar>
                <InnerVar>Xid[] [xidList=null]</InnerVar>
                <InnerVar>NetXACallInfo [callInfo=callInfoArray_[conn_.currXACallInfoOffset_]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>XAException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rollback</MethodName>
            <MethodComment>/** 
 * Inform the resource manager to roll back work done on behalf of a transaction branch
 * @param xid A global transaction identifier
 * @throws XAException An error has occurred
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xid</ParamName>
                    <ParamType>Xid</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>NetAgent [netAgent=conn_.netAgent_]</InnerVar>
                <InnerVar>int [rc=XAResource.XA_OK]</InnerVar>
                <InnerVar>NetXACallInfo [callInfo=callInfoArray_[conn_.currXACallInfoOffset_]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>XAException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setTransactionTimeout</MethodName>
            <MethodComment>/** 
 * Set the current transaction timeout value for this XAResource instance. Once set, this timeout value is effective until setTransactionTimeout is invoked again with a different value. To reset the timeout value to the default value used by the resource manager, set the value to zero. If the timeout operation is performed successfully, the method returns true; otherwise false. If a resource manager does not support transaction timeout value to be set explicitly, this method returns false.
 * @param seconds the transaction timeout value in seconds.Value of 0 means the reasource manager's default value. Value of Integer.MAX_VALUE means no timeout.
 * @return true if transaction timeout value is set successfully;otherwise false.
 * @exception XAException - An error has occurred. Possible exceptionvalues are XAER_RMERR, XAER_RMFAIL, or XAER_INVAL.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>seconds</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>XAException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setKeepCurrentIsolationLevel</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>flag</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>keepCurrentIsolationLevel</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>start</MethodName>
            <MethodComment>/** 
 * Start work on behalf of a transaction branch specified in xid
 * @param xid   A global transaction identifier to be associated with the resource
 * @param flags One of TMNOFLAGS, TMJOIN, or TMRESUME
 * @throws XAException An error has occurred. Possible exceptions   * are XA_RB*, XAER_RMERR, XAER_RMFAIL,XAER_DUPID, XAER_OUTSIDE, XAER_NOTA, XAER_INVAL, or XAER_PROTO.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xid</ParamName>
                    <ParamType>Xid</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>flags</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>NetAgent [netAgent=conn_.netAgent_]</InnerVar>
                <InnerVar>int [rc=XAResource.XA_OK]</InnerVar>
                <InnerVar>NetXACallInfo [callInfo=callInfoArray_[conn_.currXACallInfoOffset_]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>XAException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getXAExceptionText</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rc</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [xaExceptionText]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>throwXAException</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rc</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuilder [xaExceptionText=new StringBuilder(64)]</InnerVar>
                <InnerVar>SqlException [sqlExceptions=exceptionsOnXA]</InnerVar>
                <InnerVar>XaException [xaException=new XaException(conn_.agent_.logWriter_,sqlExceptions,xaExceptionText.toString())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>xaExceptionText;append;[getXAExceptionText(rc)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setXaStateForXAException;[rc]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>XAException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setXaStateForXAException</MethodName>
            <MethodComment>/** 
 * Reset the transaction branch association state  to XA_T0_NOT_ASSOCIATED for XAER_RM* and XA_RB* Exceptions. All other exceptions leave the state unchanged
 * @param rc  // return code from XAException
 * @throws XAException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rc</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isSameRM</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xares</ParamName>
                    <ParamType>XAResource</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [isSame=false]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>XAException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>xidsEqual</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xid1</ParamName>
                    <ParamType>Xid</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>xid2</ParamName>
                    <ParamType>Xid</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [xid1Length=xid1.getGlobalTransactionId().length]</InnerVar>
                <InnerVar>byte[] [xid1Bytes=xid1.getGlobalTransactionId()]</InnerVar>
                <InnerVar>byte[] [xid2Bytes=xid2.getGlobalTransactionId()]</InnerVar>
                <InnerVar>int [i]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>connectionClosedFailure</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;throwXAException;[XAException.XAER_RMFAIL]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>XAException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getXAFuncStr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xaFunc</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>xaRetValErrorAccumSQL</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>callInfo</ParamName>
                    <ParamType>NetXACallInfo</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>currentRC</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [rc=callInfo.xaRetVal_]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>processLocalHost</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>serverName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>