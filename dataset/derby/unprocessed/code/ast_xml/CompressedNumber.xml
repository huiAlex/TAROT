<Class>
    <Id>1715</Id>
    <Package>org.apache.derby.iapi.services.io</Package>
    <ClassName>CompressedNumber</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>CompressedNumber  /** 
 * Static methods to write and read compressed forms of numbers to DataOut and DataIn interfaces. Format written is platform independent like the Data* interfaces and must remain fixed once a product is shipped. If a different format is required then write a new set of methods, e.g. writeInt2. The formats defined by stored format identifiers are implicitly dependent on these formats not changing.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>MAX_INT_STORED_SIZE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>MAX_LONG_STORED_SIZE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>MAX_COMPRESSED_INT_ONE_BYTE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>MAX_COMPRESSED_INT_TWO_BYTES</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>writeInt</MethodName>
            <MethodComment>/** 
 * Write a compressed integer only supporting signed values. Formats are (with x representing value bits): &lt;PRE&gt; 1 Byte - 00xxxxxx                              Represents the value &amp;lt;= 63 (0x3f) 2 Byte - 01xxxxxx xxxxxxxx                     Represents the value &amp;gt; 63 &amp;amp;&amp;amp; &amp;lt;= 16383 (0x3fff) 4 byte - 1xxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx   Represents the value &amp;gt; 16383 &amp;amp;&amp;amp; &amp;lt;= MAX_INT &lt;/PRE&gt;
 * @exception IOException value is negative or an exception was thrown by a method on out.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>DataOutput</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>out;writeByte;[((value &gt;&gt;&gt; 24) | 0x80) &amp; 0xff]</InnerMethodInvoke>
                <InnerMethodInvoke>out;writeByte;[(value &gt;&gt;&gt; 16) &amp; 0xff]</InnerMethodInvoke>
                <InnerMethodInvoke>out;writeByte;[(value &gt;&gt;&gt; 8) &amp; 0xff]</InnerMethodInvoke>
                <InnerMethodInvoke>out;writeByte;[(value) &amp; 0xff]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeInt</MethodName>
            <MethodComment>/** 
 * Write a compressed integer directly to an OutputStream.
 * @exception IOException an exception was thrown by a method on in.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>OutputStream</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>out;write;[((value &gt;&gt;&gt; 24) | 0x80) &amp; 0xff]</InnerMethodInvoke>
                <InnerMethodInvoke>out;write;[(value &gt;&gt;&gt; 16) &amp; 0xff]</InnerMethodInvoke>
                <InnerMethodInvoke>out;write;[(value &gt;&gt;&gt; 8) &amp; 0xff]</InnerMethodInvoke>
                <InnerMethodInvoke>out;write;[(value) &amp; 0xff]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readInt</MethodName>
            <MethodComment>/** 
 * Read an integer previously written by writeInt().
 * @exception IOException an exception was thrown by a method on in.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>in</ParamName>
                    <ParamType>DataInput</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [value=in.readUnsignedByte()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readInt</MethodName>
            <MethodComment>/** 
 * Read an integer previously written by writeInt().
 * @exception IOException an exception was thrown by a method on in.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>in</ParamName>
                    <ParamType>InputStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [value=InputStreamUtil.readUnsignedByte(in)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readInt</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>data</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>offset</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [value=data[offset++]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sizeInt</MethodName>
            <MethodComment>/** 
 * Return the number of bytes that would be written by a writeInt call
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeLong</MethodName>
            <MethodComment>/** 
 * Write a compressed long only supporting signed values. Formats are (with x representing value bits): &lt;PRE&gt; 2 byte - 00xxxxxx xxxxxxxx                     Represents the value &amp;lt;= 16383 (0x3fff) 4 byte - 01xxxxxx xxxxxxxx xxxxxxxx xxxxxxxx   Represents the value &amp;gt; 16383  &amp;amp;&amp;amp; &amp;lt;= 0x3fffffff 8 byte - 1xxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx   Represents the value &amp;gt; 0x3fffffff &amp;amp;&amp;amp; &amp;lt;= MAX_LONG &lt;/PRE&gt;
 * @exception IOException value is negative or an exception was thrown by a method on out.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>DataOutput</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>out;writeByte;[(int)(((value &gt;&gt;&gt; 56) | 0x80) &amp; 0xff)]</InnerMethodInvoke>
                <InnerMethodInvoke>out;writeByte;[(int)((value &gt;&gt;&gt; 48) &amp; 0xff)]</InnerMethodInvoke>
                <InnerMethodInvoke>out;writeByte;[(int)((value &gt;&gt;&gt; 40) &amp; 0xff)]</InnerMethodInvoke>
                <InnerMethodInvoke>out;writeByte;[(int)((value &gt;&gt;&gt; 32) &amp; 0xff)]</InnerMethodInvoke>
                <InnerMethodInvoke>out;writeByte;[(int)((value &gt;&gt;&gt; 24) &amp; 0xff)]</InnerMethodInvoke>
                <InnerMethodInvoke>out;writeByte;[(int)((value &gt;&gt;&gt; 16) &amp; 0xff)]</InnerMethodInvoke>
                <InnerMethodInvoke>out;writeByte;[(int)((value &gt;&gt;&gt; 8) &amp; 0xff)]</InnerMethodInvoke>
                <InnerMethodInvoke>out;writeByte;[(int)((value) &amp; 0xff)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeLong</MethodName>
            <MethodComment>/** 
 * Write a compressed integer only supporting signed values.
 * @exception IOException value is negative or an exception was thrown by a method on out.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>OutputStream</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>out;write;[(int)(((value &gt;&gt;&gt; 56) | 0x80) &amp; 0xff)]</InnerMethodInvoke>
                <InnerMethodInvoke>out;write;[(int)((value &gt;&gt;&gt; 48) &amp; 0xff)]</InnerMethodInvoke>
                <InnerMethodInvoke>out;write;[(int)((value &gt;&gt;&gt; 40) &amp; 0xff)]</InnerMethodInvoke>
                <InnerMethodInvoke>out;write;[(int)((value &gt;&gt;&gt; 32) &amp; 0xff)]</InnerMethodInvoke>
                <InnerMethodInvoke>out;write;[(int)((value &gt;&gt;&gt; 24) &amp; 0xff)]</InnerMethodInvoke>
                <InnerMethodInvoke>out;write;[(int)((value &gt;&gt;&gt; 16) &amp; 0xff)]</InnerMethodInvoke>
                <InnerMethodInvoke>out;write;[(int)((value &gt;&gt;&gt; 8) &amp; 0xff)]</InnerMethodInvoke>
                <InnerMethodInvoke>out;write;[(int)((value) &amp; 0xff)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readLong</MethodName>
            <MethodComment>/** 
 * Read a long previously written by writeLong().
 * @exception IOException an exception was thrown by a method on in.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>in</ParamName>
                    <ParamType>DataInput</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [int_value=in.readUnsignedByte()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readLong</MethodName>
            <MethodComment>/** 
 * Read a long previously written by writeLong().
 * @exception IOException an exception was thrown by a method on in.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>in</ParamName>
                    <ParamType>InputStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [int_value=InputStreamUtil.readUnsignedByte(in)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readLong</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>data</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>offset</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [int_value=data[offset++]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sizeLong</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>