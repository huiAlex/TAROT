<Class>
    <Id>752</Id>
    <Package>org.apache.derby.impl.sql.depend</Package>
    <ClassName>BasicDependencyManager</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>DependencyManager</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>BasicDependencyManager  /** 
 * The dependency manager tracks needs that dependents have of providers. &lt;p&gt; A dependency can be either persistent or non-persistent. Persistent dependencies are stored in the data dictionary, and non-persistent dependencies are stored within the dependency manager itself (in memory). &lt;p&gt; &lt;em&gt;Synchronization:&lt;/em&gt; The need for synchronization is different depending on whether the dependency is an in-memory dependency or a stored dependency. When accessing and modifying in-memory dependencies, Java synchronization must be used (specifically, we synchronize on  {@code this}). When accessing and modifying stored dependencies, which are stored in the data dictionary, we expect that the locking protocols will provide the synchronization needed. Note that stored dependencies should not be accessed while holding the monitor of  {@code this}, as this may result in deadlocks. So far the need for synchronization across both in-memory and stored dependencies hasn't occurred.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>dd</FieldName>
            <FieldType>DataDictionary</FieldType>
        </Field>
        <Field>
            <FieldName>dependents</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>dependents</FieldName>
            <FieldType>UUID</FieldType>
        </Field>
        <Field>
            <FieldName>providers</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>providers</FieldName>
            <FieldType>UUID</FieldType>
        </Field>
        <Field>
            <FieldName>EMPTY_PROVIDER_INFO</FieldName>
            <FieldType>ProviderInfo[]</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>addDependency</MethodName>
            <MethodComment>/** 
 * adds a dependency from the dependent on the provider. This will be considered to be the default type of dependency, when dependency types show up. &lt;p&gt; Implementations of addDependency should be fast -- performing alot of extra actions to add a dependency would be a detriment.
 * @param d the dependent
 * @param p the provider
 * @exception StandardException thrown if something goes wrong
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>d</ParamName>
                    <ParamType>Dependent</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>p</ParamName>
                    <ParamType>Provider</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cm</ParamName>
                    <ParamType>ContextManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;addDependency;[d, p, cm, null]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addDependency</MethodName>
            <MethodComment>/** 
 * Adds the dependency to the data dictionary or the in-memory dependency map. &lt;p&gt; The action taken is detmermined by whether the dependent and/or the provider are persistent.
 * @param d the dependent
 * @param p the provider
 * @param cm context manager
 * @param tc transaction controller, used to determine if any transactionaloperations should be attempted carried out in a nested transaction. If  {@code tc} is {@code null}, the user transaction is used.
 * @throws StandardException if adding the dependency fails
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>d</ParamName>
                    <ParamType>Dependent</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>p</ParamName>
                    <ParamType>Provider</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cm</ParamName>
                    <ParamType>ContextManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tc</ParamName>
                    <ParamType>TransactionController</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addInMemoryDependency</MethodName>
            <MethodComment>/** 
 * Adds the dependency as an in-memory dependency.
 * @param d the dependent
 * @param p the provider
 * @param cm context manager
 * @throws StandardException if adding the dependency fails
 * @see #addStoredDependency
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>d</ParamName>
                    <ParamType>Dependent</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>p</ParamName>
                    <ParamType>Provider</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cm</ParamName>
                    <ParamType>ContextManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Dependency [dy=new BasicDependency(d,p)]</InnerVar>
                <InnerVar>boolean [addedToProvs=false]</InnerVar>
                <InnerVar>boolean [addedToDeps=addDependencyToTable(dependents,d.getObjectID(),dy)]</InnerVar>
                <InnerVar>StatementContext [sc=(StatementContext)cm.getContext(org.apache.derby.iapi.reference.ContextId.LANG_STATEMENT)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>sc;addDependency;[dy]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addStoredDependency</MethodName>
            <MethodComment>/** 
 * Adds the dependency as a stored dependency. &lt;p&gt; We expect that transactional locking (in the data dictionary) is enough to protect us from concurrent changes when adding stored dependencies. Adding synchronization here and accessing the data dictionary (which is transactional) may cause deadlocks.
 * @param d the dependent
 * @param p the provider
 * @param cm context manager
 * @param tc transaction controller (may be {@code null})
 * @throws StandardException if adding the dependency fails
 * @see #addInMemoryDependency
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>d</ParamName>
                    <ParamType>Dependent</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>p</ParamName>
                    <ParamType>Provider</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cm</ParamName>
                    <ParamType>ContextManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tc</ParamName>
                    <ParamType>TransactionController</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LanguageConnectionContext [lcc=getLanguageConnectionContext(cm)]</InnerVar>
                <InnerVar>TransactionController [tcToUse=(tc == null) ? lcc.getTransactionExecute() : tc]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>dd;addDescriptor;[new DependencyDescriptor(d,p), null, DataDictionary.SYSDEPENDS_CATALOG_NUM, true, tcToUse]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>dropDependency</MethodName>
            <MethodComment>/** 
 * drops a single dependency
 * @param d the dependent
 * @param p the provider
 * @exception StandardException thrown if something goes wrong
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lcc</ParamName>
                    <ParamType>LanguageConnectionContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>d</ParamName>
                    <ParamType>Dependent</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>p</ParamName>
                    <ParamType>Provider</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DependencyDescriptor [dependencyDescriptor=new DependencyDescriptor(d,p)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>dd;dropStoredDependency;[dependencyDescriptor, lcc.getTransactionExecute()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>invalidateFor</MethodName>
            <MethodComment>/** 
 * mark all dependencies on the named provider as invalid. When invalidation types show up, this will use the default invalidation type. The dependencies will still exist once they are marked invalid; clearDependencies should be used to remove dependencies that a dependent has or provider gives. &lt;p&gt; Implementations of this can take a little time, but are not really expected to recompile things against any changes made to the provider that caused the invalidation. The dependency system makes no guarantees about the state of the provider -- implementations can call this before or after actually changing the provider to its new state. &lt;p&gt; Implementations should throw StandardException if the invalidation should be disallowed.
 * @param p the provider
 * @param action	The action causing the invalidate
 * @exception StandardException thrown if unable to make it invalid
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>p</ParamName>
                    <ParamType>Provider</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>action</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lcc</ParamName>
                    <ParamType>LanguageConnectionContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>coreInvalidateFor</MethodName>
            <MethodComment>/** 
 * A version of invalidateFor that does not provide synchronization among invalidators.
 * @param p the provider
 * @param action the action causing the invalidation
 * @param lcc language connection context
 * @throws StandardException if something goes wrong
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>p</ParamName>
                    <ParamType>Provider</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>action</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lcc</ParamName>
                    <ParamType>LanguageConnectionContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;Dependency&gt; [list=getDependents(p)]</InnerVar>
                <InnerVar>FormatableBitSet [affectedCols=null, subsetCols=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clearDependencies</MethodName>
            <MethodComment>/** 
 * Erases all of the dependencies the dependent has, be they valid or invalid, of any dependency type.  This action is usually performed as the first step in revalidating a dependent; it first erases all the old dependencies, then revalidates itself generating a list of new dependencies, and then marks itself valid if all its new dependencies are valid. &lt;p&gt; There might be a future want to clear all dependencies for a particular provider, e.g. when destroying the provider. However, at present, they are assumed to stick around and it is the responsibility of the dependent to erase them when revalidating against the new version of the provider. &lt;p&gt; clearDependencies will delete dependencies if they are stored; the delete is finalized at the next commit.
 * @param d the dependent
 * @exception StandardException		Thrown on failure
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lcc</ParamName>
                    <ParamType>LanguageConnectionContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>d</ParamName>
                    <ParamType>Dependent</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;clearDependencies;[lcc, d, null]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clearDependencies</MethodName>
            <MethodComment>/** 
 * @inheritDoc
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lcc</ParamName>
                    <ParamType>LanguageConnectionContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>d</ParamName>
                    <ParamType>Dependent</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tc</ParamName>
                    <ParamType>TransactionController</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>UUID [id=d.getObjectID()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clearInMemoryDependency</MethodName>
            <MethodComment>/** 
 * Clear the specified in memory dependency. This is useful for clean-up when an exception occurs. (We clear all in-memory dependencies added in the current StatementContext.)
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dy</ParamName>
                    <ParamType>Dependency</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>UUID [deptId=dy.getDependent().getObjectID()]</InnerVar>
                <InnerVar>UUID [provId=dy.getProviderKey()]</InnerVar>
                <InnerVar>List [deps=(List)dependents.get(deptId)]</InnerVar>
                <InnerVar>List [provs=(List)providers.get(provId)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>deps;remove;[dy]</InnerMethodInvoke>
                <InnerMethodInvoke>provs;remove;[dy]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPersistentProviderInfos</MethodName>
            <MethodComment>/** 
 * @see DependencyManager#getPersistentProviderInfos
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>ProviderInfo[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dependent</ParamName>
                    <ParamType>Dependent</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;Provider&gt; [provs=getProviders(dependent)]</InnerVar>
                <InnerVar>List&lt;ProviderInfo&gt; [pih=new ArrayList&lt;ProviderInfo&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPersistentProviderInfos</MethodName>
            <MethodComment>/** 
 * @see DependencyManager#getPersistentProviderInfos
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>ProviderInfo[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pl</ParamName>
                    <ParamType>ProviderList</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Enumeration [e=pl.elements()]</InnerVar>
                <InnerVar>int [numProviders=0]</InnerVar>
                <InnerVar>ProviderInfo[] [retval]</InnerVar>
                <InnerVar>int [piCtr=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clearColumnInfoInProviders</MethodName>
            <MethodComment>/** 
 * @see DependencyManager#clearColumnInfoInProviders
 * @param pl		provider list
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pl</ParamName>
                    <ParamType>ProviderList</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Enumeration [e=pl.elements()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>copyDependencies</MethodName>
            <MethodComment>/** 
 * Copy dependencies from one dependent to another.
 * @param copy_From the dependent to copy from	
 * @param copyTo the dependent to copy to
 * @param persistentOnly only copy persistent dependencies
 * @param cm		Current ContextManager
 * @exception StandardException		Thrown on error.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>copy_From</ParamName>
                    <ParamType>Dependent</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>copyTo</ParamName>
                    <ParamType>Dependent</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>persistentOnly</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cm</ParamName>
                    <ParamType>ContextManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;copyDependencies;[copy_From, copyTo, persistentOnly, cm, null]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>copyDependencies</MethodName>
            <MethodComment>/** 
 * @inheritDoc 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>copy_From</ParamName>
                    <ParamType>Dependent</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>copyTo</ParamName>
                    <ParamType>Dependent</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>persistentOnly</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cm</ParamName>
                    <ParamType>ContextManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tc</ParamName>
                    <ParamType>TransactionController</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List [list=getProviders(copy_From)]</InnerVar>
                <InnerVar>Iterator [depsIter=list.iterator()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getActionString</MethodName>
            <MethodComment>/** 
 * Returns a string representation of the SQL action, hence no need to internationalize, which is causing the invokation of the Dependency Manager.
 * @param action		The action
 * @return String	The String representation
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>action</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>countDependencies</MethodName>
            <MethodComment>/** 
 * Count the number of active dependencies, both stored and in memory, in the system.
 * @return int		The number of active dependencies in the system.
 * @exception StandardException thrown if something goes wrong
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>List&lt;?&gt; [storedDeps=dd.getAllDependencyDescriptorsList()]</InnerVar>
                <InnerVar>int [numDependencies=storedDeps.size()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>BasicDependencyManager</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dd</ParamName>
                    <ParamType>DataDictionary</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addDependencyToTable</MethodName>
            <MethodComment>/** 
 * Add a new dependency to the specified table if it does not already exist in that table.
 * @return boolean		Whether or not the dependency get added.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>table</ParamName>
                    <ParamType>UUID</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>UUID</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dy</ParamName>
                    <ParamType>Dependency</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;Dependency&gt; [deps=table.get(key)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clearProviderDependency</MethodName>
            <MethodComment>/** 
 * removes a dependency for a given provider. assumes that the dependent removal is being dealt with elsewhere. Won't assume that the dependent only appears once in the list.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>p</ParamName>
                    <ParamType>UUID</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>d</ParamName>
                    <ParamType>Dependency</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;?&gt; [deps=providers.get(p)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>deps;remove;[d]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDependencyDescriptorList</MethodName>
            <MethodComment>/** 
 * Turn a list of DependencyDescriptors into a list of Dependencies.
 * @param storedList	The List of DependencyDescriptors representingstored dependencies.
 * @param providerForList The provider if this list is being createdfor a list of dependents. Null otherwise.
 * @return List		The converted List
 * @exception StandardException thrown if something goes wrong
 */
</MethodComment>
            <ReturnType>Dependency</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>storedList</ParamName>
                    <ParamType>DependencyDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>providerForList</ParamName>
                    <ParamType>Provider</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;Dependency&gt; [retval=new ArrayList&lt;Dependency&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLanguageConnectionContext</MethodName>
            <MethodComment>/** 
 * Returns the LanguageConnectionContext to use.
 * @param cm	Current ContextManager
 * @return LanguageConnectionContext	The LanguageConnectionContext to use.
 */
</MethodComment>
            <ReturnType>LanguageConnectionContext</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cm</ParamName>
                    <ParamType>ContextManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getProviders</MethodName>
            <MethodComment>/** 
 * Returns a list of all providers that this dependent has (even invalid ones). Includes all dependency types.
 * @param d the dependent
 * @return A list of providers (possibly empty).
 * @throws StandardException thrown if something goes wrong
 */
</MethodComment>
            <ReturnType>Provider</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>d</ParamName>
                    <ParamType>Dependent</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;Provider&gt; [provs=new ArrayList&lt;Provider&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDependents</MethodName>
            <MethodComment>/** 
 * Returns an enumeration of all dependencies that this provider is supporting for any dependent at all (even invalid ones). Includes all dependency types.
 * @param p the provider
 * @return A list of dependents (possibly empty).
 * @throws StandardException if something goes wrong
 */
</MethodComment>
            <ReturnType>Dependency</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>p</ParamName>
                    <ParamType>Provider</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;Dependency&gt; [deps=new ArrayList&lt;Dependency&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>