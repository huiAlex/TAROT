<Class>
    <Id>80</Id>
    <Package>org.apache.derbyTesting.system.oe.client</Package>
    <ClassName>Operations</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Operations  /** 
 * Interface for a client to execute the logical operations. Various implementations can be provided, e.g. client side SQL, procedure, etc. &lt;P&gt; Typical model is that each client has its own instance of an object that implements Operations. For example the implementation in a client side SQL implementation would have a reference to its own JDBC connection and prepared statements. &lt;P&gt; Implementations of the execution methods must perform the following: &lt;OL&gt; &lt;LI&gt;Execute business transaction &lt;LI&gt;Populate POJO objects required by display method &lt;LI&gt;Commit the database transaction(s) &lt;LI&gt;Call the appropriate display method from Display &lt;/UL&gt; &lt;P&gt; DECIMAL values are represented as String objects to allow Order Entry to be run on J2ME/CDC/Foundation which does not support BigDecimal.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>stockLevel</MethodName>
            <MethodComment>/** 
 * Execute stock level. Stock level is described in clause 2.8.
 * @param display Where to display the results, if null results are not displayed.
 * @param displayData Any client specific display information, such as servlet context.
 * @param w Warehouse for transaction
 * @param d District for transaction
 * @param threshold Threshold for transaction.
 * @see Display#displayStockLevel(Object,short,short,int,int)
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>display</ParamName>
                    <ParamType>Display</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>displayData</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>w</ParamName>
                    <ParamType>short</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>d</ParamName>
                    <ParamType>short</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>threshold</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>orderStatus</MethodName>
            <MethodComment>/** 
 * Execute order status by last name. Order status is described in clause 2.6.
 * @param display Where to display the results, if null results are not displayed.
 * @param displayData Any client specific display information, such as servlet context.
 * @param w Warehouse identifier
 * @param d District identifier
 * @param customerLast Customer's last name.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>display</ParamName>
                    <ParamType>Display</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>displayData</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>w</ParamName>
                    <ParamType>short</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>d</ParamName>
                    <ParamType>short</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>customerLast</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>orderStatus</MethodName>
            <MethodComment>/** 
 * Execute order status by customer identifer. Order status is described in clause 2.6.
 * @param display Where to display the results, if null results are not displayed.
 * @param displayData Any client specific display information, such as servlet context.
 * @param w Warehouse identifier
 * @param d District identifier
 * @param c Customer identifer.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>display</ParamName>
                    <ParamType>Display</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>displayData</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>w</ParamName>
                    <ParamType>short</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>d</ParamName>
                    <ParamType>short</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>payment</MethodName>
            <MethodComment>/** 
 * Execute payment by last name. Payment is described in clause 2.5.
 * @param display Where to display the results, if null results are not displayed.
 * @param displayData Any client specific display information, such as servlet context.
 * @param w Home warehouse identifier
 * @param d Home district identifier
 * @param cw Customer warehouse identifier
 * @param cd Customer district identifier
 * @param customerLast Customer's last name.
 * @param amount Payment amount
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>display</ParamName>
                    <ParamType>Display</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>displayData</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>w</ParamName>
                    <ParamType>short</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>d</ParamName>
                    <ParamType>short</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cw</ParamName>
                    <ParamType>short</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cd</ParamName>
                    <ParamType>short</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>customerLast</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>amount</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>payment</MethodName>
            <MethodComment>/** 
 * Execute payment by customer identifer. Payment is described in clause 2.5.
 * @param display Where to display the results, if null results are not displayed.
 * @param displayData Any client specific display information, such as servlet context.
 * @param w Home warehouse identifier
 * @param d Home district identifier
 * @param cw Customer warehouse identifier
 * @param cd Customer district identifier
 * @param c Customer identifer.
 * @param amount Payment amount
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>display</ParamName>
                    <ParamType>Display</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>displayData</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>w</ParamName>
                    <ParamType>short</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>d</ParamName>
                    <ParamType>short</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cw</ParamName>
                    <ParamType>short</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cd</ParamName>
                    <ParamType>short</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>amount</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newOrder</MethodName>
            <MethodComment>/** 
 * Execute new order. New order is described in clause 2.4. &lt;P&gt; Assumption is that items.length == quanties.length == supplyW.length.
 * @param display Where to display the results, if null results are not displayed.
 * @param displayData Client specific display information, such as servlet context.
 * @param w Warehouse identifier
 * @param d District identifier
 * @param c Customer identifier
 * @param items array of item numbers
 * @param quantities quanties for each item
 * @param supplyW Supply warehouse for each item.
 * @throws Exception
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>display</ParamName>
                    <ParamType>Display</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>displayData</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>w</ParamName>
                    <ParamType>short</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>d</ParamName>
                    <ParamType>short</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>items</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>quantities</ParamName>
                    <ParamType>short[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>supplyW</ParamName>
                    <ParamType>short[]</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>scheduleDelivery</MethodName>
            <MethodComment>/** 
 * Queue a delivery request. Queuing of delivery requests is described in clause 2.7.2. &lt;P&gt; The implementation of Operations is responsible for managing the FIFO queue of requests, which could be in a flat file, the database or memory etc.
 * @param display Where to display the results, if null results are not displayed.
 * @param displayData Any client specific display information, such as servlet context.
 * @param w Warehouse identifier
 * @param carrier Carrier identifier
 * @throws Exception
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>display</ParamName>
                    <ParamType>Display</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>displayData</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>w</ParamName>
                    <ParamType>short</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>carrier</ParamName>
                    <ParamType>short</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>delivery</MethodName>
            <MethodComment>/** 
 * Execute a single delivery from the FIFO queue. Processing a delivery request is described in clause 2.7.4.
 * @throws Exception
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>close</MethodName>
            <MethodComment>/** 
 * Release any resources.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>