<Class>
    <Id>297</Id>
    <Package>org.apache.derby.mbeans</Package>
    <ClassName>ManagementMBean</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ManagementMBean  /** 
 * JMX MBean inteface to control visibility of Derby's MBeans. When Derby boots it attempts to register its MBeans. It may fail due to lack of valid permissions. If Derby does not register its MBeans then an application may register the Management implementation of ManagementMBean itself and use it to start Derby's JMX management. &lt;P&gt; Key properties for registered MBean when registered by Derby: &lt;UL&gt; &lt;LI&gt; &lt;code&gt;type=Management&lt;/code&gt; &lt;LI&gt; &lt;code&gt;system=&lt;/code&gt;&lt;em&gt;runtime system identifier&lt;/em&gt; (see overview) &lt;/UL&gt;
 * @see Management
 * @see ManagementMBean#getSystemIdentifier()
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>isManagementActive</MethodName>
            <MethodComment>/** 
 * Is Derby's JMX management active. If active then Derby has registered MBeans relevant to its current state.
 * @return true Derby has registered beans, false Derby has notregistered any beans.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSystemIdentifier</MethodName>
            <MethodComment>/** 
 * Get the system identifier that this MBean is managing. The system identifier is a runtime value to disambiguate multiple Derby systems in the same virtual machine but different class loaders.
 * @return Runtime identifier for the system, null if Derby is not running.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startManagement</MethodName>
            <MethodComment>/** 
 * Inform Derby to start its JMX management by registering MBeans relevant to its current state. If Derby is not booted then no action is taken. &lt;P&gt; Require &lt;code&gt;SystemPermission("jmx", "control")&lt;/code&gt; if a security manager is installed.
 * @see org.apache.derby.security.SystemPermission
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>stopManagement</MethodName>
            <MethodComment>/** 
 * Inform Derby to stop its JMX management by unregistering its MBeans. If Derby is not booted then no action is taken. &lt;P&gt; Require &lt;code&gt;SystemPermission("jmx", "control")&lt;/code&gt; if a security manager is installed.
 * @see org.apache.derby.security.SystemPermission
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>