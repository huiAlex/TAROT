<Class>
    <Id>1716</Id>
    <Package>org.apache.derby.iapi.sql.dictionary</Package>
    <ClassName>CatalogRowFactory</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>CatalogRowFactory  /** 
 * Superclass of all row factories.
 * @version 0.2
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>indexNames</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>indexColumnPositions</FieldName>
            <FieldType>int[][]</FieldType>
        </Field>
        <Field>
            <FieldName>indexUniqueness</FieldName>
            <FieldType>boolean[]</FieldType>
        </Field>
        <Field>
            <FieldName>tableUUID</FieldName>
            <FieldType>UUID</FieldType>
        </Field>
        <Field>
            <FieldName>heapUUID</FieldName>
            <FieldType>UUID</FieldType>
        </Field>
        <Field>
            <FieldName>indexUUID</FieldName>
            <FieldType>UUID[]</FieldType>
        </Field>
        <Field>
            <FieldName>dvf</FieldName>
            <FieldType>DataValueFactory</FieldType>
        </Field>
        <Field>
            <FieldName>ef</FieldName>
            <FieldType>ExecutionFactory</FieldType>
        </Field>
        <Field>
            <FieldName>uuidf</FieldName>
            <FieldType>UUIDFactory</FieldType>
        </Field>
        <Field>
            <FieldName>indexCount</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>columnCount</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>catalogName</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>CatalogRowFactory</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>uuidf</ParamName>
                    <ParamType>UUIDFactory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ef</ParamName>
                    <ParamType>ExecutionFactory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dvf</ParamName>
                    <ParamType>DataValueFactory</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getExecutionFactory</MethodName>
            <MethodComment>/** 
 * Gets a ExecutionFactory
 * @return	an execution factory
 */
</MethodComment>
            <ReturnType>ExecutionFactory</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getUUIDFactory</MethodName>
            <MethodComment>/** 
 * Get the UUID factory
 * @return	the UUID factory
 */
</MethodComment>
            <ReturnType>UUIDFactory</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCanonicalTableUUID</MethodName>
            <MethodComment>/** 
 * Get the UUID of this catalog. This is the hard-coded uuid for this catalog that is generated for releases starting with Plato (1.3). Earlier releases generated their own UUIDs for system objectss on the fly.
 * @return	the name of this catalog
 */
</MethodComment>
            <ReturnType>UUID</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCanonicalHeapUUID</MethodName>
            <MethodComment>/** 
 * Get the UUID of the heap underlying this catalog. See getCanonicalTableUUID() for a description of canonical uuids.
 * @return	the uuid of the heap
 */
</MethodComment>
            <ReturnType>UUID</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCanonicalIndexUUID</MethodName>
            <MethodComment>/** 
 * Get the UUID of the numbered index. See getCanonicalTableUUID() for a description of canonical uuids.
 * @param indexNumber	The (0-based) index number.
 * @return	the uuid of the heap
 */
</MethodComment>
            <ReturnType>UUID</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>indexNumber</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getIndexColumnCount</MethodName>
            <MethodComment>/** 
 * Get the number of columns in the index for the specified index number.
 * @param indexNum	The (0-based) index number.
 * @return int		The number of columns in the index for the specifed index number.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>indexNum</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCanonicalHeapName</MethodName>
            <MethodComment>/** 
 * Get the name for the heap conglomerate underlying this catalog. See getCanonicalTableUUID() for a description of canonical uuids.
 * @return String	The name for the heap conglomerate.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getIndexName</MethodName>
            <MethodComment>/** 
 * Get the name for the specified index number.
 * @param indexNum	The (0-based) index number.
 * @return String	The name for the specified index number.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>indexNum</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isIndexUnique</MethodName>
            <MethodComment>/** 
 * Return whether or not the specified index is unique.
 * @param indexNumber	The (0-based) index number.
 * @return boolean		Whether or not the specified index is unique.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>indexNumber</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDataValueFactory</MethodName>
            <MethodComment>/** 
 * Gets the DataValueFactory for this connection.
 * @return	the data value factory for this connection
 */
</MethodComment>
            <ReturnType>DataValueFactory</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateIndexName</MethodName>
            <MethodComment>/** 
 * Generate an index name based on the index number.
 * @param indexNumber		Number of index
 * @return	the following index name: CatalogName + "_INDEX" + (indexNumber+1)
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>indexNumber</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNumIndexes</MethodName>
            <MethodComment>/** 
 * get the number of indexes on this catalog 
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCatalogName</MethodName>
            <MethodComment>/** 
 * get the name of the catalog 
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initInfo</MethodName>
            <MethodComment>/** 
 * Initialize info, including array of index names and array of index column counts. Called at constructor time.
 * @param columnCount number of columns in the base table.
 * @param catalogName name of the catalog (the case might have to be converted).
 * @param indexColumnPositions 2 dim array of ints specifying the basecolumn positions for each index.
 * @param indexUniqueness		Uniqueness of the indices
 * @param uuidStrings			Array of stringified UUIDs for table and its conglomerates
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>columnCount</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>catalogName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indexColumnPositions</ParamName>
                    <ParamType>int[][]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indexUniqueness</ParamName>
                    <ParamType>boolean[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>uuidStrings</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>UUIDFactory [uf=getUUIDFactory()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCreateHeapProperties</MethodName>
            <MethodComment>/** 
 * Get the Properties associated with creating the heap.
 * @return The Properties associated with creating the heap.
 */
</MethodComment>
            <ReturnType>Properties</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Properties [properties=new Properties()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>properties;put;[Property.PAGE_SIZE_PARAMETER, "1024"]</InnerMethodInvoke>
                <InnerMethodInvoke>properties;put;[RawStoreFactory.PAGE_RESERVED_SPACE_PARAMETER, "0"]</InnerMethodInvoke>
                <InnerMethodInvoke>properties;put;[RawStoreFactory.MINIMUM_RECORD_SIZE_PARAMETER, "1"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCreateIndexProperties</MethodName>
            <MethodComment>/** 
 * Get the Properties associated with creating the specified index.
 * @param indexNumber	The specified index number.
 * @return The Properties associated with creating the specified index.
 */
</MethodComment>
            <ReturnType>Properties</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>indexNumber</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Properties [properties=new Properties()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>properties;put;[Property.PAGE_SIZE_PARAMETER, "1024"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPrimaryKeyIndexNumber</MethodName>
            <MethodComment>/** 
 * Get the index number for the primary key index on this catalog.
 * @return	a 0-based number
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getHeapColumnCount</MethodName>
            <MethodComment>/** 
 * Get the number of columns in the heap.
 * @return The number of columns in the heap.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeEmptyRow</MethodName>
            <MethodComment>/** 
 * Return an empty row for this conglomerate. 
 */
</MethodComment>
            <ReturnType>ExecRow</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeEmptyRowForCurrentVersion</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Create an empty row for this conglomerate, in the format that would be used in a database that was created with, or hard upgraded to, the currently running version. That is, even if the database is only soft-upgraded, this method should return a row in the new format. &lt;/p&gt; &lt;p&gt; This method is for use in code that creates the catalogs, or that upgrades the format of the catalogs to the newest version. Other code should call  {@link #makeEmptyRow()}, which returns a row in the format used in the old database version if the database is soft-upgraded. &lt;/p&gt;
 * @return an empty row
 * @throws StandardException if an error happens when creating the row
 */
</MethodComment>
            <ReturnType>ExecRow</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeRow</MethodName>
            <MethodComment>/** 
 * most subclasses should provide this method. One or two oddball cases in Replication and SysSTATEMENTSRowFactory don't. For those we call makeRow with the additional arguments.
 */
</MethodComment>
            <ReturnType>ExecRow</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>td</ParamName>
                    <ParamType>TupleDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parent</ParamName>
                    <ParamType>TupleDescriptor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildDescriptor</MethodName>
            <MethodComment>/** 
 * builds a tuple descriptor from a row 
 */
</MethodComment>
            <ReturnType>TupleDescriptor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>ExecRow</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parentTuple</ParamName>
                    <ParamType>TupleDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dataDictionary</ParamName>
                    <ParamType>DataDictionary</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildColumnList</MethodName>
            <MethodComment>/** 
 * builds a column list for the catalog 
 */
</MethodComment>
            <ReturnType>SystemColumn[]</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getIndexColumnPositions</MethodName>
            <MethodComment>/** 
 * Return the column positions for a given index number 
 */
</MethodComment>
            <ReturnType>int[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>indexNumber</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>