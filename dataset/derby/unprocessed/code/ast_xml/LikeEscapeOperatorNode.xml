<Class>
    <Id>1632</Id>
    <Package>org.apache.derby.impl.sql.compile</Package>
    <ClassName>LikeEscapeOperatorNode</ClassName>
    <SuperClass>TernaryOperatorNode</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>LikeEscapeOperatorNode  /** 
 * This node represents a like comparison operator (no escape) If the like pattern is a constant or a parameter then if possible the like is modified to include a &amp;gt;= and &amp;lt; operator. In some cases the like can be eliminated.  By adding =, &amp;gt;= or &amp;lt; operators it may allow indexes to be used to greatly narrow the search range of the query, and allow optimizer to estimate number of rows to affected. constant or parameter LIKE pattern with prefix followed by optional wild  card e.g. Derby% CHAR(n), VARCHAR(n) where n &amp;lt; 255 &amp;gt;=   prefix padded with '\u0000' to length n -- e.g. Derby\u0000\u0000 &amp;lt;=   prefix appended with '\uffff' -- e.g. Derby\uffff [ can eliminate LIKE if constant. ] CHAR(n), VARCHAR(n), LONG VARCHAR where n &amp;gt;= 255 &amp;gt;= prefix backed up one characer &amp;lt;= prefix appended with '\uffff' no elimination of like parameter like pattern starts with wild card e.g. %Derby CHAR(n), VARCHAR(n) where n &amp;lt;= 256 &amp;gt;= '\u0000' padded with '\u0000' to length n &amp;lt;= '\uffff' no elimination of like CHAR(n), VARCHAR(n), LONG VARCHAR where n &amp;gt; 256 &amp;gt;= NULL &amp;lt;= '\uffff' Note that the Unicode value '\uffff' is defined as not a character value and can be used by a program for any purpose. We use it to set an upper bound on a character range with a less than predicate. We only need a single '\uffff' appended because the string 'Derby\uffff\uffff' is not a valid String because '\uffff' is not a valid character.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>addedEquals</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>escape</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>LikeEscapeOperatorNode</MethodName>
            <MethodComment>/** 
 * Constructor for a LikeEscapeOperatorNode receiver like pattern [ escape escapeValue ]
 * @param receiver      The left operand of the like: column, CharConstant or Parameter
 * @param leftOperand   The right operand of the like: the pattern
 * @param rightOperand  The optional escape clause, null if not present
 * @param cm            The context manager
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>receiver</ParamName>
                    <ParamType>ValueNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>leftOperand</ParamName>
                    <ParamType>ValueNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rightOperand</ParamName>
                    <ParamType>ValueNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cm</ParamName>
                    <ParamType>ContextManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>bindExpression</MethodName>
            <MethodComment>/** 
 * implement binding for like expressions. &lt;p&gt; overrides BindOperatorNode.bindExpression because like has special requirements for parameter binding.
 * @return  The new top of the expression tree.
 * @exception StandardException thrown on failure
 */
</MethodComment>
            <ReturnType>ValueNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fromList</ParamName>
                    <ParamType>FromList</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>subqueryList</ParamName>
                    <ParamType>SubqueryList</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>aggregates</ParamName>
                    <ParamType>AggregateNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [pattern=null]</InnerVar>
                <InnerVar>boolean [leftConstant=(leftOperand instanceof CharConstantNode)]</InnerVar>
                <InnerVar>boolean [rightConstant=(rightOperand instanceof CharConstantNode)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;bindToBuiltIn;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;finishBindExpr;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>finishBindExpr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>boolean [nullableResult=receiver.getTypeServices().isNullable() || leftOperand.getTypeServices().isNullable()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;bindComparisonOperator;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setType;[new DataTypeDescriptor(TypeId.BOOLEAN_ID,nullableResult)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>bindComparisonOperator</MethodName>
            <MethodComment>/** 
 * Bind this operator
 * @exception StandardException  Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>TypeId [receiverType=receiver.getTypeId()]</InnerVar>
                <InnerVar>TypeId [leftType=leftOperand.getTypeId()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>preprocess</MethodName>
            <MethodComment>/** 
 * Preprocess an expression tree.  We do a number of transformations here (including subqueries, IN lists, LIKE and BETWEEN) plus subquery flattening. NOTE: This is done before the outer ResultSetNode is preprocessed.
 * @param numTables          Number of tables in the DML Statement
 * @param outerFromList      FromList from outer query block
 * @param outerSubqueryList  SubqueryList from outer query block
 * @param outerPredicateList PredicateList from outer query block
 * @return The modified expression
 * @exception StandardException  Thrown on error
 */
</MethodComment>
            <ReturnType>ValueNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>numTables</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>outerFromList</ParamName>
                    <ParamType>FromList</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>outerSubqueryList</ParamName>
                    <ParamType>SubqueryList</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>outerPredicateList</ParamName>
                    <ParamType>PredicateList</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [eliminateLikeComparison=false]</InnerVar>
                <InnerVar>String [greaterEqualString=null]</InnerVar>
                <InnerVar>String [lessThanString=null]</InnerVar>
                <InnerVar>AndNode [newAnd=null]</InnerVar>
                <InnerVar>ValueNode [trueNode=new BooleanConstantNode(true,getContextManager())]</InnerVar>
                <InnerVar>ValueNode [likeGEopt]</InnerVar>
                <InnerVar>BinaryComparisonOperatorNode [greaterEqual=new BinaryRelationalOperatorNode(BinaryRelationalOperatorNode.K_GREATER_EQUALS,receiver.getClone(),likeGEopt,false,getContextManager())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>greaterEqual;setForQueryRewrite;[true]</InnerMethodInvoke>
                <InnerMethodInvoke>greaterEqual;bindComparisonOperator;[]</InnerMethodInvoke>
                <InnerMethodInvoke>greaterEqual;setBetweenSelectivity;[]</InnerMethodInvoke>
                <InnerMethodInvoke>newAnd;postBindFixup;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setTransformed;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateExpression</MethodName>
            <MethodComment>/** 
 * Do code generation for this binary operator. This code was copied from BinaryOperatorNode and stripped down
 * @param acb   The ExpressionClassBuilder for the class we're generating
 * @param mb    The method the code to place the code
 * @exception StandardException Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>acb</ParamName>
                    <ParamType>ExpressionClassBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mb</ParamName>
                    <ParamType>MethodBuilder</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>receiver;generateExpression;[acb, mb]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;upCast;[receiverInterfaceType]</InnerMethodInvoke>
                <InnerMethodInvoke>leftOperand;generateExpression;[acb, mb]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;upCast;[leftInterfaceType]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;callMethod;[VMOpcode.INVOKEINTERFACE, null, methodName, resultInterfaceType, rightOperand == null ? 1 : 2]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setupOptimizeStringFromParameter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ValueNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parameterNode</ParamName>
                    <ParamType>ValueNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>escapeNode</ParamName>
                    <ParamType>ValueNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>methodName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>maxWidth</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StaticMethodCallNode [methodCall=new StaticMethodCallNode(methodName,"org.apache.derby.iapi.types.Like",getContextManager())]</InnerVar>
                <InnerVar>NumericConstantNode [maxWidthNode=new NumericConstantNode(TypeId.getBuiltInTypeId(Types.INTEGER),Integer.valueOf(maxWidth),getContextManager())]</InnerVar>
                <InnerVar>ValueNode[] [param=(escapeNode == null) ? new ValueNode[]{parameterNode,maxWidthNode} : new ValueNode[]{parameterNode,escapeNode,maxWidthNode}]</InnerVar>
                <InnerVar>ValueNode [java2SQL=new JavaToSQLValueNode(methodCall,getContextManager())]</InnerVar>
                <InnerVar>CastNode [likeOpt=new CastNode(java2SQL,parameterNode.getTypeServices(),getContextManager())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>methodCall;addParms;[Arrays.asList(param)]</InnerMethodInvoke>
                <InnerMethodInvoke>likeOpt;bindCastNodeOnly;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>