<Class>
    <Id>1240</Id>
    <Package>org.apache.derby.impl.store.raw.data</Package>
    <ClassName>PhysicalPageOperation</ClassName>
    <SuperClass>PageBasicOperation</SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Undoable</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>PhysicalPageOperation  /** 
 * An abstract class that is used for physical log operation.  A physical log operation is one where the undo of the operation must be applied to the same page as the original operation, and the undo operation must store the byte image of the row(s) changed to its before image.  (If a logical page operation happened to the page or if another transaction altered other rows on the page, the undo of this operation will only restore the before image of the row(s) affected). &lt;PRE&gt;
 * @derby.formatId	no format id, an abstract class.
 * @derby.purpose	provide methods for physical undo
 * @derby.upgrade
 * @derby.diskLayout PageBasicOperation	the super class
 * @derby.endFormat &lt;/PRE&gt;
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>PhysicalPageOperation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>page</ParamName>
                    <ParamType>BasePage</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PhysicalPageOperation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateUndo</MethodName>
            <MethodComment>/** 
 * Generate a Compensation (PageUndoOperation) that will rollback the changes of this page operation. If this Page operation cannot or need not be rolled back (redo only), overwrite this function to return null. &lt;P&gt;&lt;B&gt;Note&lt;/B&gt;&lt;BR&gt; For operation that needs logical undo, use LogicalUndoOperation instead&lt;/B&gt;  This implementation just finds the same page that the PageOperation was applied on - i.e., only works for undo on the same page.   &lt;P&gt;During recovery redo, the logging system is page oriented and will use the pageID stored in the PageUndoOperation to find the page.  The page will be latched and released using the default findpage and releaseResource - this.releaseResource() will still be called so it has to know not to release any resource it did not acquire.
 * @param xact	the transaction doing the compensating
 * @param in		optional input
 * @return the compensation operation that will rollback this change 
 * @exception StandardException Standard Derby policy.
 * @see PageBasicOperation
 * @see Undoable#generateUndo
 */
</MethodComment>
            <ReturnType>Compensation</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xact</ParamName>
                    <ParamType>Transaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>in</ParamName>
                    <ParamType>LimitObjectInput</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BasePage [undoPage=findpage(xact)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>undoPage;preDirty;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>undoMe</MethodName>
            <MethodComment>/** 
 * Undo the change indicated by this log operation and optional data. The page the undo should apply to is the latched undoPage, the recordId is the same as the roll forward operation.   &lt;BR&gt;&lt;B&gt;In this RawStore implementation, should only only be called via CompOp.doMe&lt;/B&gt;. &lt;P&gt; The available() method of in indicates how much data can be read, i.e. how much was originally written.
 * @param xact			the Transaction doing the rollback
 * @param undoPage		the page to rollback changes on
 * @param CLRinstant	the log instant of this (PageUndo) operation
 * @param in			optional data for the rollback operation
 * @exception IOException Can be thrown by any of the methods of ObjectInput.
 * @exception StandardException Standard Derby policy.		
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xact</ParamName>
                    <ParamType>Transaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>undoPage</ParamName>
                    <ParamType>BasePage</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>CLRinstant</ParamName>
                    <ParamType>LogInstant</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>in</ParamName>
                    <ParamType>LimitObjectInput</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>