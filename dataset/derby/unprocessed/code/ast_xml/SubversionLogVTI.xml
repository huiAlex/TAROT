<Class>
    <Id>616</Id>
    <Package>org.apache.derbyDemo.vtis.example</Package>
    <ClassName>SubversionLogVTI</ClassName>
    <SuperClass>FlatFileVTI</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>SubversionLogVTI  /** 
 * &lt;p&gt; This VTI makes a table out of the output of the subversion log ("svn log") command. &lt;/p&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>COLUMN_NAMES</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>XID</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>COMMITTER</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>COMMIT_TIME</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>LINE_COUNT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>DESCRIPTION</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>RECORD_HEADER</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>_dateFormatter</FieldName>
            <FieldType>SimpleDateFormat</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>SubversionLogVTI</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Build a SubversionLogVTI given the name of the output file created by the "svn log" command. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>logFileName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>subversionLogVTI</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; This is the method which is registered as a table function. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>ResultSet</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>logFileName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseRow</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Parse the next chunk of text, using readLine(), and return the next row. Returns null if the file is exhausted. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>String[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String[] [newRow=new String[COLUMN_NAMES.length]]</InnerVar>
                <InnerVar>String [headerLine=readNextLine()]</InnerVar>
                <InnerVar>String [mainline=readNextLine()]</InnerVar>
                <InnerVar>int [oldIdx[]=new int[1]]</InnerVar>
                <InnerVar>int [descriptionLineCount=0]</InnerVar>
                <InnerVar>StringBuffer [buffer=new StringBuffer()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTimestamp</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Subversion formats timestamps thusly: "2007-09-16 11:17:37 -0700 (Sun, 16 Sep 2007)" &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>java.sql.Timestamp</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>columnIndex</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [columnValue=getString(columnIndex).trim()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readField</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Read the next field in the main line of the record. Fields are delimited by | or line-end. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mainline</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>oldIdx</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [result=null]</InnerVar>
                <InnerVar>int [fieldStart=oldIdx[0]]</InnerVar>
                <InnerVar>int [fieldEnd=mainline.indexOf("|",fieldStart)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isRecordHeader</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Returns true if a line is a record header. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>line</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readNextLine</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Read a line, possibly just using the last line that was pushed back. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [retval]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDateFormatter</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Subversion formats timestamps thusly: "2007-09-16 11:17:37 -0700 (Sun, 16 Sep 2007)" &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>SimpleDateFormat</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>