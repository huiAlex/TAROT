<Class>
    <Id>928</Id>
    <Package>org.apache.derby.iapi.types</Package>
    <ClassName>XMLDataValue</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>DataValueDescriptor</SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>XMLParse</MethodName>
            <MethodComment>/** 
 * Method to parse an XML string and, if it's valid, store the _serialized_ version locally and then return this XMLDataValue.
 * @param stringValue The string value to check.
 * @param preserveWS Whether or not to preserveignorable whitespace.
 * @param sqlxUtil Contains SQL/XML objects and utilmethods that facilitate execution of XML-related operations
 * @return If 'text' constitutes a valid XML document,it has been stored in this XML value and this XML value returned; otherwise, an exception is thrown. 
 * @exception StandardException Thrown on error.
 */
</MethodComment>
            <ReturnType>XMLDataValue</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>stringValue</ParamName>
                    <ParamType>StringDataValue</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>preserveWS</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sqlxUtil</ParamName>
                    <ParamType>SqlXmlUtil</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>XMLSerialize</MethodName>
            <MethodComment>/** 
 * The SQL/XML XMLSerialize operator. Serializes this XML value into a string with a user-specified character type, and returns that string via the received StringDataValue (if the received StringDataValue is non-null and of the correct type; else, a new StringDataValue is returned).
 * @param result The result of a previous call to this method,null if not called yet.
 * @param targetType The string type to which we want to serialize.
 * @param targetWidth The width of the target type.
 * @param targetCollationType The collation type of the target type.
 * @return A serialized (to string) version of this XML object,in the form of a StringDataValue object.
 * @exception StandardException Thrown on error
 */
</MethodComment>
            <ReturnType>StringDataValue</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>result</ParamName>
                    <ParamType>StringDataValue</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>targetType</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>targetWidth</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>targetCollationType</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>XMLExists</MethodName>
            <MethodComment>/** 
 * The SQL/XML XMLExists operator. Checks to see if evaluation of the query expression contained within the received util object against this XML value returns at least one item. NOTE: For now, the query expression must be XPath only (XQuery not supported) because that's what Xalan supports.
 * @param sqlxUtil Contains SQL/XML objects and utilmethods that facilitate execution of XML-related operations
 * @return True if evaluation of the query expression storedin sqlxUtil returns at least one node for this XML value; unknown if the xml value is NULL; false otherwise.
 * @exception StandardException Thrown on error
 */
</MethodComment>
            <ReturnType>BooleanDataValue</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sqlxUtil</ParamName>
                    <ParamType>SqlXmlUtil</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>XMLQuery</MethodName>
            <MethodComment>/** 
 * Evaluate the XML query expression contained within the received util object against this XML value and store the results into the received XMLDataValue "result" param (assuming "result" is non-null; else create a new XMLDataValue).
 * @param sqlxUtil Contains SQL/XML objects and util methods thatfacilitate execution of XML-related operations
 * @param result The result of a previous call to this method; nullif not called yet.
 * @return An XMLDataValue whose content corresponds to the serializedversion of the results from evaluation of the query expression. Note: this XMLDataValue may not be storable into Derby XML columns.
 * @exception StandardException thrown on error
 */
</MethodComment>
            <ReturnType>XMLDataValue</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sqlxUtil</ParamName>
                    <ParamType>SqlXmlUtil</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>result</ParamName>
                    <ParamType>XMLDataValue</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setXType</MethodName>
            <MethodComment>/** 
 * Set this XML value's qualified type.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xtype</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getXType</MethodName>
            <MethodComment>/** 
 * Retrieve this XML value's qualified type.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>markAsHavingTopLevelAttr</MethodName>
            <MethodComment>/** 
 * Take note of the fact this XML value represents an XML sequence that has one or more top-level attribute nodes.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasTopLevelAttr</MethodName>
            <MethodComment>/** 
 * Return whether or not this XML value represents a sequence that has one or more top-level attribute nodes.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>