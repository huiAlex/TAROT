<Class>
    <Id>816</Id>
    <Package>org.osgi.framework</Package>
    <ClassName>ServiceListener</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>EventListener</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ServiceListener  /** 
 * A &lt;code&gt;ServiceEvent&lt;/code&gt; listener. &lt;code&gt;ServiceListener&lt;/code&gt; is a listener interface that may be implemented by a bundle developer. When a &lt;code&gt;ServiceEvent&lt;/code&gt; is fired, it is synchronously delivered to a &lt;code&gt;ServiceListener&lt;/code&gt;. The Framework may deliver &lt;code&gt;ServiceEvent&lt;/code&gt; objects to a &lt;code&gt;ServiceListener&lt;/code&gt; out of order and may concurrently call and/or reenter a &lt;code&gt;ServiceListener&lt;/code&gt;. &lt;p&gt; A &lt;code&gt;ServiceListener&lt;/code&gt; object is registered with the Framework using the &lt;code&gt;BundleContext.addServiceListener&lt;/code&gt; method. &lt;code&gt;ServiceListener&lt;/code&gt; objects are called with a &lt;code&gt;ServiceEvent&lt;/code&gt; object when a service is registered, modified, or is in the process of unregistering. &lt;p&gt; &lt;code&gt;ServiceEvent&lt;/code&gt; object delivery to &lt;code&gt;ServiceListener&lt;/code&gt; objects is filtered by the filter specified when the listener was registered. If the Java Runtime Environment supports permissions, then additional filtering is done. &lt;code&gt;ServiceEvent&lt;/code&gt; objects are only delivered to the listener if the bundle which defines the listener object's class has the appropriate &lt;code&gt;ServicePermission&lt;/code&gt; to get the service using at least one of the named classes under which the service was registered. &lt;p&gt; &lt;code&gt;ServiceEvent&lt;/code&gt; object delivery to &lt;code&gt;ServiceListener&lt;/code&gt; objects is further filtered according to package sources as defined in {@link ServiceReference#isAssignableTo(Bundle,String)}.
 * @see ServiceEvent
 * @see ServicePermission
 * @ThreadSafe
 * @version $Revision: 1.15 $
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>serviceChanged</MethodName>
            <MethodComment>/** 
 * Receives notification that a service has had a lifecycle change.
 * @param event The &lt;code&gt;ServiceEvent&lt;/code&gt; object.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>event</ParamName>
                    <ParamType>ServiceEvent</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>