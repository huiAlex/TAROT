<Class>
    <Id>164</Id>
    <Package>org.apache.derby.impl.store.access</Package>
    <ClassName>CacheableConglomerate</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Cacheable</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>CacheableConglomerate  /** 
 * The CacheableConglomerate implements a single item in the cache used by the Conglomerate directory to cache Conglomerates.  It is simply a wrapper object for the conglomid and Conglomerate object that is read from the Conglomerate Conglomerate.   It is a wrapper rather than extending  the conglomerate implementations because we want to cache all conglomerate implementations: (ie. Heap, B2I, ...). References to the Conglomerate objects cached by this wrapper will be handed out to callers.  When this this object goes out of cache callers may still have references to the Conglomerate objects, which we are counting on java to garbage collect.  The Conglomerate Objects never change after they are created.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>accessManager</FieldName>
            <FieldType>RAMAccessManager</FieldType>
        </Field>
        <Field>
            <FieldName>conglomid</FieldName>
            <FieldType>Long</FieldType>
        </Field>
        <Field>
            <FieldName>conglom</FieldName>
            <FieldType>Conglomerate</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>CacheableConglomerate</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parent</ParamName>
                    <ParamType>RAMAccessManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getConglom</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Conglomerate</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setIdentity</MethodName>
            <MethodComment>/** 
 * Set the identity of the object to represent an item that already exists, e.g. an existing container. The object will be in the No Identity state, ie. it will have just been created or clearIdentity() was just called.  &lt;BR&gt; The object must copy the information out of key, not just store a  reference to key. After this call the expression getIdentity().equals(key) must return  true. &lt;BR&gt; If the class of the object needs to change (e.g. to support a different format) then the object should create a new object, call its  initParameter() with the parameters the original object was called with, set its identity and return a reference to it. The cache manager will discard the reference to the old object.  &lt;BR&gt; If an exception is thrown the object must be left in the no-identity  state. &lt;BR&gt; MT - single thread required - Method must only be called by cache  manager and the cache manager will guarantee only one thread can be  calling it.
 * @return an object reference if the object can take on the identity, null otherwise.
 * @exception StandardException Standard Derby Policy
 * @see org.apache.derby.iapi.services.cache.CacheManager#find
 */
</MethodComment>
            <ReturnType>Cacheable</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>long [id=conglomid.longValue()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createIdentity</MethodName>
            <MethodComment>/** 
 * Create a new item and set the identity of the object to represent it. The object will be in the No Identity state, ie. it will have just been created or clearIdentity() was just called.  &lt;BR&gt; The object must copy the information out of key, not just store a  reference to key.  After this call the expression  getIdentity().equals(key) must return true. &lt;BR&gt; If the class of the object needs to change (e.g. to support a different  format) then the object should create a new object, call its  initParameter() with the parameters the original object was called with, set its identity and return a reference to it. The cache manager will  discard the reference to the old object.  &lt;BR&gt; If an exception is thrown the object must be left in the no-identity  state. &lt;BR&gt; MT - single thread required - Method must only be called be cache  manager and the cache manager will guarantee only one thread can be  calling it.
 * @return an object reference if the object can take on the identity, null otherwise.
 * @exception StandardException If forCreate is true and the object cannot be created.
 * @see org.apache.derby.iapi.services.cache.CacheManager#create
 */
</MethodComment>
            <ReturnType>Cacheable</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>createParameter</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clearIdentity</MethodName>
            <MethodComment>/** 
 * Put the object into the No Identity state.  &lt;BR&gt; MT - single thread required - Method must only be called be cache  manager and the cache manager will guarantee only one thread can be  calling it.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getIdentity</MethodName>
            <MethodComment>/** 
 * Get the identity of this object. &lt;BR&gt; MT - thread safe.
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isDirty</MethodName>
            <MethodComment>/** 
 * Returns true if the object is dirty.  Will only be called when the object is unkept. &lt;BR&gt; MT - thread safe 
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clean</MethodName>
            <MethodComment>/** 
 * Clean the object. It is up to the object to ensure synchronization of the isDirty() and clean() method calls. &lt;BR&gt; If forRemove is true then the  object is being removed due to an explicit remove request, in this case the cache manager will have called this method regardless of the state of the isDirty()  &lt;BR&gt; If an exception is thrown the object must be left in the clean state. &lt;BR&gt; MT - thread safe - Can be called at any time by the cache manager,  it is the responsibility of the object implementing Cacheable to ensure any users of the object do not conflict with the clean call.
 * @exception StandardException Standard Derby error policy.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>forRemove</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>