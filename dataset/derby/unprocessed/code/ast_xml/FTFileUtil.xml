<Class>
    <Id>1464</Id>
    <Package>org.apache.derbyTesting.functionTests.util</Package>
    <ClassName>FTFileUtil</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>FTFileUtil  /** 
 * Convience functions for performing file manipulations in ij scripts.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>mkFile</MethodName>
            <MethodComment>/** 
 * Create a file.
 * @param fileName the file's name.
 * @param length the number of bytes of test data in the file.
 * @exception Exception oops.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fileName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>length</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>FileWriter [fw=new FileWriter(fileName)]</InnerVar>
                <InnerVar>int [offset=0]</InnerVar>
                <InnerVar>String [data="Amber!"]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>fw;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>renameFile</MethodName>
            <MethodComment>/** 
 * rename a file.  This method is  called by some tests through a SQL procedure: RENAME_FILE(LOCATION VARCHAR(32000), NAME VARCHAR(32000),  NEW_NAME  VARCHAR(32000))
 * @param location location of the file
 * @param name the file's name
 * @param newName the file's new name
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>location</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>newName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>File [src=new File(location,name)]</InnerVar>
                <InnerVar>File [dst=new File(location,newName)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>AccessController;doPrivileged;[new PrivilegedExceptionAction&lt;Void&gt;(){
  public Void run() throws Exception {
    if (!src.renameTo(dst)) {
      throw new Exception("unable to rename File: " + src.getAbsolutePath() + " To: "+ dst.getAbsolutePath());
    }
    return null;
  }
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fileExists</MethodName>
            <MethodComment>/** 
 * Check if a file exists ? This method is  called by some tests through a SQL function: fileExists(fileName varchar(128))returns VARCHAR(100)
 * @param fileName the file's name.
 * @return     &lt;tt&gt;"true"&lt;/tt&gt; if the given file exists &lt;tt&gt;"false"&lt;/tt&gt; otherwise.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fileName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>File [fl=new File(fileName)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeDirectory</MethodName>
            <MethodComment>/** 
 * Remove a directory and all of its contents.
 * @param directory the directory's name.
 * @return     &lt;tt&gt;true&lt;/tt&gt; if the omplete directory was removed&lt;tt&gt;false&lt;/tt&gt; otherwise.f false is returned then some of  the files in the directory may have been removed.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>directory</ParamName>
                    <ParamType>File</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String[] [list=directory.list()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeDirectory</MethodName>
            <MethodComment>/** 
 * Remove a directory and all of its contents. This method is  called by some tests through a SQL function: removeDirectory(fileName varchar(128)) returns VARCHAR(100)
 * @param directory the directory's name.
 * @return     &lt;tt&gt;"true"&lt;/tt&gt; if the omplete directory was removed&lt;tt&gt;"false"&lt;/tt&gt; otherwise.f false is returned then some of  the files in the directory may have been removed.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>directory</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>PrivilegedActionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>