<Class>
    <Id>813</Id>
    <Package>org.apache.derby.impl.store.access.btree.index</Package>
    <ClassName>B2I</ClassName>
    <SuperClass>BTree</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>B2I  /** 
 * Implements an instance of a B-Tree secondary index conglomerate. A B2I object has two roles. &lt;ol&gt; &lt;li&gt; The B2I object is stored on disk, and holds the store specific information needed to access/describe the conglomerate. This includes information such as the format ids of the columns,  the conglomerate id of the base table, the location of  row location column. &lt;/li&gt; &lt;li&gt; Access to all the interfaces start by making a call off the Conglomerate interface. So for instance to get a scan on the conglomerate method  {@link #openScan openScan} should be called.&lt;/li&gt; &lt;/ol&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>PROPERTY_BASECONGLOMID</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>PROPERTY_ROWLOCCOLUMN</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>FORMAT_NUMBER</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>baseConglomerateId</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>rowLocationColumn</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>BASE_MEMORY_USAGE</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>estimateMemoryUsage</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBtreeLockingPolicy</MethodName>
            <MethodComment>/** 
 * Create a new btree locking policy from scratch.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>BTreeLockingPolicy</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rawtran</ParamName>
                    <ParamType>Transaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lock_level</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mode</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isolation_level</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>base_cc</ParamName>
                    <ParamType>ConglomerateController</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>open_btree</ParamName>
                    <ParamType>OpenBTree</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BTreeLockingPolicy [ret_locking_policy=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>lockTable</MethodName>
            <MethodComment>/** 
 * Lock the base table. &lt;p&gt; Assumes that segment of the base container is the same as the segment of the btree segment. &lt;p&gt; RESOLVE - we really want to get the lock without opening the container. raw store will be providing this.
 * @param xact_manager Transaction to associate the lock with.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>ConglomerateController</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xact_manager</ParamName>
                    <ParamType>TransactionManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>open_mode</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lock_level</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isolation_level</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ConglomerateController [cc=xact_manager.openConglomerate(this.baseConglomerateId,false,open_mode,lock_level,isolation_level)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>traverseRight</MethodName>
            <MethodComment>/** 
 * Private methods of B2I, arranged alphabetically.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>create</MethodName>
            <MethodComment>/** 
 * Create an empty secondary index b-tree, using the generic b-tree to do the generic part of the creation process. This routine opens the newly created container, adds a single page, and makes this page the root by inserting a LeafControlRow onto this page at slot 0 and marking in that control row that the page is a root page. The following properties are specific to the b-tree secondary index: &lt;UL&gt; &lt;LI&gt; "baseConglomerateId" (integer).  The conglomerate id of the base conglomerate is never actually accessed by the b-tree secondary index implementation, it only serves as a namespace for row locks. This property is required. &lt;LI&gt; "rowLocationColumn" (integer).  The zero-based index into the row which the b-tree secondary index will assume holds a @see RowLocation of the base row in the base conglomerate.  This value will be used for acquiring locks.  In this implementation RowLocationColumn must be  the last key column. This property is required. &lt;/UL&gt; A secondary index i (a, b) on table t (a, b, c) would have rows which looked like (a, b, row_location).  baseConglomerateId is set to the conglomerate id of t.  rowLocationColumns is set to 2.  allowsDuplicates would be set to false, @see BTree#create.  To create a unique secondary index set uniquenessColumns to 2, this means that the btree code will compare the key values but not the row id when determing uniqueness.  To create a nonunique secondary index set uniquenessColumns to 3, this would mean that the uniqueness test would include the row location and since all row locations will be unique  all rows inserted  into the index will be differentiated (at least) by row location.  
 * @see BTree#create
 * @exception StandardException Standard exception policy.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xact_manager</ParamName>
                    <ParamType>TransactionManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>segmentId</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>input_conglomid</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>template</ParamName>
                    <ParamType>DataValueDescriptor[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columnOrder</ParamName>
                    <ParamType>ColumnOrdering[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>collationIds</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>properties</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>temporaryFlag</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [property_value=null]</InnerVar>
                <InnerVar>Transaction [rawtran=xact_manager.getRawStoreXact()]</InnerVar>
                <InnerVar>ConglomerateController [base_cc=xact_manager.openConglomerate(baseConglomerateId,false,TransactionController.OPENMODE_FOR_LOCK_ONLY,TransactionController.MODE_TABLE,TransactionController.ISOLATION_SERIALIZABLE)]</InnerVar>
                <InnerVar>OpenBTree [open_btree=new OpenBTree()]</InnerVar>
                <InnerVar>BTreeLockingPolicy [b2i_locking_policy=new B2ITableLocking3(rawtran,TransactionController.MODE_TABLE,rawtran.newLockingPolicy(LockingPolicy.MODE_CONTAINER,TransactionController.ISOLATION_SERIALIZABLE,true),base_cc,open_btree)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>open_btree;init;[(TransactionManager)xact_manager, (TransactionManager)xact_manager, (ContainerHandle)null, rawtran, false, (ContainerHandle.MODE_FORUPDATE), TransactionController.MODE_TABLE, b2i_locking_policy, this, (LogicalUndo)null, (DynamicCompiledOpenConglomInfo)null]</InnerMethodInvoke>
                <InnerMethodInvoke>LeafControlRow;initEmptyBtree;[open_btree]</InnerMethodInvoke>
                <InnerMethodInvoke>open_btree;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>base_cc;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fetchMaxOnBTree</MethodName>
            <MethodComment>/** 
 * Retrieve the maximum value row in an ordered conglomerate. &lt;p&gt; Returns true and fetches the rightmost row of an ordered conglomerate  into "fetchRow" if there is at least one row in the conglomerate.  If there are no rows in the conglomerate it returns false. &lt;p&gt; Non-ordered conglomerates will not implement this interface, calls will generate a StandardException. &lt;p&gt; RESOLVE - this interface is temporary, long term equivalent (and more)  functionality will be provided by the openBackwardScan() interface.  
 * @param xact_manager    The TransactionController under which this operation takes place.
 * @param conglomId       The identifier of the conglomerateto open the scan for.
 * @param open_mode       Specifiy flags to control opening of table.  OPENMODE_FORUPDATE - if set open the table for update otherwise open table shared.
 * @param lock_level      One of (MODE_TABLE, MODE_RECORD, or MODE_NONE).
 * @param isolation_level The isolation level to lock the conglomerate at.One of (ISOLATION_READ_COMMITTED or  ISOLATION_SERIALIZABLE).
 * @param scanColumnList  A description of which columns to return from every fetch in the scan.  template,  and scanColumnList work together to describe the row to be returned by the scan -  see RowUtil for description of how these three  parameters work together to describe a "row".
 * @param fetchRow        The row to retrieve the maximum value into.
 * @return boolean indicating if a row was found and retrieved or not.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xact_manager</ParamName>
                    <ParamType>TransactionManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rawtran</ParamName>
                    <ParamType>Transaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>conglomId</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>open_mode</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lock_level</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>locking_policy</ParamName>
                    <ParamType>LockingPolicy</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isolation_level</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>scanColumnList</ParamName>
                    <ParamType>FormatableBitSet</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fetchRow</ParamName>
                    <ParamType>DataValueDescriptor[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [row_exists]</InnerVar>
                <InnerVar>B2IMaxScan [b2is=new B2IMaxScan()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>b2is;init;[xact_manager, rawtran, open_mode, lock_level, locking_policy, isolation_level, true, scanColumnList, this, new B2IUndo()]</InnerMethodInvoke>
                <InnerMethodInvoke>b2is;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>load</MethodName>
            <MethodComment>/** 
 * Bulk Load a B-tree secondary index.
 * @see Conglomerate#load
 * @exception StandardException Standard Derby Error policy.raise SQLState.STORE_CONGLOMERATE_DUPLICATE_KEY_EXCEPTION if a duplicate  key is detected in the load.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xact_manager</ParamName>
                    <ParamType>TransactionManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>createConglom</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rowSource</ParamName>
                    <ParamType>RowLocationRetRowSource</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>long [num_rows_loaded=0]</InnerVar>
                <InnerVar>B2IController [b2ic=new B2IController()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>open</MethodName>
            <MethodComment>/** 
 * Open a b-tree controller.
 * @see Conglomerate#open
 * @exception StandardException Standard exception policy.
 */
</MethodComment>
            <ReturnType>ConglomerateController</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xact_manager</ParamName>
                    <ParamType>TransactionManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rawtran</ParamName>
                    <ParamType>Transaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>hold</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>open_mode</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lock_level</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>locking_policy</ParamName>
                    <ParamType>LockingPolicy</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>static_info</ParamName>
                    <ParamType>StaticCompiledOpenConglomInfo</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dynamic_info</ParamName>
                    <ParamType>DynamicCompiledOpenConglomInfo</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>B2IController [b2ic=new B2IController()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>b2ic;init;[xact_manager, rawtran, hold, open_mode, lock_level, locking_policy, true, this, new B2IUndo(), (B2IStaticCompiledInfo)static_info, dynamic_info]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>openScan</MethodName>
            <MethodComment>/** 
 * Open a b-tree secondary index scan controller.
 * @see Conglomerate#openScan
 * @see BTree#openScan
 * @exception StandardException Standard exception policy.
 */
</MethodComment>
            <ReturnType>ScanManager</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xact_manager</ParamName>
                    <ParamType>TransactionManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rawtran</ParamName>
                    <ParamType>Transaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>hold</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>open_mode</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lock_level</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>locking_policy</ParamName>
                    <ParamType>LockingPolicy</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isolation_level</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>scanColumnList</ParamName>
                    <ParamType>FormatableBitSet</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>startKeyValue</ParamName>
                    <ParamType>DataValueDescriptor[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>startSearchOperator</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>qualifier</ParamName>
                    <ParamType>Qualifier</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stopKeyValue</ParamName>
                    <ParamType>DataValueDescriptor[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stopSearchOperator</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>static_info</ParamName>
                    <ParamType>StaticCompiledOpenConglomInfo</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dynamic_info</ParamName>
                    <ParamType>DynamicCompiledOpenConglomInfo</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>B2IForwardScan [b2is=new B2IForwardScan()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>b2is;init;[xact_manager, rawtran, hold, open_mode, lock_level, locking_policy, isolation_level, true, scanColumnList, startKeyValue, startSearchOperator, qualifier, stopKeyValue, stopSearchOperator, this, new B2IUndo(), (B2IStaticCompiledInfo)static_info, dynamic_info]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>defragmentConglomerate</MethodName>
            <MethodComment>/** 
 * Open a b-tree compress scan. &lt;p&gt; B2I does not support a compress scan. &lt;p&gt;
 * @see Conglomerate#defragmentConglomerate
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>ScanManager</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xact_manager</ParamName>
                    <ParamType>TransactionManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rawtran</ParamName>
                    <ParamType>Transaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>hold</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>open_mode</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lock_level</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>locking_policy</ParamName>
                    <ParamType>LockingPolicy</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isolation_level</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>purgeConglomerate</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xact_manager</ParamName>
                    <ParamType>TransactionManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rawtran</ParamName>
                    <ParamType>Transaction</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compressConglomerate</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xact_manager</ParamName>
                    <ParamType>TransactionManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rawtran</ParamName>
                    <ParamType>Transaction</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>B2IController [b2ic=new B2IController()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>openStoreCost</MethodName>
            <MethodComment>/** 
 * Return an open StoreCostController for the conglomerate. &lt;p&gt; Return an open StoreCostController which can be used to ask about  the estimated row counts and costs of ScanController and  ConglomerateController operations, on the given conglomerate. &lt;p&gt;
 * @param xact_manager The TransactionController under which this operation takes place.
 * @param rawtran  raw transaction context in which scan is managed.
 * @return The open StoreCostController.
 * @exception StandardException  Standard exception policy.
 * @see StoreCostController
 */
</MethodComment>
            <ReturnType>StoreCostController</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xact_manager</ParamName>
                    <ParamType>TransactionManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rawtran</ParamName>
                    <ParamType>Transaction</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>B2ICostController [b2icost=new B2ICostController()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>b2icost;init;[xact_manager, this, rawtran]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>drop</MethodName>
            <MethodComment>/** 
 * Drop this b-tree secondary index.
 * @see Conglomerate#drop
 * @see BTree#drop
 * @exception StandardException Standard exception policy.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xact_manager</ParamName>
                    <ParamType>TransactionManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ConglomerateController [base_cc=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>xact_manager.getRawStoreXact();dropContainer;[id]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStaticCompiledConglomInfo</MethodName>
            <MethodComment>/** 
 * Return static information about the conglomerate to be included in a a compiled plan. &lt;p&gt; The static info would be valid until any ddl was executed on the  conglomid, and would be up to the caller to throw away when that  happened.  This ties in with what language already does for other  invalidation of static info.  The type of info in this would be  containerid and array of format id's from which templates can be created. The info in this object is read only and can be shared among as many  threads as necessary. &lt;p&gt;
 * @return The static compiled information.
 * @param conglomId The identifier of the conglomerate to open.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>StaticCompiledOpenConglomInfo</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xact_manager</ParamName>
                    <ParamType>TransactionController</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>conglomId</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTypeFormatId</MethodName>
            <MethodComment>/** 
 * Return my format identifier.
 * @see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeExternal_v10_2</MethodName>
            <MethodComment>/** 
 * Store the stored representation of the column value in the stream. &lt;p&gt; For more detailed description of the ACCESS_B2I_V3_ID format see  documentation at top of file.
 * @see java.io.Externalizable#writeExternal
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>ObjectOutput</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>FormatableBitSet [ascDescBits=new FormatableBitSet(ascDescInfo.length)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>out;writeLong;[baseConglomerateId]</InnerMethodInvoke>
                <InnerMethodInvoke>out;writeInt;[rowLocationColumn]</InnerMethodInvoke>
                <InnerMethodInvoke>ascDescBits;writeExternal;[out]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeExternal_v10_3</MethodName>
            <MethodComment>/** 
 * Store the stored representation of the column value in the stream. &lt;p&gt; For more detailed description of the ACCESS_B2I_V3_ID and  ACCESS_B2I_V4_ID formats see documentation at top of file.
 * @see java.io.Externalizable#writeExternal
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>ObjectOutput</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;writeExternal_v10_2;[out]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeExternal</MethodName>
            <MethodComment>/** 
 * Store the stored representation of the column value in the stream. &lt;p&gt; For more detailed description of the ACCESS_B2I_V3_ID and  ACCESS_B2I_V5_ID formats see documentation at top of file.
 * @see java.io.Externalizable#writeExternal
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>ObjectOutput</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;writeExternal_v10_3;[out]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readExternal</MethodName>
            <MethodComment>/** 
 * Restore the in-memory representation from the stream. &lt;p&gt;
 * @exception ClassNotFoundException Thrown if the stored representation is serialized and a class named in  the stream could not be found.
 * @see java.io.Externalizable#readExternal
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>in</ParamName>
                    <ParamType>ObjectInput</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>FormatableBitSet [ascDescBits=new FormatableBitSet()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ascDescBits;readExternal;[in]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setUniqueWithDuplicateNulls;[false]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>ClassNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>