<Class>
    <Id>512</Id>
    <Package>org.osgi.framework</Package>
    <ClassName>AdminPermission</ClassName>
    <SuperClass>BasicPermission</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>AdminPermission  /** 
 * A bundle's authority to perform specific privileged administrative operations on or to get sensitive information about a bundle. The actions for this permission are: &lt;pre&gt; Action               Methods class                Bundle.loadClass execute              Bundle.start Bundle.stop StartLevel.setBundleStartLevel extensionLifecycle   BundleContext.installBundle for extension bundles Bundle.update for extension bundles Bundle.uninstall for extension bundles lifecycle            BundleContext.installBundle Bundle.update Bundle.uninstall listener             BundleContext.addBundleListener for SynchronousBundleListener BundleContext.removeBundleListener for SynchronousBundleListener metadata             Bundle.getHeaders Bundle.getLocation resolve              PackageAdmin.refreshPackages PackageAdmin.resolveBundles resource             Bundle.getResource Bundle.getResources Bundle.getEntry Bundle.getEntryPaths Bundle.findEntries Bundle resource/entry URL creation startlevel           StartLevel.setStartLevel StartLevel.setInitialBundleStartLevel  context              Bundle.getBundleContext                      &lt;/pre&gt; &lt;p&gt; The special action &amp;quot;*&amp;quot; will represent all actions. &lt;p&gt; The name of this permission is a filter expression. The filter gives access to the following parameters: &lt;ul&gt; &lt;li&gt;signer - A Distinguished Name chain used to sign a bundle. Wildcards in a DN are not matched according to the filter string rules, but according to the rules defined for a DN chain.&lt;/li&gt; &lt;li&gt;location - The location of a bundle.&lt;/li&gt; &lt;li&gt;id - The bundle ID of the designated bundle.&lt;/li&gt; &lt;li&gt;name - The symbolic name of a bundle.&lt;/li&gt; &lt;/ul&gt;
 * @ThreadSafe
 * @version $Revision: 1.34 $
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>serialVersionUID</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>CLASS</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>EXECUTE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>EXTENSIONLIFECYCLE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>LIFECYCLE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>LISTENER</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>METADATA</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>RESOLVE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>RESOURCE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>STARTLEVEL</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>CONTEXT</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>packageProperty</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>initStringString</FieldName>
            <FieldType>Constructor</FieldType>
        </Field>
        <Field>
            <FieldName>initBundleString</FieldName>
            <FieldType>Constructor</FieldType>
        </Field>
        <Field>
            <FieldName>delegate</FieldName>
            <FieldType>Permission</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ImplHolder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Constructor[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [packageName=System.getProperty(packageProperty)]</InnerVar>
                <InnerVar>Class&lt;?&gt; [delegateClass]</InnerVar>
                <InnerVar>Constructor[] [result=new Constructor[2]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>AdminPermission</MethodName>
            <MethodComment>/** 
 * Creates a new &lt;code&gt;AdminPermission&lt;/code&gt; object that matches all bundles and has all actions. Equivalent to AdminPermission("*","*");
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>AdminPermission</MethodName>
            <MethodComment>/** 
 * Create a new AdminPermission. This constructor must only be used to create a permission that is going to be checked. &lt;p&gt; Examples: &lt;pre&gt; (signer=\*,o=ACME,c=US)    (&amp;amp;(signer=\*,o=ACME,c=US)(name=com.acme.*)(location=http://www.acme.com/bundles/*)) (id&amp;gt;=1) &lt;/pre&gt; &lt;p&gt; When a signer key is used within the filter expression the signer value must escape the special filter chars ('*', '(', ')'). &lt;p&gt; Null arguments are equivalent to "*".
 * @param filter A filter expression that can use signer, location, id, andname keys. A value of &amp;quot;*&amp;quot; or &lt;code&gt;null&lt;/code&gt; matches all bundle.
 * @param actions &lt;code&gt;class&lt;/code&gt;, &lt;code&gt;execute&lt;/code&gt;,&lt;code&gt;extensionLifecycle&lt;/code&gt;, &lt;code&gt;lifecycle&lt;/code&gt;, &lt;code&gt;listener&lt;/code&gt;, &lt;code&gt;metadata&lt;/code&gt;, &lt;code&gt;resolve&lt;/code&gt;, &lt;code&gt;resource&lt;/code&gt;,  &lt;code&gt;startlevel&lt;/code&gt; or &lt;code&gt;context&lt;/code&gt;. A value of "*" or &lt;code&gt;null&lt;/code&gt; indicates all actions
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>filter</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>actions</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>AdminPermission</MethodName>
            <MethodComment>/** 
 * Creates a new &lt;code&gt;AdminPermission&lt;/code&gt; object to be used by the code that must check a &lt;code&gt;Permission&lt;/code&gt; object.
 * @param bundle A bundle
 * @param actions &lt;code&gt;class&lt;/code&gt;, &lt;code&gt;execute&lt;/code&gt;,&lt;code&gt;extensionLifecycle&lt;/code&gt;, &lt;code&gt;lifecycle&lt;/code&gt;, &lt;code&gt;listener&lt;/code&gt;, &lt;code&gt;metadata&lt;/code&gt;, &lt;code&gt;resolve&lt;/code&gt;, &lt;code&gt;resource&lt;/code&gt;, &lt;code&gt;startlevel&lt;/code&gt;, &lt;code&gt;context&lt;/code&gt;.
 * @since 1.3
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>bundle</ParamName>
                    <ParamType>Bundle</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>actions</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createName</MethodName>
            <MethodComment>/** 
 * Create a permission name from a Bundle
 * @param bundle Bundle to use to create permission name.
 * @return permission name.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>bundle</ParamName>
                    <ParamType>Bundle</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuffer [sb=new StringBuffer()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>sb;append;["(id="]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;[bundle.getBundleId()]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;[")"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>equals</MethodName>
            <MethodComment>/** 
 * Determines the equality of two &lt;code&gt;AdminPermission&lt;/code&gt; objects.
 * @param obj The object being compared for equality with this object.
 * @return &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;obj&lt;/code&gt; is equivalent to this&lt;code&gt;AdminPermission&lt;/code&gt;; &lt;code&gt;false&lt;/code&gt; otherwise.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>obj</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AdminPermission [p=(AdminPermission)obj]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hashCode</MethodName>
            <MethodComment>/** 
 * Returns the hash code value for this object.
 * @return Hash code value for this object.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getActions</MethodName>
            <MethodComment>/** 
 * Returns the canonical string representation of the &lt;code&gt;AdminPermission&lt;/code&gt; actions. &lt;p&gt; Always returns present &lt;code&gt;AdminPermission&lt;/code&gt; actions in the following order: &lt;code&gt;class&lt;/code&gt;, &lt;code&gt;execute&lt;/code&gt;, &lt;code&gt;extensionLifecycle&lt;/code&gt;, &lt;code&gt;lifecycle&lt;/code&gt;, &lt;code&gt;listener&lt;/code&gt;, &lt;code&gt;metadata&lt;/code&gt;, &lt;code&gt;resolve&lt;/code&gt;, &lt;code&gt;resource&lt;/code&gt;, &lt;code&gt;startlevel&lt;/code&gt;, &lt;code&gt;context&lt;/code&gt;.
 * @return Canonical string representation of the&lt;code&gt;AdminPermission&lt;/code&gt; actions.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>implies</MethodName>
            <MethodComment>/** 
 * Determines if the specified permission is implied by this object. This method throws an exception if the specified permission was not constructed with a bundle. &lt;p&gt; This method returns &lt;code&gt;true&lt;/code&gt; if the specified permission is an AdminPermission AND &lt;ul&gt; &lt;li&gt;this object's filter matches the specified permission's bundle ID, bundle symbolic name, bundle location and bundle signer distinguished name chain OR&lt;/li&gt; &lt;li&gt;this object's filter is "*"&lt;/li&gt; &lt;/ul&gt; AND this object's actions include all of the specified permission's actions. &lt;p&gt; Special case: if the specified permission was constructed with "*" filter, then this method returns &lt;code&gt;true&lt;/code&gt; if this object's filter is "*" and this object's actions include all of the specified permission's actions
 * @param p The permission to interrogate.
 * @return &lt;code&gt;true&lt;/code&gt; if the specified permission is implied bythis object; &lt;code&gt;false&lt;/code&gt; otherwise.
 * @throws RuntimeException if specified permission was not constructed witha bundle or "*"
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>p</ParamName>
                    <ParamType>Permission</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AdminPermission [pp=(AdminPermission)p]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newPermissionCollection</MethodName>
            <MethodComment>/** 
 * Returns a new &lt;code&gt;PermissionCollection&lt;/code&gt; object suitable for storing &lt;code&gt;AdminPermission&lt;/code&gt;s.
 * @return A new &lt;code&gt;PermissionCollection&lt;/code&gt; object.
 */
</MethodComment>
            <ReturnType>PermissionCollection</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>