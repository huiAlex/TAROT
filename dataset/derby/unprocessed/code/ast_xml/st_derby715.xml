<Class>
    <Id>759</Id>
    <Package>org.apache.derbyTesting.functionTests.tests.storetests</Package>
    <ClassName>st_derby715</ClassName>
    <SuperClass>BaseJDBCTestCase</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>st_derby715  /** 
 * The purpose of this test is to reproduce JIRA DERBY-715: Sometimes a deadlock would be incorrectly reported as a timeout.  The bug seemed to always reproduce at least once if the following test was run (at least one of the iterations in the loop would get an incorrect timeout vs. a deadlock).
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>barrier</FieldName>
            <FieldType>Barrier</FieldType>
        </Field>
        <Field>
            <FieldName>errors</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>errors</FieldName>
            <FieldType>Throwable</FieldType>
        </Field>
        <Field>
            <FieldName>stmt</FieldName>
            <FieldType>Statement</FieldType>
        </Field>
        <Field>
            <FieldName>id</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>readTable</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>writeTable</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>st_derby715</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>suite</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Test</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Test [test=TestConfiguration.embeddedSuite(st_derby715.class)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initializeConnection</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conn</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>conn;setAutoCommit;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>conn;setTransactionIsolation;[Connection.TRANSACTION_SERIALIZABLE]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>test_st_derby715</MethodName>
            <MethodComment>/** 
 * Run two threads, where thread 1 first reads from table A and then inserts a row into table B, and thread 2 first reads from table B and then inserts a row into table A. This should cause a deadlock in one of the threads. Before DERBY-715, sometimes a timeout would be raised instead of a deadlock.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Statement [stmt=createStatement()]</InnerVar>
                <InnerVar>Connection [c1=openDefaultConnection()]</InnerVar>
                <InnerVar>Connection [c2=openDefaultConnection()]</InnerVar>
                <InnerVar>Statement [stmt1=c1.createStatement()]</InnerVar>
                <InnerVar>Statement [stmt2=c2.createStatement()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>stmt;executeUpdate;["create table a (a integer)"]</InnerMethodInvoke>
                <InnerMethodInvoke>stmt;executeUpdate;["create table b (b integer)"]</InnerMethodInvoke>
                <InnerMethodInvoke>stmt;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;commit;[]</InnerMethodInvoke>
                <InnerMethodInvoke>stmt1;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>stmt2;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>tearDown</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>WorkerThread</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>stmt</ParamName>
                    <ParamType>Statement</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>id</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>readTable</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>writeTable</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>_run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;println;[id + " before selecting from " + readTable]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertEmpty;[stmt.executeQuery("select * from " + readTable)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;println;[id + " after reading all rows"]</InnerMethodInvoke>
                <InnerMethodInvoke>barrier;await;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;println;[id + " before inserting into " + writeTable]</InnerMethodInvoke>
                <InnerMethodInvoke>stmt;execute;["insert into " + writeTable + " values (1)"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;println;[id + " after inserting"]</InnerMethodInvoke>
                <InnerMethodInvoke>stmt.getConnection();rollback;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>