<Class>
    <Id>693</Id>
    <Package>org.apache.derby.impl.sql.compile</Package>
    <ClassName>BaseJoinStrategy</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>JoinStrategy</SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>BaseJoinStrategy</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>bulkFetchOK</MethodName>
            <MethodComment>/** 
 * @see JoinStrategy#bulkFetchOK 
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ignoreBulkFetch</MethodName>
            <MethodComment>/** 
 * @see JoinStrategy#ignoreBulkFetch 
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fillInScanArgs1</MethodName>
            <MethodComment>/** 
 * Push the first set of common arguments for obtaining a scan ResultSet from ResultSetFactory. The first 11 arguments are common for these ResultSet getters &lt;UL&gt; &lt;LI&gt; ResultSetFactory.getBulkTableScanResultSet &lt;LI&gt; ResultSetFactory.getHashScanResultSet &lt;LI&gt; ResultSetFactory.getTableScanResultSet &lt;LI&gt; ResultSetFactory.getRaDependentTableScanResultSet &lt;/UL&gt;
 * @param tc
 * @param mb
 * @param innerTable
 * @param predList
 * @param acbi
 * @throws StandardException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tc</ParamName>
                    <ParamType>TransactionController</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mb</ParamName>
                    <ParamType>MethodBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>innerTable</ParamName>
                    <ParamType>Optimizable</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>predList</ParamName>
                    <ParamType>OptimizablePredicateList</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>acbi</ParamName>
                    <ParamType>ExpressionClassBuilderInterface</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>resultRowTemplate</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [sameStartStopPosition=predList.sameStartStopPosition()]</InnerVar>
                <InnerVar>ExpressionClassBuilder [acb=(ExpressionClassBuilder)acbi]</InnerVar>
                <InnerVar>long [conglomNumber=innerTable.getTrulyTheBestAccessPath().getConglomerateDescriptor().getConglomerateNumber()]</InnerVar>
                <InnerVar>StaticCompiledOpenConglomInfo [scoci=tc.getStaticCompiledConglomInfo(conglomNumber)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>acb;pushThisAsActivation;[mb]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;push;[conglomNumber]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;push;[acb.addItem(scoci)]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;push;[resultRowTemplate]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;push;[innerTable.getResultSetNumber()]</InnerMethodInvoke>
                <InnerMethodInvoke>predList;generateStartKey;[acb, mb, innerTable]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;push;[predList.startOperator(innerTable)]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;push;[predList.stopOperator(innerTable)]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;push;[sameStartStopPosition]</InnerMethodInvoke>
                <InnerMethodInvoke>predList;generateQualifiers;[acb, mb, innerTable, true]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;upCast;[ClassName.Qualifier + "[][]"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fillInScanArgs2</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mb</ParamName>
                    <ParamType>MethodBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>innerTable</ParamName>
                    <ParamType>Optimizable</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>bulkFetch</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>colRefItem</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indexColItem</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lockMode</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableLocked</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isolationLevel</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ConglomerateDescriptor [cd=innerTable.getTrulyTheBestAccessPath().getConglomerateDescriptor()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mb;push;[innerTable.getBaseTableName()]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;push;[cd.isConstraint()]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;push;[innerTable.forUpdate()]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;push;[colRefItem]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;push;[indexColItem]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;push;[lockMode]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;push;[tableLocked]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;push;[isolationLevel]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;push;[innerTable.getTrulyTheBestAccessPath().getCostEstimate().rowCount()]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;push;[innerTable.getTrulyTheBestAccessPath().getCostEstimate().getEstimatedCost()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isHashJoin</MethodName>
            <MethodComment>/** 
 * @see JoinStrategy#isHashJoin
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>validForOutermostTable</MethodName>
            <MethodComment>/** 
 * Can this join strategy be used on the outermost table of a join.
 * @return Whether or not this join strategycan be used on the outermost table of a join.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>