<Class>
    <Id>1688</Id>
    <Package>org.apache.derby.iapi.store.raw.data</Package>
    <ClassName>RawContainerHandle</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>ContainerHandle</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>RawContainerHandle  /** 
 * RawContainerHandle is the form of ContainerHandle that is used within the raw store.  This allows the raw store to have a handle on dropped container without exposing this to the external interface, which is not allowed to get back a handle on a dropped container
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>NORMAL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>DROPPED</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>COMMITTED_DROP</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getContainerStatus</MethodName>
            <MethodComment>/** 
 * Return the status of the container - one of NORMAL, DROPPED, COMMITTED_DROP.
 * @exception StandardException  Standard Derby exception policy
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeContainer</MethodName>
            <MethodComment>/** 
 * Remove the container.
 * @exception StandardException  Standard Derby exception policy
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>instant</ParamName>
                    <ParamType>LogInstant</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>dropContainer</MethodName>
            <MethodComment>/** 
 * If drop is true, drop the container.  if drop is false, un-drop the container
 * @exception StandardException  Standard Derby exception policy
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>instant</ParamName>
                    <ParamType>LogInstant</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>drop</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getContainerVersion</MethodName>
            <MethodComment>/** 
 * Get the logged container version
 * @exception StandardException  Standard Derby exception policy
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAnyPage</MethodName>
            <MethodComment>/** 
 * Return a Page that represents any page - alloc page, valid page, free page,  dealloced page etc.
 * @exception StandardException Standard Derby error policy
 */
</MethodComment>
            <ReturnType>Page</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pageNumber</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reCreatePageForRedoRecovery</MethodName>
            <MethodComment>/** 
 * ReCreate a page for redo recovery. Used during redo recovery while trying to apply log records which are creating the page.
 * @exception StandardException Standard Derby error policy
 */
</MethodComment>
            <ReturnType>Page</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pageFormat</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pageNumber</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pageOffset</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>logCreateContainerInfo</MethodName>
            <MethodComment>/** 
 * Log all information necessary to recreate the container during a load tran.
 * @exception StandardException Standard Derby error policy
 */
</MethodComment>
            <ReturnType>ByteArray</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>preDirty</MethodName>
            <MethodComment>/** 
 * The container is about to be modified. Loggable actions use this to make sure the container gets cleaned if a checkpoint is taken after any log record is sent to the log stream but before the container is actually dirtied.
 * @exception StandardException Standard Derby error policy
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>preDirtyOn</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>encryptOrDecryptContainer</MethodName>
            <MethodComment>/** 
 * Creates an encrypted or decrypted version of the container.
 * @param newFilePath file to store the new  version of the container
 * @param doEncrypt tells whether to encrypt or decrypt
 * @exception StandardException	Standard Derby error policy
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>newFilePath</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>doEncrypt</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>