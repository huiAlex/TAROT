<Class>
    <Id>2066</Id>
    <Package>org.apache.derby.iapi.types</Package>
    <ClassName>DateTimeDataValue</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>DataValueDescriptor</SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>YEAR_FIELD</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>MONTH_FIELD</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>DAY_FIELD</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>HOUR_FIELD</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>MINUTE_FIELD</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SECOND_FIELD</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>FRAC_SECOND_INTERVAL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SECOND_INTERVAL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>MINUTE_INTERVAL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>HOUR_INTERVAL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>DAY_INTERVAL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>WEEK_INTERVAL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>MONTH_INTERVAL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>QUARTER_INTERVAL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>YEAR_INTERVAL</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getYear</MethodName>
            <MethodComment>/** 
 * Get the year number out of a date.
 * @param result	The result of the previous call to this method, nullif not called yet.
 * @return	A NumberDataValue containing the year number.
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>NumberDataValue</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>result</ParamName>
                    <ParamType>NumberDataValue</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMonth</MethodName>
            <MethodComment>/** 
 * Get the month number out of a date.
 * @param result	The result of the previous call to this method, nullif not called yet.
 * @return	A NumberDataValue containing the month number.
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>NumberDataValue</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>result</ParamName>
                    <ParamType>NumberDataValue</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDate</MethodName>
            <MethodComment>/** 
 * Get the day of the month.
 * @param result	The result of the previous call to this method, nullif not called yet.
 * @return	A NumberDataValue containing the day of the month.
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>NumberDataValue</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>result</ParamName>
                    <ParamType>NumberDataValue</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getHours</MethodName>
            <MethodComment>/** 
 * Get the hour of the day out of a time or timestamp.
 * @param result	The result of the previous call to this method, nullif not called yet.
 * @return	A NumberDataValue containing the hour of the day.
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>NumberDataValue</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>result</ParamName>
                    <ParamType>NumberDataValue</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMinutes</MethodName>
            <MethodComment>/** 
 * Get the minute of the hour out of a time or timestamp.
 * @param result	The result of the previous call to this method, nullif not called yet.
 * @return	A NumberDataValue containing the minute of the hour.
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>NumberDataValue</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>result</ParamName>
                    <ParamType>NumberDataValue</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSeconds</MethodName>
            <MethodComment>/** 
 * Get the second of the minute out of a time or timestamp.
 * @param result	The result of the previous call to this method, nullif not called yet.
 * @return	A NumberDataValue containing the second of the minute.
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>NumberDataValue</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>result</ParamName>
                    <ParamType>NumberDataValue</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>timestampAdd</MethodName>
            <MethodComment>/** 
 * Add a number of intervals to a datetime value. Implements the JDBC escape TIMESTAMPADD function.
 * @param intervalType One of FRAC_SECOND_INTERVAL, SECOND_INTERVAL, MINUTE_INTERVAL, HOUR_INTERVAL,DAY_INTERVAL, WEEK_INTERVAL, MONTH_INTERVAL, QUARTER_INTERVAL, or YEAR_INTERVAL
 * @param intervalCount The number of intervals to add
 * @param currentDate Used to convert time to timestamp
 * @param resultHolder If non-null a DateTimeDataValue that can be used to hold the result. If null thengenerate a new holder
 * @return startTime + intervalCount intervals, as a timestamp
 * @exception StandardException
 */
</MethodComment>
            <ReturnType>DateTimeDataValue</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>intervalType</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>intervalCount</ParamName>
                    <ParamType>NumberDataValue</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>currentDate</ParamName>
                    <ParamType>java.sql.Date</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>resultHolder</ParamName>
                    <ParamType>DateTimeDataValue</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>timestampDiff</MethodName>
            <MethodComment>/** 
 * Finds the difference between two datetime values as a number of intervals. Implements the JDBC TIMESTAMPDIFF escape function.
 * @param intervalType One of FRAC_SECOND_INTERVAL, SECOND_INTERVAL, MINUTE_INTERVAL, HOUR_INTERVAL,DAY_INTERVAL, WEEK_INTERVAL, MONTH_INTERVAL, QUARTER_INTERVAL, or YEAR_INTERVAL
 * @param time1
 * @param currentDate Used to convert time to timestamp
 * @param resultHolder If non-null a DateTimeDataValue that can be used to hold the result. If null thengenerate a new holder
 * @return the number of intervals by which this datetime is greater than time1
 * @exception StandardException
 */
</MethodComment>
            <ReturnType>NumberDataValue</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>intervalType</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>time1</ParamName>
                    <ParamType>DateTimeDataValue</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>currentDate</ParamName>
                    <ParamType>java.sql.Date</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>resultHolder</ParamName>
                    <ParamType>NumberDataValue</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>