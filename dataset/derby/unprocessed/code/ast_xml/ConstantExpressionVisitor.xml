<Class>
    <Id>320</Id>
    <Package>org.apache.derby.impl.sql.compile</Package>
    <ClassName>ConstantExpressionVisitor</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Visitor</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ConstantExpressionVisitor  /** 
 * &lt;p&gt; This visitor replaces a  {@code ValueNode} with a node representing aconstant value, if the  {@code ValueNode} is known to always evaluate to thesame value. It may for instance replace a sub-tree representing  {@code 1=1}with a constant  {@code TRUE}. &lt;/p&gt; &lt;p&gt; The actual evaluation of the  {@code ValueNode}s is performed by invoking {@link ValueNode#evaluateConstantExpressions()} on every {@code ValueNode}in the query tree. &lt;/p&gt; &lt;p&gt; In contrast to most other visitors, this visitor walks the tree bottom-up. Top-down processing of the tree would only evaluate constant expressions at the leaf level, so for instance  {@code (1=1)=(1=2)} would only besimplified to  {@code TRUE=FALSE}. With bottom-up processing, the top-level = node will be processed after the leaves, and it sees the intermediate tree  {@code TRUE=FALSE} which it is able to transform into the even simplertree  {@code FALSE}. &lt;/p&gt;
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment>/** 
 * Visit the node and call  {@code evaluateConstantExpressions()} if itis a  {@code ValueNode}.
 * @see ValueNode#evaluateConstantExpressions()
 */
</MethodComment>
            <ReturnType>Visitable</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>Visitable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>stopTraversal</MethodName>
            <MethodComment>/** 
 * {@inheritDoc}
 * @return {@code false}, since the entire tree should be visited
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>skipChildren</MethodName>
            <MethodComment>/** 
 * {@inheritDoc}
 * @return {@code false}, since the entire tree should be visited
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>Visitable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitChildrenFirst</MethodName>
            <MethodComment>/** 
 * {@inheritDoc}
 * @return {@code true}, since the tree should be walked bottom-up
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>Visitable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>