<Class>
    <Id>34</Id>
    <Package>org.apache.derby.iapi.services.diag</Package>
    <ClassName>DiagnosticUtil</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>DiagnosticUtil</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findDiagnostic</MethodName>
            <MethodComment>/** 
 * Given an object return instance of the diagnostic object for this class. &lt;p&gt; Given an object this routine will determine the classname of the object and then try to instantiate a new instance of the diagnostic object for this class by prepending on "D_" to the last element of theclassname. If no matching class is found then the same lookup is made on the super-class of the object, looking all the way up the hierachy until a diagnostic class is found. &lt;BR&gt; This routine will call "init(ref)" on the new instance and then return the new instance.
 * @return A new instance of the diagnostic object for input object, ornull if one could not be found for some reason.
 * @param ref   The object which to build the diagnostic object for.
 */
</MethodComment>
            <ReturnType>Diagnosticable</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ref</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Class [refClass=ref.getClass()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toDiagString</MethodName>
            <MethodComment>/** 
 * Return a diagnostic string associated with an object. &lt;p&gt; A utility interface to use if you just want to print a single string  that represents the object in question.  In following order this routine will deliver the string to use: 1) find diagnostic help class, and use class.diag() 2) else just use class.toString() &lt;p&gt;
 * @return The string describing the class input.
 * @param obj The object to print out.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>obj</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [ret_string=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>