<Class>
    <Id>776</Id>
    <Package>org.osgi.framework</Package>
    <ClassName>ServiceReference</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Comparable</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ServiceReference  /** 
 * A reference to a service. &lt;p&gt; The Framework returns &lt;code&gt;ServiceReference&lt;/code&gt; objects from the &lt;code&gt;BundleContext.getServiceReference&lt;/code&gt; and &lt;code&gt;BundleContext.getServiceReferences&lt;/code&gt; methods. &lt;p&gt; A &lt;code&gt;ServiceReference&lt;/code&gt; object may be shared between bundles and can be used to examine the properties of the service and to get the service object. &lt;p&gt; Every service registered in the Framework has a unique &lt;code&gt;ServiceRegistration&lt;/code&gt; object and may have multiple, distinct &lt;code&gt;ServiceReference&lt;/code&gt; objects referring to it. &lt;code&gt;ServiceReference&lt;/code&gt; objects associated with a &lt;code&gt;ServiceRegistration&lt;/code&gt; object have the same &lt;code&gt;hashCode&lt;/code&gt; and are considered equal (more specifically, their &lt;code&gt;equals()&lt;/code&gt; method will return &lt;code&gt;true&lt;/code&gt; when compared). &lt;p&gt; If the same service object is registered multiple times, &lt;code&gt;ServiceReference&lt;/code&gt; objects associated with different &lt;code&gt;ServiceRegistration&lt;/code&gt; objects are not equal.
 * @see BundleContext#getServiceReference
 * @see BundleContext#getServiceReferences
 * @see BundleContext#getService
 * @ThreadSafe
 * @version $Revision: 1.20 $
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getProperty</MethodName>
            <MethodComment>/** 
 * Returns the property value to which the specified property key is mapped in the properties &lt;code&gt;Dictionary&lt;/code&gt; object of the service referenced by this &lt;code&gt;ServiceReference&lt;/code&gt; object. &lt;p&gt; Property keys are case-insensitive. &lt;p&gt; This method must continue to return property values after the service has been unregistered. This is so references to unregistered services (for example, &lt;code&gt;ServiceReference&lt;/code&gt; objects stored in the log) can still be interrogated.
 * @param key The property key.
 * @return The property value to which the key is mapped; &lt;code&gt;null&lt;/code&gt;if there is no property named after the key.
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPropertyKeys</MethodName>
            <MethodComment>/** 
 * Returns an array of the keys in the properties &lt;code&gt;Dictionary&lt;/code&gt; object of the service referenced by this &lt;code&gt;ServiceReference&lt;/code&gt; object. &lt;p&gt; This method will continue to return the keys after the service has been unregistered. This is so references to unregistered services (for example, &lt;code&gt;ServiceReference&lt;/code&gt; objects stored in the log) can still be interrogated. &lt;p&gt; This method is &lt;i&gt;case-preserving &lt;/i&gt;; this means that every key in the returned array must have the same case as the corresponding key in the properties &lt;code&gt;Dictionary&lt;/code&gt; that was passed to the {@link BundleContext#registerService(String[],Object,java.util.Dictionary)}or  {@link ServiceRegistration#setProperties} methods.
 * @return An array of property keys.
 */
</MethodComment>
            <ReturnType>String[]</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBundle</MethodName>
            <MethodComment>/** 
 * Returns the bundle that registered the service referenced by this &lt;code&gt;ServiceReference&lt;/code&gt; object. &lt;p&gt; This method must return &lt;code&gt;null&lt;/code&gt; when the service has been unregistered. This can be used to determine if the service has been unregistered.
 * @return The bundle that registered the service referenced by this&lt;code&gt;ServiceReference&lt;/code&gt; object; &lt;code&gt;null&lt;/code&gt; if that service has already been unregistered.
 * @see BundleContext#registerService(String[],Object,java.util.Dictionary)
 */
</MethodComment>
            <ReturnType>Bundle</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getUsingBundles</MethodName>
            <MethodComment>/** 
 * Returns the bundles that are using the service referenced by this &lt;code&gt;ServiceReference&lt;/code&gt; object. Specifically, this method returns the bundles whose usage count for that service is greater than zero.
 * @return An array of bundles whose usage count for the service referencedby this &lt;code&gt;ServiceReference&lt;/code&gt; object is greater than zero; &lt;code&gt;null&lt;/code&gt; if no bundles are currently using that service.
 * @since 1.1
 */
</MethodComment>
            <ReturnType>Bundle[]</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isAssignableTo</MethodName>
            <MethodComment>/** 
 * Tests if the bundle that registered the service referenced by this &lt;code&gt;ServiceReference&lt;/code&gt; and the specified bundle use the same source for the package of the specified class name. &lt;p&gt; This method performs the following checks: &lt;ol&gt; &lt;li&gt;Get the package name from the specified class name.&lt;/li&gt; &lt;li&gt;For the bundle that registered the service referenced by this &lt;code&gt;ServiceReference&lt;/code&gt; (registrant bundle); find the source for the package. If no source is found then return &lt;code&gt;true&lt;/code&gt; if the registrant bundle is equal to the specified bundle; otherwise return &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;If the package source of the registrant bundle is equal to the package source of the specified bundle then return &lt;code&gt;true&lt;/code&gt;; otherwise return &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt; &lt;/ol&gt;
 * @param bundle The &lt;code&gt;Bundle&lt;/code&gt; object to check.
 * @param className The class name to check.
 * @return &lt;code&gt;true&lt;/code&gt; if the bundle which registered the servicereferenced by this &lt;code&gt;ServiceReference&lt;/code&gt; and the specified bundle use the same source for the package of the specified class name. Otherwise &lt;code&gt;false&lt;/code&gt; is returned.
 * @since 1.3
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>bundle</ParamName>
                    <ParamType>Bundle</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>className</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compareTo</MethodName>
            <MethodComment>/** 
 * Compares this &lt;code&gt;ServiceReference&lt;/code&gt; with the specified &lt;code&gt;ServiceReference&lt;/code&gt; for order. &lt;p&gt; If this &lt;code&gt;ServiceReference&lt;/code&gt; and the specified &lt;code&gt;ServiceReference&lt;/code&gt; have the same {@link Constants#SERVICE_ID service id} they are equal. This&lt;code&gt;ServiceReference&lt;/code&gt; is less than the specified &lt;code&gt;ServiceReference&lt;/code&gt; if it has a lower {@link Constants#SERVICE_RANKING service ranking} and greater if it has ahigher service ranking. Otherwise, if this &lt;code&gt;ServiceReference&lt;/code&gt; and the specified &lt;code&gt;ServiceReference&lt;/code&gt; have the same {@link Constants#SERVICE_RANKING service ranking}, this &lt;code&gt;ServiceReference&lt;/code&gt; is less than the specified &lt;code&gt;ServiceReference&lt;/code&gt; if it has a higher {@link Constants#SERVICE_ID service id} and greater if it has a lowerservice id.
 * @param reference The &lt;code&gt;ServiceReference&lt;/code&gt; to be compared.
 * @return Returns a negative integer, zero, or a positive integer if this&lt;code&gt;ServiceReference&lt;/code&gt; is less than, equal to, or greater than the specified &lt;code&gt;ServiceReference&lt;/code&gt;.
 * @since 1.4
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>reference</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>