<Class>
    <Id>567</Id>
    <Package>org.apache.derby.iapi.store.access</Package>
    <ClassName>BinaryOrderable</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Orderable</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>BinaryOrderable  /** 
 * The Orderable interface represents a value that can be linearly ordered. &lt;P&gt; Currently only supports linear (&amp;lt;, =, &amp;lt;=) operations. Eventually we may want to do other types of orderings, in which case there would probably be a number of interfaces for each "class" of ordering. &lt;P&gt; The implementation must handle the comparison of null values.  This may require some changes to the interface, since (at least in some contexts) comparing a value with null should return unknown instead of true or false.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>binarycompare</MethodName>
            <MethodComment>/** 
 * Compare this Orderable with a given Orderable for the purpose of index positioning.  This method treats nulls as ordered values - that is, it treats SQL null as equal to null and less than all other values.
 * @param other		The Orderable to compare this one to.
 * @return  &amp;lt;0 - this Orderable is less than other.0 - this Orderable equals other. &amp;gt;0 - this Orderable is greater than other. The code should not explicitly look for -1, or 1.
 * @exception IOException		Thrown on error
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>in</ParamName>
                    <ParamType>ObjectInput</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>other</ParamName>
                    <ParamType>Orderable</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>binarycompare</MethodName>
            <MethodComment>/** 
 * Compare this Orderable with a given Orderable for the purpose of qualification and sorting.  The caller gets to determine how nulls should be treated - they can either be ordered values or unknown values.
 * @param op	Orderable.ORDER_OP_EQUALS means do an = comparison.Orderable.ORDER_OP_LESSTHAN means compare this &amp;lt; other. Orderable.ORDER_OP_LESSOREQUALS means compare this &amp;lt;= other.
 * @param other	The Orderable to compare this one to.
 * @param orderedNulls	True means to treat nulls as ordered values,that is, treat SQL null as equal to null, and less than all other values. False means to treat nulls as unknown values, that is, the result of any comparison with a null is the UNKNOWN truth value.
 * @param unknownRV		The return value to use if the result of thecomparison is the UNKNOWN truth value.  In other words, if orderedNulls is false, and a null is involved in the comparison, return unknownRV. This parameter is not used orderedNulls is true.
 * @return	true if the comparison is true.
 * @exception IOException		Thrown on error
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>in</ParamName>
                    <ParamType>ObjectInput</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>op</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>other</ParamName>
                    <ParamType>Orderable</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>orderedNulls</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>unknownRV</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>