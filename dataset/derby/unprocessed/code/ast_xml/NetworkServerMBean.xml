<Class>
    <Id>127</Id>
    <Package>org.apache.derby.mbeans.drda</Package>
    <ClassName>NetworkServerMBean</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>NetworkServerMBean  /** 
 * &lt;p&gt; This is an MBean defining a JMX management and monitoring interface of  Derby's Network Server.&lt;/p&gt; &lt;p&gt; This MBean is created and registered automatically at Network Server startup if all requirements are met (J2SE 5.0 or better).&lt;/p&gt; &lt;p&gt; Key properties for the registered MBean:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;type=NetworkServer&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;code&gt;system=&lt;/code&gt;&lt;em&gt;runtime system identifier&lt;/em&gt; (see  &lt;a href="../package-summary.html#package_description"&gt;description of  package org.apache.derby.mbeans&lt;/a&gt;)&lt;/li&gt; &lt;/ul&gt; &lt;p&gt; If a security manager is installed, accessing attributes and operations of this MBean may require a &lt;code&gt;SystemPermission&lt;/code&gt;; see individual method documentation for details.&lt;/p&gt; &lt;p&gt; For more information on Managed Beans, refer to the JMX specification.&lt;/p&gt;
 * @see org.apache.derby.drda.NetworkServerControl
 * @see org.apache.derby.security.SystemPermission
 * @see &lt;a href="../package-summary.html"&gt;&lt;code&gt;org.apache.derby.mbeans&lt;/code&gt;&lt;/a&gt;
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getDrdaHost</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Gets the network interface address on which the Network Server is  listening. This corresponds to the value of the  &lt;code&gt;derby.drda.host&lt;/code&gt; property.&lt;/p&gt; &lt;p&gt; For example, the value "&lt;code&gt;localhost&lt;/code&gt;" means that the  Network Server is listening on the local loopback interface only. &lt;p&gt; The special value "&lt;code&gt;0.0.0.0&lt;/code&gt;" (IPv4 environments only) represents the "unspecified address" - also known as the anylocal or  wildcard address.  In this context this means that the server is  listening on all network interfaces (and may thus be able to see  connections from both the local host as well as remote hosts, depending on which network interfaces are available).&lt;/p&gt; &lt;p&gt; Requires &lt;code&gt;SystemPermission("server", "control")&lt;/code&gt; if a security manager is installed.&lt;/p&gt;
 * @return the the network interface address on which the Network Server is listening (&lt;code&gt;derby.drda.host&lt;/code&gt;)
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDrdaKeepAlive</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Reports whether or not the Derby Network Server will send keep-alive  probes and attempt to clean up connections for disconnected clients (the  value of the  {@code derby.drda.keepAlive} property).&lt;/p&gt;&lt;p&gt; If  {@code true}, a keep-alive probe is sent to the client if a "long  time" (by default, more than two hours) passes with no other data being  sent or received. This will detect and clean up connections for clients  on powered-off machines or clients that have disconnected unexpectedly. &lt;/p&gt; &lt;p&gt; If  {@code false}, Derby will not attempt to clean up connections from disconnected clients, and will not send keep-alive probes.&lt;/p&gt; &lt;p&gt; Requires &lt;code&gt;SystemPermission("server", "monitor")&lt;/code&gt; if a security manager is installed.&lt;/p&gt; &lt;p&gt; See also the documentation for the property  {@code derby.drda.keepAlive}in the &lt;em&gt;Derby Server and Administration Guide&lt;/em&gt;, section &lt;em&gt;Managing the Derby Network Server&lt;/em&gt;, subsection &lt;em&gt;Setting Network Server Properties&lt;/em&gt;, subsubsection &lt;em&gt;derby.drda.keepAlive property&lt;/em&gt;. &lt;/p&gt;
 * @return {@code true} if Derby Network Server will send keep-alive probes and attempt to clean up connections for disconnected  clients ( {@code derby.drda.keepAlive})
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDrdaMaxThreads</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Reports the maximum number of client connection threads the Network  Server will allocate at any given time. This corresponds to the  &lt;code&gt;derby.drda.maxThreads&lt;/code&gt; property.&lt;/p&gt; &lt;p&gt; Requires &lt;code&gt;SystemPermission("server", "monitor")&lt;/code&gt; if a security manager is installed.&lt;/p&gt;
 * @return the maximum number of client connection threads the Network Server will allocate at any given time  (&lt;code&gt;derby.drda.maxThreads&lt;/code&gt;)
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDrdaPortNumber</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Gets the port number on which the Network Server is listening for client  connections. This corresponds to the value of the  &lt;code&gt;derby.drda.portNumber&lt;/code&gt; Network Server setting.&lt;/p&gt; &lt;p&gt; Requires &lt;code&gt;SystemPermission("server", "control")&lt;/code&gt; if a security manager is installed.&lt;/p&gt;
 * @return the port number on which the Network Server is listeningfor client connections.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDrdaSecurityMechanism</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; The Derby security mechanism required by the Network Server for all  client connections. This corresponds to the value of the  &lt;code&gt;derby.drda.securityMechanism&lt;/code&gt; property on the server.&lt;/p&gt; &lt;p&gt; If not set, the empty String will be returned, which means that the  Network Server accepts any connection which uses a valid security  mechanism.&lt;/p&gt; &lt;p&gt; For a list of valid security mechanisms, refer to the  documentation for the &lt;code&gt;derby.drda.securityMechanism&lt;/code&gt; property in the &lt;i&gt;Derby Server and Administration Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt; Requires &lt;code&gt;SystemPermission("server", "control")&lt;/code&gt; if a security manager is installed.&lt;/p&gt;
 * @return the security mechanism required by the Network Server for all client connections (&lt;code&gt;derby.drda.securityMechanism&lt;/code&gt;)
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDrdaSslMode</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Reports whether client connections must be encrypted using Secure  Sockets Layer (SSL), and whether certificate based peer authentication  is enabled. Refers to the &lt;code&gt;derby.drda.sslMode&lt;/code&gt; property.&lt;/p&gt; &lt;p&gt; Peer authentication means that the other side of the SSL connection is  authenticated based on a trusted certificate installed locally.&lt;/p&gt; &lt;p&gt; The value returned is one of "&lt;code&gt;off&lt;/code&gt;" (no SSL encryption),  "&lt;code&gt;basic&lt;/code&gt;" (SSL encryption, no peer authentication) and  "&lt;code&gt;peerAuthentication&lt;/code&gt;" (SSL encryption and peer authentication). Refer to the &lt;i&gt;Derby Server and Administration  Guide&lt;/i&gt; for more details.&lt;/p&gt; &lt;p&gt; Requires &lt;code&gt;SystemPermission("server", "control")&lt;/code&gt; if a security manager is installed.&lt;/p&gt;
 * @return whether client connections must be encrypted using Secure Sockets Layer (SSL), and whether certificate based peer  authentication is enabled (&lt;code&gt;derby.drda.sslMode&lt;/code&gt;)
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDrdaStreamOutBufferSize</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; The size of the buffer used for streaming BLOB and CLOB from server to  client. Refers to the &lt;code&gt;derby.drda.streamOutBufferSize&lt;/code&gt;  property.&lt;/p&gt; &lt;p&gt; This setting may improve streaming performance when the default sizes of  packets being sent are significantly smaller than the maximum allowed  packet size in the network.&lt;/p&gt; &lt;p&gt; Requires &lt;code&gt;SystemPermission("server", "monitor")&lt;/code&gt; if a security manager is installed.&lt;/p&gt;
 * @return the size of the buffer used for streaming blob/clob from server to client (&lt;code&gt;derby.drda.streamOutBufferSize&lt;/code&gt;)
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDrdaTimeSlice</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; If the server property &lt;code&gt;derby.drda.maxThreads&lt;/code&gt; is set to a  non-zero value, this is the number of milliseconds that each client  connection will actively use in the Network Server before yielding to  another connection. If this value is 0, a waiting connection will become active once a currently active connection is closed.&lt;/p&gt; &lt;p&gt; Refers to the &lt;code&gt;derby.drda.timeSlice&lt;/code&gt; server property.&lt;/p&gt; &lt;p&gt; Requires &lt;code&gt;SystemPermission("server", "monitor")&lt;/code&gt; if a security manager is installed.&lt;/p&gt;
 * @return the number of milliseconds that each client connection will actively use in the Network Server before yielding to  another connection (&lt;code&gt;derby.drda.timeSlice&lt;/code&gt;)
 * @see #getDrdaMaxThreads()
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDrdaTraceAll</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Whether server-side tracing is enabled for all client connections  (sessions). Refers to the &lt;code&gt;derby.drda.traceAll&lt;/code&gt; server  property.&lt;/p&gt; &lt;p&gt; Tracing may for example be useful when providing technical support  information. The Network Server also supports tracing for individual connections (sessions), see the &lt;i&gt;Derby Server and Administration  Guide&lt;/i&gt; ("Controlling tracing by using the trace facility") for  details.&lt;/p&gt; &lt;p&gt; When tracing is enabled, tracing information from each client  connection will be written to a separate trace file. &lt;/p&gt; &lt;p&gt; Requires &lt;code&gt;SystemPermission("server", "monitor")&lt;/code&gt; if a security manager is installed.&lt;/p&gt;
 * @return whether tracing for all client connections is enabled(&lt;code&gt;derby.drda.traceAll&lt;/code&gt;)
 * @see #getDrdaTraceDirectory()
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDrdaTraceDirectory</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Indicates the location of tracing files on the server host, if server tracing has been enabled.&lt;/p&gt; &lt;p&gt; If the server setting &lt;code&gt;derby.drda.traceDirectory&lt;/code&gt; is set, its value will be returned. Otherwise, the Network Server's default  values will be taken into account when producing the result.&lt;/p&gt; &lt;p&gt; Requires &lt;code&gt;SystemPermission("server", "control")&lt;/code&gt; if a security manager is installed.&lt;/p&gt;
 * @return the potential location of tracing files on the server host
 * @see #getDrdaTraceAll()
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getConnectionCount</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Gets the total number of current connections (waiting or active) to the Network Server.&lt;/p&gt; &lt;p&gt; Requires &lt;code&gt;SystemPermission("server", "monitor")&lt;/code&gt; if a security manager is installed.&lt;/p&gt;
 * @return the number of current connections
 * @see #getActiveConnectionCount()
 * @see #getWaitingConnectionCount()
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getActiveConnectionCount</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Gets the number of currently active connections. All connections are  active if the DrdaMaxThreads attribute (&lt;code&gt;derby.drda.maxThreads&lt;/code&gt;  property) is 0.&lt;/p&gt; &lt;p&gt; If DrdaMaxThreads is &amp;gt; 0 and DrdaTimeSlice is 0, connections remain  active until they are closed. If there are more than DrdaMaxThreads  connections, inactive connections will be waiting for some active  connection to close. The connection request will return when the  connection becomes active.&lt;/p&gt; &lt;p&gt; If DrdaMaxThreads is &amp;gt; 0 and DrdaTimeSlice &amp;gt; 0, connections will be  alternating beetween active and waiting according to Derby's time  slicing algorithm.&lt;/p&gt; &lt;p&gt; Requires &lt;code&gt;SystemPermission("server", "monitor")&lt;/code&gt; if a security manager is installed.&lt;/p&gt;
 * @return the number of active connections
 * @see #getDrdaMaxThreads()
 * @see #getDrdaTimeSlice()
 * @see #getWaitingConnectionCount()
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getWaitingConnectionCount</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Gets the number of currently waiting connections. This number will always be 0 if DrdaMaxThreads is 0. Otherwise, if the total number of  connections is less than or equal to DrdaMaxThreads, then no connections are waiting.&lt;/p&gt; &lt;p&gt; Requires &lt;code&gt;SystemPermission("server", "monitor")&lt;/code&gt; if a security manager is installed.&lt;/p&gt;
 * @return the number of waiting connections
 * @see #getActiveConnectionCount()
 * @see #getDrdaMaxThreads()
 * @see #getDrdaTimeSlice()
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getConnectionThreadPoolSize</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Get the size of the connection thread pool. If DrdaMaxThreads  (&lt;code&gt;derby.drda.maxThreads&lt;/code&gt;) is set to a non-zero value, the size of the thread pool will not exceed this value.&lt;/p&gt; &lt;p&gt; Requires &lt;code&gt;SystemPermission("server", "monitor")&lt;/code&gt; if a security manager is installed.&lt;/p&gt;
 * @return the size of the Network Server's connection thread pool
 * @see #getDrdaMaxThreads()
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAccumulatedConnectionCount</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Gets the accumulated number of connections. This includes all active and waiting connections since the Network Server was started. This number will not decrease as long as the Network Server is running.&lt;/p&gt; &lt;p&gt; Require &lt;code&gt;SystemPermission("server", "monitor")&lt;/code&gt; if a security manager is installed.&lt;/p&gt;
 * @return the accumulated number of connections made since server startup
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBytesReceived</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Gets the total number of bytes read by the server since it was started. &lt;/p&gt; &lt;p&gt; Require &lt;code&gt;SystemPermission("server", "monitor")&lt;/code&gt; if a security manager is installed.&lt;/p&gt;
 * @return the total number of bytes received by the server
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBytesSent</MethodName>
            <MethodComment>/** 
 * &lt;p&gt;  Gets the total number of bytes written by the server since it was  started.&lt;/p&gt; &lt;p&gt; Requires &lt;code&gt;SystemPermission("server", "monitor")&lt;/code&gt; if a security manager is installed.&lt;/p&gt;
 * @return the total number of bytes sent by the server
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBytesReceivedPerSecond</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Gets the number of bytes received per second by the Network  Server. This number is calculated by taking into account the number of bytes received since the last calculation (or since MBean startup if it is the first time this attibute is being read).&lt;/p&gt; &lt;p&gt; The shortest interval measured is 1 second. This means that a new value will not be calculated unless there has been at least 1 second since the last calculation.&lt;/p&gt; &lt;p&gt; Requires &lt;code&gt;SystemPermission("server", "monitor")&lt;/code&gt; if a security manager is installed.&lt;/p&gt;
 * @return the number of bytes received per second
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBytesSentPerSecond</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Gets the number of bytes sent per second by the Network Server.  This number is calculated by taking into account the number of bytes sent since the last calculation (or since MBean startup if it is the first time this attibute is being read).&lt;/p&gt; &lt;p&gt;  The shortest interval measured is 1 second. This means that a new value will not be calculated unless there has been at least 1 second since the last calculation.&lt;/p&gt; &lt;p&gt; Requires &lt;code&gt;SystemPermission("server", "monitor")&lt;/code&gt; if a security manager is installed.&lt;/p&gt;
 * @return the number of bytes sent per millisecond
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStartTime</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Gets the start time of the network server. The time is reported as the number of milliseconds (ms) since Unix epoch (1970-01-01 00:00:00  UTC), and corresponds to the value of  &lt;code&gt;java.lang.System#currentTimeMillis()&lt;/code&gt; at the time the Network Server was started.&lt;/p&gt; &lt;p&gt; Requires &lt;code&gt;SystemPermission("server", "monitor")&lt;/code&gt; if a security manager is installed.&lt;/p&gt;
 * @return the difference, measured in milliseconds, between the time theNetwork Server was started and Unix epoch (1970-01-01T00:00:00Z)
 * @see java.lang.System#currentTimeMillis()
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getUptime</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Gets the time (in milliseconds) the Network Server has been running. In other words, the time passed since the server was started.&lt;/p&gt; &lt;p&gt; Requires &lt;code&gt;SystemPermission("server", "monitor")&lt;/code&gt; if a security manager is installed.&lt;/p&gt;
 * @return the difference, measured in milliseconds, between the current time and the time the Network Server was started
 * @see #getStartTime()
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ping</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Executes the network server's &lt;code&gt;ping&lt;/code&gt; command. Returns without errors if the server was successfully pinged.&lt;/p&gt; &lt;p&gt; Note that the &lt;code&gt;ping&lt;/code&gt; command itself will be executed from the  network server instance that is actually running the server, and that the  result will be transferred via JMX to the JMX client invoking this operation.  This means that this operation will test network server connectivity  from the same host (machine) as the network server, as opposed to when  the &lt;code&gt;ping&lt;/code&gt; command (or method) of  &lt;code&gt;NetworkServerControl&lt;/code&gt; is executed from a remote machine.&lt;/p&gt; &lt;p&gt; This operation requires the following permission to be granted to the network server code base if a Java security manager is installed in the server JVM:&lt;/p&gt; &lt;codeblock&gt; &lt;code&gt; permission java.net.SocketPermission "*", "connect,resolve"; &lt;/code&gt; &lt;/codeblock&gt; &lt;p&gt;The value &lt;code&gt;"*"&lt;/code&gt; will allow connections from the network  server to any host and any port, and may be replaced with a more specific value if so desired. The required value will depend on the value of the &lt;code&gt;-h&lt;/code&gt; (or &lt;code&gt;derby.drda.host&lt;/code&gt;) (host) and  &lt;code&gt;-p&lt;/code&gt; (or &lt;code&gt;derby.drda.portNumber&lt;/code&gt;) (port) settings of the Network Server.&lt;/p&gt; &lt;p&gt; Requires &lt;code&gt;SystemPermission("server", "monitor")&lt;/code&gt; if a security manager is installed.&lt;/p&gt;
 * @throws java.lang.Exception if the ping attempt fails (an indication thatthe network server is not running properly)
 * @see org.apache.derby.drda.NetworkServerControl#ping()
 * @see java.net.SocketPermission
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>