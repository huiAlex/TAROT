<Class>
    <Id>108</Id>
    <Package>org.apache.derby.impl.sql.execute</Package>
    <ClassName>StatementTriggerExecutor</ClassName>
    <SuperClass>GenericTriggerExecutor</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>StatementTriggerExecutor  /** 
 * A statement trigger executor is an object that executes a statement trigger.  It is instantiated at execution time.  There is one per statement trigger.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>StatementTriggerExecutor</MethodName>
            <MethodComment>/** 
 * Constructor
 * @param tec the execution context
 * @param triggerd the trigger descriptor
 * @param activation the activation
 * @param lcc the lcc
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tec</ParamName>
                    <ParamType>InternalTriggerExecutionContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>triggerd</ParamName>
                    <ParamType>TriggerDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>activation</ParamName>
                    <ParamType>Activation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lcc</ParamName>
                    <ParamType>LanguageConnectionContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fireTrigger</MethodName>
            <MethodComment>/** 
 * Fire the trigger based on the event.
 * @param event	the trigger event
 * @param brs   the before result set
 * @param ars   the after result set
 * @param colsReadFromTable   columns required from the trigger tableby the triggering sql
 * @exception StandardException on error or general triggerexception
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>event</ParamName>
                    <ParamType>TriggerEvent</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>brs</ParamName>
                    <ParamType>CursorResultSet</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ars</ParamName>
                    <ParamType>CursorResultSet</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>colsReadFromTable</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>tec;setTrigger;[triggerd]</InnerMethodInvoke>
                <InnerMethodInvoke>tec;setBeforeResultSet;[brs]</InnerMethodInvoke>
                <InnerMethodInvoke>tec;setAfterResultSet;[ars]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>