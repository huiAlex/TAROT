<Class>
    <Id>590</Id>
    <Package>org.osgi.framework</Package>
    <ClassName>BundlePermissionCollection</ClassName>
    <SuperClass>PermissionCollection</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>BundlePermissionCollection  /** 
 * Stores a set of &lt;code&gt;BundlePermission&lt;/code&gt; permissions.
 * @see java.security.Permission
 * @see java.security.Permissions
 * @see java.security.PermissionCollection
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>serialVersionUID</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>PROVIDE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>REQUIRE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>HOST</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>FRAGMENT</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>ACTION_PROVIDE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>ACTION_REQUIRE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>ACTION_HOST</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>ACTION_FRAGMENT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>ACTION_ALL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>ACTION_NONE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>action_mask</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>actions</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>serialVersionUID</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>permissions</FieldName>
            <FieldType>Hashtable</FieldType>
        </Field>
        <Field>
            <FieldName>permissions</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>all_allowed</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>BundlePermission</MethodName>
            <MethodComment>/** 
 * Defines the authority to provide and/or require and or specify a host fragment symbolic name within the OSGi environment. &lt;p&gt; Bundle Permissions are granted over all possible versions of a bundle. A bundle that needs to provide a bundle must have the appropriate &lt;code&gt;BundlePermission&lt;/code&gt; for the symbolic name; a bundle that requires a bundle must have the appropriate &lt;code&gt;BundlePermssion&lt;/code&gt; for that symbolic name; a bundle that specifies a fragment host must have the appropriate &lt;code&gt;BundlePermission&lt;/code&gt; for that symbolic name.
 * @param symbolicName the bundle symbolic name.
 * @param actions &lt;code&gt;PROVIDE&lt;/code&gt;,&lt;code&gt;REQUIRE&lt;/code&gt;,&lt;code&gt;HOST&lt;/code&gt;,&lt;code&gt;FRAGMENT&lt;/code&gt; (canonical order).
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>symbolicName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>actions</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>BundlePermission</MethodName>
            <MethodComment>/** 
 * Bundle private constructor used by BundlePermissionCollection.
 * @param symbolicName the bundle symbolic name
 * @param mask the action mask
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>symbolicName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mask</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;init;[mask]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>init</MethodName>
            <MethodComment>/** 
 * Called by constructors and when deserialized.
 * @param mask
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mask</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMask</MethodName>
            <MethodComment>/** 
 * Parse action string into action mask.
 * @param actions Action string.
 * @return action mask.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>actions</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [seencomma=false]</InnerVar>
                <InnerVar>int [mask=ACTION_NONE]</InnerVar>
                <InnerVar>char[] [a=actions.toCharArray()]</InnerVar>
                <InnerVar>int [i=a.length - 1]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>implies</MethodName>
            <MethodComment>/** 
 * Determines if the specified permission is implied by this object. &lt;p&gt; This method checks that the symbolic name of the target is implied by the symbolic name of this object. The list of &lt;code&gt;BundlePermission&lt;/code&gt; actions must either match or allow for the list of the target object to imply the target &lt;code&gt;BundlePermission&lt;/code&gt; action. &lt;p&gt; The permission to provide a bundle implies the permission to require the named symbolic name. &lt;pre&gt; x.y.*,&amp;quot;provide&amp;quot; -&amp;gt; x.y.z,&amp;quot;provide&amp;quot; is true *,&amp;quot;require&amp;quot; -&amp;gt; x.y, &amp;quot;require&amp;quot;      is true *,&amp;quot;provide&amp;quot; -&amp;gt; x.y, &amp;quot;require&amp;quot;      is true x.y,&amp;quot;provide&amp;quot; -&amp;gt; x.y.z, &amp;quot;provide&amp;quot;  is false &lt;/pre&gt;
 * @param p The target permission to interrogate.
 * @return &lt;code&gt;true&lt;/code&gt; if the specified&lt;code&gt;BundlePermission&lt;/code&gt; action is implied by this object; &lt;code&gt;false&lt;/code&gt; otherwise.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>p</ParamName>
                    <ParamType>Permission</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getActions</MethodName>
            <MethodComment>/** 
 * Returns the canonical string representation of the &lt;code&gt;BundlePermission&lt;/code&gt; actions. &lt;p&gt; Always returns present &lt;code&gt;BundlePermission&lt;/code&gt; actions in the following order: &lt;code&gt;PROVIDE&lt;/code&gt;,&lt;code&gt;REQUIRE&lt;/code&gt;, &lt;code&gt;HOST&lt;/code&gt;,&lt;code&gt;FRAGMENT.
 * @return Canonical string representation of the &lt;code&gt;BundlePermission&lt;/code&gt; actions.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newPermissionCollection</MethodName>
            <MethodComment>/** 
 * Returns a new &lt;code&gt;PermissionCollection&lt;/code&gt; object suitable for storing &lt;code&gt;BundlePermission&lt;/code&gt; objects.
 * @return A new &lt;code&gt;PermissionCollection&lt;/code&gt; object.
 */
</MethodComment>
            <ReturnType>PermissionCollection</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>equals</MethodName>
            <MethodComment>/** 
 * Determines the equality of two &lt;code&gt;BundlePermission&lt;/code&gt; objects. This method checks that specified bundle has the same bundle symbolic name and &lt;code&gt;BundlePermission&lt;/code&gt; actions as this &lt;code&gt;BundlePermission&lt;/code&gt; object.
 * @param obj The object to test for equality with this&lt;code&gt;BundlePermission&lt;/code&gt; object.
 * @return &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;obj&lt;/code&gt; is a&lt;code&gt;BundlePermission&lt;/code&gt;, and has the same bundle symbolic name and actions as this &lt;code&gt;BundlePermission&lt;/code&gt; object; &lt;code&gt;false&lt;/code&gt; otherwise.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>obj</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BundlePermission [p=(BundlePermission)obj]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hashCode</MethodName>
            <MethodComment>/** 
 * Returns the hash code value for this object.
 * @return A hash code value for this object.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMask</MethodName>
            <MethodComment>/** 
 * Returns the current action mask. &lt;p&gt; Used by the BundlePermissionCollection class.
 * @return Current action mask.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeObject</MethodName>
            <MethodComment>/** 
 * WriteObject is called to save the state of the &lt;code&gt;BundlePermission&lt;/code&gt; object to a stream. The actions are serialized, and the superclass takes care of the name.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>java.io.ObjectOutputStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>s;defaultWriteObject;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readObject</MethodName>
            <MethodComment>/** 
 * readObject is called to restore the state of the BundlePermission from a stream.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>java.io.ObjectInputStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>s;defaultReadObject;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;init;[getMask(actions)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>ClassNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>BundlePermissionCollection</MethodName>
            <MethodComment>/** 
 * Create an empty BundlePermissions object.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>add</MethodName>
            <MethodComment>/** 
 * Adds a permission to the &lt;code&gt;BundlePermission&lt;/code&gt; objects. The key for the hash is the symbolic name.
 * @param permission The &lt;code&gt;BundlePermission&lt;/code&gt; object to add.
 * @throws IllegalArgumentException If the permission is not a&lt;code&gt;BundlePermission&lt;/code&gt; instance.
 * @throws SecurityException If this &lt;code&gt;BundlePermissionCollection&lt;/code&gt;object has been marked read-only.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>permission</ParamName>
                    <ParamType>Permission</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BundlePermission [bp=(BundlePermission)permission]</InnerVar>
                <InnerVar>String [name=bp.getName()]</InnerVar>
                <InnerVar>BundlePermission [existing=(BundlePermission)permissions.get(name)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>implies</MethodName>
            <MethodComment>/** 
 * Determines if the specified permissions implies the permissions expressed in &lt;code&gt;permission&lt;/code&gt;.
 * @param permission The Permission object to compare with this&lt;code&gt;BundlePermission&lt;/code&gt; object.
 * @return &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;permission&lt;/code&gt; is a propersubset of a permission in the set; &lt;code&gt;false&lt;/code&gt; otherwise.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>permission</ParamName>
                    <ParamType>Permission</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BundlePermission [bp=(BundlePermission)permission]</InnerVar>
                <InnerVar>BundlePermission [x]</InnerVar>
                <InnerVar>int [desired=bp.getMask()]</InnerVar>
                <InnerVar>int [effective=0]</InnerVar>
                <InnerVar>String [name=bp.getName()]</InnerVar>
                <InnerVar>int [last, offset]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>elements</MethodName>
            <MethodComment>/** 
 * Returns an enumeration of all &lt;code&gt;BundlePermission&lt;/code&gt; objects in the container.
 * @return Enumeration of all &lt;code&gt;BundlePermission&lt;/code&gt; objects.
 */
</MethodComment>
            <ReturnType>Permission</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>