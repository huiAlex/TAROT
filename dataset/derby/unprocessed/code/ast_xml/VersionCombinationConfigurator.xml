<Class>
    <Id>654</Id>
    <Package>org.apache.derbyTesting.functionTests.tests.compatibility</Package>
    <ClassName>VersionCombinationConfigurator</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>VersionCombinationConfigurator  /** 
 * Generates a set of client-server combinations to run the compatibility tests for. &lt;p&gt; Due to the requirement for running with a variety of Derby versions, the compatibility test suite is run as multiple processes. The test is controlled from the main process (the process in which the test/suite is started), and this process spawns additional processes for each server version and each client version. In some cases it also has to spawn additional processes to accomplish other tasks. &lt;p&gt; For development purposes the default MATS suite is sufficient for ongoing work. Eventually, and at least before cutting a new release, the full development suite should be run, since it will test the trunk against all previous releases. The other suites will test old releases against each other, and as such they are of less interest since the old releases don't change. Note however that these suites can be used to test releases on branches where this version of the compatibility test doesn't exist (just add the JARs to the release repository and configure includes or excludes to suite your needs). &lt;p&gt; &lt;strong&gt;NOTE 1&lt;/strong&gt;: The set of combinations computed by this class depends on the number of old releases available on the local computer. If there are no old releases available a warning will be emitted, but the test won't fail (it will test trunk vs trunk). &lt;p&gt; &lt;strong&gt;NOTE 2&lt;/strong&gt;: trunk is defined as a distribution, although it hasn't been released yet. The reason is simple: we always want to test trunk for incompatibilities against older versions.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>EMB_DRIVER</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>name</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>limitToTrunk</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>newestFixpackOnly</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>toInclude</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>toInclude</FieldName>
            <FieldType>DerbyVersion</FieldType>
        </Field>
        <Field>
            <FieldName>toExclude</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>toExclude</FieldName>
            <FieldType>DerbyVersion</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getInstanceDevMATS</MethodName>
            <MethodComment>/** 
 * Returns the default configuration intended to be run as part of &lt;tt&gt;suites.all&lt;/tt&gt;, which is a kind of minimal acceptance test (MATS). &lt;p&gt; The default configuration is defined to be all combinations that have trunk as either the server or the client.
 * @return A configurator generating the default set of tests.
 */
</MethodComment>
            <ReturnType>VersionCombinationConfigurator</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getInstanceDevFull</MethodName>
            <MethodComment>/** 
 * Returns a configuration that will test trunk against all other available releases.
 * @return A configurator generating the default set of tests.
 */
</MethodComment>
            <ReturnType>VersionCombinationConfigurator</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getInstanceOld</MethodName>
            <MethodComment>/** 
 * Returns a configuration where the newest releases within each major-minor version are tested against each other. &lt;p&gt; Given releases designated &lt;tt&gt;M.m.f.p&lt;/tt&gt; (i.e. 10.8.1.2), this configuration will include all major-minor releases with the highest &lt;ff&gt;f&lt;/ff&gt;.
 * @return A configurator generating a reasonably sized test set.
 */
</MethodComment>
            <ReturnType>VersionCombinationConfigurator</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getInstanceOldFull</MethodName>
            <MethodComment>/** 
 * Returns a configuration where all versions found are tested against each other.
 * @return  A configurator generating the full set of tests.
 */
</MethodComment>
            <ReturnType>VersionCombinationConfigurator</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>VersionCombinationConfigurator</MethodName>
            <MethodComment>/** 
 * Creates a version combination configurator.
 * @param name name of the configurator
 * @param limitToTrunk if true, only add combinations including trunk
 * @param newestFixpackOnly whether or not to only include the newestrelease within each pair of major-minor version.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>limitToTrunk</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>newestFixpackOnly</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addTests</MethodName>
            <MethodComment>/** 
 * Adds compatibility tests to the specified suite. &lt;p&gt; The following determines how many tests are added: &lt;ul&gt; &lt;li&gt;available distributions locally (release repository)&lt;/li&gt; &lt;li&gt;list of includes and/or excludes (by default empty)&lt;/li&gt; &lt;li&gt;the configurator's current settings&lt;/li&gt; &lt;/ul&gt;
 * @param suite the suite to add the tests to
 * @return Number of compatibility runs added.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>suite</ParamName>
                    <ParamType>BaseTestSuite</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [runsAdded=0]</InnerVar>
                <InnerVar>List&lt;DerbyDistribution&gt; [dists=filterVersions()]</InnerVar>
                <InnerVar>DerbyDistribution [newestDist=dists.get(0)]</InnerVar>
                <InnerVar>String [newestTestingCode=newestDist.getTestingClasspath()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setIncludes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>toInclude</ParamName>
                    <ParamType>DerbyVersion</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setExcludes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>toExclude</ParamName>
                    <ParamType>DerbyVersion</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>skipServerVersion</MethodName>
            <MethodComment>/** 
 * Check if a certain server version should be skipped due to bugs that prevent it from working in the current environment.
 * @param version the server version to check
 * @return {@code true} if the specified version should be skipped, or{@code false} otherwise
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>version</ParamName>
                    <ParamType>DerbyVersion</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>filterVersions</MethodName>
            <MethodComment>/** 
 * Filters Derby distributions available in the distribution repository.
 * @return A list of available and accepted Derby distributions.
 */
</MethodComment>
            <ReturnType>DerbyDistribution</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>DerbyDistribution[] [dists=TestConfiguration.getReleaseRepository().getDistributions()]</InnerVar>
                <InnerVar>List&lt;DerbyDistribution&gt; [qualifiedDists=new ArrayList&lt;DerbyDistribution&gt;()]</InnerVar>
                <InnerVar>DerbyDistribution [runningDist=getRunningDistribution()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;println;["--- " + qualifiedDists.size() + " distributions qualified"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRunningDistribution</MethodName>
            <MethodComment>/** 
 * Returns the running distribution, which is typically trunk.
 * @return Information about the running distribution.
 * @throws IllegalStateException if parsing the version string fails, ifrequired Derby classes are missing, or if trunk is run off the classes directory
 */
</MethodComment>
            <ReturnType>DerbyDistribution</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>File [libDir]</InnerVar>
                <InnerVar>File [testingDir=getJarDirectoryOf(getClass())]</InnerVar>
                <InnerVar>DerbyVersion [version=DerbyVersion.parseVersionString(sysinfo.getVersionString())]</InnerVar>
                <InnerVar>DerbyDistribution [dist=DerbyDistribution.newInstance(version,libDir,testingDir)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getJarDirectoryOf</MethodName>
            <MethodComment>/** 
 * Returns the directory for the JAR file containing the given class.
 * @return A directory path.
 * @throws IllegalStateException if the class isn't loaded from a JAR
 */
</MethodComment>
            <ReturnType>File</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>Class</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>File [jarPath=new File(getClassURI(clazz))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sortAndFilterVersions</MethodName>
            <MethodComment>/** 
 * Sorts and filters out distributions based on the configurator settings.
 * @param distributions list of distributions to filter
 * @return A filtered list of distributions.
 */
</MethodComment>
            <ReturnType>DerbyDistribution</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>distributions</ParamName>
                    <ParamType>DerbyDistribution</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DerbyDistribution [prev=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>Collections;sort;[distributions]</InnerMethodInvoke>
                <InnerMethodInvoke>Collections;reverse;[distributions]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getClassURI</MethodName>
            <MethodComment>/** 
 * Returns the URI of the source for the specified class.
 * @param cl class to find the source for
 * @return A {@code URI} pointing to the source, or {@code null} it cannotbe obtained.
 */
</MethodComment>
            <ReturnType>URI</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cl</ParamName>
                    <ParamType>Class</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>URI</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>CodeSource [cs=cl.getProtectionDomain().getCodeSource()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>println</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>msg</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>BaseTestCase;println;[msg]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>alarm</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>msg</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>BaseTestCase;alarm;[msg]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>