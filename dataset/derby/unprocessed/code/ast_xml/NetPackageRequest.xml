<Class>
    <Id>1893</Id>
    <Package>org.apache.derby.client.net</Package>
    <ClassName>NetPackageRequest</ClassName>
    <SuperClass>NetConnectionRequest</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>COLLECTIONNAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>NetPackageRequest</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>netAgent</ParamName>
                    <ParamType>NetAgent</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>bufferSize</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildCommonPKGNAMinfo</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>section</ParamName>
                    <ParamType>Section</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [collectionToFlow=COLLECTIONNAME]</InnerVar>
                <InnerVar>int [maxIdentifierLength=NetConfiguration.PKG_IDENTIFIER_MAX_LEN]</InnerVar>
                <InnerVar>CcsidManager [ccsidMgr=netAgent_.getCurrentCcsidManager()]</InnerVar>
                <InnerVar>byte[] [dbnameBytes=ccsidMgr.convertFromJavaString(netAgent_.netConnection_.databaseName_,netAgent_)]</InnerVar>
                <InnerVar>byte[] [collectionToFlowBytes=ccsidMgr.convertFromJavaString(collectionToFlow,netAgent_)]</InnerVar>
                <InnerVar>byte[] [pkgNameBytes=ccsidMgr.convertFromJavaString(section.getPackageName(),netAgent_)]</InnerVar>
                <InnerVar>boolean [scldtalenRequired=checkPKGNAMlengths(netAgent_.netConnection_.databaseName_,dbnameBytes.length,(netAgent_.netConnection_.databaseMetaData_.serverSupportLongRDBNAM()) ? NetConfiguration.RDBNAM_MAX_LEN : NetConfiguration.PKG_IDENTIFIER_MAX_LEN,NetConfiguration.PKG_IDENTIFIER_FIXED_LEN)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildSCLDTA</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>identifier</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>minimumLength</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [length=Math.max(minimumLength,identifier.length)]</InnerVar>
                <InnerVar>byte [padByte=netAgent_.getCurrentCcsidManager().space_]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;write2Bytes;[length]</InnerMethodInvoke>
                <InnerMethodInvoke>null;writeScalarPaddedBytes;[identifier, length, padByte]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildPKGNAMCSN</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>section</ParamName>
                    <ParamType>Section</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>storePKGNAMCBytes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>section</ParamName>
                    <ParamType>Section</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [startPos=popMarkForCachingPKGNAMCSN()]</InnerVar>
                <InnerVar>byte[] [b=new byte[buffer.position() - startPos]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>buffer;position;[startPos]</InnerMethodInvoke>
                <InnerMethodInvoke>buffer;get;[b]</InnerMethodInvoke>
                <InnerMethodInvoke>section;setPKGNAMCBytes;[b]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeStoredPKGNAMCBytes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>section</ParamName>
                    <ParamType>Section</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;writeBytes;[section.getPKGNAMCBytes()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>canCommandUseDefaultPKGNAMCSN</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkPKGNAMlengths</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>identifier</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>length</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>maxIdentifierLength</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lengthRequiringScldta</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildNOCMorNOCS</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>string</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildSQLSTTGRP</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>string</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;buildNOCMorNOCS;[string]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildSQLSTT</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>string</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;buildSQLSTTGRP;[string]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildSQLSTTcommandData</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sql</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [loc=buffer.position()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;createEncryptedCommandData;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;markLengthBytes;[CodePoint.SQLSTT]</InnerMethodInvoke>
                <InnerMethodInvoke>null;buildSQLSTT;[sql]</InnerMethodInvoke>
                <InnerMethodInvoke>null;updateLengthBytes;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildSQLATTRcommandData</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sql</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [loc=buffer.position()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;createEncryptedCommandData;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;markLengthBytes;[CodePoint.SQLATTR]</InnerMethodInvoke>
                <InnerMethodInvoke>null;buildSQLSTT;[sql]</InnerMethodInvoke>
                <InnerMethodInvoke>null;updateLengthBytes;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>encryptDataStream</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lengthLocation</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>byte[] [clearedBytes=new byte[buffer.position() - lengthLocation]]</InnerVar>
                <InnerVar>byte[] [encryptedBytes]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>buffer;position;[lengthLocation]</InnerMethodInvoke>
                <InnerMethodInvoke>buffer;get;[clearedBytes]</InnerMethodInvoke>
                <InnerMethodInvoke>buffer;position;[lengthLocation]</InnerMethodInvoke>
                <InnerMethodInvoke>null;writeBytes;[encryptedBytes]</InnerMethodInvoke>
                <InnerMethodInvoke>buffer;putShort;[lengthLocation - 6, (short)encryptedBytes.length]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>