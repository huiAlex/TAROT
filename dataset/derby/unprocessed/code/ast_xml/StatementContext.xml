<Class>
    <Id>1189</Id>
    <Package>org.apache.derby.iapi.sql.conn</Package>
    <ClassName>StatementContext</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Context</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>StatementContext  /** 
 * StatementContext keeps the context for a statement.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>setInUse</MethodName>
            <MethodComment>/** 
 * Mark this context as being in use.
 * @param inTrigger true if the parent started in the context of a trigger
 * @param isAtomic true if the statement must be executedatomically
 * @param isForReadOnly true if the statement is for producing non-updatableresultset
 * @param stmtText the text of the statement.  Needed for any languagestatement (currently, for any statement that can cause a trigger to fire).  Please set this unless you are some funky jdbc setXXX method or something.
 * @param pvs	parameter value set, if it has one
 * @param timeoutMillis timeout value for the statement, in milliseconds.Zero means no timeout.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>inTrigger</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isAtomic</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isForReadOnly</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stmtText</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pvs</ParamName>
                    <ParamType>ParameterValueSet</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>timeoutMillis</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clearInUse</MethodName>
            <MethodComment>/** 
 * Mark this context as not in use.  This is important because we always leave the top statement context on the stack, and we don't want to clean it up if a statement level exception happens while the context is not in use.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setSavePoint</MethodName>
            <MethodComment>/** 
 * Set a save point for the current statement. NOTE: This needs to be off of the StatementContext so that it gets cleared on a statement error.
 * @exception StandardException Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>resetSavePoint</MethodName>
            <MethodComment>/** 
 * If this statement context has a savepoint, then it is reset to the current point.  Otherwise, it is a noop.
 * @exception StandardException Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clearSavePoint</MethodName>
            <MethodComment>/** 
 * Clear the save point for the current statement.
 * @exception StandardException Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setTopResultSet</MethodName>
            <MethodComment>/** 
 * Set the top ResultSet in the ResultSet tree for close down on an error.
 * @param topResultSet			The top ResultSet in the ResultSet tree
 * @param subqueryTrackingArray	(Sparse) of tops of subquery ResultSet trees
 * @exception StandardException Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>topResultSet</ParamName>
                    <ParamType>ResultSet</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>subqueryTrackingArray</ParamName>
                    <ParamType>NoPutResultSet[]</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setSubqueryResultSet</MethodName>
            <MethodComment>/** 
 * Set the appropriate entry in the subquery tracking array for the specified subquery. Useful for closing down open subqueries on an exception.
 * @param subqueryNumber	The subquery # for this subquery
 * @param subqueryResultSet	The NoPutResultSet at the top of the subquery
 * @param numSubqueries		The total # of subqueries in the entire query
 * @exception StandardException Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>subqueryNumber</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>subqueryResultSet</ParamName>
                    <ParamType>NoPutResultSet</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>numSubqueries</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSubqueryTrackingArray</MethodName>
            <MethodComment>/** 
 * Get the subquery tracking array for this query. (Useful for runtime statistics.)
 * @return NoPutResultSet[]	The	(sparse) array of tops of subquery ResultSet trees
 * @exception StandardException Thrown on error
 */
</MethodComment>
            <ReturnType>NoPutResultSet[]</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addDependency</MethodName>
            <MethodComment>/** 
 * Track a Dependency within this StatementContext. (We need to clear any dependencies added within this context on an error.
 * @param dy	The dependency to track.
 * @exception StandardException Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dy</ParamName>
                    <ParamType>Dependency</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onStack</MethodName>
            <MethodComment>/** 
 * Reports whether this StatementContext is on the context stack.
 * @return	true if this StatementContext is on the context stack. false otherwise.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>inTrigger</MethodName>
            <MethodComment>/** 
 * Returns whether we started from within the context of a trigger or not.
 * @return	true if we are in a trigger context
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isAtomic</MethodName>
            <MethodComment>/** 
 * Indicates whether the statement needs to be executed atomically or not, i.e., whether a commit/rollback is permitted by a connection nested in this statement.
 * @return true if needs to be atomic
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>inUse</MethodName>
            <MethodComment>/** 
 * Is this statement context in use or not.
 * @return true if in use
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isForReadOnly</MethodName>
            <MethodComment>/** 
 * Is this statement for a read only, non-updatable ResultSet
 * @return true if the statement is for creating a read only, non-updatable ResultSet
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isCancelled</MethodName>
            <MethodComment>/** 
 * Checks if the statement which has allocated this statement context should cancel its execution.
 * @return true if the statement execution should be cancelled.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cancel</MethodName>
            <MethodComment>/** 
 * Indicate that the statement which has allocated this statement context should cancel its execution. Usually called as a consequence of Statement.cancel() or a query timeout set with Statement.setQueryTimeout().
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStatementText</MethodName>
            <MethodComment>/** 
 * Return the text of the current statement. Note that this may be null.  It is currently not set up correctly for ResultSets that aren't single row result sets (e.g SELECT) and setXXXX/getXXXX jdbc methods.
 * @return the statement text
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setSQLAllowed</MethodName>
            <MethodComment>/** 
 * Set the level of SQL allowed in this and subsequent nested statements due to a routine call. Value must be one of RoutineAliasInfo.{MODIFIES_SQL_DATA, READS_SQL_DATA, CONTAINS_SQL, NO_SQL}
 * @param force set to true to override more restrictive setting. Used toreset the permissions after a function call.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>allow</ParamName>
                    <ParamType>short</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>force</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSQLAllowed</MethodName>
            <MethodComment>/** 
 * Get the setting of the SQL allowed state.
 */
</MethodComment>
            <ReturnType>short</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setSystemCode</MethodName>
            <MethodComment>/** 
 * Set to indicate statement is system code. For example a system procedure, view, function etc.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSystemCode</MethodName>
            <MethodComment>/** 
 * Return true if this statement is system code.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setParentRollback</MethodName>
            <MethodComment>/** 
 * Indicate that, in the event of a statement-level exception, this context is NOT the last one that needs to be rolled back--rather, it is nested within some other statement context, and that other context needs to be rolled back, too.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setActivation</MethodName>
            <MethodComment>/** 
 * Mark this statement context as associated with this activation.
 * @param a activation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>a</ParamName>
                    <ParamType>Activation</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getActivation</MethodName>
            <MethodComment>/** 
 * Get activation associated with this statement context, if any. Used to link up stack of activations of calls in nested connections, see GenericPreparedStatement#getActivation.
 */
</MethodComment>
            <ReturnType>Activation</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSQLSessionContext</MethodName>
            <MethodComment>/** 
 * Get the current SQL session context.
 * @return the current SQL session context
 */
</MethodComment>
            <ReturnType>SQLSessionContext</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setSQLSessionContext</MethodName>
            <MethodComment>/** 
 * Set the current SQL session context
 * @param ctx the SQL session context
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>SQLSessionContext</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStatementWasInvalidated</MethodName>
            <MethodComment>/** 
 * Tells if this statement has been invalidated.
 * @return {@code true} if the statement was invalidated.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>