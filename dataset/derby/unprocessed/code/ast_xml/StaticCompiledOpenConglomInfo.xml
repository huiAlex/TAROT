<Class>
    <Id>261</Id>
    <Package>org.apache.derby.iapi.store.access</Package>
    <ClassName>StaticCompiledOpenConglomInfo</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Storable</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>StaticCompiledOpenConglomInfo  /** 
 * Information that can be "compiled" once and then used over and over again at execution time.  This information is read only by both the caller and the user, thus can be shared by multiple threads/transactions once created. This information is obtained from the getStaticCompiledConglomInfo(conglomid) method call.  It can then be used in openConglomerate() and openScan() calls for increased performance.  The information is only valid until the next ddl operation is performed on the conglomerate.  It is up to the caller to provide an invalidation methodology. The static info would be valid until any ddl was executed on the conglomid, and would be up to the caller to throw away when that happened.  This ties in with what language already does for other invalidation of static info.  The type of info in this would be containerid and array of format id's from which templates can be created.  The info in this object is read only and can be shared among as many threads as necessary.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getConglom</MethodName>
            <MethodComment>/** 
 * routine for internal use of store only.
 */
</MethodComment>
            <ReturnType>DataValueDescriptor</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>