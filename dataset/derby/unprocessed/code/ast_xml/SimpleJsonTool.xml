<Class>
    <Id>1162</Id>
    <Package>org.apache.derby.optional.json</Package>
    <ClassName>SimpleJsonTool</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>OptionalTool</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>SimpleJsonTool  /** 
 * &lt;p&gt; OptionalTool which adds support types and functions for using the JSON.simple toolkit at https://code.google.com/p/json-simple/. Creates the following schema objects in the current schema: &lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;b&gt;JSONArray&lt;/b&gt; - A UDT bound to the JSON.simple JSONArray class.&lt;/li&gt; &lt;li&gt;&lt;b&gt;toJSON&lt;/b&gt; - A function for packaging up query results as a JSONArray. Each cell in the array is a row. Each row has key/value pairs for all columns returned by the query.&lt;/li&gt; &lt;li&gt;&lt;b&gt;readArrayFromString&lt;/b&gt; - A function which turns a JSON document string into a JSONArray.&lt;/li&gt; &lt;li&gt;&lt;b&gt;readArrayFromFile&lt;/b&gt; - A function which reads a file containing a JSON document and turns it into a JSONArray.&lt;/li&gt; &lt;li&gt;&lt;b&gt;readArrayFromURL&lt;/b&gt; - A function which reads a JSON document from an URL address and turns it into a JSONArray.&lt;/li&gt; &lt;/ul&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>_functionDescriptors</FieldName>
            <FieldType>FunctionDescriptor[]</FieldType>
        </Field>
        <Field>
            <FieldName>functionName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>creationDDL</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>FunctionDescriptor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>functionName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>creationDDL</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>SimpleJsonTool</MethodName>
            <MethodComment>/** 
 * 0-arg constructor required by the OptionalTool contract 
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>loadTool</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Binds a UDT to JSONArray and creates a function to turn a query result into a JSONArray. There are no parameters to this method. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>configurationParameters</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [derbyConn=getDerbyConnection()]</InnerVar>
                <InnerVar>boolean [sqlAuthorizationEnabled=ToolUtilities.sqlAuthorizationEnabled(derbyConn)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;createUDT;[derbyConn]</InnerMethodInvoke>
                <InnerMethodInvoke>null;createFunctions;[derbyConn]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>grantPermissions</MethodName>
            <MethodComment>/** 
 * Grant permissions to use the newly loaded UDT and FUNCTIONs.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conn</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;executeDDL;[conn, "grant usage on type JSONArray to public"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>unloadTool</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Removes the function and UDT created by loadTool(). &lt;/p&gt; &lt;/ul&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>configurationParameters</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [derbyConn=getDerbyConnection()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;dropFunctions;[derbyConn]</InnerMethodInvoke>
                <InnerMethodInvoke>null;dropUDT;[derbyConn]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toJSON</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Compile a query (with optional ? parameters) and pack the results into a JSONArray. This is the entry point which the simpleJson tool binds to the function name "toJSON". &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>JSONArray</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>queryString</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>queryArgs</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PreparedStatement [ps=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createUDT</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>derbyConn</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [createString="create type JSONArray external name 'org.json.simple.JSONArray' language java"]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;executeDDL;[derbyConn, createString]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>dropUDT</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>derbyConn</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [createString="drop type JSONArray restrict"]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;executeDDL;[derbyConn, createString]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createFunctions</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>derbyConn</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>dropFunctions</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>derbyConn</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>executeDDL</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conn</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PreparedStatement [ddl=prepareStatement(conn,text)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ddl;execute;[]</InnerMethodInvoke>
                <InnerMethodInvoke>ddl;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>prepareStatement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PreparedStatement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conn</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>wrap</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>SQLException</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>errorMessage</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [sqlState=org.apache.derby.shared.common.reference.SQLState.JAVA_EXCEPTION.substring(0,5)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDerbyConnection</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Connection</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>