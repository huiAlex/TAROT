<Class>
    <Id>115</Id>
    <Package>org.osgi.framework</Package>
    <ClassName>BundleException</ClassName>
    <SuperClass>Exception</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>BundleException  /** 
 * A Framework exception used to indicate that a bundle lifecycle problem occurred. &lt;p&gt; &lt;code&gt;BundleException&lt;/code&gt; object is created by the Framework to denote an exception condition in the lifecycle of a bundle. &lt;code&gt;BundleException&lt;/code&gt;s should not be created by bundle developers. &lt;p&gt; This exception is updated to conform to the general purpose exception chaining mechanism.
 * @version $Revision: 1.15 $
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>serialVersionUID</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>cause</FieldName>
            <FieldType>Throwable</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>BundleException</MethodName>
            <MethodComment>/** 
 * Creates a &lt;code&gt;BundleException&lt;/code&gt; that wraps another exception.
 * @param msg The associated message.
 * @param cause The cause of this exception.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>msg</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cause</ParamName>
                    <ParamType>Throwable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>BundleException</MethodName>
            <MethodComment>/** 
 * Creates a &lt;code&gt;BundleException&lt;/code&gt; object with the specified message.
 * @param msg The message.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>msg</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNestedException</MethodName>
            <MethodComment>/** 
 * Returns any nested exceptions included in this exception. &lt;p&gt; This method predates the general purpose exception chaining mechanism. The  {@link #getCause()} method is now the preferred means of obtainingthis information.
 * @return The nested exception; &lt;code&gt;null&lt;/code&gt; if there is no nestedexception.
 */
</MethodComment>
            <ReturnType>Throwable</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCause</MethodName>
            <MethodComment>/** 
 * Returns the cause of this exception or &lt;code&gt;null&lt;/code&gt; if no cause was specified when this exception was created.
 * @return The cause of this exception or &lt;code&gt;null&lt;/code&gt; if no causewas specified.
 * @since 1.3
 */
</MethodComment>
            <ReturnType>Throwable</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initCause</MethodName>
            <MethodComment>/** 
 * The cause of this exception can only be set when constructed.
 * @param cause Cause of the exception.
 * @return This object.
 * @throws java.lang.IllegalStateException This method will always throw an&lt;code&gt;IllegalStateException&lt;/code&gt; since the cause of this exception can only be set when constructed.
 * @since 1.3
 */
</MethodComment>
            <ReturnType>Throwable</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cause</ParamName>
                    <ParamType>Throwable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>