<Class>
    <Id>1043</Id>
    <Package>org.apache.derby.impl.drda</Package>
    <ClassName>LayerBStreamedEXTDTAReaderInputStream</ClassName>
    <SuperClass>EXTDTAReaderInputStream</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>LayerBStreamedEXTDTAReaderInputStream  /** 
 * Implementation of InputStream which get EXTDTA from the DDMReader. This class can be used to stream LOBs from Network client to the Network server. Furthermore, this class is used when layer B streaming is carried out and expects corresponding DDMReader start layer B streaming  when the object of this class is instantiated.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>reader</FieldName>
            <FieldType>DDMReader</FieldType>
        </Field>
        <Field>
            <FieldName>currentBuffer</FieldName>
            <FieldType>ByteArrayInputStream</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>LayerBStreamedEXTDTAReaderInputStream</MethodName>
            <MethodComment>/** 
 * Constructor
 * @param reader The reader to get data from
 * @param readStatusByte whether or not to read the trailing Derby-specificEXTDTA stream status byte
 * @exception DRDAProtocolException if thrown while initializing current buffer.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>reader</ParamName>
                    <ParamType>DDMReader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>readStatusByte</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DRDAProtocolException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>read</MethodName>
            <MethodComment>/** 
 * Reads the next byte of data from the input stream. &lt;p&gt; This subclass of InputStream implements this method by reading the next byte from the current buffer. If there is more data, it will be requested a new buffer from the DDMReader.
 * @return     the next byte of data, or &lt;code&gt;-1&lt;/code&gt; if the end of thestream is reached.
 * @exception IOException  if an I/O error occurs.
 * @see java.io.InputStream#read()
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>byte[] [b=new byte[1]]</InnerVar>
                <InnerVar>int [read=read(b)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>read</MethodName>
            <MethodComment>/** 
 * Reads up to &lt;code&gt;len&lt;/code&gt; bytes of data from the input stream into an array of bytes.  An attempt is made to read as many as &lt;code&gt;len&lt;/code&gt; bytes, but a smaller number may be read, possibly zero. The number of bytes actually read is returned as an integer. This subclass implements this method by calling this method on the  current buffer, which is an instance of ByteArrayInputStream. If the current buffer does not have any data, it will be requested a new buffer from the DDMReader.
 * @param b     the buffer into which the data is read.
 * @param off   the start offset in array &lt;code&gt;b&lt;/code&gt;at which the data is written.
 * @param len   the maximum number of bytes to read.
 * @return     the total number of bytes read into the buffer, or&lt;code&gt;-1&lt;/code&gt; if there is no more data because the end of the stream has been reached.
 * @exception IOException  if an I/O error occurs.
 * @exception NullPointerException  if &lt;code&gt;b&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.
 * @see java.io.InputStream#read(byte[],int,int)
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>b</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>off</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>len</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [val]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>available</MethodName>
            <MethodComment>/** 
 * Returns the number of bytes that can be read (or skipped over) from this input stream without blocking by the next caller of a method for this input stream.   &lt;p&gt; This subclass implements this method by calling available on  the current buffer, which is a ByteInputStreamReader.
 * @return     the number of bytes that can be read from this input streamwithout blocking.     
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [avail=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onClientSideStreamingError</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>