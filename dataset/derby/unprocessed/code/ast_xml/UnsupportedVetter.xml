<Class>
    <Id>1654</Id>
    <Package>org.apache.derbyTesting.functionTests.tests.jdbc4</Package>
    <ClassName>UnsupportedVetter</ClassName>
    <SuperClass>BaseJDBCTestCase</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>UnsupportedVetter  /** 
 * JUnit test which checks that only expected methods throw SQLFeatureNotSupporteException. As currently compiled, this class does not object to a handful of mandatory LOB-supporting methods which Derby does not implement. You can expose these methods by setting the STRICT_ENFORCEMENT constant to true.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>SQL_PACKAGE_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>STRICT_ENFORCEMENT</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>rawExcludables</FieldName>
            <FieldType>Exclusions[]</FieldType>
        </Field>
        <Field>
            <FieldName>excludableMap</FieldName>
            <FieldType>Hashtable</FieldType>
        </Field>
        <Field>
            <FieldName>excludableMap</FieldName>
            <FieldType>Class</FieldType>
        </Field>
        <Field>
            <FieldName>_methodName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>_argTypes</FieldName>
            <FieldType>Class[]</FieldType>
        </Field>
        <Field>
            <FieldName>_requiredAtThisLevel</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>_methodName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>_argTypes</FieldName>
            <FieldType>Class[]</FieldType>
        </Field>
        <Field>
            <FieldName>_class</FieldName>
            <FieldType>Class</FieldType>
        </Field>
        <Field>
            <FieldName>_excludedMethods</FieldName>
            <FieldType>MD[]</FieldType>
        </Field>
        <Field>
            <FieldName>_method</FieldName>
            <FieldType>Method</FieldType>
        </Field>
        <Field>
            <FieldName>savedVerbosity</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>makeMD</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>MD</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>methodName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>argClassNames</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>requiredAtThisLevel</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [count=argClassNames.length]</InnerVar>
                <InnerVar>Class[] [argTypes=new Class[count]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>UnsupportedVetter</MethodName>
            <MethodComment>/** 
 * Creates a new instance.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testSupportedMethods</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Find all methods in this framework which raise SQLFeatureNotSupportedException. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>HashSet&lt;String&gt; [vanishedMethodList=new HashSet&lt;String&gt;()]</InnerVar>
                <InnerVar>HashSet&lt;String&gt; [unsupportedList=new HashSet&lt;String&gt;()]</InnerVar>
                <InnerVar>HashSet&lt;String&gt; [notUnderstoodList=new HashSet&lt;String&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>getTestConfiguration();setVerbosity;[true]</InnerMethodInvoke>
                <InnerMethodInvoke>null;initializeExcludableMap;[vanishedMethodList]</InnerMethodInvoke>
                <InnerMethodInvoke>null;vetDataSource;[unsupportedList, notUnderstoodList]</InnerMethodInvoke>
                <InnerMethodInvoke>null;vetConnectionPooledDataSource;[unsupportedList, notUnderstoodList]</InnerMethodInvoke>
                <InnerMethodInvoke>null;vetXADataSource;[unsupportedList, notUnderstoodList]</InnerMethodInvoke>
                <InnerMethodInvoke>null;printVanishedMethodList;[vanishedMethodList]</InnerMethodInvoke>
                <InnerMethodInvoke>null;printUnsupportedList;[unsupportedList]</InnerMethodInvoke>
                <InnerMethodInvoke>null;printNotUnderstoodList;[notUnderstoodList]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["vanishedMethodList", 0, vanishedMethodList.size()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["unsupportedList", 0, unsupportedList.size()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["notUnderstoodList", 0, notUnderstoodList.size()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>vetDataSource</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>unsupportedList</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>notUnderstoodList</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DataSource [ds=JDBCDataSource.getDataSource()]</InnerVar>
                <InnerVar>Connection [conn=ds.getConnection()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;vetObject;[ds, unsupportedList, notUnderstoodList]</InnerMethodInvoke>
                <InnerMethodInvoke>null;connectionWorkhorse;[conn, unsupportedList, notUnderstoodList]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>vetConnectionPooledDataSource</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>unsupportedList</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>notUnderstoodList</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ConnectionPoolDataSource [ds=J2EEDataSource.getConnectionPoolDataSource()]</InnerVar>
                <InnerVar>PooledConnection [pc=ds.getPooledConnection(getTestConfiguration().getUserName(),getTestConfiguration().getUserPassword())]</InnerVar>
                <InnerVar>Connection [conn=pc.getConnection()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;vetObject;[ds, unsupportedList, notUnderstoodList]</InnerMethodInvoke>
                <InnerMethodInvoke>null;vetObject;[pc, unsupportedList, notUnderstoodList]</InnerMethodInvoke>
                <InnerMethodInvoke>null;connectionWorkhorse;[conn, unsupportedList, notUnderstoodList]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>vetXADataSource</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>unsupportedList</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>notUnderstoodList</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>XADataSource [ds=J2EEDataSource.getXADataSource()]</InnerVar>
                <InnerVar>XAConnection [xaconn=ds.getXAConnection(getTestConfiguration().getUserName(),getTestConfiguration().getUserPassword())]</InnerVar>
                <InnerVar>Connection [conn=xaconn.getConnection()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;vetObject;[ds, unsupportedList, notUnderstoodList]</InnerMethodInvoke>
                <InnerMethodInvoke>null;vetObject;[xaconn, unsupportedList, notUnderstoodList]</InnerMethodInvoke>
                <InnerMethodInvoke>null;connectionWorkhorse;[conn, unsupportedList, notUnderstoodList]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>connectionWorkhorse</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conn</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>unsupportedList</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>notUnderstoodList</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DatabaseMetaData [dbmd=conn.getMetaData()]</InnerVar>
                <InnerVar>PreparedStatement [ps=conn.prepareStatement("select * from sys.systables where tablename = ?")]</InnerVar>
                <InnerVar>ParameterMetaData [parameterMetaData=ps.getParameterMetaData()]</InnerVar>
                <InnerVar>ResultSet [rs=ps.executeQuery()]</InnerVar>
                <InnerVar>ResultSetMetaData [rsmd=rs.getMetaData()]</InnerVar>
                <InnerVar>Statement [stmt=conn.createStatement()]</InnerVar>
                <InnerVar>CallableStatement [cs=conn.prepareCall("CALL SYSCS_UTIL.SYSCS_SET_RUNTIMESTATISTICS(0)")]</InnerVar>
                <InnerVar>ParameterMetaData [csmd=cs.getParameterMetaData()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;vetSavepoint;[conn, unsupportedList, notUnderstoodList]</InnerMethodInvoke>
                <InnerMethodInvoke>null;vetLargeObjects;[conn, unsupportedList, notUnderstoodList]</InnerMethodInvoke>
                <InnerMethodInvoke>ps;setString;[1, "foo"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;vetObject;[dbmd, unsupportedList, notUnderstoodList]</InnerMethodInvoke>
                <InnerMethodInvoke>null;vetObject;[stmt, unsupportedList, notUnderstoodList]</InnerMethodInvoke>
                <InnerMethodInvoke>null;vetObject;[csmd, unsupportedList, notUnderstoodList]</InnerMethodInvoke>
                <InnerMethodInvoke>null;vetObject;[cs, unsupportedList, notUnderstoodList]</InnerMethodInvoke>
                <InnerMethodInvoke>null;vetObject;[rsmd, unsupportedList, notUnderstoodList]</InnerMethodInvoke>
                <InnerMethodInvoke>null;vetObject;[rs, unsupportedList, notUnderstoodList]</InnerMethodInvoke>
                <InnerMethodInvoke>null;vetObject;[parameterMetaData, unsupportedList, notUnderstoodList]</InnerMethodInvoke>
                <InnerMethodInvoke>null;vetObject;[ps, unsupportedList, notUnderstoodList]</InnerMethodInvoke>
                <InnerMethodInvoke>null;vetObject;[conn, unsupportedList, notUnderstoodList]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>vetSavepoint</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conn</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>unsupportedList</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>notUnderstoodList</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Savepoint [sp=conn.setSavepoint()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>conn;setAutoCommit;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>null;vetObject;[sp, unsupportedList, notUnderstoodList]</InnerMethodInvoke>
                <InnerMethodInvoke>conn;releaseSavepoint;[sp]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>vetLargeObjects</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conn</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>unsupportedList</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>notUnderstoodList</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Statement [stmt=conn.createStatement()]</InnerVar>
                <InnerVar>ResultSet [rs=stmt.executeQuery("SELECT id, b, c FROM t")]</InnerVar>
                <InnerVar>Blob [blob=rs.getBlob(2)]</InnerVar>
                <InnerVar>Clob [clob=rs.getClob(3)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>stmt;execute;["CREATE TABLE t (id INT PRIMARY KEY, " + "b BLOB(10), c CLOB(10))"]</InnerMethodInvoke>
                <InnerMethodInvoke>stmt;execute;["INSERT INTO t (id, b, c) VALUES (1, " + "CAST (" + TestUtil.stringToHexLiteral("101010001101") + "AS BLOB(10)), CAST ('hello' AS CLOB(10)))"]</InnerMethodInvoke>
                <InnerMethodInvoke>rs;next;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;vetObject;[blob, unsupportedList, notUnderstoodList]</InnerMethodInvoke>
                <InnerMethodInvoke>null;vetObject;[clob, unsupportedList, notUnderstoodList]</InnerMethodInvoke>
                <InnerMethodInvoke>stmt;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>conn;rollback;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initializeExcludableMap</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>vanishedMethodList</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [count=rawExcludables.length]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>vetObject</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>candidate</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>unsupportedList</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>notUnderstoodList</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Class [myClass=candidate.getClass()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;vetInterfaces;[candidate, myClass, unsupportedList, notUnderstoodList]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>vetInterfaces</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>candidate</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>myClass</ParamName>
                    <ParamType>Class</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>unsupportedList</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>notUnderstoodList</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Class [superClass=myClass.getSuperclass()]</InnerVar>
                <InnerVar>Class&lt;?&gt;[] [interfaces=myClass.getInterfaces()]</InnerVar>
                <InnerVar>int [interfaceCount=interfaces.length]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>vetInterfaceMethods</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>candidate</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>iface</ParamName>
                    <ParamType>Class</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>unsupportedList</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>notUnderstoodList</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Method[] [methods=sortMethods(iface)]</InnerVar>
                <InnerVar>int [methodCount=methods.length]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sortMethods</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Method[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>iface</ParamName>
                    <ParamType>Class</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Method[] [raw=iface.getMethods()]</InnerVar>
                <InnerVar>int [count=raw.length]</InnerVar>
                <InnerVar>Method[] [cooked=new Method[count]]</InnerVar>
                <InnerVar>MethodSortable[] [sortables=new MethodSortable[count]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>Arrays;sort;[sortables]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>vetMethod</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>candidate</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>iface</ParamName>
                    <ParamType>Class</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>method</ParamName>
                    <ParamType>Method</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>unsupportedList</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>notUnderstoodList</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>recordUnexpectedError</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>candidate</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>iface</ParamName>
                    <ParamType>Class</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>method</ParamName>
                    <ParamType>Method</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>notUnderstoodList</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cause</ParamName>
                    <ParamType>Throwable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>notUnderstoodList;add;[candidate.getClass().getName() + " " + method+ " raises "+ cause]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isExcludable</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>method</ParamName>
                    <ParamType>Method</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Class [iface=method.getDeclaringClass()]</InnerVar>
                <InnerVar>HashSet&lt;Method&gt; [excludableMethods=excludableMap.get(iface)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNullArguments</MethodName>
            <MethodComment>/** 
 * Takes an array of classes and returns an array of objects with null values compatible with the classes. Helper method for converting a parameter list to an argument list.
 * @param params a &lt;code&gt;Class[]&lt;/code&gt; value
 * @return an &lt;code&gt;Object[]&lt;/code&gt; value
 */
</MethodComment>
            <ReturnType>Object[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>params</ParamName>
                    <ParamType>Class[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Object[] [args=new Object[params.length]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNullValueForType</MethodName>
            <MethodComment>/** 
 * Returns a null value compatible with the class. For instance, return &lt;code&gt;Boolean.FALSE&lt;/code&gt; for primitive booleans, 0 for primitive integers and &lt;code&gt;null&lt;/code&gt; for non-primitive types.
 * @param type a &lt;code&gt;Class&lt;/code&gt; value
 * @return a null value
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>Class</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;fail;["Don't know how to handle type " + type]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>printUnsupportedList</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>unsupportedList</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [count=unsupportedList.size()]</InnerVar>
                <InnerVar>String[] [result=new String[count]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;println;["--------------- UNSUPPORTED METHODS ------------------"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;println;["--"]</InnerMethodInvoke>
                <InnerMethodInvoke>unsupportedList;toArray;[result]</InnerMethodInvoke>
                <InnerMethodInvoke>Arrays;sort;[result]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>printVanishedMethodList</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>vanishedMethodList</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [count=vanishedMethodList.size()]</InnerVar>
                <InnerVar>String[] [result=new String[count]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;println;["--------------- VANISHED METHODS ------------------"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;println;["--"]</InnerMethodInvoke>
                <InnerMethodInvoke>vanishedMethodList;toArray;[result]</InnerMethodInvoke>
                <InnerMethodInvoke>Arrays;sort;[result]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>printNotUnderstoodList</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>notUnderstoodList</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [count=notUnderstoodList.size()]</InnerVar>
                <InnerVar>String[] [result=new String[count]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;println;["\n\n"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;println;["--------------- NOT UNDERSTOOD METHODS ------------------"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;println;["--"]</InnerMethodInvoke>
                <InnerMethodInvoke>notUnderstoodList;toArray;[result]</InnerMethodInvoke>
                <InnerMethodInvoke>Arrays;sort;[result]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>MD</MethodName>
            <MethodComment>/** 
 * Construct from methodName and argument types. 
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>methodName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>argTypes</ParamName>
                    <ParamType>Class[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>MD</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>methodName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>argTypes</ParamName>
                    <ParamType>Class[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>requiredAtThisLevel</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMethodName</MethodName>
            <MethodComment>/** 
 * Get the name of this method. 
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getArgTypes</MethodName>
            <MethodComment>/** 
 * Get the types of the method's arguments 
 */
</MethodComment>
            <ReturnType>Class[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isOptional</MethodName>
            <MethodComment>/** 
 * Return whether this method is optional 
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>requiredAtThisLevel</MethodName>
            <MethodComment>/** 
 * Return whether this method is required at the current JDBC level 
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>StringBuffer [buffer=new StringBuffer()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>buffer;append;[_methodName]</InnerMethodInvoke>
                <InnerMethodInvoke>buffer;append;["( "]</InnerMethodInvoke>
                <InnerMethodInvoke>buffer;append;[" )"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>FD</MethodName>
            <MethodComment>/** 
 * Construct from methodName and argument types. 
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>methodName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>argTypes</ParamName>
                    <ParamType>Class[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isOptional</MethodName>
            <MethodComment>/** 
 * Return whether this method is optional 
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>Exclusions</MethodName>
            <MethodComment>/** 
 * Construct from the interface and descriptors for the methods which are allowed to raise SQLFeatureNotSupportedException 
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>theInterface</ParamName>
                    <ParamType>Class</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>excludedMethods</ParamName>
                    <ParamType>MD[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getInterface</MethodName>
            <MethodComment>/** 
 * Get the interface. 
 */
</MethodComment>
            <ReturnType>Class</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getExcludedMethods</MethodName>
            <MethodComment>/** 
 * Get descriptors for the methods which may raise SQLFeatureNotSupportedException. 
 */
</MethodComment>
            <ReturnType>MD[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>MethodSortable</MethodName>
            <MethodComment>/** 
 * Conjure out of a Method 
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>method</ParamName>
                    <ParamType>Method</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMethod</MethodName>
            <MethodComment>/** 
 * Get the wrapped Method 
 */
</MethodComment>
            <ReturnType>Method</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compareTo</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>other</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodSortable [that=(MethodSortable)other]</InnerVar>
                <InnerVar>boolean [thisIsClose=this.isCloseMethod()]</InnerVar>
                <InnerVar>boolean [thatIsClose=that.isCloseMethod()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isCloseMethod</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setUp</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>tearDown</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>getTestConfiguration();setVerbosity;[savedVerbosity]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>suite</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Test</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>