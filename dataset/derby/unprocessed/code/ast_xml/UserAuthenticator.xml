<Class>
    <Id>1413</Id>
    <Package>org.apache.derby.authentication</Package>
    <ClassName>UserAuthenticator</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>UserAuthenticator  /** 
 * The UserAuthenticator interface provides operations to authenticate a user's credentials in order to successfully connect to a database. Any user authentication schemes could be implemented using this interface and registered at start-up time. &lt;p&gt; If an application requires its own authentication scheme, then it can implement this interface and register as the authentication scheme that Derby should call upon connection requests to the system. See the dcoumentation for the property &lt;I&gt;derby.authentication.provider&lt;/I&gt; &lt;p&gt; A typical example would be to implement user authentication using LDAP, Sun NIS+, or even Windows User Domain, using this interface. &lt;p&gt; &lt;i&gt;Note&lt;/i&gt;: Additional connection attributes can be specified on the  database connection URL and/or Properties object on jdbc connection. Values for these attributes can be retrieved at runtime by the (specialized) authentication scheme to further help user authentication, if one needs additional info other than user, password, and database name.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>authenticateUser</MethodName>
            <MethodComment>/** 
 * Authenticate a user's credentials. &lt;BR&gt; E.g. if connection url is  &lt;code&gt;jdbc:derby:testdb;user=Fred;password=ScT7dmM2&lt;/code&gt; then the userName will be Fred and within the Derby user authorization  system, Fred becomes a case-insensitive authorization identifier and  is known as FRED &lt;BR&gt; if connection url is  &lt;code&gt;jdbc:derby:testdb;user="Fred";password=ScT7dmM2&lt;/code&gt; then the userName will be "Fred" and within the Derby user authorization system, Fred becomes a case-sensitive authorization identifier and is known as Fred &lt;BR&gt;
 * @param userName		The user's name for the connection request. May be null.  The user name is passed in as is from the  connection request. Derby will pass in the user name that is set on connection request as is, without changing the  casing and without removing the delimiter quotes  if any.
 * @param userPassword	The user's password for the connection request. May be null.
 * @param databaseName	The database that the user wants to connect to.Will be null if this is system level authentication.
 * @param info			A Properties object that contains additional connection information, that can help to  authenticate the user. It has properties of the  'info' object passed as part of  DriverManager.getConnection() call and any  attributes set on the JDBC URL.
 * @return	false if the connection request should be denied, true if the connection request should proceed.  If false is returned the  connection attempt will receive a SQLException with SQL State  08004.
 * @exception java.sql.SQLException An exception processing the request, connection request will be denied.  The SQL exception will  be returned to the connection attempt.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>userName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>userPassword</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>databaseName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>info</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>