<Class>
    <Id>1890</Id>
    <Package>org.apache.derby.impl.sql.execute</Package>
    <ClassName>DDLSingleTableConstantAction</ClassName>
    <SuperClass>DDLConstantAction</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>DDLSingleTableConstantAction  /** 
 * Abstract class that has actions that are across all DDL actions that are tied to a table.  An example of DDL that affects a table is CREATE INDEX or DROP VIEW.  An example of DDL that does not affect a table is CREATE STATEMENT or DROP SCHEMA.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>tableId</FieldName>
            <FieldType>UUID</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>DDLSingleTableConstantAction</MethodName>
            <MethodComment>/** 
 * constructor
 * @param tableId the target table
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tableId</ParamName>
                    <ParamType>UUID</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>dropConstraint</MethodName>
            <MethodComment>/** 
 * Drop the constraint corresponding to the received descriptor. If in doing so we also drop a backing conglomerate that is shared by other constraints/indexes, then we have to create a new conglomerate to fill the gap. This method exists here as a "utility" method for the various constant actions that may drop constraints in one way or another (there are several that do).
 * @param consDesc ConstraintDescriptor for the constraint to drop
 * @param activation Activation used when creating a new backingindex (if a new backing index is needed)
 * @param lcc LanguageConnectionContext used for dropping
 * @param clearDeps Whether or not to clear dependencies whendropping the constraint
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>consDesc</ParamName>
                    <ParamType>ConstraintDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>activation</ParamName>
                    <ParamType>Activation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lcc</ParamName>
                    <ParamType>LanguageConnectionContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>clearDeps</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;dropConstraint;[consDesc, (TableDescriptor)null, (List&lt;ConstantAction&gt;)null, activation, lcc, clearDeps]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>dropConstraint</MethodName>
            <MethodComment>/** 
 * See "dropConstraint(...") above.
 * @param skipCreate Optional TableDescriptor.  If non-nullthen we will skip the "create new conglomerate" processing *IF* the constraint that we drop came from the table described by skipCreate.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>consDesc</ParamName>
                    <ParamType>ConstraintDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>skipCreate</ParamName>
                    <ParamType>TableDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>activation</ParamName>
                    <ParamType>Activation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lcc</ParamName>
                    <ParamType>LanguageConnectionContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>clearDeps</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;dropConstraint;[consDesc, skipCreate, (List&lt;ConstantAction&gt;)null, activation, lcc, clearDeps]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>dropConstraint</MethodName>
            <MethodComment>/** 
 * See "dropConstraint(...") above.
 * @param newConglomActions Optional List.  If non-null thenfor each ConglomerateDescriptor for which we skip the "create new conglomerate" processing we will add a ConstantAction to this list.  The constant action can then be executed later (esp. by the caller) to create the new conglomerate, if needed.  If this argument is null and we skip creation of a new conglomerate, the new conglomerate is effectively ignored (which may be fine in some cases-- ex. when dropping a table).
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>consDesc</ParamName>
                    <ParamType>ConstraintDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>skipCreate</ParamName>
                    <ParamType>TableDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>newConglomActions</ParamName>
                    <ParamType>ConstantAction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>activation</ParamName>
                    <ParamType>Activation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lcc</ParamName>
                    <ParamType>LanguageConnectionContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>clearDeps</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Properties [ixProps=null]</InnerVar>
                <InnerVar>ConglomerateDescriptor [newBackingConglomCD=consDesc.drop(lcc,clearDeps)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>dropConglomerate</MethodName>
            <MethodComment>/** 
 * Similar to dropConstraint(...) above, except this method drops a conglomerate directly instead of going through a ConstraintDescriptor.
 * @param congDesc ConglomerateDescriptor for the conglom to drop
 * @param td TableDescriptor for the table on which congDesc exists
 * @param activation Activation used when creating a new backingindex (if a new backing index is needed)
 * @param lcc LanguageConnectionContext used for dropping
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>congDesc</ParamName>
                    <ParamType>ConglomerateDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>td</ParamName>
                    <ParamType>TableDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>activation</ParamName>
                    <ParamType>Activation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lcc</ParamName>
                    <ParamType>LanguageConnectionContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;dropConglomerate;[congDesc, td, false, (List&lt;ConstantAction&gt;)null, activation, lcc]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>dropConglomerate</MethodName>
            <MethodComment>/** 
 * See "dropConglomerate(...)" above.
 * @param skipCreate If true then we will skip the "createnew conglomerate" processing for the dropped conglom.
 * @param newConglomActions Optional List.  If non-null thenfor each ConglomerateDescriptor for which we skip the "create new conglomerate" processing we will add a ConstantAction to this list.  The constant action can then be executed later (esp. by the caller) to create the new conglomerate, if needed.  If this argument is null and we skip creation of a new conglomerate, the new conglomerate is effectively ignored (which may be fine in some cases-- ex. when dropping a table).
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>congDesc</ParamName>
                    <ParamType>ConglomerateDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>td</ParamName>
                    <ParamType>TableDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>skipCreate</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>newConglomActions</ParamName>
                    <ParamType>ConstantAction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>activation</ParamName>
                    <ParamType>Activation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lcc</ParamName>
                    <ParamType>LanguageConnectionContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Properties [ixProps=new Properties()]</InnerVar>
                <InnerVar>ConglomerateDescriptor [newBackingConglomCD=congDesc.drop(lcc,td)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;loadIndexProperties;[lcc, congDesc, ixProps]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>recreateUniqueConstraintBackingIndexAsUniqueWhenNotNull</MethodName>
            <MethodComment>/** 
 * Recreate backing index of unique constraint. It first drops the existing index and creates it again with  uniqueness set to false and uniqueWhenNotNull set to true. It reuses the uuid so there is no need to update ConstraintDescriptor.
 * @param cd            ConglomerateDescritor to recreate
 * @param td            TableDescriptor for table on which congDesc exists
 * @param activation    Activation used when creating a new backing index (if a new backing index is needed)
 * @param lcc           LanguageConnectionContext used for dropping
 * @throws StandardException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cd</ParamName>
                    <ParamType>ConglomerateDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>td</ParamName>
                    <ParamType>TableDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>activation</ParamName>
                    <ParamType>Activation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lcc</ParamName>
                    <ParamType>LanguageConnectionContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Properties [prop=new Properties()]</InnerVar>
                <InnerVar>ArrayList&lt;ConstantAction&gt; [list=new ArrayList&lt;ConstantAction&gt;()]</InnerVar>
                <InnerVar>String[] [cols=cd.getColumnNames()]</InnerVar>
                <InnerVar>CreateIndexConstantAction [action=new CreateIndexConstantAction(false,false,true,cd.getIndexDescriptor().hasDeferrableChecking(),false,DataDictionary.UNIQUE_CONSTRAINT,cd.getIndexDescriptor().indexType(),td.getSchemaName(),cd.getConglomerateName(),td.getName(),td.getUUID(),cols,cd.getIndexDescriptor().isAscending(),true,cd.getUUID(),prop)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;loadIndexProperties;[lcc, cd, prop]</InnerMethodInvoke>
                <InnerMethodInvoke>null;dropConglomerate;[cd, td, false, list, activation, lcc]</InnerMethodInvoke>
                <InnerMethodInvoke>action;executeConstantAction;[activation]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>loadIndexProperties</MethodName>
            <MethodComment>/** 
 * Get any table properties that exist for the received index descriptor.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lcc</ParamName>
                    <ParamType>LanguageConnectionContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>congDesc</ParamName>
                    <ParamType>ConglomerateDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ixProps</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ConglomerateController [cc=lcc.getTransactionExecute().openConglomerate(congDesc.getConglomerateNumber(),false,TransactionController.OPENMODE_FORUPDATE,TransactionController.MODE_TABLE,TransactionController.ISOLATION_SERIALIZABLE)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cc;getInternalTablePropertySet;[ixProps]</InnerMethodInvoke>
                <InnerMethodInvoke>cc;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getConglomReplacementAction</MethodName>
            <MethodComment>/** 
 * Create a ConstantAction which, when executed, will create a new conglomerate whose attributes match those of the received ConglomerateDescriptor.
 * @param srcCD Descriptor describing what the replacementphysical conglomerate should look like
 * @param td Table descriptor for the table to which srcCD belongs
 * @param properties Properties from the old (dropped) conglomthat should be "forwarded" to the new (replacement) conglom.
 */
</MethodComment>
            <ReturnType>ConstantAction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>srcCD</ParamName>
                    <ParamType>ConglomerateDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>td</ParamName>
                    <ParamType>TableDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>properties</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>executeConglomReplacement</MethodName>
            <MethodComment>/** 
 * Execute the received ConstantAction, which will create a new physical conglomerate (or find an existing physical conglomerate that is "sharable") to replace some dropped physical conglomerate.  Then find any conglomerate descriptors which still reference the dropped physical conglomerate and update them all to have a conglomerate number that points to the conglomerate created by the ConstantAction. This method is called as part of DROP processing to handle cases where a physical conglomerate that was shared by multiple descriptors is dropped--in which case a new physical conglomerate must be created to support the remaining descriptors.
 * @param replaceConglom Constant action which, when executed,will either create a new conglomerate or find an existing one that satisfies the ConstantAction's requirements.
 * @param activation Activation used when creating the conglom
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>replaceConglom</ParamName>
                    <ParamType>ConstantAction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>activation</ParamName>
                    <ParamType>Activation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CreateIndexConstantAction [replaceConglomAction=(CreateIndexConstantAction)replaceConglom]</InnerVar>
                <InnerVar>LanguageConnectionContext [lcc=activation.getLanguageConnectionContext()]</InnerVar>
                <InnerVar>DataDictionary [dd=lcc.getDataDictionary()]</InnerVar>
                <InnerVar>ConglomerateDescriptor[] [congDescs=dd.getConglomerateDescriptors(replaceConglomAction.getReplacedConglomNumber())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>replaceConglomAction;executeConstantAction;[activation]</InnerMethodInvoke>
                <InnerMethodInvoke>dd;updateConglomerateDescriptor;[congDescs, replaceConglomAction.getCreatedConglomNumber(), lcc.getTransactionExecute()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>