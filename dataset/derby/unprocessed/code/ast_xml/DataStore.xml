<Class>
    <Id>1679</Id>
    <Package>org.apache.derby.impl.io.vfmem</Package>
    <ClassName>DataStore</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>DataStore  /** 
 * A virtual data store, keeping track of all the virtual files existing and offering a set of high-level operations on virtual files. &lt;p&gt; A newly created data store doesn't contain a single existing directory.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>SEP</FieldName>
            <FieldType>char</FieldType>
        </Field>
        <Field>
            <FieldName>EMPTY_STR_ARR</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>LOCK</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>TMP_COUNTER_LOCK</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>files</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>files</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>databaseName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>tmpFileCounter</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>deleteMe</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>DataStore</MethodName>
            <MethodComment>/** 
 * Creates a new data store.
 * @param databaseName the name of the assoicated database, expected to bethe absolute path of the service root.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>databaseName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDatabaseName</MethodName>
            <MethodComment>/** 
 * Returns the database name, which is expected to equal the path of the service root.
 * @return The database name.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>scheduledForDeletion</MethodName>
            <MethodComment>/** 
 * Tells if this data store is scheduled for deletion.
 * @return {@code true} if the store is awaiting deletion,{@code false} otherwise.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createEntry</MethodName>
            <MethodComment>/** 
 * Creates a new entry in the data store. &lt;p&gt; This method returns  {@code null} if the path already exists, if one ofthe parent directories doesn't exist, or if one of the parents is a file instead of a directory.
 * @param iPath the path of the entry
 * @param isDir tells if the new entry shall be directory or a file
 * @return A {@code DataStoreEntry}-instance if the entry was successfully created,  {@code null} otherwise
 */
</MethodComment>
            <ReturnType>DataStoreEntry</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>iPath</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isDir</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [nPath=new File(iPath).getPath()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createAllParents</MethodName>
            <MethodComment>/** 
 * Creates all the parents of the specified path.
 * @return {@code true} if all parents either already existed as directoriesor were created,  {@code false} otherwise
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>path</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [nPath=new File(path).getPath()]</InnerVar>
                <InnerVar>String[] [parents=getParentList(nPath)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>deleteEntry</MethodName>
            <MethodComment>/** 
 * Deletes the specified entry. &lt;p&gt; If the specified entry is a directory, it is only deleted if it is empty. Read-only entries are deleted.
 * @param iPath path of the entry to delete
 * @return {@code true} if the entry was deleted, {@code false} otherwise.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>iPath</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [nPath=new File(iPath).getPath()]</InnerVar>
                <InnerVar>DataStoreEntry [entry]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEntry</MethodName>
            <MethodComment>/** 
 * Returns the entry with the specified path.
 * @param iPath path of the entry to fetch
 * @return {@code null} if the entry doesn't exist, the{@code DataStoreEntry}-object otherwise.
 */
</MethodComment>
            <ReturnType>DataStoreEntry</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>iPath</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>deleteAll</MethodName>
            <MethodComment>/** 
 * Deletes the specified entry and all its children.
 * @param iPath the root entry
 * @return {@code true} if the entry and all its children were deleted,{@code false} if the root doesn't exist.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>iPath</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [nPath=new File(iPath).getPath()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>listChildren</MethodName>
            <MethodComment>/** 
 * Lists the childen of the specified path.
 * @param iPath the directory to list the children of
 * @return An array with the relative paths of the children.
 */
</MethodComment>
            <ReturnType>String[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>iPath</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [nPath=new File(iPath).getPath()]</InnerVar>
                <InnerVar>ArrayList&lt;String&gt; [children=new ArrayList&lt;String&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>move</MethodName>
            <MethodComment>/** 
 * Moves / renames a file.
 * @param currentFile the current file
 * @param newFile the new file
 * @return {@code true} if the file was moved, {@code false} if the newfile already existed or the existing file doesn't exist.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>currentFile</ParamName>
                    <ParamType>StorageFile</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>newFile</ParamName>
                    <ParamType>StorageFile</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [currentPath=new File(currentFile.getPath()).getPath()]</InnerVar>
                <InnerVar>String [newPath=new File(newFile.getPath()).getPath()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>purge</MethodName>
            <MethodComment>/** 
 * Purges the database and releases all files associated with it.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>_deleteAll</MethodName>
            <MethodComment>/** 
 * Deletes every child of the root path specified. &lt;p&gt; Note that the root itself must be removed outside of this method.
 * @param prefixPath the normalized root path to start deleting from
 * @return {@code true} if all children of the root path were deleted,{@code false} otherwise.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>prefixPath</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ArrayList&lt;String&gt; [toDelete=new ArrayList&lt;String&gt;()]</InnerVar>
                <InnerVar>Iterator&lt;String&gt; [paths=files.keySet().iterator()]</InnerVar>
                <InnerVar>Iterator [keys=toDelete.iterator()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTempFileCounter</MethodName>
            <MethodComment>/** 
 * Returns an identifier for a temporary file.
 * @return An integer uniquely identifying a temporary file.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getParentList</MethodName>
            <MethodComment>/** 
 * Returns the list of parents for the specified path. &lt;p&gt; The lowest level parent is listed first in the list, so all absolute paths will have the root listed as the last element.
 * @param path the normalized path to create a parent list for
 * @return A list of parents.
 */
</MethodComment>
            <ReturnType>String[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>path</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ArrayList&lt;String&gt; [parents=new ArrayList&lt;String&gt;()]</InnerVar>
                <InnerVar>String [parent=path]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>