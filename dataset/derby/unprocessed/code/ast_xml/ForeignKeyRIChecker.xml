<Class>
    <Id>1565</Id>
    <Package>org.apache.derby.impl.sql.execute</Package>
    <ClassName>ForeignKeyRIChecker</ClassName>
    <SuperClass>GenericRIChecker</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ForeignKeyRIChecker  /** 
 * A Referential Integrity checker for a foreign key constraint.  It makes sure the foreign key is intact.  This is used for a change to a foreign key column.  see ReferencedKeyRIChecker for the code that validates changes to referenced keys.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>ForeignKeyRIChecker</MethodName>
            <MethodComment>/** 
 * @param lcc       the language connection context
 * @param tc		the xact controller
 * @param fkinfo	the foreign key information 
 * @exception StandardException		Thrown on failure
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lcc</ParamName>
                    <ParamType>LanguageConnectionContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tc</ParamName>
                    <ParamType>TransactionController</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fkinfo</ParamName>
                    <ParamType>FKInfo</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>doCheck</MethodName>
            <MethodComment>/** 
 * Check that the row either has a null column(s), or corresponds to a row in the referenced key. &lt;p&gt;  If the referenced key is found, then it is locked when this method returns.  The lock is held until the next call to doCheck() or close().
 * @param a     the activation
 * @param row	the row to check
 * @param restrictCheckOnly {@code true} if the check is relevant only for RESTRICTEDreferential action.
 * @param deferredRowReq dummy (interface obligation only)
 * @exception StandardException on unexpected error, oron a foreign key violation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>a</ParamName>
                    <ParamType>Activation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>ExecRow</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>restrictCheckOnly</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>deferredRowReq</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ScanController [scan=getScanController(fkInfo.refConglomNumber,refScoci,refDcoci,row)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRICheckIsolationLevel</MethodName>
            <MethodComment>/** 
 * Get the isolation level for the scan for the RI check. NOTE: The level will eventually be instantaneous locking once the implementation changes.
 * @return The isolation level for the scan forthe RI check.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>