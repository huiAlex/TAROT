<Class>
    <Id>474</Id>
    <Package>org.apache.derby.iapi.sql.compile</Package>
    <ClassName>RequiredRowOrdering</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>RequiredRowOrdering  /** 
 * This interface provides a representation of the required ordering of rows from a ResultSet.  Different operations can require ordering: ORDER BY, DISTINCT, GROUP BY.  Some operations, like ORDER BY, require that the columns be ordered a particular way, while others, like DISTINCT and GROUP BY, reuire only that there be no duplicates in the result.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>SORT_REQUIRED</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>ELIMINATE_DUPS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>NOTHING_REQUIRED</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>sortRequired</MethodName>
            <MethodComment>/** 
 * Tell whether sorting is required for this RequiredRowOrdering, given a RowOrdering.
 * @param rowOrdering   The order of rows in question
 * @param optimizableList The list of join participants
 * @param proposedJoinOrder The current join order being considered bythe optimizer. We need to look into this to determine if the outer optimizables are single row result set if the order by column is on an inner optimizable and that inner optimizable is not a one. {@code proposedJoinOrder} is a map onto {@code optimizableList}: it contains indexes of optimizables in that list in the join order proposed, cf.  {@code OptimizerImpl#proposedJoinOrder}.
 * @return  SORT_REQUIRED if sorting is required,ELIMINATE_DUPS if no sorting is required but duplicates must be eliminated (i.e. the rows are in the right order but there may be duplicates), NOTHING_REQUIRED is no operation is required
 * @exception StandardException     Thrown on error
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rowOrdering</ParamName>
                    <ParamType>RowOrdering</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>optimizableList</ParamName>
                    <ParamType>OptimizableList</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>proposedJoinOrder</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sortRequired</MethodName>
            <MethodComment>/** 
 * Tell whether sorting is required for this RequiredRowOrdering, given a RowOrdering representing a partial join order, and a bit map telling what tables are represented in the join order. This is useful for reducing the number of cases the optimizer has to consider.
 * @param rowOrdering   The order of rows in the partial join order
 * @param tableMap      A bit map of the tables in the partial join order
 * @param optimizableList The list of join participants
 * @param proposedJoinOrder The current join order being considered bythe optimizer. We need to look into this to determine if the outer optimizables are single row result set if the order by column is on an inner optimizable and that inner optimizable is not a one. {@code proposedJoinOrder} is a map onto {@code optimizableList}: it contains indexes of optimizables in that list in the join order proposed, cf.  {@code OptimizerImpl#proposedJoinOrder}. DERBY-3926 and DERBY-6148
 * @return  SORT_REQUIRED if sorting is required,ELIMINATE_DUPS if no sorting is required by duplicates must be eliminated (i.e. the rows are in the right order but there may be duplicates), NOTHING_REQUIRED is no operation is required
 * @exception StandardException     Thrown on error
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rowOrdering</ParamName>
                    <ParamType>RowOrdering</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableMap</ParamName>
                    <ParamType>JBitSet</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>optimizableList</ParamName>
                    <ParamType>OptimizableList</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>proposedJoinOrder</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>estimateCost</MethodName>
            <MethodComment>/** 
 * Estimate the cost of doing a sort for this row ordering, given the number of rows to be sorted.  This does not take into account whether the sort is really needed.  It also estimates the number of result rows.
 * @param estimatedInputRows	The estimated number of rows to sort
 * @param rowOrdering			The ordering of the input rows
 * @param resultCost			A place to store the resulting cost
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>estimatedInputRows</ParamName>
                    <ParamType>double</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rowOrdering</ParamName>
                    <ParamType>RowOrdering</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>resultCost</ParamName>
                    <ParamType>CostEstimate</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sortNeeded</MethodName>
            <MethodComment>/** 
 * Indicate that a sort is necessary to fulfill this required ordering. This method may be called many times during a single optimization.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sortNotNeeded</MethodName>
            <MethodComment>/** 
 * Indicate that a sort is *NOT* necessary to fulfill this required ordering.  This method may be called many times during a single optimization.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSortNeeded</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>