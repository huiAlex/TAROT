<Class>
    <Id>1203</Id>
    <Package>org.apache.derby.impl.store.access.conglomerate</Package>
    <ClassName>OpenConglomerateScratchSpace</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>DynamicCompiledOpenConglomInfo</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>OpenConglomerateScratchSpace  /** 
 * A utility class to store and use temporary scratch space associated with a conglomerate.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>row_for_export_template</FieldName>
            <FieldType>DataValueDescriptor[]</FieldType>
        </Field>
        <Field>
            <FieldName>scratch_template</FieldName>
            <FieldType>DataValueDescriptor[]</FieldType>
        </Field>
        <Field>
            <FieldName>scratch_row</FieldName>
            <FieldType>DataValueDescriptor[]</FieldType>
        </Field>
        <Field>
            <FieldName>format_ids</FieldName>
            <FieldType>int[]</FieldType>
        </Field>
        <Field>
            <FieldName>collation_ids</FieldName>
            <FieldType>int[]</FieldType>
        </Field>
        <Field>
            <FieldName>hasCollatedTypes</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>scratch_row_position</FieldName>
            <FieldType>RowPosition</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>OpenConglomerateScratchSpace</MethodName>
            <MethodComment>/** 
 * Creates a new scratch space.
 * @param format_ids format identifiers for columns in the row
 * @param collation_ids collation identifiers for the columns in the row
 * @param hasCollatedTypes whether there is at least one collated type witha collation other than UCS BASIC in the conglomerate
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>format_ids</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>collation_ids</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>hasCollatedTypes</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>get_row_for_export</MethodName>
            <MethodComment>/** 
 * Return an empty template (possibly partial) row to be given back to  a client. &lt;p&gt; The main use of this is for fetchSet() and fetchNextGroup() which allocate rows and then give them back entirely to the caller. &lt;p&gt;
 * @return The row to use.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>DataValueDescriptor[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rawtran</ParamName>
                    <ParamType>Transaction</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>get_scratch_row</MethodName>
            <MethodComment>/** 
 * Return an empty template (possibly partial) row to be used and  reused internally for processing. &lt;p&gt; The main use of this is for qualifying rows where a row has not been provided by the client.  This routine cache's a single row for reuse by the caller, if the caller needs 2 concurrent scratch rows, some other mechanism must be used. &lt;p&gt;
 * @return The row to use.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>DataValueDescriptor[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rawtran</ParamName>
                    <ParamType>Transaction</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>get_template</MethodName>
            <MethodComment>/** 
 * Return a complete empty row.   &lt;p&gt; The main use of this is for searching a tree where a complete copy of the row is needed for searching. &lt;p&gt;
 * @return The template to use.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>DataValueDescriptor[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rawtran</ParamName>
                    <ParamType>Transaction</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>get_scratch_row_position</MethodName>
            <MethodComment>/** 
 * Return a scratch RowPosition. &lt;p&gt; Used by GenericConglomerateController.delete() and  GenericConglomerateController.replace().  It may be reused so callers must insure that object no longer needed before next possible call to get it again. &lt;p&gt;
 * @return a scratch RowPosition.
 */
</MethodComment>
            <ReturnType>RowPosition</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasCollatedTypes</MethodName>
            <MethodComment>/** 
 * Tells if there is at least one column with a collation different than UCS BASIC in the conglomerate.
 * @return {@code true} if there is at least one column with a collationdifferent than UCS BASIC.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>