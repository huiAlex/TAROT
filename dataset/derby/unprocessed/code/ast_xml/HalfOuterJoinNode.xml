<Class>
    <Id>1008</Id>
    <Package>org.apache.derby.impl.sql.compile</Package>
    <ClassName>HalfOuterJoinNode</ClassName>
    <SuperClass>JoinNode</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>HalfOuterJoinNode  /** 
 * An HalfOuterJoinNode represents a left or a right outer join result set. Right outer joins are always transformed into left outer joins during preprocessing for simplicity.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>rightOuterJoin</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>transformed</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>HalfOuterJoinNode</MethodName>
            <MethodComment>/** 
 * Constructor for a HalfOuterJoinNode.
 * @param leftResult		The ResultSetNode on the left side of this join
 * @param rightResult		The ResultSetNode on the right side of this join
 * @param onClause			The ON clause
 * @param usingClause		The USING clause
 * @param rightOuterJoin	Whether or not this node represents a userspecified right outer join
 * @param tableProperties	Properties list associated with the table
 * @param cm                The context manager
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>leftResult</ParamName>
                    <ParamType>ResultSetNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rightResult</ParamName>
                    <ParamType>ResultSetNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>onClause</ParamName>
                    <ParamType>ValueNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>usingClause</ParamName>
                    <ParamType>ResultColumnList</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rightOuterJoin</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableProperties</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cm</ParamName>
                    <ParamType>ContextManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>pushOptPredicate</MethodName>
            <MethodComment>/** 
 * @see Optimizable#pushOptPredicate
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>optimizablePredicate</ParamName>
                    <ParamType>OptimizablePredicate</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>FromTable [leftFromTable=(FromTable)leftResultSet]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment>/** 
 * Convert this object to a String.  See comments in QueryTreeNode.java for how this should be done for tree printing.
 * @return	This object as a String
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>preprocess</MethodName>
            <MethodComment>/** 
 * Put a ProjectRestrictNode on top of each FromTable in the FromList. ColumnReferences must continue to point to the same ResultColumn, so that ResultColumn must percolate up to the new PRN.  However, that ResultColumn will point to a new expression, a VirtualColumnNode,  which points to the FromTable and the ResultColumn that is the source for the ColumnReference.   (The new PRN will have the original of the ResultColumnList and the ResultColumns from that list.  The FromTable will get shallow copies of the ResultColumnList and its ResultColumns.  ResultColumn.expression will remain at the FromTable, with the PRN getting a new  VirtualColumnNode for each ResultColumn.expression.) We then project out the non-referenced columns.  If there are no referenced columns, then the PRN's ResultColumnList will consist of a single ResultColumn whose expression is 1.
 * @param numTables			Number of tables in the DML Statement
 * @param gbl				The group by list, if any
 * @param fromList			The from list, if any
 * @return The generated ProjectRestrictNode atop the original FromTable.
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>ResultSetNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>numTables</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>gbl</ParamName>
                    <ParamType>GroupByList</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fromList</ParamName>
                    <ParamType>FromList</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ResultSetNode [newTreeTop]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>pushExpressions</MethodName>
            <MethodComment>/** 
 * Push expressions down to the first ResultSetNode which can do expression evaluation and has the same referenced table map. RESOLVE - This means only pushing down single table expressions to DistinctNodes today.  Once we have a better understanding of how the optimizer will work, we can push down join clauses.
 * @param outerPredicateList	The PredicateList from the outer RS.
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>outerPredicateList</ParamName>
                    <ParamType>PredicateList</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>FromTable [leftFromTable=(FromTable)leftResultSet]</InnerVar>
                <InnerVar>FromTable [rightFromTable=(FromTable)rightResultSet]</InnerVar>
                <InnerVar>PredicateList [noPredicates=new PredicateList(getContextManager())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;pushExpressionsToLeft;[outerPredicateList]</InnerMethodInvoke>
                <InnerMethodInvoke>leftFromTable;pushExpressions;[getLeftPredicateList()]</InnerMethodInvoke>
                <InnerMethodInvoke>rightFromTable;pushExpressions;[noPredicates]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>LOJ_reorderable</MethodName>
            <MethodComment>/** 
 * This method recursively: &lt;ul&gt; &lt;li&gt;determines if this part of the query tree is a compound OJ of the shape required for reordering and if so,&lt;/li&gt; &lt;li&gt;does a reordering.&lt;/li&gt; &lt;/ul&gt; &lt;pre&gt; OJ1  pT1T2                      OJ1  pT2T3 /  \                             / \ /    \                 can       /   t3 t1    OJ2 pT2T3       reorder    / /  \              to      OJ2  pT1T2 /    \                    /   \ t2    t3                  /     \ t1     t2 where pR1R2 is a null-rejecting predicate which references the schema of joinee R1 and R2, cf. terminology explanation in #isNullRejecting. &lt;p/&gt; OJ1 represents &lt;em&gt;this&lt;/em&gt; before and after the reordering. &lt;/pre&gt; &lt;p/&gt; The join predicates are assumed to be in CNF form. &lt;p/&gt; &lt;em&gt;Note:&lt;/em&gt; Present implementation limitations &lt;ul&gt; &lt;li&gt;Only left outer joins are considered, i.e. both OJs in diagram above must be LOJ.&lt;/li&gt; &lt;li&gt;Top left side must be a base table (t1 above). The bottow right side (t3 above) may be another OJ, so reordering can happen recursively.&lt;/li&gt; &lt;/ul&gt;
 * @param numTables number of tables involved (needed to right size thebitmaps)
 * @return boolean true if any reordering took place at this level or deeperso caller can know whether rebinding may be necessary
 * @throws StandardException standard error policy
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>numTables</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [anyChange=false]</InnerVar>
                <InnerVar>ResultSetNode [logicalLeftResultSet]</InnerVar>
                <InnerVar>ResultSetNode [logicalRightResultSet]</InnerVar>
                <InnerVar>JBitSet [RPReferencedTableMap]</InnerVar>
                <InnerVar>JBitSet [NPReferencedTableMap]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isNullRejecting</MethodName>
            <MethodComment>/** 
 * Tests pRiRj in the sense of Galindo-Legaria et al: &lt;em&gt;Outerjoin Simplification and Reordering for Query Optimization&lt;/em&gt;, ACM Transactions on Database Systems, Vol. 22, No. 1, March 1997, Pages 43-74: &lt;quote&gt; "The set of attributes referenced by a predicate p is called the schema of p, and denoted sch(p). As a notational convention, we annotate predicates to reflect their schema. If sch(p) includes attributes of both Ri, Rj and only those relations, we can write the predicate as pRiRj. &lt;/quote&gt; If a null-valued column is compared in a predicate that contains no OR connectives, the predicate evaluates to undefined, and the tuple is rejected. The relops satisfy this criterion. &lt;p/&gt; To simplify analysis, we only accept predicates of the form: &lt;pre&gt; X relop Y [and .. and X-n relop Y-n] &lt;/pre&gt; At least one of the relops should reference both  {@code leftTableMap}and  {@code rightTableMap}, so that we know that sch(p) includes attributes of both Ri, Rj. I.e. &lt;p/&gt; {@code X} should be a table in {@code leftTableMap}, and {@code Y} should be a table in {@code rightTableMap}. &lt;p/&gt; &lt;b&gt;or&lt;/b&gt; {@code X} should be a table in {@code rightTableMap}, and {@code Y} should be a table in {@code leftTableMap}.
 * @param joinClause The join clause (i.e. predicate) we want to check
 * @param leftTableMap a bit map representing the tables expected for thepredicate (logical left)
 * @param rightTableMap a bit map representing the tables expected for thepredicate (logical right)
 * @return true if the {@code joinClause} has at least one relop thatreferences both  {@code leftTableMap} and {@code rightTableMap}
 * @throws StandardException standard exception policy
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>joinClause</ParamName>
                    <ParamType>ValueNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>leftTableMap</ParamName>
                    <ParamType>JBitSet</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rightTableMap</ParamName>
                    <ParamType>JBitSet</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ValueNode [vn=joinClause]</InnerVar>
                <InnerVar>boolean [foundPred=false]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>LOJ_bindResultColumns</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>anyChange</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>transformOuterJoins</MethodName>
            <MethodComment>/** 
 * Transform any Outer Join into an Inner Join where applicable. (Based on the existence of a null intolerant predicate on the inner table.)
 * @param predicateTree	The predicate tree for the query block
 * @return The new tree top (OuterJoin or InnerJoin).
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>FromTable</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>predicateTree</ParamName>
                    <ParamType>ValueNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>numTables</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ResultSetNode [innerRS]</InnerVar>
                <InnerVar>JBitSet [innerMap=innerRS.LOJgetReferencedTables(numTables)]</InnerVar>
                <InnerVar>ValueNode [vn=predicateTree]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>leftResultSet;notFlattenableJoin;[]</InnerMethodInvoke>
                <InnerMethodInvoke>rightResultSet;notFlattenableJoin;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>adjustNumberOfRowsReturned</MethodName>
            <MethodComment>/** 
 * @see JoinNode#adjustNumberOfRowsReturned 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>costEstimate</ParamName>
                    <ParamType>CostEstimate</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CostEstimate [outerCost=getLeftResultSet().getCostEstimate()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generate</MethodName>
            <MethodComment>/** 
 * Generate the code for an inner join node.
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>acb</ParamName>
                    <ParamType>ActivationClassBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mb</ParamName>
                    <ParamType>MethodBuilder</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addOuterJoinArguments</MethodName>
            <MethodComment>/** 
 * Generate	and add any arguments specifict to outer joins. Generate	the methods (and add them as parameters) for returning an empty row from 1 or more sides of an outer join, if required.  Pass whether or not this was originally a right outer join.
 * @param acb		The ActivationClassBuilder
 * @param mb the method the generate code is to go intoreturn The args that have been added
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>acb</ParamName>
                    <ParamType>ActivationClassBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mb</ParamName>
                    <ParamType>MethodBuilder</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rightResultSet.getResultColumns();generateNulls;[acb, mb]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;push;[rightOuterJoin]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNumJoinArguments</MethodName>
            <MethodComment>/** 
 * Return the number of arguments to the join result set.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>oneRowRightSide</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>acb</ParamName>
                    <ParamType>ActivationClassBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mb</ParamName>
                    <ParamType>MethodBuilder</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mb;push;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;push;[false]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLogicalLeftResultSet</MethodName>
            <MethodComment>/** 
 * Return the logical left result set for this qualified join node. (For RIGHT OUTER JOIN, the left is the right and the right is the left and the JOIN is the NIOJ).
 */
</MethodComment>
            <ReturnType>ResultSetNode</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLogicalRightResultSet</MethodName>
            <MethodComment>/** 
 * Return the logical right result set for this qualified join node. (For RIGHT OUTER JOIN, the left is the right and the right is the left and the JOIN is the NIOJ).
 */
</MethodComment>
            <ReturnType>ResultSetNode</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isRightOuterJoin</MethodName>
            <MethodComment>/** 
 * Return true if right outer join or false if left outer join Used to set Nullability correctly in JoinNode
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isJoinColumnForRightOuterJoin</MethodName>
            <MethodComment>/** 
 * If this is a right outer join node with USING/NATURAL clause, then check if the passed ResultColumn is a join column. If yes, then  ResultColumn should be marked such. DERBY-4631
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rc</ParamName>
                    <ParamType>ResultColumn</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>LOJgetNPReferencedTables</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>JBitSet</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>numTables</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>LOJgetRPReferencedTables</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>JBitSet</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>numTables</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>