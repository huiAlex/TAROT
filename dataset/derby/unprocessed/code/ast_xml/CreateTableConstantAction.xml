<Class>
    <Id>1472</Id>
    <Package>org.apache.derby.impl.sql.execute</Package>
    <ClassName>CreateTableConstantAction</ClassName>
    <SuperClass>DDLConstantAction</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>CreateTableConstantAction  /** 
 * This class  describes actions that are ALWAYS performed for a CREATE TABLE Statement at Execution time.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>lockGranularity</FieldName>
            <FieldType>char</FieldType>
        </Field>
        <Field>
            <FieldName>onCommitDeleteRows</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>onRollbackDeleteRows</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>tableName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>schemaName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>tableType</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>columnInfo</FieldName>
            <FieldType>ColumnInfo[]</FieldType>
        </Field>
        <Field>
            <FieldName>constraintActions</FieldName>
            <FieldType>CreateConstraintConstantAction[]</FieldType>
        </Field>
        <Field>
            <FieldName>properties</FieldName>
            <FieldType>Properties</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>CreateTableConstantAction</MethodName>
            <MethodComment>/** 
 * Make the ConstantAction for a CREATE TABLE statement.
 * @param schemaName	name for the schema that table lives in.
 * @param tableName	Name of table.
 * @param tableType	Type of table (e.g., BASE, global temporary table).
 * @param columnInfo	Information on all the columns in the table.(REMIND tableDescriptor ignored)
 * @param constraintActions	CreateConstraintConstantAction[] for constraints
 * @param properties	Optional table properties
 * @param lockGranularity	The lock granularity.
 * @param onCommitDeleteRows	If true, on commit delete rows else on commit preserve rows of temporary table.
 * @param onRollbackDeleteRows	If true, on rollback, delete rows from temp tables which were logically modified. true is the only supported value
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>schemaName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableType</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columnInfo</ParamName>
                    <ParamType>ColumnInfo[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>constraintActions</ParamName>
                    <ParamType>CreateConstraintConstantAction[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>properties</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lockGranularity</ParamName>
                    <ParamType>char</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>onCommitDeleteRows</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>onRollbackDeleteRows</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>executeConstantAction</MethodName>
            <MethodComment>/** 
 * This is the guts of the Execution-time logic for CREATE TABLE.
 * @see ConstantAction#executeConstantAction
 * @exception StandardException		Thrown on failure
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>activation</ParamName>
                    <ParamType>Activation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>TableDescriptor [td]</InnerVar>
                <InnerVar>UUID [toid]</InnerVar>
                <InnerVar>SchemaDescriptor [schemaDescriptor]</InnerVar>
                <InnerVar>ColumnDescriptor [columnDescriptor]</InnerVar>
                <InnerVar>ExecRow [template]</InnerVar>
                <InnerVar>LanguageConnectionContext [lcc=activation.getLanguageConnectionContext()]</InnerVar>
                <InnerVar>DataDictionary [dd=lcc.getDataDictionary()]</InnerVar>
                <InnerVar>DependencyManager [dm=dd.getDependencyManager()]</InnerVar>
                <InnerVar>TransactionController [tc=lcc.getTransactionExecute()]</InnerVar>
                <InnerVar>int[] [collation_ids=new int[columnInfo.length]]</InnerVar>
                <InnerVar>long [conglomId=tc.createConglomerate("heap",template.getRowArray(),null,collation_ids,properties,tableType == TableDescriptor.GLOBAL_TEMPORARY_TABLE_TYPE ? (TransactionController.IS_TEMPORARY | TransactionController.IS_KEPT) : TransactionController.IS_DEFAULT)]</InnerVar>
                <InnerVar>SchemaDescriptor [sd]</InnerVar>
                <InnerVar>DataDescriptorGenerator [ddg=dd.getDataDescriptorGenerator()]</InnerVar>
                <InnerVar>int [index=1]</InnerVar>
                <InnerVar>ColumnDescriptor[] [cdlArray=new ColumnDescriptor[columnInfo.length]]</InnerVar>
                <InnerVar>ColumnDescriptorList [cdl=td.getColumnDescriptorList()]</InnerVar>
                <InnerVar>ConglomerateDescriptor [cgd=ddg.newConglomerateDescriptor(conglomId,null,false,null,false,null,toid,sd.getUUID())]</InnerVar>
                <InnerVar>ConglomerateDescriptorList [conglomList=td.getConglomerateDescriptorList()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>activation;setForCreateTable;[]</InnerMethodInvoke>
                <InnerMethodInvoke>activation;setDDLTableDescriptor;[td]</InnerMethodInvoke>
                <InnerMethodInvoke>conglomList;add;[cgd]</InnerMethodInvoke>
                <InnerMethodInvoke>null;adjustUDTDependencies;[lcc, dd, td, columnInfo, false]</InnerMethodInvoke>
                <InnerMethodInvoke>dd.getDependencyManager();addDependency;[activation.getPreparedStatement(), td, lcc.getContextManager()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeCSCA</MethodName>
            <MethodComment>/** 
 * Create a sequence generator for an identity column 
 */
</MethodComment>
            <ReturnType>CreateSequenceConstantAction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>info</ParamName>
                    <ParamType>ColumnInfo</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sequenceName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DataTypeDescriptor [dtd=info.dataType]</InnerVar>
                <InnerVar>long[] [bounds=dtd.getNumericBounds()]</InnerVar>
                <InnerVar>long [minValue=bounds[DataTypeDescriptor.MIN_VALUE_IDX]]</InnerVar>
                <InnerVar>long [maxValue=bounds[DataTypeDescriptor.MAX_VALUE_IDX]]</InnerVar>
                <InnerVar>boolean [cycling=false]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>