<Class>
    <Id>760</Id>
    <Package>org.apache.derbyTesting.functionTests.testData.serializedDataSources</Package>
    <ClassName>SerializeDataSources</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>SerializeDataSources  /** 
 * Serializes and writes data sources to file, or prints information about a file assumed to be written by this program. &lt;p&gt; Four entities are written to the stream: &lt;ol&gt; &lt;li&gt;Derby version string - UTF&lt;/li&gt; &lt;li&gt;Derby build number - UTF&lt;/li&gt; &lt;li&gt;Derby data source - object&lt;/li&gt; &lt;li&gt;Derby data source reference - object&lt;/li&gt; &lt;/ol&gt; &lt;p&gt; Both embedded and client data sources are attempted serialized, and the data source class names are obtained from a predefined list. If another data source implementation is added to Derby, its class name must be added to the list if this class is supposed to serialize it and write it to file. &lt;p&gt; Existing files are overwritten, and the file name is constructed like this: &lt;tt&gt;&amp;lt;ClassName&amp;gt;-&amp;lt;modifiedVersionString&amp;gt;.ser&lt;/tt&gt; The version string is modified by replacing punctuation marks with underscores.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>KNOWN_EMBEDDED_DATA_SOURCES</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>KNOWN_CLIENT_DATA_SOURCES</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>serializeDataSources</MethodName>
            <MethodComment>/** 
 * Serialize and write data sources to file.
 * @param versionString Derby version string (i.e. 10.3.2.1)
 * @param buildNumber Derby build number (svn)
 * @param dataSourceClasses list of data source class names
 * @return The number of data sources serialized and written to file.
 * @throws ClassNotFoundException required class is not on the classpath
 * @throws InstantiationException if instantiating data source class fails
 * @throws IllegalAccessException if instantiating data source class fails
 * @throws IOException if writing to file fails
 * @throws NamingException if creating a naming reference for the datasource fails
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>versionString</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>buildNumber</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dataSourceClasses</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [modifiedVersionString=versionString.replaceAll("\\.","_")]</InnerVar>
                <InnerVar>int [dsCount=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ClassNotFoundException</ExceptionType>
                <ExceptionType>InstantiationException</ExceptionType>
                <ExceptionType>IllegalAccessException</ExceptionType>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>NamingException</ExceptionType>
                <ExceptionType>NoSuchMethodException</ExceptionType>
                <ExceptionType>InvocationTargetException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>printInfoFromSerializedFile</MethodName>
            <MethodComment>/** 
 * Attempts to read information from a file assumed to contain a serialized data source. &lt;p&gt; All information is printed to the console.
 * @param fileName the name of the file to read from
 * @return {@code true} if the file was read successfully, {@code false} ifsomething went wrong.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fileName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>File [file=new File(fileName)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>System.out;println;["&gt;&gt;&gt; File: " + fileName]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>main</MethodName>
            <MethodComment>/** 
 * Serializes and writes a number of Derby data sources to disk, or attempts to read information from existing files.
 * @param args arguments from the command line. If there are no arguments,the program will write data sources to file. Otherwise all arguments are assumed to be file names of files to read.
 * @throws Exception if something goes wrong
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [majorVersionEmbedded=sysinfo.getMajorVersion(sysinfo.DBMS)]</InnerVar>
                <InnerVar>int [minorVersionEmbedded=sysinfo.getMinorVersion(sysinfo.DBMS)]</InnerVar>
                <InnerVar>String [buildNumberEmbedded=sysinfo.getBuildNumber(sysinfo.DBMS)]</InnerVar>
                <InnerVar>String [versionEmbedded=sysinfo.getVersionString(sysinfo.DBMS)]</InnerVar>
                <InnerVar>int [majorVersionClient=sysinfo.getMajorVersion(sysinfo.CLIENT)]</InnerVar>
                <InnerVar>int [minorVersionClient=sysinfo.getMinorVersion(sysinfo.CLIENT)]</InnerVar>
                <InnerVar>String [buildNumberClient=sysinfo.getBuildNumber(sysinfo.CLIENT)]</InnerVar>
                <InnerVar>String [versionClient=sysinfo.getVersionString(sysinfo.CLIENT)]</InnerVar>
                <InnerVar>int [knownDsCount=KNOWN_EMBEDDED_DATA_SOURCES.length + KNOWN_CLIENT_DATA_SOURCES.length]</InnerVar>
                <InnerVar>int [dsWritten=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>System.out;println;[]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["Known data sources:   " + knownDsCount]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["Data sources written: " + dsWritten]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>