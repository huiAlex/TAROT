<Class>
    <Id>358</Id>
    <Package>org.apache.derby.vti</Package>
    <ClassName>XmlVTI</ClassName>
    <SuperClass>StringColumnVTI</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>XmlVTI  /** 
 * &lt;p&gt; This is a VTI designed to read XML files which are structured like row sets. &lt;p&gt; XML files parsed by this VTI are always processed with external entity expansion disabled and secure parser processing enabled. &lt;p&gt; There are two invocation formats provided by this VTI. &lt;p&gt; One form of this VTI takes the following arguments. This form is useful when all of the columns in the row can be constructed from data nested INSIDE the row Element. &lt;/p&gt; &lt;ul&gt; &lt;li&gt;xmlResourceName - The name of an xml file.&lt;/li&gt; &lt;li&gt;rowTag - The tag of the element which contains the row-structured content.&lt;/li&gt; &lt;li&gt;childTags - The attributes and descendant elements inside the row element which should be treated as columns.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt; Here is a sample declaration of this first form of the XmlVTI: &lt;/p&gt; &lt;pre&gt; create function findbugs( xmlResourceName varchar( 32672 ), rowTag varchar( 32672 ), childTags varchar( 32672 )... ) returns table ( className   varchar( 32672 ), bugCount    int ) language java parameter style derby_jdbc_result_set no sql external name 'org.apache.derby.vti.XmlVTI.xmlVTI'; &lt;/pre&gt; &lt;p&gt; ...and here is a sample invocation: &lt;/p&gt; &lt;pre&gt; create view findbugs as select  from table ( findbugs ( 'findbugs.xml', 'ClassStats', 'class', 'bugs' ) ) v; select * from findbugs where bugCount != 0; &lt;/pre&gt; &lt;p&gt; A second form of this VTI takes the following arguments. This form is useful when some of the columns in the row are "inherited" from outer elements inside which the row element nests: &lt;/p&gt; &lt;ul&gt; &lt;li&gt;xmlResourceName - The name of an xml file.&lt;/li&gt; &lt;li&gt;rowTag - The tag of the element which contains the row-structured content.&lt;/li&gt; &lt;li&gt;parentTags - Attributes and elements (to be treated as columns) from outer elements in which the rowTag is nested.&lt;/li&gt; &lt;li&gt;childTags - Attributes and elements (to be treated as columns) inside the row element.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt; Here is a sample declaration of this second form of the XmlVTI. Using the second form involves declaring an ArrayList type and a factory method too: &lt;/p&gt; &lt;pre&gt; create type ArrayList external name 'java.util.ArrayList' language java; create function asList( cell varchar( 32672 ) ... ) returns ArrayList language java parameter style derby no sql external name 'org.apache.derby.vti.XmlVTI.asList'; create function optTrace ( xmlResourceName varchar( 32672 ), rowTag varchar( 32672 ), parentTags ArrayList, childTags ArrayList ) returns table ( stmtID    int, queryID   int, complete  boolean, summary   varchar( 32672 ), type        varchar( 50 ), estimatedCost        double, estimatedRowCount    int ) language java parameter style derby_jdbc_result_set no sql external name 'org.apache.derby.vti.XmlVTI.xmlVTI'; create view optTrace as select  from table ( optTrace ( '/Users/me/derby/mainline/z.xml', 'planCost', asList( 'stmtID', 'queryID', 'complete' ), asList( 'summary', 'type', 'estimatedCost', 'estimatedRowCount' ) ) ) v ; select * from optTrace where stmtID = 6 and complete order by estimatedCost; &lt;/pre&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>_rowTag</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>_xmlResource</FieldName>
            <FieldType>InputStream</FieldType>
        </Field>
        <Field>
            <FieldName>_rowIdx</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>_rowCount</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>_currentRow</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>_builder</FieldName>
            <FieldType>DocumentBuilder</FieldType>
        </Field>
        <Field>
            <FieldName>_rawRows</FieldName>
            <FieldType>NodeList</FieldType>
        </Field>
        <Field>
            <FieldName>_firstChildTagIdx</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>XmlVTI</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Build an XmlVTI. &lt;/p&gt;
 * @param xmlResource The xml source as an InputStream.
 * @param rowTag  The tag of the master row Element.
 * @param firstChildTagIdx    The first (0-based) tag from columnTags which is a child tag.
 * @param columnTags  The tags which supply column data; all of the tag positions less than firstChildTagIdx come from Elements which are outer to the rowTag element; the remaining tags, starting at firstChildTagIdx, are tags of attributes or Elements inside the rowTag Element.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xmlResource</ParamName>
                    <ParamType>InputStream</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rowTag</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>firstChildTagIdx</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columnTags</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>xmlVTI</MethodName>
            <MethodComment>/** 
 * This is the static method for creating functions from a file name and child tags 
 */
</MethodComment>
            <ReturnType>XmlVTI</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fileName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rowTag</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>childTags</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>xmlVTIFromURL</MethodName>
            <MethodComment>/** 
 * This is the static method for creating functions from an url and child tags 
 */
</MethodComment>
            <ReturnType>XmlVTI</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>urlString</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rowTag</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>childTags</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>xmlVTI</MethodName>
            <MethodComment>/** 
 * This is the static method for creating functions from a file name and both parent and child tags 
 */
</MethodComment>
            <ReturnType>XmlVTI</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fileName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rowTag</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parentTags</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>childTags</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>FileInputStream [fis=AccessController.doPrivileged(new PrivilegedAction&lt;FileInputStream&gt;(){
  public FileInputStream run(){
    try {
      return new FileInputStream(new File(fileName));
    }
 catch (    IOException ioe) {
      throw new IllegalArgumentException(ioe.getMessage(),ioe);
    }
  }
}
)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>FileInputStream</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>xmlVTIFromURL</MethodName>
            <MethodComment>/** 
 * This is the static method for creating functions from an URL and both parent and child tags 
 */
</MethodComment>
            <ReturnType>XmlVTI</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>urlString</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rowTag</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parentTags</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>childTags</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>InputStream [is=AccessController.doPrivileged(new PrivilegedAction&lt;InputStream&gt;(){
  public InputStream run(){
    try {
      return (new URL(urlString)).openStream();
    }
 catch (    IOException ioe) {
      throw new IllegalArgumentException(ioe.getMessage(),ioe);
    }
  }
}
)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>InputStream</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>xmlVTI</MethodName>
            <MethodComment>/** 
 * This is the static method for creating functions from an URL and both parent and child tags 
 */
</MethodComment>
            <ReturnType>XmlVTI</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xmlResource</ParamName>
                    <ParamType>InputStream</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rowTag</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parentTags</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>childTags</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String[] [allTags=new String[parentTags.size() + childTags.size()]]</InnerVar>
                <InnerVar>int [idx=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>asList</MethodName>
            <MethodComment>/** 
 * Factory method to create an ArrayList&lt;String&gt; 
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cells</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ArrayList&lt;String&gt; [retval=new ArrayList&lt;String&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRawColumn</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Get the string value of the column in the current row identified by the 1-based columnNumber. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>columnNumber</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>close</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMetaData</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ResultSetMetaData</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>next</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readRows</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Fault in the list of rows. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>DocumentBuilderFactory [factory=DocumentBuilderFactory.newInstance()]</InnerVar>
                <InnerVar>Document [doc=_builder.parse(_xmlResource)]</InnerVar>
                <InnerVar>Element [root=doc.getDocumentElement()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>factory;setFeature;[XMLConstants.FEATURE_SECURE_PROCESSING, true]</InnerMethodInvoke>
                <InnerMethodInvoke>factory;setFeature;["http://xml.org/sax/features/external-general-entities", false]</InnerMethodInvoke>
                <InnerMethodInvoke>_builder;setErrorHandler;[new XMLErrorHandler()]</InnerMethodInvoke>
                <InnerMethodInvoke>_xmlResource;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseRow</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Parse a row into columns. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rowNumber</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Element [rawRow=(Element)_rawRows.item(rowNumber)]</InnerVar>
                <InnerVar>int [columnCount=getColumnCount()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findColumnValue</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Find the value of a column inside an element. The columnNumber is 0-based. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rawRow</ParamName>
                    <ParamType>Element</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columnNumber</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [inParent=(columnNumber &lt; _firstChildTagIdx)]</InnerVar>
                <InnerVar>String [columnName=getColumnName(columnNumber + 1)]</InnerVar>
                <InnerVar>String [contents=rawRow.getAttribute(columnName)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>squeezeText</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Squeeze the text out of an Element. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>Element</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [text=null]</InnerVar>
                <InnerVar>Node [textChild=node.getFirstChild()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>closeInput</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>error</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>exception</ParamName>
                    <ParamType>SAXParseException</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;closeInput;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SAXException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fatalError</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>exception</ParamName>
                    <ParamType>SAXParseException</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;closeInput;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SAXException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>warning</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>exception</ParamName>
                    <ParamType>SAXParseException</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;closeInput;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SAXException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>