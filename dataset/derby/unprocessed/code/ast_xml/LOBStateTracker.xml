<Class>
    <Id>416</Id>
    <Package>org.apache.derby.client.am</Package>
    <ClassName>LOBStateTracker</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>LOBStateTracker  /** 
 * An object that tracks the state of large objects (LOBs) for the current row in a result set. &lt;p&gt; A LOB's state is either unpublished or published. When a LOB is published, it means that the end-user has been given a reference to the LOB object. This implies that the LOB cannot be automatically freed/released when the result set position changes (i.e. typically  {@code rs.next()}), because the LOB object must be kept valid/alive until the transaction is ended or the LOB object is explicitly freed. &lt;p&gt; This class covers two types of functionality regarding LOBs; &lt;ul&gt; &lt;li&gt;Keep track of whether a LOB column has been published or not.&lt;/li&gt; &lt;li&gt;Release LOB locators on the server.&lt;/li&gt; &lt;/ul&gt; Both functionalities will be disabled if the server doesn't support locators. If locators are enabled, they will be freed when  {@link #checkCurrentRow} iscalled. &lt;p&gt; The tracker has a notion of current row. The current row is changed by calling  {@link #checkCurrentRow checkCurrentRow}. The owner of the tracker is repsonsible for invoking the method at the correct time, and only when the cursor is positioned on a valid data row. The method must be invoked before the cursor changes the position. Note that calling the method {@link #discardState discardState} makes {@code checkCurrentRow} ignore allLOBs on the subsequent call.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>NO_OP_TRACKER</FieldName>
            <FieldType>LOBStateTracker</FieldType>
        </Field>
        <Field>
            <FieldName>columns</FieldName>
            <FieldType>int[]</FieldType>
        </Field>
        <Field>
            <FieldName>isBlob</FieldName>
            <FieldType>boolean[]</FieldType>
        </Field>
        <Field>
            <FieldName>published</FieldName>
            <FieldType>boolean[]</FieldType>
        </Field>
        <Field>
            <FieldName>doRelease</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>lastLocatorSeen</FieldName>
            <FieldType>int[]</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>LOBStateTracker</MethodName>
            <MethodComment>/** 
 * Creates a LOB state tracker for the specified configuration.
 * @param lobIndexes the 1-based indexes of the LOB columns
 * @param isBlob whether the LOB is a Blob or a Clob
 * @param doRelease whether locators shall be released
 * @see #NO_OP_TRACKER
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lobIndexes</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isBlob</ParamName>
                    <ParamType>boolean[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>doRelease</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkCurrentRow</MethodName>
            <MethodComment>/** 
 * Checks the current row, updating state and releasing locators on the server as required. &lt;p&gt; This method should only be called once per valid row in the result set.
 * @param cursor the cursor object to use for releasing the locators
 * @throws SqlException if releasing the locators on the server fails
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cursor</ParamName>
                    <ParamType>Cursor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>discardState</MethodName>
            <MethodComment>/** 
 * Discards all recorded dynamic state about LOBs. &lt;p&gt; Typically called after connection commit or rollback, as those operations will release all locators on the server automatically. There is no need to release them from the client side in this case.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>markAsPublished</MethodName>
            <MethodComment>/** 
 * Marks the specified column of the current row as published, which implies that the tracker should not release the associated locator. &lt;p&gt; Columns must be marked as published when a LOB object is created on the client, to avoid releasing the corresponding locator too early.
 * @param index 1-based column index
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>index</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>