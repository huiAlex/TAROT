<Class>
    <Id>1676</Id>
    <Package>org.apache.derby.vti</Package>
    <ClassName>VTIEnvironment</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>VTIEnvironment  /** 
 * &lt;P&gt; VTIEnvironment is the state variable created by the optimizer to help it place a Table Function in the join order. The methods of &lt;a href="./VTICosting.html"&gt;VTICosting&lt;/a&gt; use this state variable in order to pass information to each other and learn other details of the operating environment. &lt;/P&gt;
 * @see org.apache.derby.vti.VTICosting
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>isCompileTime</MethodName>
            <MethodComment>/** 
 * Return true if this instance of the Table Function has been created for compilation, false if it is for runtime execution.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOriginalSQL</MethodName>
            <MethodComment>/** 
 * Return the SQL text of the original SQL statement.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStatementIsolationLevel</MethodName>
            <MethodComment>/** 
 * Get the  specific JDBC isolation of the statement. If it returns Connection.TRANSACTION_NONE then no isolation was specified and the connection's isolation level is implied.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setSharedState</MethodName>
            <MethodComment>/** 
 * Saves an object associated with a key that will be maintained for the lifetime of the statement plan. Any previous value associated with the key is discarded. Any saved object can be seen by any JDBC Connection that has a Statement object that references the same statement plan.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>java.io.Serializable</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSharedState</MethodName>
            <MethodComment>/** 
 * Get an object associated with a key from set of objects maintained with the statement plan.
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>