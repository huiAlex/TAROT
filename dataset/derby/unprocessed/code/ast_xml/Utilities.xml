<Class>
    <Id>575</Id>
    <Package>org.apache.derbyTesting.junit</Package>
    <ClassName>Utilities</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Utilities  /** 
 * General non-JDBC related utilities. Some of these were relocated from TestUtil.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>NL</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>Utilities</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>stringToHexLiteral</MethodName>
            <MethodComment>/** 
 * Converts a string to a hex literal to assist in converting test cases that used to insert strings into bit data tables. &lt;p&gt; Converts using UTF-16BE just like the old casts used to.
 * @param s string to convert
 * @return hex literal that can be inserted into a bit column.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>byte[] [bytes]</InnerVar>
                <InnerVar>String [hexLiteral=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>convertToHexString</MethodName>
            <MethodComment>/** 
 * Convert a byte array to a hex string suitable for insert.
 * @param buf  byte array to convert
 * @return     formated string representing byte array
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>buf</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuffer [str=new StringBuffer()]</InnerVar>
                <InnerVar>String [val]</InnerVar>
                <InnerVar>int [byteVal]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>str;append;["X'"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>repeatChar</MethodName>
            <MethodComment>/** 
 * Creates a string with the specified length. &lt;p&gt; Called from various tests to test edge cases and such.
 * @param c             character to repeat
 * @param repeatCount   Number of times to repeat character
 * @return              String of repeatCount characters c
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>repeatCount</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>char[] [chArray=new char[repeatCount]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>Arrays;fill;[chArray, c.charAt(0)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>showResultSet</MethodName>
            <MethodComment>/** 
 * Print out resultSet in two dimensional array format, for use by JDBC.assertFullResultSet(rs,expectedRows) expectedRows argument. Useful while converting tests to get output in correct format.
 * @param rs result set to print
 * @throws SQLException if accessing the result set fails
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rs</ParamName>
                    <ParamType>ResultSet</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [row=0]</InnerVar>
                <InnerVar>boolean [next=rs.next()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>System.out;print;["{"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["};\n"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSysinfoLocally</MethodName>
            <MethodComment>/** 
 * Calls the public method  {@code getInfo} of the sysinfo tool withinthis JVM and returns a  {@code BufferedReader} for reading itsoutput. This is useful for obtaining system information that could be  used to verify, for example, values returned by Derby MBeans.
 * @return a buffering character-input stream containing the output fromsysinfo
 * @see org.apache.derby.tools.sysinfo#getInfo(java.io.PrintWriter out)
 */
</MethodComment>
            <ReturnType>BufferedReader</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>ByteArrayOutputStream [byteStream=new ByteArrayOutputStream(20 * 1024)]</InnerVar>
                <InnerVar>PrintWriter [pw=new PrintWriter(byteStream,true)]</InnerVar>
                <InnerVar>byte[] [outBytes=byteStream.toByteArray()]</InnerVar>
                <InnerVar>BufferedReader [sysinfoOutput=new BufferedReader(new InputStreamReader(new ByteArrayInputStream(outBytes)))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>org.apache.derby.tools.sysinfo;getInfo;[pw]</InnerMethodInvoke>
                <InnerMethodInvoke>pw;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>pw;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSysinfoFromServer</MethodName>
            <MethodComment>/** 
 * &lt;p&gt;Calls the public method  {@code getSysInfo} of the NetworkServer instance associated with the current test configuration and  returns the result as a BufferedReader, making it easy to analyse the  output line by line.&lt;/p&gt; &lt;p&gt;This is useful for obtaining system information that could be  used to verify, for example, values returned by Derby MBeans.&lt;/p&gt;
 * @return a buffering character-input stream containing the output from the server's sysinfo.
 * @see org.apache.derby.drda.NetworkServerControl#getSysinfo()
 */
</MethodComment>
            <ReturnType>BufferedReader</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>split</MethodName>
            <MethodComment>/** 
 * Splits a string around matches of the given delimiter character. Copied from org.apache.derby.iapi.util.StringUtil Where applicable, this method can be used as a substitute for {@code String.split(String regex)}, which is not available on a JSR169/Java ME platform.
 * @param str the string to be split
 * @param delim the delimiter
 * @throws NullPointerException if str is null
 */
</MethodComment>
            <ReturnType>String[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>str</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>delim</ParamName>
                    <ParamType>char</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringTokenizer [st=new StringTokenizer(str,String.valueOf(delim))]</InnerVar>
                <InnerVar>int [n=st.countTokens()]</InnerVar>
                <InnerVar>String[] [s=new String[n]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sleep</MethodName>
            <MethodComment>/** 
 * Sleeps the specified number of milliseconds.
 * @param millis sleep duration
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>millis</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>long [started=System.currentTimeMillis()]</InnerVar>
                <InnerVar>long [waited=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>formatTestClassNames</MethodName>
            <MethodComment>/** 
 * Function to eliminate known package prefixes given a class full path
 * @param test class name prefixed with package
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>test</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [COMMON_FUNCTIONTEST_PREFIX="org.apache.derbyTesting.functionTests.tests."]</InnerVar>
                <InnerVar>String [COMMON_TEST_PREFIX="org.apache.derbyTesting."]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>