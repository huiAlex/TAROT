<Class>
    <Id>778</Id>
    <Package>org.apache.derby.impl.drda</Package>
    <ClassName>DRDAString</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>DRDAString  /** 
 * This class provides functionality for reusing buffers and strings when parsing DRDA packets. A byte array representing a string is stored internally. When the string is requested as a &lt;code&gt;String&lt;/code&gt; object, the byte array is converted to a string, and the string is cached to avoid unnecessary conversion later.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>buffer</FieldName>
            <FieldType>byte[]</FieldType>
        </Field>
        <Field>
            <FieldName>writer</FieldName>
            <FieldType>DDMWriter</FieldType>
        </Field>
        <Field>
            <FieldName>modified</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>cachedString</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>DRDAString</MethodName>
            <MethodComment>/** 
 * Create a new &lt;code&gt;DRDAString&lt;/code&gt; instance.
 * @param w a &lt;code&gt;DDMWriter&lt;/code&gt; which holds current CCSidManagerand which encoding is used
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>w</ParamName>
                    <ParamType>DDMWriter</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>equalTo</MethodName>
            <MethodComment>/** 
 * Check whether the internal buffer contains the same data as another byte buffer.
 * @param buf a byte array
 * @param offset start position in the byte array
 * @param size how many bytes to read from the byte array
 * @return &lt;code&gt;true&lt;/code&gt; if the internal buffer contains thesame data as the specified byte array
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>buf</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>offset</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>size</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [len=buffer.length]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setBytes</MethodName>
            <MethodComment>/** 
 * Modify the internal byte buffer. If the new data is equal to the old data, the cached values are not cleared.
 * @param src the new bytes
 * @param offset start offset
 * @param size number of bytes to use
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>src</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>offset</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>size</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>System;arraycopy;[src, offset, buffer, 0, size]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>wasModified</MethodName>
            <MethodComment>/** 
 * Check whether the contents of the &lt;code&gt;DRDAString&lt;/code&gt; were modified in the previous call to &lt;code&gt;setBytes()&lt;/code&gt;.
 * @return &lt;code&gt;true&lt;/code&gt; if the contents were modified
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment>/** 
 * Convert the internal byte array to a string. The string value is cached.
 * @return a &lt;code&gt;String&lt;/code&gt; value
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>length</MethodName>
            <MethodComment>/** 
 * Return the length in bytes of the internal string representation.
 * @return length of internal representation
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBytes</MethodName>
            <MethodComment>/** 
 * Return the internal byte array. The returned array should not be modified, as it is used internally in &lt;code&gt;DRDAString&lt;/code&gt;. The value of the array might be modified by subsequent calls to &lt;code&gt;DRDAString.setBytes()&lt;/code&gt;.
 * @return internal buffer
 */
</MethodComment>
            <ReturnType>byte[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>