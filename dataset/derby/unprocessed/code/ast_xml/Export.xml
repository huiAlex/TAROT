<Class>
    <Id>1852</Id>
    <Package>org.apache.derby.impl.load</Package>
    <ClassName>Export</ClassName>
    <SuperClass>ExportAbstract</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Export  /** 
 * This class provides ways to export data from a table or a view into a file. Export functions provided  in this  class are called through Systement Procedures.  
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>outputFileName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>lobsFileName</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>doExport</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>Export</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>con</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>schemaName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>selectStatement</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>outputFileName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>characterDelimeter</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columnDelimeter</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>codeset</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setLobsExtFileName</MethodName>
            <MethodComment>/** 
 * Set the file name to which larg object data has to be exported, and  also set flag to indicate that large objects are exported to a  different file. 
 * @param lobsFileName  the file to to which lob data has to be exported.
 * @exception SQLException  if file name is null. 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lobsFileName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>lobsFileExists</MethodName>
            <MethodComment>/** 
 * Checks whether the lobs file exists .
 * @param fileName  the file to to which lob data has to be exported.
 * @exception SQLException  if file name is null.	
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fileName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>File [file=new File(fileName)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>dataFileExists</MethodName>
            <MethodComment>/** 
 * Checks whether the data file exists .
 * @param fileName  the file to to which lob data has to be exported.
 * @exception SQLException  if file name is null.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fileName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>File [file=new File(fileName)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fileExists</MethodName>
            <MethodComment>/** 
 * Checks if the specified file exists.
 * @param file the file to check
 * @return {@code true} if the file exists, {@code false} if not.
 * @throws SecurityException if the required privileges are missing
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>file</ParamName>
                    <ParamType>File</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>exportTable</MethodName>
            <MethodComment>/** 
 * SYSCS_EXPORT_TABLE  system Procedure from ij or from a Java application invokes  this method to perform export of  a table data to a file.
 * @param con	 The Derby database connection URL for the database containing the table
 * @param schemaName	schema name of the table data is being exported from
 * @param tableName     Name of the Table from which  data has to be exported.
 * @param outputFileName Name of the file to  which data has to be exported.
 * @param columnDelimeter  Delimiter that seperates columns in the output file
 * @param characterDelimeter  Delimiter that is used to quoate non-numeric types
 * @param codeset           Codeset that should be used to write  the data to  the file
 * @exception SQLException on errors
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>con</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>schemaName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>outputFileName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columnDelimeter</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>characterDelimeter</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>codeset</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Export [fex=new Export(con,schemaName,tableName,null,outputFileName,characterDelimeter,columnDelimeter,codeset)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>fex;doExport;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>exportTable</MethodName>
            <MethodComment>/** 
 * SYSCS_EXPORT_TABLE_LOBS_TO_EXTFILE system procedure from ij  or from a Java application invokes  this method to perform  export of a table data to a file. Large object data is exported  to a different file and the reference to it is stored in the main output file. 
 * @param con	 The Derby database connection URL for the database containing the table
 * @param schemaName  schema name of the table data is being exported from
 * @param tableName   Name of the Table from which data has to be exported.
 * @param outputFileName  Name of the file to which data has to be exported.
 * @param columnDelimeter  Delimiter that seperates columns in the output file.
 * @param characterDelimeter Delimiter that is used to quote non-numeric types.
 * @param codeset            Codeset that should be used to write the data to the file/
 * @param lobsFileName       Name of the file to which large object data has to be exported.
 * @exception SQLException on errors
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>con</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>schemaName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>outputFileName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columnDelimeter</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>characterDelimeter</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>codeset</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lobsFileName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Export [fex=new Export(con,schemaName,tableName,null,outputFileName,characterDelimeter,columnDelimeter,codeset)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>fex;setLobsExtFileName;[lobsFileName]</InnerMethodInvoke>
                <InnerMethodInvoke>fex;doExport;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>exportQuery</MethodName>
            <MethodComment>/** 
 * SYSCS_EXPORT_QUERY  system Procedure from ij or from a Java application invokes  this method to perform export of the data retrieved by select statement to a file.
 * @param con	 The Derby database connection URL for the database containing the table
 * @param selectStatement    select query that is used to export the data
 * @param outputFileName Name of the file to  which data has to be exported.
 * @param columnDelimeter  Delimiter that seperates columns in the output file
 * @param characterDelimeter  Delimiter that is used to quiote non-numeric types
 * @param codeset           Codeset that should be used to write  the data to  the file
 * @exception SQLException on errors
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>con</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>selectStatement</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>outputFileName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columnDelimeter</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>characterDelimeter</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>codeset</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Export [fex=new Export(con,null,null,selectStatement,outputFileName,characterDelimeter,columnDelimeter,codeset)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>fex;doExport;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>exportQuery</MethodName>
            <MethodComment>/** 
 * SYSCS_EXPORT_QUERY_LOBS_TO_EXTFILE system Procedure from ij  or from a Java application invokes this method to perform  export of the data retrieved by select  statement to a file. Large object data is exported to a different file  and the reference  to it is stored in the main output file. 
 * @param con	 The Derby database connection URL for the database containing the table
 * @param selectStatement    select query that is used to export the data
 * @param outputFileName Name of the file to  which data has to be exported.
 * @param columnDelimeter  Delimiter that seperates columns in the output file
 * @param characterDelimeter  Delimiter that is used to quote non-numeric types
 * @param codeset Codeset that should be used to write the data to the file
 * @param lobsFileName Name of the file to which large object data has to be exported.
 * @exception SQLException on errors
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>con</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>selectStatement</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>outputFileName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columnDelimeter</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>characterDelimeter</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>codeset</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lobsFileName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Export [fex=new Export(con,null,null,selectStatement,outputFileName,characterDelimeter,columnDelimeter,codeset)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>fex;setLobsExtFileName;[lobsFileName]</InnerMethodInvoke>
                <InnerMethodInvoke>fex;doExport;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getExportWriteData</MethodName>
            <MethodComment>/** 
 * For internal use only
 * @exception Exception if there is an error
 */
</MethodComment>
            <ReturnType>ExportWriteDataAbstract</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>