<Class>
    <Id>535</Id>
    <Package>org.apache.derbyTesting.functionTests.tests.compatibility</Package>
    <ClassName>ClientCompatibilityRunControl</ClassName>
    <SuperClass>BaseJDBCTestCase</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ClientCompatibilityRunControl  /** 
 * Spawns the JVM process running the compatibility tests for the given client version.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>LOB_TESTING_PROP</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>realName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>clientDist</FieldName>
            <FieldType>DerbyDistribution</FieldType>
        </Field>
        <Field>
            <FieldName>serverVersion</FieldName>
            <FieldType>DerbyVersion</FieldType>
        </Field>
        <Field>
            <FieldName>testingPath</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ClientCompatibilityRunControl</MethodName>
            <MethodComment>/** 
 * Creates a control object for the given client version.
 * @param client the Derby client to use
 * @param testingPath path to the testing code to use (typically{@literal derbyTesting.jar} from trunk)
 * @param serverVersion the expected server version
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>client</ParamName>
                    <ParamType>DerbyDistribution</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>testingPath</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>serverVersion</ParamName>
                    <ParamType>DerbyVersion</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testClient</MethodName>
            <MethodComment>/** 
 * Runs the client compatibility test suite with the client driver in a separate JVM. &lt;p&gt; The server is expected to be running already.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>boolean [testLOBs=Boolean.parseBoolean(getSystemProperty(LOB_TESTING_PROP))]</InnerVar>
                <InnerVar>String [classpath=clientDist.getDerbyClientJarPath() + File.pathSeparator + testingPath+ File.pathSeparator+ getJUnitPath()]</InnerVar>
                <InnerVar>String[] [cmd=new String[]{"-Dderby.tests.compat.expectedClient=" + clientDist.getVersion().toString(),"-Dderby.tests.compat.expectedServer=" + serverVersion.toString(),"-Dderby.tests.compat.testLOBs=" + testLOBs,"-Dderby.tests.basePort=" + TestConfiguration.getBasePort(),"junit.textui.TestRunner","org.apache.derbyTesting.functionTests.tests." + "compatibility.ClientCompatibilitySuite"}]</InnerVar>
                <InnerVar>Process [proc=execJavaCmd(null,classpath,cmd,null)]</InnerVar>
                <InnerVar>SpawnedProcess [spawned=new SpawnedProcess(proc,realName)]</InnerVar>
                <InnerVar>int [exitCode=spawned.complete(30 * 60 * 1000)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertTrue;[spawned.getFailMessage("client VM failed: "), exitCode == 0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;println;[spawned.getFullServerOutput()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getJUnitPath</MethodName>
            <MethodComment>/** 
 * Returns the path of the JUnit classes.
 * @return A path.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>URI [uri=VersionCombinationConfigurator.getClassURI(junit.framework.TestCase.class)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>