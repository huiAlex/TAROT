<Class>
    <Id>1487</Id>
    <Package>org.apache.derby.impl.tools.ij</Package>
    <ClassName>Main</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Main  /** 
 * This is the controller for ij. It uses two parsers: one to grab the next statement, and another to see if it is an ij command, and if so execute it. If it is not an ij command, it is treated as a JSQL statement and executed against the current connection. ijParser controls the current connection, and so contains all of the state information for executing JSQL statements. &lt;p&gt; This was written to facilitate a test harness for language functionality tests.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>utilInstance</FieldName>
            <FieldType>utilMain</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>main</MethodName>
            <MethodComment>/** 
 * ij can be used directly on a shell command line through its main program.
 * @param args allows 1 file name to be specified, from whichinput will be read; if not specified, stdin is used.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;mainCore;[args, new Main(true)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>mainCore</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>main</ParamName>
                    <ParamType>Main</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LocalizedInput [in=null]</InnerVar>
                <InnerVar>InputStream [in1=null]</InnerVar>
                <InnerVar>Main [me]</InnerVar>
                <InnerVar>String [file]</InnerVar>
                <InnerVar>String [inputResourceName]</InnerVar>
                <InnerVar>boolean [gotProp]</InnerVar>
                <InnerVar>LocalizedResource [langUtil=LocalizedResource.getInstance()]</InnerVar>
                <InnerVar>LocalizedOutput [out=langUtil.getNewOutput(System.out)]</InnerVar>
                <InnerVar>String [outFile=util.getSystemProperty("ij.outfile")]</InnerVar>
                <InnerVar>String [maxDisplayWidth=util.getSystemProperty("maximumDisplayWidth")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>langUtil;init;[]</InnerMethodInvoke>
                <InnerMethodInvoke>main;initAppUI;[]</InnerMethodInvoke>
                <InnerMethodInvoke>me;go;[in, out]</InnerMethodInvoke>
                <InnerMethodInvoke>in;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>out;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>FileInputStream</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FileNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>FileOutputStream</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>FileOutputStream [out=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMain</MethodName>
            <MethodComment>/** 
 * Get the right Main (according to  the JDBC version.
 * @return	The right main (according to the JDBC version).
 */
</MethodComment>
            <ReturnType>Main</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>LocalizedOutput</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getutilMain</MethodName>
            <MethodComment>/** 
 * Get the right utilMain (according to  the JDBC version.
 * @return	The right utilMain (according to the JDBC version).
 */
</MethodComment>
            <ReturnType>utilMain</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>numConnections</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>LocalizedOutput</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getutilMain</MethodName>
            <MethodComment>/** 
 * Get the right utilMain (according to the JDBC version. This overload allows the choice of whether the system properties will be used or not.
 * @return	The right utilMain (according to the JDBC version).
 */
</MethodComment>
            <ReturnType>utilMain</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>numConnections</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>LocalizedOutput</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>loadSystemProperties</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>go</MethodName>
            <MethodComment>/** 
 * Give a shortcut to go on the utilInstance so we don't expose utilMain.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>in</ParamName>
                    <ParamType>LocalizedInput</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>LocalizedOutput</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LocalizedInput[] [inA={in}]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>utilInstance;go;[inA, out]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>Main</MethodName>
            <MethodComment>/** 
 * create an ij tool waiting to be given input and output streams.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>Main</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>LocalizedOutput</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>utilInstance;initFromEnvironment;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>Main</MethodName>
            <MethodComment>/** 
 * This constructor is only used so that we  can get to the right Main based on the JDBC version.  We don't do any work in this constructor and we only use this object to get to the right Main via getMain().
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>trash</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initAppUI</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>LocalizedResource;getInstance;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>