<Class>
    <Id>1459</Id>
    <Package>org.apache.derby.client.am</Package>
    <ClassName>EncryptionManager</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>agent_</FieldName>
            <FieldType>Agent</FieldType>
        </Field>
        <Field>
            <FieldName>modulusBytes__</FieldName>
            <FieldType>byte</FieldType>
        </Field>
        <Field>
            <FieldName>modulus__</FieldName>
            <FieldType>BigInteger</FieldType>
        </Field>
        <Field>
            <FieldName>baseBytes__</FieldName>
            <FieldType>byte</FieldType>
        </Field>
        <Field>
            <FieldName>base__</FieldName>
            <FieldType>BigInteger</FieldType>
        </Field>
        <Field>
            <FieldName>exponential_length__</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>paramSpec_</FieldName>
            <FieldType>DHParameterSpec</FieldType>
        </Field>
        <Field>
            <FieldName>keyPairGenerator_</FieldName>
            <FieldType>KeyPairGenerator</FieldType>
        </Field>
        <Field>
            <FieldName>keyPair_</FieldName>
            <FieldType>KeyPair</FieldType>
        </Field>
        <Field>
            <FieldName>keyAgreement_</FieldName>
            <FieldType>KeyAgreement</FieldType>
        </Field>
        <Field>
            <FieldName>token_</FieldName>
            <FieldType>byte[]</FieldType>
        </Field>
        <Field>
            <FieldName>secKey_</FieldName>
            <FieldType>byte[]</FieldType>
        </Field>
        <Field>
            <FieldName>secretKeyFactory_</FieldName>
            <FieldType>SecretKeyFactory</FieldType>
        </Field>
        <Field>
            <FieldName>providerName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>provider</FieldName>
            <FieldType>Provider</FieldType>
        </Field>
        <Field>
            <FieldName>messageDigest</FieldName>
            <FieldType>MessageDigest</FieldType>
        </Field>
        <Field>
            <FieldName>secureRandom</FieldName>
            <FieldType>SecureRandom</FieldType>
        </Field>
        <Field>
            <FieldName>SECMEC_USRSSBPWD_SEED_LEN</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SECMEC_USRSSBPWD_PWDSEQS</FieldName>
            <FieldType>byte</FieldType>
        </Field>
        <Field>
            <FieldName>SHA_1_PRNG_ALGORITHM</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>SHA_1_DIGEST_ALGORITHM</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>hex_table</FieldName>
            <FieldType>char[]</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>EncryptionManager</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>agent</ParamName>
                    <ParamType>Agent</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>EncryptionManager</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>agent</ParamName>
                    <ParamType>Agent</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>algorithm</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>obtainPublicKey</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>byte[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>BigInteger [aPub=((DHPublicKey)keyPair_.getPublic()).getY()]</InnerVar>
                <InnerVar>byte[] [aPubKey=aPub.toByteArray()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>calculateEncryptionToken</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>byte[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>securityMechanism</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>initVector</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>byte[] [token=new byte[8]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>keyParityCheck</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>byte [temp]</InnerVar>
                <InnerVar>int [changeParity]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generatePrivateKey</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>byte[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>targetPublicKey</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>encryptData</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>byte[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>plainText</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>securityMechanism</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>initVector</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>targetPublicKey</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>byte[] [cipherText=null]</InnerVar>
                <InnerVar>Key [key=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>decryptData</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>byte[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cipherText</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>securityMechanism</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>initVector</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>targetPublicKey</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>byte[] [plainText=null]</InnerVar>
                <InnerVar>Key [key=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>resetSecurityKeys</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateSeed</MethodName>
            <MethodComment>/** 
 * This method generates an 8-Byte random seed for the client (source).
 * @return a random 8-Byte seed.
 */
</MethodComment>
            <ReturnType>byte[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>byte [randomSeedBytes[]=new byte[SECMEC_USRSSBPWD_SEED_LEN]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>secureRandom;setSeed;[secureRandom.generateSeed(SECMEC_USRSSBPWD_SEED_LEN)]</InnerMethodInvoke>
                <InnerMethodInvoke>secureRandom;nextBytes;[randomSeedBytes]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>substitutePassword</MethodName>
            <MethodComment>/** 
 * Strong Password Substitution (USRSSBPWD). This method generates a password substitute to send to the target server. Substitution algorithm works as follow: PW_TOKEN = SHA-1(PW, ID) The password (PW) and user name (ID) can be of any length greater than or equal to 1 byte. The client generates a 20-byte password substitute (PW_SUB) as follows: PW_SUB = SHA-1(PW_TOKEN, RDr, RDs, ID, PWSEQs) w/ (RDs) as the random client seed and (RDr) as the server one. See PWDSSB - Strong Password Substitution Security Mechanism (DRDA Vol.3 - P.650)
 * @param userName The user's name
 * @param password The user's password
 * @param sourceSeed_ random client seed (RDs)
 * @param targetSeed_ random server seed (RDr)
 * @return a password substitute.
 */
</MethodComment>
            <ReturnType>byte[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>userName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>password</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sourceSeed_</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>targetSeed_</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [ID_PATTERN_NEW_SCHEME="3b60"]</InnerVar>
                <InnerVar>byte[] [passwordSubstitute]</InnerVar>
                <InnerVar>byte[] [encryptVal=messageDigest.digest()]</InnerVar>
                <InnerVar>String [hexString=ID_PATTERN_NEW_SCHEME + this.toHexString(encryptVal,0,encryptVal.length)]</InnerVar>
                <InnerVar>byte[] [userBytes=this.toHexByte(userName,0,userName.length())]</InnerVar>
                <InnerVar>byte[] [passwordToken=messageDigest.digest()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>messageDigest;reset;[]</InnerMethodInvoke>
                <InnerMethodInvoke>messageDigest;update;[this.toHexByte(password,0,password.length())]</InnerMethodInvoke>
                <InnerMethodInvoke>messageDigest;update;[userBytes]</InnerMethodInvoke>
                <InnerMethodInvoke>messageDigest;update;[this.toHexByte(hexString,0,hexString.length())]</InnerMethodInvoke>
                <InnerMethodInvoke>messageDigest;update;[passwordToken]</InnerMethodInvoke>
                <InnerMethodInvoke>messageDigest;update;[targetSeed_]</InnerMethodInvoke>
                <InnerMethodInvoke>messageDigest;update;[sourceSeed_]</InnerMethodInvoke>
                <InnerMethodInvoke>messageDigest;update;[userBytes]</InnerMethodInvoke>
                <InnerMethodInvoke>messageDigest;update;[SECMEC_USRSSBPWD_PWDSEQS]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toHexString</MethodName>
            <MethodComment>/** 
 * Convert a byte array to a String with a hexadecimal format. The String may be converted back to a byte array using fromHexString. &lt;BR&gt; For each byte (b) two characters are generated, the first character represents the high nibble (4 bits) in hexadecimal ( {@code b &amp; 0xf0}), the second character represents the low nibble ( {@code b &amp; 0x0f}). &lt;BR&gt; The byte at  {@code data[offset]} is represented by the first twocharacters in the returned String.
 * @param data    byte array
 * @param offset  starting byte (zero based) to convert.
 * @param length  number of bytes to convert.
 * @return the String (with hexidecimal format) form of the byte array
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>data</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>offset</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>length</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuilder [s=new StringBuilder(length * 2)]</InnerVar>
                <InnerVar>int [end=offset + length]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toHexByte</MethodName>
            <MethodComment>/** 
 * Convert a string into a byte array in hex format. &lt;BR&gt; For each character (b) two bytes are generated, the first byte  represents the high nibble (4 bits) in hexadecimal ( {@code b &amp; 0xf0}), the second byte represents the low nibble ( {@code b &amp; 0x0f}). &lt;BR&gt; The character at  {@code str.charAt(0)} is represented by thefirst two bytes in the returned String.
 * @param str string
 * @param offset  starting character (zero based) to convert.
 * @param length  number of characters to convert.
 * @return the byte[]  (with hexadecimal format) form of the string (str)
 */
</MethodComment>
            <ReturnType>byte[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>str</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>offset</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>length</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>byte[] [data=new byte[(length - offset) * 2]]</InnerVar>
                <InnerVar>int [end=offset + length]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>