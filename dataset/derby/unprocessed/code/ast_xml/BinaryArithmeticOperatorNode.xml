<Class>
    <Id>210</Id>
    <Package>org.apache.derby.impl.sql.compile</Package>
    <ClassName>BinaryArithmeticOperatorNode</ClassName>
    <SuperClass>BinaryOperatorNode</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>BinaryArithmeticOperatorNode  /** 
 * This node represents a binary arithmetic operator, like + or *.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>K_DIVIDE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>K_MINUS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>K_PLUS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>K_TIMES</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>K_MOD</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>kind</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>BinaryArithmeticOperatorNode</MethodName>
            <MethodComment>/** 
 * Constructor for a BinaryArithmeticOperatorNode
 * @param kind          The kind of operator
 * @param leftOperand	The left operand
 * @param rightOperand	The right operand
 * @param cm            The context manager
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>kind</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>leftOperand</ParamName>
                    <ParamType>ValueNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rightOperand</ParamName>
                    <ParamType>ValueNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cm</ParamName>
                    <ParamType>ContextManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [op]</InnerVar>
                <InnerVar>String [mNam]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setOperator;[op]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setMethodName;[mNam]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>bindExpression</MethodName>
            <MethodComment>/** 
 * Bind this operator
 * @param fromList			The query's FROM list
 * @param subqueryList		The subquery list being built as we find SubqueryNodes
 * @param aggregates        The aggregate list being built as we find AggregateNodes
 * @return	The new top of the expression tree.
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>ValueNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fromList</ParamName>
                    <ParamType>FromList</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>subqueryList</ParamName>
                    <ParamType>SubqueryList</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>aggregates</ParamName>
                    <ParamType>AggregateNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>TypeId [leftType=leftOperand.getTypeId()]</InnerVar>
                <InnerVar>TypeId [rightType=rightOperand.getTypeId()]</InnerVar>
                <InnerVar>DataTypeDescriptor [leftDTS=leftOperand.getTypeServices()]</InnerVar>
                <InnerVar>DataTypeDescriptor [rightDTS=rightOperand.getTypeServices()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setType;[leftOperand.getTypeCompiler().resolveArithmeticOperation(leftOperand.getTypeServices(),rightOperand.getTypeServices(),operator)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isSameNodeKind</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>o</ParamName>
                    <ParamType>ValueNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>