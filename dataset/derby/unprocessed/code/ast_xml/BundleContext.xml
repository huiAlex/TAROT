<Class>
    <Id>2155</Id>
    <Package>org.osgi.framework</Package>
    <ClassName>BundleContext</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>BundleContext  /** 
 * A bundle's execution context within the Framework. The context is used to grant access to other methods so that this bundle can interact with the Framework. &lt;p&gt; &lt;code&gt;BundleContext&lt;/code&gt; methods allow a bundle to: &lt;ul&gt; &lt;li&gt;Subscribe to events published by the Framework. &lt;li&gt;Register service objects with the Framework service registry. &lt;li&gt;Retrieve &lt;code&gt;ServiceReferences&lt;/code&gt; from the Framework service registry. &lt;li&gt;Get and release service objects for a referenced service. &lt;li&gt;Install new bundles in the Framework. &lt;li&gt;Get the list of bundles installed in the Framework. &lt;li&gt;Get the  {@link Bundle} object for a bundle.&lt;li&gt;Create &lt;code&gt;File&lt;/code&gt; objects for files in a persistent storage area provided for the bundle by the Framework. &lt;/ul&gt; &lt;p&gt; A &lt;code&gt;BundleContext&lt;/code&gt; object will be created and provided to the bundle associated with this context when it is started using the {@link BundleActivator#start} method. The same &lt;code&gt;BundleContext&lt;/code&gt;object will be passed to the bundle associated with this context when it is stopped using the  {@link BundleActivator#stop} method. A&lt;code&gt;BundleContext&lt;/code&gt; object is generally for the private use of its associated bundle and is not meant to be shared with other bundles in the OSGi environment. &lt;p&gt; The &lt;code&gt;Bundle&lt;/code&gt; object associated with a &lt;code&gt;BundleContext&lt;/code&gt; object is called the &lt;em&gt;context bundle&lt;/em&gt;. &lt;p&gt; The &lt;code&gt;BundleContext&lt;/code&gt; object is only valid during the execution of its context bundle; that is, during the period from when the context bundle is in the &lt;code&gt;STARTING&lt;/code&gt;, &lt;code&gt;STOPPING&lt;/code&gt;, and &lt;code&gt;ACTIVE&lt;/code&gt; bundle states. If the &lt;code&gt;BundleContext&lt;/code&gt; object is used subsequently, an &lt;code&gt;IllegalStateException&lt;/code&gt; must be thrown. The &lt;code&gt;BundleContext&lt;/code&gt; object must never be reused after its context bundle is stopped. &lt;p&gt; The Framework is the only entity that can create &lt;code&gt;BundleContext&lt;/code&gt; objects and they are only valid within the Framework that created them.
 * @ThreadSafe
 * @version $Revision: 1.22 $
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getProperty</MethodName>
            <MethodComment>/** 
 * Returns the value of the specified property. If the key is not found in the Framework properties, the system properties are then searched. The method returns &lt;code&gt;null&lt;/code&gt; if the property is not found. &lt;p&gt; The Framework defines the following standard property keys: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; {@link Constants#FRAMEWORK_VERSION} - The OSGi Framework version.&lt;/li&gt; &lt;li&gt; {@link Constants#FRAMEWORK_VENDOR} - The Framework implementationvendor.&lt;/li&gt; &lt;li&gt; {@link Constants#FRAMEWORK_LANGUAGE} - The language being used. SeeISO 639 for possible values.&lt;/li&gt; &lt;li&gt; {@link Constants#FRAMEWORK_OS_NAME} - The host computer operatingsystem.&lt;/li&gt; &lt;li&gt; {@link Constants#FRAMEWORK_OS_VERSION} - The host computeroperating system version number.&lt;/li&gt; &lt;li&gt; {@link Constants#FRAMEWORK_PROCESSOR} - The host computer processorname.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt; All bundles must have permission to read these properties. &lt;p&gt; Note: The last four standard properties are used by the {@link Constants#BUNDLE_NATIVECODE} &lt;code&gt;Manifest&lt;/code&gt; header'smatching algorithm for selecting native language code.
 * @param key The name of the requested property.
 * @return The value of the requested property, or &lt;code&gt;null&lt;/code&gt; ifthe property is undefined.
 * @throws java.lang.SecurityException If the caller does not have theappropriate &lt;code&gt;PropertyPermission&lt;/code&gt; to read the property, and the Java Runtime Environment supports permissions.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBundle</MethodName>
            <MethodComment>/** 
 * Returns the &lt;code&gt;Bundle&lt;/code&gt; object associated with this &lt;code&gt;BundleContext&lt;/code&gt;. This bundle is called the context bundle.
 * @return The &lt;code&gt;Bundle&lt;/code&gt; object associated with this&lt;code&gt;BundleContext&lt;/code&gt;.
 * @throws java.lang.IllegalStateException If this BundleContext is nolonger valid.
 */
</MethodComment>
            <ReturnType>Bundle</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>installBundle</MethodName>
            <MethodComment>/** 
 * Installs a bundle from the specified location string. A bundle is obtained from &lt;code&gt;location&lt;/code&gt; as interpreted by the Framework in an implementation dependent manner. &lt;p&gt; Every installed bundle is uniquely identified by its location string, typically in the form of a URL. &lt;p&gt; The following steps are required to install a bundle: &lt;ol&gt; &lt;li&gt;If a bundle containing the same location string is already installed, the &lt;code&gt;Bundle&lt;/code&gt; object for that bundle is returned. &lt;li&gt;The bundle's content is read from the location string. If this fails, a  {@link BundleException} is thrown.&lt;li&gt;The bundle's &lt;code&gt;Bundle-NativeCode&lt;/code&gt; dependencies are resolved. If this fails, a &lt;code&gt;BundleException&lt;/code&gt; is thrown. &lt;li&gt;The bundle's associated resources are allocated. The associated resources minimally consist of a unique identifier and a persistent storage area if the platform has file system support. If this step fails, a &lt;code&gt;BundleException&lt;/code&gt; is thrown. &lt;li&gt;If the bundle has declared an Bundle-RequiredExecutionEnvironment header, then the listed execution environments must be verified against the installed execution environments. If none of the listed execution  environments match an installed execution environment, a &lt;code&gt;BundleException&lt;/code&gt; must be thrown. &lt;li&gt;The bundle's state is set to &lt;code&gt;INSTALLED&lt;/code&gt;. &lt;li&gt;A bundle event of type  {@link BundleEvent#INSTALLED} is fired.&lt;li&gt;The &lt;code&gt;Bundle&lt;/code&gt; object for the newly or previously installed bundle is returned. &lt;/ol&gt; &lt;b&gt;Postconditions, no exceptions thrown &lt;/b&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;getState()&lt;/code&gt; in {&lt;code&gt;INSTALLED&lt;/code&gt;,&lt;code&gt;RESOLVED&lt;/code&gt;}. &lt;li&gt;Bundle has a unique ID. &lt;/ul&gt; &lt;b&gt;Postconditions, when an exception is thrown &lt;/b&gt; &lt;ul&gt; &lt;li&gt;Bundle is not installed and no trace of the bundle exists. &lt;/ul&gt;
 * @param location The location identifier of the bundle to install.
 * @return The &lt;code&gt;Bundle&lt;/code&gt; object of the installed bundle.
 * @throws BundleException If the installation failed.
 * @throws java.lang.SecurityException If the caller does not have theappropriate &lt;code&gt;AdminPermission[installed bundle,LIFECYCLE]&lt;/code&gt;, and the Java Runtime Environment supports permissions.
 * @throws java.lang.IllegalStateException If this BundleContext is nolonger valid.
 */
</MethodComment>
            <ReturnType>Bundle</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>location</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>BundleException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>installBundle</MethodName>
            <MethodComment>/** 
 * Installs a bundle from the specified &lt;code&gt;InputStream&lt;/code&gt; object. &lt;p&gt; This method performs all of the steps listed in &lt;code&gt;BundleContext.installBundle(String location)&lt;/code&gt;, except that the bundle's content will be read from the &lt;code&gt;InputStream&lt;/code&gt; object. The location identifier string specified will be used as the identity of the bundle. &lt;p&gt; This method must always close the &lt;code&gt;InputStream&lt;/code&gt; object, even if an exception is thrown.
 * @param location The location identifier of the bundle to install.
 * @param input The &lt;code&gt;InputStream&lt;/code&gt; object from which this bundlewill be read.
 * @return The &lt;code&gt;Bundle&lt;/code&gt; object of the installed bundle.
 * @throws BundleException If the provided stream cannot be read or theinstallation failed.
 * @throws java.lang.SecurityException If the caller does not have theappropriate &lt;code&gt;AdminPermission[installed bundle,LIFECYCLE]&lt;/code&gt;, and the Java Runtime Environment supports permissions.
 * @throws java.lang.IllegalStateException If this BundleContext is nolonger valid.
 * @see #installBundle(java.lang.String)
 */
</MethodComment>
            <ReturnType>Bundle</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>location</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>InputStream</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>BundleException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBundle</MethodName>
            <MethodComment>/** 
 * Returns the bundle with the specified identifier.
 * @param id The identifier of the bundle to retrieve.
 * @return A &lt;code&gt;Bundle&lt;/code&gt; object or &lt;code&gt;null&lt;/code&gt; if theidentifier does not match any installed bundle.
 */
</MethodComment>
            <ReturnType>Bundle</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>id</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBundles</MethodName>
            <MethodComment>/** 
 * Returns a list of all installed bundles. &lt;p&gt; This method returns a list of all bundles installed in the OSGi environment at the time of the call to this method. However, since the Framework is a very dynamic environment, bundles can be installed or uninstalled at anytime.
 * @return An array of &lt;code&gt;Bundle&lt;/code&gt; objects, one object perinstalled bundle.
 */
</MethodComment>
            <ReturnType>Bundle[]</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addServiceListener</MethodName>
            <MethodComment>/** 
 * Adds the specified &lt;code&gt;ServiceListener&lt;/code&gt; object with the specified &lt;code&gt;filter&lt;/code&gt; to the context bundle's list of listeners. See  {@link Filter} for a description of the filter syntax.&lt;code&gt;ServiceListener&lt;/code&gt; objects are notified when a service has a lifecycle state change. &lt;p&gt; If the context bundle's list of listeners already contains a listener &lt;code&gt;l&lt;/code&gt; such that &lt;code&gt;(l==listener)&lt;/code&gt;, then this method replaces that listener's filter (which may be &lt;code&gt;null&lt;/code&gt;) with the specified one (which may be &lt;code&gt;null&lt;/code&gt;). &lt;p&gt; The listener is called if the filter criteria is met. To filter based upon the class of the service, the filter should reference the {@link Constants#OBJECTCLASS} property. If &lt;code&gt;filter&lt;/code&gt; is&lt;code&gt;null&lt;/code&gt;, all services are considered to match the filter. &lt;p&gt; When using a &lt;code&gt;filter&lt;/code&gt;, it is possible that the &lt;code&gt;ServiceEvent&lt;/code&gt;s for the complete lifecycle of a service will not be delivered to the listener. For example, if the &lt;code&gt;filter&lt;/code&gt; only matches when the property &lt;code&gt;x&lt;/code&gt; has the value &lt;code&gt;1&lt;/code&gt;, the listener will not be called if the service is registered with the property &lt;code&gt;x&lt;/code&gt; not set to the value &lt;code&gt;1&lt;/code&gt;. Subsequently, when the service is modified setting property &lt;code&gt;x&lt;/code&gt; to the value &lt;code&gt;1&lt;/code&gt;, the filter will match and the listener will be called with a &lt;code&gt;ServiceEvent&lt;/code&gt; of type &lt;code&gt;MODIFIED&lt;/code&gt;. Thus, the listener will not be called with a &lt;code&gt;ServiceEvent&lt;/code&gt; of type &lt;code&gt;REGISTERED&lt;/code&gt;. &lt;p&gt; If the Java Runtime Environment supports permissions, the &lt;code&gt;ServiceListener&lt;/code&gt; object will be notified of a service event only if the bundle that is registering it has the &lt;code&gt;ServicePermission&lt;/code&gt; to get the service using at least one of the named classes the service was registered under.
 * @param listener The &lt;code&gt;ServiceListener&lt;/code&gt; object to be added.
 * @param filter The filter criteria.
 * @throws InvalidSyntaxException If &lt;code&gt;filter&lt;/code&gt; contains aninvalid filter string that cannot be parsed.
 * @throws java.lang.IllegalStateException If this BundleContext is nolonger valid.
 * @see ServiceEvent
 * @see ServiceListener
 * @see ServicePermission
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>listener</ParamName>
                    <ParamType>ServiceListener</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>filter</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>InvalidSyntaxException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addServiceListener</MethodName>
            <MethodComment>/** 
 * Adds the specified &lt;code&gt;ServiceListener&lt;/code&gt; object to the context bundle's list of listeners. &lt;p&gt; This method is the same as calling &lt;code&gt;BundleContext.addServiceListener(ServiceListener listener, String filter)&lt;/code&gt; with &lt;code&gt;filter&lt;/code&gt; set to &lt;code&gt;null&lt;/code&gt;.
 * @param listener The &lt;code&gt;ServiceListener&lt;/code&gt; object to be added.
 * @throws java.lang.IllegalStateException If this BundleContext is nolonger valid.
 * @see #addServiceListener(ServiceListener,String)
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>listener</ParamName>
                    <ParamType>ServiceListener</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeServiceListener</MethodName>
            <MethodComment>/** 
 * Removes the specified &lt;code&gt;ServiceListener&lt;/code&gt; object from the context bundle's list of listeners. &lt;p&gt; If &lt;code&gt;listener&lt;/code&gt; is not contained in this context bundle's list of listeners, this method does nothing.
 * @param listener The &lt;code&gt;ServiceListener&lt;/code&gt; to be removed.
 * @throws java.lang.IllegalStateException If this BundleContext is nolonger valid.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>listener</ParamName>
                    <ParamType>ServiceListener</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addBundleListener</MethodName>
            <MethodComment>/** 
 * Adds the specified &lt;code&gt;BundleListener&lt;/code&gt; object to the context bundle's list of listeners if not already present. BundleListener objects are notified when a bundle has a lifecycle state change. &lt;p&gt; If the context bundle's list of listeners already contains a listener &lt;code&gt;l&lt;/code&gt; such that &lt;code&gt;(l==listener)&lt;/code&gt;, this method does nothing.
 * @param listener The &lt;code&gt;BundleListener&lt;/code&gt; to be added.
 * @throws java.lang.IllegalStateException If this BundleContext is nolonger valid.
 * @throws java.lang.SecurityException If listener is a&lt;code&gt;SynchronousBundleListener&lt;/code&gt; and the caller does not have the appropriate &lt;code&gt;AdminPermission[context bundle,LISTENER]&lt;/code&gt;, and the Java Runtime Environment supports permissions.
 * @see BundleEvent
 * @see BundleListener
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>listener</ParamName>
                    <ParamType>BundleListener</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeBundleListener</MethodName>
            <MethodComment>/** 
 * Removes the specified &lt;code&gt;BundleListener&lt;/code&gt; object from the context bundle's list of listeners. &lt;p&gt; If &lt;code&gt;listener&lt;/code&gt; is not contained in the context bundle's list of listeners, this method does nothing.
 * @param listener The &lt;code&gt;BundleListener&lt;/code&gt; object to be removed.
 * @throws java.lang.IllegalStateException If this BundleContext is nolonger valid.
 * @throws java.lang.SecurityException If listener is a&lt;code&gt;SynchronousBundleListener&lt;/code&gt; and the caller does not have the appropriate &lt;code&gt;AdminPermission[context bundle,LISTENER]&lt;/code&gt;, and the Java Runtime Environment supports permissions.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>listener</ParamName>
                    <ParamType>BundleListener</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addFrameworkListener</MethodName>
            <MethodComment>/** 
 * Adds the specified &lt;code&gt;FrameworkListener&lt;/code&gt; object to the context bundle's list of listeners if not already present. FrameworkListeners are notified of general Framework events. &lt;p&gt; If the context bundle's list of listeners already contains a listener &lt;code&gt;l&lt;/code&gt; such that &lt;code&gt;(l==listener)&lt;/code&gt;, this method does nothing.
 * @param listener The &lt;code&gt;FrameworkListener&lt;/code&gt; object to be added.
 * @throws java.lang.IllegalStateException If this BundleContext is nolonger valid.
 * @see FrameworkEvent
 * @see FrameworkListener
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>listener</ParamName>
                    <ParamType>FrameworkListener</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeFrameworkListener</MethodName>
            <MethodComment>/** 
 * Removes the specified &lt;code&gt;FrameworkListener&lt;/code&gt; object from the context bundle's list of listeners. &lt;p&gt; If &lt;code&gt;listener&lt;/code&gt; is not contained in the context bundle's list of listeners, this method does nothing.
 * @param listener The &lt;code&gt;FrameworkListener&lt;/code&gt; object to beremoved.
 * @throws java.lang.IllegalStateException If this BundleContext is nolonger valid.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>listener</ParamName>
                    <ParamType>FrameworkListener</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>registerService</MethodName>
            <MethodComment>/** 
 * Registers the specified service object with the specified properties under the specified class names into the Framework. A &lt;code&gt;ServiceRegistration&lt;/code&gt; object is returned. The &lt;code&gt;ServiceRegistration&lt;/code&gt; object is for the private use of the bundle registering the service and should not be shared with other bundles. The registering bundle is defined to be the context bundle. Other bundles can locate the service by using either the {@link #getServiceReferences} or {@link #getServiceReference} method.&lt;p&gt; A bundle can register a service object that implements the {@link ServiceFactory} interface to have more flexibility in providingservice objects to other bundles. &lt;p&gt; The following steps are required to register a service: &lt;ol&gt; &lt;li&gt;If &lt;code&gt;service&lt;/code&gt; is not a &lt;code&gt;ServiceFactory&lt;/code&gt;, an &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown if &lt;code&gt;service&lt;/code&gt; is not an &lt;code&gt;instanceof&lt;/code&gt; all the classes named. &lt;li&gt;The Framework adds these service properties to the specified &lt;code&gt;Dictionary&lt;/code&gt; (which may be &lt;code&gt;null&lt;/code&gt;): a property named  {@link Constants#SERVICE_ID} identifying the registration number ofthe service and a property named  {@link Constants#OBJECTCLASS} containingall the specified classes. If any of these properties have already been specified by the registering bundle, their values will be overwritten by the Framework. &lt;li&gt;The service is added to the Framework service registry and may now be used by other bundles. &lt;li&gt;A service event of type  {@link ServiceEvent#REGISTERED} isfired. &lt;li&gt;A &lt;code&gt;ServiceRegistration&lt;/code&gt; object for this registration is returned. &lt;/ol&gt;
 * @param clazzes The class names under which the service can be located.The class names in this array will be stored in the service's properties under the key  {@link Constants#OBJECTCLASS}.
 * @param service The service object or a &lt;code&gt;ServiceFactory&lt;/code&gt;object.
 * @param properties The properties for this service. The keys in theproperties object must all be &lt;code&gt;String&lt;/code&gt; objects. See {@link Constants} for a list of standard service property keys.Changes should not be made to this object after calling this method. To update the service's properties the {@link ServiceRegistration#setProperties} method must be called.The set of properties may be &lt;code&gt;null&lt;/code&gt; if the service has no properties.
 * @return A &lt;code&gt;ServiceRegistration&lt;/code&gt; object for use by the bundleregistering the service to update the service's properties or to unregister the service.
 * @throws java.lang.IllegalArgumentException If one of the following istrue: &lt;ul&gt; &lt;li&gt;&lt;code&gt;service&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;. &lt;li&gt;&lt;code&gt;service&lt;/code&gt; is not a &lt;code&gt;ServiceFactory&lt;/code&gt; object and is not an instance of all the named classes in &lt;code&gt;clazzes&lt;/code&gt;. &lt;li&gt;&lt;code&gt;properties&lt;/code&gt; contains case variants of the same key name. &lt;/ul&gt;
 * @throws java.lang.SecurityException If the caller does not have the&lt;code&gt;ServicePermission&lt;/code&gt; to register the service for all the named classes and the Java Runtime Environment supports permissions.
 * @throws java.lang.IllegalStateException If this BundleContext is nolonger valid.
 * @see ServiceRegistration
 * @see ServiceFactory
 */
</MethodComment>
            <ReturnType>ServiceRegistration</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clazzes</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>service</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>properties</ParamName>
                    <ParamType>Dictionary</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>registerService</MethodName>
            <MethodComment>/** 
 * Registers the specified service object with the specified properties under the specified class name with the Framework. &lt;p&gt; This method is otherwise identical to {@link #registerService(java.lang.String[],java.lang.Object,java.util.Dictionary)} and is provided as a convenience when&lt;code&gt;service&lt;/code&gt; will only be registered under a single class name. Note that even in this case the value of the service's {@link Constants#OBJECTCLASS} property will be an array of strings,rather than just a single string.
 * @param clazz The class name under which the service can be located.
 * @param service The service object or a &lt;code&gt;ServiceFactory&lt;/code&gt;object.
 * @param properties The properties for this service. 
 * @return A &lt;code&gt;ServiceRegistration&lt;/code&gt; object for use by the bundleregistering the service to update the service's properties or to unregister the service.
 * @throws java.lang.IllegalStateException If this BundleContext is nolonger valid.
 * @see #registerService(java.lang.String[],java.lang.Object,java.util.Dictionary)
 */
</MethodComment>
            <ReturnType>ServiceRegistration</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>service</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>properties</ParamName>
                    <ParamType>Dictionary</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getServiceReferences</MethodName>
            <MethodComment>/** 
 * Returns an array of &lt;code&gt;ServiceReference&lt;/code&gt; objects. The returned array of &lt;code&gt;ServiceReference&lt;/code&gt; objects contains services that were registered under the specified class, match the specified filter criteria, and the packages for the class names under which the services were registered match the context bundle's packages as defined in {@link ServiceReference#isAssignableTo(Bundle,String)}. &lt;p&gt; The list is valid at the time of the call to this method, however since the Framework is a very dynamic environment, services can be modified or unregistered at anytime. &lt;p&gt; &lt;code&gt;filter&lt;/code&gt; is used to select the registered service whose properties objects contain keys and values which satisfy the filter. See {@link Filter} for a description of the filter string syntax.&lt;p&gt; If &lt;code&gt;filter&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, all registered services are considered to match the filter. If &lt;code&gt;filter&lt;/code&gt; cannot be parsed, an  {@link InvalidSyntaxException} will be thrown with a humanreadable message where the filter became unparsable. &lt;p&gt; The following steps are required to select a set of &lt;code&gt;ServiceReference&lt;/code&gt; objects: &lt;ol&gt; &lt;li&gt;If the filter string is not &lt;code&gt;null&lt;/code&gt;, the filter string is parsed and the set &lt;code&gt;ServiceReference&lt;/code&gt; objects of registered services that satisfy the filter is produced. If the filter string is &lt;code&gt;null&lt;/code&gt;, then all registered services are considered to satisfy the filter. &lt;li&gt;If the Java Runtime Environment supports permissions, the set of &lt;code&gt;ServiceReference&lt;/code&gt; objects produced by the previous step is reduced by checking that the caller has the &lt;code&gt;ServicePermission&lt;/code&gt; to get at least one of the class names under which the service was registered. If the caller does not have the correct permission for a particular &lt;code&gt;ServiceReference&lt;/code&gt; object, then it is removed from the set. &lt;li&gt;If &lt;code&gt;clazz&lt;/code&gt; is not &lt;code&gt;null&lt;/code&gt;, the set is further reduced to those services that are an &lt;code&gt;instanceof&lt;/code&gt; and were registered under the specified class. The complete list of classes of which a service is an instance and which were specified when the service was registered is available from the service's {@link Constants#OBJECTCLASS} property.&lt;li&gt;The set is reduced one final time by cycling through each &lt;code&gt;ServiceReference&lt;/code&gt; object and calling {@link ServiceReference#isAssignableTo(Bundle,String)} with the contextbundle and each class name under which the &lt;code&gt;ServiceReference&lt;/code&gt; object was registered. For any given &lt;code&gt;ServiceReference&lt;/code&gt; object, if any call to {@link ServiceReference#isAssignableTo(Bundle,String)} returns&lt;code&gt;false&lt;/code&gt;, then it is removed from the set of &lt;code&gt;ServiceReference&lt;/code&gt; objects. &lt;li&gt;An array of the remaining &lt;code&gt;ServiceReference&lt;/code&gt; objects is returned. &lt;/ol&gt;
 * @param clazz The class name with which the service was registered or&lt;code&gt;null&lt;/code&gt; for all services.
 * @param filter The filter criteria.
 * @return An array of &lt;code&gt;ServiceReference&lt;/code&gt; objects or&lt;code&gt;null&lt;/code&gt; if no services are registered which satisfy the search.
 * @throws InvalidSyntaxException If &lt;code&gt;filter&lt;/code&gt; contains aninvalid filter string that cannot be parsed.
 * @throws java.lang.IllegalStateException If this BundleContext is nolonger valid.
 */
</MethodComment>
            <ReturnType>ServiceReference[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>filter</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>InvalidSyntaxException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAllServiceReferences</MethodName>
            <MethodComment>/** 
 * Returns an array of &lt;code&gt;ServiceReference&lt;/code&gt; objects. The returned array of &lt;code&gt;ServiceReference&lt;/code&gt; objects contains services that were registered under the specified class and match the specified filter criteria. &lt;p&gt; The list is valid at the time of the call to this method, however since the Framework is a very dynamic environment, services can be modified or unregistered at anytime. &lt;p&gt; &lt;code&gt;filter&lt;/code&gt; is used to select the registered service whose properties objects contain keys and values which satisfy the filter. See {@link Filter} for a description of the filter string syntax.&lt;p&gt; If &lt;code&gt;filter&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, all registered services are considered to match the filter. If &lt;code&gt;filter&lt;/code&gt; cannot be parsed, an  {@link InvalidSyntaxException} will be thrown with a humanreadable message where the filter became unparsable. &lt;p&gt; The following steps are required to select a set of &lt;code&gt;ServiceReference&lt;/code&gt; objects: &lt;ol&gt; &lt;li&gt;If the filter string is not &lt;code&gt;null&lt;/code&gt;, the filter string is parsed and the set &lt;code&gt;ServiceReference&lt;/code&gt; objects of registered services that satisfy the filter is produced. If the filter string is &lt;code&gt;null&lt;/code&gt;, then all registered services are considered to satisfy the filter. &lt;li&gt;If the Java Runtime Environment supports permissions, the set of &lt;code&gt;ServiceReference&lt;/code&gt; objects produced by the previous step is reduced by checking that the caller has the &lt;code&gt;ServicePermission&lt;/code&gt; to get at least one of the class names under which the service was registered. If the caller does not have the correct permission for a particular &lt;code&gt;ServiceReference&lt;/code&gt; object, then it is removed from the set. &lt;li&gt;If &lt;code&gt;clazz&lt;/code&gt; is not &lt;code&gt;null&lt;/code&gt;, the set is further reduced to those services that are an &lt;code&gt;instanceof&lt;/code&gt; and were registered under the specified class. The complete list of classes of which a service is an instance and which were specified when the service was registered is available from the service's {@link Constants#OBJECTCLASS} property.&lt;li&gt;An array of the remaining &lt;code&gt;ServiceReference&lt;/code&gt; objects is returned. &lt;/ol&gt;
 * @param clazz The class name with which the service was registered or&lt;code&gt;null&lt;/code&gt; for all services.
 * @param filter The filter criteria.
 * @return An array of &lt;code&gt;ServiceReference&lt;/code&gt; objects or&lt;code&gt;null&lt;/code&gt; if no services are registered which satisfy the search.
 * @throws InvalidSyntaxException If &lt;code&gt;filter&lt;/code&gt; contains aninvalid filter string that cannot be parsed.
 * @throws java.lang.IllegalStateException If this BundleContext is nolonger valid.
 * @since 1.3
 */
</MethodComment>
            <ReturnType>ServiceReference[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>filter</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>InvalidSyntaxException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getServiceReference</MethodName>
            <MethodComment>/** 
 * Returns a &lt;code&gt;ServiceReference&lt;/code&gt; object for a service that implements and was registered under the specified class. &lt;p&gt; This &lt;code&gt;ServiceReference&lt;/code&gt; object is valid at the time of the call to this method, however as the Framework is a very dynamic environment, services can be modified or unregistered at anytime. &lt;p&gt; This method is the same as calling {@link BundleContext#getServiceReferences(String,String)} with a&lt;code&gt;null&lt;/code&gt; filter string. It is provided as a convenience for when the caller is interested in any service that implements the specified class. &lt;p&gt; If multiple such services exist, the service with the highest ranking (as specified in its  {@link Constants#SERVICE_RANKING} property) is returned.&lt;p&gt; If there is a tie in ranking, the service with the lowest service ID (as specified in its  {@link Constants#SERVICE_ID} property); that is, theservice that was registered first is returned.
 * @param clazz The class name with which the service was registered.
 * @return A &lt;code&gt;ServiceReference&lt;/code&gt; object, or &lt;code&gt;null&lt;/code&gt;if no services are registered which implement the named class.
 * @throws java.lang.IllegalStateException If this BundleContext is nolonger valid.
 * @see #getServiceReferences(String,String)
 */
</MethodComment>
            <ReturnType>ServiceReference</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getService</MethodName>
            <MethodComment>/** 
 * Returns the specified service object for a service. &lt;p&gt; A bundle's use of a service is tracked by the bundle's use count of that service. Each time a service's service object is returned by {@link #getService(ServiceReference)} the context bundle's use count forthat service is incremented by one. Each time the service is released by {@link #ungetService(ServiceReference)} the context bundle's use countfor that service is decremented by one. &lt;p&gt; When a bundle's use count for a service drops to zero, the bundle should no longer use that service. &lt;p&gt; This method will always return &lt;code&gt;null&lt;/code&gt; when the service associated with this &lt;code&gt;reference&lt;/code&gt; has been unregistered. &lt;p&gt; The following steps are required to get the service object: &lt;ol&gt; &lt;li&gt;If the service has been unregistered, &lt;code&gt;null&lt;/code&gt; is returned. &lt;li&gt;The context bundle's use count for this service is incremented by one. &lt;li&gt;If the context bundle's use count for the service is currently one and the service was registered with an object implementing the &lt;code&gt;ServiceFactory&lt;/code&gt; interface, the {@link ServiceFactory#getService(Bundle,ServiceRegistration)} method iscalled to create a service object for the context bundle. This service object is cached by the Framework. While the context bundle's use count for the service is greater than zero, subsequent calls to get the services's service object for the context bundle will return the cached service object. &lt;br&gt; If the service object returned by the &lt;code&gt;ServiceFactory&lt;/code&gt; object is not an &lt;code&gt;instanceof&lt;/code&gt; all the classes named when the service was registered or the &lt;code&gt;ServiceFactory&lt;/code&gt; object throws an exception, &lt;code&gt;null&lt;/code&gt; is returned and a Framework event of type  {@link FrameworkEvent#ERROR} is fired.&lt;li&gt;The service object for the service is returned. &lt;/ol&gt;
 * @param reference A reference to the service.
 * @return A service object for the service associated with&lt;code&gt;reference&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt; if the service is not registered or does not implement the classes under which it was registered in the case of a &lt;code&gt;ServiceFactory&lt;/code&gt;.
 * @throws java.lang.SecurityException If the caller does not have the&lt;code&gt;ServicePermission&lt;/code&gt; to get the service using at least one of the named classes the service was registered under and the Java Runtime Environment supports permissions.
 * @throws java.lang.IllegalStateException If this BundleContext is nolonger valid.
 * @see #ungetService(ServiceReference)
 * @see ServiceFactory
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>reference</ParamName>
                    <ParamType>ServiceReference</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ungetService</MethodName>
            <MethodComment>/** 
 * Releases the service object referenced by the specified &lt;code&gt;ServiceReference&lt;/code&gt; object. If the context bundle's use count for the service is zero, this method returns &lt;code&gt;false&lt;/code&gt;. Otherwise, the context bundle's use count for the service is decremented by one. &lt;p&gt; The service's service object should no longer be used and all references to it should be destroyed when a bundle's use count for the service drops to zero. &lt;p&gt; The following steps are required to unget the service object: &lt;ol&gt; &lt;li&gt;If the context bundle's use count for the service is zero or the service has been unregistered, &lt;code&gt;false&lt;/code&gt; is returned. &lt;li&gt;The context bundle's use count for this service is decremented by one. &lt;li&gt;If the context bundle's use count for the service is currently zero and the service was registered with a &lt;code&gt;ServiceFactory&lt;/code&gt; object, the {@link ServiceFactory#ungetService(Bundle,ServiceRegistration,Object)}method is called to release the service object for the context bundle. &lt;li&gt;&lt;code&gt;true&lt;/code&gt; is returned. &lt;/ol&gt;
 * @param reference A reference to the service to be released.
 * @return &lt;code&gt;false&lt;/code&gt; if the context bundle's use count for theservice is zero or if the service has been unregistered; &lt;code&gt;true&lt;/code&gt; otherwise.
 * @throws java.lang.IllegalStateException If this BundleContext is nolonger valid.
 * @see #getService
 * @see ServiceFactory
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>reference</ParamName>
                    <ParamType>ServiceReference</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDataFile</MethodName>
            <MethodComment>/** 
 * Creates a &lt;code&gt;File&lt;/code&gt; object for a file in the persistent storage area provided for the bundle by the Framework. This method will return &lt;code&gt;null&lt;/code&gt; if the platform does not have file system support. &lt;p&gt; A &lt;code&gt;File&lt;/code&gt; object for the base directory of the persistent storage area provided for the context bundle by the Framework can be obtained by calling this method with an empty string as &lt;code&gt;filename&lt;/code&gt;. &lt;p&gt; If the Java Runtime Environment supports permissions, the Framework will ensure that the bundle has the &lt;code&gt;java.io.FilePermission&lt;/code&gt; with actions &lt;code&gt;read&lt;/code&gt;,&lt;code&gt;write&lt;/code&gt;,&lt;code&gt;delete&lt;/code&gt; for all files (recursively) in the persistent storage area provided for the context bundle.
 * @param filename A relative name to the file to be accessed.
 * @return A &lt;code&gt;File&lt;/code&gt; object that represents the requested fileor &lt;code&gt;null&lt;/code&gt; if the platform does not have file system support.
 * @throws java.lang.IllegalStateException If this BundleContext is nolonger valid.
 */
</MethodComment>
            <ReturnType>File</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>filename</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createFilter</MethodName>
            <MethodComment>/** 
 * Creates a &lt;code&gt;Filter&lt;/code&gt; object. This &lt;code&gt;Filter&lt;/code&gt; object may be used to match a &lt;code&gt;ServiceReference&lt;/code&gt; object or a &lt;code&gt;Dictionary&lt;/code&gt; object. &lt;p&gt; If the filter cannot be parsed, an  {@link InvalidSyntaxException} will bethrown with a human readable message where the filter became unparsable.
 * @param filter The filter string.
 * @return A &lt;code&gt;Filter&lt;/code&gt; object encapsulating the filter string.
 * @throws InvalidSyntaxException If &lt;code&gt;filter&lt;/code&gt; contains aninvalid filter string that cannot be parsed.
 * @throws NullPointerException If &lt;code&gt;filter&lt;/code&gt; is null.
 * @throws java.lang.IllegalStateException If this BundleContext is nolonger valid.
 * @since 1.1
 * @see "Framework specification for a description of the filter string syntax."
 * @see FrameworkUtil#createFilter(String)
 */
</MethodComment>
            <ReturnType>Filter</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>filter</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>InvalidSyntaxException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>