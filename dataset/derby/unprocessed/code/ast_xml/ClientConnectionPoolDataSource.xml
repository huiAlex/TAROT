<Class>
    <Id>1369</Id>
    <Package>org.apache.derby.jdbc</Package>
    <ClassName>ClientConnectionPoolDataSource</ClassName>
    <SuperClass>ClientDataSource</SuperClass>
    <SuperInterfaceList>
        <SuperInterface>ClientConnectionPoolDataSourceInterface</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ClientConnectionPoolDataSource  /** 
 * This datasource is suitable for a client/server use of Derby, running on full Java SE 6 and higher, corresponding to JDBC 4.0 and higher. &lt;p/&gt; ClientConnectionPoolDataSource is a factory for PooledConnection objects. An object that implements this interface will typically be registered with a naming service that is based on the Java Naming and Directory Interface (JNDI).
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>serialVersionUID</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>msgUtil</FieldName>
            <FieldType>MessageUtil</FieldType>
        </Field>
        <Field>
            <FieldName>className__</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>maxStatements</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ClientConnectionPoolDataSource</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPooledConnection</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PooledConnection</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPooledConnection</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PooledConnection</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>user</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>password</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setMaxStatements</MethodName>
            <MethodComment>/** 
 * Specifies the maximum size of the statement cache.
 * @param maxStatements maximum number of cached statements
 * @throws IllegalArgumentException if &lt;code&gt;maxStatements&lt;/code&gt; isnegative
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>maxStatements</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMaxStatements</MethodName>
            <MethodComment>/** 
 * Returns the maximum number of JDBC prepared statements a connection is allowed to cache.
 * @return Maximum number of statements to cache, or &lt;code&gt;0&lt;/code&gt; ifcaching is disabled (default).
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>maxStatementsToPool</MethodName>
            <MethodComment>/** 
 * Internally used method.
 * @see BasicClientDataSource40#maxStatementsToPool
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>validateState</MethodName>
            <MethodComment>/** 
 * Make sure the state of the de-serialized object is valid.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readObject</MethodName>
            <MethodComment>/** 
 * Read an object from the ObjectInputStream. &lt;p&gt; This implementation differs from the default one by initiating state validation of the object created.
 * @param inputStream data stream to read objects from
 * @throws ClassNotFoundException if instantiating a class fails
 * @throws IOException if reading from the stream fails
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>inputStream</ParamName>
                    <ParamType>ObjectInputStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>inputStream;defaultReadObject;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;validateState;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ClassNotFoundException</ExceptionType>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>