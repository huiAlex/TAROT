<Class>
    <Id>825</Id>
    <Package>org.apache.derby.iapi.store.access</Package>
    <ClassName>GenericScanController</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>RowCountable</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>GenericScanController  /** 
 * The set of interfaces implemented by all types of ScanControllers. &lt;P&gt; A scan is the mechanism for iterating over the rows in a conglomerate, the scan controller is the interface through which access clients control the underlying scan.  An instance of a scan controller can  be thought of as an open scan. &lt;p&gt; Scans are opened from a TransactionController. &lt;P&gt; A ScanController can handle partial rows. Partial rows are described in  RowUtil. &lt;BR&gt; A scan controller is opened with a FormatableBitSet that describes the columns that need to be returned on a fetch call. This FormatableBitSet need not include any columns referenced in the qualifers, start and/or stop keys.
 * @see TransactionController#openScan
 * @see RowCountable
 * @see RowUtil
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>close</MethodName>
            <MethodComment>/** 
 * Close the scan.  This method always succeeds, and never throws any exceptions. Callers must not use the scan controller after closing it; they are strongly advised to clear out the scan controller reference after closing.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getScanInfo</MethodName>
            <MethodComment>/** 
 * Return ScanInfo object which describes performance of scan. &lt;p&gt; Return ScanInfo object which contains information about the current state of the scan. &lt;p&gt; The statistics gathered by the scan are not reset to 0 by a reopenScan(), rather they continue to accumulate. &lt;p&gt;
 * @see ScanInfo
 * @return The ScanInfo object which contains info about current scan.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>ScanInfo</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isKeyed</MethodName>
            <MethodComment>/** 
 * Return whether this is a keyed conglomerate. &lt;p&gt;
 * @return whether this is a keyed conglomerate.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isTableLocked</MethodName>
            <MethodComment>/** 
 * Return whether this scan is table locked. &lt;p&gt; Implementation of this is not complete.  Currently it does not give back the right information on covering locks or lock escalation.  If the openScan() caller specifies a MODE_TABLE as the lock_level then this routine will always return true.  If the openScan() caller specifies a MODE_RECORD as the lock_level then this routine will return true iff the lock level of the system has been overridden either by the derby.storage.rowLocking=false property, or by a shipped  configuration which disables row locking. &lt;p&gt;
 * @return whether this scan is table locked.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newRowLocationTemplate</MethodName>
            <MethodComment>/** 
 * Return a row location object to be used in calls to fetchLocation. &lt;p&gt; Return a row location object of the correct type to be used in calls to fetchLocation. &lt;p&gt;
 * @return a row location object to be used in calls to fetchLocation.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>RowLocation</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reopenScan</MethodName>
            <MethodComment>/** 
 * Reposition the current scan.  This call is semantically the same as if the current scan had been closed and a openScan() had been called instead. The scan is reopened with against the same conglomerate, and the scan is reopened with the same "scan column list", "hold" and "forUpdate" parameters passed in the original openScan.   &lt;p&gt; The statistics gathered by the scan are not reset to 0 by a reopenScan(), rather they continue to accumulate. &lt;p&gt;
 * @param startKeyValue  An indexable row which holds a (partial) key value which, in combination with the startSearchOperator, defines the starting position of the scan.  If null, the starting position of the scan is the first row of the conglomerate.
 * @param startSearchOperator an operator which defineshow the startKeyValue is to be searched for.  If  startSearchOperator is ScanController.GE, the scan starts on the first row which is greater than or equal to the  startKeyValue.  If startSearchOperation is ScanController.GT, the scan starts on the first row whose key is greater than startKeyValue.  The startSearchOperation parameter is  ignored if the startKeyValue parameter is null.
 * @param qualifier An array of qualifiers which, appliedto each key, restrict the rows returned by the scan.  Rows for which any one of the qualifiers returns false are not returned by the scan. If null, all rows are returned.
 * @param stopKeyValue  An indexable row which holds a (partial) key value which, in combination with the stopSearchOperator, defines the ending position of the scan.  If null, the ending position of the scan is the last row of the conglomerate.
 * @param stopSearchOperator an operator which defineshow the stopKeyValue is used to determine the scan stopping position. If stopSearchOperation is ScanController.GE, the scan  stops just before the first row which is greater than or equal to the stopKeyValue.  If stopSearchOperation is ScanController.GT, the scan stops just before the first row whose key is greater than	startKeyValue.  The stopSearchOperation parameter is ignored if the stopKeyValue parameter is null.
 * @exception StandardException Standard exception policy.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>startKeyValue</ParamName>
                    <ParamType>DataValueDescriptor[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>startSearchOperator</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>qualifier</ParamName>
                    <ParamType>Qualifier</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stopKeyValue</ParamName>
                    <ParamType>DataValueDescriptor[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stopSearchOperator</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reopenScanByRowLocation</MethodName>
            <MethodComment>/** 
 * Reposition the current scan.  This call is semantically the same as if the current scan had been closed and a openScan() had been called instead. The scan is reopened against the same conglomerate, and the scan is reopened with the same "scan column list", "hold" and "forUpdate" parameters passed in the original openScan.   &lt;p&gt; The statistics gathered by the scan are not reset to 0 by a reopenScan(), rather they continue to accumulate. &lt;p&gt; Note that this operation is currently only supported on Heap conglomerates. Also note that order of rows within are heap are not guaranteed, so for instance positioning at a RowLocation in the "middle" of a heap, then inserting more data, then continuing the scan is not guaranteed to see the new rows - they may be put in the "beginning" of the heap.
 * @param startRowLocation  An existing RowLocation within the conglomerate,at which to position the start of the scan.  The scan will begin at this location and continue forward until the end of the conglomerate.   Positioning at a non-existent RowLocation (ie. an invalid one or one that had been deleted), will result in an exception being thrown when the  first next operation is attempted.
 * @param qualifier An array of qualifiers which, appliedto each key, restrict the rows returned by the scan.  Rows for which any one of the qualifiers returns false are not returned by the scan. If null, all rows are returned.
 * @exception StandardException Standard exception policy.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>startRowLocation</ParamName>
                    <ParamType>RowLocation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>qualifier</ParamName>
                    <ParamType>Qualifier</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>