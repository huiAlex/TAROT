<Class>
    <Id>527</Id>
    <Package>org.apache.derby.impl.jdbc.authentication</Package>
    <ClassName>JNDIAuthenticationSchemeBase</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>UserAuthenticator</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>JNDIAuthenticationSchemeBase  /** 
 * This is the base JNDI authentication scheme class. The generic environment JNDI properties for the selected JNDI scheme are retrieved here so that the user can set JNDI properties at the database or system level.
 * @see org.apache.derby.authentication.UserAuthenticator 
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>authenticationService</FieldName>
            <FieldType>JNDIAuthenticationService</FieldType>
        </Field>
        <Field>
            <FieldName>providerURL</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>store</FieldName>
            <FieldType>AccessFactory</FieldType>
        </Field>
        <Field>
            <FieldName>initDirContextEnv</FieldName>
            <FieldType>Properties</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>JNDIAuthenticationSchemeBase</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>as</ParamName>
                    <ParamType>JNDIAuthenticationService</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dbProperties</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setInitDirContextEnv;[dbProperties]</InnerMethodInvoke>
                <InnerMethodInvoke>this;setJNDIProviderProperties;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setJNDIProviderProperties</MethodName>
            <MethodComment>/** 
 * To be OVERRIDEN by subclasses. This basically tests and sets default/expected JNDI properties for the JNDI provider scheme.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setInitDirContextEnv</MethodName>
            <MethodComment>/** 
 * Construct the initial JNDI directory context environment Properties object. We retrieve JNDI environment properties that the user may have set at the database level.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dbProps</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLoginSQLException</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>SQLException</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>e</ParamName>
                    <ParamType>Exception</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [text=MessageService.getTextMessage(SQLState.LOGIN_FAILED,e)]</InnerVar>
                <InnerVar>SQLException [sqle=new SQLException(text,SQLState.LOGIN_FAILED,ExceptionSeverity.SESSION_SEVERITY)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>