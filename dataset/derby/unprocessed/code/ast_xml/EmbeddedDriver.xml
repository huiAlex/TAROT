<Class>
    <Id>607</Id>
    <Package>org.apache.derby.jdbc</Package>
    <ClassName>EmbeddedDriver</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Driver</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>EmbeddedDriver  /** 
 * The embedded JDBC driver (Type 4) for Derby. &lt;P&gt; The driver automatically supports the correct JDBC specification version for the Java Virtual Machine's environment. &lt;UL&gt; &lt;LI&gt; JDBC 4.0 - Java SE 6 &lt;LI&gt; JDBC 3.0 - Java 2 - JDK 1.4, J2SE 5.0 &lt;/UL&gt; &lt;P&gt; Loading this JDBC driver boots the database engine within the same Java virtual machine. &lt;P&gt; The correct code to load the Derby engine using this driver is (with approriate try/catch blocks): &lt;PRE&gt; Class.forName("org.apache.derby.jdbc.EmbeddedDriver").newInstance(); // or new org.apache.derby.jdbc.EmbeddedDriver(); &lt;/PRE&gt; When loaded in this way, the class boots the actual JDBC driver indirectly. The JDBC specification recommends the Class.ForName method without the .newInstance() method call, but adding the newInstance() guarantees that Derby will be booted on any Java Virtual Machine. &lt;P&gt; Note that you do not need to manually load the driver this way if you are running on Jave SE 6 or later. In that environment, the driver will be automatically loaded for you when your application requests a connection to a Derby database. &lt;P&gt; Any initial error messages are placed in the PrintStream supplied by the DriverManager. If the PrintStream is null error messages are sent to System.err. Once the Derby engine has set up an error logging facility (by default to derby.log) all subsequent messages are sent to it. &lt;P&gt; By convention, the class used in the Class.forName() method to boot a JDBC driver implements java.sql.Driver. This class is not the actual JDBC driver that gets registered with the Driver Manager. It proxies requests to the registered Derby JDBC driver.
 * @see java.sql.DriverManager
 * @see java.sql.DriverManager#getLogStream
 * @see java.sql.Driver
 * @see java.sql.SQLException
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>EmbeddedDriver</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>EmbeddedDriver;boot;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>acceptsURL</MethodName>
            <MethodComment>/** 
 * Accept anything that starts with &lt;CODE&gt;jdbc:derby:&lt;/CODE&gt;.
 * @exception SQLException if a database-access error occurs.
 * @see java.sql.Driver
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>url</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>connect</MethodName>
            <MethodComment>/** 
 * Connect to the URL if possible
 * @exception SQLException illegal url or problem with connectiong
 * @see java.sql.Driver
 */
</MethodComment>
            <ReturnType>Connection</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>url</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>info</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPropertyInfo</MethodName>
            <MethodComment>/** 
 * Returns an array of DriverPropertyInfo objects describing possible properties.
 * @exception SQLException if a database-access error occurs.
 * @see java.sql.Driver
 */
</MethodComment>
            <ReturnType>DriverPropertyInfo[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>url</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>info</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMajorVersion</MethodName>
            <MethodComment>/** 
 * Returns the driver's major version number. 
 * @see java.sql.Driver
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMinorVersion</MethodName>
            <MethodComment>/** 
 * Returns the driver's minor version number.
 * @see java.sql.Driver
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>jdbcCompliant</MethodName>
            <MethodComment>/** 
 * Report whether the Driver is a genuine JDBC COMPLIANT (tm) driver.
 * @see java.sql.Driver
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDriverModule</MethodName>
            <MethodComment>/** 
 * Lookup the booted driver module appropriate to our JDBC level.
 */
</MethodComment>
            <ReturnType>Driver</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>boot</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>PrintWriter [pw=DriverManager.getLogWriter()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getParentLogger</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Logger</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLFeatureNotSupportedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>