<Class>
    <Id>254</Id>
    <Package>org.apache.derbyTesting.functionTests.tests.upgradeTests</Package>
    <ClassName>Changes10_11</ClassName>
    <SuperClass>UpgradeChange</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Changes10_11  /** 
 * Upgrade test cases for 10.11.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>SYNTAX_ERROR</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>HARD_UPGRADE_REQUIRED</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>NOT_IMPLEMENTED</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>NO_ROWS_AFFECTED</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>UNKNOWN_OPTIONAL_TOOL</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>UNRECOGNIZED_PROCEDURE</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>Changes10_11</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>suite</MethodName>
            <MethodComment>/** 
 * Return the suite of tests to test the changes made in 10.11.
 * @param phase an integer that indicates the current phase inthe upgrade test.
 * @return the test suite created.
 */
</MethodComment>
            <ReturnType>Test</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>phase</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testTriggerWhenClause</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [createTrigger="create trigger d534_tr1 after insert on d534_t1 " + "referencing new as new for each row mode db2sql " + "when (new.x &lt;&gt; 2) insert into d534_t2 values new.x"]</InnerVar>
                <InnerVar>Statement [s=createStatement()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testDropTriggerDependencies</MethodName>
            <MethodComment>/** 
 * Test how dropping trigger dependencies works across upgrade and downgrade. Regression test for DERBY-2041.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Statement [s=createStatement()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setAutoCommit;[false]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createDerby2041Triggers</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>Statement</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>s;execute;["create trigger d2041_tr1 after insert on d2041_t " + "for each row mode db2sql insert into d2041_table values 1"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["create trigger d2041_tr2 after insert on d2041_t " + "for each row mode db2sql " + "insert into d2041_synonym values 1"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["create trigger d2041_tr3 after insert on d2041_t " + "for each row mode db2sql select * from d2041_view"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["create trigger d2041_tr4 after insert on d2041_t " + "for each row mode db2sql values d2041_func(1)"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["create trigger d2041_tr5 after insert on d2041_t " + "for each row mode db2sql call d2041_proc()"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>dropDerby2041Triggers</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>Statement</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>dropDerby2041TriggerDeps</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>Statement</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>expectFailure</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String[] [stmts={"drop table d2041_table","drop synonym d2041_synonym","drop view d2041_view","drop function d2041_func","drop procedure d2041_proc"}]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testDerby5866TriggerExecutionOrder</MethodName>
            <MethodComment>/** 
 * Create a trigger in each upgrade phase and verify that they fire in the order in which they were created. DERBY-5866 changed how the trigger creation timestamp was stored (from local time zone to UTC), and we want to test that this change doesn't affect the trigger execution order when the triggers have been created with different versions.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Statement [s=createStatement()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testDeferrableConstraints</MethodName>
            <MethodComment>/** 
 * Test how deferrable constraints work across upgrade and downgrade. Regression test for DERBY-532.
 * @throws java.sql.SQLException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Statement [st=createStatement()]</InnerVar>
                <InnerVar>String[] [cDeferrableCol=new String[]{"create table t532(i int not null primary key deferrable)","create table t532(i int unique deferrable)","create table t532(i int not null unique deferrable)","create table t532(i int check (i &gt; 0) deferrable)","create table t532(i int references referenced(i) deferrable)"}]</InnerVar>
                <InnerVar>String[] [cDeferrableTab=new String[]{"create table t532(i int not null, constraint c primary key(i) deferrable)","create table t532(i int, constraint c unique(i) deferrable)","create table t532(i int not null, constraint c unique(i) " + "deferrable)","create table t532(i int, constraint c check (i &gt; 0) deferrable)","create table t532(i int, constraint c foreign key(i) " + "references referenced(i) deferrable)"}]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setAutoCommit;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>st;executeUpdate;["create table referenced(i int primary key)"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;commit;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testMerge</MethodName>
            <MethodComment>/** 
 * Test the MERGE statement introduced by 10.11 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [mergeStatement="merge into targetTable t using sourceTable s on t.a = s.a\n" + "when matched then delete\n"]</InnerVar>
                <InnerVar>Statement [s=createStatement()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>test_derby6692</MethodName>
            <MethodComment>/** 
 * Test that identity columns handle self-deadlock in soft-upgrade mode 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Connection [conn=getConnection()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testLuceneSupport</MethodName>
            <MethodComment>/** 
 * Test the Lucene plugin 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Properties [properties=TestConfiguration.getSystemProperties()]</InnerVar>
                <InnerVar>Version [initialVersion=new Version(getOldMajor(),getOldMinor(),0,0)]</InnerVar>
                <InnerVar>Version [firstVersionHavingBooleanType=new Version(10,7,0,0)]</InnerVar>
                <InnerVar>Version [firstVersionHavingOptionalTools=new Version(10,10,0,0)]</InnerVar>
                <InnerVar>boolean [hasBooleanDatatype=initialVersion.compareTo(firstVersionHavingBooleanType) &gt;= 0]</InnerVar>
                <InnerVar>boolean [hasOptionalTools=initialVersion.compareTo(firstVersionHavingOptionalTools) &gt;= 0]</InnerVar>
                <InnerVar>String [originalSQLState]</InnerVar>
                <InnerVar>String [softUpgradeSQLState]</InnerVar>
                <InnerVar>String [loadTool="call syscs_util.syscs_register_tool( 'luceneSupport', true )"]</InnerVar>
                <InnerVar>String [unloadTool="call syscs_util.syscs_register_tool( 'luceneSupport', false )"]</InnerVar>
                <InnerVar>Statement [statement=createStatement()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testIdentitySequence</MethodName>
            <MethodComment>/** 
 * Test the addition of sequence generators to back identity columns 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Properties [properties=TestConfiguration.getSystemProperties()]</InnerVar>
                <InnerVar>Version [initialVersion=new Version(getOldMajor(),getOldMinor(),0,0)]</InnerVar>
                <InnerVar>Version [firstVersionHavingSequences=new Version(10,6,0,0)]</InnerVar>
                <InnerVar>boolean [hasSequences=initialVersion.compareTo(firstVersionHavingSequences) &gt;= 0]</InnerVar>
                <InnerVar>Statement [statement=createStatement()]</InnerVar>
                <InnerVar>String [peek="values syscs_util.syscs_peek_at_identity( 'APP', 'IDSEQ1' )"]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>countSequences</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>statement</ParamName>
                    <ParamType>Statement</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>count</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>statement</ParamName>
                    <ParamType>Statement</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>query</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ResultSet [rs=statement.executeQuery(query)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rs;next;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBooleanProperty</MethodName>
            <MethodComment>/** 
 * Return the boolean value of a system property 
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>properties</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>expectExecutionWarning</MethodName>
            <MethodComment>/** 
 * Assert that the statement text, when executed, raises a warning.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conn</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sqlState</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>query</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;expectExecutionWarnings;[conn, new String[]{sqlState}, query]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>expectExecutionWarnings</MethodName>
            <MethodComment>/** 
 * Assert that the statement text, when executed, raises a warning.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conn</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sqlStates</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>query</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PreparedStatement [ps=chattyPrepare(conn,query)]</InnerVar>
                <InnerVar>int [idx=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;println;["\nExpecting warnings " + fill(sqlStates).toString() + " when executing:\n\t"]</InnerMethodInvoke>
                <InnerMethodInvoke>ps;execute;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[idx, sqlStates.length]</InnerMethodInvoke>
                <InnerMethodInvoke>ps;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fill</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Fill an ArrayList from an array. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>raw</ParamName>
                    <ParamType>T[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>