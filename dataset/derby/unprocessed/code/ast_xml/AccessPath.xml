<Class>
    <Id>1448</Id>
    <Package>org.apache.derby.iapi.sql.compile</Package>
    <ClassName>AccessPath</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>AccessPath  /** 
 * AccessPath represents a proposed access path for an Optimizable. An Optimizable may have more than one proposed AccessPath.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>setConglomerateDescriptor</MethodName>
            <MethodComment>/** 
 * Set the conglomerate descriptor for this access path.
 * @param cd	A ConglomerateDescriptor
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cd</ParamName>
                    <ParamType>ConglomerateDescriptor</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getConglomerateDescriptor</MethodName>
            <MethodComment>/** 
 * Get whatever was last set as the conglomerate descriptor. Returns null if nothing was set since the last call to startOptimizing()
 */
</MethodComment>
            <ReturnType>ConglomerateDescriptor</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setCostEstimate</MethodName>
            <MethodComment>/** 
 * Set the given cost estimate in this AccessPath.  Generally, this will be the CostEstimate for the plan currently under consideration.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>costEstimate</ParamName>
                    <ParamType>CostEstimate</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCostEstimate</MethodName>
            <MethodComment>/** 
 * Get the cost estimate for this AccessPath.  This is the last one set by setCostEstimate.
 */
</MethodComment>
            <ReturnType>CostEstimate</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setCoveringIndexScan</MethodName>
            <MethodComment>/** 
 * Set whether or not to consider a covering index scan on the optimizable.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>coveringIndexScan</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCoveringIndexScan</MethodName>
            <MethodComment>/** 
 * Return whether or not the optimizer is considering a covering index scan on this AccessPath. 
 * @return boolean		Whether or not the optimizer chose a coveringindex scan.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setNonMatchingIndexScan</MethodName>
            <MethodComment>/** 
 * Set whether or not to consider a non-matching index scan on this AccessPath. 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>nonMatchingIndexScan</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNonMatchingIndexScan</MethodName>
            <MethodComment>/** 
 * Return whether or not the optimizer is considering a non-matching index scan on this AccessPath. We expect to call this during generation, after access path selection is complete.
 * @return boolean		Whether or not the optimizer is consideringa non-matching index scan.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setJoinStrategy</MethodName>
            <MethodComment>/** 
 * Remember the given join strategy
 * @param joinStrategy	The best join strategy
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>joinStrategy</ParamName>
                    <ParamType>JoinStrategy</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getJoinStrategy</MethodName>
            <MethodComment>/** 
 * Get the join strategy, as set by setJoinStrategy().
 */
</MethodComment>
            <ReturnType>JoinStrategy</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setLockMode</MethodName>
            <MethodComment>/** 
 * Set the lock mode
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lockMode</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLockMode</MethodName>
            <MethodComment>/** 
 * Get the lock mode, as last set in setLockMode().
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>copy</MethodName>
            <MethodComment>/** 
 * Copy all information from the given AccessPath to this one.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>copyFrom</ParamName>
                    <ParamType>AccessPath</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOptimizer</MethodName>
            <MethodComment>/** 
 * Get the optimizer associated with this access path.
 * @return	The optimizer associated with this access path.
 */
</MethodComment>
            <ReturnType>Optimizer</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initializeAccessPathName</MethodName>
            <MethodComment>/** 
 * Sets the "name" of the access path. if the access path represents an index then set the name to the name of the index. if it is an index created for a constraint, use the constraint name. This is called only for base tables.
 * @param td		TableDescriptor of the base table.
 * @param dd		Datadictionary.
 * @exception StandardException 	on error.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dd</ParamName>
                    <ParamType>DataDictionary</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>td</ParamName>
                    <ParamType>TableDescriptor</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>