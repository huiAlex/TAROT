<Class>
    <Id>1098</Id>
    <Package>org.apache.derby.impl.sql.execute</Package>
    <ClassName>MatchingClauseConstantAction</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>ConstantAction</SuperInterface>
        <SuperInterface>Formatable</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>MatchingClauseConstantAction  /** 
 * Describes the execution machinery needed to evaluate a WHEN [ NOT ] MATCHING clause of a MERGE statement.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>serialVersionUID</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>FIRST_VERSION</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>_clauseType</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>_matchRefinementName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>_thenColumnSignature</FieldName>
            <FieldType>ResultDescription</FieldType>
        </Field>
        <Field>
            <FieldName>_rowMakingMethodName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>_resultSetFieldName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>_actionMethodName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>_thenAction</FieldName>
            <FieldType>ConstantAction</FieldType>
        </Field>
        <Field>
            <FieldName>_matchRefinementMethod</FieldName>
            <FieldType>GeneratedMethod</FieldType>
        </Field>
        <Field>
            <FieldName>_rowMakingMethod</FieldName>
            <FieldType>GeneratedMethod</FieldType>
        </Field>
        <Field>
            <FieldName>_actionRS</FieldName>
            <FieldType>ResultSet</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>MatchingClauseConstantAction</MethodName>
            <MethodComment>/** 
 * 0-arg constructor needed by Formatable machinery 
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>MatchingClauseConstantAction</MethodName>
            <MethodComment>/** 
 * Construct from thin air.
 * @param clauseType  WHEN_NOT_MATCHED_THEN_INSERT, WHEN_MATCHED_THEN_UPDATE, WHEN_MATCHED_THEN_DELETE
 * @param matchRefinementName Name of the method which evaluates the boolean expression in the WHEN clause.
 * @param thenColumnSignature The shape of the row which goes into the temporary table.
 * @param rowMakingMethodName Name of the method which populates the "then" row with expressions from the driving left join.
 * @param resultSetFieldName  Name of the field which will be stuffed at runtime with the temporary table of relevant rows.
 * @param actionMethodName    Name of the method which invokes the INSERT/UPDATE/DELETE action.
 * @param thenAction  The ConstantAction describing the associated INSERT/UPDATE/DELETE action.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clauseType</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>matchRefinementName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>thenColumnSignature</ParamName>
                    <ParamType>ResultDescription</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rowMakingMethodName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>resultSetFieldName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>actionMethodName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>thenAction</ParamName>
                    <ParamType>ConstantAction</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clauseType</MethodName>
            <MethodComment>/** 
 * Get the clause type: WHEN_NOT_MATCHED_THEN_INSERT, WHEN_MATCHED_THEN_UPDATE, WHEN_MATCHED_THEN_DELETE 
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>executeConstantAction</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>activation</ParamName>
                    <ParamType>Activation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>executeConstantAction</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>activation</ParamName>
                    <ParamType>Activation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>thenRows</ParamName>
                    <ParamType>TemporaryRowHolderImpl</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CursorResultSet [sourceRS=thenRows.getResultSet()]</InnerVar>
                <InnerVar>GeneratedMethod [actionGM=((BaseActivation)activation).getMethod(_actionMethodName)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>init</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Initialize this constant action, nulling out any transient state left over from a previous use. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>evaluateRefinementClause</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Run the matching refinement clause associated with this WHEN [ NOT ] MATCHED clause. The refinement is a boolean expression. Return the boolean value it resolves to. A boolean NULL is treated as false. If there is no refinement clause, then this method evaluates to true. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>activation</ParamName>
                    <ParamType>Activation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>SQLBoolean [result=(SQLBoolean)_matchRefinementMethod.invoke(activation)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>bufferThenRow</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Construct and buffer a row for the INSERT/UPDATE/DELETE action corresponding to this [ NOT ] MATCHED clause. The buffered row is built from columns in the passed-in row. The passed-in row is the SELECT list of the MERGE statement's driving left join. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>TemporaryRowHolderImpl</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>activation</ParamName>
                    <ParamType>Activation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>thenRows</ParamName>
                    <ParamType>TemporaryRowHolderImpl</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>selectRow</ParamName>
                    <ParamType>ExecRow</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ExecRow [thenRow=bufferThenRow(activation)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>thenRows;insert;[thenRow]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cleanUp</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Release resources at the end. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>bufferThenRow</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Construct and buffer a row for the INSERT/UPDATE/DELETE action corresponding to this [ NOT ] MATCHED clause. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>ExecRow</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>activation</ParamName>
                    <ParamType>Activation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createThenRows</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Create the temporary table for holding the rows which are buffered up for bulk-processing after the driving left join completes. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>TemporaryRowHolderImpl</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>activation</ParamName>
                    <ParamType>Activation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readExternal</MethodName>
            <MethodComment>/** 
 * Read this object from a stream of stored objects.
 * @param in read this.
 * @exception IOException					thrown on error
 * @exception ClassNotFoundException		thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>in</ParamName>
                    <ParamType>ObjectInput</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [oldVersion=in.readInt()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>ClassNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeExternal</MethodName>
            <MethodComment>/** 
 * Write this object to a stream of stored objects.
 * @param out write bytes here.
 * @exception IOException		thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>ObjectOutput</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>out;writeInt;[FIRST_VERSION]</InnerMethodInvoke>
                <InnerMethodInvoke>out;writeInt;[_clauseType]</InnerMethodInvoke>
                <InnerMethodInvoke>out;writeObject;[_matchRefinementName]</InnerMethodInvoke>
                <InnerMethodInvoke>out;writeObject;[_thenColumnSignature]</InnerMethodInvoke>
                <InnerMethodInvoke>out;writeObject;[_rowMakingMethodName]</InnerMethodInvoke>
                <InnerMethodInvoke>out;writeObject;[_resultSetFieldName]</InnerMethodInvoke>
                <InnerMethodInvoke>out;writeObject;[_actionMethodName]</InnerMethodInvoke>
                <InnerMethodInvoke>out;writeObject;[_thenAction]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTypeFormatId</MethodName>
            <MethodComment>/** 
 * Get the formatID which corresponds to this class.
 * @return	the formatID of this class
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>