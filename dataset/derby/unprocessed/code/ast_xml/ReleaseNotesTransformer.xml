<Class>
    <Id>1255</Id>
    <Package>org.apache.derbyBuild</Package>
    <ClassName>ReleaseNotesTransformer</ClassName>
    <SuperClass>Task</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ReleaseNotesTransformer  /** 
 * &lt;p&gt; This is an ant task which transforms the Derby release notes into a form which can be digested by the Forrest tool and published on the Derby download site. This involves the following transformations: &lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;b&gt;Remove blockquotes&lt;/b&gt; - Forrest silently swallows blockquoted text.&lt;/li&gt; &lt;li&gt;&lt;b&gt;Remove TOC&lt;/b&gt; - Forrest adds its own table of contents and transforms the original TOC into a block of dead links.&lt;/li&gt; &lt;li&gt;&lt;b&gt;Remove mini TOC&lt;/b&gt; - Forrest also transforms the mini TOC in the Issues section into a block of dead links.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt; In addition, this task adds a pointer to the download page to src/documentation/conf/cli.xconf. This causes the site-building scripts to pull the download page into the build. &lt;/p&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>PREAMBLE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>_docBldr</FieldName>
            <FieldType>DocumentBuilder</FieldType>
        </Field>
        <Field>
            <FieldName>_inputDoc</FieldName>
            <FieldType>Document</FieldType>
        </Field>
        <Field>
            <FieldName>_inputFile</FieldName>
            <FieldType>File</FieldType>
        </Field>
        <Field>
            <FieldName>_outputFile</FieldName>
            <FieldType>File</FieldType>
        </Field>
        <Field>
            <FieldName>_cliXconfFile</FieldName>
            <FieldType>File</FieldType>
        </Field>
        <Field>
            <FieldName>_inputFileName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>_outputFileName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>_cliXconfFileName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>_releaseID</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ReleaseNotesTransformer</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setInputFileName</MethodName>
            <MethodComment>/** 
 * Ant accessor to set the name of the input file, the original release notes.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>inputFileName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;println;["Reading from " + inputFileName + "..."]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setOutputFileName</MethodName>
            <MethodComment>/** 
 * Ant accessor to set the name of the generated output file
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>outputFileName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;println;["Writing to " + outputFileName + "..."]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setCliXconfFileName</MethodName>
            <MethodComment>/** 
 * Ant accessor to set the name of the cli.xconf file which pulls the download page into the built site.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cliXconfFileName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;println;["Writing import instructions to to " + cliXconfFileName + "..."]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setReleaseId</MethodName>
            <MethodComment>/** 
 * Ant accessor to set the release id.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>releaseID</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;println;["Setting release id to " + _releaseID + "..."]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>execute</MethodName>
            <MethodComment>/** 
 * This is Ant's entry point into this task.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>BuildException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>transform</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; This is the guts of the processing. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>InputStream [normalizedText=new FileInputStream(_outputFile)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;normalizeText;[_inputFile, _outputFile]</InnerMethodInvoke>
                <InnerMethodInvoke>normalizedText;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;removeBlockquotes;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;removeTopTOC;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;removeIssuesTOC;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeBlockquotes</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Remove the blockquotes which hide text from Forrest. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Element [root=_inputDoc.getDocumentElement()]</InnerVar>
                <InnerVar>HashSet&lt;Element&gt; [replacedNodes=new HashSet&lt;Element&gt;()]</InnerVar>
                <InnerVar>String [tag="blockquote"]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeTopTOC</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Remove the top level table of contents. This is the first list in the document. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;removeFirstList;[_inputDoc.getDocumentElement()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeIssuesTOC</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Remove the table of contents of the Issues section. This is the first list in that section. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Element [issuesHeader=findHeader(2,"Issues")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeFirstList</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Remove the first list under an element. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>root</ParamName>
                    <ParamType>Element</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Element [listElement=getFirstDescendant(root,"ul")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findHeader</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Find the header element with this given name. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>Element</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>headerLevel</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>headerTitle</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Element [root=_inputDoc.getDocumentElement()]</InnerVar>
                <InnerVar>String [headerTag="h" + headerLevel]</InnerVar>
                <InnerVar>NodeList [headers=root.getElementsByTagName(headerTag)]</InnerVar>
                <InnerVar>int [count=headers.getLength()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFirstDescendant</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Element</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ancestor</ParamName>
                    <ParamType>Element</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tagName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>NodeList [nl=ancestor.getElementsByTagName(tagName)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>normalizeText</MethodName>
            <MethodComment>/** 
 * Adjust input text to remove junk which confuses the xml parser and/or Forrest. Temporarily writes the adjusted text to the output file.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>inputFile</ParamName>
                    <ParamType>File</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>outputFile</ParamName>
                    <ParamType>File</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [rawString=readFileIntoString(inputFile)]</InnerVar>
                <InnerVar>FileWriter [fileWriter=new FileWriter(outputFile)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>fileWriter;append;[rawString]</InnerMethodInvoke>
                <InnerMethodInvoke>fileWriter;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>fileWriter;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fullReplaceToken</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rawString</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>token</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>replacement</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>replaceToken</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rawString</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>token</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>replacement</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringWriter [output=new StringWriter()]</InnerVar>
                <InnerVar>int [rawLength=rawString.length()]</InnerVar>
                <InnerVar>int [tokenLength=token.length()]</InnerVar>
                <InnerVar>int [start=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>printOutput</MethodName>
            <MethodComment>/** 
 * Print the generated output document to the output file.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Source [source=new DOMSource(_inputDoc)]</InnerVar>
                <InnerVar>Result [result=new StreamResult(_outputFile)]</InnerVar>
                <InnerVar>Transformer [transformer=TransformerFactory.newInstance().newTransformer()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>transformer;transform;[source, result]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>postProcess</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Post-process the output: &lt;/p&gt; &lt;ul&gt; &lt;li&gt;Add preamble to the head of the file.&lt;/li&gt; &lt;/ul&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [shortReleaseID=_releaseID.substring(0,_releaseID.lastIndexOf("."))]</InnerVar>
                <InnerVar>String [preamble=MessageFormat.format(PREAMBLE,_releaseID,shortReleaseID)]</InnerVar>
                <InnerVar>String [contents=readFileIntoString(_outputFile)]</InnerVar>
                <InnerVar>String [firstHeader="&lt;h1&gt;"]</InnerVar>
                <InnerVar>int [cutIdx=contents.indexOf(firstHeader)]</InnerVar>
                <InnerVar>String [result=preamble + contents.substring(cutIdx)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;writeStringIntoFile;[result, _outputFile]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>wireIntoBuild</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Wire the download page into the build instructions. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [contents=readFileIntoString(_cliXconfFile)]</InnerVar>
                <InnerVar>int [insertPoint=contents.indexOf("   &lt;/uris&gt;")]</InnerVar>
                <InnerVar>String [insertion="     &lt;uri type=\"append\" src=\"releases/release-" + _releaseID + ".html\"/&gt;\n"]</InnerVar>
                <InnerVar>String [result=contents.substring(0,insertPoint) + insertion + contents.substring(insertPoint)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;writeStringIntoFile;[result, _cliXconfFile]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>println</MethodName>
            <MethodComment>/** 
 * Print a line of text to the console.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;log;[text, Project.MSG_WARN]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readFileIntoString</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Read a file and return the entire contents as a single String. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>inputFile</ParamName>
                    <ParamType>File</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>FileReader [fileReader=new FileReader(inputFile)]</InnerVar>
                <InnerVar>StringWriter [stringWriter=new StringWriter()]</InnerVar>
                <InnerVar>String [rawString=stringWriter.toString()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeStringIntoFile</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Write a string into a file. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rawString</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>outputFile</ParamName>
                    <ParamType>File</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PrintWriter [writer=new PrintWriter(outputFile,"UTF-8")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>writer;println;[rawString]</InnerMethodInvoke>
                <InnerMethodInvoke>writer;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>writer;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>