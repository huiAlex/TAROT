<Class>
    <Id>417</Id>
    <Package>org.apache.derbyTesting.junit</Package>
    <ClassName>NetworkServerControlWrapper</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>NetworkServerControlWrapper  /** 
 * A class wrapping a  {@code NetworkServerControl} instance, using reflectionto allow  {@code TestConfiguration} to be used without having&lt;tt&gt;derbynet.jar&lt;/tt&gt; on the classpath. &lt;p&gt; Only methods actually required by  {@code TestConfiguration} are wrapped, andthis class depends on the functionality implemented by {@link org.apache.derbyTesting.junit.NetworkServerTestSetup}. &lt;p&gt; The problem before was that an exception was thrown during class loading time, even if the network server functionality was never required by the tests being run. With this wrapper, an exception will be thrown only if the functionality is actually required and the necessary classes are not on the classpath.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>PING</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SHUTDOWN</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>START</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>ctrl</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>METHODS</FieldName>
            <FieldType>Method[]</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>NetworkServerControlWrapper</MethodName>
            <MethodComment>/** 
 * Creates a new wrapper object.
 * @throws Exception if creating the {@code NetworkServerControl} instancefails
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Class&lt;?&gt; [clazzSC=null]</InnerVar>
                <InnerVar>Class&lt;?&gt; [clazzTS=Class.forName("org.apache.derbyTesting.junit.NetworkServerTestSetup")]</InnerVar>
                <InnerVar>Method [m=clazzTS.getMethod("getNetworkServerControl")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>invoke</MethodName>
            <MethodComment>/** 
 * Helper method that invokes a method returning  {@code void}.
 * @param methodIndex index of the method to invoke ({@link #METHODS})
 * @param args arguments to pass to the method being invoked
 * @throws Exception a broad range of exceptions can be thrown, bothrelated to reflection and any exceptions the invoked methods themselves might throw
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>methodIndex</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>Object[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ping</MethodName>
            <MethodComment>/** 
 * @see org.apache.derby.drda.NetworkServerControl#ping 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;invoke;[PING, null]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>shutdown</MethodName>
            <MethodComment>/** 
 * @see org.apache.derby.drda.NetworkServerControl#shutdown 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;invoke;[SHUTDOWN, null]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>start</MethodName>
            <MethodComment>/** 
 * @see org.apache.derby.drda.NetworkServerControl#start 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>printWriter</ParamName>
                    <ParamType>PrintWriter</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;invoke;[START, new Object[]{printWriter}]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>