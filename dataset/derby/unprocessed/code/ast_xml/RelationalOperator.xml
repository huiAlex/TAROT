<Class>
    <Id>2192</Id>
    <Package>org.apache.derby.impl.sql.compile</Package>
    <ClassName>RelationalOperator</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>RelationalOperator  /** 
 * This interface is an abstraction of a relational operator.  It was created for optimization, to allow binary comparison operators and IS NULL to be treated the same.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>EQUALS_RELOP</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>NOT_EQUALS_RELOP</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>GREATER_THAN_RELOP</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>GREATER_EQUALS_RELOP</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>LESS_THAN_RELOP</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>LESS_EQUALS_RELOP</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>IS_NULL_RELOP</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>IS_NOT_NULL_RELOP</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getColumnOperand</MethodName>
            <MethodComment>/** 
 * Check whether this RelationalOperator is a comparison of the given column with an expression.  If so, return the ColumnReference that corresponds to the given column, and that is on one side of this RelationalOperator or the other (this method copes with the column being on either side of the operator).  If the given column does not appear by itself on one side of the comparison, the method returns null.
 * @param optTable	An Optimizable for the base table the column is in
 * @param columnPosition	The ordinal position of the column (one-based)
 * @return	The ColumnReference on one side of this RelationalOperatorthat represents the given columnPosition.  Returns null if no such ColumnReference exists by itself on one side of this RelationalOperator.
 */
</MethodComment>
            <ReturnType>ColumnReference</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>optTable</ParamName>
                    <ParamType>Optimizable</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columnPosition</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getColumnOperand</MethodName>
            <MethodComment>/** 
 * Get the ColumnReference for the given table on one side of this RelationalOperator.  This presumes it will be found only on one side.  If not found, it will return null.
 */
</MethodComment>
            <ReturnType>ColumnReference</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>optTable</ParamName>
                    <ParamType>Optimizable</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOperand</MethodName>
            <MethodComment>/** 
 * Find the operand (left or right) that points to the same table as the received ColumnReference, and then return either that operand or the "other" operand, depending on the value of otherSide. This presumes it will be found only on one side.  If not found, it will return null.
 * @param cRef The ColumnReference for which we're searching.
 * @param refSetSize Size of the referenced map for the predicaterepresented by this RelationalOperator node.  This is used for storing base table numbers when searching for cRef.
 * @param otherSide Assuming we find an operand that points tothe same table as cRef, then we will return the *other operand if otherSide is true; else we'll return the operand that matches cRef.
 */
</MethodComment>
            <ReturnType>ValueNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cRef</ParamName>
                    <ParamType>ColumnReference</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>refSetSize</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>otherSide</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getExpressionOperand</MethodName>
            <MethodComment>/** 
 * Check whether this RelationalOperator is a comparison of the given column with an expression.  If so, return the expression the column is being compared to.
 * @param tableNumber	The table number of the base table the column is in
 * @param columnPosition	The ordinal position of the column (one-based)
 * @param ft	We'll look for the column in all tables at and beneath ft.This is useful if ft is, say, a ProjectRestrictNode over a subquery-- then we want to look at all of the FROM tables in the subquery to try to find the right column.
 * @return	The ValueNode for the expression the column is being comparedto - null if the column is not being compared to anything.
 */
</MethodComment>
            <ReturnType>ValueNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tableNumber</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columnPosition</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ft</ParamName>
                    <ParamType>Optimizable</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateExpressionOperand</MethodName>
            <MethodComment>/** 
 * Check whether this RelationalOperator is a comparison of the given column with an expression.  If so, generate the Expression for the ValueNode that the column is being compared to.
 * @param optTable	An Optimizable for the base table the column is in
 * @param columnPosition	The ordinal position of the column (one-based)
 * @param acb		The ExpressionClassBuilder for the class we're building
 * @param mb		The method the expression will go into
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>optTable</ParamName>
                    <ParamType>Optimizable</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columnPosition</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>acb</ParamName>
                    <ParamType>ExpressionClassBuilderInterface</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mb</ParamName>
                    <ParamType>MethodBuilder</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>selfComparison</MethodName>
            <MethodComment>/** 
 * Check whether this RelationalOperator compares the given ColumnReference to any columns in the same table as the ColumnReference.
 * @param cr	The ColumnReference that is being compared to someexpression.
 * @return	true if the given ColumnReference is being compared to anycolumns from the same table
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cr</ParamName>
                    <ParamType>ColumnReference</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>usefulStartKey</MethodName>
            <MethodComment>/** 
 * Tell whether this relop is a useful start key for the given table. It has already been determined that the relop has a column from the given table on one side or the other.
 * @param optTable	The Optimizable table for which we want to knowwhether this is a useful start key.
 * @return	true if this is a useful start key
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>optTable</ParamName>
                    <ParamType>Optimizable</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>usefulStopKey</MethodName>
            <MethodComment>/** 
 * Tell whether this relop is a useful stop key for the given table. It has already been determined that the relop has a column from the given table on one side or the other.
 * @param optTable	The Optimizable table for which we want to knowwhether this is a useful stop key.
 * @return	true if this is a useful stop key
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>optTable</ParamName>
                    <ParamType>Optimizable</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStartOperator</MethodName>
            <MethodComment>/** 
 * Get the start operator for a scan (at the store level) for this RelationalOperator.
 * @param optTable	The optimizable table we're doing the scan on.This parameter is so we can tell which side of the operator the table's column is on.
 * @return	Either ScanController.GT or ScanController.GE
 * @see TransactionController#openScan
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>optTable</ParamName>
                    <ParamType>Optimizable</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStopOperator</MethodName>
            <MethodComment>/** 
 * Get the stop operator for a scan (at the store level) for this RelationalOperator.
 * @param optTable	The optimizable table we're doing the scan on.This parameter is so we can tell which side of the operator the table's column is on.
 * @return	Either ScanController.GT or ScanController.GE
 * @see TransactionController#openScan
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>optTable</ParamName>
                    <ParamType>Optimizable</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateAbsoluteColumnId</MethodName>
            <MethodComment>/** 
 * Generate the absolute column id for the ColumnReference that appears on one side of this RelationalOperator or the other, and that refers to the given table. (Absolute column id means column id within the  row stored on disk.)
 * @param mb	The method the generated code is to go into
 * @param optTable	The optimizable table we're doing the scan on.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mb</ParamName>
                    <ParamType>MethodBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>optTable</ParamName>
                    <ParamType>Optimizable</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateRelativeColumnId</MethodName>
            <MethodComment>/** 
 * Generate the relative column id for the ColumnReference that appears on one side of this RelationalOperator or the other, and that refers to the given table. (Relative column id means column id within the  partial row returned by the store.)
 * @param mb	The method the generated code is to go into
 * @param optTable	The optimizable table we're doing the scan on.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mb</ParamName>
                    <ParamType>MethodBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>optTable</ParamName>
                    <ParamType>Optimizable</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateOperator</MethodName>
            <MethodComment>/** 
 * Generate the comparison operator for this RelationalOperator. The operator can depend on which side of this operator the optimizable column is.
 * @param mb	The method the generated code is to go into
 * @param optTable	The optimizable table we're doing the scan on.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mb</ParamName>
                    <ParamType>MethodBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>optTable</ParamName>
                    <ParamType>Optimizable</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateQualMethod</MethodName>
            <MethodComment>/** 
 * Generate the method to evaluate a Qualifier.  The factory method for a Qualifier takes a GeneratedMethod that returns the Orderable that Qualifier.getOrderable() returns.
 * @param acb	The ExpressionClassBuilder for the class we're building
 * @param mb	The method the generated code is to go into
 * @param optTable	The Optimizable table the Qualifier will qualify
 * @exception StandardException		Thrown on error.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>acb</ParamName>
                    <ParamType>ExpressionClassBuilderInterface</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mb</ParamName>
                    <ParamType>MethodBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>optTable</ParamName>
                    <ParamType>Optimizable</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateOrderedNulls</MethodName>
            <MethodComment>/** 
 * Generate an expression that evaluates to true if this RelationalOperator uses ordered null semantics, false if it doesn't.
 * @param mb	The method the generated code is to go into
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mb</ParamName>
                    <ParamType>MethodBuilder</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateNegate</MethodName>
            <MethodComment>/** 
 * Generate an expression that evaluates to true if the result of the comparison should be negated.  For example, col &amp;gt; 1 generates a comparison operator of &amp;lt;= and a negation of true, while col &amp;lt; 1 generates a comparison operator of &amp;lt; and a negation of false.
 * @param mb	The method the generated code is to go into
 * @param optTable	The Optimizable table the Qualifier will qualify
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mb</ParamName>
                    <ParamType>MethodBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>optTable</ParamName>
                    <ParamType>Optimizable</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>orderedNulls</MethodName>
            <MethodComment>/** 
 * Return true if this operator uses ordered null semantics 
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isQualifier</MethodName>
            <MethodComment>/** 
 * Return true if this operator can be compiled into a Qualifier for the given Optimizable table.  This means that there is a column from that table on one side of this relop, and an expression that does not refer to the table on the other side of the relop. Note that this method has two uses: 1) see if this operator (or more specifically, the predicate to which this operator belongs) can be used as a join predicate (esp. for a hash join), and 2) see if this operator can be pushed to the target optTable.  We use the parameter "forPush" to distinguish between the two uses because in some cases (esp. situations where we have subqueries) the answer to "is this a qualifier?" can differ depending on whether or not we're pushing.  In particular, for binary ops that are join predicates, if we're just trying to find an equijoin predicate then this op qualifies if it references either the target table OR any of the base tables in the table's subtree. But if we're planning to push the predicate down to the target table, this op only qualifies if it references the target table directly.  This difference in behavior is required because in case 1 (searching for join predicates), the operator remains at its current level in the tree even if its operands reference nodes further down; in case 2, though, we'll end up pushing the operator down the tree to child node(s) and that requires additional logic, such as "scoping" consideration.  Until that logic is in place, we don't search a subtree if the intent is to push the predicate to which this operator belongs further down that subtree.  See BinaryRelationalOperatorNode for an example of where this comes into play.
 * @param optTable	The Optimizable table in question.
 * @param forPush	Are we asking because we're trying to push?
 * @return	true if this operator can be compiled into a Qualifierfor the given Optimizable table.
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>optTable</ParamName>
                    <ParamType>Optimizable</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>forPush</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOperator</MethodName>
            <MethodComment>/** 
 * Return the operator (as an int) for this RelationalOperator.
 * @return int		The operator for this RelationalOperator.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOrderableVariantType</MethodName>
            <MethodComment>/** 
 * Return the variant type for the Qualifier's Orderable. (Is the Orderable invariant within a scan or within a query?)
 * @param optTable	The Optimizable table the Qualifier will qualify
 * @return int		The variant type for the Qualifier's Orderable.
 * @exception StandardException	thrown on error
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>optTable</ParamName>
                    <ParamType>Optimizable</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compareWithKnownConstant</MethodName>
            <MethodComment>/** 
 * Return whether this operator compares the given Optimizable with a constant whose value is known at compile time.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>optTable</ParamName>
                    <ParamType>Optimizable</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>considerParameters</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCompareValue</MethodName>
            <MethodComment>/** 
 * Return an Object representing the known value that this relational operator is comparing to a column in the given Optimizable.
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>DataValueDescriptor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>optTable</ParamName>
                    <ParamType>Optimizable</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>equalsComparisonWithConstantExpression</MethodName>
            <MethodComment>/** 
 * Return whether this operator is an equality comparison of the given optimizable with a constant expression.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>optTable</ParamName>
                    <ParamType>Optimizable</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTransitiveSearchClause</MethodName>
            <MethodComment>/** 
 * Return a relational operator which matches the current one but with the passed in ColumnReference as the (left) operand.
 * @param otherCR	The ColumnReference for the new (left) operand.
 * @return	A relational operator which matches the current onebut with the passed in ColumnReference as the (left) operand.
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>RelationalOperator</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>otherCR</ParamName>
                    <ParamType>ColumnReference</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>