<Class>
    <Id>1309</Id>
    <Package>org.apache.derby.impl.jdbc</Package>
    <ClassName>LOBStoredProcedure</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>LOBStoredProcedure  /** 
 * Contains the stored procedures that will be used in the LOB client side methods.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>CLOBCREATELOCATOR</MethodName>
            <MethodComment>/** 
 * Creates a new empty Clob and registers it in the HashMap in the Connection and returns the locator value corresponding to this Clob.
 * @return an integer that maps to the Clob value created.
 * @throws SQLException
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>EngineLOB [clob=(EngineLOB)getEmbedConnection().createClob()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>CLOBRELEASELOCATOR</MethodName>
            <MethodComment>/** 
 * Removes the supplied LOCATOR entry from the hash map.
 * @param LOCATOR an integer that represents the locator that needs to beremoved from the hash map.
 * @throws SQLException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>LOCATOR</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Clob [clob=(Clob)getEmbedConnection().getLOBMapping(LOCATOR)]</InnerVar>
                <InnerVar>EmbedClob [embedClob=(EmbedClob)clob]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>embedClob;free;[]</InnerMethodInvoke>
                <InnerMethodInvoke>getEmbedConnection();removeLOBMapping;[LOCATOR]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>CLOBGETPOSITIONFROMSTRING</MethodName>
            <MethodComment>/** 
 * returns the first occurrence of the given search string from the given start search position inside the Clob.
 * @param LOCATOR an integer that represents the locator of the Clobin which the given position of the given sub-string needs to be found.
 * @param searchLiteral a String whose occurence inside the Clob needs tobe found starting from pos.
 * @param fromPosition an integer that represents the position insidethe Clob from which the search needs to begin.
 * @return an integer that represents the position inside the Clob of thefirst occurrence of the sub-string from the given starting position.
 * @throws SQLException
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>LOCATOR</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>searchLiteral</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fromPosition</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>CLOBGETPOSITIONFROMLOCATOR</MethodName>
            <MethodComment>/** 
 * returns the first occurrence of the given search string from the given start search position inside the Clob.
 * @param LOCATOR an integer that represents the locator of the Clobin which the given position of the given sub-string needs to be found.
 * @param searchLocator a Locator representing a Clob whose occurence insidethe Clob needs to be found starting from pos.
 * @param fromPosition an integer that represents the position insidethe Clob from which the search needs to begin.
 * @return an integer that represents the position inside the Clob of thefirst occurrence of the sub-string from the given starting position.
 * @throws SQLException
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>LOCATOR</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>searchLocator</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fromPosition</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>CLOBGETLENGTH</MethodName>
            <MethodComment>/** 
 * returns the length of the Clob corresponding to the LOCATOR value.
 * @param LOCATOR an integer that represents the locator of the Clob whoselength needs to be obtained.
 * @return an integer that represents the length of the Clob.
 * @throws java.sql.SQLException 
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>LOCATOR</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>CLOBGETSUBSTRING</MethodName>
            <MethodComment>/** 
 * Returns the  {@code String} starting from {@code pos} and consisting ofup to  {@code len} consecutive characters from the {@code Clob}corresponding to  {@code LOCATOR}.
 * @param LOCATOR an integer that represents the LOCATOR usedto retrieve an instance of the LOB.
 * @param pos a long that represents the position from whichthe substring begins.
 * @param len an integer representing the maximum length of the substring.The value will be reduced to the maximum allowed return length if required (see  {@link Limits#MAX_CLOB_RETURN_LEN}).
 * @return A substring from the {@code Clob} starting at the given position,not longer than  {@code len} characters.
 * @throws SQLException
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>LOCATOR</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pos</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>len</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>CLOBSETSTRING</MethodName>
            <MethodComment>/** 
 * replaces the characters starting at fromPosition and with length ForLength
 * @param LOCATOR an integer that represents the locator of the Clob in whichthe characters need to be replaced.
 * @param pos an integer that represents the position inside the Clob from whichthe string needs to be replaced.
 * @param length the number of characters from the string that need to be used forreplacement.
 * @param str the string from which the repalcement characters are built.
 * @throws SQLException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>LOCATOR</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pos</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>length</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>str</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>getClobObjectCorrespondingtoLOCATOR(LOCATOR);setString;[pos, str, 0, length]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>CLOBTRUNCATE</MethodName>
            <MethodComment>/** 
 * truncates the Clob value represented by LOCATOR to have a length of length.
 * @param LOCATOR an integer that represents the LOCATOR used to retrieve aninstance of the LOB.
 * @param length an integer that represents the length to which the Clobmust be truncated to.
 * @throws SQLException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>LOCATOR</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>length</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>getClobObjectCorrespondingtoLOCATOR(LOCATOR);truncate;[length]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getClobObjectCorrespondingtoLOCATOR</MethodName>
            <MethodComment>/** 
 * returns the Clob object corresponding to the locator.
 * @param LOCATOR an integer that represents the locator correspondingto the Clob object requested.
 * @return a Clob object that is mapped to the LOCATOR object passed in.
 * @throws a SQLException.
 */
</MethodComment>
            <ReturnType>Clob</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>LOCATOR</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Clob [clob=(Clob)getEmbedConnection().getLOBMapping(LOCATOR)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>BLOBCREATELOCATOR</MethodName>
            <MethodComment>/** 
 * Creates a new empty Blob and registers it in the HashMap in the Connection and returns the locator value corresponding to this Blob.
 * @return an integer that maps to the Blob value created.
 * @throws SQLException
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>EngineLOB [blob=(EngineLOB)getEmbedConnection().createBlob()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>BLOBRELEASELOCATOR</MethodName>
            <MethodComment>/** 
 * Removes the supplied LOCATOR entry from the hash map.
 * @param LOCATOR an integer that represents the locator that needs to beremoved from the hash map.
 * @throws SQLException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>LOCATOR</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Blob [blob=(Blob)getEmbedConnection().getLOBMapping(LOCATOR)]</InnerVar>
                <InnerVar>EmbedBlob [embedBlob=(EmbedBlob)blob]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>embedBlob;free;[]</InnerMethodInvoke>
                <InnerMethodInvoke>getEmbedConnection();removeLOBMapping;[LOCATOR]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>BLOBGETPOSITIONFROMLOCATOR</MethodName>
            <MethodComment>/** 
 * Returns the first occurrence of locator in the Blob.
 * @param LOCATOR the locator value of the Blob in which the seaching needsto be done.
 * @param searchLocator the locator value of the Blob whose position needsneeds to be found.
 * @param pos the position from which the seaching needs to be done.
 * @return the position at which the first occurrence of the Blob isfound.
 * @throws SQLException
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>LOCATOR</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>searchLocator</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pos</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>BLOBGETPOSITIONFROMBYTES</MethodName>
            <MethodComment>/** 
 * Returns the first occurrence of the byte array in the Blob.
 * @param LOCATOR the locator value of the Blob in which the seaching needsto be done.
 * @param searchBytes the byte array whose position needs needs to be found.
 * @param pos the position from which the seaching needs to be done.
 * @return the position at which the first occurrence of the Byte array isfound.
 * @throws SQLException
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>LOCATOR</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>searchBytes</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pos</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>BLOBGETLENGTH</MethodName>
            <MethodComment>/** 
 * Returns the length in bytes of the Blob.
 * @param LOCATOR the locator value of the Blob whose length needs tobe found.
 * @return the length of the Blob object mapped to the locator .
 * @throws SQLException
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>LOCATOR</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>BLOBGETBYTES</MethodName>
            <MethodComment>/** 
 * Reads up to len bytes from the associated  {@code Blob} and returns abyte array containing the bytes read. &lt;p&gt; Note that a smaller number of bytes than requested might be returned. The number of bytes returned can be found by checking the length of the returned byte array.
 * @param LOCATOR the locator value of the Blob from which the byte arrayneeds to be retrieved.
 * @param len the maximum number of bytes to read. The value will bereduced to the maximum allowed return length if required (see  {@link Limits#MAX_BLOB_RETURN_LEN}).
 * @param pos the position from which the bytes from the Blob need to beretrieved.
 * @return A byte array containing the bytes read, starting from position{@code pos} in the {@code Blob}.
 * @throws SQLException
 */
</MethodComment>
            <ReturnType>byte[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>LOCATOR</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pos</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>len</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>BLOBSETBYTES</MethodName>
            <MethodComment>/** 
 * Replaces the bytes at pos with len bytes
 * @param LOCATOR the integer that represents the Blob in which the bytesneed to be replaced.
 * @param pos the position stating from which the byte replacement needs tohappen.
 * @param len the number of bytes that need to be used in replacement.
 * @param replaceBytes the byte array that contains the bytes that needs tobe used for replacement.
 * @throws SQLException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>LOCATOR</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pos</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>len</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>replaceBytes</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>getBlobObjectCorrespondingtoLOCATOR(LOCATOR);setBytes;[pos, replaceBytes, 0, len]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>BLOBTRUNCATE</MethodName>
            <MethodComment>/** 
 * truncates the Blob value represented by LOCATOR to have a length of length.
 * @param LOCATOR an integer that represents the LOCATOR used to retrieve aninstance of the LOB.
 * @param length an integer that represents the length to which the Blobmust be truncated to.
 * @throws SQLException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>LOCATOR</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>length</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>getBlobObjectCorrespondingtoLOCATOR(LOCATOR);truncate;[length]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBlobObjectCorrespondingtoLOCATOR</MethodName>
            <MethodComment>/** 
 * returns the Blob object corresponding to the locator.
 * @param LOCATOR an integer that represents the locator correspondingto the Blob object requested.
 * @return a Blob object that is mapped to the LOCATOR object passed in.
 * @throws SQLException
 */
</MethodComment>
            <ReturnType>Blob</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>LOCATOR</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Blob [blob=(Blob)getEmbedConnection().getLOBMapping(LOCATOR)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEmbedConnection</MethodName>
            <MethodComment>/** 
 * Returns the EmbedConnection object.
 * @throws SQLException.
 */
</MethodComment>
            <ReturnType>EmbedConnection</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>InternalDriver [id=InternalDriver.activeDriver()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newSQLException</MethodName>
            <MethodComment>/** 
 * Generate the SQLException with the appropriate SQLState.
 * @param messageId The messageId of the message associated with this message.
 * @return a SQLEXception.
 */
</MethodComment>
            <ReturnType>SQLException</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>messageId</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>