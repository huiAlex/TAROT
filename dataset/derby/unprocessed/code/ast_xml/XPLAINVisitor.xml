<Class>
    <Id>1872</Id>
    <Package>org.apache.derby.iapi.sql.execute.xplain</Package>
    <ClassName>XPLAINVisitor</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>XPLAINVisitor  /** 
 * Classes, which implement this interface have the ability to explain the gathered ResultSetStatistics. A Visitor pattern is used to traverse the  ResultSetStatistics tree and to extract the required information. Classes  implementing this interface are responsible about what they extract  and what will be done with the extracted information. This approach allows easy representaion extensions of the statistics,  e.g. an XML representation. 
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>reset</MethodName>
            <MethodComment>/** 
 * Call this method to reset the visitor for a new run over the  statistics. A default implementation should call this method automatically at first of a call of doXPLAIN(). 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>doXPLAIN</MethodName>
            <MethodComment>/** 
 * This method is the hook method which is called from the TopResultSet. It starts the explanation of the current ResultSetStatistics tree  and keeps the information during one explain run.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rss</ParamName>
                    <ParamType>RunTimeStatistics</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>activation</ParamName>
                    <ParamType>Activation</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment>/** 
 * This is the Visitor hook method, which gets called from each  ResultSetStatistics. It depends on the sub-class implementation of this interface, to describe the behaviour of the explanation facility. &lt;br/&gt; To be easily extendable with new explain representation methods,  just implement this interface and provide the new behaviour. 
 * @param statistics the statistics, which want to get explained.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>statistics</ParamName>
                    <ParamType>ResultSetStatistics</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setNumberOfChildren</MethodName>
            <MethodComment>/** 
 * This method informs the visitor about the number of children. It has to  be called first! by the different explainable nodes before the visit  method of the visitor gets called. Each node knows how many children he has.  The visitor can use this information to resolve the relationship of the  current explained node to above nodes. Due to the top-down, pre-order,  depth-first traversal of the tree, this information can directly  be exploited.  
 * @param noChildren the number of children of the current explained node.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>noChildren</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>