<Class>
    <Id>1108</Id>
    <Package>org.apache.derby.iapi.sql.dictionary</Package>
    <ClassName>ColumnDescriptorList</ClassName>
    <SuperClass>ArrayList</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ColumnDescriptorList  /** 
 * This represents a list of column descriptors. 
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>add</MethodName>
            <MethodComment>/** 
 * Add the column.  Currently, the table id is ignored.
 * @param tableID the table id (ignored)
 * @param column the column to add
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tableID</ParamName>
                    <ParamType>UUID</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>column</ParamName>
                    <ParamType>ColumnDescriptor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;add;[column]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getColumnDescriptor</MethodName>
            <MethodComment>/** 
 * Get the column descriptor
 * @param tableID the table id (ignored)
 * @param columnName the column get
 * @return the column descriptor if found
 */
</MethodComment>
            <ReturnType>ColumnDescriptor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tableID</ParamName>
                    <ParamType>UUID</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columnName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ColumnDescriptor [returnValue=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getColumnDescriptor</MethodName>
            <MethodComment>/** 
 * Get the column descriptor
 * @param tableID the table id (ignored)
 * @param columnID the column id
 * @return the column descriptor if found
 */
</MethodComment>
            <ReturnType>ColumnDescriptor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tableID</ParamName>
                    <ParamType>UUID</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columnID</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ColumnDescriptor [returnValue=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>elementAt</MethodName>
            <MethodComment>/** 
 * Return the nth (0-based) element in the list.
 * @param n	Which element to return.
 * @return The nth element in the list.
 */
</MethodComment>
            <ReturnType>ColumnDescriptor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>n</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getColumnNames</MethodName>
            <MethodComment>/** 
 * Get an array of strings for all the columns in this CDL.
 * @return the array of strings
 */
</MethodComment>
            <ReturnType>String[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [strings[]=new String[size()]]</InnerVar>
                <InnerVar>int [size=size()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>