<Class>
    <Id>937</Id>
    <Package>org.apache.derbyTesting.junit</Package>
    <ClassName>IndexStatsUtil</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>IndexStatsUtil  /** 
 * Helper class for obtaining index statistics and doing asserts on them. &lt;p&gt; This implementation assumes all tables/indexes belong to the current schema. &lt;p&gt; The &lt;em&gt;timeout&lt;/em&gt; value is used to make the utility more resilient to differences in timing due to varying scheduling decisions, processor speeds, etc. If the system table contains the wrong number of statistics objects for the query, it will be queried repeatedly until the right number of statistics objects is obtained or the query times out.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>INDEX</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>TABLE</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>NO_EXPECTATION</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SEP</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>con</FieldName>
            <FieldType>Connection</FieldType>
        </Field>
        <Field>
            <FieldName>timeout</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>psGetTableId</FieldName>
            <FieldType>PreparedStatement</FieldType>
        </Field>
        <Field>
            <FieldName>psGetStatsForTable</FieldName>
            <FieldType>PreparedStatement</FieldType>
        </Field>
        <Field>
            <FieldName>psGetIndexId</FieldName>
            <FieldType>PreparedStatement</FieldType>
        </Field>
        <Field>
            <FieldName>psGetStatsForIndex</FieldName>
            <FieldType>PreparedStatement</FieldType>
        </Field>
        <Field>
            <FieldName>psGetStats</FieldName>
            <FieldType>PreparedStatement</FieldType>
        </Field>
        <Field>
            <FieldName>psGetIdToNameMapConglom</FieldName>
            <FieldType>PreparedStatement</FieldType>
        </Field>
        <Field>
            <FieldName>psGetIdToNameMapTable</FieldName>
            <FieldType>PreparedStatement</FieldType>
        </Field>
        <Field>
            <FieldName>NA</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>rows</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>card</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>lcols</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>id</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>tableId</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>tableName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>indexId</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>indexName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>created</FieldName>
            <FieldType>Timestamp</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>IndexStatsUtil</MethodName>
            <MethodComment>/** 
 * Creates an instance querying the given database with no timeout set. &lt;p&gt; Querying with no timeout means that if there are too few or too many statistics objects matching the query, a failure will be raised immediately.
 * @param con connection to the database to query
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>con</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>IndexStatsUtil</MethodName>
            <MethodComment>/** 
 * Creates an instance querying the given database with the specified timeout value.
 * @param con connection to the database to query
 * @param timeout the longest time to wait to see if the expectations for aquery are met (milliseconds)
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>con</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>timeout</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>assertNoStats</MethodName>
            <MethodComment>/** 
 * Asserts that there are no existing statistics in the database.
 * @throws SQLException if obtaining the statistics fails
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertStats;[0]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>assertNoStatsTable</MethodName>
            <MethodComment>/** 
 * Asserts that there are no existing statistics for the specified table.
 * @throws SQLException if obtaining the statistics fails
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>table</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertTableStats;[table, 0]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>assertStats</MethodName>
            <MethodComment>/** 
 * Asserts that the expected number of statistics exists.
 * @param expectedCount expected number of statistics
 * @throws SQLException if obtaining the statistics fails
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expectedCount</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>IdxStats[] [ret=getStats()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>assertTableStats</MethodName>
            <MethodComment>/** 
 * Asserts that the expected number of statistics exists for the specified table.
 * @param table the target table
 * @param expectedCount expected number of statistics
 * @throws SQLException if obtaining the statistics fails
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>table</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>expectedCount</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;getStatsTable;[table, expectedCount]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>assertIndexStats</MethodName>
            <MethodComment>/** 
 * Asserts that the expected number of statistics exists for the specified index.
 * @param index the target index
 * @param expectedCount expected number of statistics
 * @throws SQLException if obtaining the statistics fails
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>index</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>expectedCount</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;getStatsIndex;[index, expectedCount]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildStatString</MethodName>
            <MethodComment>/** 
 * Builds a human readable representation of a list of statistics objects.
 * @param stats a list of statistics (possibly empty)
 * @param name the name of the table(s)/index(es) associated with the stats
 * @return A string representation of the statistics.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>stats</ParamName>
                    <ParamType>IdxStats[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuffer [sb=new StringBuffer("Index statistics for " + name + SEP)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStats</MethodName>
            <MethodComment>/** 
 * Obtains all existing statistics entries.
 * @return A list of statistics entries (possibly empty).
 * @throws SQLException if obtaining the statistics fail
 */
</MethodComment>
            <ReturnType>IdxStats[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStatsTable</MethodName>
            <MethodComment>/** 
 * Obtains statistics for the specified table.
 * @param table table name
 * @return A list of statistics entries (possibly empty).
 * @throws SQLException if obtaining the statistics fail
 */
</MethodComment>
            <ReturnType>IdxStats[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>table</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStatsTable</MethodName>
            <MethodComment>/** 
 * Obtains statistics for the specified table, fails if the number of statistics objects isn't as expected within the timeout.
 * @param table table name
 * @param expectedCount number of expected statistics objects
 * @return A list of statistics entries (possibly empty).
 * @throws SQLException if obtaining the statistics fail
 */
</MethodComment>
            <ReturnType>IdxStats[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>table</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>expectedCount</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ResultSet [rs=psGetTableId.executeQuery()]</InnerVar>
                <InnerVar>String [tableId=rs.getString(1)]</InnerVar>
                <InnerVar>IdxStats[] [ret=querySystemTable(tableId,TABLE,expectedCount)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>psGetTableId;setString;[1, table]</InnerMethodInvoke>
                <InnerMethodInvoke>Assert;assertTrue;["No such table: " + table, rs.next()]</InnerMethodInvoke>
                <InnerMethodInvoke>Assert;assertFalse;["More than one table named " + table, rs.next()]</InnerMethodInvoke>
                <InnerMethodInvoke>rs;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNewStatsTable</MethodName>
            <MethodComment>/** 
 * Waits for the current statistics to disappear and expects to fetch the same number of new statistics for the table.
 * @param table the table to get statistics for
 * @param currentStats the current statistics
 * @return The new statistics.
 * @throws SQLException if obtaining statistics fails
 */
</MethodComment>
            <ReturnType>IdxStats[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>table</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>currentStats</ParamName>
                    <ParamType>IdxStats[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;awaitChange;[currentStats, timeout]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStatsIndex</MethodName>
            <MethodComment>/** 
 * Obtains statistics for the specified index.
 * @param index index name
 * @return A list of statistics entries (possibly empty).
 * @throws SQLException if obtaining the statistics fail
 */
</MethodComment>
            <ReturnType>IdxStats[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>index</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStatsIndex</MethodName>
            <MethodComment>/** 
 * Obtains statistics for the specified index, fails if the number of statistics objects isn't as expected within the timeout.
 * @param index index name
 * @param expectedCount number of expected statistics objects
 * @return A list of statistics entries (possibly empty).
 * @throws SQLException if obtaining the statistics fail
 */
</MethodComment>
            <ReturnType>IdxStats[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>index</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>expectedCount</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ResultSet [rs=psGetIndexId.executeQuery()]</InnerVar>
                <InnerVar>String [indexId=rs.getString(1)]</InnerVar>
                <InnerVar>IdxStats[] [ret=querySystemTable(indexId,INDEX,expectedCount)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>psGetIndexId;setString;[1, index]</InnerMethodInvoke>
                <InnerMethodInvoke>Assert;assertTrue;["No such index: " + index, rs.next()]</InnerMethodInvoke>
                <InnerMethodInvoke>Assert;assertFalse;["More than one index named " + index, rs.next()]</InnerMethodInvoke>
                <InnerMethodInvoke>rs;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>querySystemTable</MethodName>
            <MethodComment>/** 
 * Queries the system table  {@code SYS.SYSSTATISTICS} for statisticsassociated with a specific table or index.
 * @param conglomId conglomerate id (UUID)
 * @param isTable tells if the conglomerate is a table or an index
 * @param expectedCount the number of statistics objects expected, use{@code NO_EXPECTATION} to return whatever matches the queryimmediately
 */
</MethodComment>
            <ReturnType>IdxStats[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conglomId</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isTable</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>expectedCount</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PreparedStatement [ps]</InnerVar>
                <InnerVar>long [started=System.currentTimeMillis()]</InnerVar>
                <InnerVar>long [waited=-1]</InnerVar>
                <InnerVar>IdxStats[] [ret=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ps;setString;[1, conglomId]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>printStats</MethodName>
            <MethodComment>/** 
 * Prints all entries in the  {@code SYS.SYSSTATISTICS} system table.
 * @throws SQLException if obtaining the statistics fails
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>System.out;println;[buildStatString(getStats(),"all tables")]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getIdToNameMap</MethodName>
            <MethodComment>/** 
 * Generates a map from ids to names for conglomerates in the database. &lt;p&gt; Convenience method, used for better reporting.
 * @return Mappings from conglomerate id to conglomerate name.
 * @throws SQLException if accessing the system tables fail
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Map&lt;String,String&gt; [map=new HashMap&lt;String,String&gt;()]</InnerVar>
                <InnerVar>ResultSet [rs=psGetIdToNameMapConglom.executeQuery()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rs;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>rs;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildStatisticsList</MethodName>
            <MethodComment>/** 
 * Builds an array of statistics objects from data from the {@code SYS.SYSSTATISTICS} system table.
 * @param rs a result set containing rows from {@code SYS.SYSSTATISTICS}
 * @return A list of statistics objects
 * @throws SQLException if accessing the result set fails
 */
</MethodComment>
            <ReturnType>IdxStats[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rs</ParamName>
                    <ParamType>ResultSet</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>idToName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;IdxStats&gt; [stats=new ArrayList&lt;IdxStats&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rs;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>release</MethodName>
            <MethodComment>/** 
 * Releases resources and closes the associated connection.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;release;[true]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>release</MethodName>
            <MethodComment>/** 
 * Releases resources.
 * @param closeConnection whether to close the associated connection
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>closeConnection</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PreparedStatement[] [psToClose=new PreparedStatement[]{psGetStats,psGetIndexId,psGetStatsForIndex,psGetStatsForTable,psGetTableId,psGetIdToNameMapConglom,psGetIdToNameMapTable}]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>awaitChange</MethodName>
            <MethodComment>/** 
 * Waits until all given statistics entries have been changed, or until the call times out. &lt;p&gt; &lt;em&gt;NOTE&lt;/em&gt;: The method is built on the assumption that the UUIDs of statistics objects aren't reused. That is, when statistics are updated, the old row in SYS.SYSSTATISTICS will be dropped and a new row will be inserted.
 * @param current the statistics that must change / be replaced
 * @param timeout maximum number of milliseconds to wait before giving up
 * @throws SQLException if obtaining statistics fails
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>current</ParamName>
                    <ParamType>IdxStats[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>timeout</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Set&lt;IdxStats&gt; [oldStats=new HashSet&lt;IdxStats&gt;(Arrays.asList(current))]</InnerVar>
                <InnerVar>Set&lt;IdxStats&gt; [newStats=null]</InnerVar>
                <InnerVar>long [start=System.currentTimeMillis()]</InnerVar>
                <InnerVar>IdxStats[] [outstanding=new IdxStats[newStats.size()]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>newStats;toArray;[outstanding]</InnerMethodInvoke>
                <InnerMethodInvoke>Assert;fail;[outstanding.length + " missing statistics changes " + "(timeout="+ timeout+ "ms): "+ buildStatString(outstanding,"&lt;unchanged statistics&gt;")]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>IdxStats</MethodName>
            <MethodComment>/** 
 * Creates a new statistics object with names for the table and the index specified for convenience.
 * @param id statistics identifier
 * @param indexId index identifier
 * @param indexName index name (may be {@code null})
 * @param tableId table identifier
 * @param tableName table name (may be {@code null})
 * @param created creation timestamp
 * @param lcols number of leading columns
 * @param stats the statistics, as reported when doing {@code getString}on the column  {@code STATISTICS} in {@code SYS.SYSSTATISTICS}(number of unique rows and total rows, for instance "numunique= 3 numrows= 3")
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>id</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indexId</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indexName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableId</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>created</ParamName>
                    <ParamType>Timestamp</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lcols</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stats</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [uniqPos=stats.indexOf('=')]</InnerVar>
                <InnerVar>int [space=stats.indexOf(' ',uniqPos + 2)]</InnerVar>
                <InnerVar>int [rowsPos=stats.indexOf('=',space)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>after</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>other</ParamName>
                    <ParamType>IdxStats</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>before</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>other</ParamName>
                    <ParamType>IdxStats</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>StringBuffer [sb=new StringBuffer(200)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>sb.append("{tableId=").append(tableId).append(", tableName=").append(tableName).append(", indexName=").append(indexName).append(", lcols=").append(lcols).append(", rows=").append(rows).append(", unique/card=").append(card).append(", created=").append(created);append;['}']</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>equals</MethodName>
            <MethodComment>/** 
 * Equality is based on the statistics entry UUID.
 * @param obj other object
 * @return {@code true} if the other object is considered equal to this
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>obj</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>IdxStats [other=(IdxStats)obj]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hashCode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [hash=7]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>