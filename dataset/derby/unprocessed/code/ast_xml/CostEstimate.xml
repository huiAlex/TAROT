<Class>
    <Id>984</Id>
    <Package>org.apache.derby.iapi.sql.compile</Package>
    <ClassName>CostEstimate</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>StoreCostResult</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>CostEstimate  /** 
 * A CostEstimate represents the cost of getting a ResultSet, along with the ordering of rows in the ResultSet, and the estimated number of rows in this ResultSet.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>setCost</MethodName>
            <MethodComment>/** 
 * Set the cost for this cost estimate.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cost</ParamName>
                    <ParamType>double</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rowCount</ParamName>
                    <ParamType>double</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>singleScanRowCount</ParamName>
                    <ParamType>double</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setCost</MethodName>
            <MethodComment>/** 
 * Copy the values from the given cost estimate into this one.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>other</ParamName>
                    <ParamType>CostEstimate</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setSingleScanRowCount</MethodName>
            <MethodComment>/** 
 * Set the single scan row count.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>singleRowScanCount</ParamName>
                    <ParamType>double</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compare</MethodName>
            <MethodComment>/** 
 * Compare this cost estimate with the given cost estimate.
 * @param other		The cost estimate to compare this one with
 * @return	&amp;lt; 0 if this &amp;lt; other, 0 if this == other, &amp;gt; 0 if this &amp;gt; other
 */
</MethodComment>
            <ReturnType>double</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>other</ParamName>
                    <ParamType>CostEstimate</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>add</MethodName>
            <MethodComment>/** 
 * Add this cost estimate to another one.  This presumes that any row ordering is destroyed.
 * @param addend	This cost estimate to add this one to.
 * @param retval	If non-null, put the result here.
 * @return  this + other.
 */
</MethodComment>
            <ReturnType>CostEstimate</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>addend</ParamName>
                    <ParamType>CostEstimate</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>retval</ParamName>
                    <ParamType>CostEstimate</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>multiply</MethodName>
            <MethodComment>/** 
 * Multiply this cost estimate by a scalar, non-dimensional number.  This presumes that any row ordering is destroyed.
 * @param multiplicand	The value to multiply this CostEstimate by.
 * @param retval	If non-null, put the result here.
 * @return	this * multiplicand
 */
</MethodComment>
            <ReturnType>CostEstimate</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>multiplicand</ParamName>
                    <ParamType>double</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>retval</ParamName>
                    <ParamType>CostEstimate</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>divide</MethodName>
            <MethodComment>/** 
 * Divide this cost estimate by a scalar, non-dimensional number.
 * @param divisor	The value to divide this CostEstimate by.
 * @param retval	If non-null, put the result here.
 * @return	this / divisor
 */
</MethodComment>
            <ReturnType>CostEstimate</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>divisor</ParamName>
                    <ParamType>double</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>retval</ParamName>
                    <ParamType>CostEstimate</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rowCount</MethodName>
            <MethodComment>/** 
 * Get the estimated number of rows returned by the ResultSet that this CostEstimate models.
 */
</MethodComment>
            <ReturnType>double</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>singleScanRowCount</MethodName>
            <MethodComment>/** 
 * Get the estimated number of rows returned by a single scan of the ResultSet that this CostEstimate models.
 */
</MethodComment>
            <ReturnType>double</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cloneMe</MethodName>
            <MethodComment>/** 
 * Get a copy of this CostEstimate 
 */
</MethodComment>
            <ReturnType>CostEstimate</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isUninitialized</MethodName>
            <MethodComment>/** 
 * Return whether or not this CostEstimate is uninitialized.
 * @return Whether or not this CostEstimate is uninitialized.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>