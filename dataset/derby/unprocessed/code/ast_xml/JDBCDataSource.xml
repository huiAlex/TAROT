<Class>
    <Id>1738</Id>
    <Package>org.apache.derbyTesting.junit</Package>
    <ClassName>JDBCDataSource</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>JDBCDataSource  /** 
 * Utility methods related to JDBC DataSource objects. J2EEDataSource exists to return XA and connection pooling data sources.
 * @see J2EEDataSource
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getDataSource</MethodName>
            <MethodComment>/** 
 * Return a new DataSource corresponding to the current configuration. The getConnection() method will return a connection identical to TestConfiguration.openDefaultConnection().
 */
</MethodComment>
            <ReturnType>javax.sql.DataSource</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDataSource</MethodName>
            <MethodComment>/** 
 * Return a new DataSource corresponding to the current configuration except that the database name is different.
 */
</MethodComment>
            <ReturnType>javax.sql.DataSource</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dbName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>javax.sql.DataSource [ds=getDataSource()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setBeanProperty;[ds, "databaseName", dbName]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDataSourceLogical</MethodName>
            <MethodComment>/** 
 * Return a DataSource corresponding to one of the logical databases in the current configuration.
 */
</MethodComment>
            <ReturnType>javax.sql.DataSource</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>logicalDatabasename</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>javax.sql.DataSource [ds=getDataSource()]</InnerVar>
                <InnerVar>TestConfiguration [current=TestConfiguration.getCurrent()]</InnerVar>
                <InnerVar>String [physicalName=current.getPhysicalDatabaseName(logicalDatabasename)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setBeanProperty;[ds, "databaseName", physicalName]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDataSource</MethodName>
            <MethodComment>/** 
 * Create a new DataSource object setup from the passed in TestConfiguration. The getConnection() method will return a connection identical to TestConfiguration.openDefaultConnection().
 */
</MethodComment>
            <ReturnType>javax.sql.DataSource</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>config</ParamName>
                    <ParamType>TestConfiguration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>beanProperties</ParamName>
                    <ParamType>HashMap</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDataSource</MethodName>
            <MethodComment>/** 
 * Create a new DataSource object setup from the passed in TestConfiguration using the received properties and data source class name.
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>config</ParamName>
                    <ParamType>TestConfiguration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>beanProperties</ParamName>
                    <ParamType>HashMap</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dsClassName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDataSourceProperties</MethodName>
            <MethodComment>/** 
 * Create a HashMap with the set of Derby DataSource Java bean properties corresponding to the configuration.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>config</ParamName>
                    <ParamType>TestConfiguration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>HashMap&lt;String,Object&gt; [beanProperties=new HashMap&lt;String,Object&gt;()]</InnerVar>
                <InnerVar>String [attributes=config.getConnectionAttributesString()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>beanProperties;put;["databaseName", config.getDefaultDatabaseName()]</InnerMethodInvoke>
                <InnerMethodInvoke>beanProperties;put;["user", config.getUserName()]</InnerMethodInvoke>
                <InnerMethodInvoke>beanProperties;put;["password", config.getUserPassword()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDataSourceObject</MethodName>
            <MethodComment>/** 
 * Return a DataSource object of the passed in type configured with the passed in Java bean properties. This will actually work with any object that has Java bean setter methods. &lt;BR&gt; If a thread context class loader exists then it is used to try and load the class.
 */
</MethodComment>
            <ReturnType>javax.sql.DataSource</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classname</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>beanProperties</ParamName>
                    <ParamType>HashMap</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassLoader [contextLoader=AccessController.doPrivileged(new PrivilegedAction&lt;ClassLoader&gt;(){
  public ClassLoader run(){
    return Thread.currentThread().getContextClassLoader();
  }
}
)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClassLoader</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setBeanProperty</MethodName>
            <MethodComment>/** 
 * Set a bean property for a data source. This code can be used on any data source type.
 * @param ds DataSource to have property set
 * @param property name of property.
 * @param value Value, type is derived from value's class.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ds</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>property</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [setterName=getSetterName(property)]</InnerVar>
                <InnerVar>Class [clazz=value.getClass()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBeanProperty</MethodName>
            <MethodComment>/** 
 * Get a bean property for a data source. This code can be used on any data source type.
 * @param ds DataSource to fetch property from
 * @param property name of property.
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ds</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>property</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [getterName=getGetterName(property)]</InnerVar>
                <InnerVar>Method [getter=ds.getClass().getMethod(getterName,new Class[0])]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clearStringBeanProperty</MethodName>
            <MethodComment>/** 
 * Clear a String Java bean property by setting it to null.
 * @param ds DataSource to have property cleared
 * @param property name of property.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ds</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>property</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [setterName=getSetterName(property)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSetterName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>attribute</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getGetterName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>attribute</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>shutdownDatabase</MethodName>
            <MethodComment>/** 
 * Shutdown the database described by this data source. The shutdownDatabase property is cleared by this method.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ds</ParamName>
                    <ParamType>javax.sql.DataSource</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setBeanProperty;[ds, "shutdownDatabase", "shutdown"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>shutEngine</MethodName>
            <MethodComment>/** 
 * Shutdown the engine described by this data source. The shutdownDatabase property is cleared by this method.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ds</ParamName>
                    <ParamType>javax.sql.DataSource</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setBeanProperty;[ds, "shutdownDatabase", "shutdown"]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBCDataSource;setBeanProperty;[ds, "databaseName", ""]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>