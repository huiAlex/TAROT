<Class>
    <Id>566</Id>
    <Package>org.apache.derbyTesting.functionTests.util</Package>
    <ClassName>T_ConsistencyChecker</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>T_ConsistencyChecker  /** 
 * This class has methods for corrupting a database.  IT MUST NOT BE DISTRIBUTED WITH THE PRODUCT. NOTE: The entry points to this class are all static, for easy access via the query language.  Each of the static methods instantiates an object from the class and calls methods off of that object.  This allows the sharing of code across the various static methods.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>dd</FieldName>
            <FieldType>DataDictionary</FieldType>
        </Field>
        <Field>
            <FieldName>tc</FieldName>
            <FieldType>TransactionController</FieldType>
        </Field>
        <Field>
            <FieldName>lcc</FieldName>
            <FieldType>LanguageConnectionContext</FieldType>
        </Field>
        <Field>
            <FieldName>indexName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>schemaName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>tableName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>id</FieldName>
            <FieldType>ConglomerateDescriptor</FieldType>
        </Field>
        <Field>
            <FieldName>sd</FieldName>
            <FieldType>SchemaDescriptor</FieldType>
        </Field>
        <Field>
            <FieldName>td</FieldName>
            <FieldType>TableDescriptor</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>T_ConsistencyChecker</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>schemaName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indexName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>deleteFirstHeapRow</MethodName>
            <MethodComment>/** 
 * Delete the first row from the heap, without deleting it from the indexes on the table.
 * @param schemaName	The schema name.
 * @param tableName		The table name.
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>schemaName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>T_ConsistencyChecker [t_cc=new T_ConsistencyChecker(schemaName,tableName,null)]</InnerVar>
                <InnerVar>ScanController [heapScan=t_cc.openUnqualifiedHeapScan()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t_cc;getContexts;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t_cc;getDescriptors;[]</InnerMethodInvoke>
                <InnerMethodInvoke>heapScan;next;[]</InnerMethodInvoke>
                <InnerMethodInvoke>heapScan;delete;[]</InnerMethodInvoke>
                <InnerMethodInvoke>heapScan;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reinsertFirstHeapRow</MethodName>
            <MethodComment>/** 
 * Get the first row from the heap and insert it into the heap again, without inserting it from the indexes on the table.
 * @param schemaName	The schema name.
 * @param tableName		The table name.
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>schemaName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>T_ConsistencyChecker [t_cc=new T_ConsistencyChecker(schemaName,tableName,null)]</InnerVar>
                <InnerVar>ScanController [heapScan=t_cc.openUnqualifiedHeapScan()]</InnerVar>
                <InnerVar>ExecRow [firstRow=t_cc.getHeapRowOfNulls()]</InnerVar>
                <InnerVar>ConglomerateController [heapCC=t_cc.openHeapCC()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t_cc;getContexts;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t_cc;getDescriptors;[]</InnerMethodInvoke>
                <InnerMethodInvoke>heapScan;next;[]</InnerMethodInvoke>
                <InnerMethodInvoke>heapScan;fetch;[firstRow.getRowArray()]</InnerMethodInvoke>
                <InnerMethodInvoke>heapScan;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>heapCC;insert;[firstRow.getRowArray()]</InnerMethodInvoke>
                <InnerMethodInvoke>heapCC;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nullFirstHeapRow</MethodName>
            <MethodComment>/** 
 * Set all of the columns in the first row from  the heap to null, without updating the indexes on the table.
 * @param schemaName	The schema name.
 * @param tableName		The table name.
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>schemaName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>T_ConsistencyChecker [t_cc=new T_ConsistencyChecker(schemaName,tableName,null)]</InnerVar>
                <InnerVar>ScanController [heapScan=t_cc.openUnqualifiedHeapScan()]</InnerVar>
                <InnerVar>RowLocation [baseRL=heapScan.newRowLocationTemplate()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t_cc;getContexts;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t_cc;getDescriptors;[]</InnerMethodInvoke>
                <InnerMethodInvoke>heapScan;next;[]</InnerMethodInvoke>
                <InnerMethodInvoke>heapScan;fetchLocation;[baseRL]</InnerMethodInvoke>
                <InnerMethodInvoke>heapScan;replace;[t_cc.getHeapRowOfNulls().getRowArray(), (FormatableBitSet)null]</InnerMethodInvoke>
                <InnerMethodInvoke>heapScan;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>insertBadRowLocation</MethodName>
            <MethodComment>/** 
 * Get the first row from the heap and insert it into the specified index, with a bad row location, without inserting it into the heap or the other indexes on the table.
 * @param schemaName	The schema name.
 * @param tableName		The table name.
 * @param indexName		The specified index.
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>schemaName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indexName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>T_ConsistencyChecker [t_cc=new T_ConsistencyChecker(schemaName,tableName,indexName)]</InnerVar>
                <InnerVar>ScanController [heapScan=t_cc.openUnqualifiedHeapScan()]</InnerVar>
                <InnerVar>RowLocation [baseRL=heapScan.newRowLocationTemplate()]</InnerVar>
                <InnerVar>RowLocation [badRL=heapScan.newRowLocationTemplate()]</InnerVar>
                <InnerVar>ExecRow [indexRow=t_cc.getIndexTemplateRow(baseRL)]</InnerVar>
                <InnerVar>ScanController [indexScan=t_cc.openUnqualifiedIndexScan()]</InnerVar>
                <InnerVar>int [keyLength=t_cc.getIndexDescriptor().getIndexDescriptor().baseColumnPositions().length]</InnerVar>
                <InnerVar>ConglomerateController [indexCC=t_cc.openIndexCC()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t_cc;getContexts;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t_cc;getDescriptors;[]</InnerMethodInvoke>
                <InnerMethodInvoke>heapScan;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>indexScan;next;[]</InnerMethodInvoke>
                <InnerMethodInvoke>indexScan;fetch;[indexRow.getRowArray()]</InnerMethodInvoke>
                <InnerMethodInvoke>indexScan;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>indexRow;setColumn;[keyLength + 1, badRL]</InnerMethodInvoke>
                <InnerMethodInvoke>indexCC;insert;[indexRow.getRowArray()]</InnerMethodInvoke>
                <InnerMethodInvoke>indexCC;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>swapColumnsInFirstHeapRow</MethodName>
            <MethodComment>/** 
 * Swap the values in the specified columns of the first row from the heap, without updating the indexes on the table.
 * @param schemaName	The schema name.
 * @param tableName		The table name.
 * @param firstColumn	First column #.
 * @param secondColumn	Second column #.
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>schemaName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>firstColumn</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>secondColumn</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getContexts</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDescriptors</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getHeapRowOfNulls</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ExecRow</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>ConglomerateController [baseCC]</InnerVar>
                <InnerVar>ExecRow [baseRow]</InnerVar>
                <InnerVar>ColumnDescriptorList [cdl=td.getColumnDescriptorList()]</InnerVar>
                <InnerVar>int [cdlSize=cdl.size()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>baseCC;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>openUnqualifiedHeapScan</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ScanController</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>ScanController [heapScan]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>openHeapCC</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ConglomerateController</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>ConglomerateController [heapCC]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getIndexTemplateRow</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ExecRow</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>baseRL</ParamName>
                    <ParamType>RowLocation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int[] [baseColumnPositions]</InnerVar>
                <InnerVar>int [baseColumns=0]</InnerVar>
                <InnerVar>ExecRow [indexScanTemplate]</InnerVar>
                <InnerVar>FormatableBitSet [indexColsBitSet=new FormatableBitSet()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>indexScanTemplate;setColumn;[baseColumns + 1, baseRL]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>openUnqualifiedIndexScan</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ScanController</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>ScanController [indexScan]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>openIndexCC</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ConglomerateController</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>ConglomerateController [indexCC]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getIndexDescriptor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ConglomerateDescriptor</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>runConsistencyChecker</MethodName>
            <MethodComment>/** 
 * Run all of the consistency checkers which do not take parameters. Actually, just run the ones that "make sense" to run.  Today, that is: countOpens()
 * @return String       If an inconsistency is found, and if DEBUG is on, then a string will be returned with more info.   If DEBUG is off, then a simple string will be  returned stating whether or not there are open scans.
 * @exception StandardException     Thrown on error
 * @exception java.sql.SQLException     Thrown on error
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>java.sql.SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>countOpens</MethodName>
            <MethodComment>/** 
 * Check to make sure that there are no open conglomerates, scans or sorts.
 * @return String       If an inconsistency is found, and if DEBUG is on, then a string will be returned with more info.   If DEBUG is off, then a simple string will be  returned stating whether or not there are open scans.
 * @exception StandardException     Thrown on error
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [numOpens=0]</InnerVar>
                <InnerVar>LanguageConnectionContext [lcc]</InnerVar>
                <InnerVar>String [output="No open scans, etc.\n"]</InnerVar>
                <InnerVar>TransactionController [tc]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>countDependencies</MethodName>
            <MethodComment>/** 
 * Check to make sure that there are no active dependencies (stored or in memory).
 * @return String       If an inconsistency is found, and if DEBUG is on, then a string will be returned with more info.   If DEBUG is off, then a simple string will be  returned stating whether or not there are open scans.
 * @exception StandardException     Thrown on error
 * @exception java.sql.SQLException     Thrown on error
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [numDependencies=0]</InnerVar>
                <InnerVar>DataDictionary [dd]</InnerVar>
                <InnerVar>DependencyManager [dm]</InnerVar>
                <InnerVar>StringBuffer [debugBuf=new StringBuffer()]</InnerVar>
                <InnerVar>LanguageConnectionContext [lcc=(LanguageConnectionContext)getContext(LanguageConnectionContext.CONTEXT_ID)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>java.sql.SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getContext</MethodName>
            <MethodComment>/** 
 * Privileged lookup of a Context. Must be private so that user code can't call this entry point.
 */
</MethodComment>
            <ReturnType>Context</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>contextID</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Context</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>