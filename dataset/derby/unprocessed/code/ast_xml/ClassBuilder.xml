<Class>
    <Id>1801</Id>
    <Package>org.apache.derby.iapi.services.compiler</Package>
    <ClassName>ClassBuilder</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ClassBuilder  /** 
 * ClassBuilder is used to construct a java class's byte array representation. Limitations: No checking for language use violations such as invalid modifiers or duplicate field names. All classes must have a superclass; java.lang.Object must be supplied if there is no superclass. &lt;p&gt; When a class is first created, it has: &lt;ul&gt; &lt;li&gt; a superclass &lt;li&gt; modifiers &lt;li&gt; a name &lt;li&gt; a package &lt;li&gt; no superinterfaces, methods, fields, or constructors &lt;li&gt; an empty static initializer &lt;/ul&gt; &lt;p&gt; MethodBuilder implementations are required to get code out of the constructs within their bodies in some manner.  Most typically, they may have a stream to which the statement and  expression constructs write the code that they represent, and they walk over the statements and expressions in the appropriate order.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>addField</MethodName>
            <MethodComment>/** 
 * add a field to this class. Fields cannot be initialized here, they must be initialized in the static initializer code (static fields) or in the constructors. &lt;p&gt; Methods are added when they are created with the JavaFactory.
 * @param type	The type of the field in java language.
 * @param name	The name of the field.
 * @param modifiers	The | of the modifier values such aspublic, static, etc.
 * @see ClassBuilder#newMethodBuilder
 * @see #newConstructorBuilder
 */
</MethodComment>
            <ReturnType>LocalField</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>modifiers</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getGeneratedClass</MethodName>
            <MethodComment>/** 
 * Fully create the bytecode and load the class using the ClassBuilder's ClassFactory.
 * @exception StandardException Standard Derby policy
 */
</MethodComment>
            <ReturnType>GeneratedClass</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getClassBytecode</MethodName>
            <MethodComment>/** 
 * At the time the class is completed and bytecode generated, if there are no constructors then the default no-arg constructor will be defined.
 */
</MethodComment>
            <ReturnType>ByteArray</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getName</MethodName>
            <MethodComment>/** 
 * the class's unqualified name
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFullName</MethodName>
            <MethodComment>/** 
 * the class's qualified name
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newMethodBuilder</MethodName>
            <MethodComment>/** 
 * a method. Once it is created, parameters, thrown exceptions, statements, and local variable declarations must be added to it. It is put into its defining class when it is created. &lt;verbatim&gt; Java: #modifiers #returnType #methodName() {} // modifiers is the | of the JVM constants for // the modifiers such as static, public, etc. &lt;/verbatim&gt; &lt;p&gt; This is used to start a constructor as well; pass in null for the returnType when used in that manner.
 * @param modifiers the | of the Modifierconstants representing the visibility and control of this method.
 * @param returnType the return type of the method as itsJava language type name.
 * @param methodName the name of the method.
 * @return the method builder.
 * @see java.lang.reflect.Modifier
 */
</MethodComment>
            <ReturnType>MethodBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>modifiers</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>returnType</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>methodName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newMethodBuilder</MethodName>
            <MethodComment>/** 
 * a method with parameters. Once it is created, thrown exceptions, statements, and local variable declarations must be added to it. It is put into its defining class when it is created. &lt;verbatim&gt; Java: #modifiers #returnType #methodName() {} // modifiers is the | of the JVM constants for // the modifiers such as static, public, etc. &lt;/verbatim&gt; &lt;p&gt; This is used to start a constructor as well; pass in null for the returnType when used in that manner.
 * @param modifiers the | of the Modifierconstants representing the visibility and control of this method.
 * @param returnType the return type of the method as itsJava language type name.
 * @param methodName the name of the method.
 * @param parms	an array of String representing themethod's parameter types
 * @return the method builder.
 * @see java.lang.reflect.Modifier
 */
</MethodComment>
            <ReturnType>MethodBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>modifiers</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>returnType</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>methodName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parms</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newConstructorBuilder</MethodName>
            <MethodComment>/** 
 * a constructor. Once it is created, parameters, thrown exceptions, statements, and local variable declarations must be added to it. It is put into its defining class when it is created. &lt;verbatim&gt; Java: #modifiers #className() {} // modifiers is the | of the JVM constants for // the modifiers such as static, public, etc. // className is taken from definingClass.name() &lt;/verbatim&gt; &lt;p&gt; This is used to start a constructor as well; pass in null for the returnType when used in that manner. &lt;p&gt;
 * @param modifiers the | of the Modifierconstants representing the visibility and control of this method.
 * @return the method builder for the constructor.
 * @see java.lang.reflect.Modifier
 */
</MethodComment>
            <ReturnType>MethodBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>modifiers</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>