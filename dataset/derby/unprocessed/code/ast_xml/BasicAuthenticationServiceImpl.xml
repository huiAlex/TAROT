<Class>
    <Id>1307</Id>
    <Package>org.apache.derby.impl.jdbc.authentication</Package>
    <ClassName>BasicAuthenticationServiceImpl</ClassName>
    <SuperClass>AuthenticationServiceBase</SuperClass>
    <SuperInterfaceList>
        <SuperInterface>UserAuthenticator</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>BasicAuthenticationServiceImpl  /** 
 * This authentication service is the basic Derby user authentication level support. It is activated upon setting derby.authentication.provider database or system property to 'BUILTIN'. &lt;p&gt; It instantiates and calls the basic User authentication scheme at runtime. &lt;p&gt; In 2.0, users can now be defined as database properties. If derby.database.propertiesOnly is set to true, then in this case, only users defined as database properties for the current database will be considered.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>canSupport</MethodName>
            <MethodComment>/** 
 * Check if we should activate this authentication service.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>properties</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [authenticationProvider=PropertyUtil.getPropertyFromSet(properties,org.apache.derby.iapi.reference.Property.AUTHENTICATION_PROVIDER_PARAMETER)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>boot</MethodName>
            <MethodComment>/** 
 * @see org.apache.derby.iapi.services.monitor.ModuleControl#boot
 * @exception StandardException upon failure to load/boot the expectedauthentication service.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>create</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>properties</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this;setAuthenticationService;[this]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>authenticateUser</MethodName>
            <MethodComment>/** 
 * Authenticate the passed-in user's credentials.
 * @param userName		The user's name used to connect to JBMS system
 * @param userPassword	The user's password used to connect to JBMS system
 * @param databaseName	The database which the user wants to connect to.
 * @param info			Additional jdbc connection info.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>userName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>userPassword</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>databaseName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>info</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [clientSecurityMechanism=null]</InnerVar>
                <InnerVar>int [secMec=0]</InnerVar>
                <InnerVar>String [definedUserPassword=null, passedUserPassword=null]</InnerVar>
                <InnerVar>String [userNameProperty=org.apache.derby.iapi.reference.Property.USER_PROPERTY_PREFIX.concat(userName)]</InnerVar>
                <InnerVar>boolean [passwordsMatch=(definedUserPassword != null) &amp;&amp; definedUserPassword.equals(passedUserPassword)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hashPasswordUsingStoredAlgorithm</MethodName>
            <MethodComment>/** 
 * Hash a password using the same algorithm as we used to generate the stored password token.
 * @param user the user whose password to hash
 * @param password the plaintext password
 * @param storedPassword the password token that's stored in the database
 * @return a digest of the password created the same way as the storedpassword
 * @throws StandardException if the password cannot be hashed with therequested algorithm
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>user</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>password</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>storedPassword</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>