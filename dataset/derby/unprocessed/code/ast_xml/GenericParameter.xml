<Class>
    <Id>579</Id>
    <Package>org.apache.derby.impl.sql</Package>
    <ClassName>GenericParameter</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>GenericParameter  /** 
 * A parameter.  Originally lifted from ParameterValueSet.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>DECIMAL_PARAMETER_DEFAULT_PRECISION</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>DECIMAL_PARAMETER_DEFAULT_SCALE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>pvs</FieldName>
            <FieldType>GenericParameterValueSet</FieldType>
        </Field>
        <Field>
            <FieldName>value</FieldName>
            <FieldType>DataValueDescriptor</FieldType>
        </Field>
        <Field>
            <FieldName>jdbcTypeId</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>declaredClassName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>parameterMode</FieldName>
            <FieldType>short</FieldType>
        </Field>
        <Field>
            <FieldName>isSet</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>isReturnOutputParameter</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>registerOutType</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>registerOutScale</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>registerOutPrecision</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>GenericParameter</MethodName>
            <MethodComment>/** 
 * Constructor for a Parameter
 * @param pvs the parameter set that this is part of
 * @param isReturnOutputParameter true if this is a return output parameter
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pvs</ParamName>
                    <ParamType>GenericParameterValueSet</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isReturnOutputParameter</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getClone</MethodName>
            <MethodComment>/** 
 * Clone myself.  It is a shallow copy for everything but the underlying data wrapper and its value -- e.g. for everything but the underlying SQLInt and its int.
 * @param pvs the parameter value set
 * @return a new generic parameter.
 */
</MethodComment>
            <ReturnType>GenericParameter</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pvs</ParamName>
                    <ParamType>GenericParameterValueSet</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>GenericParameter [gpClone=new GenericParameter(pvs,isReturnOutputParameter)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>gpClone;initialize;[this.getValue().cloneValue(false), jdbcTypeId, declaredClassName]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initialize</MethodName>
            <MethodComment>/** 
 * Set the DataValueDescriptor and type information for this parameter
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>DataValueDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>jdbcTypeId</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>className</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clear</MethodName>
            <MethodComment>/** 
 * Clear the parameter, unless it is a return output parameter
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getValue</MethodName>
            <MethodComment>/** 
 * Get the parameter value.  Doesn't check to see if it has been initialized or not.
 * @return the parameter value, may return null
 */
</MethodComment>
            <ReturnType>DataValueDescriptor</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setOutParameter</MethodName>
            <MethodComment>/** 
 * Mark the parameter as an output parameter.
 * @param sqlType	A type from java.sql.Types
 * @param scale		scale, -1 if no scale arg
 * @exception StandardException on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sqlType</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>scale</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>throwInvalidOutParamMap</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>StandardException</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sqlType</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [jdbcTypesName=org.apache.derby.impl.jdbc.Util.typeName(sqlType)]</InnerVar>
                <InnerVar>TypeId [typeId=TypeId.getBuiltInTypeId(jdbcTypeId)]</InnerVar>
                <InnerVar>String [thisTypeName=typeId == null ? declaredClassName : typeId.getSQLTypeName()]</InnerVar>
                <InnerVar>StandardException [e=StandardException.newException(SQLState.LANG_INVALID_OUT_PARAM_MAP,getJDBCParameterNumberStr(),jdbcTypesName,thisTypeName)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>validate</MethodName>
            <MethodComment>/** 
 * Validate the parameters.  This is done for situations where we cannot validate everything in the setXXX() calls.  In particular, before we do an execute() on a CallableStatement, we need to go through the parameters and make sure that all parameters are set up properly.  The motivator for this is that setXXX() can be called either before or after registerOutputParamter(), we cannot be sure we have the types correct until we get to execute().
 * @exception StandardException if the parameters aren't valid
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getScale</MethodName>
            <MethodComment>/** 
 * Return the scale of the parameter.
 * @return scale
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPrecision</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getJDBCParameterNumberStr</MethodName>
            <MethodComment>/** 
 * get string for param number
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>