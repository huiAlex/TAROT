<Class>
    <Id>2154</Id>
    <Package>org.apache.derby.iapi.sql.dictionary</Package>
    <ClassName>ReferencedKeyConstraintDescriptor</ClassName>
    <SuperClass>KeyConstraintDescriptor</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ReferencedKeyConstraintDescriptor  /** 
 * A ReferencedConstraintDeescriptor is a primary key or a unique key that is referenced by a foreign key.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>constraintType</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>referenceCount</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>fkEnabledConstraintList</FieldName>
            <FieldType>ConstraintDescriptorList</FieldType>
        </Field>
        <Field>
            <FieldName>fkConstraintList</FieldName>
            <FieldType>ConstraintDescriptorList</FieldType>
        </Field>
        <Field>
            <FieldName>checkedSelfReferencing</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>hasSelfReferencing</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ReferencedKeyConstraintDescriptor</MethodName>
            <MethodComment>/** 
 * Constructor for a KeyConstraintDescriptorImpl
 * @param constraintType	The type of the constraint
 * @param dataDictionary		The data dictionary that this descriptor lives in
 * @param table		The descriptor of the table the constraint is on
 * @param constraintName	The name of the constraint.
 * @param deferrable		If the constraint can be deferred.
 * @param initiallyDeferred If the constraint starts life deferred.
 * @param columns			columns involved in the constraint
 * @param constraintId		UUID of constraint
 * @param indexId			The UUID for the backing index
 * @param schemaDesc		The SchemaDescriptor for the constraint
 * @param enforced          is the constraint enforced?
 * @param referenceCount    number of FKs (enforced only)
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>constraintType</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dataDictionary</ParamName>
                    <ParamType>DataDictionary</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>table</ParamName>
                    <ParamType>TableDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>constraintName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>deferrable</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>initiallyDeferred</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columns</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>constraintId</ParamName>
                    <ParamType>UUID</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indexId</ParamName>
                    <ParamType>UUID</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>schemaDesc</ParamName>
                    <ParamType>SchemaDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>enforced</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>referenceCount</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getConstraintType</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasSelfReferencingFK</MethodName>
            <MethodComment>/** 
 * Am I referenced by a FK on the same table?
 * @param cdl	ConstraintDescriptorList for the table
 * @param type ConstraintDescriptor.(ENABLED|DISABLED|ALL)
 * @return	true/false
 * @exception StandardException on error
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cdl</ParamName>
                    <ParamType>ConstraintDescriptorList</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ForeignKeyConstraintDescriptor [fkcd]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNonSelfReferencingFK</MethodName>
            <MethodComment>/** 
 * Am I referenced by a FK on another table? Return the list of those foreign constraints.
 * @param type ConstraintDescriptor.(ENABLED|DISABLED|ALL)
 * @return  list of constraints
 * @exception StandardException on error
 */
</MethodComment>
            <ReturnType>ConstraintDescriptorList</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ConstraintDescriptorList [result=new ConstraintDescriptorList()]</InnerVar>
                <InnerVar>ForeignKeyConstraintDescriptor [fkcd]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getForeignKeyConstraints</MethodName>
            <MethodComment>/** 
 * Get the referencing foreign key constraints
 * @param type ConstraintDescriptor.(ENABLED|DISABLED|ALL)
 * @return	the list of constraints (ConstraintDescriptorListImpl)
 * @exception StandardException on error
 */
</MethodComment>
            <ReturnType>ConstraintDescriptorList</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isReferenced</MethodName>
            <MethodComment>/** 
 * Is this constraint referenced? Returns true if there are enforced fks that reference this constraint.
 * @return false
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getReferenceCount</MethodName>
            <MethodComment>/** 
 * Get the number of enforced fks that reference this key.
 * @return the number of fks
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>incrementReferenceCount</MethodName>
            <MethodComment>/** 
 * Bump the reference count by one.
 * @return the number of fks
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>decrementReferenceCount</MethodName>
            <MethodComment>/** 
 * Decrement the reference count by one.
 * @return the number of fks
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>needsToFire</MethodName>
            <MethodComment>/** 
 * Does this constraint need to fire on this type of DML?  For referenced keys, fire if referenced by a fk, and stmt is delete or bulk insert replace,  or stmt is update and columns intersect.
 * @param stmtType	the type of DML (StatementType.INSERT|StatementType.UPDATE|StatementType.DELETE)
 * @param modifiedCols	the columns modified, or null for all
 * @return true/false
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>stmtType</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>modifiedCols</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkType</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>