<Class>
    <Id>1177</Id>
    <Package>org.apache.derby.impl.store.access.conglomerate</Package>
    <ClassName>GenericConglomerate</ClassName>
    <SuperClass>DataType</SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Conglomerate</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>GenericConglomerate  /** 
 * A class that implements the methods shared across all implementations of the Conglomerate interface.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getLength</MethodName>
            <MethodComment>/** 
 * Gets the length of the data value.  The meaning of this is implementation-dependent.  For string types, it is the number of characters in the string.  For numeric types, it is the number of bytes used to store the number.  This is the actual length of this value, not the length of the type it was defined as. For example, a VARCHAR value may be shorter than the declared VARCHAR (maximum) length.
 * @return	The length of the data value
 * @exception StandardException   On error
 * @see org.apache.derby.iapi.types.DataValueDescriptor#getLength
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getString</MethodName>
            <MethodComment>/** 
 * Gets the value in the data value descriptor as a String. Throws an exception if the data value is not a string.
 * @return	The data value as a String.
 * @exception StandardException   Thrown on error
 * @see org.apache.derby.iapi.types.DataValueDescriptor#getString
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getObject</MethodName>
            <MethodComment>/** 
 * Gets the value in the data value descriptor as a Java Object. The type of the Object will be the Java object type corresponding to the data value's SQL type. JDBC defines a mapping between Java object types and SQL types - we will allow that to be extended through user type definitions. Throws an exception if the data value is not an object (yeah, right).
 * @return	The data value as an Object.
 * @exception StandardException   Thrown on error
 * @see org.apache.derby.iapi.types.DataValueDescriptor#getObject
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cloneValue</MethodName>
            <MethodComment>/** 
 * @see org.apache.derby.iapi.types.DataValueDescriptor#cloneValue
 */
</MethodComment>
            <ReturnType>DataValueDescriptor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>forceMaterialization</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNewNull</MethodName>
            <MethodComment>/** 
 * Get a new null value of the same type as this data value.
 * @see org.apache.derby.iapi.types.DataValueDescriptor#getNewNull
 */
</MethodComment>
            <ReturnType>DataValueDescriptor</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setValueFromResultSet</MethodName>
            <MethodComment>/** 
 * Set the value based on the value for the specified DataValueDescriptor from the specified ResultSet.
 * @param resultSet		The specified ResultSet.
 * @param colNumber		The 1-based column # into the resultSet.
 * @param isNullable	Whether or not the column is nullable(No need to call wasNull() if not)
 * @exception StandardException		Thrown on error
 * @exception SQLException		Error accessing the result set
 * @see org.apache.derby.iapi.types.DataValueDescriptor#setValueFromResultSet
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>resultSet</ParamName>
                    <ParamType>ResultSet</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>colNumber</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isNullable</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setFrom</MethodName>
            <MethodComment>/** 
 * Set the value of this DataValueDescriptor from another.
 * @param theValue	The Date value to set this DataValueDescriptor to
 * @see org.apache.derby.iapi.types.DataValueDescriptor#setValue
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>theValue</ParamName>
                    <ParamType>DataValueDescriptor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTypeName</MethodName>
            <MethodComment>/** 
 * Get the SQL name of the datatype
 * @return	The SQL name of the datatype
 * @see org.apache.derby.iapi.types.DataValueDescriptor#getTypeName
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compare</MethodName>
            <MethodComment>/** 
 * Compare this Orderable with a given Orderable for the purpose of index positioning.  This method treats nulls as ordered values - that is, it treats SQL null as equal to null and less than all other values.
 * @param other		The Orderable to compare this one to.
 * @return  &amp;lt;0 - this Orderable is less than other.0 - this Orderable equals other. &amp;gt;0 - this Orderable is greater than other. The code should not explicitly look for -1, or 1.
 * @exception StandardException		Thrown on error
 * @see DataValueDescriptor#compare
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>other</ParamName>
                    <ParamType>DataValueDescriptor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasCollatedColumns</MethodName>
            <MethodComment>/** 
 * Tells if there are columns with collations (other than UCS BASIC) in the given list of collation ids.
 * @param collationIds collation ids for the conglomerate columns
 * @return {@code true} if a collation other than UCS BASIC was found.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>collationIds</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>