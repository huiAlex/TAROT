<Class>
    <Id>1995</Id>
    <Package>org.apache.derby.mbeans</Package>
    <ClassName>CacheManagerMBean</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>CacheManagerMBean  /** 
 * This is an MBean that provides information about one of Derby's cache managers.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>setCollectAccessCounts</MethodName>
            <MethodComment>/** 
 * Enable or disable collection of cache access counts. That is, whether or not each hit, miss and eviction should be counted. Enabling it might impose a small overhead on cache accesses, and might reduce the system performance. Access counts are disabled by default.
 * @param collect {@code true} if access counts should be collected, or{@code false} otherwise
 * @see #getCollectAccessCounts()
 * @see #getHitCount()
 * @see #getMissCount()
 * @see #getEvictionCount()
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>collect</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCollectAccessCounts</MethodName>
            <MethodComment>/** 
 * Check if collection of cache access counts is enabled.
 * @return {@code true} if access counts are enabled,{@code false} otherwise
 * @see #setCollectAccessCounts(boolean)
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getHitCount</MethodName>
            <MethodComment>/** 
 * Get the number of cache accesses where the requested object was already in the cache.
 * @return the number of cache hits
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMissCount</MethodName>
            <MethodComment>/** 
 * Get the number of cache accesses where the requested object was not already in the cache.
 * @return the number of cache misses
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEvictionCount</MethodName>
            <MethodComment>/** 
 * Get the number of cached objects that have been evicted from the cache in order to make room for other objects.
 * @return the number of evicted objects
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMaxEntries</MethodName>
            <MethodComment>/** 
 * Get the maximum number of entries that could be held by this cache.
 * @return the maximum number of entries in the cache
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAllocatedEntries</MethodName>
            <MethodComment>/** 
 * Get the number of entries currently allocated in the cache. This number includes entries for objects that have been removed from the cache, whose entries have not yet been reused for other objects.
 * @return the number of entries in the cache
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getUsedEntries</MethodName>
            <MethodComment>/** 
 * Get the number of objects that are currently in the cache.
 * @return the number of objects in the cache
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>