<Class>
    <Id>9</Id>
    <Package>org.apache.derby.iapi.store.access.conglomerate</Package>
    <ClassName>TransactionManager</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>TransactionController</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>TransactionManager  /** 
 * The TransactionManager interface provides methods on the transaction needed by an access method implementer, but should not be visible to clients of a TransactionController. &lt;p&gt;
 * @see TransactionController
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>MODE_NONE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>LOCK_INSTANT_DURATION</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>LOCK_COMMIT_DURATION</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>LOCK_MANUAL_DURATION</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>addPostCommitWork</MethodName>
            <MethodComment>/** 
 * Add to the list of post commit work. &lt;p&gt; Add to the list of post commit work that may be processed after this transaction commits.  If this transaction aborts, then the post commit work list will be thrown away.  No post commit work will be taken out on a rollback to save point. &lt;p&gt; This routine simply delegates the work to the Rawstore transaction.
 * @param work  The post commit work to do.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>work</ParamName>
                    <ParamType>Serviceable</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkVersion</MethodName>
            <MethodComment>/** 
 * Check to see if a database has been upgraded to the required level in order to use a store feature.
 * @param requiredMajorVersion  required database Engine major version
 * @param requiredMinorVersion  required database Engine minor version
 * @param feature               Non-null to throw an exception, null to return the state of the version match.
 * @return &lt;code&gt; true &lt;/code&gt; if the database has been upgraded to the required level, &lt;code&gt; false &lt;/code&gt; otherwise.
 * @exception StandardException if the database is not at the require version  when &lt;code&gt;feature&lt;/code&gt; feature is  not &lt;code&gt; null &lt;/code&gt;. 
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>requiredMajorVersion</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>requiredMinorVersion</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>feature</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>closeMe</MethodName>
            <MethodComment>/** 
 * The ScanManager.close() method has been called on "scan". &lt;p&gt; Take whatever cleanup action is appropriate to a closed scan.  It is likely this routine will remove references to the scan object that it was maintaining for cleanup purposes.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>scan</ParamName>
                    <ParamType>ScanManager</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>closeMe</MethodName>
            <MethodComment>/** 
 * The ConglomerateController.close() method has been called on  "conglom_control". &lt;p&gt; Take whatever cleanup action is appropriate to a closed  conglomerateController.  It is likely this routine will remove references to the ConglomerateController object that it was maintaining for cleanup purposes.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conglom_control</ParamName>
                    <ParamType>ConglomerateController</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>closeMe</MethodName>
            <MethodComment>/** 
 * The SortController.close() method has been called on "sort_control". &lt;p&gt; Take whatever cleanup action is appropriate to a closed  sortController.  It is likely this routine will remove references to the SortController object that it was maintaining for cleanup purposes.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sort_control</ParamName>
                    <ParamType>SortController</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getInternalTransaction</MethodName>
            <MethodComment>/** 
 * Get an Internal transaction. &lt;p&gt; Start an internal transaction.  An internal transaction is a completely separate transaction from the current user transaction.  All work done in the internal transaction must be physical (ie. it can be undone  physically by the rawstore at the page level, rather than logically  undone like btree insert/delete operations).  The rawstore guarantee's that in the case of a system failure all open Internal transactions are first undone in reverse order, and then other transactions are undone in reverse order. &lt;p&gt; Internal transactions are meant to implement operations which, if  interupted before completion will cause logical operations like tree searches to fail.  This special undo order insures that the state of the tree is restored to a consistent state before any logical undo  operation which may need to search the tree is performed. &lt;p&gt;
 * @return The new internal transaction.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>TransactionManager</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRawStoreXact</MethodName>
            <MethodComment>/** 
 * Get the Transaction from the Transaction manager. &lt;p&gt; Access methods often need direct access to the "Transaction" - ie. the raw store transaction, so give access to it.
 * @return The raw store transaction.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>Transaction</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findExistingConglomerateFromKey</MethodName>
            <MethodComment>/** 
 * Return existing Conglomerate after doing lookup by ContainerKey &lt;p&gt; Throws exception if it can't find a matching conglomerate for the  ContainerKey.
 * @return If successful returns 
 * @param container_key  container key of target conglomerate.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>Conglomerate</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>container_key</ParamName>
                    <ParamType>ContainerKey</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>