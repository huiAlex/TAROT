<Class>
    <Id>1573</Id>
    <Package>org.apache.derby.iapi.types</Package>
    <ClassName>WorkHorseForCollatorDatatypes</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>WorkHorseForCollatorDatatypes  /** 
 * WorkHorseForCollatorDatatypes class holds on to RuleBasedCollator, and the base SQLChar object for the collation sensitive SQLChar, SQLVarchar, SQLLongvarchar and SQLClob. This class uses RuleBasedCollator and SQLChar object in the collation sensitive methods to do the comparison.  The reason for encapsulating this here is that the collation version of  SQLChar, SQLVarchar, SQLLongvarchar and SQLClob do not all have to duplicate   the code for collation sensitive methods. Instead, they can simply delegate the work to methods defined in this class. 
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>collatorForCharacterDatatypes</FieldName>
            <FieldType>RuleBasedCollator</FieldType>
        </Field>
        <Field>
            <FieldName>stringData</FieldName>
            <FieldType>SQLChar</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>WorkHorseForCollatorDatatypes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>collatorForCharacterDatatypes</ParamName>
                    <ParamType>RuleBasedCollator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stringData</ParamName>
                    <ParamType>SQLChar</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>stringCompare</MethodName>
            <MethodComment>/** 
 * @see SQLChar#stringCompare(SQLChar,SQLChar) 
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>str1</ParamName>
                    <ParamType>SQLChar</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>str2</ParamName>
                    <ParamType>SQLChar</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CollationKey [ckey1=str1.getCollationKey()]</InnerVar>
                <InnerVar>CollationKey [ckey2=str2.getCollationKey()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>like</MethodName>
            <MethodComment>/** 
 * This method implements the like function for char (with no escape value). The difference in this method and the same method in SQLChar is that  here we use special Collator object to do the comparison rather than using the Collator object associated with the default jvm locale.
 * @param pattern		The pattern to use
 * @return	A SQL boolean value telling whether the first operand islike the second operand
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>BooleanDataValue</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pattern</ParamName>
                    <ParamType>DataValueDescriptor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Boolean [likeResult]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>like</MethodName>
            <MethodComment>/** 
 * This method implements the like function for char with an escape value.
 * @param pattern		The pattern to use
 * @return	A SQL boolean value telling whether the first operand islike the second operand
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>BooleanDataValue</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pattern</ParamName>
                    <ParamType>DataValueDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>escape</ParamName>
                    <ParamType>DataValueDescriptor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Boolean [likeResult]</InnerVar>
                <InnerVar>CollationElementsInterface [escapeCharacter=(CollationElementsInterface)escape]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCollatorForCollation</MethodName>
            <MethodComment>/** 
 * Get the RuleBasedCollator which is getting used for collation sensitive methods. 
 */
</MethodComment>
            <ReturnType>RuleBasedCollator</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasSingleCollationElement</MethodName>
            <MethodComment>/** 
 * Check if the string consists of a single collation element.
 * @return {@code true} iff it's a single collation element
 * @see CollationElementsInterface#hasSingleCollationElement()
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>CollationElementIterator [cei=collatorForCharacterDatatypes.getCollationElementIterator(stringData.getString())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>