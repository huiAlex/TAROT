<Class>
    <Id>302</Id>
    <Package>org.apache.derbyTesting.functionTests.tests.upgradeTests</Package>
    <ClassName>Changes10_10</ClassName>
    <SuperClass>UpgradeChange</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Changes10_10  /** 
 * Upgrade test cases for 10.10.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>SYNTAX_ERROR</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>HARD_UPGRADE_REQUIRED</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>NEEDS_JAVA_STYLE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>DB_README_FILE_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>beyondDB2Real</FieldName>
            <FieldType>float[]</FieldType>
        </Field>
        <Field>
            <FieldName>beyondDB2Double</FieldName>
            <FieldType>double[]</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>Changes10_10</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>suite</MethodName>
            <MethodComment>/** 
 * Return the suite of tests to test the changes made in 10.10.
 * @param phase an integer that indicates the current phase inthe upgrade test.
 * @return the test suite created.
 */
</MethodComment>
            <ReturnType>Test</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>phase</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BaseTestSuite [suite=new BaseTestSuite("Upgrade test for 10.9")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>suite;addTestSuite;[Changes10_10.class]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testProcsNewTo10_10</MethodName>
            <MethodComment>/** 
 * Make sure that the following procedure(s) which are new to 10.10 are  only available after hard-upgrade 1)invalidate stored statements  SYCS_UTIL.SYSCS_INVALIDATE_STORED_STATEMENTS
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Statement [s=createStatement()]</InnerVar>
                <InnerVar>String [iss="call syscs_util.SYSCS_INVALIDATE_STORED_STATEMENTS()"]</InnerVar>
                <InnerVar>String [rt="call syscs_util.syscs_register_tool( 'foo', true )"]</InnerVar>
                <InnerVar>String [rtGoodSQLState="X0Y88"]</InnerVar>
                <InnerVar>String [syntaxError="42X01"]</InnerVar>
                <InnerVar>boolean [atLeastJava5=JDBC.vmSupportsJDBC3()]</InnerVar>
                <InnerVar>boolean [oldSupportsBoolean=oldAtLeast(10,7)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>s;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>vetProcs</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>Statement</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>procCall</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>shouldExist</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sqlState</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testUDAs</MethodName>
            <MethodComment>/** 
 * Verify upgrade behavior for user-defined aggregates.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Statement [st=createStatement()]</InnerVar>
                <InnerVar>String [createUDA="create derby aggregate mode for int external name 'foo.bar.Wibble'"]</InnerVar>
                <InnerVar>String [dropUDA="drop derby aggregate mode restrict"]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>st;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testVarargss</MethodName>
            <MethodComment>/** 
 * Verify upgrade behavior for vararg routines.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Statement [st=createStatement()]</InnerVar>
                <InnerVar>String [createVarargsProc="create procedure vds ( a int ... ) language java parameter style derby no sql external name 'Foo.foo'"]</InnerVar>
                <InnerVar>String [createVarargsFunc="create function vds ( a int ... ) returns integer language java parameter style derby no sql external name 'Foo.foo'"]</InnerVar>
                <InnerVar>String [createVarargsTableFunc="create function vtf ( a int ... ) returns table ( b int ) language java parameter style derby_jdbc_result_set no sql external name 'Foo.foo'"]</InnerVar>
                <InnerVar>String [createNonVarargsProcDerbyStyle="create procedure nvds ( a int ) language java parameter style derby no sql external name 'Foo.foo'"]</InnerVar>
                <InnerVar>String [createNonVarargsFuncDerbyStyle="create function nvds ( a int ) returns integer language java parameter style derby no sql external name 'Foo.foo'"]</InnerVar>
                <InnerVar>boolean [tableFunctionsOK=oldAtLeast(10,4)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>st;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testReadMeFiles</MethodName>
            <MethodComment>/** 
 * DERBY-5996(Create readme files (cautioning users against modifying  database files) at database hard upgrade time) Simple test to make sure readme files are getting created
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Statement [s=createStatement()]</InnerVar>
                <InnerVar>TestConfiguration [currentConfig=TestConfiguration.getCurrent()]</InnerVar>
                <InnerVar>String [dbPath=currentConfig.getDatabasePath(currentConfig.getDefaultDatabaseName())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>s;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>lookForReadmeFile</MethodName>
            <MethodComment>/** 
 * For pre-10.10 database, fileShouldExist will be false. For hard upgraded databases to 10.10, fileShouldExist will be true
 * @param path - this can be root database directory, log or seg0 directory
 * @param fileShouldExist
 * @throws IOException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>path</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fileShouldExist</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>File [readmeFile=new File(path,DB_README_FILE_NAME)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testFloatLimits</MethodName>
            <MethodComment>/** 
 * Verify upgrade behavior DERBY-3398: removing DB2 float limits
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Statement [st=createStatement()]</InnerVar>
                <InnerVar>PreparedStatement [psInsertReal=prepareStatement("insert into d3398(r) values (?)")]</InnerVar>
                <InnerVar>PreparedStatement [psInsertDouble=prepareStatement("insert into d3398(d) values (?)")]</InnerVar>
                <InnerVar>PreparedStatement [psSelect=prepareStatement("select * from d3398",ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_UPDATABLE)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>st;execute;["create table d3398(r real, d double)"]</InnerMethodInvoke>
                <InnerMethodInvoke>st;execute;["insert into d3398 values (0.0, 0.0)"]</InnerMethodInvoke>
                <InnerMethodInvoke>st;executeUpdate;["drop table d3398"]</InnerMethodInvoke>
                <InnerMethodInvoke>st;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>assertSetError</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ps</ParamName>
                    <ParamType>PreparedStatement</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fv</ParamName>
                    <ParamType>float</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>defer</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>assertSetError</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ps</ParamName>
                    <ParamType>PreparedStatement</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dv</ParamName>
                    <ParamType>double</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>defer</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>assertUpdateError</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ps</ParamName>
                    <ParamType>PreparedStatement</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fv</ParamName>
                    <ParamType>float</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>defer</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [supportsForwardUpdatableResultSet=oldAtLeast(10,2)]</InnerVar>
                <InnerVar>ResultSet [rs=ps.executeQuery()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rs;next;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>assertUpdateError</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ps</ParamName>
                    <ParamType>PreparedStatement</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fv</ParamName>
                    <ParamType>double</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>defer</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [supportsForwardUpdatableResultSet=oldAtLeast(10,2)]</InnerVar>
                <InnerVar>ResultSet [rs=ps.executeQuery()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rs;next;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>verifyDB2Behavior</MethodName>
            <MethodComment>/** 
 * Check that the old DB2 limits are (still) enforced.
 * @param defer In soft upgrade mode, the checking if deferred afterDERBY-3398, i.e. instead of throwing on the DB2 limits when calling {@code ResultSet#updateXXX} or {@code PreparedStatement#setXXX}, the check throws on  {@code ResultSet#updateRow}, or {#insertRow}, and similarly on  {@code PreparedStatement#execute} or {@code #executeUpdate}.
 * @throws SQLException if we see some expected error.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>psSelect</ParamName>
                    <ParamType>PreparedStatement</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>psInsertReal</ParamName>
                    <ParamType>PreparedStatement</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>psInsertDouble</ParamName>
                    <ParamType>PreparedStatement</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>defer</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>