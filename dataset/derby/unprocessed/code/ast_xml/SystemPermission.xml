<Class>
    <Id>1613</Id>
    <Package>org.apache.derby.security</Package>
    <ClassName>SystemPermission</ClassName>
    <SuperClass>BasicPermission</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>SystemPermission  /** 
 * This class represents access to system-wide Derby privileges. &lt;P&gt; &lt;table border = "1"&gt; &lt;tr&gt; &lt;th&gt;Permission &lt;th&gt;Description &lt;th&gt;Risk &lt;/tr&gt; &lt;tr&gt; &lt;th&gt; "jmx" "control" &lt;td&gt; Controls the ability of JMX clients to control Derby and view security sensitive attributes through Derby's MBeans. &lt;td&gt; JMX clients may be able to change the state of the running system &lt;/tr&gt; &lt;tr&gt; &lt;th&gt; "jmx" "monitor" &lt;td&gt; Controls the ability of JMX clients to monitor Derby through Derby's MBeans, such as viewing number of current connections and configuration settings. &lt;em&gt; Note: security related settings require&lt;/em&gt; &lt;code&gt;control&lt;/code&gt; &lt;em&gt;action on&lt;/em&gt; &lt;code&gt;jmx&lt;/code&gt; &lt;td&gt; JMX clients can see information about a runing system including software versions. &lt;/tr&gt; &lt;/table&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>serialVersionUID</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>SERVER</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>ENGINE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>JMX</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>SHUTDOWN</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>CONTROL</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>MONITOR</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>USE_DERBY_INTERNALS</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>LEGAL_NAMES</FieldName>
            <FieldType>Set</FieldType>
        </Field>
        <Field>
            <FieldName>LEGAL_NAMES</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>LEGAL_ACTIONS</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>LEGAL_ACTIONS</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>ENGINE_MONITOR</FieldName>
            <FieldType>SystemPermission</FieldType>
        </Field>
        <Field>
            <FieldName>actions</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>actionMask</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>serialVersionUID</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>permissions</FieldName>
            <FieldType>HashMap</FieldType>
        </Field>
        <Field>
            <FieldName>permissions</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>SystemPermission</MethodName>
            <MethodComment>/** 
 * Creates a new SystemPermission with the specified name.
 * @param name the name of the SystemPermission
 * @throws NullPointerException if name or actions is null
 * @throws IllegalArgumentException if name is empty or not a legal SystemPermission
 * @see BasicPermission#BasicPermission(String)
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>actions</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;validateNameAndActions;[name, actions]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>validateNameAndActions</MethodName>
            <MethodComment>/** 
 * Check if name and actions are valid, normalize the actions string, and calculate the actions mask.
 * @param name the name of the permission
 * @param actions the actions of the permission
 * @throws NullPointerException if actions is null
 * @throws IllegalArgumentException if name is not a legal SystemPermission
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>actions</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getActions</MethodName>
            <MethodComment>/** 
 * Return the permission's actions in a canonical form.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newPermissionCollection</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PermissionCollection</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCanonicalForm</MethodName>
            <MethodComment>/** 
 * Return a canonical form of the passed in actions. Actions are lower-cased, in the order of LEGAL_ACTIONS and only appear once.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>actions</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Set&lt;String&gt; [actionSet=parseActions(actions)]</InnerVar>
                <InnerVar>List&lt;String&gt; [legalActions=new ArrayList&lt;String&gt;(LEGAL_ACTIONS)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>legalActions;retainAll;[actionSet]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseActions</MethodName>
            <MethodComment>/** 
 * Get a set of all actions specified in a string. Actions are transformed to lower-case, and leading and trailing blanks are stripped off.
 * @param actions the specified actions string
 * @return a set of all the specified actions
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>actions</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>HashSet&lt;String&gt; [actionSet=new HashSet&lt;String&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildActionsString</MethodName>
            <MethodComment>/** 
 * Build a comma-separated actions string suitable for returning from {@code getActions()}.
 * @param actions the list of actions
 * @return comma-separated string with the actions
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>actions</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuilder [sb=new StringBuilder()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>equals</MethodName>
            <MethodComment>/** 
 * Does this permission equal another object. True if its and identical class with same name and (canonical) actions.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>other</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>SystemPermission [osp=(SystemPermission)other]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>implies</MethodName>
            <MethodComment>/** 
 * Does this permission imply another. Only true if the other permission is a SystemPermission with the same name and all the actions of the permission are present in this. Note that none of the actions imply any other with this SystemPermission.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>permission</ParamName>
                    <ParamType>Permission</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [myActionMask=actionMask]</InnerVar>
                <InnerVar>int [permissionMask=((SystemPermission)permission).actionMask]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getActionMask</MethodName>
            <MethodComment>/** 
 * Get a mask of bits that represents the actions and can be used for the implies method.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>actions</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [mask=0]</InnerVar>
                <InnerVar>StringTokenizer [st=new StringTokenizer(actions,",")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readObject</MethodName>
            <MethodComment>/** 
 * Called upon deserialization for restoring the state of this SystemPermission from a stream.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>ObjectInputStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>s;defaultReadObject;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;validateNameAndActions;[getName(), getActions()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>ClassNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>add</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>permission</ParamName>
                    <ParamType>Permission</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [name=permission.getName()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>implies</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>permission</ParamName>
                    <ParamType>Permission</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [name=permission.getName()]</InnerVar>
                <InnerVar>Permission [perm]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>elements</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Permission</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeObject</MethodName>
            <MethodComment>/** 
 * Called upon Serialization for saving the state of this SystemPermissionCollection to a stream.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>ObjectOutputStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ArrayList&lt;Permission&gt; [perms]</InnerVar>
                <InnerVar>ObjectOutputStream.PutField [fields=s.putFields()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>fields;put;["permissions", perms]</InnerMethodInvoke>
                <InnerMethodInvoke>s;writeFields;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readObject</MethodName>
            <MethodComment>/** 
 * Called upon deserialization for restoring the state of this SystemPermissionCollection from a stream.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>ObjectInputStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ObjectInputStream.GetField [fields=s.readFields()]</InnerVar>
                <InnerVar>List [perms=(List)fields.get("permissions",null)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>ClassNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>doubleQuote</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>raw</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>