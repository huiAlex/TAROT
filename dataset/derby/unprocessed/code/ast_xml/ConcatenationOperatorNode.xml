<Class>
    <Id>775</Id>
    <Package>org.apache.derby.impl.sql.compile</Package>
    <ClassName>ConcatenationOperatorNode</ClassName>
    <SuperClass>BinaryOperatorNode</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ConcatenationOperatorNode  /** 
 * This node represents a concatenation comparison operator varying.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>ConcatenationOperatorNode</MethodName>
            <MethodComment>/** 
 * Constructor for a ConcatenationOperatorNode
 * @param leftOperand The left operand of the concatenation
 * @param rightOperand The right operand of the concatenation
 * @param cm  The context manager
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>leftOperand</ParamName>
                    <ParamType>ValueNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rightOperand</ParamName>
                    <ParamType>ValueNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cm</ParamName>
                    <ParamType>ContextManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>evaluateConstantExpressions</MethodName>
            <MethodComment>/** 
 * Check if this node always evaluates to the same value. If so, return a constant node representing the known result.
 * @return a constant node representing the result of this concatenationoperation, or  {@code this} if the result is not known up front
 */
</MethodComment>
            <ReturnType>ValueNode</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>bindExpression</MethodName>
            <MethodComment>/** 
 * overrides BindOperatorNode.bindExpression because concatenation has special requirements for parameter binding.
 * @exception StandardException thrown on failure
 */
</MethodComment>
            <ReturnType>ValueNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fromList</ParamName>
                    <ParamType>FromList</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>subqueryList</ParamName>
                    <ParamType>SubqueryList</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>aggregates</ParamName>
                    <ParamType>AggregateNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>TypeCompiler [tc=leftOperand.getTypeCompiler()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setType;[resolveConcatOperation(leftOperand.getTypeServices(),rightOperand.getTypeServices())]</InnerMethodInvoke>
                <InnerMethodInvoke>this;setLeftRightInterfaceType;[tc.interfaceName()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>resolveConcatOperation</MethodName>
            <MethodComment>/** 
 * Resolve a concatenation operator
 * @param leftType The DataTypeDescriptor of the left operand
 * @param rightType The DataTypeDescriptor of the right operand
 * @return A DataTypeDescriptor telling the result type of the concatenateoperation
 * @exception StandardException BinaryOperatorNotSupported Thrown when a BinaryOperator is not supported on the operand types.
 */
</MethodComment>
            <ReturnType>DataTypeDescriptor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>leftType</ParamName>
                    <ParamType>DataTypeDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rightType</ParamName>
                    <ParamType>DataTypeDescriptor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>TypeId [leftTypeId]</InnerVar>
                <InnerVar>TypeId [rightTypeId]</InnerVar>
                <InnerVar>String [higherType]</InnerVar>
                <InnerVar>int [resultLength]</InnerVar>
                <InnerVar>boolean [nullable]</InnerVar>
                <InnerVar>DataTypeDescriptor [returnDTD=new DataTypeDescriptor(TypeId.getBuiltInTypeId(higherType),nullable,resultLength)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clobBlobHandling</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clobBlobType</ParamName>
                    <ParamType>DataTypeDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>otherType</ParamName>
                    <ParamType>DataTypeDescriptor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [resultLength]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>