<Class>
    <Id>884</Id>
    <Package>org.apache.derby.impl.store.access.btree</Package>
    <ClassName>BranchControlRow</ClassName>
    <SuperClass>ControlRow</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>BranchControlRow  /** 
 * A branch row contains key fields and the pointer to the child page.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>left_child_page</FieldName>
            <FieldType>SQLLongint</FieldType>
        </Field>
        <Field>
            <FieldName>child_pageno_buf</FieldName>
            <FieldType>SQLLongint</FieldType>
        </Field>
        <Field>
            <FieldName>CR_LEFTCHILD</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>CR_COLID_LAST</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>CR_NCOLUMNS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>CR_LEFTCHILD_BITMAP</FieldName>
            <FieldType>FormatableBitSet</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>BranchControlRow</MethodName>
            <MethodComment>/** 
 * No arg constructor. &lt;p&gt; Public no arg constructor is for the monitor to call for format id implementation, it should not be called for any other reason.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>BranchControlRow</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>open_btree</ParamName>
                    <ParamType>OpenBTree</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>page</ParamName>
                    <ParamType>Page</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>level</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parent</ParamName>
                    <ParamType>ControlRow</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isRoot</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>left_child</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>controlRowInit</MethodName>
            <MethodComment>/** 
 * Perform page specific initialization. &lt;p&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isLeftmostLeaf</MethodName>
            <MethodComment>/** 
 * Is the current page the leftmost leaf of tree? &lt;p&gt;
 * @return true if the current page is the leftmost leaf of the tree,else return false.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isRightmostLeaf</MethodName>
            <MethodComment>/** 
 * Is the current page the rightmost leaf of tree? &lt;p&gt;
 * @return true if the current page is the rightmost leaf of the tree,else return false.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNumberOfControlRowColumns</MethodName>
            <MethodComment>/** 
 * Get the number of columns in the control row.   &lt;p&gt; Control rows all share the first columns as defined by this class and then add columns to the end of the control row.  For instance a branch control row add a child page pointer field. &lt;p&gt;
 * @return The total number of columns in the control row.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>restartSplitFor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>open_btree</ParamName>
                    <ParamType>OpenBTree</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>template</ParamName>
                    <ParamType>DataValueDescriptor[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parent</ParamName>
                    <ParamType>BranchControlRow</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>child</ParamName>
                    <ParamType>ControlRow</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>newbranchrow</ParamName>
                    <ParamType>DataValueDescriptor[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>splitrow</ParamName>
                    <ParamType>DataValueDescriptor[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>flag</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ControlRow [root=ControlRow.get(open_btree,BTree.ROOTPAGEID)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>parent;release;[]</InnerMethodInvoke>
                <InnerMethodInvoke>child;release;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>search</MethodName>
            <MethodComment>/** 
 * Perform a recursive search, ultimately returning the latched leaf page and row slot after which the given key belongs. The slot is returned in the result structure.  If the key exists on the page, the result.exact will be true.  Otherwise, result.exact will be false, and the row slot returned will be the one immediately preceding the position at which the key belongs.
 * @exception StandardException Standard exception policy.
 */
</MethodComment>
            <ReturnType>ControlRow</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sp</ParamName>
                    <ParamType>SearchParameters</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ControlRow [childpage=null]</InnerVar>
                <InnerVar>long [childpageid]</InnerVar>
                <InnerVar>boolean [got_error=true]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>searchLeft</MethodName>
            <MethodComment>/** 
 * Search and return the left most leaf page. &lt;p&gt; Perform a recursive search, ultimately returning the leftmost leaf page which is the first leaf page in the leaf sibling chain.  (This method might better be called getFirstLeafPage()).
 * @return The leftmost leaf page.
 * @param btree  The open btree to associate latches/locks with.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>ControlRow</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>btree</ParamName>
                    <ParamType>OpenBTree</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ControlRow [childpage=null]</InnerVar>
                <InnerVar>boolean [got_error=true]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>searchRight</MethodName>
            <MethodComment>/** 
 * Search and return the right most leaf page. &lt;p&gt; Perform a recursive search, ultimately returning the rightmost leaf page which is the last leaf page in the leaf sibling chain.  (This method might better be called getLastLeafPage()).
 * @return The rightmost leaf page.
 * @param btree  The open btree to associate latches/locks with.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>ControlRow</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>btree</ParamName>
                    <ParamType>OpenBTree</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ControlRow [childpage=null]</InnerVar>
                <InnerVar>boolean [got_error=true]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>shrinkFor</MethodName>
            <MethodComment>/** 
 * Perform a recursive shrink operation for the key. If this method returns true, the caller should remove the corresponding entry for the page. This routine is not guaranteed to successfully shrink anything.  The page lead to by the key might turn out not to be empty by the time shrink gets there, and shrinks will give up if there is a deadlock. &lt;P&gt; The receiver page must be latched on entry and is returned latched.
 * @exception StandardException Standard exception policy.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>open_btree</ParamName>
                    <ParamType>OpenBTree</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>shrink_key</ParamName>
                    <ParamType>DataValueDescriptor[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ControlRow [childpage=null]</InnerVar>
                <InnerVar>boolean [shrinkme=false]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>splitFor</MethodName>
            <MethodComment>/** 
 * Perform a top down split pass making room for the the key in "row". &lt;p&gt; Perform a split such that a subsequent call to insert given the argument index row will likely find room for it.  Since  latches are released the client must code for the case where another user has grabbed the space made available by the split pass and be ready to do another split. &lt;p&gt; Latches: o PARENT    : is latched on entry (unless the split is the root then there is no parent. o THISBRANCH: the current page is latched on entry. o CHILD     : latch the child page which will be pointed at by the left child pointer of the new page. RESOLVE (mikem) -see comments below o NEWPAGE   : Allocate and latch new page. o CHILD     : release. (RESOLVE) o fixparents: latch pages and reset their parent pointers. Conditionally fix up the parent links on the pages pointed at by the newly allocated page.  First get latch and release on the left child page and then loop through slots on NEWPAGE, from left to right getting and releasing latches.
 * @return page number of the newly allocated leaf page created by split.
 * @param open_btree The open btree to associate latches with.
 * @param template   A scratch area to use while searching for split pass.
 * @param parent     The parent page of the current page in the split pass.starts at null for root.
 * @param splitrow   The key to make room for during the split pass.
 * @param flag       A flag used to direct where point of split should bechosen.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>open_btree</ParamName>
                    <ParamType>OpenBTree</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>template</ParamName>
                    <ParamType>DataValueDescriptor[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parent</ParamName>
                    <ParamType>BranchControlRow</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>splitrow</ParamName>
                    <ParamType>DataValueDescriptor[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>flag</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [childpageid]</InnerVar>
                <InnerVar>ControlRow [childpage]</InnerVar>
                <InnerVar>BranchRow [branch_template=BranchRow.createEmptyTemplate(open_btree.getRawTran(),open_btree.getConglomerate())]</InnerVar>
                <InnerVar>SearchParameters [sp=new SearchParameters(splitrow,SearchParameters.POSITION_LEFT_OF_PARTIAL_KEY_MATCH,branch_template.getRow(),open_btree,false)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;searchForEntry;[sp]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkConsistency</MethodName>
            <MethodComment>/** 
 * Perform consistency checks for a branch page.  The checks specific to a branch page are: &lt;menu&gt; &lt;li&gt; The rows on the page are indeed branch rows, and they all have the correct number of fields (which is the b-tree's key fields plus one for the child page number. &lt;li&gt; The child pages pointed to by the left child pointer and the index rows are linked together in the same order that they appear on the page. &lt;li&gt; The child pages themselves are all consistent. &lt;/menu&gt; This method also performs the consistency checks that are common to both leaf and branch pages (see ControlRow.checkGeneric).
 * @exception StandardException Standard exception policy.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>btree</ParamName>
                    <ParamType>OpenBTree</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parent</ParamName>
                    <ParamType>ControlRow</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>check_other_pages</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [nchildren=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkGeneric;[btree, parent, check_other_pages]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkChildren</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>btree</ParamName>
                    <ParamType>OpenBTree</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [nchildren=0]</InnerVar>
                <InnerVar>ControlRow [childpage=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkChildOrderAgainstRowOrder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>btree</ParamName>
                    <ParamType>OpenBTree</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ControlRow [cur=null]</InnerVar>
                <InnerVar>ControlRow [prev=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>printTree</MethodName>
            <MethodComment>/** 
 * Recursively print the tree starting at current node in tree.
 * @param btree the open btree to print.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>btree</ParamName>
                    <ParamType>OpenBTree</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>growRoot</MethodName>
            <MethodComment>/** 
 * Add a level to the tree by moving the current branch-root page up one level and adding a new page as it's left child.  On exit the current root page remains the root of the tree. &lt;P&gt; On entry, the current branch root page is expected to be latched. On exit, all latches will have been released. &lt;P&gt; Latch order: o ROOT: on entry current root is latched. No other latches should be held. o ROOT_OLDCHILD: Get and Latch root's left child page. o ROOT_NEWCHILD: Allocate a new branch page with latch. o Conditionally fix up the parent links on the pages pointed at by the newly allocated page.  Loop through slots on ROOT_NEWCHILD, from left to right getting and releasing latches.  Note that fixChildrensParents() must not latch the leftchild as ROOT_OLDCHILD is already latched. RESOLVE: (mikem) does order of release matter. o ROOT         : released. o ROOT_NEWCHILD: released. o ROOT_OLDCHILD: released.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>open_btree</ParamName>
                    <ParamType>OpenBTree</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>template</ParamName>
                    <ParamType>DataValueDescriptor[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>root</ParamName>
                    <ParamType>BranchControlRow</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ControlRow [leftchild=null]</InnerVar>
                <InnerVar>BranchControlRow [branch=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>allocate</MethodName>
            <MethodComment>/** 
 * Allocate a new leaf page to the conglomerate.
 * @exception StandardException Standard exception policy.
 */
</MethodComment>
            <ReturnType>BranchControlRow</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>open_btree</ParamName>
                    <ParamType>OpenBTree</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>leftchild</ParamName>
                    <ParamType>ControlRow</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>level</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parent</ParamName>
                    <ParamType>ControlRow</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Page [page=open_btree.container.addPage()]</InnerVar>
                <InnerVar>BranchControlRow [control_row=new BranchControlRow(open_btree,page,level,parent,false,leftchild.page.getPageNumber())]</InnerVar>
                <InnerVar>byte [insertFlag=Page.INSERT_INITIAL]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>page;insertAtSlot;[Page.FIRST_SLOT_NUMBER, control_row.getRow(), (FormatableBitSet)null, (LogicalUndo)null, insertFlag, AccessFactoryGlobals.BTREE_OVERFLOW_THRESHOLD]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setLeftChildPageno</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>leftchild_pageno</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.page;updateFieldAtSlot;[CR_SLOT, CR_LEFTCHILD, this.left_child_page, null]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setLeftChild</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>leftchild</ParamName>
                    <ParamType>ControlRow</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this;setLeftChildPageno;[leftchild.page.getPageNumber()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fixChildrensParents</MethodName>
            <MethodComment>/** 
 * A branch page that has just been allocated as part of a split has index rows and a left child pointer that were copied from another page.  The parent link on the corresponding pages will still point to the original page.  This method fixes their parent pointers so that they point to the curren page like they're supposed to. &lt;P&gt; Note that maintaining the parent link is kind of a pain, and will slow down applications.  It's only needed for consistency checks, so we may want to have implementations that don't bother to maintain it. &lt;P&gt; This
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>btree</ParamName>
                    <ParamType>OpenBTree</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>leftchild</ParamName>
                    <ParamType>ControlRow</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ControlRow [child=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getChildPageIdAtSlot</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>btree</ParamName>
                    <ParamType>OpenBTree</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>slot</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>long [child_page_id]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getChildPageAtSlot</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ControlRow</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>open_btree</ParamName>
                    <ParamType>OpenBTree</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>slot</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ControlRow [child_control_row]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLeftChild</MethodName>
            <MethodComment>/** 
 * Return the left child pointer for the page. &lt;p&gt; Leaf pages don't have children, so they override this and return null.
 * @return The page which is the leftmost child of this page.
 * @param open_btree  The open btree to associate latches/locks with.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>ControlRow</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>open_btree</ParamName>
                    <ParamType>OpenBTree</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRightChild</MethodName>
            <MethodComment>/** 
 * Return the right child pointer for the page. &lt;p&gt; Leaf pages don't have children, so they override this and return null.
 * @return The page which is the rightmost child of this page.
 * @param open_btree  The open btree to associate latches/locks with.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>ControlRow</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>open_btree</ParamName>
                    <ParamType>OpenBTree</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ControlRow [right_child]</InnerVar>
                <InnerVar>int [num_slots=this.page.recordCount()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLeftChildPageno</MethodName>
            <MethodComment>/** 
 * Return the left child page number for the page.  Leaf pages don't have left children, so they override this and return null.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTypeFormatId</MethodName>
            <MethodComment>/** 
 * Return my format identifier.
 * @see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRowTemplate</MethodName>
            <MethodComment>/** 
 * Return a new template for reading a data row from the current page. &lt;p&gt; Default implementation for rows which are the same as the conglomerates template, sub-classes can alter if underlying template is different (for instance branch rows add an extra field at the end).
 * @return Newly allocated template.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>DataValueDescriptor[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>open_btree</ParamName>
                    <ParamType>OpenBTree</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment>/** 
 * The standard toString.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>