<Class>
    <Id>471</Id>
    <Package>org.apache.derby.iapi.types</Package>
    <ClassName>ClobStreamHeaderGenerator</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>StreamHeaderGenerator</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ClobStreamHeaderGenerator  /** 
 * Generates stream headers for Clob data values. &lt;p&gt; &lt;em&gt;THREAD SAFETY NOTE&lt;/em&gt;: This class is considered thread safe, even though it strictly speaking isn't. However, with the assumption that an instance of this class cannot be shared across databases with different versions, the only bad thing that can happen is that the mode is obtained several times.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>MAGIC_BYTE</FieldName>
            <FieldType>byte</FieldType>
        </Field>
        <Field>
            <FieldName>UNKNOWN_LENGTH</FieldName>
            <FieldType>byte[]</FieldType>
        </Field>
        <Field>
            <FieldName>CHARHDRGEN</FieldName>
            <FieldType>CharStreamHeaderGenerator</FieldType>
        </Field>
        <Field>
            <FieldName>callbackDVD</FieldName>
            <FieldType>StringDataValue</FieldType>
        </Field>
        <Field>
            <FieldName>isPreDerbyTenFive</FieldName>
            <FieldType>Boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ClobStreamHeaderGenerator</MethodName>
            <MethodComment>/** 
 * Creates a new generator that will use the context manager to determine which header format to use based on the database version.
 * @param dvd the owning data value descriptor
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dvd</ParamName>
                    <ParamType>StringDataValue</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ClobStreamHeaderGenerator</MethodName>
            <MethodComment>/** 
 * Creates a new generator using the specified header format.
 * @param isPreDerbyTenFive {@code true} if the database version is priorto 10.5,  {@code false} if the version is 10.5 or newer
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>isPreDerbyTenFive</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>expectsCharCount</MethodName>
            <MethodComment>/** 
 * Tells if the header encodes a character or byte count. &lt;p&gt; Currently the header expects a character count if the header format is 10.5 (or newer), and a byte count if we are accessing a database created by a version prior to 10.5.
 * @return {@code false} if a byte count is expected (prior to 10.5),{@code true} if a character count is expected (10.5 and newer).
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateInto</MethodName>
            <MethodComment>/** 
 * Generates the header for the specified length and writes it into the provided buffer, starting at the specified offset.
 * @param buf the buffer to write into
 * @param offset starting offset in the buffer
 * @param valueLength the length to encode in the header
 * @return The number of bytes written into the buffer.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>buf</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>offset</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>valueLength</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [headerLength=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateInto</MethodName>
            <MethodComment>/** 
 * Generates the header for the specified length.
 * @param out the destination stream
 * @param valueLength the length to encode in the header
 * @return The number of bytes written to the destination stream.
 * @throws IOException if writing to the destination stream fails
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>ObjectOutput</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>valueLength</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [headerLength=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeEOF</MethodName>
            <MethodComment>/** 
 * Writes a Derby-specific end-of-stream marker to the buffer for a stream of the specified character length, if required.
 * @param buffer the buffer to write into
 * @param offset starting offset in the buffer
 * @param valueLength the length of the stream
 * @return Number of bytes written (zero or more).
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>buffer</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>offset</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>valueLength</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeEOF</MethodName>
            <MethodComment>/** 
 * Writes a Derby-specific end-of-stream marker to the destination stream for the specified character length, if required.
 * @param out the destination stream
 * @param valueLength the length of the stream
 * @return Number of bytes written (zero or more).
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>ObjectOutput</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>valueLength</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMaxHeaderLength</MethodName>
            <MethodComment>/** 
 * Returns the maximum header length.
 * @return Maximum header length in bytes.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>determineHeaderFormat</MethodName>
            <MethodComment>/** 
 * Determines which header format to use. &lt;p&gt; &lt;em&gt;Implementation note:&lt;/em&gt; The header format is determined by consulting the data dictionary throught the context service. If there is no context, the operation will fail.
 * @throws IllegalStateException if there is no context
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>DatabaseContext [dbCtx=(DatabaseContext)getContext(DatabaseContext.CONTEXT_ID)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getContext</MethodName>
            <MethodComment>/** 
 * Privileged lookup of a Context. Must be private so that user code can't call this entry point.
 */
</MethodComment>
            <ReturnType>Context</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>contextID</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Context</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>