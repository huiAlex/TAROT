<Class>
    <Id>1376</Id>
    <Package>org.apache.derby.catalog</Package>
    <ClassName>TypeDescriptor</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>TypeDescriptor  /** 
 * TypeDescriptor represents a type in a system catalog, a persistent type. Examples are columns in tables and parameters for routines. A TypeDescriptor is immutable.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>MAXIMUM_WIDTH_UNKNOWN</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>INTEGER</FieldName>
            <FieldType>TypeDescriptor</FieldType>
        </Field>
        <Field>
            <FieldName>INTEGER_NOT_NULL</FieldName>
            <FieldType>TypeDescriptor</FieldType>
        </Field>
        <Field>
            <FieldName>SMALLINT</FieldName>
            <FieldType>TypeDescriptor</FieldType>
        </Field>
        <Field>
            <FieldName>SMALLINT_NOT_NULL</FieldName>
            <FieldType>TypeDescriptor</FieldType>
        </Field>
        <Field>
            <FieldName>DOUBLE</FieldName>
            <FieldType>TypeDescriptor</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getJDBCTypeId</MethodName>
            <MethodComment>/** 
 * Get the jdbc type id for this type.  JDBC type can be found in java.sql.Types. 
 * @return	a jdbc type, e.g. java.sql.Types.DECIMAL 
 * @see java.sql.Types
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMaximumWidth</MethodName>
            <MethodComment>/** 
 * Returns the maximum width of the type.  This may have different meanings for different types.  For example, with char, it means the maximum number of characters, while with int, it is the number of bytes (i.e. 4).
 * @return	the maximum length of this Type; -1 means "unknown/no max length"
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMaximumWidthInBytes</MethodName>
            <MethodComment>/** 
 * Returns the maximum width of the type IN BYTES.  This is the maximum number of bytes that could be returned for this type if the corresponding getXXX() method is used.  For example, if we have a CHAR type, then we want the number of bytes that would be returned by a ResultSet.getString() call.
 * @return	the maximum length of this Type IN BYTES;-1 means "unknown/no max length"
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPrecision</MethodName>
            <MethodComment>/** 
 * Returns the number of decimal digits for the type, if applicable.
 * @return	The number of decimal digits for the type.  Returnszero for non-numeric types.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getScale</MethodName>
            <MethodComment>/** 
 * Returns the number of digits to the right of the decimal for the type, if applicable.
 * @return	The number of digits to the right of the decimal forthe type.  Returns zero for non-numeric types.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isNullable</MethodName>
            <MethodComment>/** 
 * Gets the nullability that values of this type have.
 * @return	true if values of this type may be null. false otherwise
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTypeName</MethodName>
            <MethodComment>/** 
 * Gets the name of this type.
 * @return	the name of this type
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSQLstring</MethodName>
            <MethodComment>/** 
 * Converts this type descriptor (including length/precision) to a string suitable for appearing in a SQL type specifier.  E.g. VARCHAR(30) or java.util.Hashtable 
 * @return	String version of type, suitable for running througha SQL Parser.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCollationType</MethodName>
            <MethodComment>/** 
 * Get the collation type for this type. This api applies only to character string types. And its return value is valid only if the collation  derivation  of this type is "implicit" or "explicit". (In Derby 10.3, collation derivation can't be "explicit". Hence in Derby 10.3, this api should be used only if the collation derivation is "implicit". 
 * @return	collation type which applies to character string types withcollation derivation of "implicit" or "explicit". The possible return values in Derby 10.3 will be COLLATION_TYPE_UCS_BASIC and COLLATION_TYPE_TERRITORY_BASED.
 * @see StringDataValue#COLLATION_TYPE_UCS_BASIC
 * @see StringDataValue#COLLATION_TYPE_TERRITORY_BASED
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isRowMultiSet</MethodName>
            <MethodComment>/** 
 * Return true if this is a Row Multiset type
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isUserDefinedType</MethodName>
            <MethodComment>/** 
 * Return true if this is a user defined type
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRowTypes</MethodName>
            <MethodComment>/** 
 * If this catalog type is a row multi-set type then return its array of catalog types.
 * @return Catalog ypes comprising the row,null if this is not a row type.
 */
</MethodComment>
            <ReturnType>TypeDescriptor[]</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRowColumnNames</MethodName>
            <MethodComment>/** 
 * If this catalog type is a row multi-set type then return its array of column names.
 * @return Column names comprising the row,null if this is not a row type.
 */
</MethodComment>
            <ReturnType>String[]</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>