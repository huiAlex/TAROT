<Class>
    <Id>1625</Id>
    <Package>org.apache.derbyTesting.perf.clients</Package>
    <ClassName>BackToBackLoadGenerator</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>LoadGenerator</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>BackToBackLoadGenerator  /** 
 * Load generator which creates back-to-back load. This means that you have a number of threads running in parallel, where each thread continuously performs operations with no pauses in between.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>threads</FieldName>
            <FieldType>ClientThread[]</FieldType>
        </Field>
        <Field>
            <FieldName>stop</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>collect</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>startTime</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>stopTime</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>client</FieldName>
            <FieldType>Client</FieldType>
        </Field>
        <Field>
            <FieldName>count</FieldName>
            <FieldType>long</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ClientThread</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>Client</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getClient</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Client</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>init</MethodName>
            <MethodComment>/** 
 * Initialize the load generator.
 * @param clients the test clients to use
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clients</ParamName>
                    <ParamType>Client[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startWarmup</MethodName>
            <MethodComment>/** 
 * Start warmup.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startSteadyState</MethodName>
            <MethodComment>/** 
 * Start steady state.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>stop</MethodName>
            <MethodComment>/** 
 * Stop the load generator.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>printReport</MethodName>
            <MethodComment>/** 
 * Print average number of transactions per second.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>PrintStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>long [time=stopTime - startTime]</InnerVar>
                <InnerVar>long [count=0]</InnerVar>
                <InnerVar>double [tps=(double)count * 1000 / time]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>out;println;["Number of threads:\t" + threads.length]</InnerMethodInvoke>
                <InnerMethodInvoke>out;println;["Test duration (s):\t" + ((double)time / 1000)]</InnerMethodInvoke>
                <InnerMethodInvoke>out;println;["Number of transactions:\t" + count]</InnerMethodInvoke>
                <InnerMethodInvoke>out;println;["Average throughput (tx/s):\t" + tps]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>