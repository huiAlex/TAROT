<Class>
    <Id>1341</Id>
    <Package>org.osgi.framework</Package>
    <ClassName>AllServiceListener</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>ServiceListener</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>AllServiceListener  /** 
 * A &lt;code&gt;ServiceEvent&lt;/code&gt; listener that does not filter based upon package wiring. &lt;code&gt;AllServiceListener&lt;/code&gt; is a listener interface that may be implemented by a bundle developer. When a &lt;code&gt;ServiceEvent&lt;/code&gt; is fired, it is synchronously delivered to an &lt;code&gt;AllServiceListener&lt;/code&gt;. The Framework may deliver &lt;code&gt;ServiceEvent&lt;/code&gt; objects to an &lt;code&gt;AllServiceListener&lt;/code&gt; out of order and may concurrently call and/or reenter an &lt;code&gt;AllServiceListener&lt;/code&gt;. &lt;p&gt; An &lt;code&gt;AllServiceListener&lt;/code&gt; object is registered with the Framework using the &lt;code&gt;BundleContext.addServiceListener&lt;/code&gt; method. &lt;code&gt;AllServiceListener&lt;/code&gt; objects are called with a &lt;code&gt;ServiceEvent&lt;/code&gt; object when a service is registered, modified, or is in the process of unregistering. &lt;p&gt; &lt;code&gt;ServiceEvent&lt;/code&gt; object delivery to &lt;code&gt;AllServiceListener&lt;/code&gt; objects is filtered by the filter specified when the listener was registered. If the Java Runtime Environment supports permissions, then additional filtering is done. &lt;code&gt;ServiceEvent&lt;/code&gt; objects are only delivered to the listener if the bundle which defines the listener object's class has the appropriate &lt;code&gt;ServicePermission&lt;/code&gt; to get the service using at least one of the named classes under which the service was registered. &lt;p&gt; Unlike normal &lt;code&gt;ServiceListener&lt;/code&gt; objects, &lt;code&gt;AllServiceListener&lt;/code&gt; objects receive all &lt;code&gt;ServiceEvent&lt;/code&gt; objects regardless of whether the package source of the listening bundle is equal to the package source of the bundle that registered the service. This means that the listener may not be able to cast the service object to any of its corresponding service interfaces if the service object is retrieved.
 * @see ServiceEvent
 * @see ServicePermission
 * @ThreadSafe
 * @since 1.3
 * @version $Revision: 1.10 $
 */
</ClassComment>
    <FieldList/>
    <MethodList/>
</Class>