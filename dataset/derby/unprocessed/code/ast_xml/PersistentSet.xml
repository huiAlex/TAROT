<Class>
    <Id>1199</Id>
    <Package>org.apache.derby.iapi.services.property</Package>
    <ClassName>PersistentSet</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getProperty</MethodName>
            <MethodComment>/** 
 * Gets a value for a stored property. The returned value will be: &lt;OL&gt; &lt;LI&gt; the de-serialized object associated with the key using setProperty if such a value is defined or &lt;LI&gt; the default de-serialized object associated with the key using setPropertyDefault if such a value is defined or &lt;LI&gt; null &lt;/OL&gt; &lt;p&gt; The Store provides a transaction protected list of database properties. Higher levels of the system can store and retrieve these properties once Recovery has finished. Each property is a serializable object and is stored/retrieved using a String key. &lt;p&gt;
 * @param key     The "key" of the property that is being requested.
 * @return object The requested object or null.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>Serializable</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPropertyDefault</MethodName>
            <MethodComment>/** 
 * Gets a default value for a stored property. The returned value will be: &lt;OL&gt; &lt;LI&gt; the default de-serialized object associated with the key using setPropertyDefault if such a value is defined or &lt;LI&gt; null &lt;/OL&gt; &lt;p&gt; The Store provides a transaction protected list of database properties. Higher levels of the system can store and retrieve these properties once Recovery has finished. Each property is a serializable object and is stored/retrieved using a String key. &lt;p&gt;
 * @param key     The "key" of the property that is being requested.
 * @return object The requested object or null.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>Serializable</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>propertyDefaultIsVisible</MethodName>
            <MethodComment>/** 
 * Return true if the default property is visible. A default is visible as long as the property is not set.
 * @param key     The "key" of the property that is being requested.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setProperty</MethodName>
            <MethodComment>/** 
 * Sets the Serializable object associated with a property key. &lt;p&gt; See the discussion of getProperty(). &lt;p&gt; The value stored may be a Formatable object or a Serializable object whose class name starts with java.*. This stops arbitary objects being stored in the database by class name, which will cause problems in obfuscated/non-obfuscated systems.
 * @param key		The key used to lookup this property.
 * @param value	The value to be associated with this key. If null, delete the property from the properties list.
 * @param dbOnlyProperty True if property is only ever searched for int the database properties.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>Serializable</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dbOnlyProperty</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setPropertyDefault</MethodName>
            <MethodComment>/** 
 * Sets the Serializable object default value associated with a property key. &lt;p&gt; See the discussion of getProperty(). &lt;p&gt; The value stored may be a Formatable object or a Serializable object whose class name starts with java.*. This stops arbitary objects being stored in the database by class name, which will cause problems in obfuscated/non-obfuscated systems.
 * @param key		The key used to lookup this propertyDefault.
 * @param value	The default value to be associated with this key. If null, delete the property default from the properties list.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>Serializable</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getProperties</MethodName>
            <MethodComment>/** 
 * Get properties that can be stored in a java.util.Properties object. &lt;p&gt; Get the sub-set of stored properties that can be stored in a  java.util.Properties object. That is all the properties that have a value of type java.lang.String.  Changes to this properties object are not reflected in any persisent storage. &lt;p&gt; Code must use the setProperty() method call.
 * @return The sub-set of stored properties that can be stored in a java.util.Propertes object.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>Properties</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>