<Class>
    <Id>730</Id>
    <Package>org.apache.derby.iapi.sql.compile</Package>
    <ClassName>OptimizerFactory</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>OptimizerFactory  /** 
 * This is simply the factory for creating an optimizer. &lt;p&gt; There is expected to be only one of these configured per database.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>MODULE</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getOptimizer</MethodName>
            <MethodComment>/** 
 * Only one optimizer level should exist in the database, however, the connection may have multiple instances of that optimizer at a given time.
 * @param optimizableList	The list of Optimizables to optimize.
 * @param predicateList	The list of unassigned OptimizablePredicates.
 * @param dDictionary	The DataDictionary to use.
 * @param requiredRowOrdering	The required ordering of the rows tocome out of the optimized result set
 * @param numTablesInQuery	The number of tables in the current query
 * @param overridingPlan    (Optional) A complete plan specified by optimizer overrides. Must have been bound already.
 * @param lcc			The LanguageConnectionContextRESOLVE - We probably want to pass a subquery list, once we define a new interface for them, so that the Optimizer can out where to attach the subqueries.
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>Optimizer</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>optimizableList</ParamName>
                    <ParamType>OptimizableList</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>predicateList</ParamName>
                    <ParamType>OptimizablePredicateList</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dDictionary</ParamName>
                    <ParamType>DataDictionary</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>requiredRowOrdering</ParamName>
                    <ParamType>RequiredRowOrdering</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>numTablesInQuery</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>overridingPlan</ParamName>
                    <ParamType>OptimizerPlan</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lcc</ParamName>
                    <ParamType>LanguageConnectionContext</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCostEstimate</MethodName>
            <MethodComment>/** 
 * Return a new CostEstimate.
 */
</MethodComment>
            <ReturnType>CostEstimate</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>supportsOptimizerTrace</MethodName>
            <MethodComment>/** 
 * Return whether or not the optimizer associated with this factory supports optimizer trace.
 * @return Whether or not the optimizer associated withthis factory supports optimizer trace.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMaxMemoryPerTable</MethodName>
            <MethodComment>/** 
 * Return the maxMemoryPerTable setting, this is used in optimizer, as well as subquery materialization at run time.
 * @return	maxMemoryPerTable value
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>doJoinOrderOptimization</MethodName>
            <MethodComment>/** 
 * Tell whether to do join order optimization.
 * @return  {@code true} means do join order optimization, {@code false}means don't do it.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>