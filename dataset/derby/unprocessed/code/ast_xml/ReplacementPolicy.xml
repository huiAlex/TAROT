<Class>
    <Id>1628</Id>
    <Package>org.apache.derby.impl.services.cache</Package>
    <ClassName>ReplacementPolicy</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ReplacementPolicy  /** 
 * Interface that must be implemented by classes that provide a replacement algorithm for &lt;code&gt;ConcurrentCache&lt;/code&gt;.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>insertEntry</MethodName>
            <MethodComment>/** 
 * Insert an entry into the &lt;code&gt;ReplacementPolicy&lt;/code&gt;'s data structure, possibly evicting another entry. The entry should be uninitialized when the method is called (that is, its &lt;code&gt;Cacheable&lt;/code&gt; should be &lt;code&gt;null&lt;/code&gt;), and it should be locked. When the method returns, the entry may have been initialized with a &lt;code&gt;Cacheable&lt;/code&gt; which is ready to be reused. It is also possible that the &lt;code&gt;Cacheable&lt;/code&gt; is still &lt;code&gt;null&lt;/code&gt; when the method returns, in which case the caller must allocate one itself. The entry will be associated with a  {@code Callback} object that it canuse to communicate back to the replacement policy events (for instance, that it has been accessed or become invalid).
 * @param entry the entry to insert
 * @exception StandardException if an error occurs while inserting theentry
 * @see CacheEntry#setCallback(ReplacementPolicy.Callback)
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>entry</ParamName>
                    <ParamType>CacheEntry</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>doShrink</MethodName>
            <MethodComment>/** 
 * Try to shrink the cache if it has exceeded its maximum size. It is not guaranteed that the cache will actually shrink.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>size</MethodName>
            <MethodComment>/** 
 * Get the number of entries allocated in the data structure that holds cached objects. This number could include empty entries for objects that have been removed from the cache, if those entries are still kept in the data structure for reuse.
 * @return the number of entries allocated in the cache
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>access</MethodName>
            <MethodComment>/** 
 * Notify the replacement algorithm that the cache entry has been accessed. The replacement algorithm can use this information to collect statistics about access frequency which can be used to determine the order of evictions. &lt;p&gt; The entry associated with the callback object must be locked by the current thread.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>free</MethodName>
            <MethodComment>/** 
 * Notify the replacement algorithm that the entry associated with this callback object has been removed, and the callback object and the &lt;code&gt;Cacheable&lt;/code&gt; can be reused. &lt;p&gt; The entry associated with the callback object must be locked by the current thread.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>