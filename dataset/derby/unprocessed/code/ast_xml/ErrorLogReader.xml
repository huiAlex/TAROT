<Class>
    <Id>1756</Id>
    <Package>org.apache.derby.diag</Package>
    <ClassName>ErrorLogReader</ClassName>
    <SuperClass>VTITemplate</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ErrorLogReader  /** 
 * ErrorLogReader is a virtual table interface (VTI) which contains all the statements of "interest" in db2j.&lt;!-- --&gt;log or a specified file when db2j.&lt;!-- --&gt;language.&lt;!-- --&gt;logStatementText=true. &lt;P&gt;One use of this VTI is to determine the active transactions and the SQL statements in those transactions at a given point in time, say when a deadlock or lock timeout occurred.  In order to do that, you must first find the timestamp (timestampConstant) of interest in the error log.   The SQL to view the active transactions at a given in time is: &lt;PRE&gt;SELECT vti.ts, threadid, cast(xid as int) as xid_int, cast(lccid as int) as lccid_int, logtext  FROM new org.apache.derby.diag.ErrorLogReader() vti,  (VALUES timestampConstant) t(ts) WHERE vti.ts &amp;lt;= t.ts AND  vti.ts &amp;gt; (SELECT MAX(ts) IS NULL ? '2000-01-01 00:00:00.1' : MAX(ts) FROM new org.apache.derby.diag.ErrorLogReader() vti_i WHERE (logtext LIKE 'Committing%' OR logtext LIKE 'Rolling%') AND vti.xid = vti_i.xid AND ts &amp;lt; t.ts) ORDER BY xid_int, vti.ts &lt;/PRE&gt; &lt;P&gt;The ErrorLogReader virtual table has the following columns: &lt;UL&gt;&lt;LI&gt;TS varchar(26) - the timestamp of the statement.&lt;/LI&gt; &lt;LI&gt;THREADID varchar(40) - the thread name.&lt;/LI&gt; &lt;LI&gt;XID varchar(15) - the transaction ID.&lt;/LI&gt; &lt;LI&gt;LCCID varchar(15) - the connection ID.&lt;/LI&gt; &lt;LI&gt;DATABASE varchar(128) -  Database name &lt;LI&gt;DRDAID  varchar(50) - nullable. DRDA ID for network server session. &lt;LI&gt;LOGTEXT long varchar - text of the statement or commit or rollback.&lt;/LI&gt; &lt;/UL&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>gotFile</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>inputFileStreamReader</FieldName>
            <FieldType>InputStreamReader</FieldType>
        </Field>
        <Field>
            <FieldName>inputStream</FieldName>
            <FieldType>InputStream</FieldType>
        </Field>
        <Field>
            <FieldName>bufferedReader</FieldName>
            <FieldType>BufferedReader</FieldType>
        </Field>
        <Field>
            <FieldName>inputFileName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>line</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>endTimestampIndex</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>threadIndex</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>xidIndex</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>lccidIndex</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>databaseIndex</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>drdaidIndex</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>END_TIMESTAMP</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>PARAMETERS_STRING</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>BEGIN_THREAD_STRING</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>END_THREAD_STRING</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>BEGIN_XID_STRING</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>END_XID_STRING</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>BEGIN_DATABASE_STRING</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>END_DATABASE_STRING</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>BEGIN_DRDAID_STRING</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>END_DRDAID_STRING</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>BEGIN_EXECUTING_STRING</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>END_EXECUTING_STRING</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>columnInfo</FieldName>
            <FieldType>ResultColumnDescriptor[]</FieldType>
        </Field>
        <Field>
            <FieldName>metadata</FieldName>
            <FieldType>ResultSetMetaData</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ErrorLogReader</MethodName>
            <MethodComment>/** 
 * ErrorLogReader() accesses the derby.log in derby.system.home, if set, otherwise it looks in the current directory. ErrorLogReader('filename') will access the specified file name.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [home=AccessController.doPrivileged(new PrivilegedAction&lt;String&gt;(){
  public String run(){
    return System.getProperty(Property.SYSTEM_HOME_PROPERTY);
  }
}
)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>DiagUtil;checkAccess;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ErrorLogReader</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>inputFileName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>DiagUtil;checkAccess;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMetaData</MethodName>
            <MethodComment>/** 
 * @see java.sql.ResultSet#getMetaData
 */
</MethodComment>
            <ReturnType>ResultSetMetaData</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>next</MethodName>
            <MethodComment>/** 
 * @see java.sql.ResultSet#next
 * @exception SQLException If database-access error occurs.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>close</MethodName>
            <MethodComment>/** 
 * @see java.sql.ResultSet#close
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getString</MethodName>
            <MethodComment>/** 
 * All columns in the Db2jLogReader VTI have a of String type.
 * @see java.sql.ResultSet#getString
 * @exception SQLException If database-access error occurs.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>columnNumber</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>wasNull</MethodName>
            <MethodComment>/** 
 * @see java.sql.ResultSet#wasNull
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>