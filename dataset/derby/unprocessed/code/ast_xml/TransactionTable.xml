<Class>
    <Id>548</Id>
    <Package>org.apache.derby.diag</Package>
    <ClassName>TransactionTable</ClassName>
    <SuperClass>VTITemplate</SuperClass>
    <SuperInterfaceList>
        <SuperInterface>VTICosting</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>TransactionTable  /** 
 * TransactionTable is a virtual table that shows all transactions currently in the database. This virtual table can be invoked by calling it directly &lt;PRE&gt; select * from SYSCS_DIAG.TRANSACTION_TABLE &lt;/PRE&gt; &lt;P&gt;The TransactionTable virtual table takes a snap shot of the  transaction table while the system is in flux, so it is possible that some transactions may be in transition state while the snap shot is taken. We choose to do this rather then impose extraneous timing restrictions so that the use of this tool will not alter the normal timing and flow of execution in the application.  &lt;P&gt;The TransactionTable virtual table has the following columns: &lt;UL&gt; &lt;LI&gt;XID varchar(15) - not nullable.  The transaction id, this can be joined with the LockTable virtual table's XID.&lt;/LI&gt; &lt;LI&gt;GLOBAL_XID varchar(140) - nullable.  The global transaction id, only set if this transaction is a participant in a distributed transaction.&lt;/LI&gt; &lt;LI&gt;USERNAME varchar(128) - nullable.  The user name, or APP by default. May appear null if the transaction is started by Derby.&lt;/LI&gt; &lt;LI&gt;TYPE varchar(30) - not nullable. UserTransaction or an internal transaction spawned by Derby.&lt;/LI&gt; &lt;LI&gt;STATUS varchar(8) - not nullable.  IDLE or ACTIVE.  A transaction is IDLE only when it is first created or right after it commits.  Any transaction that holds or has held any resource in the database is ACTIVE. Accessing the TransactionTable virtual table without using the class alias will not activate the transaction.&lt;/LI&gt; &lt;LI&gt;FIRST_INSTANT varchar(20) - nullable.  If null, this is a read only transaction.  If not null, this is the first log record instant written by the transaction.&lt;/LI&gt;  &lt;LI&gt;SQL_TEXT VARCHAR(32672) - nullable.  if null, this transaction is currently not being executed in the database.  If not null, this is the SQL statement currently being executed in the database.&lt;/LI&gt; &lt;/UL&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>transactionTable</FieldName>
            <FieldType>TransactionInfo[]</FieldType>
        </Field>
        <Field>
            <FieldName>initialized</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>currentRow</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>wasNull</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>columnInfo</FieldName>
            <FieldType>ResultColumnDescriptor[]</FieldType>
        </Field>
        <Field>
            <FieldName>metadata</FieldName>
            <FieldType>ResultSetMetaData</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>TransactionTable</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>DiagUtil;checkAccess;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMetaData</MethodName>
            <MethodComment>/** 
 * @see java.sql.ResultSet#getMetaData
 */
</MethodComment>
            <ReturnType>ResultSetMetaData</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>next</MethodName>
            <MethodComment>/** 
 * @see java.sql.ResultSet#next
 * @exception SQLException if no transaction context can be found
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>close</MethodName>
            <MethodComment>/** 
 * @see java.sql.ResultSet#close
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getString</MethodName>
            <MethodComment>/** 
 * All columns in TransactionTable VTI is of String type.
 * @see java.sql.ResultSet#getString
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>columnNumber</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>TransactionInfo [info=transactionTable[currentRow]]</InnerVar>
                <InnerVar>String [str=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>wasNull</MethodName>
            <MethodComment>/** 
 * @see java.sql.ResultSet#wasNull
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEstimatedRowCount</MethodName>
            <MethodComment>/** 
 * @see VTICosting#getEstimatedRowCount
 */
</MethodComment>
            <ReturnType>double</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>vtiEnvironment</ParamName>
                    <ParamType>VTIEnvironment</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEstimatedCostPerInstantiation</MethodName>
            <MethodComment>/** 
 * @see VTICosting#getEstimatedCostPerInstantiation
 */
</MethodComment>
            <ReturnType>double</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>vtiEnvironment</ParamName>
                    <ParamType>VTIEnvironment</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>supportsMultipleInstantiations</MethodName>
            <MethodComment>/** 
 * @return false
 * @see VTICosting#supportsMultipleInstantiations
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>vtiEnvironment</ParamName>
                    <ParamType>VTIEnvironment</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>