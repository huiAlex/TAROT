<Class>
    <Id>815</Id>
    <Package>org.apache.derby.iapi.db</Package>
    <ClassName>OptimizerTrace</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>OptimizerTrace  /** 
 * &lt;P&gt; This  class provides static methods for controlling the optimizer tracing in a Derby database.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>setOptimizerTrace</MethodName>
            <MethodComment>/** 
 * Turn default optimizer tracing on or off.
 * @param onOrOff    Whether to turn optimizer tracing on (true) or off (false).
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>onOrOff</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>OptTrace [optimizerTracer=onOrOff ? new DefaultOptTrace() : null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setOptimizerTracer;[optimizerTracer]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setOptimizerTracer</MethodName>
            <MethodComment>/** 
 * Install an optimizer tracer (to enable tracing) or uninstall the current optimizer tracer (to disable tracing).
 * @param tracer    Null if tracing is being turned off, otherwise an optimizer tracer
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tracer</ParamName>
                    <ParamType>OptTrace</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOptimizerTracer</MethodName>
            <MethodComment>/** 
 * Get the current optimizer tracer, if any.
 */
</MethodComment>
            <ReturnType>OptTrace</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOptimizerTraceOutput</MethodName>
            <MethodComment>/** 
 * Get the optimizer trace output for the last optimized query as a String.
 * @return The optimizer trace output for the last optimized query as a String.Null will be returned if optimizer trace output is off or not supported  or no trace output was found or an exception occurred.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [retCode=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>