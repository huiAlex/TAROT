<Class>
    <Id>1350</Id>
    <Package>org.apache.derbyTesting.functionTests.util.streams</Package>
    <ClassName>ByteAlphabet</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ByteAlphabet  /** 
 * A looping alphabet, returning bytes in a specified encoding. The alphabet loops over a list of bytes representing characters. The alphabet-object is used by looping stream, which in turn is used for testing methods requiring streaming inputs. The following alphabets have been defined: &lt;ul&gt;&lt;li&gt;&lt;em&gt;Modern latin, lowercase&lt;/em&gt; ; letters a - z (26) &lt;li&gt;&lt;em&gt;Norwegian/Danish, lowercase&lt;/em&gt; ; letters a - z, plus three additional letters (29) &lt;li&gt;&lt;em&gt;Tamil&lt;/em&gt; ; 46 Tamil letters from UNICODE U0B80 &lt;li&gt;&lt;em&gt;CJK subset&lt;/em&gt; ; 12 letter from UNICODE CJK U4E00 &lt;/ul&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>name</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>encoding</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>bytes</FieldName>
            <FieldType>byte[]</FieldType>
        </Field>
        <Field>
            <FieldName>charCount</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>byteCount</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>boff</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>modernLatinLowercase</MethodName>
            <MethodComment>/** 
 * Create an alphabet returning bytes representing the lowercase letters a-z in the "US-ASCII" encoding.
 */
</MethodComment>
            <ReturnType>ByteAlphabet</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>norwegianLowercase</MethodName>
            <MethodComment>/** 
 * Create an alphabet returning bytes representing the 29 lowercase letters in the Norwegian/Danish alphabet in the "ISO-8859-1" encoding.
 */
</MethodComment>
            <ReturnType>ByteAlphabet</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>tamilUTF8</MethodName>
            <MethodComment>/** 
 * Create an alphabet returning bytes representing a subset of the Tamil alphabet in the UTF-8 encoding.
 */
</MethodComment>
            <ReturnType>ByteAlphabet</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>tamilUTF16BE</MethodName>
            <MethodComment>/** 
 * Create an alphabet returning bytes representing a subset of the Tamil alphabet in the UTF-16BE encoding.
 */
</MethodComment>
            <ReturnType>ByteAlphabet</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cjkSubsetUTF8</MethodName>
            <MethodComment>/** 
 * Create an alphabet returning bytes representing a subset of the CJK alphabet in the UTF-8 encoding.
 */
</MethodComment>
            <ReturnType>ByteAlphabet</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cjkSubsetUTF16BE</MethodName>
            <MethodComment>/** 
 * Create an alphabet returning bytes representing a subset of the CJK alphabet in the UTF-16BE encoding.
 */
</MethodComment>
            <ReturnType>ByteAlphabet</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>singleByte</MethodName>
            <MethodComment>/** 
 * Create an alphabet that consists of a single byte.
 */
</MethodComment>
            <ReturnType>ByteAlphabet</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>b</ParamName>
                    <ParamType>byte</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ByteAlphabet</MethodName>
            <MethodComment>/** 
 * Create an alphabet with the given name, the given characters and using the specified encoding to represent the characters as bytes.
 * @param name the name of the alphabet
 * @param chars the characters in the alphabet
 * @param encoding the encoding to use to represent characters as bytes
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>chars</ParamName>
                    <ParamType>char[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>encoding</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [tmpStr=new String(chars)]</InnerVar>
                <InnerVar>byte[] [tmpBytes]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getName</MethodName>
            <MethodComment>/** 
 * Return the name of the alphabet.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEncoding</MethodName>
            <MethodComment>/** 
 * Return the encoding used to represent characters as bytes.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>charCount</MethodName>
            <MethodComment>/** 
 * Return the number of characters in the alphabet.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>byteCount</MethodName>
            <MethodComment>/** 
 * Return the number of bytes in the alphabet. The number of bytes in the alphabet is noramlly different from the number of characters in the alphabet, but it depends on the characters in the alphabet and encoding used to represent them as bytes.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nextByte</MethodName>
            <MethodComment>/** 
 * Return the next byte in the alphabet.
 */
</MethodComment>
            <ReturnType>byte</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reset</MethodName>
            <MethodComment>/** 
 * Reset the alphabet, the next byte returned is the first byte in the alphabet, which might not be a complete character.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nextByteToRead</MethodName>
            <MethodComment>/** 
 * Compute the next byte to read after reading the specified number of bytes. Besides from returning the index, the internal state of the alphabet is updated.
 * @param bytesRead the number of bytes read
 * @return the index of the next byte
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>bytesRead</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>