<Class>
    <Id>1045</Id>
    <Package>org.apache.derbyTesting.functionTests.tests.upgradeTests</Package>
    <ClassName>Changes10_7</ClassName>
    <SuperClass>UpgradeChange</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Changes10_7  /** 
 * Upgrade test cases for 10.7. If the old version is 10.7 or later then these tests will not be run. &lt;BR&gt; 10.7 Upgrade issues &lt;UL&gt; &lt;LI&gt;BOOLEAN data type support expanded.&lt;/LI&gt; &lt;/UL&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>SYNTAX_ERROR</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>UPGRADE_REQUIRED</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>GRANT_REVOKE_WITH_LEGACY_ACCESS</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>Changes10_7</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>suite</MethodName>
            <MethodComment>/** 
 * Return the suite of tests to test the changes made in 10.7.
 * @param phase an integer that indicates the current phase inthe upgrade test.
 * @return the test suite created.
 */
</MethodComment>
            <ReturnType>Test</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>phase</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BaseTestSuite [suite=new BaseTestSuite("Upgrade test for 10.7")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>suite;addTestSuite;[Changes10_7.class]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testBoolean</MethodName>
            <MethodComment>/** 
 * Make sure that that database is at level 10.7 in order to enjoy extended support for the BOOLEAN datatype.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [booleanValuedFunction="create function f_4655( a varchar( 100 ) ) returns boolean\n" + "language java parameter style java no sql deterministic\n" + "external name 'Z.getBooleanValue'\n"]</InnerVar>
                <InnerVar>Statement [s=createStatement()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>s;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSupportedTypes</MethodName>
            <MethodComment>/** 
 * Get the names of all supported types, as reported by {@code DatabaseMetaData.getTypeInfo()}.
 * @return a set with the names of all supported types in the loadedversion of Derby
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>HashSet&lt;String&gt; [types=new HashSet&lt;String&gt;()]</InnerVar>
                <InnerVar>ResultSet [rs=getConnection().getMetaData().getTypeInfo()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rs;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testAlterTableDropColumnAndTriggerAction</MethodName>
            <MethodComment>/** 
 * This test creates 2 kinds of triggers in old release for each of the three phase of upgrade. The triggers are of following 2 types 1)trigger action using columns available through the REFERENCING clause. 2)trigger action using columns without the REFERENCING clause. For both kinds of triggers, there is test case which drops the column  being used in the trigger action column.  In all three modes of upgrade, soft upgrade, post soft upgrade, and  hard upgrade, ALTER TABLE DROP COLUMN will detect the trigger  dependency.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Statement [s=createStatement()]</InnerVar>
                <InnerVar>ResultSet [rs]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createTableAndTrigger</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tableName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>triggerName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>usesReferencingClause</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Statement [s=createStatement()]</InnerVar>
                <InnerVar>ResultSet [rs]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>s;execute;["CREATE TABLE " + tableName + " (c11 int, c12 int) "]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["INSERT INTO " + tableName + " VALUES (1,10)"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["CREATE TRIGGER " + triggerName + " AFTER UPDATE OF c12 ON "+ tableName+ (usesReferencingClause ? " REFERENCING OLD AS oldt" : "")+ " FOR EACH ROW SELECT "+ (usesReferencingClause ? "oldt.c11 " : "c11 ")+ "FROM "+ tableName]</InnerMethodInvoke>
                <InnerMethodInvoke>s;executeUpdate;["UPDATE " + tableName + " SET c12=c12+1"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>incorrectBehaviorForDropColumn</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tableName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>triggerName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>restrictOrCascade</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Statement [s=createStatement()]</InnerVar>
                <InnerVar>ResultSet [rs]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>s;executeUpdate;["ALTER TABLE " + tableName + " DROP COLUMN c11 "+ restrictOrCascade]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{triggerName}}]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkWarning</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>st</ParamName>
                    <ParamType>Statement</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>expectedWarning</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>SQLWarning [sqlWarn=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertNotNull;["Expected warning but found none", sqlWarn]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertSQLState;[expectedWarning, sqlWarn]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testTriggers</MethodName>
            <MethodComment>/** 
 * Make sure that DERBY-1482 changes do not break backward compatibility
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Statement [s=createStatement()]</InnerVar>
                <InnerVar>ResultSet [rs]</InnerVar>
                <InnerVar>boolean [modeDb2SqlOptional=oldAtLeast(10,3)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>s;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testExternalSecuritySpecification</MethodName>
            <MethodComment>/** 
 * Make sure that that database is at level 10.7 in order to enjoy routines with specified EXTERNAL SECURITY INVOKER or DEFINER.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [functionWithDefinersRights="create function f_4551( a varchar( 100 ) ) returns int\n" + "language java parameter style java reads sql data\n" + "external security definer\n"+ "external name 'Z.getIntValue'\n"]</InnerVar>
                <InnerVar>Statement [s=createStatement()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>s;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>