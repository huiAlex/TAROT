<Class>
    <Id>329</Id>
    <Package>org.apache.derby.iapi.security</Package>
    <ClassName>SecurityUtil</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>SecurityUtil  /** 
 * This class provides helper functions for security-related features.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>USE_DERBY_INTERNALS</FieldName>
            <FieldType>SystemPermission</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>createSystemPrincipalSubject</MethodName>
            <MethodComment>/** 
 * Creates a (read-only) Subject representing a given user as a System user within Derby.
 * @param user the user name
 * @return a Subject representing the user by its exact and normalized name
 * @see &lt;a href="http://wiki.apache.org/db-derby/UserIdentifiers"&gt;User Names &amp; Authorization Identifiers in Derby&lt;/a&gt;
 */
</MethodComment>
            <ReturnType>Subject</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>user</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Set&lt;SystemPrincipal&gt; [principals=new HashSet&lt;SystemPrincipal&gt;()]</InnerVar>
                <InnerVar>boolean [readOnly=true]</InnerVar>
                <InnerVar>Set [credentials=new HashSet()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAuthorizationId</MethodName>
            <MethodComment>/** 
 * Returns the Authorization Identifier for a principal name.
 * @param name the name of the principal
 * @return the authorization identifier for this principal
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkSubjectHasPermission</MethodName>
            <MethodComment>/** 
 * Checks that a Subject has a Permission under the SecurityManager. To perform this check the following policy grant is required &lt;ul&gt; &lt;li&gt; to run the encapsulated test: permission javax.security.auth.AuthPermission "doAsPrivileged"; &lt;/ul&gt; or an AccessControlException will be raised detailing the cause. &lt;p&gt;
 * @param subject the subject representing the SystemPrincipal(s)
 * @param perm the permission to be checked
 * @throws AccessControlException if permissions are missing
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>subject</ParamName>
                    <ParamType>Subject</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>perm</ParamName>
                    <ParamType>Permission</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PrivilegedAction&lt;Void&gt; [runCheck=new PrivilegedAction&lt;Void&gt;(){
  public Void run(){
    AccessController.checkPermission(perm);
    return null;
  }
}
]</InnerVar>
                <InnerVar>PrivilegedAction&lt;Void&gt; [runCheckAsPrivilegedUser=new PrivilegedAction&lt;Void&gt;(){
  public Void run(){
    final AccessControlContext acc=null;
    Subject.doAsPrivileged(subject,runCheck,acc);
    return null;
  }
}
]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>AccessController;doPrivileged;[runCheckAsPrivilegedUser]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>AccessController;checkPermission;[perm]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>AccessControlContext [acc=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>Subject;doAsPrivileged;[subject, runCheck, acc]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkUserHasPermission</MethodName>
            <MethodComment>/** 
 * Checks that a User has a Permission under the SecurityManager. To perform this check the following policy grant is required &lt;ul&gt; &lt;li&gt; to run the encapsulated test: permission javax.security.auth.AuthPermission "doAsPrivileged"; &lt;/ul&gt; or an AccessControlException will be raised detailing the cause. &lt;p&gt;
 * @param user the user to be check for having the permission
 * @param perm the permission to be checked
 * @throws AccessControlException if permissions are missing
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>user</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>perm</ParamName>
                    <ParamType>Permission</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Subject [subject=createSystemPrincipalSubject(user)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkSubjectHasPermission;[subject, perm]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>authorize</MethodName>
            <MethodComment>/** 
 * Raise an exception if the current user does not have permission to perform the indicated operation.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>operation</ParamName>
                    <ParamType>Securable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LanguageConnectionContext [lcc=(LanguageConnectionContext)getContextOrNull(LanguageConnectionContext.CONTEXT_ID)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkDerbyInternalsPrivilege</MethodName>
            <MethodComment>/** 
 * Verify that we have been granted permission to use Derby internals
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getContextOrNull</MethodName>
            <MethodComment>/** 
 * Privileged lookup of a Context. Must be private so that user code can't call this entry point.
 */
</MethodComment>
            <ReturnType>Context</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>contextID</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Context</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>