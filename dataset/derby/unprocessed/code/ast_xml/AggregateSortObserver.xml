<Class>
    <Id>1898</Id>
    <Package>org.apache.derby.impl.sql.execute</Package>
    <ClassName>AggregateSortObserver</ClassName>
    <SuperClass>BasicSortObserver</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>AggregateSortObserver  /** 
 * This sort observer performs aggregation.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>aggsToProcess</FieldName>
            <FieldType>GenericAggregator[]</FieldType>
        </Field>
        <Field>
            <FieldName>aggsToInitialize</FieldName>
            <FieldType>GenericAggregator[]</FieldType>
        </Field>
        <Field>
            <FieldName>firstAggregatorColumn</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>AggregateSortObserver</MethodName>
            <MethodComment>/** 
 * Simple constructor
 * @param doClone If true, then rows that are retainedby the sorter will be cloned.  This is needed if language is reusing row wrappers.
 * @param aggsToProcess the array of aggregates that need to be accumulated/merged in the sorter.
 * @param aggsToInitialize the array of aggregates thatneed to be iniitialized as they are inserted into the sorter.  This may be different than aggsToProcess in the case where some distinct aggregates are dropped in the initial pass of a two phase aggregation for scalar or vector distinct aggregation.  The initialization process consists of replacing an empty UserValue with a new,  initialized aggregate of the appropriate type. Note that for each row, only the first aggregate in this list is checked to see whether initialization is needed.  If so, ALL aggregates are initialized; otherwise, NO aggregates are initialized.
 * @param execRow	ExecRow to use as source of clone for store.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>doClone</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>aggsToProcess</ParamName>
                    <ParamType>GenericAggregator[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>aggsToInitialize</ParamName>
                    <ParamType>GenericAggregator[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>execRow</ParamName>
                    <ParamType>ExecRow</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>insertNonDuplicateKey</MethodName>
            <MethodComment>/** 
 * Called prior to inserting a distinct sort key.  
 * @param insertRow the current row that the sorteris on the verge of retaining
 * @return the row to be inserted by the sorter.  If null,then nothing is inserted by the sorter.  Distinct sorts will want to return null.
 * @exception StandardException never thrown
 */
</MethodComment>
            <ReturnType>DataValueDescriptor[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>insertRow</ParamName>
                    <ParamType>DataValueDescriptor[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DataValueDescriptor[] [returnRow=super.insertNonDuplicateKey(insertRow)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>insertDuplicateKey</MethodName>
            <MethodComment>/** 
 * Called prior to inserting a duplicate sort key.  We do aggregation here.
 * @param insertRow the current row that the sorteris on the verge of retaining.  It is a duplicate of existingRow.
 * @param existingRow the row that is already in thethe sorter which is a duplicate of insertRow
 * @exception StandardException never thrown
 */
</MethodComment>
            <ReturnType>DataValueDescriptor[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>insertRow</ParamName>
                    <ParamType>DataValueDescriptor[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>existingRow</ParamName>
                    <ParamType>DataValueDescriptor[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>