<Class>
    <Id>1728</Id>
    <Package>org.apache.derby.optional.lucene</Package>
    <ClassName>DerbyLuceneDir</ClassName>
    <SuperClass>Directory</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>DerbyLuceneDir  /** 
 * &lt;p&gt; Derby implementation of Lucene Directory. &lt;/p&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>_storageFactory</FieldName>
            <FieldType>StorageFactory</FieldType>
        </Field>
        <Field>
            <FieldName>_directory</FieldName>
            <FieldType>StorageFile</FieldType>
        </Field>
        <Field>
            <FieldName>_schema</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>_table</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>_textcol</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>_outputFiles</FieldName>
            <FieldType>HashMap</FieldType>
        </Field>
        <Field>
            <FieldName>_outputFiles</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>_lockFactory</FieldName>
            <FieldType>LockFactory</FieldType>
        </Field>
        <Field>
            <FieldName>_closed</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>_openDirectories</FieldName>
            <FieldType>HashMap</FieldType>
        </Field>
        <Field>
            <FieldName>_openDirectories</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getDirectory</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Lookup a directory, creating its path as necessary. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>DerbyLuceneDir</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>storageFactory</ParamName>
                    <ParamType>StorageFactory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>schema</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>table</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>textcol</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DerbyLuceneDir [candidate=new DerbyLuceneDir(storageFactory,schema,table,textcol)]</InnerVar>
                <InnerVar>String [key=getKey(candidate)]</InnerVar>
                <InnerVar>DerbyLuceneDir [result=_openDirectories.get(key)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeDir</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Remove a directory from the map. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dir</ParamName>
                    <ParamType>DerbyLuceneDir</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>_openDirectories;remove;[getKey(dir)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getKey</MethodName>
            <MethodComment>/** 
 * Get the key associated with a directory 
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dir</ParamName>
                    <ParamType>DerbyLuceneDir</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>DerbyLuceneDir</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Construct from the database StorageFactory and a directory path of the form lucene/$schemaName/$tableName/$columnName. Creates the directory if it does not already exist. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>storageFactory</ParamName>
                    <ParamType>StorageFactory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>schema</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>table</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>textcol</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFile</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Get a file in this directory. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>StorageFile</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fileName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDirectory</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Get the Derby directory backing this Lucene directory. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>StorageFile</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setLockFactory</MethodName>
            <MethodComment>/** 
 * Set the lock factory used by this Directory. 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lockFactory</ParamName>
                    <ParamType>LockFactory</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLockFactory</MethodName>
            <MethodComment>/** 
 * Get the lock factory used by this Directory. 
 */
</MethodComment>
            <ReturnType>LockFactory</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clearLock</MethodName>
            <MethodComment>/** 
 * Clear the lock 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>_lockFactory;clearLock;[name]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeLock</MethodName>
            <MethodComment>/** 
 * Make a lock 
 */
</MethodComment>
            <ReturnType>Lock</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>close</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Close this directory and remove it from the map of open directories. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>_outputFiles;clear;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;removeDir;[this]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createOutput</MethodName>
            <MethodComment>/** 
 * Create a new, empty file for writing 
 */
</MethodComment>
            <ReturnType>DerbyIndexOutput</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>IOContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DerbyIndexOutput [indexOutput=_outputFiles.get(name)]</InnerVar>
                <InnerVar>StorageFile [file=getStorageFile(name)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkIfClosed;[]</InnerMethodInvoke>
                <InnerMethodInvoke>_outputFiles;put;[name, indexOutput]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>deleteFile</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StorageFile [file=getStorageFile(name)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkIfClosed;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fileExists</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkIfClosed;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fileLength</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DerbyIndexInput [indexInput=openInput(name,null)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkIfClosed;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>listAll</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkIfClosed;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>openInput</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DerbyIndexInput</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>IOContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StorageFile [file=getStorageFile(name)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkIfClosed;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sync</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>names</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeIndexOutput</MethodName>
            <MethodComment>/** 
 * Remove the named file from the list of output files 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>_outputFiles;remove;[name]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getIndexInput</MethodName>
            <MethodComment>/** 
 * Get a DerbyIndexInput on the named file 
 */
</MethodComment>
            <ReturnType>DerbyIndexInput</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getIndexInput</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DerbyIndexInput</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>file</ParamName>
                    <ParamType>StorageFile</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStorageFile</MethodName>
            <MethodComment>/** 
 * Turn a file name into a StorageFile handle 
 */
</MethodComment>
            <ReturnType>StorageFile</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newIOException</MethodName>
            <MethodComment>/** 
 * Make an IOException with the given SQLState and args 
 */
</MethodComment>
            <ReturnType>IOException</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sqlState</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkIfClosed</MethodName>
            <MethodComment>/** 
 * Raise an exception if this directory is closed 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createPath</MethodName>
            <MethodComment>/** 
 * Create the path if necessary.
 */
</MethodComment>
            <ReturnType>StorageFile</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>storageFactory</ParamName>
                    <ParamType>StorageFactory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>schema</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>table</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>textcol</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StorageFile [luceneDir=createPathLeg(storageFactory,null,Database.LUCENE_DIR)]</InnerVar>
                <InnerVar>StorageFile [schemaDir=createPathLeg(storageFactory,luceneDir,schema)]</InnerVar>
                <InnerVar>StorageFile [tableDir=createPathLeg(storageFactory,schemaDir,table)]</InnerVar>
                <InnerVar>StorageFile [indexDir=createPathLeg(storageFactory,tableDir,textcol)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createPathLeg</MethodName>
            <MethodComment>/** 
 * Create the path if necessary.
 */
</MethodComment>
            <ReturnType>StorageFile</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>storageFactory</ParamName>
                    <ParamType>StorageFactory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parentDir</ParamName>
                    <ParamType>StorageFile</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fileName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>StorageFile</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [normalizedName=ToolUtilities.derbyIdentifier(fileName)]</InnerVar>
                <InnerVar>StorageFile [file=parentDir == null ? storageFactory.newStorageFile(normalizedName) : storageFactory.newStorageFile(parentDir,normalizedName)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>