<Class>
    <Id>1825</Id>
    <Package>org.osgi.framework</Package>
    <ClassName>ServicePermissionCollection</ClassName>
    <SuperClass>PermissionCollection</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ServicePermissionCollection  /** 
 * Stores a set of ServicePermission permissions.
 * @see java.security.Permission
 * @see java.security.Permissions
 * @see java.security.PermissionCollection
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>serialVersionUID</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>GET</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>REGISTER</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>ACTION_GET</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>ACTION_REGISTER</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>ACTION_ALL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>ACTION_NONE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>action_mask</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>actions</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>serialVersionUID</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>permissions</FieldName>
            <FieldType>Hashtable</FieldType>
        </Field>
        <Field>
            <FieldName>permissions</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>all_allowed</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ServicePermission</MethodName>
            <MethodComment>/** 
 * Create a new ServicePermission. &lt;p&gt; The name of the service is specified as a fully qualified class name. &lt;pre&gt; ClassName ::= &amp;lt;class name&amp;gt; | &amp;lt;class name ending in &amp;quot;.*&amp;quot;&amp;gt; &lt;/pre&gt; Examples: &lt;pre&gt; org.osgi.service.http.HttpService org.osgi.service.http. org.osgi.service.snmp. &lt;/pre&gt; &lt;p&gt; There are two possible actions: &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;register&lt;/code&gt;. The &lt;code&gt;get&lt;/code&gt; permission allows the owner of this permission to obtain a service with this name. The &lt;code&gt;register&lt;/code&gt; permission allows the bundle to register a service under that name.
 * @param name class name
 * @param actions &lt;code&gt;get&lt;/code&gt;,&lt;code&gt;register&lt;/code&gt; (canonicalorder)
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>actions</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ServicePermission</MethodName>
            <MethodComment>/** 
 * Package private constructor used by ServicePermissionCollection.
 * @param name class name
 * @param mask action mask
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mask</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;init;[mask]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>init</MethodName>
            <MethodComment>/** 
 * Called by constructors and when deserialized.
 * @param mask action mask
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mask</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMask</MethodName>
            <MethodComment>/** 
 * Parse action string into action mask.
 * @param actions Action string.
 * @return action mask.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>actions</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [seencomma=false]</InnerVar>
                <InnerVar>int [mask=ACTION_NONE]</InnerVar>
                <InnerVar>char[] [a=actions.toCharArray()]</InnerVar>
                <InnerVar>int [i=a.length - 1]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>implies</MethodName>
            <MethodComment>/** 
 * Determines if a &lt;code&gt;ServicePermission&lt;/code&gt; object "implies" the specified permission.
 * @param p The target permission to check.
 * @return &lt;code&gt;true&lt;/code&gt; if the specified permission is implied bythis object; &lt;code&gt;false&lt;/code&gt; otherwise.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>p</ParamName>
                    <ParamType>Permission</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getActions</MethodName>
            <MethodComment>/** 
 * Returns the canonical string representation of the actions. Always returns present actions in the following order: &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;register&lt;/code&gt;.
 * @return The canonical string representation of the actions.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newPermissionCollection</MethodName>
            <MethodComment>/** 
 * Returns a new &lt;code&gt;PermissionCollection&lt;/code&gt; object for storing &lt;code&gt;ServicePermission&lt;code&gt; objects.
 * @return A new &lt;code&gt;PermissionCollection&lt;/code&gt; object suitable for storing&lt;code&gt;ServicePermission&lt;/code&gt; objects.
 */
</MethodComment>
            <ReturnType>PermissionCollection</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>equals</MethodName>
            <MethodComment>/** 
 * Determines the equalty of two ServicePermission objects. Checks that specified object has the same class name and action as this &lt;code&gt;ServicePermission&lt;/code&gt;.
 * @param obj The object to test for equality.
 * @return true if obj is a &lt;code&gt;ServicePermission&lt;/code&gt;, and has thesame class name and actions as this &lt;code&gt;ServicePermission&lt;/code&gt; object; &lt;code&gt;false&lt;/code&gt; otherwise.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>obj</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ServicePermission [p=(ServicePermission)obj]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hashCode</MethodName>
            <MethodComment>/** 
 * Returns the hash code value for this object.
 * @return Hash code value for this object.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMask</MethodName>
            <MethodComment>/** 
 * Returns the current action mask. Used by the ServicePermissionCollection object.
 * @return The actions mask.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeObject</MethodName>
            <MethodComment>/** 
 * WriteObject is called to save the state of this permission to a stream. The actions are serialized, and the superclass takes care of the name.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>java.io.ObjectOutputStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>s;defaultWriteObject;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readObject</MethodName>
            <MethodComment>/** 
 * readObject is called to restore the state of this permission from a stream.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>java.io.ObjectInputStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>s;defaultReadObject;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;init;[getMask(actions)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>ClassNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ServicePermissionCollection</MethodName>
            <MethodComment>/** 
 * Creates an empty ServicePermissions object.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>add</MethodName>
            <MethodComment>/** 
 * Adds a permission to the &lt;code&gt;ServicePermission&lt;/code&gt; objects using the key for the hash as the name.
 * @param permission The Permission object to add.
 * @throws IllegalArgumentException If the permission is not aServicePermission object.
 * @throws SecurityException If this&lt;code&gt;ServicePermissionCollection&lt;/code&gt; object has been marked read-only.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>permission</ParamName>
                    <ParamType>Permission</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ServicePermission [sp=(ServicePermission)permission]</InnerVar>
                <InnerVar>String [name=sp.getName()]</InnerVar>
                <InnerVar>ServicePermission [existing=(ServicePermission)permissions.get(name)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>implies</MethodName>
            <MethodComment>/** 
 * Determines if a set of permissions implies the permissions expressed in &lt;code&gt;permission&lt;/code&gt;.
 * @param permission The Permission object to compare.
 * @return &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;permission&lt;/code&gt; is a propersubset of a permission in the set; &lt;code&gt;false&lt;/code&gt; otherwise.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>permission</ParamName>
                    <ParamType>Permission</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ServicePermission [sp=(ServicePermission)permission]</InnerVar>
                <InnerVar>ServicePermission [x]</InnerVar>
                <InnerVar>int [desired=sp.getMask()]</InnerVar>
                <InnerVar>int [effective=0]</InnerVar>
                <InnerVar>String [name=sp.getName()]</InnerVar>
                <InnerVar>int [last, offset]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>elements</MethodName>
            <MethodComment>/** 
 * Returns an enumeration of all the &lt;code&gt;ServicePermission&lt;/code&gt; objects in the container.
 * @return Enumeration of all the ServicePermission objects.
 */
</MethodComment>
            <ReturnType>Permission</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>