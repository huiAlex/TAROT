<Class>
    <Id>838</Id>
    <Package>org.apache.derby.iapi.store.raw</Package>
    <ClassName>LockingPolicy</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>LockingPolicy  /** 
 * Any object that implements this interface can be used as a locking policy for accessing a container.  &lt;P&gt; The locking policy must use the defined lock qualifiers  (ContainerLock.CIS, RowLock.RS, etc.) and the standard lock manager. (A locking policy that just performs no locking wouldn't need to use  these :-) &lt;P&gt; A locking policy must use the object that is an instance of Transaction (originally obtained via startTransaction() in RawStoreFactory) as the  compatibilitySpace for the LockFactory calls. &lt;BR&gt; A locking policy must use the passed in transaction as the  compatability space and the lock group. This chain (group) of locks has the following defined behaviour &lt;UL&gt; &lt;LI&gt;Locks are released at transaction.commit() &lt;LI&gt;Locks are released at transaction.abort() &lt;/UL&gt; &lt;BR&gt; MT - Thread Safe
 * @see ContainerHandle
 * @see RecordHandle
 * @see org.apache.derby.iapi.services.locks.LockFactory
 * @see org.apache.derby.iapi.services.locks.Lockable
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>MODE_NONE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>MODE_RECORD</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>MODE_CONTAINER</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>lockContainer</MethodName>
            <MethodComment>/** 
 * Called when a container is opened.
 * @param t            Transaction to associate lock with.
 * @param container    Container to lock.
 * @param waitForLock  Should lock request wait until granted?
 * @param forUpdate    Should container be locked for update, or read?
 * @return true if the lock was obtained, false if it wasn't. False should only be returned if the waitForLock policy was set to "false," and the lock was unavailable.
 * @exception StandardException	Standard Derby error policy
 * @see ContainerHandle
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Transaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>container</ParamName>
                    <ParamType>ContainerHandle</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>waitForLock</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>forUpdate</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>unlockContainer</MethodName>
            <MethodComment>/** 
 * Called when a container is closed.
 * @see ContainerHandle
 * @see ContainerHandle#close
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Transaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>container</ParamName>
                    <ParamType>ContainerHandle</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>lockRecordForRead</MethodName>
            <MethodComment>/** 
 * Called before a record is fetched.
 * @param t            Transaction to associate lock with.
 * @param container    Open Container used to get record.  Will be usedto row locks by the container they belong to.
 * @param record       Record to lock.
 * @param waitForLock  Should lock request wait until granted?
 * @param forUpdate    Should container be locked for update, or read?
 * @exception StandardException	Standard Derby error policy
 * @see Page
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Transaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>container</ParamName>
                    <ParamType>ContainerHandle</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>record</ParamName>
                    <ParamType>RecordHandle</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>waitForLock</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>forUpdate</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>zeroDurationLockRecordForWrite</MethodName>
            <MethodComment>/** 
 * Request a write lock which will be released immediately upon grant.
 * @param t                        Transaction to associate lock with.
 * @param record                   Record to lock.
 * @param lockForPreviousKey       Lock is for a previous key of a insert.
 * @param waitForLock              Should lock request wait until granted?
 * @return true if the lock was obtained, false if it wasn't. False should only be returned if the waitForLock argument was set to "false," and the lock was unavailable.
 * @exception StandardException	Standard Derby error policy
 * @see Page
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Transaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>record</ParamName>
                    <ParamType>RecordHandle</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lockForPreviousKey</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>waitForLock</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>lockRecordForWrite</MethodName>
            <MethodComment>/** 
 * Called before a record is inserted, updated or deleted. If zeroDuration is true then lock is released immediately after it has been granted.
 * @param t             Transaction to associate lock with.
 * @param record        Record to lock.
 * @param lockForInsert Lock is for an insert.
 * @param waitForLock   Should lock request wait until granted?
 * @return true if the lock was obtained, false if it wasn't. False should only be returned if the waitForLock argument was set to "false," and the lock was unavailable.
 * @exception StandardException	Standard Derby error policy
 * @see Page
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Transaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>record</ParamName>
                    <ParamType>RecordHandle</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lockForInsert</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>waitForLock</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>unlockRecordAfterRead</MethodName>
            <MethodComment>/** 
 * Called after a record has been fetched.
 * @exception StandardException	Standard Derby error policy
 * @see Page
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Transaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>container</ParamName>
                    <ParamType>ContainerHandle</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>record</ParamName>
                    <ParamType>RecordHandle</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>forUpdate</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>row_qualified</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMode</MethodName>
            <MethodComment>/** 
 * Get the mode of this policy
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>