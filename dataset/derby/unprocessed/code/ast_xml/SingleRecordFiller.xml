<Class>
    <Id>1272</Id>
    <Package>org.apache.derbyTesting.perf.clients</Package>
    <ClassName>SingleRecordFiller</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>DBFiller</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>SingleRecordFiller  /** 
 * Class which generates and populates tables that can be used by {@code SingleRecordSelectClient} and {@code SingleRecordUpdateClient}. This tables contain rows with an int column (id) and a varchar(100) column (text). The id column is declared as primary key.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>numberOfTables</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>tableSize</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>dataType</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>dataTypeString</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>withSecIndexColumn</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>withNonIndexedColumn</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>TEXT_SIZE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>RANDOM_STRINGS</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>RANDOM_BYTES</FieldName>
            <FieldType>byte[][]</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>SingleRecordFiller</MethodName>
            <MethodComment>/** 
 * Generate a filler that creates the specified number of tables, each of which contains the specified number of records. When this constructor is used, the table only contains two columns: a primary key column (INT) and a text column (VARCHAR(100)).
 * @param records the number of records in each table
 * @param tables the number of tables to create
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>records</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tables</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>SingleRecordFiller</MethodName>
            <MethodComment>/** 
 * Generate a filler that creates the specified number of tables, each of which contains the specified number of records.
 * @param records the number of records in each table
 * @param tables the number of tables to create
 * @param type which SQL type to store the text as (one of{@code java.sql.Types.VARCHAR},  {@code java.sql.Types.BLOB} and{@code java.sql.Types.CLOB}.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>records</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tables</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>withSecIndex</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>withNonIndexed</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fill</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Statement [s=c.createStatement()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>c;setAutoCommit;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>s;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>randomString</MethodName>
            <MethodComment>/** 
 * Pick a random string.
 * @param seed a seed used to decide which random string to pick
 * @return a (somewhat) random string
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>seed</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>randomBytes</MethodName>
            <MethodComment>/** 
 * Pick a random byte string.
 * @param seed a seed used to decide which random string to pick
 * @return a (somewhat) random sequence of bytes
 */
</MethodComment>
            <ReturnType>byte[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>seed</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTableName</MethodName>
            <MethodComment>/** 
 * Get the name of a table generated by this class.
 * @param records the number of records in the table
 * @param table the number of the table, between 0 (inclusive) and thetotal number of tables (exclusive)
 * @param dataType the {@code java.sql.Types} constant specifying thedata type of the text column
 * @return the name of the table specified by the arguments
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>records</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>table</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dataType</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>withSecIndex</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>withNonIndexed</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [name="SINGLE_RECORD_" + records + "_"+ table]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>