<Class>
    <Id>1212</Id>
    <Package>org.apache.derbyBuild</Package>
    <ClassName>MessageVetter</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>MessageVetter  /** 
 * Class that checks the message files for common problems.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>LONE_QUOTE_PATTERN</FieldName>
            <FieldType>Pattern</FieldType>
        </Field>
        <Field>
            <FieldName>LONE_QUOTE_ALLOWED_PATTERN</FieldName>
            <FieldType>Pattern</FieldType>
        </Field>
        <Field>
            <FieldName>LONE_QUOTE_ALLOWED</FieldName>
            <FieldType>Set</FieldType>
        </Field>
        <Field>
            <FieldName>LONE_QUOTE_ALLOWED</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>file</FieldName>
            <FieldType>File</FieldType>
        </Field>
        <Field>
            <FieldName>properties</FieldName>
            <FieldType>Properties</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>main</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Check all the message translations in the specified directories for common problems. Assume that all properties files in the directories are message translations. &lt;/p&gt; &lt;p&gt; If a problem is found, an error will be raised. &lt;/p&gt;
 * @param args names of the directories to check
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>FileFilter [filter=new FileFilter(){
  public boolean accept(  File pathname){
    return pathname.getName().endsWith(".properties");
  }
}
]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>accept</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pathname</ParamName>
                    <ParamType>File</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>MessageVetter</MethodName>
            <MethodComment>/** 
 * Create a new  {@code MessageVetter} instance.
 * @param file the file with the messages to check
 * @throws IOException if the file cannot be loaded
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>file</ParamName>
                    <ParamType>File</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>FileInputStream [in=new FileInputStream(file)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>vet</MethodName>
            <MethodComment>/** 
 * Vet the messages in this file. An error will be raised if an ill-formatted message is found.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Enumeration [e=properties.propertyNames()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>vetMessage</MethodName>
            <MethodComment>/** 
 * Vet a specific message. Raise an error if it is not well-formed.
 * @param key the message identifier
 * @param message the message format specifier
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>message</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkSingleQuotes;[key, message]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkValidMessageFormat;[key, message]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkSingleQuotes</MethodName>
            <MethodComment>/** 
 * Check that single-quote characters are doubled, as required by {@code java.text.MessageFormat}. Raise an error otherwise.
 * @param key the message identifier
 * @param message the message format specifier
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>message</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Pattern [p]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkValidMessageFormat</MethodName>
            <MethodComment>/** 
 * Check that a message format specifier is valid. Raise an error if it is not.
 * @param key the message identifier
 * @param message the message format specifier
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>message</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>