<Class>
    <Id>393</Id>
    <Package>org.apache.derby.impl.tools.dblook</Package>
    <ClassName>DB_Sequence</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>DB_Sequence  /** 
 * Dblook implementation for SEQUENCEs.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>doSequences</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Generate the DDL for all sequences and output it via Logs.java. &lt;/p&gt;
 * @param conn Connection to the source database.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conn</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PreparedStatement [ps=conn.prepareStatement("SELECT SCHEMAID, SEQUENCENAME, SEQUENCEDATATYPE, STARTVALUE, MINIMUMVALUE, MAXIMUMVALUE, INCREMENT, CYCLEOPTION\n" + "FROM SYS.SYSSEQUENCES\n" + "WHERE CAST( SCHEMAID AS CHAR( 36) ) != '8000000d-00d0-fd77-3ed8-000a0a0b1900'")]</InnerVar>
                <InnerVar>ResultSet [rs=ps.executeQuery()]</InnerVar>
                <InnerVar>boolean [firstTime=true]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rs;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>ps;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>stripNotNull</MethodName>
            <MethodComment>/** 
 * Strip the trailing NOT NULL off of the string representation of a datatype 
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>datatypeName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [idx=datatypeName.indexOf("NOT")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createSequenceString</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Generate DDL for a specific sequence. &lt;/p&gt;
 * @param fullName Fully qualified name of the sequence
 * @param dataTypeName Name of the datatype of the sequence
 * @param startValue First value to use in the range of the sequence
 * @param minimumValue Smallest value in the range
 * @param maximumValue Largest value in the range
 * @param increment Step size of the sequence
 * @param cycleOption CYCLE or NO CYCLE
 * @return DDL for the current stored sequence
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fullName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dataTypeName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>startValue</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>minimumValue</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>maximumValue</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>increment</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cycleOption</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuffer [buffer=new StringBuffer()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>buffer;append;["CREATE SEQUENCE " + fullName + '\n']</InnerMethodInvoke>
                <InnerMethodInvoke>buffer;append;["    AS " + dataTypeName + '\n']</InnerMethodInvoke>
                <InnerMethodInvoke>buffer;append;["    START WITH " + Long.toString(startValue) + '\n']</InnerMethodInvoke>
                <InnerMethodInvoke>buffer;append;["    INCREMENT BY " + Long.toString(increment) + '\n']</InnerMethodInvoke>
                <InnerMethodInvoke>buffer;append;["    MAXVALUE " + Long.toString(maximumValue) + '\n']</InnerMethodInvoke>
                <InnerMethodInvoke>buffer;append;["    MINVALUE " + Long.toString(minimumValue) + '\n']</InnerMethodInvoke>
                <InnerMethodInvoke>buffer;append;["    " + cycleOption + '\n']</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>