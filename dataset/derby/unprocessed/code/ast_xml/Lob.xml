<Class>
    <Id>111</Id>
    <Package>org.apache.derby.client.am</Package>
    <ClassName>Lob</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>UnitOfWorkListener</SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>STRING</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>ASCII_STREAM</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>UNICODE_STREAM</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>CHARACTER_STREAM</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>BINARY_STREAM</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>BINARY_STRING</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>LOCATOR</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>INVALID_LOCATOR</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>agent_</FieldName>
            <FieldType>Agent</FieldType>
        </Field>
        <Field>
            <FieldName>dataType_</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>locator_</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>sqlLength_</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>lengthObtained_</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>isValid_</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>willBeLayerBStreamed_</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>updateCount</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>transactionID_</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>LOB_OBJECT_LENGTH_UNKNOWN_YET</FieldName>
            <FieldType>ClientMessageId</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>Lob</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>agent</ParamName>
                    <ParamType>Agent</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>willBeLayerBStreamed</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sqlLength</MethodName>
            <MethodComment>/** 
 * Return the length of the Lob value represented by this Lob object.  If length is not already known, and Lob is locator based, length will be retrieved from the server.  If not, locator based, Lob will first be materialized.  NOTE: The caller needs to deal with synchronization.
 * @throws SqlException on execution errors while materializing the stream, or if Layer B streaming is used and length not yet obtained.
 * @return length of Lob value
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setSqlLength</MethodName>
            <MethodComment>/** 
 * Update the registered length of the Lob value.  To be called by methods that make changes to the length of the Lob. NOTE: The caller needs to deal with synchronization.
 * @param length the new length of the Lob value
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>length</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLocatorLength</MethodName>
            <MethodComment>/** 
 * Get the length of locator based Lob from the server.  This is a dummy implementation that is supposed to be overridden by subclasses.  A stored procedure call will be made to get the length from the server.
 * @return length of Lob
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>listenToUnitOfWork</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>agent_.connection_.CommitAndRollbackListeners_;put;[this, null]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>completeLocalCommit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>listenerIterator</ParamName>
                    <ParamType>Iterator</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>listenerIterator;remove;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>completeLocalRollback</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>listenerIterator</ParamName>
                    <ParamType>Iterator</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>listenerIterator;remove;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAgent</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Agent</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkForClosedConnection</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>materializeStream</MethodName>
            <MethodComment>/** 
 * Method to be implemented by subclasses, so that #materializedStream(InputStream, String) can be called with subclass specific parameters and the result assigned to the right stream.
 * @throws SqlException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>materializeStream</MethodName>
            <MethodComment>/** 
 * Materialize the given stream into memory and update the internal length variable.
 * @param is stream to use for input
 * @param typeDesc description of the data type we are inserting,for instance &lt;code&gt;java.sql.Clob&lt;/code&gt;
 * @return a stream whose source is the materialized data
 * @throws SqlException if the stream exceeds 2 GB, or an error happenswhile reading from the stream
 */
</MethodComment>
            <ReturnType>InputStream</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>is</ParamName>
                    <ParamType>InputStream</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>typeDesc</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [GROWBY=32 * 1024]</InnerVar>
                <InnerVar>ArrayList&lt;byte[]&gt; [byteArrays=new ArrayList&lt;byte[]&gt;()]</InnerVar>
                <InnerVar>byte[] [curBytes=new byte[GROWBY]]</InnerVar>
                <InnerVar>int [totalLength=0]</InnerVar>
                <InnerVar>int [partLength=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>length</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isLayerBStreamingPossible</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>agent</ParamName>
                    <ParamType>Agent</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>NetConnection [netConn=(NetConnection)agent.connection_]</InnerVar>
                <InnerVar>int [securityMechanism=netConn.getSecurityMechanism()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>willBeLayerBStreamed</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isLocator</MethodName>
            <MethodComment>/** 
 * Check whether this Lob is based on a locator
 * @return true if Lob is based on locator, false otherwise
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLocator</MethodName>
            <MethodComment>/** 
 * Get locator for this Lob
 * @return locator for this Lob, INVALID_LOCATOR if Lob is notbased on locator
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkPosAndLength</MethodName>
            <MethodComment>/** 
 * Checks the &lt;code&gt;pos&lt;/code&gt; and &lt;code&gt;length&lt;/code&gt;.
 * @param pos a long that contains the position that needs to be checked
 * @param length a long that contains the length that needs to be checked
 * @throws SQLException ifa) pos &amp;lt;= 0 b) pos &amp;gt; (length of LOB) c) length &amp;lt; 0 d) (pos -1) + length &amp;gt; (length of LOB)
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pos</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>length</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>incrementUpdateCount</MethodName>
            <MethodComment>/** 
 * Increments and returns the new updateCount  of this &lt;code&gt;Lob&lt;/code&gt;. The method needs to be  synchronized since multiple updates can  happen on this &lt;code&gt;Lob&lt;/code&gt; simultaneously.  It will be called from the 1) Locator Writers 2) Locator OutputStreams 3) From the update methods within the Lobs like setString, truncate. since all of the above acesses are inside the am package, this method will have default access. We do not need to worry about the non-locator streams since non-locator InputStreams would not depend on updateCount for invalidation
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getUpdateCount</MethodName>
            <MethodComment>/** 
 * Returns the current updateCount of the Clob.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkForLocatorValidity</MethodName>
            <MethodComment>/** 
 * Calls SqlLength() to check if the Locator associated with the underlying Lob is valid. If it is not it throws an exception.
 * @throws SqlException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;sqlLength;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkValidity</MethodName>
            <MethodComment>/** 
 * Checks if isValid is true and whether the transaction that created the Lob is still active. If any of which is not true throws a SQLException stating that a method has been called on an invalid LOB object.
 * @throws SQLException if isValid is not true or the transaction thatcreated the Lob is not active
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>