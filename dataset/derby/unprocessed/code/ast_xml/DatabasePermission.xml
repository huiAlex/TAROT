<Class>
    <Id>76</Id>
    <Package>org.apache.derby.security</Package>
    <ClassName>DatabasePermission</ClassName>
    <SuperClass>Permission</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>DatabasePermission  /** 
 * This class represents access to database-scoped privileges. An example of database-scoped privileges is the permission to create a database under a specified directory path. &lt;p&gt; A DatabasePermission is defined by two string attributes, similar to a java.io.FilePermission: &lt;ul&gt; &lt;li&gt; &lt;i&gt;URL&lt;/i&gt; - a location description of or for a Derby database &lt;li&gt; &lt;i&gt;Actions&lt;/i&gt; - a list of granted administrative actions &lt;/ul&gt; The database location URL may contain certain wildcard characters. The currently only supported database action is &lt;i&gt;create&lt;/i&gt;.
 * @see DatabasePermission#DatabasePermission(String,String)
 * @see SystemPermission
 * @see java.io.FilePermission
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>URL_PROTOCOL_DIRECTORY</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>URL_PATH_INCLUSIVE_STRING</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>URL_PATH_INCLUSIVE_CHAR</FieldName>
            <FieldType>char</FieldType>
        </Field>
        <Field>
            <FieldName>URL_PATH_SEPARATOR_CHAR</FieldName>
            <FieldType>char</FieldType>
        </Field>
        <Field>
            <FieldName>URL_PATH_RELATIVE_CHAR</FieldName>
            <FieldType>char</FieldType>
        </Field>
        <Field>
            <FieldName>URL_PATH_WILDCARD_CHAR</FieldName>
            <FieldType>char</FieldType>
        </Field>
        <Field>
            <FieldName>URL_PATH_RECURSIVE_CHAR</FieldName>
            <FieldType>char</FieldType>
        </Field>
        <Field>
            <FieldName>URL_PATH_SEPARATOR_STRING</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>URL_PATH_RELATIVE_STRING</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>URL_PATH_RELATIVE_PREFIX</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>URL_PATH_WILDCARD_STRING</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>URL_PATH_WILDCARD_SUFFIX</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>URL_PATH_RECURSIVE_STRING</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>URL_PATH_RECURSIVE_SUFFIX</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>CREATE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>LEGAL_ACTIONS</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>LEGAL_ACTIONS</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>actions</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>path</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>parentPath</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>pathType</FieldName>
            <FieldType>char</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>DatabasePermission</MethodName>
            <MethodComment>/** 
 * Creates a new DatabasePermission with the specified URL and actions. &lt;P&gt; &lt;i&gt;actions&lt;/i&gt; contains a comma-separated list of the desired actions granted on a database. Currently, the only supported action is &lt;code&gt;create&lt;/code&gt;. &lt;P&gt; &lt;i&gt;URL&lt;/i&gt; denotes a database location URL, which, at this time, must start with &lt;code&gt;directory:&lt;/code&gt; followed by a directory pathname. Note that in a URL, the separator character is always "/" rather than the file separator of the operating-system.  The directory path may be absolute or relative, in which case it is prefixed with the current user directory. In addition, similar to java.io.FilePermission, the directory pathname may end with a wildcard character to allow for arbitrarily named databases under a path: &lt;ul&gt; &lt;li&gt; "directory:location" - refers to a database called &lt;i&gt;location&lt;/i&gt;, &lt;li&gt; "directory:location/*" - matches any database in the directory &lt;i&gt;location&lt;/i&gt;, &lt;li&gt; "directory:location/-" - matches any database under &lt;i&gt;location&lt;/i&gt; or its subdirectories. &lt;li&gt; "directory:*" - matches any database in the user's current working directory. &lt;li&gt; "directory:-" - matches any database under the user's current working directory or its subdirectories. &lt;li&gt;  {@code "directory:&lt;&lt;ALL FILES&gt;&gt;"} matches any database anywhere.&lt;/ul&gt;
 * @param url the database URL
 * @param actions the action string
 * @throws NullPointerException if an argument is null
 * @throws IllegalArgumentException if an argument is not legal
 * @throws IOException if the location URL cannot be canonicalized
 * @see Permission#Permission(String)
 * @see java.io.FilePermission#FilePermission(String,String)
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>url</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>actions</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;initActions;[actions]</InnerMethodInvoke>
                <InnerMethodInvoke>null;initLocation;[url]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initActions</MethodName>
            <MethodComment>/** 
 * Parses the list of database actions.
 * @param actions the comma-separated action list
 * @throws NullPointerException if actions is null
 * @throws IllegalArgumentException if not a list of legal actions
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>actions</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Set&lt;String&gt; [actionSet=SystemPermission.parseActions(actions)]</InnerVar>
                <InnerVar>List&lt;String&gt; [legalActions=new ArrayList&lt;String&gt;(LEGAL_ACTIONS)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>legalActions;retainAll;[actionSet]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initLocation</MethodName>
            <MethodComment>/** 
 * Parses the database location URL.
 * @param url the database URL
 * @throws NullPointerException if the URL is null
 * @throws IllegalArgumentException if the URL is not well-formed
 * @throws IOException if the location URL cannot be canonicalized
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>url</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [p=url.substring(URL_PROTOCOL_DIRECTORY.length())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>File</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>implies</MethodName>
            <MethodComment>/** 
 * Checks if this DatabasePermission implies a specified permission. &lt;P&gt; This method returns true if:&lt;p&gt; &lt;ul&gt; &lt;li&gt; &lt;i&gt;p&lt;/i&gt; is an instanceof DatabasePermission and&lt;p&gt; &lt;li&gt; &lt;i&gt;p&lt;/i&gt;'s directory pathname is implied by this object's pathname. For example, "/tmp/*" implies "/tmp/foo", since "/tmp/*" encompasses the "/tmp" directory and all files in that directory, including the one named "foo". &lt;/ul&gt;
 * @param p the permission to check against
 * @return true if the specified permission is implied by this object,false if not
 * @see Permission#implies(Permission)
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>p</ParamName>
                    <ParamType>Permission</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DatabasePermission [that=(DatabasePermission)p]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>equals</MethodName>
            <MethodComment>/** 
 * Checks two DatabasePermission objects for equality. &lt;P&gt; Checks that &lt;i&gt;obj&lt;/i&gt; is a DatabasePermission and has the same canonizalized URL and actions as this object. &lt;P&gt;
 * @param obj the object we are testing for equality with this object
 * @return true if obj is a DatabasePermission, and has the same URL andactions as this DatabasePermission object, false if not
 * @see Permission#equals(Object)
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>obj</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DatabasePermission [that=(DatabasePermission)obj]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hashCode</MethodName>
            <MethodComment>/** 
 * Returns the hash code value for this object.
 * @return a hash code value for this object
 * @see Permission#hashCode()
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getActions</MethodName>
            <MethodComment>/** 
 * Returns the "canonical string representation" of the actions.
 * @return the canonical string representation of the actions
 * @see Permission#getActions()
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeObject</MethodName>
            <MethodComment>/** 
 * Called upon Serialization for saving the state of this DatabasePermission to a stream.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>ObjectOutputStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>s;defaultWriteObject;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readObject</MethodName>
            <MethodComment>/** 
 * Called upon Deserialization for restoring the state of this DatabasePermission from a stream.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>ObjectInputStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>s;defaultReadObject;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;initLocation;[getName()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;initActions;[getActions()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>ClassNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>