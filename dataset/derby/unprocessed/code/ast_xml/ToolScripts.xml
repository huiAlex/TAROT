<Class>
    <Id>1003</Id>
    <Package>org.apache.derbyTesting.functionTests.tests.tools</Package>
    <ClassName>ToolScripts</ClassName>
    <SuperClass>ScriptTestCase</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ToolScripts  /** 
 * ToolScripts runs ij tool scripts (.sql files) in the tool package and compares the output to a canon file in the standard master package. &lt;BR&gt; Its suite() method returns a set of tests where each test is an instance of this class for an individual script wrapped in a clean database decorator. &lt;BR&gt; It can also be used as a command line program to run one or more tool based ij scripts as tests.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>CLIENT_AND_EMBEDDED_TESTS</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>EMBEDDED_TESTS</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>CLIENT_TESTS</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>JDBC3_TESTS</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>SQLAUTHORIZATION_TESTS</FieldName>
            <FieldType>String[][][]</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>main</MethodName>
            <MethodComment>/** 
 * Run a set of tool scripts (.sql files) passed in on the command line. Note the .sql suffix must not be provided as part of the script name. &lt;code&gt; example java org.apache.derbyTesting.functionTests.tests.tool.ToolScripts case union &lt;/code&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>junit.textui.TestRunner;run;[getSuite(args)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>suite</MethodName>
            <MethodComment>/** 
 * Return the suite that runs all the tool scripts.
 */
</MethodComment>
            <ReturnType>Test</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>BaseTestSuite [suite=new BaseTestSuite("ToolScripts")]</InnerVar>
                <InnerVar>BaseTestSuite [clientTests=new BaseTestSuite("ToolScripts:client")]</InnerVar>
                <InnerVar>Test [client=TestConfiguration.clientServerDecorator(clientTests)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>suite;addTest;[getSuite(CLIENT_AND_EMBEDDED_TESTS)]</InnerMethodInvoke>
                <InnerMethodInvoke>suite;addTest;[getSuite(EMBEDDED_TESTS)]</InnerMethodInvoke>
                <InnerMethodInvoke>suite;addTest;[getAuthorizationSuite(SQLAUTHORIZATION_TESTS)]</InnerMethodInvoke>
                <InnerMethodInvoke>clientTests;addTest;[getSuite(CLIENT_AND_EMBEDDED_TESTS)]</InnerMethodInvoke>
                <InnerMethodInvoke>clientTests;addTest;[getAuthorizationSuite(SQLAUTHORIZATION_TESTS)]</InnerMethodInvoke>
                <InnerMethodInvoke>clientTests;addTest;[getSuite(CLIENT_TESTS)]</InnerMethodInvoke>
                <InnerMethodInvoke>suite;addTest;[client]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ToolScripts</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>toolTest</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ToolScripts</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>toolTest</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>user</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSuite</MethodName>
            <MethodComment>/** 
 * Return a suite of tool tests from the list of script names. Each test is surrounded in a decorator that cleans the database.
 */
</MethodComment>
            <ReturnType>Test</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>list</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BaseTestSuite [suite=new BaseTestSuite("Tool scripts")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAuthorizationSuite</MethodName>
            <MethodComment>/** 
 * Return a suite of tool tests from the list of script names. Each test is surrounded in a decorator that cleans the database, and adds authentication and authorization for each script.
 * @param list &lt;ul&gt;&lt;li&gt;list[i][0][0]: script name,&lt;li&gt;list[i][1]: users, &lt;li&gt;list[i][2][0]: run-as-user &lt;/ul&gt;
 */
</MethodComment>
            <ReturnType>Test</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>list</ParamName>
                    <ParamType>String[][][]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BaseTestSuite [suite=new BaseTestSuite("Tool scripts w/authorization")]</InnerVar>
                <InnerVar>String [PWSUFFIX="pwSuffix"]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>decorateSQL</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>Statement</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>s;execute;["create role a"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["create role b"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["create role \"\"\"eve\"\"\""]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["create role publicrole"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["grant a to b"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["grant publicrole to public"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["grant b to donald"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>