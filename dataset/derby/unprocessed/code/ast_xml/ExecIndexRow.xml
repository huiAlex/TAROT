<Class>
    <Id>1879</Id>
    <Package>org.apache.derby.iapi.sql.execute</Package>
    <ClassName>ExecIndexRow</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>ExecRow</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ExecIndexRow  /** 
 * This is an extension of ExecRow for use with indexes and sorting.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>orderedNulls</MethodName>
            <MethodComment>/** 
 * These two methods are a sort of a hack.  The store implements ordered null semantics for start and stop positioning, which is correct for IS NULL and incorrect for everything else.  To work around this, TableScanResultSet will check whether the start and stop positions have NULL in any column position other than for an IS NULL check. If so, it won't do the scan (that is, it will return no rows). This method is to inform this ExecIndexRow (which can be used for start and stop positioning) that the given column uses ordered null semantics.
 * @param columnPosition	The position of the column that uses orderednull semantics (zero-based).
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>columnPosition</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>areNullsOrdered</MethodName>
            <MethodComment>/** 
 * Return true if orderedNulls was called on this ExecIndexRow for the given column position.
 * @param columnPosition	The position of the column (zero-based) forwhich we want to check if ordered null semantics are used.
 * @return	true if we are to use ordered null semantics on the given column
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>columnPosition</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>execRowToExecIndexRow</MethodName>
            <MethodComment>/** 
 * Turn the ExecRow into an ExecIndexRow.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>valueRow</ParamName>
                    <ParamType>ExecRow</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>