<Class>
    <Id>1451</Id>
    <Package>org.apache.derby.iapi.services.cache</Package>
    <ClassName>CacheManager</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>find</MethodName>
            <MethodComment>/** 
 * Find an object in the cache. &lt;p&gt; Find an object in the cache that matches the key provided using the equals() method, i.e. the return Cacheable will have getIdentifier.equals(key) true. If the object does not exist in the cache it will be added by one of: &lt;UL&gt; &lt;LI&gt;creating a new holder object and calling its initParameter() method and then its setIdentity() method with key as the parameter. &lt;LI&gt;Calling clearIdentity() on an holder object in the clean state and then calling its setIdentity() method with key as the parameter. &lt;LI&gt;Calling clean() on a dirty holder object and then calling clearIdentity() on an holder object in the clean state and then calling its setIdentity() method with key as the parameter. &lt;/UL&gt; In all cases the setIdentity() method is called with forCreate set to false.  &lt;BR&gt; The returned object is kept, i.e. its identity will not change, until the release() method is called. The release() method must be called after the caller is finished with the object and throw away the reference to it, e.g. &lt;PRE&gt; Page p = (Page) pageCache.find(pageKey); // do stuff with p // release p pageCache.release(p); p = null; &lt;/PRE&gt;
 * @return A reference to an object in the cache, or null if the object cannot be found.
 * @exception StandardException Standard Derby error policy.
 * @see Cacheable#setIdentity
 */
</MethodComment>
            <ReturnType>Cacheable</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findCached</MethodName>
            <MethodComment>/** 
 * Find an object in the cache. &lt;p&gt; Find an object in the cache that matches the key provided using the equals() method, i.e. the return Cacheable will have getIdentifier.equals(key) true. If a matching object does not exist in the cache, null is returned. &lt;BR&gt; The returned object is kept, i.e. its identity will not change, until the release() method is called. The release() method must be called after the caller is finished with the object and throw away the reference to it, e.g. &lt;PRE&gt; Page p = (Page) pageCache.findCached(pageKey); if (p != null) { // do stuff with p // release p pageCache.release(p); p = null; } &lt;/PRE&gt;
 * @exception StandardException Standard Derby error policy.
 */
</MethodComment>
            <ReturnType>Cacheable</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>create</MethodName>
            <MethodComment>/** 
 * Create an object in the cache. The resulting object will match the key provided using the equals() method, i.e. the return Cacheable will have getIdentifier.equals(key) true. If an object that matches the key already exists in the cache then an exception is thrown.  &lt;BR&gt; The object will be added by one of: &lt;UL&gt; &lt;LI&gt;creating a new holder object and calling its initParameter() method and then its createIdentity() method with key as the parameter. &lt;LI&gt;Calling clearIdentity() on an holder object in the clean state and then calling its createIdentity() method with key as the parameter. &lt;LI&gt;Calling clean() on a dirty holder object and then calling clearIdentity() on an holder object in the clean state and then calling its createIdentity() method with key as the parameter. &lt;/UL&gt; In all cases the setIdentity() method is called with the createParameter as the second argument. If the object cannot be created then an exception is thrown by createIdentity. &lt;BR&gt; The returned object is kept, i.e. its identity will not change, until the release() method is called. The release() method must be called after the caller is finished with the object and throw away the reference to it, e.g. &lt;PRE&gt; Page p = (Page) pageCache.create(pageKey, createType); // do stuff with p // release p pageCache.release(p); p = null; &lt;/PRE&gt;
 * @return A reference to an object in the cache.
 * @exception StandardException Standard Derby error policy.
 * @see Cacheable#createIdentity
 */
</MethodComment>
            <ReturnType>Cacheable</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>createParameter</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>release</MethodName>
            <MethodComment>/** 
 * Release a &lt;code&gt;Cacheable&lt;/code&gt; object previously found with &lt;code&gt;find()&lt;/code&gt; or &lt;code&gt;findCached()&lt;/code&gt;, or created with &lt;code&gt;create()&lt;/code&gt;, and which is still kept by the caller. After this call the caller must throw away the reference to item.
 * @param entry the cached object to release
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>entry</ParamName>
                    <ParamType>Cacheable</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>remove</MethodName>
            <MethodComment>/** 
 * Delete and remove an object from the cache. It is up to the user of the cache to provide synchronization of some form that ensures that only one caller executes remove() on a cached object. &lt;BR&gt; The object must previously have been found with &lt;code&gt;find()&lt;/code&gt; or &lt;code&gt;findCached()&lt;/code&gt;, or created with &lt;code&gt;create()&lt;/code&gt;, and it must still be kept by the caller. The item will be placed into the NoIdentity state through clean(true) (if required) and clearIdentity(). The removal of the object will be delayed until it is not kept by anyone. Objects that are in the to be removed state can still be found through find() and findCached() until their keep count drops to zero. This call waits until the object has been removed. &lt;BR&gt; After this call the caller must throw away the reference to item.
 * @param entry the object to remove from the cache
 * @exception StandardException Standard Derby error policy.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>entry</ParamName>
                    <ParamType>Cacheable</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cleanAll</MethodName>
            <MethodComment>/** 
 * Place all objects in their clean state by calling their clean method if they are dirty. This method guarantees that all objects that existed in the cache at the time of the call are placed in the clean state  sometime during this call. Objects that are added to the cache during  this call or objects that are dirtied during this call (by other  callers) are not guaranteed to be clean once this call returns.
 * @see Cacheable#clean
 * @see Cacheable#isDirty
 * @exception StandardException Standard Derby error policy.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clean</MethodName>
            <MethodComment>/** 
 * Clean all objects that match the partialKey (or exact key). Any cached object that results in the partialKey.equals(Object) method returning true when passed the cached object will be cleaned.  &lt;P&gt; In order to clean more than one object the Cacheable equals method must be able to handle a partial key, e.g. a page has PageKey but a clean  may pass a ContainerKey which will discard all pages in that container.
 * @exception StandardException Standard Derby error policy.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>partialKey</ParamName>
                    <ParamType>Matchable</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ageOut</MethodName>
            <MethodComment>/** 
 * Age as many objects as possible out of the cache. This call is guaranteed not to block. It is not guaranteed to leave the cache empty. &lt;BR&gt; It is guaranteed that all unkept, clean objects will be removed from the cache.
 * @see Cacheable#clean
 * @see Cacheable#clearIdentity
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>shutdown</MethodName>
            <MethodComment>/** 
 * Shutdown the cache. This call stops the cache returning any more valid references on a &lt;code&gt;find()&lt;/code&gt;, &lt;code&gt;findCached()&lt;/code&gt; or &lt;code&gt;create()&lt;/code&gt; call, and then cleanAll() and ageOut() are called. The cache remains in existence until the last kept object has been unkept.
 * @exception StandardException Standard Derby error policy.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>useDaemonService</MethodName>
            <MethodComment>/** 
 * This cache can use this DaemonService if it needs some work to be done in the background. The caller must ensure that it has exclusive access to the cache when this method is called. No synchronization is required in the implementations of this method.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>daemon</ParamName>
                    <ParamType>DaemonService</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>discard</MethodName>
            <MethodComment>/** 
 * Discard all objects that match the partialKey (or exact key). Any cached object that results in the partialKey.equals(Object) method returning true when passed the cached object will be thrown out of the cache if and only if it is not in use. The Cacheable will be discarded without its clean method being called. &lt;P&gt; If partialKey is null, it matches all objects.  This is a way to discard all objects from the cache in case of emergency shutdown. &lt;P&gt; In order to discard more than one object the Cacheable equals method must be able to handle a partial key, e.g. a page has PageKey but a discard may pass a ContainerKey which will discard all pages in that container. &lt;P&gt;
 * @return true if discard has successful gotten rid of all objects thatmatch the partial or exact key.  False if some objects that matches were not gotten rid of because it was kept.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>partialKey</ParamName>
                    <ParamType>Matchable</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>values</MethodName>
            <MethodComment>/** 
 * Return a Collection of the Cacheables currently in the cache. The Collection should be a copy so that external synchronization isn't required. &lt;p&gt; This method should only be used for diagnostic purposes.
 * @return a Collection of all the elements in the cache
 */
</MethodComment>
            <ReturnType>Collection</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>registerMBean</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Register an MBean that allows user to monitor this cache instance. This is a no-op if the platform does not support Java Management Extensions (JMX). &lt;/p&gt; &lt;p&gt; The MBean will be automatically deregistered when  {@link #shutdown()}is called, or it can be manually deregistered by calling {@link #deregisterMBean()}. &lt;/p&gt;
 * @param dbName the unique name of the database to which the cache belongs
 * @throws StandardException if an error occurs when registering the MBean
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dbName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>deregisterMBean</MethodName>
            <MethodComment>/** 
 * Deregister the MBean that monitors this cache. If there is no MBean for this instance, this is a no-op.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>