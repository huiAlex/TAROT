<Class>
    <Id>746</Id>
    <Package>org.apache.derbyBuild</Package>
    <ClassName>MessageBuilder</ClassName>
    <SuperClass>Task</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>MessageBuilder  /** 
 * &lt;p&gt; This tool generates the engine's message strings (message_en.properties) as well the dita source for the SQLState documentation in the Derby Reference Guide. &lt;/p&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>TAB_STOP</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>PROPERTIES_BOILERPLATE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>REF_GUIDE_BOILERPLATE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>REF_GUIDE_NOTES</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>_xmlSourceFile</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>_propertiesTargetFile</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>_ditaTargetFile</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>_vacuous</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>_fw</FieldName>
            <FieldType>FileWriter</FieldType>
        </Field>
        <Field>
            <FieldName>_pw</FieldName>
            <FieldType>PrintWriter</FieldType>
        </Field>
        <Field>
            <FieldName>_tagStack</FieldName>
            <FieldType>ArrayList</FieldType>
        </Field>
        <Field>
            <FieldName>_tagStack</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>XMLWriter</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Special constructor for making a vacuous writer which doesn't do anything. This allows us to write easy-to-read dita-generating code that is not cluttered with "if ( documented )" conditionals. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>XMLWriter</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Create a productive writer which actually flushes text to disk. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>file</ParamName>
                    <ParamType>File</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>flush</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>_pw;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>_fw;flush;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>close</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>_pw;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>_fw;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeEmptyTag</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Indent and write an empty tag. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tag</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;writeEmptyTag;[tag, ""]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeEmptyTag</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Indent and write an empty tag with attributes. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tag</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>attributes</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;indent;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>beginTag</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Indent and write an opening tag. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tag</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;beginTag;[tag, ""]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>beginTag</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Indent and write an opening tag. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tag</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>attributes</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;indent;[]</InnerMethodInvoke>
                <InnerMethodInvoke>_tagStack;add;[tag]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>endTag</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Indent and write a closing tag. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [tag=(String)_tagStack.remove(_tagStack.size() - 1)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;indent;[]</InnerMethodInvoke>
                <InnerMethodInvoke>_pw;println;["&lt;/" + tag + "&gt;"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeTextElement</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Indent and write a whole element &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tag</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;writeTextElement;[tag, "", text]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeTextElement</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Indent and write a whole element &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tag</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>attributes</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;indent;[]</InnerMethodInvoke>
                <InnerMethodInvoke>_pw;print;[text]</InnerMethodInvoke>
                <InnerMethodInvoke>_pw;println;["&lt;/" + tag + "&gt;"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>indent</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Indent based on the depth of our tag nesting level. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [tabCount=_tagStack.size()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>println</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Print text. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>_pw;println;[text]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>MessageBuilder</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Let Ant conjure us out of thin air. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setXmlSourceFile</MethodName>
            <MethodComment>/** 
 * &lt;p&gt;Let Ant set the input file name.&lt;/p&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fileName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setPropertiesTargetFile</MethodName>
            <MethodComment>/** 
 * &lt;p&gt;Let Ant set the file name for the message property file we will write.&lt;/p&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fileName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setDitaTargetFile</MethodName>
            <MethodComment>/** 
 * &lt;p&gt;Let Ant set the file name for the SQLState dita file we will write.&lt;/p&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fileName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>execute</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Read the xml message descriptors and output messages_en.properties and the dita source for the SQLState table in the Derby Reference Guide. After setting up arguments using the above setter methods, Ant calls this method in order to run this custom task. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>File [source=new File(_xmlSourceFile)]</InnerVar>
                <InnerVar>File [targetProperties=new File(_propertiesTargetFile)]</InnerVar>
                <InnerVar>File [targetDita=new File(_ditaTargetFile)]</InnerVar>
                <InnerVar>FileWriter [propertiesFW=null]</InnerVar>
                <InnerVar>PrintWriter [propertiesPW=null]</InnerVar>
                <InnerVar>XMLWriter [ditaWriter=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>BuildException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>processMessages</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Loop through descriptors and write appropriate output to the properties and dita files. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>File</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>propertiesPW</ParamName>
                    <ParamType>PrintWriter</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ditaWriter</ParamName>
                    <ParamType>XMLWriter</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DocumentBuilderFactory [factory=DocumentBuilderFactory.newInstance()]</InnerVar>
                <InnerVar>DocumentBuilder [builder=factory.newDocumentBuilder()]</InnerVar>
                <InnerVar>Document [doc=builder.parse(input)]</InnerVar>
                <InnerVar>Element [root=doc.getDocumentElement()]</InnerVar>
                <InnerVar>NodeList [sections=root.getElementsByTagName("section")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>propertiesPW;println;[PROPERTIES_BOILERPLATE]</InnerMethodInvoke>
                <InnerMethodInvoke>ditaWriter;println;[REF_GUIDE_BOILERPLATE]</InnerMethodInvoke>
                <InnerMethodInvoke>ditaWriter;beginTag;["reference", "id=\"rrefexcept71493\" xml:lang=\"en-us\""]</InnerMethodInvoke>
                <InnerMethodInvoke>ditaWriter;endTag;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>processSections</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Loop through sections in the message descriptor file.. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>propertiesPW</ParamName>
                    <ParamType>PrintWriter</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ditaWriter</ParamName>
                    <ParamType>XMLWriter</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nodes</ParamName>
                    <ParamType>NodeList</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [nodeCount=nodes.getLength()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>processSection</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Read a section from the message descriptor file. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>propertiesPW</ParamName>
                    <ParamType>PrintWriter</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ditaWriter</ParamName>
                    <ParamType>XMLWriter</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>section</ParamName>
                    <ParamType>Element</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [documented=(getFirstChild(section,"documented") != null)]</InnerVar>
                <InnerVar>NodeList [families=section.getElementsByTagName("family")]</InnerVar>
                <InnerVar>int [familyCount=families.getLength()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>processFamily</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Read a family of message descriptors &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>propertiesPW</ParamName>
                    <ParamType>PrintWriter</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ditaWriter</ParamName>
                    <ParamType>XMLWriter</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>family</ParamName>
                    <ParamType>Element</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [title=squeezeText(getFirstChild(family,"title"))]</InnerVar>
                <InnerVar>NodeList [messages=family.getElementsByTagName("msg")]</InnerVar>
                <InnerVar>int [messageCount=messages.getLength()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ditaWriter;beginTag;["table"]</InnerMethodInvoke>
                <InnerMethodInvoke>ditaWriter;endTag;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>processMessage</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Read and process a message. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>propertiesPW</ParamName>
                    <ParamType>PrintWriter</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ditaWriter</ParamName>
                    <ParamType>XMLWriter</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>message</ParamName>
                    <ParamType>Element</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [name=squeezeText(getFirstChild(message,"name"))]</InnerVar>
                <InnerVar>String [sqlstate=getSQLState(name)]</InnerVar>
                <InnerVar>String [rawText=squeezeText(getFirstChild(message,"text"))]</InnerVar>
                <InnerVar>String [propertyText=escapePropertiesText(rawText)]</InnerVar>
                <InnerVar>int [parameterCount=countParameters(rawText)]</InnerVar>
                <InnerVar>String[] [comments=getOptionalSubElements(message,"comment")]</InnerVar>
                <InnerVar>String[] [args=getOptionalSubElements(message,"arg")]</InnerVar>
                <InnerVar>String [displayText]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ditaWriter;beginTag;["row"]</InnerMethodInvoke>
                <InnerMethodInvoke>ditaWriter;endTag;[]</InnerMethodInvoke>
                <InnerMethodInvoke>propertiesPW;println;[""]</InnerMethodInvoke>
                <InnerMethodInvoke>propertiesPW;println;[name + "=" + propertyText]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSQLState</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Convert a message handle into a SQLState, stripping off trailing encodings as necessary. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOptionalSubElements</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Get some optional sub-elements. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>String[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>message</ParamName>
                    <ParamType>Element</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>subElementTag</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>NodeList [options=message.getElementsByTagName(subElementTag)]</InnerVar>
                <InnerVar>int [count=options.getLength()]</InnerVar>
                <InnerVar>String[] [retval=new String[count]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>countParameters</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Count the substitutable arguments in an internationalized message string. These arguments have the form {n} where n is a number. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [argCount=0]</InnerVar>
                <InnerVar>int [argIdx=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>plugInArgs</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Plug arg values into parameter slots in an internationalizable message string. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>message</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rawArgs</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [count=rawArgs.length]</InnerVar>
                <InnerVar>String[] [cookedArgs=new String[count]]</InnerVar>
                <InnerVar>MessageFormat [format=new MessageFormat(message)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>echo</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Echo a message to the console. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;log;[text, Project.MSG_WARN]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>finishWriting</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Flush and close file writers. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fw</ParamName>
                    <ParamType>FileWriter</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pw</ParamName>
                    <ParamType>PrintWriter</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>pw;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>fw;flush;[]</InnerMethodInvoke>
                <InnerMethodInvoke>pw;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>fw;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFirstChild</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Element</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>Element</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>childName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>squeezeText</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Squeeze the text out of an Element. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>Element</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Node [textChild=node.getFirstChild()]</InnerVar>
                <InnerVar>String [text=textChild.getNodeValue()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>replaceSpecialChars</MethodName>
            <MethodComment>/** 
 * Replace a substring with some equivalent. For example, we would like to replace "&amp;lt;" with "&amp;amp;lt;" in the error messages. Add any substrings you would like to replace in the code below. Be aware that the first parameter to the replaceAll() method is interpreted as a regular expression.
 * @param input A String that may contain substrings that we want to replace
 * @return Output String where substrings selected for replacement have been replaced.
 * @see java.util.regex.Pattern
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>java.lang.String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [output=input.replaceAll("&lt;","&amp;lt;")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>escapePropertiesText</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Replace newlines with the escape sequence needed by properties files. Also, replace single quotes with two single quotes. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>java.lang.String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [output=input.replaceAll("\n","\\\\n")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>escapeTextWithAQuote</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Replace single quotes with two single quotes. Only needed when there are parameters with quotes. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>java.lang.String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [output=input.replaceAll("\'","\'\'")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>