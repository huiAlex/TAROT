<Class>
    <Id>2068</Id>
    <Package>org.apache.derby.iapi.store.raw</Package>
    <ClassName>LogicalUndoable</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Undoable</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>LogicalUndoable  /** 
 * A LogicalUndoable is a log operation that operates on the content of a page and the log operation needs logical undo.  This interface is used by LogicalUndo to extract information out of the log record, and to pass back to the logging system the real location where the roll back should happen. &lt;P&gt; It has specific page information such as its segment Id, container Id, page number, and it knows how to restore a storable row from the information stored in the log record.  
 * @see org.apache.derby.iapi.store.access.conglomerate.LogicalUndo
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getContainer</MethodName>
            <MethodComment>/** 
 * Return the containerHandle used by this log operation.  Logical cannot change container identity between roll forward and roll back.  This method should only be called by LogicalUndo to extract information from the log record.
 * @exception StandardException Standard Derby error policy
 */
</MethodComment>
            <ReturnType>ContainerHandle</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRecordHandle</MethodName>
            <MethodComment>/** 
 * Return the recordHandle stored in the log operation that correspond to the record that was changed in the rollforward.  This method should only be called by LogicalUndo to extract information from the log record.
 */
</MethodComment>
            <ReturnType>RecordHandle</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>restoreLoggedRow</MethodName>
            <MethodComment>/** 
 * Restore the row stored in the log operation.   This method should only be called by LogicalUndo to extract information from the log record.
 * @param row an IN/OUT parameter, caller passed in the row withthe correct column number and type, the log operation will restore the row with the optional data stored in the log record.
 * @exception StandardException Standard Derby error policy
 * @exception IOException Method may read from in
 * @see LogicalUndo
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>Object[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>in</ParamName>
                    <ParamType>LimitObjectInput</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>resetRecordHandle</MethodName>
            <MethodComment>/** 
 * If the row has moved, reset the record handle that the undo should be applied on.
 * @param rh the RecordHandle that represents the row's new location
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rh</ParamName>
                    <ParamType>RecordHandle</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>