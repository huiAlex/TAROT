<Class>
    <Id>1024</Id>
    <Package>org.apache.derbyTesting.functionTests.util</Package>
    <ClassName>SecurityCheck</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>SecurityCheck  /** 
 * Code to aid in checking the Security of Derby. This initial implementation only handles the emebdded code. Future work could expand to the client driver and network server.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>EMBEDDED_PUBLIC_API</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>allInspectedClasses</FieldName>
            <FieldType>SortedMap</FieldType>
        </Field>
        <Field>
            <FieldName>allInspectedClasses</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>isPublicApi</MethodName>
            <MethodComment>/** 
 * Is the passed in class part of the declared public api. Currently only the emebdded public api
 * @param c class to be checked
 * @return true if the class is part of the public api, false otherwise.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>Class</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkEmbeddedPublicApi</MethodName>
            <MethodComment>/** 
 * Perform security analysis of the public api for the embedded engine. Prints a report to System.out on completion.
 * @throws ClassNotFoundException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>System.out;println;["SecurityCheck: embedded public api classes"]</InnerMethodInvoke>
                <InnerMethodInvoke>allInspectedClasses;clear;[]</InnerMethodInvoke>
                <InnerMethodInvoke>SecurityCheck;report;[true]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ClassNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>report</MethodName>
            <MethodComment>/** 
 * Produce a report on System.out of all inspected classes that have risks associated with them.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>SecurityCheck;report;[false]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>report</MethodName>
            <MethodComment>/** 
 * Produce a report on System.out of all inspected classes that have risks associated with them. If reportClear is true then additionally all classes that have been inspected will be returned.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>reportClear</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>inspectClass</MethodName>
            <MethodComment>/** 
 * Inspect a class for security risks. No output is generated by this call, the caller must call report() to obtain the risks.
 * @param className
 * @throws ClassNotFoundException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>className</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>SecurityCheck;inspectClass;[Class.forName(className), null]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ClassNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>assertSourceSecurity</MethodName>
            <MethodComment>/** 
 * Inspect the class of the passed in Object for security risks. This inspects, at this level only, the actual type of the object, not the declared type. E.g. for DriverManager.getConnection the declared type is java.sql.Connection which has no security risks, but the implementation type returned may have many. &lt;code&gt; Connection conn = DriverManager.getConnection(url); // will inspect the implementation call, eg. EmbedConnection30 SecurityManager.inspect(conn); &lt;/code&gt; No output is generated by this call, the caller must call report() to obtain the risks.
 * @param o Obejct to be inspected
 * @param declared the declared type of the object. 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>o</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>declared</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>Assert;assertNotNull;[o]</InnerMethodInvoke>
                <InnerMethodInvoke>Assert;assertTrue;[SecurityCheck.inspectClass(o.getClass(),declared)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>inspectClass</MethodName>
            <MethodComment>/** 
 * Inspect a Derby class for security risks. This includes following potential references exposed through the class. &lt;P&gt; Risks looked at: &lt;UL&gt; &lt;LI&gt; public constructors in non-public class -  No justification for the constructor to be public. &lt;LI&gt; public constructors in non-final class and non-sealed package - Allows the class to be sub-classes through a injected class in the same package. &lt;LI&gt; public non-final field - Allows any one with a handle to the object to change the field. &lt;/UL&gt; &lt;P&gt; The type of any public field or return type of any public method is also inspected. The assumption is that if such a field or method exists they have the potential to be called and return a valid object. &lt;P&gt; Note that this inspection is through the declared type of exposed references, not the actual runtime type. The actual runtime type might expose other classes that should be inspected.
 * @param c the class to inspect
 * @throws ClassNotFoundException
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>Class</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>declared</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>