<Class>
    <Id>1197</Id>
    <Package>org.apache.derby.client.am</Package>
    <ClassName>CallableLocatorProcedures</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>CallableLocatorProcedures  /** 
 * Contains the necessary methods to call the stored procedure that operate on LOBs identified by locators.  An instance of this class will be initialized with a &lt;code&gt;Connection&lt;/code&gt; parameter and all calls will be made on that connection. &lt;p&gt; The class makes sure that each procedure call is only prepared once per instance.  Hence, it will keep references to &lt;code&gt;CallableStatement&lt;/code&gt; objects for procedures that have been called through this instance.  This makes it possible to prepare each procedure call only once per &lt;code&gt;Connection&lt;/code&gt;. &lt;p&gt;  Since LOBs can not be parameters to stored procedures, the framework should make sure that calls involving a byte[] or String that does not fit in a VARCHAR (FOR BIT DATA), are split into several calls each operating on a fragment of the LOB.
 * @see ClientConnection#locatorProcedureCall for an example of how to usethis class.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>isLocatorSupportAvailable</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>blobCreateLocatorCall</FieldName>
            <FieldType>ClientCallableStatement</FieldType>
        </Field>
        <Field>
            <FieldName>blobReleaseLocatorCall</FieldName>
            <FieldType>ClientCallableStatement</FieldType>
        </Field>
        <Field>
            <FieldName>blobGetPositionFromLocatorCall</FieldName>
            <FieldType>ClientCallableStatement</FieldType>
        </Field>
        <Field>
            <FieldName>blobGetPositionFromBytesCall</FieldName>
            <FieldType>ClientCallableStatement</FieldType>
        </Field>
        <Field>
            <FieldName>blobGetLengthCall</FieldName>
            <FieldType>ClientCallableStatement</FieldType>
        </Field>
        <Field>
            <FieldName>blobGetBytesCall</FieldName>
            <FieldType>ClientCallableStatement</FieldType>
        </Field>
        <Field>
            <FieldName>blobSetBytesCall</FieldName>
            <FieldType>ClientCallableStatement</FieldType>
        </Field>
        <Field>
            <FieldName>blobTruncateCall</FieldName>
            <FieldType>ClientCallableStatement</FieldType>
        </Field>
        <Field>
            <FieldName>clobCreateLocatorCall</FieldName>
            <FieldType>ClientCallableStatement</FieldType>
        </Field>
        <Field>
            <FieldName>clobReleaseLocatorCall</FieldName>
            <FieldType>ClientCallableStatement</FieldType>
        </Field>
        <Field>
            <FieldName>clobGetPositionFromStringCall</FieldName>
            <FieldType>ClientCallableStatement</FieldType>
        </Field>
        <Field>
            <FieldName>clobGetPositionFromLocatorCall</FieldName>
            <FieldType>ClientCallableStatement</FieldType>
        </Field>
        <Field>
            <FieldName>clobGetLengthCall</FieldName>
            <FieldType>ClientCallableStatement</FieldType>
        </Field>
        <Field>
            <FieldName>clobGetSubStringCall</FieldName>
            <FieldType>ClientCallableStatement</FieldType>
        </Field>
        <Field>
            <FieldName>clobSetStringCall</FieldName>
            <FieldType>ClientCallableStatement</FieldType>
        </Field>
        <Field>
            <FieldName>clobTruncateCall</FieldName>
            <FieldType>ClientCallableStatement</FieldType>
        </Field>
        <Field>
            <FieldName>connection</FieldName>
            <FieldType>ClientConnection</FieldType>
        </Field>
        <Field>
            <FieldName>VARCHAR_MAXWIDTH</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>INVALID_LOCATOR</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>CallableLocatorProcedures</MethodName>
            <MethodComment>/** 
 * Create an instance to be used for calling locator-based stored procedures.
 * @param conn the connection to be used to prepare calls.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conn</ParamName>
                    <ParamType>ClientConnection</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>blobCreateLocator</MethodName>
            <MethodComment>/** 
 * Allocates an empty BLOB on server and returns its locator.  Any subsequent operations on this BLOB value will be stored in temporary space on the server.
 * @return locator that identifies the created BLOB.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>blobReleaseLocator</MethodName>
            <MethodComment>/** 
 * This method frees the BLOB and releases the resources that it holds. (E.g., temporary space used to store this BLOB on the server.)
 * @param locator locator that designates the BLOB to be released.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>locator</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>blobReleaseLocatorCall;setIntX;[1, locator]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>blobGetPositionFromLocator</MethodName>
            <MethodComment>/** 
 * Retrieves the byte position in the BLOB value designated by this &lt;code&gt;locator&lt;/code&gt; at which pattern given by &lt;code&gt;searchLocator&lt;/code&gt; begins. The search begins at position &lt;code&gt;fromPosition&lt;/code&gt;.
 * @param locator locator that identifies the BLOB to be searched.
 * @param searchLocator locator designating the BLOB value for which tosearch
 * @param fromPosition the position in the BLOB valueat which to begin searching; the first position is 1
 * @return the position at which the pattern begins, else -1
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>locator</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>searchLocator</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fromPosition</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>blobGetPositionFromLocatorCall;setIntX;[2, locator]</InnerMethodInvoke>
                <InnerMethodInvoke>blobGetPositionFromLocatorCall;setIntX;[3, searchLocator]</InnerMethodInvoke>
                <InnerMethodInvoke>blobGetPositionFromLocatorCall;setLongX;[4, fromPosition]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>blobGetPositionFromBytes</MethodName>
            <MethodComment>/** 
 * Retrieves the byte position at which the specified byte array &lt;code&gt;searchLiteral&lt;/code&gt; begins within the &lt;code&gt;BLOB&lt;/code&gt; value identified by &lt;code&gt;locator&lt;/code&gt;.  The search for &lt;code&gt;searchLiteral&lt;/code&gt; begins at position &lt;code&gt;fromPosition&lt;/code&gt;. &lt;p&gt; If &lt;code&gt;searchLiteral&lt;/code&gt; is longer than the maximum length of a VARCHAR FOR BIT DATA, it will be split into smaller fragments, and repeated procedure calls will be made to perform the entire search
 * @param locator locator that identifies the BLOB to be searched.
 * @param searchLiteral the byte array for which to search
 * @param fromPosition the position at which to begin searching; thefirst position is 1
 * @return the position at which the pattern appears, else -1
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>locator</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>searchLiteral</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fromPosition</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>long [blobLength=-1]</InnerVar>
                <InnerVar>int [patternLength=searchLiteral.length]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>blobGetPositionFromBytes</MethodName>
            <MethodComment>/** 
 * Retrieves the byte position at which the specified part of the byte array &lt;code&gt;searchLiteral&lt;/code&gt; begins within the &lt;code&gt;BLOB&lt;/code&gt; value identified by &lt;code&gt;locator&lt;/code&gt;.  The search for &lt;code&gt;searchLiteral&lt;/code&gt; begins at position &lt;code&gt;fromPosition&lt;/code&gt;. &lt;p&gt; This is a helper function used by blobGetPositionFromBytes(int, byte[], long) for each call to the BLOBGETPOSITIONFROMBYTES procedure.
 * @param locator locator that identifies the BLOB to be searched.
 * @param searchLiteral the byte array for which to search
 * @param fromPosition the position at which to begin searching; thefirst position is 1
 * @param offset the offset into the array &lt;code&gt;searchLiteral&lt;/code&gt; atwhich the pattern to search for starts
 * @param length the number of bytes from the array of bytes&lt;code&gt;searchLiteral&lt;/code&gt; to use for the pattern to search for. It is assumed that this length is smaller than the maximum size of a VARCHAR FOR BIT DATA column.  Otherwise, an exception will be thrown.
 * @return the position at which the pattern appears, else -1
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>locator</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fromPosition</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>searchLiteral</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>offset</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>length</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>byte[] [bytesToBeCompared=searchLiteral]</InnerVar>
                <InnerVar>int [numBytes=Math.min(searchLiteral.length - offset,length)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>blobGetPositionFromBytesCall;setIntX;[2, locator]</InnerMethodInvoke>
                <InnerMethodInvoke>blobGetPositionFromBytesCall;setBytesX;[3, bytesToBeCompared]</InnerMethodInvoke>
                <InnerMethodInvoke>blobGetPositionFromBytesCall;setLongX;[4, fromPosition]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>blobGetLength</MethodName>
            <MethodComment>/** 
 * Returns the number of bytes in the &lt;code&gt;BLOB&lt;/code&gt; value designated by this &lt;code&gt;sourceLocator&lt;/code&gt;.
 * @param sourceLocator locator that identifies the BLOB
 * @return length of the &lt;code&gt;BLOB&lt;/code&gt; in bytes 
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sourceLocator</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>blobGetLengthCall;setIntX;[2, sourceLocator]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>blobGetBytes</MethodName>
            <MethodComment>/** 
 * Retrieves all or part of the &lt;code&gt;BLOB&lt;/code&gt; value that is identified by &lt;code&gt;sourceLocator&lt;/code&gt;, as an array of bytes.  This &lt;code&gt;byte&lt;/code&gt; array contains up to &lt;code&gt;forLength&lt;/code&gt; consecutive bytes starting at position &lt;code&gt;fromPosition&lt;/code&gt;. &lt;p&gt; If &lt;code&gt;forLength&lt;/code&gt; is larger than the maximum length of a VARCHAR FOR BIT DATA, the reading of the BLOB will be split into repeated procedure calls.
 * @param sourceLocator locator that identifies the Blob to operate on
 * @param fromPosition the ordinal position of the first byte in the&lt;code&gt;BLOB&lt;/code&gt; value to be extracted; the first byte is at position 1
 * @param forLength the number of consecutive bytes to be copied; the valuefor length must be 0 or greater.  Specifying a length that goes beyond the end of the BLOB (i.e., &lt;code&gt;fromPosition + forLength &amp;gt; blob.length()&lt;/code&gt;), will result in an error.
 * @return a byte array containing up to &lt;code&gt;forLength&lt;/code&gt; consecutivebytes from the &lt;code&gt;BLOB&lt;/code&gt; value designated by &lt;code&gt;sourceLocator&lt;/code&gt;, starting with the byte at position &lt;code&gt;fromPosition&lt;/code&gt;
 */
</MethodComment>
            <ReturnType>byte[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sourceLocator</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fromPosition</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>forLength</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>byte [retVal[]=null]</InnerVar>
                <InnerVar>int [gotSoFar=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>blobSetBytes</MethodName>
            <MethodComment>/** 
 * Writes all or part of the given &lt;code&gt;byte&lt;/code&gt; array to the &lt;code&gt;BLOB&lt;/code&gt; value designated by &lt;code&gt;sourceLocator&lt;/code&gt;. Writing starts at position &lt;code&gt;fromPosition&lt;/code&gt; in the &lt;code&gt;BLOB&lt;/code&gt; value; &lt;code&gt;forLength&lt;/code&gt; bytes from the given byte array are written. If the end of the &lt;code&gt;Blob&lt;/code&gt; value is reached while writing the array of bytes, then the length of the &lt;code&gt;Blob&lt;/code&gt; value will be increased to accomodate the extra bytes. &lt;p&gt; If &lt;code&gt;forLength&lt;/code&gt; is larger than the maximum length of a VARCHAR FOR BIT DATA, the writing to the BLOB value will be split into repeated procedure calls.
 * @param sourceLocator locator that identifies the Blob to operated on
 * @param fromPosition the position in the &lt;code&gt;BLOB&lt;/code&gt; value at whichto start writing; the first position is 1
 * @param forLength the number of bytes to be written to the&lt;code&gt;BLOB&lt;/code&gt; value from the array of bytes &lt;code&gt;bytes&lt;/code&gt;.  Specifying a length that goes beyond the end of the BLOB (i.e., &lt;code&gt;fromPosition + forLength &amp;gt; blob.length()&lt;/code&gt;, will result in an error.
 * @param bytes the array of bytes to be written
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sourceLocator</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fromPosition</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>forLength</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>bytes</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [sentSoFar=0]</InnerVar>
                <InnerVar>byte[] [bytesToBeSent=bytes]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>blobTruncate</MethodName>
            <MethodComment>/** 
 * Truncates the &lt;code&gt;BLOB&lt;/code&gt; value identified by &lt;code&gt;sourceLocator&lt;/code&gt; to be &lt;code&gt;length&lt;/code&gt; bytes.   &lt;p&gt; &lt;b&gt;Note:&lt;/b&gt; If the value specified for &lt;code&gt;length&lt;/code&gt; is greater than the length+1 of the &lt;code&gt;BLOB&lt;/code&gt; value then an &lt;code&gt;SqlException&lt;/code&gt; will be thrown.
 * @param sourceLocator locator identifying the Blob to be truncated
 * @param length the length, in bytes, to which the &lt;code&gt;BLOB&lt;/code&gt; valueshould be truncated
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sourceLocator</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>length</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>blobTruncateCall;setIntX;[1, sourceLocator]</InnerMethodInvoke>
                <InnerMethodInvoke>blobTruncateCall;setLongX;[2, length]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clobCreateLocator</MethodName>
            <MethodComment>/** 
 * Allocates an empty CLOB on server and returns its locator. Any subsequent operations on this CLOB value will be stored in temporary space on the server.
 * @return locator that identifies the created CLOB.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clobReleaseLocator</MethodName>
            <MethodComment>/** 
 * This method frees the CLOB and releases the resources that it holds. (E.g., temporary space used to store this CLOB on the server.)
 * @param locator locator that designates the CLOB to be released.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>locator</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>clobReleaseLocatorCall;setIntX;[1, locator]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clobGetPositionFromString</MethodName>
            <MethodComment>/** 
 * Retrieves the character position at which the specified substring  &lt;code&gt;searchLiteral&lt;/code&gt; begins within the &lt;code&gt;CLOB&lt;/code&gt; value identified by &lt;code&gt;locator&lt;/code&gt;.  The search for &lt;code&gt;searchLiteral&lt;/code&gt; begins at position &lt;code&gt;fromPosition&lt;/code&gt;. &lt;p&gt; If &lt;code&gt;searchLiteral&lt;/code&gt; is longer than the maximum length of a VARCHAR, it will be split into smaller fragments, and repeated procedure calls will be made to perform the entire search
 * @param locator locator that identifies the CLOB to be searched.
 * @param searchLiteral the substring for which to search
 * @param fromPosition the position at which to begin searching; thefirst position is 1
 * @return the position at which the pattern appears, else -1
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>locator</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>searchLiteral</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fromPosition</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>long [clobLength=-1]</InnerVar>
                <InnerVar>int [patternLength=searchLiteral.length()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clobGetPositionFromString</MethodName>
            <MethodComment>/** 
 * Retrieves the character position at which the specified part of the substring &lt;code&gt;searchLiteral&lt;/code&gt; begins within the &lt;code&gt;CLOB&lt;/code&gt; value identified by &lt;code&gt;locator&lt;/code&gt;.  The search for &lt;code&gt;searchLiteral&lt;/code&gt; begins at position &lt;code&gt;fromPosition&lt;/code&gt;. &lt;p&gt;  This is a helper function used by clobGetPositionFromString(int, String, long) for each call to the CLOBGETPOSITIONFROMSTRING procedure.
 * @param locator locator that identifies the CLOB to be searched.
 * @param searchLiteral the substring for which to search
 * @param fromPosition the position at which to begin searching; thefirst position is 1
 * @param offset the offset into the string &lt;code&gt;searchLiteral&lt;/code&gt; atwhich the pattern to search for starts
 * @param length the number of characters from the string&lt;code&gt;searchLiteral&lt;/code&gt; to use for the pattern to search for. It is assumed that this length is smaller than the maximum size of a VARCHAR column.  Otherwise, an exception will be thrown.
 * @return the position at which the pattern appears, else -1
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>locator</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fromPosition</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>searchLiteral</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>offset</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>length</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [stringToBeCompared=searchLiteral]</InnerVar>
                <InnerVar>int [numChars=Math.min(searchLiteral.length() - offset,length)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>clobGetPositionFromStringCall;setIntX;[2, locator]</InnerMethodInvoke>
                <InnerMethodInvoke>clobGetPositionFromStringCall;setStringX;[3, stringToBeCompared]</InnerMethodInvoke>
                <InnerMethodInvoke>clobGetPositionFromStringCall;setLongX;[4, fromPosition]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clobGetPositionFromLocator</MethodName>
            <MethodComment>/** 
 * Retrieves the character position in the CLOB value designated by this &lt;code&gt;locator&lt;/code&gt; at which substring given by &lt;code&gt;searchLocator&lt;/code&gt; begins. The search begins at position &lt;code&gt;fromPosition&lt;/code&gt;.
 * @param locator locator that identifies the CLOB to be searched.
 * @param searchLocator locator designating the CLOB value for which tosearch
 * @param fromPosition the position in the CLOB valueat which to begin searching; the first position is 1
 * @return the position at which the pattern begins, else -1
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>locator</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>searchLocator</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fromPosition</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>clobGetPositionFromLocatorCall;setIntX;[2, locator]</InnerMethodInvoke>
                <InnerMethodInvoke>clobGetPositionFromLocatorCall;setIntX;[3, searchLocator]</InnerMethodInvoke>
                <InnerMethodInvoke>clobGetPositionFromLocatorCall;setLongX;[4, fromPosition]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clobGetLength</MethodName>
            <MethodComment>/** 
 * Returns the number of character in the &lt;code&gt;CLOB&lt;/code&gt; value designated by this &lt;code&gt;sourceLocator&lt;/code&gt;.
 * @param sourceLocator locator that identifies the CLOB
 * @return length of the &lt;code&gt;CLOB&lt;/code&gt; in characters 
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sourceLocator</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>clobGetLengthCall;setIntX;[2, sourceLocator]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clobGetSubString</MethodName>
            <MethodComment>/** 
 * Retrieves all or part of the &lt;code&gt;CLOB&lt;/code&gt; value that is identified by &lt;code&gt;sourceLocator&lt;/code&gt;, as a &lt;code&gt;String&lt;/code&gt;.  This &lt;code&gt;String&lt;/code&gt; contains up to &lt;code&gt;forLength&lt;/code&gt; consecutive characters starting at position &lt;code&gt;fromPosition&lt;/code&gt;.   &lt;p&gt;  If &lt;code&gt;forLength&lt;/code&gt; is larger than the maximum length of a VARCHAR, the reading of the CLOB will be split into repeated procedure calls.
 * @param sourceLocator locator that identifies the CLOB to operate on
 * @param fromPosition the ordinal position of the first character in the&lt;code&gt;CLOB&lt;/code&gt; value to be extracted; the first character is at position 1
 * @param forLength the number of consecutive characters to be copied; thevalue for length must be 0 or greater.  Specifying a length that goes beyond the end of the CLOB (i.e., &lt;code&gt;fromPosition + forLength &amp;gt; clob.length()&lt;/code&gt;, will result in an error.
 * @return a string containing up to &lt;code&gt;forLength&lt;/code&gt; consecutivecharacters from the &lt;code&gt;CLOB&lt;/code&gt; value designated by &lt;code&gt;sourceLocator&lt;/code&gt;, starting with the character at position &lt;code&gt;fromPosition&lt;/code&gt;
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sourceLocator</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fromPosition</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>forLength</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuffer [retVal=null]</InnerVar>
                <InnerVar>int [gotSoFar=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clobSetString</MethodName>
            <MethodComment>/** 
 * Writes all or part of the given &lt;code&gt;String&lt;/code&gt; to the &lt;code&gt;CLOB&lt;/code&gt; value designated by &lt;code&gt;sourceLocator&lt;/code&gt;. Writing starts at position &lt;code&gt;fromPosition&lt;/code&gt; in the &lt;code&gt;CLOB&lt;/code&gt; value; &lt;code&gt;forLength&lt;/code&gt; characters from the given string are written. If the end of the &lt;code&gt;CLOB&lt;/code&gt; value is reached while writing the string, then the length of the &lt;code&gt;CLOB&lt;/code&gt; value will be increased to accomodate the extra characters. &lt;p&gt;  If &lt;code&gt;forLength&lt;/code&gt; is larger than the maximum length of a VARCHAR, the writing to the CLOB value will be split into repeated procedure calls.
 * @param sourceLocator locator that identifies the CLOB to operated on
 * @param fromPosition the position in the &lt;code&gt;CLOB&lt;/code&gt; value at whichto start writing; the first position is 1
 * @param forLength the number of characters to be written to the&lt;code&gt;CLOB&lt;/code&gt; value from the string &lt;code&gt;string&lt;/code&gt;. Specifying a length that goes beyond the end of the CLOB (i.e., &lt;code&gt;fromPosition + forLength &amp;gt; clob.length()&lt;/code&gt;, will result in an error.
 * @param string the string to be written
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sourceLocator</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fromPosition</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>forLength</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>string</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [sentSoFar=0]</InnerVar>
                <InnerVar>String [stringToBeSent=string]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clobTruncate</MethodName>
            <MethodComment>/** 
 * Truncates the &lt;code&gt;CLOB&lt;/code&gt; value identified by &lt;code&gt;sourceLocator&lt;/code&gt; to be &lt;code&gt;length&lt;/code&gt; characters.   &lt;p&gt; &lt;b&gt;Note:&lt;/b&gt; If the value specified for &lt;code&gt;length&lt;/code&gt; is greater than the length+1 of the &lt;code&gt;CLOB&lt;/code&gt; value then an &lt;code&gt;SqlException&lt;/code&gt; will be thrown.
 * @param sourceLocator locator identifying the CLOB to be truncated
 * @param length the length, in characters, to which the &lt;code&gt;CLOB&lt;/code&gt;value should be truncated
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sourceLocator</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>length</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>clobTruncateCall;setIntX;[1, sourceLocator]</InnerMethodInvoke>
                <InnerMethodInvoke>clobTruncateCall;setLongX;[2, length]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>handleInvalidLocator</MethodName>
            <MethodComment>/** 
 * If the given exception indicates that locator was not valid, we assume the locator has been garbage-collected due to transaction commit, and wrap the exception in an exception with SQL state &lt;code&gt;LOB_OBJECT_INVALID&lt;/code&gt;.
 * @param sqle Exception to be checked
 * @return If &lt;code&gt;sqle&lt;/code&gt; indicates that locator wasinvalid, an &lt;code&gt;SqlException&lt;/code&gt; with SQL state &lt;code&gt;LOB_OBJECT_INVALID&lt;/code&gt;. Otherwise, the incoming exception is returned.
 */
</MethodComment>
            <ReturnType>SqlException</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sqle</ParamName>
                    <ParamType>SqlException</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>SqlException [ex=sqle]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>