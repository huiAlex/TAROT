<Class>
    <Id>444</Id>
    <Package>org.apache.derby.impl.store.raw.data</Package>
    <ClassName>OverflowInputStream</ClassName>
    <SuperClass>BufferedByteHolderInputStream</SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Resetable</SuperInterface>
        <SuperInterface>CloneableStream</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>OverflowInputStream  /** 
 * A OverflowInputStream is used by store to turn a long column into an  InputStream. &lt;p&gt; Any time store fetches a long column, the value is returned as a stream. A long column is any column that at some point was longer than a page, so a long column in one table may not be long in another depending on page size. &lt;p&gt; When the column is fetched a new OverflowInputStream is created and then the datatype's stream is set using: ((StreamStorable)sColumn).setStream(OverflowInputStream);
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>owner</FieldName>
            <FieldType>BaseContainerHandle</FieldType>
        </Field>
        <Field>
            <FieldName>overflowPage</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>overflowId</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>firstOverflowPage</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>firstOverflowId</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>recordToLock</FieldName>
            <FieldType>RecordHandle</FieldType>
        </Field>
        <Field>
            <FieldName>initialized</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>OverflowInputStream</MethodName>
            <MethodComment>/** 
 * Constructor for OverflowInputStream &lt;p&gt; It is up to the caller to allocate the ByteHolder for this stream, and pass it in.
 * @param bh            ByteHolder to hold buffers of bytes as the stream iswalked.  Expected usage is that a page worth of  data is held in memory at a time, filled by a  calls to restorePortionLongColumn(). 
 * @param owner         BaseContainerHandle used to read pages from the container.  Note this handle is closed automatically on commit.
 * @param overflowPage  The first overflow page of this long column.  
 * @param overflowId    The record id of 1st segment of the long column onoverflowPage.
 * @param recordToLock  RecordHandle of the owning record of the long longcolumn, this is the row level lock to get.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>bh</ParamName>
                    <ParamType>ByteHolder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>owner</ParamName>
                    <ParamType>BaseContainerHandle</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>overflowPage</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>overflowId</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>recordToLock</ParamName>
                    <ParamType>RecordHandle</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fillByteHolder</MethodName>
            <MethodComment>/** 
 * If bytes remain in stream, insure the current buffer is not empty. &lt;p&gt; If there are bytes in current buffer than no more work necessary, else if there are no bytes available in current buffer and there are  still more overflow segments then get the next buffer's worth of data.
 * @exception IOException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setOverflowPage</MethodName>
            <MethodComment>/** 
 * Set the next overflow page of the long column. &lt;p&gt; Used by StorePage.restorePortionLongColumn() as part of the call back process to save the state of the scan of the pieces of the long column. StorePage.restorePortionLongColumn() is called by fillByteHolder() to get the next page worth into a buffer, and in turn after those bytes are read the state of this stream is updated with then next overflow page.
 * @param overflowPage  Page number containing the next segment of thelong column.  -1 if there are no more segments.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>overflowPage</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setOverflowId</MethodName>
            <MethodComment>/** 
 * Set the next overflow page of the long column. &lt;p&gt; Used by StorePage.restorePortionLongColumn() as part of the call back process to save the state of the scan of the pieces of the long column. StorePage.restorePortionLongColumn() is called by fillByteHolder() to get the next page worth into a buffer, and in turn after those bytes are read the state of this stream is updated with then next overflow page.
 * @param overflowId    Page number containing the next segment of thelong column.  -1 if there are no more segments.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>overflowId</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOverflowPage</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOverflowId</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initStream</MethodName>
            <MethodComment>/** 
 * Initialize a Resetable stream. &lt;p&gt; InitStream() must be called first before using any other of the  Resetable interfaces. &lt;p&gt; Reopens the container.  This gets a separate intent shared locked on the table and a read lock on the appropriate row.  These locks remain until the enclosing blob/clob object is closed, or until the end of the transaction in which initStream() was first called.  This locking behavior protects the row while the stream is being accessed.  Otherwise for instance in the case of read committed the original row lock on  the row would be released when the scan went to the next row, and there would be nothing to stop another transaction from deleting the row while the client read through the stream.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>LockingPolicy [lp=owner.getTransaction().newLockingPolicy(LockingPolicy.MODE_RECORD,TransactionController.ISOLATION_READ_COMMITTED,true)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>owner.getLockingPolicy();lockRecordForRead;[owner.getTransaction(), owner, recordToLock, true, false]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>resetStream</MethodName>
            <MethodComment>/** 
 * Reset the stream back to beginning of the long column. &lt;p&gt; Also fills in the first buffer from the stream. &lt;p&gt; Throws exception if the underlying open container has been closed, for example automatically by a commit().
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>owner;checkOpen;[]</InnerMethodInvoke>
                <InnerMethodInvoke>this.bh;clear;[]</InnerMethodInvoke>
                <InnerMethodInvoke>this.bh;startReading;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>closeStream</MethodName>
            <MethodComment>/** 
 * Close the Resetable stream. &lt;p&gt; Close the container associated with this stream.  (This will also free  the associated IS table lock and the associated S row lock.)
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>owner;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cloneStream</MethodName>
            <MethodComment>/** 
 * Clone this object. &lt;p&gt; Creates a deep copy of this object. The returned stream has its own working buffers and can be initialized, reset and read independently from this stream. &lt;p&gt; The cloned stream is set back to the beginning of stream, no matter where the current stream happens to be positioned.
 * @return Copy of this stream which can be used independently.
 */
</MethodComment>
            <ReturnType>InputStream</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>OverflowInputStream [ret_stream=new OverflowInputStream(bh.cloneEmpty(),owner,firstOverflowPage,firstOverflowId,recordToLock)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>