<Class>
    <Id>1443</Id>
    <Package>org.apache.derby.impl.sql.compile</Package>
    <ClassName>TypeCompilerFactoryImpl</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>TypeCompilerFactory</SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>PACKAGE_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>bitTypeCompiler</FieldName>
            <FieldType>TypeCompiler</FieldType>
        </Field>
        <Field>
            <FieldName>booleanTypeCompiler</FieldName>
            <FieldType>TypeCompiler</FieldType>
        </Field>
        <Field>
            <FieldName>charTypeCompiler</FieldName>
            <FieldType>TypeCompiler</FieldType>
        </Field>
        <Field>
            <FieldName>decimalTypeCompiler</FieldName>
            <FieldType>TypeCompiler</FieldType>
        </Field>
        <Field>
            <FieldName>doubleTypeCompiler</FieldName>
            <FieldType>TypeCompiler</FieldType>
        </Field>
        <Field>
            <FieldName>intTypeCompiler</FieldName>
            <FieldType>TypeCompiler</FieldType>
        </Field>
        <Field>
            <FieldName>longintTypeCompiler</FieldName>
            <FieldType>TypeCompiler</FieldType>
        </Field>
        <Field>
            <FieldName>longvarbitTypeCompiler</FieldName>
            <FieldType>TypeCompiler</FieldType>
        </Field>
        <Field>
            <FieldName>longvarcharTypeCompiler</FieldName>
            <FieldType>TypeCompiler</FieldType>
        </Field>
        <Field>
            <FieldName>realTypeCompiler</FieldName>
            <FieldType>TypeCompiler</FieldType>
        </Field>
        <Field>
            <FieldName>smallintTypeCompiler</FieldName>
            <FieldType>TypeCompiler</FieldType>
        </Field>
        <Field>
            <FieldName>tinyintTypeCompiler</FieldName>
            <FieldType>TypeCompiler</FieldType>
        </Field>
        <Field>
            <FieldName>dateTypeCompiler</FieldName>
            <FieldType>TypeCompiler</FieldType>
        </Field>
        <Field>
            <FieldName>timeTypeCompiler</FieldName>
            <FieldType>TypeCompiler</FieldType>
        </Field>
        <Field>
            <FieldName>timestampTypeCompiler</FieldName>
            <FieldType>TypeCompiler</FieldType>
        </Field>
        <Field>
            <FieldName>varbitTypeCompiler</FieldName>
            <FieldType>TypeCompiler</FieldType>
        </Field>
        <Field>
            <FieldName>varcharTypeCompiler</FieldName>
            <FieldType>TypeCompiler</FieldType>
        </Field>
        <Field>
            <FieldName>refTypeCompiler</FieldName>
            <FieldType>TypeCompiler</FieldType>
        </Field>
        <Field>
            <FieldName>blobTypeCompiler</FieldName>
            <FieldType>TypeCompiler</FieldType>
        </Field>
        <Field>
            <FieldName>clobTypeCompiler</FieldName>
            <FieldType>TypeCompiler</FieldType>
        </Field>
        <Field>
            <FieldName>xmlTypeCompiler</FieldName>
            <FieldType>TypeCompiler</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getTypeCompiler</MethodName>
            <MethodComment>/** 
 * Get a TypeCompiler corresponding to the given TypeId
 * @param typeId        The TypeId to get a TypeCompiler for
 * @return      The corresponding TypeCompiler
 */
</MethodComment>
            <ReturnType>TypeCompiler</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>typeId</ParamName>
                    <ParamType>TypeId</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>staticGetTypeCompiler</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>TypeCompiler</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>typeId</ParamName>
                    <ParamType>TypeId</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [sqlTypeName]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAnInstance</MethodName>
            <MethodComment>/** 
 * Check whether the given TypeCompiler has been allocated yet. If so, just return it, otherwise allocate a new instance given its class.
 */
</MethodComment>
            <ReturnType>TypeCompiler</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>className</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>anInstance</ParamName>
                    <ParamType>TypeCompiler</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>typeId</ParamName>
                    <ParamType>TypeId</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>