<Class>
    <Id>1442</Id>
    <Package>org.apache.derby.impl.sql.compile</Package>
    <ClassName>SumAvgAggregateDefinition</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>AggregateDefinition</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>SumAvgAggregateDefinition  /** 
 * Definition for the SUM()/AVG() aggregates.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>isSum</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>SumAvgAggregateDefinition</MethodName>
            <MethodComment>/** 
 * Niladic constructor.  Does nothing.  For ease Of use, only.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAggregator</MethodName>
            <MethodComment>/** 
 * Determines the result datatype.  Accept NumberDataValues only.   &lt;P&gt; &lt;I&gt;Note&lt;/I&gt;: In the future you should be able to do a sum user data types.  One option would be to run sum on anything that implements plus().  In which case avg() would need divide().
 * @param inputType	the input type, either a user type or a java.lang object
 * @return the output Class (null if cannot operate onvalue expression of this type.
 */
</MethodComment>
            <ReturnType>DataTypeDescriptor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>inputType</ParamName>
                    <ParamType>DataTypeDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>aggregatorClass</ParamName>
                    <ParamType>StringBuffer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAggregatorClassName</MethodName>
            <MethodComment>/** 
 * Return the aggregator class.  
 * @return SumAggregator.CLASS_NAME/AvgAggregator.CLASS_NAME
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOperator</MethodName>
            <MethodComment>/** 
 * Return the arithmetic operator corresponding to this operation.
 * @return TypeCompiler.SUM_OP /TypeCompiler.AVG_OP
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setSumOrAvg</MethodName>
            <MethodComment>/** 
 * This is set by the parser.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>isSum</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>