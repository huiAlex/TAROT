<Class>
    <Id>849</Id>
    <Package>org.osgi.framework</Package>
    <ClassName>ServiceRegistration</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ServiceRegistration  /** 
 * A registered service. &lt;p&gt; The Framework returns a &lt;code&gt;ServiceRegistration&lt;/code&gt; object when a &lt;code&gt;BundleContext.registerService&lt;/code&gt; method invocation is successful. The &lt;code&gt;ServiceRegistration&lt;/code&gt; object is for the private use of the registering bundle and should not be shared with other bundles. &lt;p&gt; The &lt;code&gt;ServiceRegistration&lt;/code&gt; object may be used to update the properties of the service or to unregister the service.
 * @see BundleContext#registerService(String[],Object,Dictionary)
 * @ThreadSafe
 * @version $Revision: 1.14 $
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getReference</MethodName>
            <MethodComment>/** 
 * Returns a &lt;code&gt;ServiceReference&lt;/code&gt; object for a service being registered. &lt;p&gt; The &lt;code&gt;ServiceReference&lt;/code&gt; object may be shared with other bundles.
 * @throws java.lang.IllegalStateException If this&lt;code&gt;ServiceRegistration&lt;/code&gt; object has already been unregistered.
 * @return &lt;code&gt;ServiceReference&lt;/code&gt; object.
 */
</MethodComment>
            <ReturnType>ServiceReference</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setProperties</MethodName>
            <MethodComment>/** 
 * Updates the properties associated with a service. &lt;p&gt; The  {@link Constants#OBJECTCLASS} and {@link Constants#SERVICE_ID} keyscannot be modified by this method. These values are set by the Framework when the service is registered in the OSGi environment. &lt;p&gt; The following steps are required to modify service properties: &lt;ol&gt; &lt;li&gt;The service's properties are replaced with the provided properties. &lt;li&gt;A service event of type  {@link ServiceEvent#MODIFIED} isfired. &lt;/ol&gt;
 * @param properties The properties for this service. See {@link Constants}for a list of standard service property keys. Changes should not be made to this object after calling this method. To update the service's properties this method should be called again.
 * @throws IllegalStateException If this &lt;code&gt;ServiceRegistration&lt;/code&gt;object has already been unregistered.
 * @throws IllegalArgumentException If &lt;code&gt;properties&lt;/code&gt; containscase variants of the same key name.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>properties</ParamName>
                    <ParamType>Dictionary</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>unregister</MethodName>
            <MethodComment>/** 
 * Unregisters a service. Remove a &lt;code&gt;ServiceRegistration&lt;/code&gt; object from the Framework service registry. All &lt;code&gt;ServiceReference&lt;/code&gt; objects associated with this &lt;code&gt;ServiceRegistration&lt;/code&gt; object can no longer be used to interact with the service. &lt;p&gt; The following steps are required to unregister a service: &lt;ol&gt; &lt;li&gt;The service is removed from the Framework service registry so that it can no longer be used. &lt;code&gt;ServiceReference&lt;/code&gt; objects for the service may no longer be used to get a service object for the service. &lt;li&gt;A service event of type  {@link ServiceEvent#UNREGISTERING} isfired so that bundles using this service can release their use of it. &lt;li&gt;For each bundle whose use count for this service is greater than zero: &lt;br&gt; The bundle's use count for this service is set to zero. &lt;br&gt; If the service was registered with a  {@link ServiceFactory} object, the&lt;code&gt;ServiceFactory.ungetService&lt;/code&gt; method is called to release the service object for the bundle. &lt;/ol&gt;
 * @throws java.lang.IllegalStateException If this&lt;code&gt;ServiceRegistration&lt;/code&gt; object has already been unregistered.
 * @see BundleContext#ungetService
 * @see ServiceFactory#ungetService
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>