<Class>
    <Id>2007</Id>
    <Package>org.osgi.framework</Package>
    <ClassName>BundleListener</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>EventListener</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>BundleListener  /** 
 * A &lt;code&gt;BundleEvent&lt;/code&gt; listener. &lt;code&gt;BundleListener&lt;/code&gt; is a listener interface that may be implemented by a bundle developer. When a &lt;code&gt;BundleEvent&lt;/code&gt; is fired, it is asynchronously delivered to a &lt;code&gt;BundleListener&lt;/code&gt;. The Framework delivers &lt;code&gt;BundleEvent&lt;/code&gt; objects to a &lt;code&gt;BundleListener&lt;/code&gt; in order and must not concurrently call a &lt;code&gt;BundleListener&lt;/code&gt;. &lt;p&gt; A &lt;code&gt;BundleListener&lt;/code&gt; object is registered with the Framework using the  {@link BundleContext#addBundleListener} method.&lt;code&gt;BundleListener&lt;/code&gt;s are called with a &lt;code&gt;BundleEvent&lt;/code&gt; object when a bundle has been installed, resolved, started, stopped, updated, unresolved, or uninstalled.
 * @see BundleEvent
 * @NotThreadSafe
 * @version $Revision: 1.13 $
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>bundleChanged</MethodName>
            <MethodComment>/** 
 * Receives notification that a bundle has had a lifecycle change.
 * @param event The &lt;code&gt;BundleEvent&lt;/code&gt;.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>event</ParamName>
                    <ParamType>BundleEvent</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>