<Class>
    <Id>334</Id>
    <Package>org.apache.derby.jdbc</Package>
    <ClassName>XATransactionState</ClassName>
    <SuperClass>ContextImpl</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>XATransactionState  /** 
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>TRO_TIMEOUT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>TRO_DEADLOCK</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>TRO_FAIL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>T0_NOT_ASSOCIATED</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>T1_ASSOCIATED</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>TC_COMPLETED</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>conn</FieldName>
            <FieldType>EmbedConnection</FieldType>
        </Field>
        <Field>
            <FieldName>creatingResource</FieldName>
            <FieldType>EmbedXAResource</FieldType>
        </Field>
        <Field>
            <FieldName>associatedResource</FieldName>
            <FieldType>EmbedXAResource</FieldType>
        </Field>
        <Field>
            <FieldName>xid</FieldName>
            <FieldType>XAXactId</FieldType>
        </Field>
        <Field>
            <FieldName>cancelThreadId</FieldName>
            <FieldType>Long</FieldType>
        </Field>
        <Field>
            <FieldName>cleanupThreadId</FieldName>
            <FieldType>Long</FieldType>
        </Field>
        <Field>
            <FieldName>cleanupOrCancelMonitor</FieldName>
            <FieldType>CleanupOrCancelMonitor</FieldType>
        </Field>
        <Field>
            <FieldName>suspendedList</FieldName>
            <FieldType>HashMap</FieldType>
        </Field>
        <Field>
            <FieldName>suspendedList</FieldName>
            <FieldType>EmbedXAResource</FieldType>
        </Field>
        <Field>
            <FieldName>associationState</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>rollbackOnlyCode</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>isPrepared</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>performTimeoutRollback</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>timeoutTask</FieldName>
            <FieldType>CancelXATransactionTask</FieldType>
        </Field>
        <Field>
            <FieldName>xaState</FieldName>
            <FieldType>XATransactionState</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>okToCancel</MethodName>
            <MethodComment>/** 
 * See if it is ok to cancel.  It is okay to cancel if the transaction is not cleaning up from an error.  The assumption is that if the  cleanUpOnError is/has been invoked, then there is no reason for the cancel to be processed as the transaction is going to end (ab)normally.
 * @return &lt;code&gt;true&lt;/code&gt; if it is okay to cancel.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>boolean [res=false]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>okToCleanup</MethodName>
            <MethodComment>/** 
 * See if it is ok to cleanup.  It is okay to cleanup if the transaction is not cancelling.  The assumption is that if the  cancel is/has been invoked, then there is no reason to try to mark the transaction as being in error.  The transaction will  be cancelled in any case.
 * @return &lt;code&gt;true&lt;/code&gt; if it is okay to cleanup.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>boolean [res=false]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>CancelXATransactionTask</MethodName>
            <MethodComment>/** 
 * Creates the cancellation task to be passed to a timer.
 * @param xaState the XA state object for the transaction to cancel
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xaState</ParamName>
                    <ParamType>XATransactionState</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cancel</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment>/** 
 * Runs the cancel task of the global transaction 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTimerFactory</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>TimerFactory</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>XATransactionState</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cm</ParamName>
                    <ParamType>ContextManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>conn</ParamName>
                    <ParamType>EmbedConnection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>resource</ParamName>
                    <ParamType>EmbedXAResource</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>xid</ParamName>
                    <ParamType>XAXactId</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cleanupOnError</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Throwable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>start</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>resource</ParamName>
                    <ParamType>EmbedXAResource</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>flags</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>XAException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>end</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>resource</ParamName>
                    <ParamType>EmbedXAResource</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>flags</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>endingCurrentXid</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [rollbackOnly=false]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>XAException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>scheduleTimeoutTask</MethodName>
            <MethodComment>/** 
 * Schedule a timeout task which will rollback the global transaction after the specified time will elapse.
 * @param timeoutMillis The number of milliseconds to be elapsed beforethe transaction will be rolled back.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>timeoutMillis</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>xa_rollback</MethodName>
            <MethodComment>/** 
 * Rollback the global transaction and cancel the timeout task.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>conn;xa_rollback;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;xa_finalize;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>xa_commit</MethodName>
            <MethodComment>/** 
 * Commit the global transaction and cancel the timeout task.
 * @param onePhase Indicates whether to use one phase commit protocol.Otherwise two phase commit protocol will be used.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>onePhase</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>conn;xa_commit;[onePhase]</InnerMethodInvoke>
                <InnerMethodInvoke>null;xa_finalize;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>xa_prepare</MethodName>
            <MethodComment>/** 
 * Prepare the global transaction for commit.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [retVal]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>xa_finalize</MethodName>
            <MethodComment>/** 
 * This method cancels timeoutTask and assigns 'performTimeoutRollback = false'.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cancel</MethodName>
            <MethodComment>/** 
 * This function is called from the timer task when the transaction times out.
 * @see CancelXATransactionTask
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>messageId</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>XAException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMonitor</MethodName>
            <MethodComment>/** 
 * Privileged Monitor lookup. Must be private so that user code can't call this entry point.
 */
</MethodComment>
            <ReturnType>ModuleFactory</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ModuleFactory</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>