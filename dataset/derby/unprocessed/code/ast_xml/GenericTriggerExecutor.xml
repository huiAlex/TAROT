<Class>
    <Id>1599</Id>
    <Package>org.apache.derby.impl.sql.execute</Package>
    <ClassName>GenericTriggerExecutor</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>GenericTriggerExecutor  /** 
 * A trigger executor is an object that executes a trigger.  It is subclassed by row and statement executors.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>tec</FieldName>
            <FieldType>InternalTriggerExecutionContext</FieldType>
        </Field>
        <Field>
            <FieldName>triggerd</FieldName>
            <FieldType>TriggerDescriptor</FieldType>
        </Field>
        <Field>
            <FieldName>activation</FieldName>
            <FieldType>Activation</FieldType>
        </Field>
        <Field>
            <FieldName>lcc</FieldName>
            <FieldType>LanguageConnectionContext</FieldType>
        </Field>
        <Field>
            <FieldName>whenClauseRetrieved</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>actionRetrieved</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>whenClause</FieldName>
            <FieldType>SPSDescriptor</FieldType>
        </Field>
        <Field>
            <FieldName>action</FieldName>
            <FieldType>SPSDescriptor</FieldType>
        </Field>
        <Field>
            <FieldName>whenPS</FieldName>
            <FieldType>ExecPreparedStatement</FieldType>
        </Field>
        <Field>
            <FieldName>spsWhenActivation</FieldName>
            <FieldType>Activation</FieldType>
        </Field>
        <Field>
            <FieldName>actionPS</FieldName>
            <FieldType>ExecPreparedStatement</FieldType>
        </Field>
        <Field>
            <FieldName>spsActionActivation</FieldName>
            <FieldType>Activation</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>GenericTriggerExecutor</MethodName>
            <MethodComment>/** 
 * Constructor
 * @param tec the execution context
 * @param triggerd the trigger descriptor
 * @param activation the activation
 * @param lcc the lcc
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tec</ParamName>
                    <ParamType>InternalTriggerExecutionContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>triggerd</ParamName>
                    <ParamType>TriggerDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>activation</ParamName>
                    <ParamType>Activation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lcc</ParamName>
                    <ParamType>LanguageConnectionContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fireTrigger</MethodName>
            <MethodComment>/** 
 * Fire the trigger based on the event.
 * @param event	    the trigger event
 * @param brs		the before result set
 * @param ars		the after result set
 * @param colsReadFromTable   columns required from the trigger tableby the triggering sql
 * @exception StandardException on error or user exceptionfrom trigger action
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>event</ParamName>
                    <ParamType>TriggerEvent</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>brs</ParamName>
                    <ParamType>CursorResultSet</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ars</ParamName>
                    <ParamType>CursorResultSet</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>colsReadFromTable</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getWhenClause</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>SPSDescriptor</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAction</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>SPSDescriptor</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>executeSPS</MethodName>
            <MethodComment>/** 
 * Execute the given stored prepared statement.  We just grab the prepared statement from the spsd, get a new activation holder and let er rip.
 * @param sps the SPS to execute
 * @param isWhen {@code true} if the SPS is for the WHEN clause,{@code false} otherwise
 * @return {@code true} if the SPS is for a WHEN clause and it evaluatedto  {@code TRUE},  {@code false} otherwise
 * @exception StandardException on error
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sps</ParamName>
                    <ParamType>SPSDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isWhen</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [recompile=false]</InnerVar>
                <InnerVar>boolean [whenClauseWasTrue=false]</InnerVar>
                <InnerVar>ExecPreparedStatement [ps=isWhen ? whenPS : actionPS]</InnerVar>
                <InnerVar>Activation [spsActivation=isWhen ? spsWhenActivation : spsActionActivation]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clearSPS</MethodName>
            <MethodComment>/** 
 * Cleanup after executing the SPS for the WHEN clause and trigger action.
 * @exception StandardException on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>executeWhenClauseAndAction</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Execute the WHEN clause SPS and the trigger action SPS. &lt;/p&gt; &lt;p&gt; If there is no WHEN clause, the trigger action should always be executed. If there is a WHEN clause, the trigger action should only be executed if the WHEN clause returns TRUE. &lt;/p&gt;
 * @throws StandardException if trigger execution fails
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>SPSDescriptor [whenClauseDescriptor=getWhenClause()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>