<Class>
    <Id>840</Id>
    <Package>org.apache.derbyDemo.vtis.example</Package>
    <ClassName>PropertyFileVTI</ClassName>
    <SuperClass>FlatFileVTI</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>PropertyFileVTI  /** 
 * &lt;p&gt; This VTI makes a table out of a property file. &lt;/p&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>COLUMN_NAMES</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>PROPERTY_KEY</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>PROPERTY_VALUE</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>PropertyFileVTI</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Build a PropertyFileVTI given the name of a Derby message file in the source tree. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>propertyFileName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>propertyFileVTI</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; This is the method which is registered as a table function. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>ResultSet</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>propertyFileName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseRow</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Parse the next chunk of text, using readLine(), and return the next row. Returns null if the file is exhausted. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>String[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String[] [newRow=new String[COLUMN_NAMES.length]]</InnerVar>
                <InnerVar>String [nextLine=null]</InnerVar>
                <InnerVar>String [oldLine=""]</InnerVar>
                <InnerVar>int [equalsIdx=nextLine.indexOf('=')]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>