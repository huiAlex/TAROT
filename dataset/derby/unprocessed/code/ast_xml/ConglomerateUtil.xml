<Class>
    <Id>435</Id>
    <Package>org.apache.derby.impl.store.access.conglomerate</Package>
    <ClassName>ConglomerateUtil</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ConglomerateUtil  /** 
 * Static utility routine package for all Conglomerates. &lt;p&gt; A collection of static utility routines that are shared by multiple Conglomerate implementations. &lt;p&gt;
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>createRawStorePropertySet</MethodName>
            <MethodComment>/** 
 * Create a list of all the properties that Access wants to export through the getInternalTablePropertySet() call. &lt;p&gt; This utility routine creates a list of properties that are shared by all conglomerates.  This list contains the following: derby.storage.initialPages derby.storage.minimumRecordSize derby.storage.pageReservedSpace derby.storage.pageSize  derby.storage.reusableRecordId &lt;p&gt;
 * @return The Property set filled in.
 * @param prop   If non-null the property set to fill in.
 */
</MethodComment>
            <ReturnType>Properties</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>prop</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>prop;put;[RawStoreFactory.PAGE_REUSABLE_RECORD_ID, ""]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createUserRawStorePropertySet</MethodName>
            <MethodComment>/** 
 * Create a list of all the properties that Access wants to export through the getInternalTablePropertySet() call. &lt;p&gt; This utility routine creates a list of properties that are shared by all conglomerates.  This list contains the following: derby.storage.initialPages derby.storage.minimumRecordSize derby.storage.pageReservedSpace derby.storage.pageSize  &lt;p&gt;
 * @return The Property set filled in.
 * @param prop   If non-null the property set to fill in.
 */
</MethodComment>
            <ReturnType>Properties</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>prop</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>prop;put;[Property.PAGE_SIZE_PARAMETER, ""]</InnerMethodInvoke>
                <InnerMethodInvoke>prop;put;[RawStoreFactory.MINIMUM_RECORD_SIZE_PARAMETER, ""]</InnerMethodInvoke>
                <InnerMethodInvoke>prop;put;[RawStoreFactory.PAGE_RESERVED_SPACE_PARAMETER, ""]</InnerMethodInvoke>
                <InnerMethodInvoke>prop;put;[RawStoreFactory.CONTAINER_INITIAL_PAGES, ""]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createFormatIds</MethodName>
            <MethodComment>/** 
 * Given an array of objects, return an array of format id's. &lt;p&gt;
 * @return An array of format id's describing the input array of objects.
 * @param template a row.
 */
</MethodComment>
            <ReturnType>int[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>template</ParamName>
                    <ParamType>DataValueDescriptor[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int[] [format_ids=new int[template.length]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readFormatIdArray</MethodName>
            <MethodComment>/** 
 * Read a format id array in from a stream. &lt;p&gt;
 * @return A new array of format id's.
 * @param num         The number of format ids to read.
 * @param in          The stream to read the array of format id's from.
 * @exception IOException  Thown on read error.
 */
</MethodComment>
            <ReturnType>int[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>num</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>in</ParamName>
                    <ParamType>ObjectInput</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int[] [format_ids=new int[num]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeFormatIdArray</MethodName>
            <MethodComment>/** 
 * Write a format id array to a stream. &lt;p&gt;
 * @param format_id_array The array of format ids to write.
 * @param out             The stream to write the array of format id's to.
 * @exception IOException  Thown on write error.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>format_id_array</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>ObjectOutput</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createCollationIds</MethodName>
            <MethodComment>/** 
 * Given an array of columnOrderings, return an array of collation ids. &lt;p&gt; If input array is null, produce a default collation_id array of all StringDataValue.COLLATION_TYPE_UCS_BASIC values.
 * @return An array of collation id's describing the input array of objects.
 */
</MethodComment>
            <ReturnType>int[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sizeof_ids</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>collationIds</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int[] [collation_ids=new int[sizeof_ids]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeCollationIdArray</MethodName>
            <MethodComment>/** 
 * Write array of collation id's as a sparse array. &lt;p&gt; The format only writes out those array entries which are not  StringDataValue.COLLATION_TYPE_UCS_BASIC.  The sparse array first writes the number of entries as a compressed int.  And then for each non-COLLATION_TYPE_UCS_BASIC, it writes out a pair of compressed ints: (array offset, array entry value)
 * @param collation_id_array The array of collation ids to write.
 * @param out                The stream to write the collation id's to.
 * @exception IOException  Thown on write error.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>collation_id_array</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>ObjectOutput</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [non_collate_val_count=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>CompressedNumber;writeInt;[out, non_collate_val_count]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readCollationIdArray</MethodName>
            <MethodComment>/** 
 * Read "sparse" array of collation id's &lt;p&gt; The format to be read first has the number of entries as a compressed  int.  And then for each non-COLLATION_TYPE_UCS_BASIC value there is pair of compressed ints: (array offset, array entry value) &lt;p&gt; reads the sparse array as written by writeCollationIdArray().
 * @param collation_id_array update's only those array entries that havebeen set in the sparse array stream. Those values are set as indicated by reading  the sparse array from the stream.
 * @param in                 The stream to read the collation info from.
 * @return {@code true} if at least one column has a different collationthan UCS BASIC,  {@code false} otherwise.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>collation_id_array</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>in</ParamName>
                    <ParamType>ObjectInput</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [num_compressed_entries=CompressedNumber.readInt(in)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>debugPage</MethodName>
            <MethodComment>/** 
 * Format a page of data, as access see's it.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>page</ParamName>
                    <ParamType>Page</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>start_slot</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>full_rh</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>template</ParamName>
                    <ParamType>DataValueDescriptor[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>