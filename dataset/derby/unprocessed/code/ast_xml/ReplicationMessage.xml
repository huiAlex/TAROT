<Class>
    <Id>398</Id>
    <Package>org.apache.derby.impl.store.replication.net</Package>
    <ClassName>ReplicationMessage</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Externalizable</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ReplicationMessage  /** 
 * This message is used for the communication between the master and the slave during Replication. The message is composed of a type flag and corresponding object. Each type flag indicating the type of the  content bundled inside the message.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>serialVersionUID</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>message</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>type</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>TYPE_INITIATE_VERSION</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>TYPE_INITIATE_INSTANT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>TYPE_LOG</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>TYPE_ACK</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>TYPE_ERROR</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>TYPE_PING</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>TYPE_PONG</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>TYPE_STOP</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>TYPE_FAILOVER</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ReplicationMessage</MethodName>
            <MethodComment>/** 
 * public No args constructor required with Externalizable.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ReplicationMessage</MethodName>
            <MethodComment>/** 
 * Constructor used to set the &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;message&lt;/code&gt;. This is used while creating messages for sending while readExternal is used on the receiving end.
 * @param type      The type of this message. Must be one of the messagetype constants of this class (TYPE_LOG, TYPE_ACK, TYPE_ERROR, TYPE_INITIATE).
 * @param message   The message to be transmitted.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>message</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMessage</MethodName>
            <MethodComment>/** 
 * Used to get the actual message that is wrapped inside the ReplicationMessage object.
 * @return The object contained in the message
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getType</MethodName>
            <MethodComment>/** 
 * Used to get the type of this &lt;code&gt;ReplicationMessage&lt;/code&gt;.
 * @return The type of the message.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readExternal</MethodName>
            <MethodComment>/** 
 * Used to restore the contents of this object.
 * @param in the stream to read data from in order to restore the object.
 * @throws IOException If an exception occurs while reading from the&lt;code&gt;InputStream&lt;/code&gt;.
 * @throws ClassNotFoundException Class of a serialized object cannotbe found.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>in</ParamName>
                    <ParamType>ObjectInput</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>ClassNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeExternal</MethodName>
            <MethodComment>/** 
 * Used to save the contents of this Object.
 * @param out the stream to write the object to.
 * @throws IOException if an exception occurs while writing to the&lt;code&gt;OutputStream&lt;/code&gt;.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>ObjectOutput</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>out;writeLong;[serialVersionUID]</InnerMethodInvoke>
                <InnerMethodInvoke>out;writeInt;[type]</InnerMethodInvoke>
                <InnerMethodInvoke>out;writeObject;[message]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>