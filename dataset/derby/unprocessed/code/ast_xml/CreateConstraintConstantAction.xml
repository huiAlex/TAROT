<Class>
    <Id>2026</Id>
    <Package>org.apache.derby.impl.sql.execute</Package>
    <ClassName>CreateConstraintConstantAction</ClassName>
    <SuperClass>ConstraintConstantAction</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>CreateConstraintConstantAction  /** 
 * This class  describes actions that are ALWAYS performed for a constraint creation at Execution time.
 * @version 0.1
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>forCreateTable</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>columnNames</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>constraintText</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>otherConstraintInfo</FieldName>
            <FieldType>ConstraintInfo</FieldType>
        </Field>
        <Field>
            <FieldName>cf</FieldName>
            <FieldType>ClassFactory</FieldType>
        </Field>
        <Field>
            <FieldName>enabled</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>characteristics</FieldName>
            <FieldType>boolean[]</FieldType>
        </Field>
        <Field>
            <FieldName>providerInfo</FieldName>
            <FieldType>ProviderInfo[]</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>CreateConstraintConstantAction</MethodName>
            <MethodComment>/** 
 * Make one of these puppies.
 * @param constraintName	Constraint name.
 * @param constraintType	Constraint type.
 * @param characteristics  Constraint characteristics
 * @param forCreateTable   Constraint is being added for a CREATE TABLE
 * @param tableName		Table name.
 * @param tableId			UUID of table.
 * @param schemaName		the schema that table and constraint lives in.
 * @param columnNames		String[] for column names
 * @param indexAction		IndexConstantAction for constraint (if necessary)
 * @param constraintText	Text for check constraint
 * @param otherConstraint 	information about the constraint that this references
 * @param providerInfo Information on all the Providers
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>constraintName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>constraintType</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>characteristics</ParamName>
                    <ParamType>boolean[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>forCreateTable</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableId</ParamName>
                    <ParamType>UUID</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>schemaName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columnNames</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indexAction</ParamName>
                    <ParamType>IndexConstantAction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>constraintText</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>otherConstraint</ParamName>
                    <ParamType>ConstraintInfo</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>providerInfo</ParamName>
                    <ParamType>ProviderInfo[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>executeConstantAction</MethodName>
            <MethodComment>/** 
 * This is the guts of the Execution-time logic for CREATE CONSTRAINT. &lt;P&gt; A constraint is represented as: &lt;UL&gt; &lt;LI&gt; ConstraintDescriptor. &lt;/UL&gt; If a backing index is required then the index will be created through an CreateIndexConstantAction setup by the compiler. &lt;BR&gt; Dependencies are created as: &lt;UL&gt; &lt;LI&gt; ConstraintDescriptor depends on all the providers collected at compile time and passed into the constructor. &lt;LI&gt; For a FOREIGN KEY constraint ConstraintDescriptor depends on the ConstraintDescriptor for the referenced constraints and the privileges required to create the constraint. &lt;/UL&gt;
 * @see ConstraintDescriptor
 * @see CreateIndexConstantAction
 * @see ConstantAction#executeConstantAction
 * @exception StandardException		Thrown on failure
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>activation</ParamName>
                    <ParamType>Activation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ConglomerateDescriptor [conglomDesc=null]</InnerVar>
                <InnerVar>ConglomerateDescriptor[] [conglomDescs=null]</InnerVar>
                <InnerVar>ConstraintDescriptor [conDesc=null]</InnerVar>
                <InnerVar>TableDescriptor [td=null]</InnerVar>
                <InnerVar>UUID [indexId=null]</InnerVar>
                <InnerVar>String [uniqueName]</InnerVar>
                <InnerVar>String [backingIndexName]</InnerVar>
                <InnerVar>LanguageConnectionContext [lcc=activation.getLanguageConnectionContext()]</InnerVar>
                <InnerVar>DataDictionary [dd=lcc.getDataDictionary()]</InnerVar>
                <InnerVar>DependencyManager [dm=dd.getDependencyManager()]</InnerVar>
                <InnerVar>TransactionController [tc=lcc.getTransactionExecute()]</InnerVar>
                <InnerVar>SchemaDescriptor [sd=dd.getSchemaDescriptor(schemaName,tc,true)]</InnerVar>
                <InnerVar>UUIDFactory [uuidFactory=dd.getUUIDFactory()]</InnerVar>
                <InnerVar>UUID [constrId=uuidFactory.createUUID()]</InnerVar>
                <InnerVar>boolean[] [defaults=new boolean[]{ConstraintDefinitionNode.DEFERRABLE_DEFAULT,ConstraintDefinitionNode.INITIALLY_DEFERRED_DEFAULT,ConstraintDefinitionNode.ENFORCED_DEFAULT}]</InnerVar>
                <InnerVar>DataDescriptorGenerator [ddg=dd.getDataDescriptorGenerator()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>dd;startWriting;[lcc]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isForeignKeyConstraint</MethodName>
            <MethodComment>/** 
 * Is the constant action for a foreign key
 * @return true/false
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isInitiallyDeferred</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>genColumnPositions</MethodName>
            <MethodComment>/** 
 * Generate an array of column positions for the column list in the constraint.
 * @param td	The TableDescriptor for the table in question
 * @param columnsMustBeOrderable	true for primaryKey and unique constraints
 * @return int[]	The column positions.
 */
</MethodComment>
            <ReturnType>int[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>td</ParamName>
                    <ParamType>TableDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columnsMustBeOrderable</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int[] [baseColumnPositions]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getConstraintText</MethodName>
            <MethodComment>/** 
 * Get the text defining this constraint.
 * @return	constraint text
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>StringBuffer [strbuf=new StringBuffer()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>strbuf;append;["CREATE CONSTRAINT " + constraintName]</InnerMethodInvoke>
                <InnerMethodInvoke>strbuf;append;["\n=========================\n"]</InnerMethodInvoke>
                <InnerMethodInvoke>strbuf;append;["\n"]</InnerMethodInvoke>
                <InnerMethodInvoke>strbuf;append;[constraintText]</InnerMethodInvoke>
                <InnerMethodInvoke>strbuf;append;["\n"]</InnerMethodInvoke>
                <InnerMethodInvoke>strbuf;append;["\n"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>