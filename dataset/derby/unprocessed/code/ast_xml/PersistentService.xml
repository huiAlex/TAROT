<Class>
    <Id>1013</Id>
    <Package>org.apache.derby.iapi.services.monitor</Package>
    <ClassName>PersistentService</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>PersistentService  /** 
 * A PersistentService modularises the access to persistent services, abstracting out details such as finding the list of services to be started at boot time, finding the service.properties file and creating and deleting the persistent storage for a service. &lt;P&gt; These modules must only be used by the monitor. &lt;P&gt; Possible examples of implementations are: &lt;UL&gt; &lt;LI&gt; Store services in a directory in the file system. &lt;LI&gt; Store services in a zip file &lt;LI&gt; Service data is provided by a web server &lt;LI&gt; Service data is stored on the class path. &lt;/UL&gt; &lt;P&gt; This class also serves as the registry the defined name for all the implementations of PersistentService. These need to be kept track of as they can be used in JDBC URLS. &lt;P&gt; An implementation of PersistentService can implement ModuleSupportable but must not implement ModuleControl. This is because the monitor will not execute ModuleControl methods for a PersistentService.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>DIRECTORY</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>CLASSPATH</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>JAR</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>HTTP</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>HTTPS</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>INMEMORY</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>DB_README_FILE_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>PROPERTIES_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>ROOT</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>TYPE</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getType</MethodName>
            <MethodComment>/** 
 * Return the type of this service.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBootTimeServices</MethodName>
            <MethodComment>/** 
 * Return an Enumeration of service names descriptors (Strings) that should be be started at boot time by the monitor. The monitor will boot the service if getServiceProperties() returns a Properties object and the properties does not indicate the service should not be auto-booted. &lt;P&gt; This method may return null if there are no services that need to be booted automatically at boot time. &lt;P&gt; The service name returned by the Enumeration must be in its canonical form.
 */
</MethodComment>
            <ReturnType>Enumeration</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createDataWarningFile</MethodName>
            <MethodComment>/** 
 * Put a readme file in database directory which will caution users against touching any files in the directory. This file will be created at database creation time.
 * @param sf StorageFactory will be used to create the file
 * @exception StandardException File can't be created
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sf</ParamName>
                    <ParamType>StorageFactory</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getServiceProperties</MethodName>
            <MethodComment>/** 
 * For a service return its service properties, typically from the service.properties file.
 * @return A Properties object or null if serviceName does not represent a valid service.
 * @exception StandardException Service appears valid but the properties cannot be created.
 */
</MethodComment>
            <ReturnType>Properties</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>serviceName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>defaultProperties</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>saveServiceProperties</MethodName>
            <MethodComment>/** 
 * @exception StandardException Properties cannot be saved.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>serviceName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>storageFactory</ParamName>
                    <ParamType>StorageFactory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>properties</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>replace</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>saveServiceProperties</MethodName>
            <MethodComment>/** 
 * Save to a backup file.
 * @exception StandardException Properties cannot be saved.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>serviceName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>properties</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createServiceRoot</MethodName>
            <MethodComment>/** 
 * Returns the canonical name of the service.
 * @exception StandardException Service root cannot be created.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>deleteExisting</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeServiceRoot</MethodName>
            <MethodComment>/** 
 * Remove a service's root and its contents.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>serviceName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCanonicalServiceName</MethodName>
            <MethodComment>/** 
 * Convert a service name into its canonical form. Returns null if the name cannot be converted into a canonical form.
 * @exception StandardException if an error happens when converting thename (name probably invalid)
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getUserServiceName</MethodName>
            <MethodComment>/** 
 * Return the user form of a service name. This name is only valid within this system. The separator character used must be '/'
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>serviceName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isSameService</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>serviceName1</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>serviceName2</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasStorageFactory</MethodName>
            <MethodComment>/** 
 * @return true if the PersistentService has a StorageFactory, false if not.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStorageFactoryInstance</MethodName>
            <MethodComment>/** 
 * Get an initialized StorageFactoryInstance
 * @param useHome If true and the database name is not absolute then the database directory will berelative to the home directory, if one is defined in the properties file.
 * @param databaseName The name of the database (directory). The name does not include the subSubProtocol.If null then the storage factory will only be used to deal with the directory containing the databases.
 * @param tempDirName The name of the temporary file directory set in properties. If null then a defaultdirectory should be used. Each database should get a separate temporary file directory within this one to avoid collisions.
 * @param uniqueName A unique name that can be used to create the temporary file directory for this database.If null then temporary files will not be created in this StorageFactory instance.
 * @return An initialized StorageFactory.
 */
</MethodComment>
            <ReturnType>StorageFactory</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>useHome</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>databaseName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tempDirName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>uniqueName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>