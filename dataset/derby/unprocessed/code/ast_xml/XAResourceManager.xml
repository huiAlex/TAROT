<Class>
    <Id>2021</Id>
    <Package>org.apache.derby.iapi.store.access.xa</Package>
    <ClassName>XAResourceManager</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>XAResourceManager  /** 
 * This interface allows access to commit,prepare,abort global transactions as part of a two phase commit protocol.  These interfaces have been chosen to be exact implementations required to implement the XAResource interfaces as part of the JTA standard extension. &lt;P&gt; It is expected that the following interfaces are only used during the  recovery portion of 2 phase commit, when the transaction manager is cleaning up after a runtime crash - it is expected that no current context managers exist for the Xid's being operated on.  The "online" two phase commit protocol will be implemented by calls directly on a TransactionController. &lt;P&gt; The XAResource interface is a Java mapping of the industry standard XA resource manager interface.  Please refer to: X/Open CAE Specification - Distributed  Transaction Processing: The XA Specification, X/Open Document No. XO/CAE/91/300 or ISBN 1 872630 24 3. &lt;P&gt;
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>commit</MethodName>
            <MethodComment>/** 
 * This method is called to commit the global transaction specified by xid. &lt;p&gt; RESOLVE - how do we map to the "right" XAExceptions. &lt;p&gt;
 * @param cm       The ContextManager returned from the find() call.
 * @param xid      A global transaction identifier.
 * @param onePhase If true, the resource manager should use a one-phasecommit protocol to commit the work done on behalf of  xid.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cm</ParamName>
                    <ParamType>ContextManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>xid</ParamName>
                    <ParamType>Xid</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>onePhase</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>find</MethodName>
            <MethodComment>/** 
 * Find the given Xid in the transaction table. &lt;p&gt; This routine is used to find a in-doubt transaction from the list of Xid's returned from the recover() routine.   &lt;p&gt; In the current implementation it is up to the calling routine to make the returned ContextManager the "current" ContextManager before calls to commit,abort, or forget.  The caller is responsible for error handling, ie. calling cleanupOnError() on the correct ContextManager. &lt;p&gt; If the Xid is not in the system, "null" is returned. RESOLVE - find out from sku if she wants a exception instead? &lt;p&gt;
 * @param xid      A global transaction identifier.
 */
</MethodComment>
            <ReturnType>ContextManager</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xid</ParamName>
                    <ParamType>Xid</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>forget</MethodName>
            <MethodComment>/** 
 * This method is called to remove the given transaction  from the transaction table/log. &lt;p&gt; Used to let the store remove all record from log and transaction table of the given transaction.  This should only be used to  clean up heuristically completed transactions, otherwise commit or abort should be used to act on other transactions. &lt;p&gt; If forget() is called on a transaction which has not be heuristically completed then it will throw an exception: SQLState.STORE_XA_PROTOCOL_VIOLATION.
 * @param cm       The ContextManager returned from the find() call.
 * @param xid      A global transaction identifier.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cm</ParamName>
                    <ParamType>ContextManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>xid</ParamName>
                    <ParamType>Xid</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>recover</MethodName>
            <MethodComment>/** 
 * This method is called to obtain a list of prepared transactions. &lt;p&gt; This call returns a complete list of global transactions which are  either prepared or heuristically complete. &lt;p&gt; The XAResource interface expects a scan type interface, but our implementation only returns a complete list of transactions.  So to simulate the scan the following state is maintained.  If TMSTARTSCAN is specified the complete list is returned.  If recover is called with TMNOFLAGS is ever called a 0 length array is returned.  
 * @return Return a array with 0 or more Xid's which are currently inprepared or heuristically completed state.  If an error occurs during the operation, an appropriate error is thrown.
 * @param flags    combination of the following flags XAResource.{TMSTARTRSCAN,TMENDRSCAN,TMNOFLAGS}.   TMNOFLAGS must be used when no other flags are used.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>Xid[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>flags</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rollback</MethodName>
            <MethodComment>/** 
 * rollback the transaction identified by Xid. &lt;p&gt; The given transaction is roll'ed back and it's history is not maintained in the transaction table or long term log. &lt;p&gt;
 * @param cm       The ContextManager returned from the find() call.
 * @param xid      A global transaction identifier.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cm</ParamName>
                    <ParamType>ContextManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>xid</ParamName>
                    <ParamType>Xid</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>