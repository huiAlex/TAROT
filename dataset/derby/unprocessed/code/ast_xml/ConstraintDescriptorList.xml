<Class>
    <Id>448</Id>
    <Package>org.apache.derby.iapi.sql.dictionary</Package>
    <ClassName>ConstraintDescriptorList</ClassName>
    <SuperClass>ArrayList</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>scanned</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>setScanned</MethodName>
            <MethodComment>/** 
 * Mark whether or not the underlying system table has been scanned.  (If a table does not have any constraints then the size of its CDL will always be 0.  We used these get/set methods to determine when we need to scan the table.
 * @param scanned	Whether or not the underlying system table has been scanned.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>scanned</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getScanned</MethodName>
            <MethodComment>/** 
 * Return whether or not the underlying system table has been scanned.
 * @return		Where or not the underlying system table has been scanned.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getConstraintDescriptor</MethodName>
            <MethodComment>/** 
 * Get the ConstraintDescriptor with the matching UUID String for the backing index.
 * @param indexUUID		The UUID  for the backing index.
 * @return The matching ConstraintDescriptor.
 */
</MethodComment>
            <ReturnType>ConstraintDescriptor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>indexUUID</ParamName>
                    <ParamType>UUID</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ConstraintDescriptor [retCD=null]</InnerVar>
                <InnerVar>int [size=size()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getConstraintDescriptorById</MethodName>
            <MethodComment>/** 
 * Get the ConstraintDescriptor with the matching constraint id.
 * @param uuid		The constraint id.
 * @return The matching ConstraintDescriptor.
 */
</MethodComment>
            <ReturnType>ConstraintDescriptor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>uuid</ParamName>
                    <ParamType>UUID</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ConstraintDescriptor [returnCD=null]</InnerVar>
                <InnerVar>int [size=size()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>dropConstraintDescriptorById</MethodName>
            <MethodComment>/** 
 * Drop the constraint with the given UUID.
 * @param uuid		The constraint id.
 * @return The matching ConstraintDescriptor.
 */
</MethodComment>
            <ReturnType>ConstraintDescriptor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>uuid</ParamName>
                    <ParamType>UUID</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ConstraintDescriptor [cd=null]</InnerVar>
                <InnerVar>int [size=size()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getConstraintDescriptorByName</MethodName>
            <MethodComment>/** 
 * Get the ConstraintDescriptor with the matching constraint name.
 * @param sd		The constraint schema descriptor.
 * @param name		The constraint name.
 * @return The matching ConstraintDescriptor.
 */
</MethodComment>
            <ReturnType>ConstraintDescriptor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sd</ParamName>
                    <ParamType>SchemaDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ConstraintDescriptor [retCD=null]</InnerVar>
                <InnerVar>int [size=size()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPrimaryKey</MethodName>
            <MethodComment>/** 
 * Get the ConstraintDescriptor with the matching constraint name.
 * @return The matching ConstraintDescriptor.
 */
</MethodComment>
            <ReturnType>ReferencedKeyConstraintDescriptor</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [size=size()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getConstraintDescriptorList</MethodName>
            <MethodComment>/** 
 * Return a list of constraints where enforced is as passed in.
 * @param enforced true or false
 * @return a constraint descriptor list built from this.  Alwaysa new list even if all the elements in this were of the correct type (i.e. not optimized for the case where every element is desired).
 */
</MethodComment>
            <ReturnType>ConstraintDescriptorList</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>enforced</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ConstraintDescriptorList [cdl=new ConstraintDescriptorList()]</InnerVar>
                <InnerVar>int [size=size()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>elementAt</MethodName>
            <MethodComment>/** 
 * Return the nth (0-based) element in the list.
 * @param n	Which element to return.
 * @return The nth element in the list.
 */
</MethodComment>
            <ReturnType>ConstraintDescriptor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>n</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSubList</MethodName>
            <MethodComment>/** 
 * Return a ConstraintDescriptorList containing the ConstraintDescriptors of the specified type that are in this list.
 * @param type	The constraint type.
 * @return A ConstraintDescriptorList containing the ConstraintDescriptorsof the specified type that are in this list.
 */
</MethodComment>
            <ReturnType>ConstraintDescriptorList</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ConstraintDescriptorList [cdl=new ConstraintDescriptorList()]</InnerVar>
                <InnerVar>int [size=size()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>