<Class>
    <Id>1798</Id>
    <Package>org.apache.derbyTesting.functionTests.tests.memorydb</Package>
    <ClassName>MemoryDbManager</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>MemoryDbManager  /** 
 * Collection of convenience methods for dealing with in-memory databases. The class will keep track of databases, connections and statements created through its methods, and will delete / close these when the clean up method is invoked. This is very much the same as what {@code BaseJDBCTestCase} does, with the exception of deleting thedatabases. &lt;p&gt; Note: It may be possible to integrate this functionality into the existing JUnit framework, for instance if you want to run the entire test suite with the in-memory back end.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>ATTR_CREATE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>JDBC_PREFIX</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>DBM</FieldName>
            <FieldType>MemoryDbManager</FieldType>
        </Field>
        <Field>
            <FieldName>STATEMENTS</FieldName>
            <FieldType>ArrayList</FieldType>
        </Field>
        <Field>
            <FieldName>STATEMENTS</FieldName>
            <FieldType>Statement</FieldType>
        </Field>
        <Field>
            <FieldName>CONNECTIONS</FieldName>
            <FieldType>ArrayList</FieldType>
        </Field>
        <Field>
            <FieldName>CONNECTIONS</FieldName>
            <FieldType>Connection</FieldType>
        </Field>
        <Field>
            <FieldName>DATABASES</FieldName>
            <FieldType>ArrayList</FieldType>
        </Field>
        <Field>
            <FieldName>DATABASES</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getSharedInstance</MethodName>
            <MethodComment>/** 
 * Returns a shared manager instance.
 * @return The shared manager instance.
 */
</MethodComment>
            <ReturnType>MemoryDbManager</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>MemoryDbManager</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getConnection</MethodName>
            <MethodComment>/** 
 * Creates a new connection to the specified database (url). &lt;p&gt; Note that the specified URL will be appended to a fixed JDBC protcol prefix.
 * @param dbNameAndAttributes database name and any JDBC url attributes
 * @return A connection to the specified database.
 * @throws SQLException if connecting to the database fails
 */
</MethodComment>
            <ReturnType>Connection</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dbNameAndAttributes</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [url=JDBC_PREFIX + dbNameAndAttributes]</InnerVar>
                <InnerVar>Connection [con=DriverManager.getConnection(url)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createStatement</MethodName>
            <MethodComment>/** 
 * Creates a new statement from the given connection and keeps track of it and closes it when the clean up is invoked.
 * @param con the connection to use for creation
 * @return A new statement.
 * @throws SQLException if creating the statement fails
 * @see #cleanUp()
 */
</MethodComment>
            <ReturnType>Statement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>con</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Statement [stmt=con.createStatement()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>STATEMENTS;add;[stmt]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>prepareStatement</MethodName>
            <MethodComment>/** 
 * Creates a new prepared statement from the given connection and keeps track of it and closes it when the clean up is invoked.
 * @param con the connection to use for creation
 * @param sql the sql text to prepare
 * @return A new prepared statement.
 * @throws SQLException if creating the statement fails
 * @see #cleanUp()
 */
</MethodComment>
            <ReturnType>PreparedStatement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>con</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sql</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PreparedStatement [pStmt=con.prepareStatement(sql)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>STATEMENTS;add;[pStmt]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>dropDatabase</MethodName>
            <MethodComment>/** 
 * Drops the specified database. &lt;p&gt; Note that the specified URL will be appended to a fixed JDBC protcol prefix.
 * @param dbNameAndAttributes the database name and any attributesrequired to access the database (&lt;em&gt;excluding&lt;/em&gt; the delete attribute, which is added by this method)
 * @throws SQLException if deleting the database fails
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dbNameAndAttributes</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [url=JDBC_PREFIX + dbNameAndAttributes + ";drop=true"]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createDatabase</MethodName>
            <MethodComment>/** 
 * Creates a new database and keeps track of it to delete it when the clean up is invoked. &lt;p&gt; If the database already exists, a connection to the existing database is returned.
 * @param dbName the database name
 * @return A connection to the database.
 * @throws SQLException if creating or connecting to the database fails
 */
</MethodComment>
            <ReturnType>Connection</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dbName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createDatabase</MethodName>
            <MethodComment>/** 
 * Creates a new database and keeps track of it to delete it when the clean up is invoked. &lt;p&gt; If the database already exists, a connection to the existing database is returned.
 * @param dbName the database name
 * @param dbAttributes database attributes (i.e. encryption)
 * @param user user name
 * @param password user password
 * @return A connection to the database.
 * @throws SQLException if creating or connecting to the database fails
 */
</MethodComment>
            <ReturnType>Connection</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dbName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dbAttributes</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>user</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>password</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [userAttr=""]</InnerVar>
                <InnerVar>String [url=dbName]</InnerVar>
                <InnerVar>Connection [con=getConnection(url)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>DATABASES;add;[dbName + userAttr]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cleanUp</MethodName>
            <MethodComment>/** 
 * Cleans up database resources by closing known statements and connection, and deleting known in-memory databases.
 * @throws SQLException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>