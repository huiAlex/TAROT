<Class>
    <Id>370</Id>
    <Package>org.apache.derby.jdbc</Package>
    <ClassName>EmbeddedDataSource</ClassName>
    <SuperClass>ReferenceableDataSource</SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Referenceable</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>EmbeddedDataSource  /** 
 * &lt;P&gt; This data source is suitable for an application using embedded Derby, running on full Java SE 6 and higher, corresponding to 4.0 and higher. &lt;/P&gt; &lt;P&gt;A DataSource  is a factory for Connection objects. An object that implements the DataSource interface will typically be registered with a JNDI service provider.&lt;/P&gt; &lt;P&gt; EmbeddedDataSource automatically supports the correct JDBC specification version for the Java Virtual Machine's environment.&lt;/P&gt; &lt;UL&gt; &lt;LI&gt;JDBC 4.0 - Java SE 6&lt;/LI&gt; &lt;LI&gt;JDBC 4.1 - Java SE 7&lt;/LI&gt; &lt;LI&gt;JDBC 4.2 - full Java SE 8&lt;/LI&gt; &lt;/UL&gt; &lt;P&gt; Use BasicEmbeddedDataSource40 if your application runs on Java 8 Compact Profile 2. &lt;/P&gt; &lt;P&gt;The following is a list of properties that can be set on a Derby DataSource object: &lt;P&gt;&lt;B&gt;Standard DataSource properties&lt;/B&gt; (from JDBC 3.0 specification). &lt;UL&gt;&lt;LI&gt;&lt;B&gt;&lt;code&gt;databaseName&lt;/code&gt;&lt;/B&gt; (String): &lt;I&gt;Mandatory&lt;/I&gt; &lt;BR&gt;This property must be set and it identifies which database to access.  If a database named wombat located at g:/db/wombat is to be accessed, then one should call &lt;code&gt;setDatabaseName("g:/db/wombat")&lt;/code&gt; on the data source object.&lt;/LI&gt; &lt;LI&gt;&lt;B&gt;&lt;code&gt;dataSourceName&lt;/code&gt;&lt;/B&gt; (String): &lt;I&gt;Optional&lt;/I&gt; &lt;BR&gt; Name for DataSource.  Not used by the data source object.  Used for informational purpose only.&lt;/LI&gt; &lt;LI&gt;&lt;B&gt;&lt;code&gt;description&lt;/code&gt;&lt;/B&gt; (String): &lt;I&gt;Optional&lt;/I&gt; &lt;BR&gt;Description of the data source.  Not used by the data source object.  Used for informational purpose only.&lt;/LI&gt;  &lt;LI&gt;&lt;B&gt;&lt;code&gt;password&lt;/code&gt;&lt;/B&gt; (String): &lt;I&gt;Optional&lt;/I&gt; &lt;BR&gt;Database password for the no argument &lt;code&gt;DataSource.getConnection()&lt;/code&gt;, &lt;code&gt;ConnectionPoolDataSource.getPooledConnection()&lt;/code&gt; and &lt;code&gt;XADataSource.getXAConnection()&lt;/code&gt; methods. &lt;LI&gt;&lt;B&gt;&lt;code&gt;user&lt;/code&gt;&lt;/B&gt; (String): &lt;I&gt;Optional&lt;/I&gt; &lt;BR&gt;Database user for the no argument &lt;code&gt;DataSource.getConnection()&lt;/code&gt;, &lt;code&gt;ConnectionPoolDataSource.getPooledConnection()&lt;/code&gt; and &lt;code&gt;XADataSource.getXAConnection()&lt;/code&gt; methods. &lt;/UL&gt; &lt;BR&gt;&lt;B&gt;Derby specific DataSource properties.&lt;/B&gt; &lt;UL&gt; &lt;LI&gt;&lt;B&gt;&lt;code&gt;attributesAsPassword&lt;/code&gt;&lt;/B&gt; (Boolean): &lt;I&gt;Optional&lt;/I&gt; &lt;BR&gt;If true, treat the password value in a &lt;code&gt;DataSource.getConnection(String user, String password)&lt;/code&gt;, &lt;code&gt;ConnectionPoolDataSource.getPooledConnection(String user, String password)&lt;/code&gt; or &lt;code&gt;XADataSource.getXAConnection(String user, String password)&lt;/code&gt; as a set of connection attributes. The format of the attributes is the same as the format of the attributes in the property connectionAttributes. If false the password value is treated normally as the password for the given user. Setting this property to true allows a connection request from an application to provide more authentication information that just a password, for example the request can include the user's password and an encrypted database's boot password.&lt;/LI&gt; &lt;LI&gt;&lt;B&gt;&lt;code&gt;connectionAttributes&lt;/code&gt;&lt;/B&gt; (String): &lt;I&gt;Optional&lt;/I&gt; &lt;BR&gt;Defines a set of Derby connection attributes for use in all connection requests. The format of the String matches the format of the connection attributes in a Derby JDBC URL. That is a list of attributes in the form &lt;code&gt;&lt;I&gt;attribute&lt;/I&gt;=&lt;I&gt;value&lt;/I&gt;&lt;/code&gt;, each separated by semi-colon (';'). E.g. &lt;code&gt;setConnectionAttributes("bootPassword=erd3234dggd3kazkj3000");&lt;/code&gt;. &lt;BR&gt;The database name must be set by the DataSource property &lt;code&gt;databaseName&lt;/code&gt; and not by setting the &lt;code&gt;databaseName&lt;/code&gt; connection attribute in the &lt;code&gt;connectionAttributes&lt;/code&gt; property. &lt;BR&gt; Any attributes that can be set using a property of this DataSource implementation (e.g user, password) should not be set in connectionAttributes. Conflicting settings in connectionAttributes and properties of the DataSource will lead to unexpected behaviour.  &lt;BR&gt;Please see the Derby documentation for a complete list of connection attributes. &lt;/LI&gt; &lt;LI&gt;&lt;B&gt;&lt;code&gt;createDatabase&lt;/code&gt;&lt;/B&gt; (String): &lt;I&gt;Optional&lt;/I&gt; &lt;BR&gt;If set to the string "create", this will cause a new database of &lt;code&gt;databaseName&lt;/code&gt; if that database does not already exist.  The database is created when a connection object is obtained from the data source. &lt;/LI&gt;  &lt;LI&gt;&lt;B&gt;&lt;code&gt;shutdownDatabase&lt;/code&gt;&lt;/B&gt; (String): &lt;I&gt;Optional&lt;/I&gt; &lt;BR&gt;If set to the string "shutdown", this will cause the database to shutdown when a java.sql.Connection object is obtained from the data source.  E.g., If the data source is an XADataSource, a getXAConnection().getConnection() is necessary to cause the database to shutdown. &lt;/UL&gt; &lt;P&gt;&lt;B&gt;Examples.&lt;/B&gt; &lt;P&gt;This is an example of setting a property directly using Derby's EmbeddedDataSource object.  This code is typically written by a system integrator : &lt;PRE&gt;  import org.apache.derby.jdbc.*; // dbname is the database name // if create is true, create the database if necessary javax.sql.DataSource makeDataSource (String dbname, boolean create) throws Throwable  {  EmbeddedDataSource ds = new EmbeddedDataSource();  ds.setDatabaseName(dbname); if (create) ds.setCreateDatabase("create"); return ds; } &lt;/PRE&gt; &lt;P&gt;Example of setting properties thru reflection.  This code is typically generated by tools or written by a system integrator: &lt;PRE&gt; javax.sql.DataSource makeDataSource(String dbname)  throws Throwable  { Class[] parameter = new Class[1]; parameter[0] = dbname.getClass(); DataSource ds =  new EmbeddedDataSource(); Class cl = ds.getClass(); Method setName = cl.getMethod("setDatabaseName", parameter); Object[] arg = new Object[1]; arg[0] = dbname; setName.invoke(ds, arg); return ds; } &lt;/PRE&gt; &lt;P&gt;Example on how to register a data source object with a JNDI naming service. &lt;PRE&gt; DataSource ds = makeDataSource("mydb"); Context ctx = new InitialContext(); ctx.bind("jdbc/MyDB", ds); &lt;/PRE&gt; &lt;P&gt;Example on how to retrieve a data source object from a JNDI naming service.  &lt;PRE&gt; Context ctx = new InitialContext(); DataSource ds = (DataSource)ctx.lookup("jdbc/MyDB"); &lt;/PRE&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>serialVersionUID</FieldName>
            <FieldType>long</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>EmbeddedDataSource</MethodName>
            <MethodComment>/** 
 * No-arg constructor.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getReference</MethodName>
            <MethodComment>/** 
 * This method creates a new  {@code Reference} object to represent thisdata source.  The class name of the data source object is saved in the  {@code Reference}, so that an object factory will know that it should create an instance of that class when a lookup operation is performed. The class is also stored in the reference.  This is not required by JNDI, but is recommend in practice.  JNDI will always use the object factory class specified in the reference when reconstructing an object, if a class name has been specified.  See the JNDI SPI documentation for further details on this topic, and for a complete description of the {@code Reference} and {@code StringRefAddr} classes.&lt;p/&gt; Derby data source classes class provides several standard JDBC properties.  The names and values of the data source properties are also stored in the reference using the  {@code StringRefAddr} class.This is all the information needed to reconstruct an embedded data source object.
 * @return the created reference object for this data source
 * @exception NamingException cannot find named object
 */
</MethodComment>
            <ReturnType>Reference</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Reference [ref=new Reference(this.getClass().getName(),"org.apache.derby.jdbc.ReferenceableDataSource",null)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;addBeanProperties;[this, ref]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>NamingException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addBeanProperties</MethodName>
            <MethodComment>/** 
 * Add Java Bean properties to the reference using StringRefAddr for each property. List of bean properties is defined from the public getXXX() methods on this object that take no arguments and return short, int, boolean or String. The  {@link StringRefAddr} has a key of the Java bean property name,converted from the method name. E.g. traceDirectory for traceDirectory.
 * @param ths {@code this} object
 * @param ref The reference to add properties to
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ths</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ref</ParamName>
                    <ParamType>Reference</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Method[] [methods=ths.getClass().getMethods()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getObjectInstance</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>refObj</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>javax.naming.Name</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nameContext</ParamName>
                    <ParamType>javax.naming.Context</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>environment</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>java.lang.Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>