<Class>
    <Id>1541</Id>
    <Package>org.apache.derby.iapi.types</Package>
    <ClassName>RawToBinaryFormatStream</ClassName>
    <SuperClass>LimitInputStream</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>RawToBinaryFormatStream  /** 
 * Stream that takes a raw input stream and converts it to the on-disk format of the binary types by prepending the length of the value. &lt;P&gt; If the length of the stream is known then it is encoded as the first bytes in the stream in the defined format. &lt;BR&gt; If the length is unknown then the first four bytes will be zero, indicating unknown length. &lt;BR&gt; Note: This stream cannot be re-used. Once end of file is reached, the next read call will throw an EOFException
 * @see SQLBinary
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>encodedOffset</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>encodedLength</FieldName>
            <FieldType>byte[]</FieldType>
        </Field>
        <Field>
            <FieldName>eof</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>length</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>maximumLength</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>typeName</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>RawToBinaryFormatStream</MethodName>
            <MethodComment>/** 
 * Create a binary on-disk stream from the given &lt;code&gt;InputStream&lt;/code&gt;. The on-disk stream prepends a length encoding, and validates that the actual length of the stream matches the specified length (as according to JDBC 3.0).
 * @param in application's raw binary stream passed into JDBC layer
 * @param length length of the stream
 * @throws IllegalArgumentException if &lt;code&gt;length&lt;/code&gt; is negative.This exception should never be exposed to the user, and seeing it means a programming error exists in the code.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>in</ParamName>
                    <ParamType>InputStream</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>length</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setLimit;[length]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>RawToBinaryFormatStream</MethodName>
            <MethodComment>/** 
 * Create a binary on-disk stream from the given &lt;code&gt;InputStream&lt;/code&gt; of unknown length. A limit is placed on the maximum length of the stream.
 * @param in the application stream
 * @param maximumLength maximum length of the column data is inserted into
 * @param typeName type name for the column data is inserted into
 * @throws IllegalArgumentException if maximum length is negative, or typename is &lt;code&gt;null&lt;code&gt;. This exception should never be exposed to the user, and seeing it means a programming error exists in the code. Although a missing type name is not critical, an exception is is thrown to signal the intended use of this constructor.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>in</ParamName>
                    <ParamType>InputStream</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>maximumLength</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>typeName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setLimit;[maximumLength]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>read</MethodName>
            <MethodComment>/** 
 * Read from the wrapped stream prepending the intial bytes if needed. If stream has been read, and eof reached, in that case any subsequent read will throw an EOFException
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [ret=super.read()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkSufficientData</MethodName>
            <MethodComment>/** 
 * JDBC 3.0 (from tutorial book) requires that an input stream has the correct number of bytes in the stream.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [remainingBytes=clearLimit()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>read</MethodName>
            <MethodComment>/** 
 * Read from the wrapped stream prepending the intial bytes if needed. If stream has been read, and eof reached, in that case any subsequent read will throw an EOFException
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>b</ParamName>
                    <ParamType>byte</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>off</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>len</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [elen=encodedLength.length - encodedOffset]</InnerVar>
                <InnerVar>int [realRead=super.read(b,off,len)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>