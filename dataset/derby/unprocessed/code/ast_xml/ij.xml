<Class>
    <Id>2109</Id>
    <Package>org.apache.derby.tools</Package>
    <ClassName>ij</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ij  /** 
 * ij is Derby's interactive JDBC scripting tool. It is a simple utility for running scripts against a Derby database. You can also use it interactively to run ad hoc queries. ij provides several commands for ease in accessing a variety of JDBC features. &lt;P&gt; To run from the command line enter the following: &lt;p&gt; java [options] org.apache.derby.tools.ij [arguments] &lt;P&gt; ij is can also be used with any database server that supports a JDBC driver.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>main</MethodName>
            <MethodComment>/** 
 * @exception IOException thrown if cannot access input or output files.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>Main;main;[args]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>runScript</MethodName>
            <MethodComment>/** 
 * Run a SQL script from an InputStream and write the resulting output to the provided PrintStream. SQL commands are separated by a semi-colon ';' character.
 * @param conn Connection to be used as the script's default connection. 
 * @param sqlIn InputStream for the script.
 * @param inputEncoding Encoding of the script.
 * @param sqlOut OutputStream for the script's output
 * @param outputEncoding Output encoding to use.
 * @return Number of SQLExceptions thrown during the execution, -1 if not known.
 * @throws UnsupportedEncodingException
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conn</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sqlIn</ParamName>
                    <ParamType>InputStream</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>inputEncoding</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sqlOut</ParamName>
                    <ParamType>OutputStream</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>outputEncoding</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>UnsupportedEncodingException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>runScript</MethodName>
            <MethodComment>/** 
 * Run a SQL script from an InputStream and write the resulting output to the provided PrintStream. SQL commands are separated by a semi-colon ';' character.
 * @param conn Connection to be used as the script's default connection.
 * @param sqlIn InputStream for the script.
 * @param inputEncoding Encoding of the script.
 * @param sqlOut OutputStream for the script's output
 * @param outputEncoding Output encoding to use.
 * @param loadSystemProperties Whether to use the system properties.
 * @return Number of SQLExceptions thrown during the execution, -1 if not known.
 * @throws UnsupportedEncodingException
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conn</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sqlIn</ParamName>
                    <ParamType>InputStream</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>inputEncoding</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sqlOut</ParamName>
                    <ParamType>OutputStream</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>outputEncoding</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>loadSystemProperties</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LocalizedOutput [lo=outputEncoding == null ? LocalizedResource.getInstance().getNewOutput(sqlOut) : LocalizedResource.getInstance().getNewEncodedOutput(sqlOut,outputEncoding)]</InnerVar>
                <InnerVar>Main [ijE=new Main(false)]</InnerVar>
                <InnerVar>LocalizedInput [li=LocalizedResource.getInstance().getNewEncodedInput(sqlIn,inputEncoding)]</InnerVar>
                <InnerVar>utilMain [um=ijE.getutilMain(1,lo,loadSystemProperties)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>UnsupportedEncodingException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ij</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getArg</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>param</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPropertyArg</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>org.apache.derby.impl.tools.ij.util;getPropertyArg;[args]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startJBMS</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>java.sql.Connection</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>java.sql.SQLException</ExceptionType>
                <ExceptionType>IllegalAccessException</ExceptionType>
                <ExceptionType>ClassNotFoundException</ExceptionType>
                <ExceptionType>InstantiationException</ExceptionType>
                <ExceptionType>NoSuchMethodException</ExceptionType>
                <ExceptionType>java.lang.reflect.InvocationTargetException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>