<Class>
    <Id>1602</Id>
    <Package>org.osgi.framework</Package>
    <ClassName>BundleActivator</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>BundleActivator  /** 
 * Customizes the starting and stopping of a bundle. &lt;p&gt; &lt;code&gt;BundleActivator&lt;/code&gt; is an interface that may be implemented when a bundle is started or stopped. The Framework can create instances of a bundle's &lt;code&gt;BundleActivator&lt;/code&gt; as required. If an instance's &lt;code&gt;BundleActivator.start&lt;/code&gt; method executes successfully, it is guaranteed that the same instance's &lt;code&gt;BundleActivator.stop&lt;/code&gt; method will be called when the bundle is to be stopped. The Framework must not concurrently call a &lt;code&gt;BundleActivator&lt;/code&gt; object. &lt;p&gt; &lt;code&gt;BundleActivator&lt;/code&gt; is specified through the &lt;code&gt;Bundle-Activator&lt;/code&gt; Manifest header. A bundle can only specify a single &lt;code&gt;BundleActivator&lt;/code&gt; in the Manifest file. Fragment bundles must not have a &lt;code&gt;BundleActivator&lt;/code&gt;. The form of the Manifest header is: &lt;p&gt; &lt;code&gt;Bundle-Activator: &lt;i&gt;class-name&lt;/i&gt;&lt;/code&gt; &lt;p&gt; where &lt;code&gt;&lt;i&gt;class-name&lt;/i&gt;&lt;/code&gt; is a fully qualified Java classname. &lt;p&gt; The specified &lt;code&gt;BundleActivator&lt;/code&gt; class must have a public constructor that takes no parameters so that a &lt;code&gt;BundleActivator&lt;/code&gt; object can be created by &lt;code&gt;Class.newInstance()&lt;/code&gt;.
 * @NotThreadSafe
 * @version $Revision: 1.14 $
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>start</MethodName>
            <MethodComment>/** 
 * Called when this bundle is started so the Framework can perform the bundle-specific activities necessary to start this bundle. This method can be used to register services or to allocate any resources that this bundle needs. &lt;p&gt; This method must complete and return to its caller in a timely manner.
 * @param context The execution context of the bundle being started.
 * @throws java.lang.Exception If this method throws an exception, thisbundle is marked as stopped and the Framework will remove this bundle's listeners, unregister all services registered by this bundle, and release all services used by this bundle.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>BundleContext</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>stop</MethodName>
            <MethodComment>/** 
 * Called when this bundle is stopped so the Framework can perform the bundle-specific activities necessary to stop the bundle. In general, this method should undo the work that the &lt;code&gt;BundleActivator.start&lt;/code&gt; method started. There should be no active threads that were started by this bundle when this bundle returns. A stopped bundle must not call any Framework objects. &lt;p&gt; This method must complete and return to its caller in a timely manner.
 * @param context The execution context of the bundle being stopped.
 * @throws java.lang.Exception If this method throws an exception, thebundle is still marked as stopped, and the Framework will remove the bundle's listeners, unregister all services registered by the bundle, and release all services used by the bundle.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>BundleContext</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>