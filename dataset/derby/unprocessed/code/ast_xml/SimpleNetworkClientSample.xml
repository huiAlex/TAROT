<Class>
    <Id>2118</Id>
    <ClassName>SimpleNetworkClientSample</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>SimpleNetworkClientSample  /** 
 * The primary purpose of this program is to demonstrate how to obtain client connections using DriverManager or a DataSource and interact with Derby Network Server. In particular,this sample program 1)	obtains a client connection using the DriverManager 2)	obtains a client connection using a DataSource 3)	tests the database connections by executing a sample query and then exits the program Before running this program, please make sure that Derby Network Server is up and running. &lt;P&gt; Usage: java SimpleNetworkClientSample
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>DBNAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>NETWORKSERVER_PORT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>DERBY_CLIENT_DS</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>CS_NS_DBURL</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>DERBY_CLIENT_URL</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>url</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>jdbcDataSource</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>main</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>new SimpleNetworkClientSample();startSample;[args]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startSample</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DataSource [clientDataSource=null]</InnerVar>
                <InnerVar>Connection [clientConn1=null]</InnerVar>
                <InnerVar>Connection [clientConn2=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getClientDataSourceConn</MethodName>
            <MethodComment>/** 
 * Get a database connection from DataSource
 * @pre Derby Network Server is started
 * @param ds	data source
 * @return	returns database connection
 * @throws Exception if there is any error
 */
</MethodComment>
            <ReturnType>Connection</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ds</ParamName>
                    <ParamType>javax.sql.DataSource</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=ds.getConnection("usr2","pass2")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>System.out;print;["connection from datasource; getDriverName = "]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;[conn.getMetaData().getDriverName()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getClientDataSource</MethodName>
            <MethodComment>/** 
 * Creates a client data source and sets all the necessary properties in order to connect to Derby Network Server The server is assumed to be running on 1527 and on the localhost
 * @param database	database name; can include Derby URL attributes
 * @param user		database user
 * @param password
 * @return	returns DataSource
 * @throws Exception if there is any error
 */
</MethodComment>
            <ReturnType>javax.sql.DataSource</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>database</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>user</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>password</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Class&lt;?&gt; [nsDataSource=Class.forName(jdbcDataSource)]</InnerVar>
                <InnerVar>DataSource [ds=(DataSource)nsDataSource.getConstructor().newInstance()]</InnerVar>
                <InnerVar>Class[] [methodParams=new Class[]{String.class}]</InnerVar>
                <InnerVar>Method [dbname=nsDataSource.getMethod("setDatabaseName",methodParams)]</InnerVar>
                <InnerVar>Object[] [args=new Object[]{database}]</InnerVar>
                <InnerVar>Method [servername=nsDataSource.getMethod("setServerName",methodParams)]</InnerVar>
                <InnerVar>Method [portnumber=nsDataSource.getMethod("setPortNumber",methodParams)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>dbname;invoke;[ds, args]</InnerMethodInvoke>
                <InnerMethodInvoke>servername;invoke;[ds, args]</InnerMethodInvoke>
                <InnerMethodInvoke>portnumber;invoke;[ds, args]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
                <ExceptionType>ClassNotFoundException</ExceptionType>
                <ExceptionType>InstantiationException</ExceptionType>
                <ExceptionType>IllegalAccessException</ExceptionType>
                <ExceptionType>NoSuchMethodException</ExceptionType>
                <ExceptionType>InvocationTargetException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getClientDriverManagerConnection</MethodName>
            <MethodComment>/** 
 * Get a client connection using the DriverManager
 * @pre The JDBC driver must have been loaded before calling this method
 * @return Connection	client database connection
 */
</MethodComment>
            <ReturnType>Connection</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Properties [properties=new java.util.Properties()]</InnerVar>
                <InnerVar>Connection [conn=DriverManager.getConnection(url,properties)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>properties;setProperty;["user", "derbyuser"]</InnerMethodInvoke>
                <InnerMethodInvoke>properties;setProperty;["password", "pass"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>test</MethodName>
            <MethodComment>/** 
 * Test a connection by executing a sample query
 * @param conn 	database connection
 * @throws Exception if there is any error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conn</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Statement [stmt=null]</InnerVar>
                <InnerVar>ResultSet [rs=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>