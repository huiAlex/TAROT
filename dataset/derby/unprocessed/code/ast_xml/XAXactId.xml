<Class>
    <Id>1570</Id>
    <Package>org.apache.derby.iapi.store.access.xa</Package>
    <ClassName>XAXactId</ClassName>
    <SuperClass>GlobalXact</SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Xid</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>XAXactId  /** 
 * The XAXactId class is a specific implementation of the JTA Xid interface.  It is only used by the TransactionTable.restore() interface to return an array of Xid's back to the caller, as part of serving the XAresource.restore()  interface. &lt;P&gt; It is NOT the object that is stored in the log.  One reason for this is that the Formattable and Xid interface's define two different return values for the getFormatId() interface.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>COLON</FieldName>
            <FieldType>char</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>copy_init_xid</MethodName>
            <MethodComment>/** 
 * initialize by making array copies of appropriate fields. &lt;p&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>format_id</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>global_id</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>branch_id</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>XAXactId</MethodName>
            <MethodComment>/** 
 * Construct from given pieces of an Xid.  Makes copies of arrays. &lt;p&gt;
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>format_id</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>global_id</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>branch_id</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;copy_init_xid;[format_id, global_id, branch_id]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>XAXactId</MethodName>
            <MethodComment>/** 
 * Construct an Xid using an external Xid. &lt;p&gt;
 * @exception XAException invalid external xid
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xid</ParamName>
                    <ParamType>Xid</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;copy_init_xid;[xid.getFormatId(), xid.getGlobalTransactionId(), xid.getBranchQualifier()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>XAException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toHexString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [maxLength=20 + (global_id.length + branch_id.length) * 2]</InnerVar>
                <InnerVar>StringBuffer [hexdump=new StringBuffer(maxLength)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>hexdump.append(COLON).append(Integer.toString(global_id.length)).append(COLON).append(Integer.toString(branch_id.length)).append(COLON).append(Integer.toString(format_id,16)).append(COLON).append(org.apache.derby.iapi.util.StringUtil.toHexString(global_id,0,global_id.length)).append(COLON).append(org.apache.derby.iapi.util.StringUtil.toHexString(branch_id,0,branch_id.length));append;[COLON]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>XAXactId</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xactIdString</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [start, end, length]</InnerVar>
                <InnerVar>String [xx=xactIdString.substring(start,end)]</InnerVar>
                <InnerVar>int [N=Integer.parseInt(xx)]</InnerVar>
                <InnerVar>String [yy=xactIdString.substring(start,end)]</InnerVar>
                <InnerVar>int [M=Integer.parseInt(yy)]</InnerVar>
                <InnerVar>String [f=xactIdString.substring(start,end)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFormatId</MethodName>
            <MethodComment>/** 
 * Obtain the format id part of the Xid. &lt;p&gt;
 * @return Format identifier. O means the OSI CCR format.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getGlobalTransactionId</MethodName>
            <MethodComment>/** 
 * Obtain the global transaction identifier part of XID as an array of  bytes. &lt;p&gt;
 * @return A byte array containing the global transaction identifier.
 */
</MethodComment>
            <ReturnType>byte[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBranchQualifier</MethodName>
            <MethodComment>/** 
 * Obtain the transaction branch qualifier part of the Xid in a byte array. &lt;p&gt;
 * @return A byte array containing the branch qualifier of the transaction.
 */
</MethodComment>
            <ReturnType>byte[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>equals</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>other</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>