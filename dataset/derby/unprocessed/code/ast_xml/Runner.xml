<Class>
    <Id>973</Id>
    <Package>org.apache.derbyTesting.perf.clients</Package>
    <ClassName>Runner</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Runner  /** 
 * Class used for running a performance test from the command line. To learn how to run the tests, invoke this command: &lt;pre&gt; java org.apache.derbyTesting.perf.clients.Runner &lt;/pre&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>DERBY_EMBEDDED_DRIVER</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>DEFAULT_URL</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>driver</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>url</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>user</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>password</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>init</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>load</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>loadOpts</FieldName>
            <FieldType>HashMap</FieldType>
        </Field>
        <Field>
            <FieldName>loadOpts</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>generator</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>threads</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>requestsPerSecond</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>warmupSec</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>steadySec</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>USAGE</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>main</MethodName>
            <MethodComment>/** 
 * Main method which starts the Runner application.
 * @param args the command line arguments
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Class&lt;?&gt; [clazz=Class.forName(driver)]</InnerVar>
                <InnerVar>Client[] [clients=new Client[threads]]</InnerVar>
                <InnerVar>LoadGenerator [gen=getLoadGenerator()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>clazz.getConstructor();newInstance;[]</InnerMethodInvoke>
                <InnerMethodInvoke>gen;init;[clients]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["starting warmup..."]</InnerMethodInvoke>
                <InnerMethodInvoke>gen;startWarmup;[]</InnerMethodInvoke>
                <InnerMethodInvoke>Thread;sleep;[1000L * warmupSec]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["entering steady state..."]</InnerMethodInvoke>
                <InnerMethodInvoke>gen;startSteadyState;[]</InnerMethodInvoke>
                <InnerMethodInvoke>Thread;sleep;[1000L * steadySec]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["stopping threads..."]</InnerMethodInvoke>
                <InnerMethodInvoke>gen;stop;[]</InnerMethodInvoke>
                <InnerMethodInvoke>gen;printReport;[System.out]</InnerMethodInvoke>
                <InnerMethodInvoke>null;shutdownDatabase;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseArgs</MethodName>
            <MethodComment>/** 
 * Parse the command line arguments and set the state variables to reflect the arguments.
 * @param args the command line arguments
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseLoadOpts</MethodName>
            <MethodComment>/** 
 * Parse the load-specific options. It's a comma-separated list of options, where each option is either a keyword or a (keyword, value) pair separated by an equals sign (=). The parsed options will be put into the map  {@link #loadOpts}.
 * @param optsString the comma-separated list of options
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>optsString</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String[] [opts=optsString.split(",")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasOption</MethodName>
            <MethodComment>/** 
 * Checks whether the specified option is set.
 * @param option the name of the option
 * @return {@code true} if the option is set
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>option</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLoadOpt</MethodName>
            <MethodComment>/** 
 * Get the  {@code int} value of the specified option.
 * @param option the name of the option
 * @param defaultValue the value to return if the option is not set
 * @return the value of the option
 * @throws NumberFormatException if the value is not an {@code int}
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>option</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>defaultValue</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [val=(String)loadOpts.get(option)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>printUsage</MethodName>
            <MethodComment>/** 
 * Print the usage string.
 * @param out the stream to print the usage string to
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>PrintStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>out;println;[USAGE]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTextType</MethodName>
            <MethodComment>/** 
 * Get the data type to be used for sr_select and sr_update types of load.
 * @return one of the {@code java.sql.Types} data type constants
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>boolean [blob=hasOption("blob")]</InnerVar>
                <InnerVar>boolean [clob=hasOption("clob")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDBFiller</MethodName>
            <MethodComment>/** 
 * Find the  {@code DBFiller} instance for the load specified on thecommand line.
 * @return a {@code DBFiller} instance
 */
</MethodComment>
            <ReturnType>DBFiller</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>System.err;println;["unknown load: " + load]</InnerMethodInvoke>
                <InnerMethodInvoke>null;printUsage;[System.err]</InnerMethodInvoke>
                <InnerMethodInvoke>System;exit;[1]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newClient</MethodName>
            <MethodComment>/** 
 * Create a new client for the load specified on the command line.
 * @return a {@code Client} instance
 */
</MethodComment>
            <ReturnType>Client</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>System.err;println;["unknown load: " + load]</InnerMethodInvoke>
                <InnerMethodInvoke>null;printUsage;[System.err]</InnerMethodInvoke>
                <InnerMethodInvoke>System;exit;[1]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLoadGenerator</MethodName>
            <MethodComment>/** 
 * Create a load generator for the load specified on the command line.
 * @return a {@code LoadGenerator} instance
 */
</MethodComment>
            <ReturnType>LoadGenerator</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>System.err;println;["unknown load generator: " + generator]</InnerMethodInvoke>
                <InnerMethodInvoke>null;printUsage;[System.err]</InnerMethodInvoke>
                <InnerMethodInvoke>System;exit;[1]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>shutdownDatabase</MethodName>
            <MethodComment>/** 
 * Shut down the database if it is a Derby embedded database.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>