<Class>
    <Id>1799</Id>
    <Package>org.apache.derbyTesting.perf.basic.jdbc</Package>
    <ClassName>CoveredIdxScan</ClassName>
    <SuperClass>HeapScan</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>CoveredIdxScan  /** 
 * Index scan tests.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>suite</MethodName>
            <MethodComment>/** 
 * @return suite of tests
 */
</MethodComment>
            <ReturnType>Test</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>BaseTestSuite [scan=new BaseTestSuite("CoveredIdxScanTests")]</InnerVar>
                <InnerVar>int [iterations=700, repeats=4]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>scan;addTest;[new CoveredIdxScan("ScanCoveredIdxInt",iterations,repeats)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>CoveredIdxScan</MethodName>
            <MethodComment>/** 
 * Constructor
 * @param name testname
 * @param iterations iterations for the test to measure
 * @param repeats number of times to repeat the test
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>iterations</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>repeats</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setUp</MethodName>
            <MethodComment>/** 
 * Do the necessary setup for the test ,prepare the statement
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initializeConnection</MethodName>
            <MethodComment>/** 
 * Override initializeConnection to set the autocommit to false
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conn</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>conn;setAutoCommit;[false]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ScanCoveredIdxInt</MethodName>
            <MethodComment>/** 
 * This test simply tests a covered index scan and retrieves an int column Scan starts from 1/4 into the data set and set to end 3/4 into the dataset
 * @throws Exception
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>ResultSet [rs=select.executeQuery()]</InnerVar>
                <InnerVar>int [actualCount=0]</InnerVar>
                <InnerVar>int [i=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>select;setInt;[1, ((rowcount * 2) / 4)]</InnerMethodInvoke>
                <InnerMethodInvoke>select;setInt;[2, (((rowcount * 2) / 4) * 3)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;[rowcount, actualCount]</InnerMethodInvoke>
                <InnerMethodInvoke>rs;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;commit;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>tearDown</MethodName>
            <MethodComment>/** 
 * Cleanup - close resources opened in this test.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>