<Class>
    <Id>649</Id>
    <Package>org.apache.derbyTesting.unitTests.services</Package>
    <ClassName>T_Diagnosticable</ClassName>
    <SuperClass>T_MultiIterations</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>T_Diagnosticable  /** 
 * This T_Diagnosticable class provides a sample of how to use the "Diagnostic" facility.  The classes methods are built to be called by a "values" or a "call" statement from "ij".  Eventually there will be some sort of  diagnostic monitor which will be used to call the various "D_*" routines.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>testService</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>T_Diagnosticable</MethodName>
            <MethodComment>/** 
 * No arg Constructor.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>t_001</MethodName>
            <MethodComment>/** 
 * Simple test of DiagnosticUtil interfaces. &lt;p&gt; Simple test of DiagnosticUtil.toDiagString() and  DiagnosticUtil.findDiagnostic() interfaces.
 * @exception T_Fail  If test fails for some reason.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Object [diag_obj=new T_DiagTestClass1("object with diag interface")]</InnerVar>
                <InnerVar>Object [diagSubObj=new T_DiagTestClass1Sub("sub-class")]</InnerVar>
                <InnerVar>Object [obj=(long)5]</InnerVar>
                <InnerVar>String [str=null]</InnerVar>
                <InnerVar>String [expected_str=null]</InnerVar>
                <InnerVar>Diagnosticable [helper_class=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setupTest</MethodName>
            <MethodComment>/** 
 * Routine one once per invocation of the test by the driver. &lt;p&gt; Do work that should only be done once, no matter how many times runTests() may be executed.
 * @exception T_Fail  Thrown on any error.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>startParams;put;[Property.NO_AUTO_BOOT, Boolean.TRUE.toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>startParams;put;[Property.DELETE_ON_CREATE, Boolean.TRUE.toString()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getModuleToTestProtocolName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>runTestSet</MethodName>
            <MethodComment>/** 
 * Driver routine for the btree secondary index tests. &lt;p&gt;
 * @exception T_Fail  Throws T_Fail on any test failure.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>out;println;["Executing " + testService + " test."]</InnerMethodInvoke>
                <InnerMethodInvoke>null;t_001;[]</InnerMethodInvoke>
                <InnerMethodInvoke>out;println;["Finished Executing " + testService + " test."]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>