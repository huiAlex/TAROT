<Class>
    <Id>1788</Id>
    <Package>org.apache.derby.client.am</Package>
    <ClassName>ClientJDBCObjectFactory</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ClientJDBCObjectFactory  /** 
 * The methods of this interface are used to return JDBC interface implementations to the user depending on the JDBC version supported by the JDK.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>newClientPooledConnection</MethodName>
            <MethodComment>/** 
 * This method is used to return an instance of the  {@link org.apache.derby.client.ClientPooledConnection} class whichimplements  {@code javax.sql.PooledConnection}.
 */
</MethodComment>
            <ReturnType>ClientPooledConnection</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ds</ParamName>
                    <ParamType>BasicClientDataSource40</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>logWriter</ParamName>
                    <ParamType>LogWriter</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>user</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>password</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newClientXAConnection</MethodName>
            <MethodComment>/** 
 * This method is used to return an instance of ClientXAConnection (or ClientXAConnection40) class which implements  {@code javax.sql.XAConnection}.
 */
</MethodComment>
            <ReturnType>ClientXAConnection</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ds</ParamName>
                    <ParamType>BasicClientDataSource40</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>logWriter</ParamName>
                    <ParamType>LogWriter</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>user</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>password</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newCallableStatement</MethodName>
            <MethodComment>/** 
 * Returns an instance of ClientCallableStatement, ClientCallableStatement40 or ClientCallableStatement42 which all implement java.sql.CallableStatement.
 * @param agent       The instance of NetAgent associated with thisCallableStatement object.
 * @param connection  The connection object associated with thisPreparedStatement Object.
 * @param sql         A String object that is the SQL statement to be sent to the database.
 * @param type        One of the ResultSet type constants
 * @param concurrency One of the ResultSet concurrency constants
 * @param holdability One of the ResultSet holdability constants
 * @param cpc         The PooledConnection object that will be used to notify the PooledConnection reference of the Error  Occurred and the Close events.
 * @return a CallableStatement object
 * @throws SqlException
 */
</MethodComment>
            <ReturnType>ClientCallableStatement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>agent</ParamName>
                    <ParamType>Agent</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>connection</ParamName>
                    <ParamType>ClientConnection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sql</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>concurrency</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>holdability</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cpc</ParamName>
                    <ParamType>ClientPooledConnection</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newLogicalConnection</MethodName>
            <MethodComment>/** 
 * Returns an instance of LogicalConnection. This method returns an instance of LogicalConnection (or LogicalConnection40) which implements  {@code java.sql.Connection}.
 */
</MethodComment>
            <ReturnType>LogicalConnection</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>physicalConnection</ParamName>
                    <ParamType>ClientConnection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pooledConnection</ParamName>
                    <ParamType>ClientPooledConnection</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newCachingLogicalConnection</MethodName>
            <MethodComment>/** 
 * Returns an instance of a  {@code CachingLogicalConnection}, which provides caching of prepared statements.
 * @param physicalConnection the underlying physical connection
 * @param pooledConnection the pooled connection
 * @param stmtCache statement cache
 * @return A logical connection with statement caching capabilities.
 * @throws SqlException if creation of the logical connection fails
 */
</MethodComment>
            <ReturnType>LogicalConnection</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>physicalConnection</ParamName>
                    <ParamType>ClientConnection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pooledConnection</ParamName>
                    <ParamType>ClientPooledConnection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stmtCache</ParamName>
                    <ParamType>JDBCStatementCache</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newPreparedStatement</MethodName>
            <MethodComment>/** 
 * This method returns an instance of PreparedStatement (or PreparedStatement40) which implements {@code java.sql.PreparedStatement}. It has the  {@link ClientPooledConnection} as one of its parametersthis is used to raise the Statement Events when the prepared statement is closed
 * @param agent The instance of NetAgent associated with thisCallableStatement object.
 * @param connection The connection object associated with thisPreparedStatement Object.
 * @param sql        A String object that is the SQL statement to be sentto the database.
 * @param section    Section
 * @param cpc The ClientPooledConnection wraps the underlying physicalconnection associated with this prepared statement. It is used to pass the Statement closed and the Statement error occurred events that occur back to the ClientPooledConnection.
 * @return a PreparedStatement object
 * @throws SqlException
 */
</MethodComment>
            <ReturnType>ClientPreparedStatement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>agent</ParamName>
                    <ParamType>Agent</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>connection</ParamName>
                    <ParamType>ClientConnection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sql</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>section</ParamName>
                    <ParamType>Section</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cpc</ParamName>
                    <ParamType>ClientPooledConnection</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newPreparedStatement</MethodName>
            <MethodComment>/** 
 * Returns an instance of PreparedStatement (or PreparedStatement40) which implements  {@code java.sql.PreparedStatement}. It has the ClientPooledConnection as one of its parameters  this is used to raise the Statement Events when the prepared statement is closed
 * @param agent The instance of NetAgent associated with thisCallableStatement object.
 * @param connection  The connection object associated with thisPreparedStatement Object.
 * @param sql         A String object that is the SQL statementto be sent to the database.
 * @param type        One of the ResultSet type constants.
 * @param concurrency One of the ResultSet concurrency constants.
 * @param holdability One of the ResultSet holdability constants.
 * @param autoGeneratedKeys a flag indicating whether auto-generatedkeys should be returned.
 * @param columnNames an array of column names indicating the columns thatshould be returned from the inserted row or rows.
 * @param columnIndexes an array of column indexes indicating the columnsthat should be returned form the inserted row.                   
 * @param cpc The ClientPooledConnection wraps the underlying physicalconnection associated with this prepared statement it is used to pass the Statement closed and the Statement error occurred events that occur back to the ClientPooledConnection.
 * @return a PreparedSatement object
 * @throws SqlException
 */
</MethodComment>
            <ReturnType>ClientPreparedStatement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>agent</ParamName>
                    <ParamType>Agent</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>connection</ParamName>
                    <ParamType>ClientConnection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sql</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>concurrency</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>holdability</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>autoGeneratedKeys</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columnNames</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columnIndexes</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cpc</ParamName>
                    <ParamType>ClientPooledConnection</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newLogicalPreparedStatement</MethodName>
            <MethodComment>/** 
 * Returns a new logical prepared statement object.
 * @param ps underlying physical prepared statement
 * @param stmtKey key for the underlying physical prepared statement
 * @param cacheInteractor the statement cache interactor
 * @return A logical prepared statement.
 */
</MethodComment>
            <ReturnType>LogicalPreparedStatement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ps</ParamName>
                    <ParamType>PreparedStatement</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stmtKey</ParamName>
                    <ParamType>StatementKey</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cacheInteractor</ParamName>
                    <ParamType>StatementCacheInteractor</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newLogicalCallableStatement</MethodName>
            <MethodComment>/** 
 * Returns a new logical callable statement object.
 * @param cs underlying physical callable statement
 * @param stmtKey key for the underlying physical callable statement
 * @param cacheInteractor the statement cache interactor
 * @return A logical callable statement.
 */
</MethodComment>
            <ReturnType>LogicalCallableStatement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cs</ParamName>
                    <ParamType>CallableStatement</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stmtKey</ParamName>
                    <ParamType>StatementKey</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cacheInteractor</ParamName>
                    <ParamType>StatementCacheInteractor</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newNetConnection</MethodName>
            <MethodComment>/** 
 * This method returns an instance of NetConnection (or NetConnection40) class which extends from ClientConnection this implements the java.sql.Connection interface
 */
</MethodComment>
            <ReturnType>ClientConnection</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>logWriter</ParamName>
                    <ParamType>LogWriter</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>driverManagerLoginTimeout</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>serverName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>portNumber</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>databaseName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>properties</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newNetConnection</MethodName>
            <MethodComment>/** 
 * This method returns an instance of NetConnection (or NetConnection40) class which extends from ClientConnection.  This implements the  {@code java.sql.Connection} interface.
 */
</MethodComment>
            <ReturnType>ClientConnection</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>logWriter</ParamName>
                    <ParamType>LogWriter</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>user</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>password</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dataSource</ParamName>
                    <ParamType>BasicClientDataSource40</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rmId</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isXAConn</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newNetConnection</MethodName>
            <MethodComment>/** 
 * This method returns an instance of NetConnection (or NetConnection40) class which extends Connection. This implements the  {@code java.sql.Connection} interface.This method is used to pass the ClientPooledConnection object to the NetConnection object which can then be used to pass the  statement events back to the user
 * @param logWriter    LogWriter object associated with this connection
 * @param user         user id for this connection
 * @param password     password for this connection
 * @param dataSource   The DataSource object passed from the PooledConnection object from which this constructor was called
 * @param rmId         The Resource Manager ID for XA Connections
 * @param isXAConn     true if this is a XA connection
 * @param cpc          The ClientPooledConnection object from which this NetConnection constructor was called. This is used to pass StatementEvents back to the pooledConnection object
 * @throws SqlException
 */
</MethodComment>
            <ReturnType>ClientConnection</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>logWriter</ParamName>
                    <ParamType>LogWriter</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>user</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>password</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dataSource</ParamName>
                    <ParamType>BasicClientDataSource40</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rmId</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isXAConn</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cpc</ParamName>
                    <ParamType>ClientPooledConnection</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newNetResultSet</MethodName>
            <MethodComment>/** 
 * This method returns an instance of NetResultSet(or NetResultSet40) which extends from ClientResultSet which implements {@code java.sql.ResultSet}.
 */
</MethodComment>
            <ReturnType>ClientResultSet</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>netAgent</ParamName>
                    <ParamType>Agent</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>netStatement</ParamName>
                    <ParamType>MaterialStatement</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cursor</ParamName>
                    <ParamType>Cursor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>qryprctyp</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sqlcsrhld</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>qryattscr</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>qryattsns</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>qryattset</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>qryinsid</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>actualResultSetType</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>actualResultSetConcurrency</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>actualResultSetHoldability</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newNetDatabaseMetaData</MethodName>
            <MethodComment>/** 
 * This method provides an instance of NetDatabaseMetaData (or NetDatabaseMetaData40) which extends from ClientDatabaseMetaData which implements  {@code java.sql.DatabaseMetaData}.
 */
</MethodComment>
            <ReturnType>ClientDatabaseMetaData</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>netAgent</ParamName>
                    <ParamType>Agent</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>netConnection</ParamName>
                    <ParamType>ClientConnection</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newStatement</MethodName>
            <MethodComment>/** 
 * This method provides an instance of Statement or Statement40  depending on the jdk version under use
 * @param agent            Agent
 * @param connection       Connection
 * @param type             int
 * @param concurrency      int
 * @param holdability      int
 * @param autoGeneratedKeys int
 * @param columnNames       String[]
 * @param columnIndexes     int[]
 * @return a {@code java.sql.Statement} implementation
 * @throws SqlException
 */
</MethodComment>
            <ReturnType>ClientStatement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>agent</ParamName>
                    <ParamType>Agent</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>connection</ParamName>
                    <ParamType>ClientConnection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>concurrency</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>holdability</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>autoGeneratedKeys</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columnNames</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columnIndexes</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newColumnMetaData</MethodName>
            <MethodComment>/** 
 * Returns an instanceof ColumnMetaData or ColumnMetaData40 depending  on the jdk version under use
 * @param logWriter LogWriter
 * @return a ColumnMetaData implementation
 */
</MethodComment>
            <ReturnType>ColumnMetaData</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>logWriter</ParamName>
                    <ParamType>LogWriter</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newColumnMetaData</MethodName>
            <MethodComment>/** 
 * Returns an instanceof ColumnMetaData or ColumnMetaData40 depending  on the jdk version under use
 * @param logWriter  LogWriter
 * @param upperBound int
 * @return a ColumnMetaData implementation
 */
</MethodComment>
            <ReturnType>ColumnMetaData</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>logWriter</ParamName>
                    <ParamType>LogWriter</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>upperBound</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newParameterMetaData</MethodName>
            <MethodComment>/** 
 * returns an instance of ParameterMetaData or ParameterMetaData40 depending  on the jdk version under use
 * @param columnMetaData ColumnMetaData
 * @return a ParameterMetaData implementation
 */
</MethodComment>
            <ReturnType>ClientParameterMetaData</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>columnMetaData</ParamName>
                    <ParamType>ColumnMetaData</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newBatchUpdateException</MethodName>
            <MethodComment>/** 
 * Creates a BatchUpdateException depending on the JVM level.
 */
</MethodComment>
            <ReturnType>BatchUpdateException</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>logWriter</ParamName>
                    <ParamType>LogWriter</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>msgid</ParamName>
                    <ParamType>ClientMessageId</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>Object[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>updateCounts</ParamName>
                    <ParamType>long[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cause</ParamName>
                    <ParamType>SqlException</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>