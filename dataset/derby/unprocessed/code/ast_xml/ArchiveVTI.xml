<Class>
    <Id>1772</Id>
    <Package>org.apache.derbyTesting.functionTests.tests.lang</Package>
    <ClassName>ArchiveVTI</ClassName>
    <SuperClass>ForwardingVTI</SuperClass>
    <SuperInterfaceList>
        <SuperInterface>AwareVTI</SuperInterface>
        <SuperInterface>RestrictedVTI</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ArchiveVTI  /** 
 * &lt;p&gt; This table function acts like a union view on a set of archive tables. The idea is that the old contents of a main table are periodically moved to archive tables whose names start with $tableName$suffix. Each bulk move of rows results in the creation of a new archive table. The archive tables live in the same schema as the main table and have its shape. This table function unions the main table together with all of its archived snapshots. So, for instance, you might have the following set of tables, which this table function unions together: &lt;/p&gt; &lt;pre&gt; T1 T1_ARCHIVE_1 T1_ARCHIVE_2 ... T1_ARCHIVE_N &lt;/pre&gt; &lt;p&gt; This table function may appear in user documentation. If you change the behavior of this table function, make sure that you adjust the user documentation linked from DERBY-6117. &lt;/p&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>_connection</FieldName>
            <FieldType>Connection</FieldType>
        </Field>
        <Field>
            <FieldName>_archiveSuffix</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>_vtiContext</FieldName>
            <FieldType>VTIContext</FieldType>
        </Field>
        <Field>
            <FieldName>_tableNames</FieldName>
            <FieldType>ArrayList</FieldType>
        </Field>
        <Field>
            <FieldName>_tableNames</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>_tableIdx</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>_columnNames</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>_restriction</FieldName>
            <FieldType>Restriction</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>archiveVTI</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Entry point for creating an ArchiveVTI which is bound to a Derby table function by a CREATE FUNCTION statement which looks like this: &lt;/p&gt; &lt;pre&gt; create function t1( archiveSuffix varchar( 32672 ) ) returns table ( keyCol int, aCol int, bCol int ) language java parameter style derby_jdbc_result_set reads sql data external name 'org.apache.derbyTesting.functionTests.tests.lang.ArchiveVTI.archiveVTI' &lt;/pre&gt;
 * @param archiveSuffix All of the archive tables have names of the form $tablename$archiveSuffix.
 */
</MethodComment>
            <ReturnType>ArchiveVTI</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>archiveSuffix</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ArchiveVTI</MethodName>
            <MethodComment>/** 
 * Construct from the suffix which flags all of the relevant tables. 
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>archiveSuffix</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getContext</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>VTIContext</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setContext</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>VTIContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initScan</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>columnNames</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>restriction</ParamName>
                    <ParamType>Restriction</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>System;arraycopy;[columnNames, 0, _columnNames, 0, columnNames.length]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>next</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>close</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;wrapResultSet;[null]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTableNames</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Get cursors on all the tables which we are going to union together. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>DatabaseMetaData [dbmd=getConnection().getMetaData()]</InnerVar>
                <InnerVar>ResultSet [candidates=dbmd.getTables(null,getContext().vtiSchema(),getContext().vtiTable() + _archiveSuffix + "%",null)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>_tableNames;add;[getContext().vtiTable()]</InnerMethodInvoke>
                <InnerMethodInvoke>candidates;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>loadResultSet</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Compile the query against the next table and use its ResultSet until it's drained. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>ForeignTableVTI [nextRS=new ForeignTableVTI(getContext().vtiSchema(),_tableNames.get(_tableIdx),getConnection())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>nextRS;initScan;[_columnNames, _restriction]</InnerMethodInvoke>
                <InnerMethodInvoke>null;wrapResultSet;[nextRS]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getConnection</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Get this database session's connection to the database. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>Connection</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>