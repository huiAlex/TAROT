<Class>
    <Id>1515</Id>
    <Package>org.apache.derby.impl.sql.compile</Package>
    <ClassName>OptTraceViewer</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>OptionalTool</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>OptTraceViewer  /** 
 * &lt;p&gt; OptionalTool for viewing the output created when you xml-trace the optimizer. &lt;/p&gt;
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>OptTraceViewer</MethodName>
            <MethodComment>/** 
 * 0-arg constructor required by the OptionalTool contract 
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>loadTool</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Takes the following arguments: &lt;/p&gt; &lt;ul&gt; &lt;li&gt;fileURL - The url of the file holding the xml trace. E.g.: "file:///Users/me/mainline/z.txt"&lt;/li&gt; &lt;/ul&gt; &lt;p&gt; ...and creates the following schema objects for viewing the xml trace of the optimizer: &lt;/p&gt; &lt;ul&gt; &lt;li&gt;ArrayList - A user-defined type wrapping java.util.ArrayList.&lt;/li&gt; &lt;li&gt;asList - A factory function for creating ArrayLists.&lt;/li&gt; &lt;li&gt;planCost - An XmlVTI for viewing xml traces.&lt;/li&gt; &lt;li&gt;planCost - A view which passes the file name to the XmlVTI.&lt;/li&gt; &lt;/ul&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>configurationParameters</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [fileURL=configurationParameters[0]]</InnerVar>
                <InnerVar>String [createView=XMLOptTrace.PLAN_COST_VIEW.replace("FILE_URL",fileURL)]</InnerVar>
                <InnerVar>Connection [conn=getDerbyConnection()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;executeDDL;[conn, "create type ArrayList external name 'java.util.ArrayList' language java"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;executeDDL;[conn, "create function asList( cell varchar( 32672 ) ... ) returns ArrayList\n" + "language java parameter style derby no sql\n" + "external name 'org.apache.derby.vti.XmlVTI.asList'\n"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;executeDDL;[conn, XMLOptTrace.PLAN_COST_VTI]</InnerMethodInvoke>
                <InnerMethodInvoke>null;executeDDL;[conn, createView]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>unloadTool</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Drop the schema objects which were created for viewing the xml file containing the optimizer trace. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>configurationParameters</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=getDerbyConnection()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;executeDDL;[conn, "drop view planCost"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;executeDDL;[conn, "drop function planCost"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;executeDDL;[conn, "drop function asList"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;executeDDL;[conn, "drop type ArrayList restrict"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDerbyConnection</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Connection</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>executeDDL</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conn</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PreparedStatement [ddl=prepareStatement(conn,text)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ddl;execute;[]</InnerMethodInvoke>
                <InnerMethodInvoke>ddl;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>prepareStatement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PreparedStatement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conn</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>wrap</MethodName>
            <MethodComment>/** 
 * Wrap an exception in a SQLException 
 */
</MethodComment>
            <ReturnType>SQLException</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Throwable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>wrap</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>SQLException</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>errorMessage</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [sqlState=org.apache.derby.shared.common.reference.SQLState.JAVA_EXCEPTION.substring(0,5)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>