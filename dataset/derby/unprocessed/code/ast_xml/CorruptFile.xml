<Class>
    <Id>1232</Id>
    <Package>org.apache.derbyTesting.functionTests.util.corruptio</Package>
    <ClassName>CorruptFile</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>StorageFile</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>CorruptFile  /** 
 * This class provides proxy implementation of the StorageFile interface. It is used by CorruptDiskStorageFactory to instrument the database engine  i/o for testing.
 * @see StorageFile
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>realFile</FieldName>
            <FieldType>StorageFile</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>CorruptFile</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>realFile</ParamName>
                    <ParamType>StorageFile</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>list</MethodName>
            <MethodComment>/** 
 * Get the names of all files and sub-directories in the directory named  by this path name. This method is only used in a writable database.
 * @return An array of the names of the files and directories in thisdirectory denoted by this abstract pathname. The returned array  will have length 0 if this directory is empty. Returns null if  this StorageFile is not  a directory, or if an I/O error occurs. The return value is undefined if the database is read-only.
 */
</MethodComment>
            <ReturnType>String[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>canWrite</MethodName>
            <MethodComment>/** 
 * Determine whether the named file is writable.
 * @return &lt;b&gt;true&lt;/b&gt; if the file exists and is writable, &lt;b&gt;false&lt;/b&gt; if not.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>exists</MethodName>
            <MethodComment>/** 
 * Tests whether the named file exists.
 * @return &lt;b&gt;true&lt;/b&gt; if the named file exists, &lt;b&gt;false&lt;/b&gt; if not.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isDirectory</MethodName>
            <MethodComment>/** 
 * Tests whether the named file is a directory, or not.  This is only called in writable storage factories.
 * @return &lt;b&gt;true&lt;/b&gt; if named file exists and is a directory, &lt;b&gt;false&lt;/b&gt; if not. The return value is undefined if the storage is read-only.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>delete</MethodName>
            <MethodComment>/** 
 * Deletes the named file or empty directory.  This method does not delete non-empty directories.
 * @return &lt;b&gt;true&lt;/b&gt; if the named file or directory is successfully deleted, &lt;b&gt;false&lt;/b&gt; if not
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>deleteAll</MethodName>
            <MethodComment>/** 
 * Deletes the named file and, if it is a directory, all the files and  directories it contains.
 * @return &lt;b&gt;true&lt;/b&gt; if the named file or directory is successfully deleted, &lt;b&gt;false&lt;/b&gt; if not
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPath</MethodName>
            <MethodComment>/** 
 * Converts this StorageFile into a pathname string.  The character returned by StorageFactory.getSeparator() is used to separate the directory and file names in the sequence. &lt;p&gt; &lt;b&gt;The returned path may include the database directory.  Therefore it cannot be directly used to make an StorageFile equivalent to this one.&lt;/b&gt;
 * @return The pathname as a string.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCanonicalPath</MethodName>
            <MethodComment>/** 
 * Converts this StorageFile into a canonical pathname string.  The form of the canonical path is system dependent.
 * @return The pathname as a string.
 * @exception IOException if an I/O error occurred while finding the canonical name
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getName</MethodName>
            <MethodComment>/** 
 * @return The last segment in the path name, "" if the path name sequence is empty.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createNewFile</MethodName>
            <MethodComment>/** 
 * If the named file does not already exist then create it as an empty  normal file. The implementation must synchronize with other threads accessing the  same file (in the same or a different process). If two threads both attempt to create a file with the same name at the same time then at most one should succeed.
 * @return &lt;b&gt;true&lt;/b&gt; if this thread's invocation of createNewFile successfully created the named file; &lt;b&gt;false&lt;/b&gt; if not, i.e. &lt;b&gt;false&lt;/b&gt; if the named file  already exists or if another concurrent thread created it.
 * @exception IOException - If the directory does not exist or some other I/O error occurred
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>renameTo</MethodName>
            <MethodComment>/** 
 * Rename the file denoted by this name.  Note that StorageFile objects are immutable. This method renames the  underlying file, it does not change this StorageFile object. The  StorageFile object denotes the same name as before, however the exists() method will return false after the renameTo method executes successfully. &lt;p&gt;  It is not specified whether this method will succeed if a file  already exists under the new name.
 * @param newName the new name.
 * @return &lt;b&gt;true&lt;/b&gt; if the rename succeeded, &lt;b&gt;false&lt;/b&gt; if not.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>newName</ParamName>
                    <ParamType>StorageFile</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>mkdir</MethodName>
            <MethodComment>/** 
 * Creates the named directory.
 * @return &lt;b&gt;true&lt;/b&gt; if the directory was created; &lt;b&gt;false&lt;/b&gt; if not.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>mkdirs</MethodName>
            <MethodComment>/** 
 * Creates the named directory, and all nonexistent parent directories.
 * @return &lt;b&gt;true&lt;/b&gt; if the directory was created, &lt;b&gt;false&lt;/b&gt; if not
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setReadOnly</MethodName>
            <MethodComment>/** 
 * Make the named file or directory read-only.  This interface does not specify whether this also makes the file  undeletable.
 * @return &lt;b&gt;true&lt;/b&gt; if the named file or directory was made read-only, or it already was read-only; &lt;b&gt;false&lt;/b&gt; if not.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getParentDir</MethodName>
            <MethodComment>/** 
 * Get the name of the parent directory if this name includes a parent.
 * @return An StorageFile denoting the parent directory of this StorageFile,if it has a parent, null if it does not have a parent.
 */
</MethodComment>
            <ReturnType>StorageFile</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOutputStream</MethodName>
            <MethodComment>/** 
 * Creates an output stream from realFile.
 * @return an output stream suitable for writing to the file.
 * @exception FileNotFoundException if the file exists but is a directoryrather than a regular file, does not exist but cannot be  created, or cannot be opened for any other reason.
 */
</MethodComment>
            <ReturnType>OutputStream</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FileNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOutputStream</MethodName>
            <MethodComment>/** 
 * Creates an output stream from a file name.
 * @param append If true then data will be appended to the end of the file,if it already exists. If false and a normal file already exists with this name  the file will first be truncated to zero length.
 * @return an output stream suitable for writing to the file.
 * @exception FileNotFoundException if the file exists but is a directory rather than a regular file, does not  exist but cannot be created, or cannot  be opened for any other reason.
 */
</MethodComment>
            <ReturnType>OutputStream</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>append</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FileNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getInputStream</MethodName>
            <MethodComment>/** 
 * Creates an input stream from realFile
 * @return an input stream suitable for reading from the file.
 * @exception FileNotFoundException if the file is not found.
 */
</MethodComment>
            <ReturnType>InputStream</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FileNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getExclusiveFileLock</MethodName>
            <MethodComment>/** 
 * Get an exclusive lock.  This is used to ensure that two or more JVMs do not open the same  database at the same time.
 * @return EXCLUSIVE_FILE_LOCK_NOT_AVAILABLE if the lock cannot be acquired because it is already held. &lt;br&gt; EXCLUSIVE_FILE_LOCK if the lock was successfully acquired. &lt;br&gt; NO_FILE_LOCK_SUPPORT if the system does not support  exclusive locks.&lt;br&gt;
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>releaseExclusiveFileLock</MethodName>
            <MethodComment>/** 
 * Release the resource associated with an earlier acquired exclusive lock
 * @see #getExclusiveFileLock
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>realFile;releaseExclusiveFileLock;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRandomAccessFile</MethodName>
            <MethodComment>/** 
 * Get a random access (read/write) file.
 * @param mode "r", "rw", "rws", or "rwd". The "rws" and "rwd" modes specifythat the data is to be written to persistent store,  consistent with the java.io.RandomAccessFile class  ("synchronized" with the persistent storage, in the file  system meaning of the word "synchronized").  However the implementation is not required to implement the "rws" or "rwd" modes. The implementation may treat "rws" and "rwd" as "rw". It is up to the user of this interface to call the  StorageRandomAccessFile.sync method. If the "rws" or "rwd"  modes are supported and the RandomAccessFile was opened in  "rws" or "rwd" mode then the implementation of  StorageRandomAccessFile.sync need not do anything.
 * @return an object that can be used for random access to the file.
 * @exception IllegalArgumentException if the mode argument is not equal toone of "r", "rw".
 * @exception FileNotFoundException    if the file exists but is a directoryrather than a regular file, or cannot be opened or created for any other  reason .
 */
</MethodComment>
            <ReturnType>StorageRandomAccessFile</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mode</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FileNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRealFileInstance</MethodName>
            <MethodComment>/** 
 * retuns the real file handle that is used to delegate the calls
 */
</MethodComment>
            <ReturnType>StorageFile</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>limitAccessToOwner</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>realFile;limitAccessToOwner;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>