<Class>
    <Id>2122</Id>
    <Package>org.osgi.framework</Package>
    <ClassName>Filter</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Filter  /** 
 * An RFC 1960-based Filter. &lt;p&gt; &lt;code&gt;Filter&lt;/code&gt; objects can be created by calling {@link BundleContext#createFilter} with the chosen filter string.&lt;p&gt; A &lt;code&gt;Filter&lt;/code&gt; object can be used numerous times to determine if the match argument matches the filter string that was used to create the &lt;code&gt;Filter&lt;/code&gt; object. &lt;p&gt; Some examples of LDAP filters are: &lt;pre&gt; &amp;quot;(cn=Babs Jensen)&amp;quot; &amp;quot;(!(cn=Tim Howes))&amp;quot; &amp;quot;(&amp;amp;(&amp;quot; + Constants.OBJECTCLASS + &amp;quot;=Person)(|(sn=Jensen)(cn=Babs J*)))&amp;quot; &amp;quot;(o=univ*of*mich*)&amp;quot; &lt;/pre&gt;
 * @since 1.1
 * @see "Core Specification, section 5.5, for a description of the filter stringsyntax."
 * @ThreadSafe
 * @version $Revision: 1.16 $
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>match</MethodName>
            <MethodComment>/** 
 * Filter using a service's properties. &lt;p&gt; The filter is executed using the keys and values of the referenced service's properties. The keys are case insensitively matched with the filter.
 * @param reference The reference to the service whose properties are usedin the match.
 * @return &lt;code&gt;true&lt;/code&gt; if the service's properties match thisfilter; &lt;code&gt;false&lt;/code&gt; otherwise.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>reference</ParamName>
                    <ParamType>ServiceReference</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>match</MethodName>
            <MethodComment>/** 
 * Filter using a &lt;code&gt;Dictionary&lt;/code&gt; object. The Filter is executed using the &lt;code&gt;Dictionary&lt;/code&gt; object's keys and values. The keys are case insensitively matched with the filter.
 * @param dictionary The &lt;code&gt;Dictionary&lt;/code&gt; object whose keys areused in the match.
 * @return &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;Dictionary&lt;/code&gt; object'skeys and values match this filter; &lt;code&gt;false&lt;/code&gt; otherwise.
 * @throws IllegalArgumentException If &lt;code&gt;dictionary&lt;/code&gt; containscase variants of the same key name.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dictionary</ParamName>
                    <ParamType>Dictionary</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment>/** 
 * Returns this &lt;code&gt;Filter&lt;/code&gt; object's filter string. &lt;p&gt; The filter string is normalized by removing whitespace which does not affect the meaning of the filter.
 * @return Filter string.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>equals</MethodName>
            <MethodComment>/** 
 * Compares this &lt;code&gt;Filter&lt;/code&gt; object to another object.
 * @param obj The object to compare against this &lt;code&gt;Filter&lt;/code&gt;object.
 * @return If the other object is a &lt;code&gt;Filter&lt;/code&gt; object, thenreturns &lt;code&gt;this.toString().equals(obj.toString()&lt;/code&gt;;&lt;code&gt;false&lt;/code&gt; otherwise.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>obj</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hashCode</MethodName>
            <MethodComment>/** 
 * Returns the hashCode for this &lt;code&gt;Filter&lt;/code&gt; object.
 * @return The hashCode of the filter string; that is,&lt;code&gt;this.toString().hashCode()&lt;/code&gt;.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>matchCase</MethodName>
            <MethodComment>/** 
 * Filter with case sensitivity using a &lt;code&gt;Dictionary&lt;/code&gt; object. The Filter is executed using the &lt;code&gt;Dictionary&lt;/code&gt; object's keys and values. The keys are case sensitively matched with the filter.
 * @param dictionary The &lt;code&gt;Dictionary&lt;/code&gt; object whose keys areused in the match.
 * @return &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;Dictionary&lt;/code&gt; object'skeys and values match this filter; &lt;code&gt;false&lt;/code&gt; otherwise.
 * @since 1.3
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dictionary</ParamName>
                    <ParamType>Dictionary</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>