<Class>
    <Id>1787</Id>
    <Package>org.apache.derbyTesting.junit</Package>
    <ClassName>SecurityManagerSetup</ClassName>
    <SuperClass>TestSetup</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>SecurityManagerSetup  /** 
 * Configures the wrapped test to be run with the specified security policy. &lt;p&gt; This setup class normally installs the default policy file. This can be overridden by specifying  {@literal java.security.policy=&lt;NONE&gt;} (see{@linkplain #NO_POLICY}), and can also be overridden by installing a security manager explicitly before the default security manager is installed. &lt;p&gt; Individual tests/suites can be configured to be run without a security manager, with a specific policy file, or with a specific policy file merged with the default policy file. The last option is useful when you only need to extend the default policy with a few extra permissions to run a test.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>NO_POLICY</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>JVM_HAS_SUBJECT_AUTHORIZATION</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>classPathSet</FieldName>
            <FieldType>Properties</FieldType>
        </Field>
        <Field>
            <FieldName>isJars</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>externalSecurityManagerInstalled</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>jacocoEnabled</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>decoratorPolicyResource</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>additionalPolicyResource</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>decoratorSecurityManager</FieldName>
            <FieldType>SecurityManager</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>checkIfJacocoIsRunning</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>SecurityManagerSetup</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>test</ParamName>
                    <ParamType>Test</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>policyResource</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>SecurityManagerSetup</MethodName>
            <MethodComment>/** 
 * Installs a new security policy.
 * @param test the test to wrap
 * @param policyResource the policy to install
 * @param mergePolicies if {@code false} the specified policy will be theonly policy installed, if  {@code true} the specified policy will bemerged with the default test policy for the test framework
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>test</ParamName>
                    <ParamType>Test</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>policyResource</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mergePolicies</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>SecurityManagerSetup</MethodName>
            <MethodComment>/** 
 * Use custom policy and SecurityManager
 * @param test - Test to wrap
 * @param policyResource - policy resource. If null use default testing policy
 * @param securityManager - Custom SecurityManager if null use the system security manager
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>test</ParamName>
                    <ParamType>Test</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>policyResource</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>securityManager</ParamName>
                    <ParamType>SecurityManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>noSecurityManager</MethodName>
            <MethodComment>/** 
 * Get a decorator that will ensure no security manger is installed to run a test. Not supported for suites. &lt;BR&gt; An empty suite is returned if a security manager was installed externally, i.e. not under the control of the BaseTestCase and this code. In this case the code can not support the mode of no security manager as it may not have enough information to re-install the security manager. So the passed in test will be skipped.
 * @param test Test to run without a security manager. Note thatthis must be an instance of BaseTestCase as this call depends on setup code in that class. Arbitrary Test instances cannot be passed in.
 */
</MethodComment>
            <ReturnType>Test</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>test</ParamName>
                    <ParamType>Test</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>noSecurityManager</MethodName>
            <MethodComment>/** 
 * "Install" no security manager.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;installSecurityManager;[NO_POLICY]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setUp</MethodName>
            <MethodComment>/** 
 * Install specific policy file with the security manager including the special case of no security manager.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [resource=getEffectivePolicyResource(decoratorPolicyResource,additionalPolicyResource)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;installSecurityManager;[resource, decoratorSecurityManager]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>tearDown</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDefaultPolicy</MethodName>
            <MethodComment>/** 
 * Return the name of the default policy.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>installSecurityManager</MethodName>
            <MethodComment>/** 
 * Install a SecurityManager with the default test policy file: org/apache/derbyTesting/functionTests/util/derby_tests.policy
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;installSecurityManager;[getDefaultPolicy()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>installSecurityManager</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>policyFile</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;installSecurityManager;[policyFile, System.getSecurityManager()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>installSecurityManager</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>policyFile</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sm</ParamName>
                    <ParamType>SecurityManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Properties [set=new Properties(classPathSet)]</InnerVar>
                <InnerVar>SecurityManager [currentsm=System.getSecurityManager()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setSecurityPolicy;[set, policyFile]</InnerMethodInvoke>
                <InnerMethodInvoke>AccessController;doPrivileged;[new PrivilegedAction&lt;Void&gt;(){
  public Void run(){
    if (sm == null)     System.setSecurityManager(new SecurityManager());
 else     System.setSecurityManager(sm);
    Policy.getPolicy().refresh();
    return null;
  }
}
]</InnerMethodInvoke>
                <InnerMethodInvoke>null;println;["installed policy " + policyFile]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>Policy.getPolicy();refresh;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setSecurityPolicy</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>set</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>policyResource</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>determineClasspath</MethodName>
            <MethodComment>/** 
 * Determine the settings of the classpath in order to configure the variables used in the testing policy files. Looks for three items: Location of derbyTesting.jar via this class Location of derby.jar via org.apache.derby.jdbc.EmbeddedDataSource Location of derbyclient.jar via org.apache.derby.jdbc.ClientDataSource Two options are supported, either all are in jar files or all are on the classpath. Properties are set as follows: &lt;P&gt; Classpath: &lt;BR&gt; derbyTesting.codeclasses set to URL of classes folder &lt;BR&gt; derbyTesting.ppcodeclasses set to URL of the 'classes.pptesting' folder if it exists on the classpath. The existence of the package private tests is determined via org.apache.derby.PackagePrivateTestSuite &lt;P&gt; Jar files: &lt;BR&gt; derbyTesting.codejar - URL of derby.jar, derbynet.jar and derbytools.jar, all assumed to be in the same location. &lt;BR&gt; derbyTesting.clientjar - URL of derbyclient.jar &lt;BR&gt; derbyTesting.testjar - URL of derbyTesting.jar &lt;BR&gt; derbyTesting.testjarpath - File system path to derbyTesting.jar if the jar has a URL with a file protocol.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>URL [junit=getURL(junit.framework.Test.class)]</InnerVar>
                <InnerVar>URL [antjunit=getURL("org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner")]</InnerVar>
                <InnerVar>URL [ant=getURL("org.apache.tools.ant.Task")]</InnerVar>
                <InnerVar>URL [luceneCore=getURL("org.apache.lucene.store.FSDirectory")]</InnerVar>
                <InnerVar>URL [emma=getURL("com.vladium.emma.EMMAException")]</InnerVar>
                <InnerVar>String [jaxp=XML.getJAXPParserLocation()]</InnerVar>
                <InnerVar>URL [testing=getURL(SecurityManagerSetup.class)]</InnerVar>
                <InnerVar>URL [ppTesting=null]</InnerVar>
                <InnerVar>boolean [isClasspath=testing.toExternalForm().endsWith("/")]</InnerVar>
                <InnerVar>URL [derby=getURL("org.apache.derby.jdbc.BasicEmbeddedDataSource40")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>classPathSet;setProperty;["derbyTesting.testjar", stripJar(testing)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPolicyFilePropertiesForOldHarness</MethodName>
            <MethodComment>/** 
 * Return the policy file system properties for use by the old test harness. This ensures a consistent approach to setting the properties. There are the properties used to define the jar file location in any policy files.
 */
</MethodComment>
            <ReturnType>Properties</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>stripJar</MethodName>
            <MethodComment>/** 
 * Strip off the last token which will be the jar name. The returned string includes the trailing slash.
 * @param url
 * @return the jar name from the URL as a String
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>url</ParamName>
                    <ParamType>URL</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [ef=url.toExternalForm()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getURL</MethodName>
            <MethodComment>/** 
 * Get the URL of the code base from a class name. If the class cannot be loaded, null is returned.
 */
</MethodComment>
            <ReturnType>URL</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>className</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getURL</MethodName>
            <MethodComment>/** 
 * Get the URL of the code base from a class.
 */
</MethodComment>
            <ReturnType>URL</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cl</ParamName>
                    <ParamType>Class</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>URL</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>uninstallSecurityManager</MethodName>
            <MethodComment>/** 
 * Remove the security manager.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>AccessController;doPrivileged;[new PrivilegedAction&lt;Void&gt;(){
  public Void run(){
    System.setSecurityManager(null);
    return null;
  }
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>System;setSecurityManager;[null]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEffectivePolicyResource</MethodName>
            <MethodComment>/** 
 * Returns the location of the effective policy resource. &lt;p&gt; If two valid policy resources from different locations are specified, they will be merged into one policy file.
 * @param policy1 first policy
 * @param policy2 second policy (may be {@code null})
 * @return The location of a policy resource, or {@linkplain #NO_POLICY}.
 * @throws IOException if reading or writing a policy resource fails
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>policy1</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>policy2</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [resource=policy1]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getResourceURL</MethodName>
            <MethodComment>/** 
 * Returns a URL for the given policy resource.
 * @param policy the policy resource
 * @return A {@code URL} denoting the policy resource.
 * @throws MalformedURLException if the resource string not a valid URL
 */
</MethodComment>
            <ReturnType>URL</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>policy</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>URL [url=BaseTestCase.getTestResource(policy)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>MalformedURLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>mergePolicies</MethodName>
            <MethodComment>/** 
 * Merges the two specified policy resources (typically files), and writes the combined policy to a new file.
 * @param policy1 the first policy
 * @param policy2 the second policy
 * @return The resource location string for a policy file.
 * @throws IOException if reading or writing to one of the resources fails
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>policy1</ParamName>
                    <ParamType>URL</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>policy2</ParamName>
                    <ParamType>URL</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [sytemHome=BaseTestCase.getSystemProperty("derby.system.home")]</InnerVar>
                <InnerVar>File [sysDir=new File(sytemHome == null ? "system" : sytemHome)]</InnerVar>
                <InnerVar>File [varDir=new File(sysDir,"var")]</InnerVar>
                <InnerVar>File [mergedPF=new File(varDir,new File(policy2.getPath()).getName() + "-MERGED_WITH-" + new File(policy1.getPath()).getName())]</InnerVar>
                <InnerVar>OutputStream [o=PrivilegedFileOpsForTests.getFileOutputStream(mergedPF)]</InnerVar>
                <InnerVar>byte[] [buf=new byte[1024]]</InnerVar>
                <InnerVar>int [read]</InnerVar>
                <InnerVar>InputStream [i1=openStream(policy1)]</InnerVar>
                <InnerVar>InputStream [i2=openStream(policy2)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;mkdir;[sysDir]</InnerMethodInvoke>
                <InnerMethodInvoke>null;mkdir;[varDir]</InnerMethodInvoke>
                <InnerMethodInvoke>i1;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>i2;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>o;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>MalformedURLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>openStream</MethodName>
            <MethodComment>/** 
 * Opens the resource stream in a privileged block. 
 */
</MethodComment>
            <ReturnType>InputStream</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>resource</ParamName>
                    <ParamType>URL</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>InputStream</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>mkdir</MethodName>
            <MethodComment>/** 
 * Creates the specified directory if it doesn't exist. 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dir</ParamName>
                    <ParamType>File</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>AccessController;doPrivileged;[new PrivilegedAction&lt;Void&gt;(){
  public Void run(){
    if (!dir.exists() &amp;&amp; !dir.mkdir()) {
      fail("failed to create directory: " + dir.getPath());
    }
    return null;
  }
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>println</MethodName>
            <MethodComment>/** 
 * Prints a debug message if debugging is enabled. 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>msg</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>BaseTestCase;println;["{SecurityManagerSetup} " + msg]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>