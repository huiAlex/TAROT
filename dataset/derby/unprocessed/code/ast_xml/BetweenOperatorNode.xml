<Class>
    <Id>200</Id>
    <Package>org.apache.derby.impl.sql.compile</Package>
    <ClassName>BetweenOperatorNode</ClassName>
    <SuperClass>BinaryListOperatorNode</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>BetweenOperatorNode  /** 
 * A BetweenOperatorNode represents a BETWEEN clause. The between values are represented as a 2 element list in order to take advantage of code reuse.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>BetweenOperatorNode</MethodName>
            <MethodComment>/** 
 * @param leftOperand The left operand of the node
 * @param betweenValues The between values in list form
 * @param cm
 * @throws StandardException
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>leftOperand</ParamName>
                    <ParamType>ValueNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>betweenValues</ParamName>
                    <ParamType>ValueNodeList</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cm</ParamName>
                    <ParamType>ContextManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>vetValues</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ValueNodeList</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>betweenValues</ParamName>
                    <ParamType>ValueNodeList</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>eliminateNots</MethodName>
            <MethodComment>/** 
 * Eliminate NotNodes in the current query block.  We traverse the tree,  inverting ANDs and ORs and eliminating NOTs as we go.  We stop at  ComparisonOperators and boolean expressions.  We invert  ComparisonOperators and replace boolean expressions with  boolean expression = false. NOTE: Since we do not recurse under ComparisonOperators, there still could be NotNodes left in the tree.
 * @param underNotNode		Whether or not we are under a NotNode.
 * @return		The modified expression
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>ValueNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>underNotNode</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BinaryComparisonOperatorNode [leftBCO]</InnerVar>
                <InnerVar>BinaryComparisonOperatorNode [rightBCO]</InnerVar>
                <InnerVar>OrNode [newOr]</InnerVar>
                <InnerVar>ContextManager [cm=getContextManager()]</InnerVar>
                <InnerVar>ValueNode [leftClone=(leftOperand instanceof ColumnReference) ? leftOperand.getClone() : leftOperand]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>leftBCO;bindComparisonOperator;[]</InnerMethodInvoke>
                <InnerMethodInvoke>rightBCO;bindComparisonOperator;[]</InnerMethodInvoke>
                <InnerMethodInvoke>newOr;postBindFixup;[]</InnerMethodInvoke>
                <InnerMethodInvoke>leftBCO;setBetweenSelectivity;[]</InnerMethodInvoke>
                <InnerMethodInvoke>rightBCO;setBetweenSelectivity;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>preprocess</MethodName>
            <MethodComment>/** 
 * Preprocess an expression tree.  We do a number of transformations here (including subqueries, IN lists, LIKE and BETWEEN) plus subquery flattening. NOTE: This is done before the outer ResultSetNode is preprocessed.
 * @param numTables			Number of tables in the DML Statement
 * @param outerFromList		FromList from outer query block
 * @param outerSubqueryList	SubqueryList from outer query block
 * @param outerPredicateList	PredicateList from outer query block
 * @return		The modified expression
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>ValueNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>numTables</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>outerFromList</ParamName>
                    <ParamType>FromList</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>outerSubqueryList</ParamName>
                    <ParamType>SubqueryList</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>outerPredicateList</ParamName>
                    <ParamType>PredicateList</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ValueNode [leftClone1]</InnerVar>
                <InnerVar>ValueNode [rightOperand]</InnerVar>
                <InnerVar>ContextManager [cm=getContextManager()]</InnerVar>
                <InnerVar>BooleanConstantNode [trueNode=new BooleanConstantNode(true,cm)]</InnerVar>
                <InnerVar>BinaryComparisonOperatorNode [lessEqual=new BinaryRelationalOperatorNode(BinaryRelationalOperatorNode.K_LESS_EQUALS,leftClone1,rightOperandList.elementAt(1),false,cm)]</InnerVar>
                <InnerVar>AndNode [newAnd=new AndNode(lessEqual,trueNode,cm)]</InnerVar>
                <InnerVar>BinaryComparisonOperatorNode [greaterEqual=new BinaryRelationalOperatorNode(BinaryRelationalOperatorNode.K_GREATER_EQUALS,leftOperand,rightOperandList.elementAt(0),false,cm)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>lessEqual;bindComparisonOperator;[]</InnerMethodInvoke>
                <InnerMethodInvoke>newAnd;postBindFixup;[]</InnerMethodInvoke>
                <InnerMethodInvoke>greaterEqual;bindComparisonOperator;[]</InnerMethodInvoke>
                <InnerMethodInvoke>newAnd;postBindFixup;[]</InnerMethodInvoke>
                <InnerMethodInvoke>lessEqual;setBetweenSelectivity;[]</InnerMethodInvoke>
                <InnerMethodInvoke>greaterEqual;setBetweenSelectivity;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateExpression</MethodName>
            <MethodComment>/** 
 * Do code generation for this BETWEEN operator.
 * @param acb	The ExpressionClassBuilder for the class we're generating
 * @param mb	The method the code to place the code
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>acb</ParamName>
                    <ParamType>ExpressionClassBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mb</ParamName>
                    <ParamType>MethodBuilder</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AndNode [newAnd]</InnerVar>
                <InnerVar>BinaryComparisonOperatorNode [leftBCO]</InnerVar>
                <InnerVar>BinaryComparisonOperatorNode [rightBCO]</InnerVar>
                <InnerVar>ContextManager [cm=getContextManager()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>leftBCO;bindComparisonOperator;[]</InnerMethodInvoke>
                <InnerMethodInvoke>rightBCO;bindComparisonOperator;[]</InnerMethodInvoke>
                <InnerMethodInvoke>newAnd;postBindFixup;[]</InnerMethodInvoke>
                <InnerMethodInvoke>newAnd;generateExpression;[acb, mb]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>