<Class>
    <Id>1037</Id>
    <Package>org.apache.derby.impl.io.vfmem</Package>
    <ClassName>BlockedByteArray</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>BlockedByteArray  /** 
 * Stores data in blocks, and supports reading/writing data from/into these blocks. &lt;p&gt; The blocked array is expanded and shrunk as required.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>_4K</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>_8K</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>_16K</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>_32K</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>DEFAULT_BLOCKSIZE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>INITIAL_BLOCK_HOLDER_SIZE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>MIN_HOLDER_GROWTH</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>blocks</FieldName>
            <FieldType>byte[][]</FieldType>
        </Field>
        <Field>
            <FieldName>blockSize</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>allocatedBlocks</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>length</FieldName>
            <FieldType>long</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>BlockedByteArray</MethodName>
            <MethodComment>/** 
 * Creates a new blocked byte array with the default number of slots to hold byte arrays (blocks). &lt;p&gt; No blocks are pre-allocated.
 * @see #INITIAL_BLOCK_HOLDER_SIZE
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>read</MethodName>
            <MethodComment>/** 
 * Returns the byte at the given position.
 * @param pos position to read from
 * @return A single byte.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pos</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>read</MethodName>
            <MethodComment>/** 
 * Reads up to  {@code len} bytes.
 * @param pos the position to start reading at
 * @param buf the destination buffer
 * @param offset offset into the destination buffer
 * @param len the number of bytes to read
 * @return The number of bytes read.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pos</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>buf</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>offset</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>len</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [block=(int)(pos / blockSize)]</InnerVar>
                <InnerVar>int [index=(int)(pos % blockSize)]</InnerVar>
                <InnerVar>int [read=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>length</MethodName>
            <MethodComment>/** 
 * Returns the number of bytes allocated.
 * @return Bytes allocated.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setLength</MethodName>
            <MethodComment>/** 
 * Changes the allocated length of the data. &lt;p&gt; If the new length is larger than the current length, the blocked byte array will be extended with new blocks. If the new length is smaller, existing (allocated) blocks will be removed if possible.
 * @param newLength the new length of the allocated data in bytes
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>newLength</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>long [currentCapacity=(long)allocatedBlocks * blockSize]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeBytes</MethodName>
            <MethodComment>/** 
 * Writes the given bytes into the blocked byte array.
 * @param pos the position to start writing at
 * @param buf the source buffer
 * @param offset the offset into the source buffer
 * @param len the number of bytes to write
 * @return The number of bytes written.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pos</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>buf</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>offset</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>len</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [block=(int)(pos / blockSize)]</InnerVar>
                <InnerVar>int [index=(int)(pos % blockSize)]</InnerVar>
                <InnerVar>int [written=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;increaseCapacity;[pos + len]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeByte</MethodName>
            <MethodComment>/** 
 * Writes the given byte into the blocked byte array.
 * @param pos the position to write the byte at
 * @param b the byte to write
 * @return {@code 1}, which is the number of bytes written.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pos</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>b</ParamName>
                    <ParamType>byte</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [block=(int)(pos / blockSize)]</InnerVar>
                <InnerVar>int [index=(int)(pos % blockSize)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;increaseCapacity;[pos]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getInputStream</MethodName>
            <MethodComment>/** 
 * Returns an input stream serving the data in the blocked byte array.
 * @return An {@code InputStream}-object.
 */
</MethodComment>
            <ReturnType>BlockedByteArrayInputStream</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOutputStream</MethodName>
            <MethodComment>/** 
 * Returns an output stream writing data into the blocked byte array.
 * @param pos initial position of the output stream
 * @return An {@code OutputStream}-object.
 */
</MethodComment>
            <ReturnType>BlockedByteArrayOutputStream</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pos</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>release</MethodName>
            <MethodComment>/** 
 * Releases this array.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkBlockSize</MethodName>
            <MethodComment>/** 
 * Tries to optimize the block size by setting it equal to the the page size used by the database. &lt;p&gt; Since we don't have a way of knowing which page size will be used, wait to set the block size until the first write request and see how many bytes are written then.
 * @param len the requested number of bytes to be written
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>len</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>increaseCapacity</MethodName>
            <MethodComment>/** 
 * Increases the capacity of this blocked byte array by allocating more blocks.
 * @param lastIndex the index that must fit into the array
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lastIndex</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [blocksRequired=(int)((lastIndex) / blockSize) + 1]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>