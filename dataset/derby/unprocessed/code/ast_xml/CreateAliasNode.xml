<Class>
    <Id>1211</Id>
    <Package>org.apache.derby.impl.sql.compile</Package>
    <ClassName>CreateAliasNode</ClassName>
    <SuperClass>DDLStatementNode</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>CreateAliasNode  /** 
 * A CreateAliasNode represents a CREATE ALIAS statement.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>PARAMETER_ARRAY</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>TABLE_NAME</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>DYNAMIC_RESULT_SET_COUNT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>LANGUAGE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>EXTERNAL_NAME</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>PARAMETER_STYLE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SQL_CONTROL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>DETERMINISTIC</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>NULL_ON_NULL_INPUT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>RETURN_TYPE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>ROUTINE_SECURITY_DEFINER</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>VARARGS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>ROUTINE_ELEMENT_COUNT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>NON_RESERVED_FUNCTION_NAMES</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>NON_RESERVED_AGGREGATES</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>AGG_FOR_TYPE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>AGG_RETURN_TYPE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>AGG_ELEMENT_COUNT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>javaClassName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>methodName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>aliasType</FieldName>
            <FieldType>char</FieldType>
        </Field>
        <Field>
            <FieldName>aliasInfo</FieldName>
            <FieldType>AliasInfo</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>CreateAliasNode</MethodName>
            <MethodComment>/** 
 * Constructor
 * @param aliasName				The name of the alias
 * @param targetObject          Target name string or, ifaliasType == ALIAS_TYPE_SYNONYM_AS_CHAR, a TableName
 * @param methodName		    The method name
 * @param aliasSpecificInfo     An array of objects, see code forinterpretation
 * @param cm                    The context manager
 * @exception StandardException Thrown on error
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>aliasName</ParamName>
                    <ParamType>TableName</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>targetObject</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>methodName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>aliasSpecificInfo</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>aliasType</ParamName>
                    <ParamType>char</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cm</ParamName>
                    <ParamType>ContextManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>statementToString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>bindStatement</MethodName>
            <MethodComment>/** 
 * Bind this CreateAliasNode.  This means doing any static error checking that can be done before actually creating the table. For example, verifying that the column name list does not contain any duplicate column names.
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [targetSchema=((SynonymAliasInfo)aliasInfo).getSynonymSchema()]</InnerVar>
                <InnerVar>String [targetTable=((SynonymAliasInfo)aliasInfo).getSynonymTable()]</InnerVar>
                <InnerVar>SchemaDescriptor [targetSD=getSchemaDescriptor(targetSchema,false)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>bindAggregate</MethodName>
            <MethodComment>/** 
 * Extra logic for binding user-defined aggregate definitions 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [unqualifiedName=getRelativeName()]</InnerVar>
                <InnerVar>SchemaDescriptor [sysfun=getSchemaDescriptor("SYSFUN",true)]</InnerVar>
                <InnerVar>List&lt;AliasDescriptor&gt; [systemFunctions=getDataDictionary().getRoutineList(sysfun.getUUID().toString(),unqualifiedName,AliasInfo.ALIAS_NAME_SPACE_FUNCTION_AS_CHAR)]</InnerVar>
                <InnerVar>AggregateAliasInfo [aai=(AggregateAliasInfo)aliasInfo]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>aai;setCollationTypeForAllStringTypes;[getSchemaDescriptor().getCollationType()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>illegalAggregate</MethodName>
            <MethodComment>/** 
 * Construct an exception flagging an illegal aggregate name 
 */
</MethodComment>
            <ReturnType>StandardException</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>bindParameterTypes</MethodName>
            <MethodComment>/** 
 * Bind the class names for UDTs 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>aliasInfo</ParamName>
                    <ParamType>RoutineAliasInfo</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>TypeDescriptor[] [parameterTypes=aliasInfo.getParameterTypes()]</InnerVar>
                <InnerVar>int [count=parameterTypes.length]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>aliasInfo;setParameterTypes;[parameterTypes]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeConstantAction</MethodName>
            <MethodComment>/** 
 * Create the Constant information that will drive the guts of Execution.
 * @exception StandardException		Thrown on failure
 */
</MethodComment>
            <ReturnType>ConstantAction</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [schemaName=getSchemaDescriptor().getSchemaName()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>