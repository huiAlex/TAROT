<Class>
    <Id>1280</Id>
    <Package>org.apache.derby.iapi.sql.compile</Package>
    <ClassName>ASTVisitor</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Visitor</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ASTVisitor  /** 
 * &lt;p&gt; A Visitor which handles nodes in Derby's abstract syntax trees. In addition to this contract, it is expected that an ASTVisitor will have a 0-arg constructor. You use an ASTVisitor like this: &lt;/p&gt; &lt;blockquote&gt;&lt;pre&gt; // initialize your visitor MyASTVisitor myVisitor = new MyASTVisitor(); myVisitor.initializeVisitor(); languageConnectionContext.setASTVisitor( myVisitor ); // then run your queries. ... // when you're done inspecting query trees, release resources and // remove your visitor languageConnectionContext.setASTVisitor( null ); myVisitor.teardownVisitor(); &lt;/pre&gt;&lt;/blockquote&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>AFTER_PARSE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>AFTER_BIND</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>AFTER_OPTIMIZE</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>initializeVisitor</MethodName>
            <MethodComment>/** 
 * Initialize the Visitor before processing any trees. User-written code calls this method before poking the Visitor into the LanguageConnectionContext. For example, an implementation of this method might open a trace file.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>teardownVisitor</MethodName>
            <MethodComment>/** 
 * Final call to the Visitor. User-written code calls this method when it is done inspecting query trees. For instance, an implementation of this method might release resources, closing files it has opened.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>begin</MethodName>
            <MethodComment>/** 
 * The compiler calls this method just before walking a query tree.
 * @param statementText Text used to create the tree.
 * @param phase of compilation (AFTER_PARSE, AFTER_BIND, or AFTER_OPTIMIZE).
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>statementText</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>phase</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>end</MethodName>
            <MethodComment>/** 
 * The compiler calls this method when it's done walking a tree.
 * @param phase of compilation (AFTER_PARSE, AFTER_BIND, or AFTER_OPTIMIZE).
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>phase</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>