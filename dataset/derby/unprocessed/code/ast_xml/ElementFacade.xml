<Class>
    <Id>1814</Id>
    <Package>org.apache.derbyBuild</Package>
    <ClassName>ElementFacade</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ElementFacade  /** 
 * A convenience wrapper around an XML Document Element. Provides some utility methods for common operations on Element trees.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>root</FieldName>
            <FieldType>Element</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ElementFacade</MethodName>
            <MethodComment>/** 
 * Construct a new ElementFacade from an Element.
 * @param r - the Element to wrap
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>r</ParamName>
                    <ParamType>Element</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ElementFacade</MethodName>
            <MethodComment>/** 
 * Construct a new ElementFacade from a Document (extract the top Element)
 * @param d document to get Element from
 * @throws java.lang.Exception
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>d</ParamName>
                    <ParamType>Document</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getElementByTagName</MethodName>
            <MethodComment>/** 
 * Lookup the Element subtree that starts with the specified tag. If more than one, or no such tags exist an IllegalArgumentException is thrown.
 * @param tag to look up in wrapped tree
 * @return Element subtree rooted at the specified tag
 * @throws java.lang.Exception
 */
</MethodComment>
            <ReturnType>Element</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tag</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>NodeList [matchingTags=root.getElementsByTagName(tag)]</InnerVar>
                <InnerVar>int [length=matchingTags.getLength()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTextByTagName</MethodName>
            <MethodComment>/** 
 * Lookup the text (as String) identified by the specified tag. If more than one, or no such tags exist an IllegalArgumentException is thrown.
 * @param tag to look up in wrapped tree
 * @return text corresponding to the specified tag
 * @throws java.lang.Exception
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tag</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTextListByTagName</MethodName>
            <MethodComment>/** 
 * Produce a list of the texts specified by the instances of tag in the wrapped tree. An empty list is retured if there are no instances of tag in the tree.
 * @param tag to look up in wrapped tree
 * @return list of texts corresponding to the specified tag
 * @throws java.lang.Exception
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tag</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>NodeList [matchingTags=root.getElementsByTagName(tag)]</InnerVar>
                <InnerVar>int [length=matchingTags.getLength()]</InnerVar>
                <InnerVar>ArrayList&lt;String&gt; [tagValues=new ArrayList&lt;String&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>