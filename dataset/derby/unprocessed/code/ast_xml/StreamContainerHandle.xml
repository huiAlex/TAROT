<Class>
    <Id>1263</Id>
    <Package>org.apache.derby.iapi.store.raw</Package>
    <ClassName>StreamContainerHandle</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>StreamContainerHandle  /** 
 * A Stream Container handle
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>TEMPORARY_SEGMENT</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getId</MethodName>
            <MethodComment>/** 
 * Return my identifier.
 */
</MethodComment>
            <ReturnType>ContainerKey</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getContainerProperties</MethodName>
            <MethodComment>/** 
 * Request the system properties associated with a container.  &lt;p&gt; Request the value of properties that are associated with a stream table. The following properties can be requested: derby.storage.streamFileBufferSize  &lt;p&gt; To get the value of a particular property add it to the property list, and on return the value of the property will be set to it's current  value.  For example: get_prop(ConglomerateController cc) { Properties prop = new Properties(); prop.put("derby.storage.streamFileBufferSize", ""); cc.getTableProperties(prop); System.out.println( "table's buffer size = " +  prop.getProperty("derby.storage.streamFileBufferSize"); }
 * @param prop   Property list to fill in.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>prop</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fetchNext</MethodName>
            <MethodComment>/** 
 * Fetch the next record. Fills in the Storable columns within the passed in row if row is not null, otherwise the record is not fetched. If the row.length is less than the number of fields in the row, then, will fill the row, and ignore the rest of the row. &lt;BR&gt; When no more row is found, then false is returned. &lt;P&gt; &lt;B&gt;Locking Policy&lt;/B&gt; &lt;BR&gt; No locks.
 * @param row Row to be filled in with information from the record.
 * @exception StandardException	Standard Derby error policy
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>DataValueDescriptor[]</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>close</MethodName>
            <MethodComment>/** 
 * Close me. After using this method the caller must throw away the reference to the Container object, e.g. &lt;PRE&gt; ref.close(); ref = null; &lt;/PRE&gt; &lt;BR&gt; The container will be closed automatically at the commit or abort of the transaction if this method is not called explictly.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeContainer</MethodName>
            <MethodComment>/** 
 * remove the stream container
 * @exception StandardException Standard Derby error policy		
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>