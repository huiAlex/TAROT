<Class>
    <Id>1859</Id>
    <Package>org.apache.derby.client.am</Package>
    <ClassName>ClobLocatorWriter</ClassName>
    <SuperClass>Writer</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ClobLocatorWriter  /** 
 * An  {@code Writer} that will use an locator to write theClob value into the server. &lt;p&gt; This  {@code Writer} implementation is pretty basic.  Nobuffering of data is done.  Hence, for efficiency  {@code #write(char[])}should be used instead of  {@code #write(int)}.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>connection</FieldName>
            <FieldType>ClientConnection</FieldType>
        </Field>
        <Field>
            <FieldName>clob</FieldName>
            <FieldType>ClientClob</FieldType>
        </Field>
        <Field>
            <FieldName>currentPos</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>isClosed</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ClobLocatorWriter</MethodName>
            <MethodComment>/** 
 * Create a  {@code Writer} for writing to the{@code Clob} value represented by the given locator based{@code Clob} object.
 * @param connection connection to be used to write to the{@code Clob} value on the server
 * @param clob {@code Clob} object that contains locator forthe  {@code Clob} value on the server.
 * @param pos the position in the {@code CLOB} value at whichto start writing; the first position is 1
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>connection</ParamName>
                    <ParamType>ClientConnection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>clob</ParamName>
                    <ParamType>ClientClob</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pos</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>close</MethodName>
            <MethodComment>/** 
 * @see java.io.Writer#close()
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkClosed</MethodName>
            <MethodComment>/** 
 * Check to see if this  {@code Writer} is closed. If itis closed throw an  {@code IOException} that states thatthe stream is closed.
 * @throws IOException if isClosed = true.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>write</MethodName>
            <MethodComment>/** 
 * @see java.io.Writer#write(int) This method writes one Character at a time to the server. For more efficient writing, use #write(char[]).
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>char[] [ca={(char)c}]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;writeCharacters;[ca, 0, ca.length]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>write</MethodName>
            <MethodComment>/** 
 * @see java.io.Writer#write(char[])
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>char[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkClosed;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;writeCharacters;[c, 0, c.length]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>flush</MethodName>
            <MethodComment>/** 
 * @see java.io.Writer#flush()
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>write</MethodName>
            <MethodComment>/** 
 * @see java.io.Writer#write(char[],int,int)
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>char[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>off</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>len</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkClosed;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;writeCharacters;[c, off, len]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeCharacters</MethodName>
            <MethodComment>/** 
 * Write the  {@code char[]} to the {@code Clob} value onthe server; starting from the current position of this stream.
 * @param c The character array containing the chars to be written
 * @throws java.io.IOException Wrapped SqlException if writingto server fails.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>char[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>off</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>len</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>