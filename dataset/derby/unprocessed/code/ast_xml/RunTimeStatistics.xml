<Class>
    <Id>1969</Id>
    <Package>org.apache.derby.iapi.sql.execute</Package>
    <ClassName>RunTimeStatistics</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>RunTimeStatistics  /** 
 * A RunTimeStatistics object is a representation of the query execution plan and run time statistics for a java.sql.ResultSet. A query execution plan is a tree of execution nodes.  There are a number of possible node types.  Statistics  are accumulated during execution at each node.  The types of statistics include the amount of time spent in specific operations (if STATISTICS TIMING is SET ON), the number of rows passed to the node by its child(ren) and the number of rows returned by the node to its parent.  (The exact statistics are specific to each node type.) &lt;P&gt; RunTimeStatistics is most meaningful for DML statements (SELECT, INSERT, DELETE and UPDATE).
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getCompileTimeInMillis</MethodName>
            <MethodComment>/** 
 * Get the total compile time for the associated query in milliseconds. Compile time can be divided into parse, bind, optimize and generate times. &lt;P&gt; 0 is returned if STATISTICS TIMING is not SET ON.
 * @return	The total compile time for the associated query in milliseconds.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getParseTimeInMillis</MethodName>
            <MethodComment>/** 
 * Get the parse time for the associated query in milliseconds. &lt;P&gt; 0 is returned if STATISTICS TIMING is not SET ON.
 * @return	The parse time for the associated query in milliseconds.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBindTimeInMillis</MethodName>
            <MethodComment>/** 
 * Get the bind time for the associated query in milliseconds.
 * @return	The bind time for the associated query in milliseconds.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOptimizeTimeInMillis</MethodName>
            <MethodComment>/** 
 * Get the optimize time for the associated query in milliseconds. &lt;P&gt; 0 is returned if STATISTICS TIMING is not SET ON.
 * @return	The optimize time for the associated query in milliseconds.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getGenerateTimeInMillis</MethodName>
            <MethodComment>/** 
 * Get the generate time for the associated query in milliseconds. &lt;P&gt; 0 is returned if STATISTICS TIMING is not SET ON.
 * @return	The generate time for the associated query in milliseconds.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getExecuteTimeInMillis</MethodName>
            <MethodComment>/** 
 * Get the execute time for the associated query in milliseconds. &lt;P&gt; 0 is returned if STATISTICS TIMING is not SET ON.
 * @return	The execute time for the associated query in milliseconds.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBeginCompilationTimestamp</MethodName>
            <MethodComment>/** 
 * Get the timestamp for the beginning of query compilation.  &lt;P&gt; A null is returned if STATISTICS TIMING is not SET ON.
 * @return	The timestamp for the beginning of query compilation.
 */
</MethodComment>
            <ReturnType>Timestamp</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEndCompilationTimestamp</MethodName>
            <MethodComment>/** 
 * Get the timestamp for the end of query compilation.  &lt;P&gt; A null is returned if STATISTICS TIMING is not SET ON.
 * @return	The timestamp for the end of query compilation.
 */
</MethodComment>
            <ReturnType>Timestamp</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBeginExecutionTimestamp</MethodName>
            <MethodComment>/** 
 * Get the timestamp for the beginning of query execution.  &lt;P&gt; A null is returned if STATISTICS TIMING is not SET ON.
 * @return	The timestamp for the beginning of query execution.
 */
</MethodComment>
            <ReturnType>Timestamp</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEndExecutionTimestamp</MethodName>
            <MethodComment>/** 
 * Get the timestamp for the end of query execution.  &lt;P&gt; A null is returned if STATISTICS TIMING is not SET ON.
 * @return	The timestamp for the end of query execution.
 */
</MethodComment>
            <ReturnType>Timestamp</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStatementName</MethodName>
            <MethodComment>/** 
 * Get the name of the associated query or statement. (This will be an internally generated name if the user did not assign a name.)
 * @return	The name of the associated query or statement.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSPSName</MethodName>
            <MethodComment>/** 
 * Get the name of the Stored Prepared Statement used for the statement.  This method returns a value only for &lt;i&gt;EXECUTE STATEMENT&lt;/i&gt; statements; otherwise, returns null. &lt;p&gt; Note that the name is returned in the schema.name format (e.g. APP.MYSTMT).
 * @return	The Stored Prepared Statement name of the associated statement, or null if it is not an EXECUTE  STATEMENT statement.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStatementText</MethodName>
            <MethodComment>/** 
 * Get the text for the associated query or statement.
 * @return	The text for the associated query or statement.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStatementExecutionPlanText</MethodName>
            <MethodComment>/** 
 * Get a String representation of the execution plan  for the associated query or statement.
 * @return	The execution plan for the associated query or statement.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getScanStatisticsText</MethodName>
            <MethodComment>/** 
 * Get a String representation of the information on the nodes  relating to table and index scans from the execution plan for  the associated query or statement.
 * @return	The nodes relating to table and index scansfrom the execution plan for the associated query or statement.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getScanStatisticsText</MethodName>
            <MethodComment>/** 
 * Get a String representation of the information on the nodes  relating to table and index scans from the execution plan for  the associated query or statement for a particular table. &lt;P&gt;
 * @param tableName The table for which user desires statistics.&lt;P&gt;
 * @return	The nodes relating to table and index scansfrom the execution plan for the associated query or statement.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tableName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEstimatedRowCount</MethodName>
            <MethodComment>/** 
 * Get the estimated row count for the number of rows returned by the associated query or statement.
 * @return	The estimated number of rows returned by the associatedquery or statement.
 */
</MethodComment>
            <ReturnType>double</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>acceptFromTopResultSet</MethodName>
            <MethodComment>/** 
 * Initiate a visit of the ResultSetStatistics tree from the top.
 * @param v the visitor that wishes to visit the tree.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>v</ParamName>
                    <ParamType>XPLAINVisitor</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>