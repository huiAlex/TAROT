<Class>
    <Id>1842</Id>
    <Package>org.apache.derby.iapi.store.access</Package>
    <ClassName>RowCountable</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>RowCountable  /** 
 * Allows clients to read and write row count estimates for conglomerates.
 * @see ScanController
 * @see StoreCostController
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getEstimatedRowCount</MethodName>
            <MethodComment>/** 
 * Get the total estimated number of rows in the container. &lt;p&gt; The number is a rough estimate and may be grossly off.  In general the server will cache the row count and then occasionally write the count unlogged to a backing store.  If the system happens to  shutdown before the store gets a chance to update the row count it may wander from reality. &lt;p&gt; For btree conglomerates this call will return the count of both user rows and internal implementaation rows.  The "BTREE" implementation generates 1 internal implementation row for each page in the btree, and  it generates 1 internal implementation row for each branch row.  For this reason it is recommended that clients if possible use the count of rows in the heap table to estimate the number of rows in the index rather than use the index estimated row count.
 * @return The total estimated number of rows in the conglomerate.
 * @throws StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setEstimatedRowCount</MethodName>
            <MethodComment>/** 
 * Set the total estimated number of rows in the container. &lt;p&gt; Often, after a scan, the client of RawStore has a much better estimate of the number of rows in the container than what store has. Currently, a scan, followed by an update of the estimate, will be performed when: &lt;ul&gt; &lt;li&gt;running SYSCS_UTIL.SYSCS_UPDATE_STATISTICS&lt;/li&gt; &lt;li&gt;the automatic update of index statistics kicks in (see  {@code IndexStatisticsDaemon})&lt;/li&gt; &lt;li&gt;performing table scans&lt;/li&gt; &lt;li&gt;creating an index on a populated table&lt;/li&gt; &lt;/ul&gt; This interface allows the client to set the estimated row count for the container, and store will use that number for all future references. &lt;p&gt; This routine can also be used to set the estimated row count in the index to the number of rows in the base table, another workaround for the problem that index estimated row count includes non-user rows.
 * @param count the estimated number of rows in the container.
 * @throws StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>count</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>