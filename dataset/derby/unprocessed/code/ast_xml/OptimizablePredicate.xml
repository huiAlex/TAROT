<Class>
    <Id>1114</Id>
    <Package>org.apache.derby.iapi.sql.compile</Package>
    <ClassName>OptimizablePredicate</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>OptimizablePredicate  /** 
 * OptimizablePredicate provides services for optimizing predicates in a query.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getReferencedMap</MethodName>
            <MethodComment>/** 
 * Get the map of referenced tables for this OptimizablePredicate.
 * @return JBitSet	Referenced table map.
 */
</MethodComment>
            <ReturnType>JBitSet</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasSubquery</MethodName>
            <MethodComment>/** 
 * Return whether or not an OptimizablePredicate contains a subquery.
 * @return boolean	Whether or not an OptimizablePredicate includes a subquery.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasMethodCall</MethodName>
            <MethodComment>/** 
 * Return whether or not an OptimizablePredicate contains a method call.
 * @return boolean	Whether or not an OptimizablePredicate includes a method call.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>markStartKey</MethodName>
            <MethodComment>/** 
 * Tell the predicate that it is to be used as a column in the start key value for an index scan.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isStartKey</MethodName>
            <MethodComment>/** 
 * Is this predicate a start key? 
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>markStopKey</MethodName>
            <MethodComment>/** 
 * Tell the predicate that it is to be used as a column in the stop key value for an index scan.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isStopKey</MethodName>
            <MethodComment>/** 
 * Is this predicate a stop key? 
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>markQualifier</MethodName>
            <MethodComment>/** 
 * Tell the predicate that it is to be used as a qualifier in an index scan.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isQualifier</MethodName>
            <MethodComment>/** 
 * Is this predicate a qualifier? 
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compareWithKnownConstant</MethodName>
            <MethodComment>/** 
 * Is this predicate a comparison with a known constant value?
 * @param optTable	The Optimizable that we want to know whether weare comparing to a known constant.
 * @param considerParameters	Whether or not to consider parameters with defaultsas known constants.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>optTable</ParamName>
                    <ParamType>Optimizable</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>considerParameters</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCompareValue</MethodName>
            <MethodComment>/** 
 * Get an Object representing the known constant value that the given Optimizable is being compared to.
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>DataValueDescriptor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>optTable</ParamName>
                    <ParamType>Optimizable</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>equalsComparisonWithConstantExpression</MethodName>
            <MethodComment>/** 
 * Is this predicate an equality comparison with a constant expression? (IS NULL is considered to be an = comparison with a constant expression).
 * @param optTable	The Optimizable for which we want to know whetherit is being equality-compared to a constant expression.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>optTable</ParamName>
                    <ParamType>Optimizable</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasEqualOnColumnList</MethodName>
            <MethodComment>/** 
 * Returns if the predicate involves an equal operator on one of the columns specified in the baseColumnPositions.
 * @param baseColumnPositions	the column numbers on which the user wantsto check if the equality condition exists.
 * @param optTable the table for which baseColumnPositions are given.
 * @return returns the index into baseColumnPositions of the column that has theequality operator.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>baseColumnPositions</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>optTable</ParamName>
                    <ParamType>Optimizable</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>selectivity</MethodName>
            <MethodComment>/** 
 * Get a (crude) estimate of the selectivity of this predicate. This is to be used when no better technique is available for estimating the selectivity - this method's estimate is a hard- wired number based on the type of predicate and the datatype (the selectivity of boolean is always 50%).
 * @param optTable	The Optimizable that this predicate restricts
 */
</MethodComment>
            <ReturnType>double</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>optTable</ParamName>
                    <ParamType>Optimizable</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getIndexPosition</MethodName>
            <MethodComment>/** 
 * Get the position of the index column that this predicate restricts. NOTE: This assumes that this predicate is part of an OptimizablePredicateList, and that classify() has been called on the OptimizablePredicateList.
 * @return The index position that this predicate restricts (zero-based)
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>