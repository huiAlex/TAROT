<Class>
    <Id>1349</Id>
    <Package>org.apache.derby.iapi.store.access</Package>
    <ClassName>StoreCostController</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>RowCountable</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>StoreCostController  /** 
 * The StoreCostController interface provides methods that an access client (most likely the system optimizer) can use to get store's estimated cost of various operations on the conglomerate the StoreCostController was opened for. &lt;p&gt; It is likely that the implementation of StoreCostController will open  the conglomerate and will leave the conglomerate open until the StoreCostController is closed.  This represents a significant amount of work, so the caller if possible should attempt to open the StoreCostController once per unit of work and rather than close and reopen the controller.  For instance if the optimizer needs to cost 2 different scans against a single conglomerate, it should use one instance of the StoreCostController. &lt;p&gt; The locking behavior of the implementation of a StoreCostController is undefined, it may or may not get locks on the underlying conglomerate.  It may or may not hold locks until end of transaction.   An optimal implementation will not get any locks on the underlying  conglomerate, thus allowing concurrent access to the table by a executing query while another query is optimizing. &lt;p&gt;
 * @see TransactionController#openStoreCost
 * @see RowCountable
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>BASE_CACHED_ROW_FETCH_COST</FieldName>
            <FieldType>double</FieldType>
        </Field>
        <Field>
            <FieldName>BASE_UNCACHED_ROW_FETCH_COST</FieldName>
            <FieldType>double</FieldType>
        </Field>
        <Field>
            <FieldName>BASE_GROUPSCAN_ROW_COST</FieldName>
            <FieldType>double</FieldType>
        </Field>
        <Field>
            <FieldName>BASE_NONGROUPSCAN_ROW_FETCH_COST</FieldName>
            <FieldType>double</FieldType>
        </Field>
        <Field>
            <FieldName>BASE_HASHSCAN_ROW_FETCH_COST</FieldName>
            <FieldType>double</FieldType>
        </Field>
        <Field>
            <FieldName>BASE_ROW_PER_BYTECOST</FieldName>
            <FieldType>double</FieldType>
        </Field>
        <Field>
            <FieldName>STORECOST_CLUSTERED</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>STORECOST_SCAN_SET</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>STORECOST_SCAN_NORMAL</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>close</MethodName>
            <MethodComment>/** 
 * Close the controller. &lt;p&gt; Close the open controller.  This method always succeeds, and never  throws any exceptions. Callers must not use the StoreCostController  Cost controller after closing it; they are strongly advised to clear out the scan controller reference after closing. &lt;p&gt;
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFetchFromRowLocationCost</MethodName>
            <MethodComment>/** 
 * Return the cost of calling ConglomerateController.fetch(). &lt;p&gt; Return the estimated cost of calling ConglomerateController.fetch() on the current conglomerate.  This gives the cost of finding a record in the conglomerate given the exact RowLocation of the record in question.  &lt;p&gt; The validColumns parameter describe what kind of row  is being fetched, ie. it may be cheaper to fetch a partial row than a  complete row. &lt;p&gt;
 * @param validColumns    A description of which columns to return fromrow on the page into "templateRow."  templateRow, and validColumns work together to describe the row to be returned by the fetch -  see RowUtil for description of how these three  parameters work together to describe a fetched  "row".
 * @param access_type     Describe the type of access the query will beperforming to the ConglomerateController.   STORECOST_CLUSTERED - The location of one fetch is likely clustered "close" to the next  fetch.  For instance if the query plan were to sort the RowLocations of a heap and then use those RowLocations sequentially to  probe into the heap, then this flag should be specified.  If this flag is not set then access to the table is assumed to be random - ie. the type of access one gets  if you scan an index and probe each row in turn into the base table is "random".
 * @return The cost of the fetch.
 * @exception StandardException  Standard exception policy.
 * @see RowUtil
 */
</MethodComment>
            <ReturnType>double</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>validColumns</ParamName>
                    <ParamType>FormatableBitSet</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>access_type</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFetchFromFullKeyCost</MethodName>
            <MethodComment>/** 
 * Return the cost of exact key lookup. &lt;p&gt; Return the estimated cost of calling ScanController.fetch() on the current conglomerate, with start and stop positions set such that an exact match is expected. &lt;p&gt; This call returns the cost of a fetchNext() performed on a scan which has been positioned with a start position which specifies exact match on all keys in the row. &lt;p&gt; Example: &lt;p&gt; In the case of a btree this call can be used to determine the cost of doing an exact probe into btree, giving all key columns.  This cost can be used if the client knows it will be doing an exact key probe but does not have the key's at optimize time to use to make a call to getScanCost() &lt;p&gt;
 * @param validColumns    A description of which columns to return fromrow on the page into "templateRow."  templateRow, and validColumns work together to describe the row to be returned by the fetch -  see RowUtil for description of how these three  parameters work together to describe a fetched  "row".
 * @param access_type     Describe the type of access the query will beperforming to the ScanController.   STORECOST_CLUSTERED - The location of one scan is likely clustered "close" to the previous  scan.  For instance if the query plan were to used repeated "reopenScan()'s" to probe for the next key in an index, then this flag should be be specified.  If this flag is not  set then each scan will be costed independant of any other predicted scan access.
 * @return The cost of the fetch.
 * @exception StandardException  Standard exception policy.
 * @see RowUtil
 */
</MethodComment>
            <ReturnType>double</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>validColumns</ParamName>
                    <ParamType>FormatableBitSet</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>access_type</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getScanCost</MethodName>
            <MethodComment>/** 
 * Calculate the cost of a scan. &lt;p&gt; Cause this object to calculate the cost of performing the described scan.  The interface is setup such that first a call is made to calcualteScanCost(), and then subsequent calls to accessor routines are made to get various pieces of information about the cost of the scan. &lt;p&gt; For the purposes of costing this routine is going to assume that  a page will remain in cache between the time one next()/fetchNext() call and a subsequent next()/fetchNext() call is made within a scan. &lt;p&gt; The result of costing the scan is placed in the "cost_result".   The cost of the scan is stored by calling  cost_result.setEstimatedCost(cost). The estimated row count is stored by calling  cost_result.setEstimatedRowCount(row_count). &lt;p&gt; The estimated cost of the scan assumes the caller will  execute a fetchNext() loop for every row that qualifies between start and stop position.  Note that this cost is different than execution a next(),fetch() loop; or if the scan is going to be terminated by client prior to reaching the stop condition. &lt;p&gt; The estimated number of rows returned from the scan  assumes the caller will execute a fetchNext() loop for every  row that qualifies between start and stop position. &lt;p&gt;
 * @param scan_type       The type of scan that will be executed.  Thereare currently 2 types: STORECOST_SCAN_NORMAL - scans will be executed using the standard next/fetch, where each fetch can retrieve 1 or many rows (if fetchNextGroup() interface is used). STORECOST_SCAN_SET - The entire result set will be retrieved using the the fetchSet() interface.
 * @param row_count       Estimated total row count of the table.  The current system tracks row counts in heaps better than btree's (btree's have "rows" which are not user rows - branch rows, control rows), so  if available the client should pass in the base table's row count into this routine to be used as the index's row count. If the caller has no idea, pass in -1.
 * @param group_size      The number of rows to be returned by a singlefetch call for STORECOST_SCAN_NORMAL scans.
 * @param forUpdate       Should be true if the caller intends to update through the scan.
 * @param scanColumnList  A description of which columns to return from every fetch in the scan.  template,  and scanColumnList work together to describe the row to be returned by the scan -  see RowUtil for description of how these three  parameters work together to describe a "row".
 * @param template        A prototypical row which the scan may use tomaintain its position in the conglomerate.  Not  all access method scan types will require this,  if they don't it's ok to pass in null. In order to scan a conglomerate one must  allocate 2 separate "row" templates.  The "row"  template passed into openScan is for the private use of the scan itself, and no access to it should be made by the caller while the scan is  still open.  Because of this the scanner must  allocate another "row" template to hold the  values returned from fetch().  Note that this  template must be for the full row, whether a  partial row scan is being executed or not.
 * @param startKeyValue   An indexable row which holds a (partial) key value which, in combination with the  startSearchOperator, defines the starting  position of the scan.  If null, the starting position of the scan is the first row of the  conglomerate.  The startKeyValue must only reference columns included in the scanColumnList.
 * @param startSearchOperator an operator which defines how the startKeyValue is to be searched for.  If startSearchOperation  is ScanController.GE, the scan starts on the  first row which is greater than or equal to the  startKeyValue.  If startSearchOperation is  ScanController.GT, the scan starts on the first row whose key is greater than startKeyValue.  The startSearchOperation parameter is ignored if the startKeyValue parameter is null.
 * @param stopKeyValue    An indexable row which holds a (partial) key value which, in combination with the  stopSearchOperator, defines the ending position of the scan.  If null, the ending position of the scan is the last row of the conglomerate.  The stopKeyValue must only reference columns included in the scanColumnList.
 * @param stopSearchOperator an operator which defines how the stopKeyValue is used to determine the scan stopping position.  If stopSearchOperation is ScanController.GE, the scan stops just before the first row which is greater than or equal to the stopKeyValue.  If  stopSearchOperation is ScanController.GT, the  scan stops just before the first row whose key  is greater than startKeyValue.  The stopSearchOperation parameter is ignored if the stopKeyValue parameter is null.
 * @param access_type     Describe the type of access the query will beperforming to the ScanController.   STORECOST_CLUSTERED - The location of one scan is likely clustered "close" to the previous  scan.  For instance if the query plan were to used repeated "reopenScan()'s" to probe for the next key in an index, then this flag should be be specified.  If this flag is not  set then each scan will be costed independant of any other predicted scan access.
 * @exception StandardException  Standard exception policy.
 * @see RowUtil
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>scan_type</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>row_count</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>group_size</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>forUpdate</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>scanColumnList</ParamName>
                    <ParamType>FormatableBitSet</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>template</ParamName>
                    <ParamType>DataValueDescriptor[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>startKeyValue</ParamName>
                    <ParamType>DataValueDescriptor[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>startSearchOperator</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stopKeyValue</ParamName>
                    <ParamType>DataValueDescriptor[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stopSearchOperator</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>reopen_scan</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>access_type</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cost_result</ParamName>
                    <ParamType>StoreCostResult</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newRowLocationTemplate</MethodName>
            <MethodComment>/** 
 * Return an "empty" row location object of the correct type. &lt;p&gt;
 * @return The empty Rowlocation.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>RowLocation</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>