<Class>
    <Id>1931</Id>
    <Package>org.apache.derby.client.am</Package>
    <ClassName>ClobLocatorReader</ClassName>
    <SuperClass>Reader</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ClobLocatorReader  /** 
 * An &lt;code&gt;Reader&lt;/code&gt; that will use an locator to fetch the Clob value from the server. &lt;p&gt; This &lt;code&gt;Reader&lt;/code&gt; implementation is pretty basic.  No buffering of data is done.  Hence, for efficiency #read(char[]) should be used instead of #read().  Marks are not supported, but it should be pretty simple to extend the implementation to support this.  A more efficient skip implementation should also be straight-forward.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>connection</FieldName>
            <FieldType>ClientConnection</FieldType>
        </Field>
        <Field>
            <FieldName>clob</FieldName>
            <FieldType>ClientClob</FieldType>
        </Field>
        <Field>
            <FieldName>currentPos</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>maxPos</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>isClosed</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ClobLocatorReader</MethodName>
            <MethodComment>/** 
 * Create an &lt;code&gt;Reader&lt;/code&gt; for reading the &lt;code&gt;Clob&lt;/code&gt; value represented by the given locator based &lt;code&gt;Clob&lt;/code&gt; object.
 * @param connection connection to be used to read the&lt;code&gt;Clob&lt;/code&gt; value from the server
 * @param clob &lt;code&gt;Clob&lt;/code&gt; object that contains locator forthe &lt;code&gt;Clob&lt;/code&gt; value on the server.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>connection</ParamName>
                    <ParamType>ClientConnection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>clob</ParamName>
                    <ParamType>ClientClob</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ClobLocatorReader</MethodName>
            <MethodComment>/** 
 * Create an &lt;code&gt;Reader&lt;/code&gt; for reading the &lt;code&gt;Clob&lt;/code&gt; value represented by the given locator based &lt;code&gt;Clob&lt;/code&gt; object.
 * @param connection connection to be used to read the&lt;code&gt;Clob&lt;/code&gt; value from the server
 * @param clob &lt;code&gt;Clob&lt;/code&gt; object that contains locator forthe &lt;code&gt;Clob&lt;/code&gt; value on the server.
 * @param pos The offset to the first character of the partial value to beretrieved.
 * @param len The length in characters of the partial value to be retrieved.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>connection</ParamName>
                    <ParamType>ClientConnection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>clob</ParamName>
                    <ParamType>ClientClob</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pos</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>len</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>read</MethodName>
            <MethodComment>/** 
 * @see java.io.Reader#read() This method fetches one character at a time from the server. For more efficient retrieval, use #read(char[]).
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>char[] [chars=readCharacters(1)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkClosed;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>read</MethodName>
            <MethodComment>/** 
 * @see java.io.Reader#read(char[],int,int)
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>char[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>off</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>len</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>char[] [chars=readCharacters(len)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkClosed;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>close</MethodName>
            <MethodComment>/** 
 * @see java.io.Reader#close()
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkClosed</MethodName>
            <MethodComment>/** 
 * Check to see if this &lt;code&gt;Reader&lt;/code&gt; is closed. If it is closed throw an &lt;code&gt;IOException&lt;/code&gt; that states that the stream is closed.
 * @throws IOException if isClosed = true.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readCharacters</MethodName>
            <MethodComment>/** 
 * Read the next &lt;code&gt;len&lt;/code&gt; characters of the &lt;code&gt;Clob&lt;/code&gt; value from the server.
 * @param len number of characters to read.
 * @throws java.io.IOException Wrapped SqlException if readingfrom server fails.
 * @return &lt;code&gt;char[]&lt;/code&gt; containing the read characters.
 */
</MethodComment>
            <ReturnType>char[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>len</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>