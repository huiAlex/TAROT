<Class>
    <Id>1042</Id>
    <Package>org.apache.derby.impl.sql.execute</Package>
    <ClassName>CreateSequenceConstantAction</ClassName>
    <SuperClass>DDLConstantAction</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>CreateSequenceConstantAction  /** 
 * This class performs actions that are ALWAYS performed for a CREATE SEQUENCE statement at execution time. These SQL objects are stored in the SYS.SYSSEQUENCES table.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>_sequenceName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>_schemaName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>_dataType</FieldName>
            <FieldType>DataTypeDescriptor</FieldType>
        </Field>
        <Field>
            <FieldName>_initialValue</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>_stepValue</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>_maxValue</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>_minValue</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>_cycle</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>CreateSequenceConstantAction</MethodName>
            <MethodComment>/** 
 * Make the ConstantAction for a CREATE SEQUENCE statement. When executed, will create a sequence by the given name.
 * @param sequenceName The name of the sequence being created
 * @param dataType Exact numeric type of the new sequence
 * @param initialValue Starting value
 * @param stepValue Increment amount
 * @param maxValue Largest value returned by the sequence generator
 * @param minValue Smallest value returned by the sequence generator
 * @param cycle True if the generator should wrap around, false otherwise
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>schemaName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sequenceName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dataType</ParamName>
                    <ParamType>DataTypeDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>initialValue</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stepValue</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>maxValue</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>minValue</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cycle</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>executeConstantAction</MethodName>
            <MethodComment>/** 
 * This is the guts of the Execution-time logic for CREATE SEQUENCE.
 * @throws org.apache.derby.iapi.error.StandardException Thrown on failure
 * @see org.apache.derby.iapi.sql.execute.ConstantAction#executeConstantAction
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>activation</ParamName>
                    <ParamType>Activation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>SchemaDescriptor [schemaDescriptor]</InnerVar>
                <InnerVar>LanguageConnectionContext [lcc=activation.getLanguageConnectionContext()]</InnerVar>
                <InnerVar>DataDictionary [dd=lcc.getDataDictionary()]</InnerVar>
                <InnerVar>TransactionController [tc=lcc.getTransactionExecute()]</InnerVar>
                <InnerVar>DataDescriptorGenerator [ddg=dd.getDataDescriptorGenerator()]</InnerVar>
                <InnerVar>SequenceDescriptor [seqDef=dd.getSequenceDescriptor(schemaDescriptor,_sequenceName)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>dd;startWriting;[lcc]</InnerMethodInvoke>
                <InnerMethodInvoke>dd;addDescriptor;[seqDef, null, DataDictionary.SYSSEQUENCES_CATALOG_NUM, false, tc]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>