<Class>
    <Id>1389</Id>
    <Package>org.apache.derbyTesting.junit</Package>
    <ClassName>Connector</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Connector  /** 
 * Factory for getting connections within the tests that is designed for the simple working case for most tests. Most tests just need to connect or shutdown the database, this hides through BaseJDBCTestCase and TestConfiguration the details of how those operations are performed. &lt;P&gt; Tests that need finer control over the connection handling should use the JDBC classes directly, such as DriverManager or DataSource. &lt;P&gt; This is split out into an interface and sub-classes to ensure that no ClassNotFoundExceptions are thrown when running in an JSR 169 environment and DriverManager is not available.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>setConfiguration</MethodName>
            <MethodComment>/** 
 * Link this connector to the given configuration. Should be called once upon setup.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>config</ParamName>
                    <ParamType>TestConfiguration</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>openConnection</MethodName>
            <MethodComment>/** 
 * Open a connection with the database, user and password defined by the configuration passed to setConfiguration. If the database does not exist then it should be created.
 */
</MethodComment>
            <ReturnType>Connection</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>openConnection</MethodName>
            <MethodComment>/** 
 * Open a connection with the database, user and password defined by the configuration passed to setConfiguration. If the database does not exist then it should be created.
 */
</MethodComment>
            <ReturnType>Connection</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>databaseName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>openConnection</MethodName>
            <MethodComment>/** 
 * Open a connection to the database defined by the configuration passed to setConfiguration. If the database does not exist then it should be created.
 */
</MethodComment>
            <ReturnType>Connection</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>user</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>password</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>openConnection</MethodName>
            <MethodComment>/** 
 * Open a connection to the database defined by the configuration passed to setConfiguration. If the database does not exist then it should be created.
 */
</MethodComment>
            <ReturnType>Connection</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>databaseName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>user</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>password</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>openConnection</MethodName>
            <MethodComment>/** 
 * Open a connection to the database defined by the configuration passed to setConfiguration. If the database does not exist then it should be created.
 */
</MethodComment>
            <ReturnType>Connection</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>databaseName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>user</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>password</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>connectionProperties</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDatabaseName</MethodName>
            <MethodComment>/** 
 * get the physical databasename in use at this time
 * @return Name of database
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>shutDatabase</MethodName>
            <MethodComment>/** 
 * Shutdown the running default database using user and password defined by the configuration passed to setConfiguration. Return nothing, exception is expected to be thrown with SQLState 08006
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>shutEngine</MethodName>
            <MethodComment>/** 
 * Shutdown the running derby engine (not the network server). This method can only be called when the engine is running embedded in this JVM. Return nothing, exception is expected to be thrown with SQLState XJ015
 * @param deregisterDriver if true, deregister driver
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>deregisterDriver</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setLoginTimeout</MethodName>
            <MethodComment>/** 
 * Set the login timeout for getting connections. Timeout is measured in seconds.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>seconds</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLoginTimeout</MethodName>
            <MethodComment>/** 
 * Get the login timeout in seconds.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>