<Class>
    <Id>927</Id>
    <Package>org.apache.derbyTesting.functionTests.tests.lang</Package>
    <ClassName>OrderByAndOffsetFetchInSubqueries</ClassName>
    <SuperClass>BaseJDBCTestCase</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>OrderByAndOffsetFetchInSubqueries  /** 
 * Tests for DERBY-4397 Allow  {@code ORDER BY} in subqueriesand       DERBY-4398 Allow  {@code OFFSET/FETCH} in subqueries.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>SYNTAX_ERROR</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>COLUMN_NOT_FOUND</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>COLUMN_OUT_OF_RANGE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>ORDER_BY_COLUMN_NOT_FOUND</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>OrderByAndOffsetFetchInSubqueries</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>suite</MethodName>
            <MethodComment>/** 
 * Construct top level suite in this JUnit test
 * @return A suite containing embedded and client suites.
 */
</MethodComment>
            <ReturnType>Test</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>BaseTestSuite [suite=new BaseTestSuite("OrderByAndOffsetFetchInSubqueries")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>suite;addTest;[makeSuite()]</InnerMethodInvoke>
                <InnerMethodInvoke>suite;addTest;[TestConfiguration.clientServerDecorator(makeSuite())]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeSuite</MethodName>
            <MethodComment>/** 
 * Construct suite of tests
 * @return A suite containing the test cases.
 */
</MethodComment>
            <ReturnType>Test</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>decorateSQL</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>Statement</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>getConnection();setAutoCommit;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["create table temp1(s varchar(10))"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["create table temp2(" + "i integer not null " + "    generated always as identity,"+ "s varchar(10))"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["create table temp2b(" + "i integer not null " + "    generated always as identity,"+ "s varchar(10))"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["create table temp3(" + "i integer not null " + "    generated always as identity,"+ "s varchar(10),"+ "j integer not null "+ "    default 66,"+ "t varchar(10))"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["create table temp4(" + "i integer not null " + "    generated always as identity,"+ "s varchar(10),"+ "j integer not null "+ "    generated always as (2*i),"+ "t varchar(10))"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["create table t01(c1 int)"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["create table t02(c2 int)"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["create table t_source(c1 int, c2 varchar(10))"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["create table t(i int not null, " + "               constraint c unique (i), " + "               j int, k int)"]</InnerMethodInvoke>
                <InnerMethodInvoke>getConnection();commit;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testInsertSelectOrderBy</MethodName>
            <MethodComment>/** 
 * Test  {@code INSERT INTO t SELECT .. FROM .. ORDER BY}.
 * @throws java.sql.SQLException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Statement [s=createStatement()]</InnerVar>
                <InnerVar>ResultSet [rs]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setAutoCommit;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["insert into temp1 values 'x','a','c','b','a'"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["insert into temp2(s) select s from temp1 order by s"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["insert into temp2(s) select s as a1 from temp1 order by a1"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["insert into temp2(s) select * from temp1 order by s"]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"1","a"},{"2","a"},{"3","b"},{"4","c"},{"5","x"},{"6","a"},{"7","a"},{"8","b"},{"9","c"},{"10","x"},{"11","a"},{"12","a"},{"13","b"},{"14","c"},{"15","x"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"1","a"},{"2","a"},{"3","b"},{"4","c"},{"5","x"},{"6","a"},{"7","a"},{"8","b"},{"9","c"},{"10","x"},{"11","a"},{"12","a"},{"13","b"},{"14","c"},{"15","x"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["insert into temp2(s) select s as a1 from temp1 order by s"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertStatementError;[COLUMN_NOT_FOUND, s, "insert into temp2(s) select s as a1 from temp1 order by no_such"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["insert into t01 values (50), (10), (1000), (15), (51)"]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"50"},{"10"},{"1000"},{"15"},{"51"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["insert into t02 select * from t01 order by c1"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["insert into t02 select * from t01"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["insert into t02 select * from t01 order by c1"]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"10"},{"15"},{"50"},{"51"},{"1000"},{"50"},{"10"},{"1000"},{"15"},{"51"},{"10"},{"15"},{"50"},{"51"},{"1000"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertStatementError;[SYNTAX_ERROR, s, "insert into t02 values 66 order by 1"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertStatementError;[SYNTAX_ERROR, s, "insert into t02 values (901), (920), (903) order by 1"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;executeUpdate;["delete from t02"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;executeUpdate;["insert into t02 select 900 from sys.systables " + "                union values 66 order by 1"]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"66"},{"900"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>s;executeUpdate;["delete from t02"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;executeUpdate;["insert into t02 values 66 " + "       union select 900 from sys.systables order by 1"]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"66"},{"900"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>s;executeUpdate;["delete from t02"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;executeUpdate;["insert into t02 values 66 " + "       union values 66 order by 1"]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"66"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["delete from t02"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["insert into t02 select * from t01 union all " + "                select * from t01 order by c1"]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"10"},{"10"},{"15"},{"15"},{"50"},{"50"},{"51"},{"51"},{"1000"},{"1000"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertStatementError;[ORDER_BY_COLUMN_NOT_FOUND, s, "insert into t02 select * from t01 union all " + "                select * from t02 order by c1"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["delete from t02"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["insert into t_source " + "    values (1, 'one'), (2, 'two'), (8, 'three')"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["insert into t_source(c1) " + "    select c1 from t_source order by c2 desc"]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"1","one"},{"2","two"},{"8","three"},{"2",null},{"8",null},{"1",null}}]</InnerMethodInvoke>
                <InnerMethodInvoke>s;executeUpdate;["create table t4496(x varchar(100))"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["insert into t4496(x) select ibmreqd from " + "    (select * from sysibm.sysdummy1" + "         order by length(ibmreqd)) t1"]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[s.executeQuery("select * from t4496"), new String[][]{{"Y"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["create table t6006(x double)"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertUpdateCount;[s, 6, "insert into t6006 values 1,2,3,4,5,6"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertUpdateCount;[s, 6, "insert into t6006 select 1 from t6006 order by x"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;rollback;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testInsertSelectOrderByOffsetFetch</MethodName>
            <MethodComment>/** 
 * Same test as  {@code testInsertSelectOrderBy} but with use of{@code OFFSET/FETCH FIRST}. &lt;p/&gt; Test  {@code INSERT INTO t SELECT .. FROM .. ORDER BY} + {@code OFFSETFETCH}&lt;p/&gt; This test is a variant made my modifying  {@code testInsertSelectOrderBy}with suitable  {@code OFFSET/FETCH FIRST} clauses.
 * @throws java.sql.SQLException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Statement [s=createStatement()]</InnerVar>
                <InnerVar>ResultSet [rs=s.executeQuery("select * from temp2b")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setAutoCommit;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["insert into temp1 values 'x','a','c','b','a'"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["insert into temp2b(s) select s from temp1 order by s " + "    offset 1 rows fetch next 4 rows only"]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[s.executeQuery("select * from temp2b"), new String[][]{{"1","a"},{"2","b"},{"3","c"},{"4","x"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["insert into temp2b(s) select s as a1 from temp1 order by a1" + "    offset 1 rows fetch next 4 rows only"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["insert into temp2b(s) select * from temp1 order by s " + "    offset 1 rows fetch next 4 rows only"]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"1","a"},{"2","b"},{"3","c"},{"4","x"},{"5","a"},{"6","b"},{"7","c"},{"8","x"},{"9","a"},{"10","b"},{"11","c"},{"12","x"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"1","a"},{"2","b"},{"3","c"},{"4","x"},{"5","a"},{"6","b"},{"7","c"},{"8","x"},{"9","a"},{"10","b"},{"11","c"},{"12","x"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["insert into t01 values (50), (10), (1000), (15), (51)"]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"50"},{"10"},{"1000"},{"15"},{"51"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["insert into t02 select * from t01 order by c1 " + "    fetch first 2 rows only"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["insert into t02 select * from t01"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["insert into t02 select * from t01 order by c1 offset 0 rows"]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"10"},{"15"},{"50"},{"10"},{"1000"},{"15"},{"51"},{"10"},{"15"},{"50"},{"51"},{"1000"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertStatementError;[SYNTAX_ERROR, s, "insert into t02 values 66 offset 1 row"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;executeUpdate;["delete from t02"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;executeUpdate;["insert into t02 select 900 from sys.systables " + "                union values 66 order by 1 offset 1 row"]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"900"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>s;executeUpdate;["delete from t02"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;executeUpdate;["insert into t02 values 66 " + "       union select 900 from sys.systables fetch next 1 row only"]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"66"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>s;executeUpdate;["delete from t02"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;executeUpdate;["insert into t02 select * from (values 3,4,5 )v " + "    order by 1 offset 1 row fetch next 2 rows only"]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"4"},{"5"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["delete from t02"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["insert into t02 select * from t01 union all " + "                select * from t01 order by c1 " + "                fetch next 4 rows only"]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"10"},{"10"},{"15"},{"15"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["delete from t01"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["insert into t02 values 6,7"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["insert into t01 select * from t02 except " + "                values 10 order by 1 offset 1 row"]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"7"},{"15"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["delete from t02"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["insert into t_source " + "    values (1, 'one'), (2, 'two'), (8, 'three')"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["insert into t_source(c1) " + "    select c1 from t_source order by c2 desc " + "    fetch next 2 rows only"]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"1","one"},{"2","two"},{"8","three"},{"2",null},{"8",null}}]</InnerMethodInvoke>
                <InnerMethodInvoke>null;rollback;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testSelectSubqueriesOrderBy</MethodName>
            <MethodComment>/** 
 * {@code SELECT} subqueries with {@code ORDER BY}
 * @throws java.sql.SQLException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Statement [s=createStatement()]</InnerVar>
                <InnerVar>ResultSet [rs]</InnerVar>
                <InnerVar>String[][] [expected=new String[][]{{"1","10","1"},{"2","40","1"}}]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setAutoCommit;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["insert into t_source values (1, 'one'), (2, 'two'), (8, 'three')"]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"8"},{"2"},{"1"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"9"},{"3"},{"2"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"8","three"},{"2","two"},{"1","one"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"three"},{"two"},{"one"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"one"},{"three"},{"two"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"8","three"},{"2","two"},{"1","one"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"1"},{"2"},{"8"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"1"},{"2"},{"8"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"1"},{"2"},{"8"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"8"},{"2"},{"1"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertEmpty;[rs]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"8"},{"2"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>s;executeUpdate;["insert into t values (1,10,1), (2,40,1)," + "         (3,45,1), (4,46,1), (5,90,1)"]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"1","10","1"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"1","10","1"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"1","10","1"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, expected]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, expected]</InnerMethodInvoke>
                <InnerMethodInvoke>null;rollback;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testSelectSubqueriesOrderByAndOffsetFetch</MethodName>
            <MethodComment>/** 
 * {@code SELECT} subqueries with {@code ORDER BY} and {@code OFFSET/FETCH}. &lt;p/&gt; This test is a variant made my modifying  {@code testSelectSubqueriesOrderBy} with suitable {@code OFFSET/FETCH FIRST}clauses.
 * @throws java.sql.SQLException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Statement [s=createStatement()]</InnerVar>
                <InnerVar>ResultSet [rs]</InnerVar>
                <InnerVar>String[][] [expected=new String[][]{{"1","10","1"},{"2","40","1"}}]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setAutoCommit;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["insert into t_source values (1, 'one'), (2, 'two'), (8, 'three')"]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"2"},{"1"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"9"},{"3"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"1","one"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"one"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"three"},{"two"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"2","two"},{"1","one"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"1"},{"2"},{"8"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertEmpty;[rs]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"1"},{"2"},{"8"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"1"},{"2"},{"8"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"2"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"8"},{"2"},{"1"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"8"},{"2"},{"1"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>s;executeUpdate;["insert into t values (1,10,1), (2,40,1)," + "         (3,45,1), (4,46,1), (5,90,1)"]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertEmpty;[rs]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"1","10","1"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertEmpty;[rs]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"1","10","1"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"1","10","1"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertEmpty;[rs]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, expected]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertEmpty;[rs]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"1","10","1"},{"2","40","1"},{"3","45","1"},{"4","46","1"},{"5","90","1"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"1","10","1"},{"2","40","1"},{"3","45","1"},{"4","46","1"},{"5","90","1"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>null;rollback;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testJoinsWithOffsetFetch</MethodName>
            <MethodComment>/** 
 * Test JOIN with delimited subqueries
 * @throws java.sql.SQLException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Statement [s=createStatement()]</InnerVar>
                <InnerVar>ResultSet [rs]</InnerVar>
                <InnerVar>PreparedStatement [ps=prepareStatement("select * from " + "   (select s from temp1 order by s " + "                        fetch first ? rows only) t1 join "+ "   (select s from temp1 order by s offset ? row "+ "                        fetch first ? row only) t2 "+ "   on t1.s=t2.s")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setAutoCommit;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["insert into temp1 values 'x','a','c','b','a'"]</InnerMethodInvoke>
                <InnerMethodInvoke>ps;setInt;[1, 2]</InnerMethodInvoke>
                <InnerMethodInvoke>ps;setInt;[2, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>ps;setInt;[3, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"a","a"},{"a","a"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>ps;setInt;[1, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"a","a"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>null;rollback;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testView</MethodName>
            <MethodComment>/** 
 * Test  {@code ORDER BY} in a view definition
 * @throws java.sql.SQLException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Statement [s=createStatement()]</InnerVar>
                <InnerVar>ResultSet [rs]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setAutoCommit;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>s;executeUpdate;["create view v1 as select i from t order by j desc"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;executeUpdate;["create view v2 as select i from t order by i"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;executeUpdate;["insert into t values (1,10,1), (2,40,1)," + "         (3,45,1), (4,46,1), (5,90,1)"]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"5"},{"4"},{"3"},{"2"},{"1"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"1"},{"2"},{"3"},{"4"},{"5"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>null;rollback;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testViewFetchOffset</MethodName>
            <MethodComment>/** 
 * Test  {@code ORDER BY} + {@code FETCH/OFFSET} in a view definition&lt;p/&gt; This test is a variant made my modifying  {@code testView} with suitable{@code OFFSET/FETCH FIRST} clauses.
 * @throws java.sql.SQLException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Statement [s=createStatement()]</InnerVar>
                <InnerVar>ResultSet [rs]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setAutoCommit;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>s;executeUpdate;["create view v1 as select i from t order by j desc " + "                  offset 2 rows fetch first 1 row only"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;executeUpdate;["create view v2 as select i from t order by i " + "                  fetch next 2 rows only"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;executeUpdate;["insert into t values (1,10,1), (2,40,1)," + "         (3,45,1), (4,46,1), (5,90,1)"]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"3"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"1"},{"2"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>null;rollback;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testSelectSubqueriesOrderByNegative</MethodName>
            <MethodComment>/** 
 * {@code SELECT} subqueries with {@code ORDER BY} - negative tests
 * @throws java.sql.SQLException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Statement [s=createStatement()]</InnerVar>
                <InnerVar>ResultSet [rs]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setAutoCommit;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["insert into t_source values (1, 'one'), (2, 'two'), (8, 'three')"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertStatementError;[COLUMN_NOT_FOUND, s, "select * from (select c1 from t_source order by c3 desc) s"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertStatementError;[COLUMN_OUT_OF_RANGE, s, "select * from (select c1 from t_source order by 3 desc) s"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertStatementError;[COLUMN_OUT_OF_RANGE, s, "select * from (values (1, 'one'), (2, 'two'), (8, 'three')" + "               order by 3 desc) s"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertStatementError;[COLUMN_NOT_FOUND, s, "select c1 from t_source where exists " + "    (select c1 from t_source order by c4)"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;rollback;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testSelectSubqueriesSortAvoidance</MethodName>
            <MethodComment>/** 
 * {@code SELECT} subqueries with {@code ORDER BY} - check sort avoidance
 * @throws java.sql.SQLException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Statement [s=createStatement()]</InnerVar>
                <InnerVar>ResultSet [rs]</InnerVar>
                <InnerVar>RuntimeStatisticsParser [rtsp]</InnerVar>
                <InnerVar>PreparedStatement [ps=prepareStatement("insert into ts values(?,?)")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setAutoCommit;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>s;executeUpdate;["create table ts(i int, j int)"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;executeUpdate;["create unique index t_i on ts(i)"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["call SYSCS_UTIL.SYSCS_SET_RUNTIMESTATISTICS(1)"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;[rtsp.usedSpecificIndexForIndexScan("TS","T_I")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertFalse;[rtsp.whatSortingRequired()]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["call SYSCS_UTIL.SYSCS_SET_RUNTIMESTATISTICS(0)"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;rollback;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testPushAvoidance</MethodName>
            <MethodComment>/** 
 * Prevent pushing of where predicates into selects with fetch and/or offset (DERBY-5911). Similarly, for windowed selects.
 * @throws java.sql.SQLException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Statement [s=createStatement()]</InnerVar>
                <InnerVar>ResultSet [rs=s.executeQuery("select * from " + "    (select COF_NAME, PRICE from COFFEES " + "     order by COF_NAME fetch next 2 rows only"+ "    ) t "+ "where t.PRICE &lt; 10")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setAutoCommit;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>s;executeUpdate;["CREATE TABLE COFFEES (COF_NAME VARCHAR(254),PRICE INTEGER)"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;executeUpdate;["INSERT INTO COFFEES VALUES ('Colombian', 5)"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;executeUpdate;["INSERT INTO COFFEES VALUES ('French_Roast', 5)"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;executeUpdate;["INSERT INTO COFFEES VALUES ('Colombian_Decaf', 20)"]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"Colombian","5"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"French_Roast","5"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"Colombian","5"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>null;rollback;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testNestingInsideSetOperation</MethodName>
            <MethodComment>/** 
 * Test nesting inside set operands, cf. this production in SQL 2011, section 7.12: &lt;pre&gt; &lt;query primary&gt; ::= &lt;simple table&gt; |  &lt;left paren&gt; &lt;query expression body&gt; [ &lt;order by clause&gt; ] [ &lt;result offset clause&gt; ] [ &lt;fetch first clause&gt; ] &lt;right paren&gt; &lt;/pre&gt; The corresponding production in  {@code sqlgrammar.jj} is{@code nonJoinQueryPrimary}. Cf. DERBY-6008.
 * @throws java.sql.SQLException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Statement [s=createStatement()]</InnerVar>
                <InnerVar>ResultSet [rs=s.executeQuery("(select i from t1 order by j desc offset 1 row) union " + "(select i from t2 order by j desc offset 1 rows " + "fetch next 1 row only)")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setAutoCommit;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>s;executeUpdate;["create table t1(i int, j int )"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;executeUpdate;["create table t2(i int, j int)"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;executeUpdate;["insert into t1 values (1,1),(4,8),(2,4)"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;executeUpdate;["insert into t2 values (10,10),(40,80),(20,40)"]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"1"},{"2"},{"20"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertCompileError;["42X01", "select i from t1 order by j desc offset 1 row union " + "(select i from t2 order by j desc offset 2 rows)"]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"1"},{"10"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"1"},{"10"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"1"},{"10"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"2"},{"10"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>s;executeUpdate;["create table countries(name varchar(20), " + "                       population int, " + "                       area int)"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;executeUpdate;["insert into countries values" + "('Norway', 5033675, 385252)," + "('Sweden', 9540065, 449964),"+ "('Denmark', 5580413, 42894),"+ "('Iceland', 320060, 103001),"+ "('Liechtenstein', 36281, 160)"]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"Sweden"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"Norway","5033675","385252"},{"Sweden","9540065","449964"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"Norway","5033675","385252"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"Denmark"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{"Denmark","5580413","42894"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>null;rollback;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testDerby6378</MethodName>
            <MethodComment>/** 
 * Nested query expression body, with each level contributing to the set of ORDER BY and/or OFFSET/FETCH FIRST clauses. Cf. these productions in SQL 2011, section 7.11: &lt;pre&gt; &lt;query expression&gt; ::= [ &lt;with clause&gt; ] &lt;query expression body&gt; [ &lt;order by clause&gt; ] [ &lt;result offset clause&gt; ] [ &lt;fetch first clause&gt; ] &lt;query expression body&gt; ::= &lt;query term&gt; ... &lt;/pre&gt; One of the productions of  {@code &lt;query expression body&gt;}, is &lt;pre&gt; &amp;lt;left paren&amp;gt; &amp;lt;query expression body&amp;gt; [ &lt;order by clause&gt; ] [ &lt;result offset clause&gt; ] [ &lt;fetch first clause&gt; ] &lt;right paren&gt; &lt;/pre&gt; so our clauses nests to arbitrary depth given enough parentheses, including ORDER BY and OFFSET/FETCH FIRST clauses. This nesting did not work correctly, cf. DERBY-6378. The corresponding productions in  {@code sqlgrammar.jj} is{@code queryExpression} and {@code nonJoinQueryPrimary}.
 * @throws Exception
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Statement [stm=createStatement()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setAutoCommit;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>stm;executeUpdate;["create table t1 (a int, b bigint)"]</InnerMethodInvoke>
                <InnerMethodInvoke>stm;executeUpdate;["delete from t1"]</InnerMethodInvoke>
                <InnerMethodInvoke>stm;executeUpdate;["insert into t1 values " + "(1,-10), (2,-11), (3,-9), (4,-20), (5,-1)"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;queryAndCheck;[stm, "(select * from t1 offset 1 row fetch first 1 row only)", new String[][]{{"2","-11"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>null;queryAndCheck;[stm, "(select * from t1 order by a desc fetch first 3 rows only) " + "     offset 1 row fetch first 1 row only", new String[][]{{"4","-20"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>null;queryAndCheck;[stm, "((select * from t1 order by a desc) " + "     fetch first 3 rows only)", new String[][]{{"5","-1"},{"4","-20"},{"3","-9"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>null;queryAndCheck;[stm, "((((select * from t1 order by a desc) " + "        fetch first 3 rows only)) " + "    order by b) "+ "fetch first 1 row only", new String[][]{{"4","-20"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>null;queryAndCheck;[stm, "(((((values (1,-10), (2,-11), (3,-9), (4,-20), (5,-1))" + "            order by 1 desc) " + "        fetch first 3 rows only)) "+ "    order by 2) "+ "fetch first 1 row only", new String[][]{{"4","-20"}}]</InnerMethodInvoke>
                <InnerMethodInvoke>null;rollback;[]</InnerMethodInvoke>
                <InnerMethodInvoke>stm;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>queryAndCheck</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>stm</ParamName>
                    <ParamType>Statement</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>queryText</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>expectedRows</ParamName>
                    <ParamType>String[][]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ResultSet [rs=stm.executeQuery(queryText)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, expectedRows]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>