<Class>
    <Id>391</Id>
    <Package>org.apache.derby.iapi.sql</Package>
    <ClassName>Statement</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Statement  /** 
 * The Statement interface provides a way of giving a statement to the language module, preparing the statement, and executing it. It also provides some support for stored statements. Simple, non-stored, non-parameterized statements can be executed with the execute() method. Parameterized statements must use prepare(). To get the stored query plan for a statement, use get(). &lt;p&gt; This interface will have different implementations for the execution-only and compile-and-execute versions of the product. In the execution-only version, some of the methods will do nothing but raise exceptions to indicate that they are not implemented. &lt;p&gt; There is a Statement factory in the Connection interface in the Database module, which uses the one provided in LanguageFactory.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>prepare</MethodName>
            <MethodComment>/** 
 * Generates an execution plan without executing it.
 * @return A PreparedStatement that allows execution of the executionplan.
 * @exception StandardException	Thrown if this is anexecution-only version of the module (the prepare() method relies on compilation).
 */
</MethodComment>
            <ReturnType>PreparedStatement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lcc</ParamName>
                    <ParamType>LanguageConnectionContext</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>prepare</MethodName>
            <MethodComment>/** 
 * Generates an execution plan without executing it.
 * @param lcc			the language connection context
 * @param allowInternalSyntax	If this statement is for a metadata call then we will allow internal sql syntax on such statement. This internal sql syntax is not available to a user sql statement.
 * @return A PreparedStatement that allows execution of the executionplan.
 * @exception StandardException	Thrown if this is anexecution-only version of the module (the prepare() method relies on compilation).
 */
</MethodComment>
            <ReturnType>PreparedStatement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lcc</ParamName>
                    <ParamType>LanguageConnectionContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>allowInternalSyntax</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>prepareStorable</MethodName>
            <MethodComment>/** 
 * Generates an execution plan given a set of named parameters. For generating a storable prepared statement (which has some extensions over a standard prepared statement).
 * @param lcc					Compiler state variable.
 * @param ps					Prepared statement
 * @param paramDefaults		Default parameter values to use foroptimization
 * @param spsSchema schema of the stored prepared statement
 * @return A Storable PreparedStatement that allows execution of the executionplan.
 * @exception StandardException	Thrown if this is anexecution-only version of the module (the prepare() method relies on compilation).
 */
</MethodComment>
            <ReturnType>PreparedStatement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lcc</ParamName>
                    <ParamType>LanguageConnectionContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ps</ParamName>
                    <ParamType>PreparedStatement</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>paramDefaults</ParamName>
                    <ParamType>Object[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>spsSchema</ParamName>
                    <ParamType>SchemaDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>internalSQL</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSource</MethodName>
            <MethodComment>/** 
 * Return the SQL string that this statement is for.
 * @return the SQL string this statement is for.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>