<Class>
    <Id>1181</Id>
    <Package>org.apache.derbyTesting.functionTests.tests.upgradeTests</Package>
    <ClassName>Changes10_4</ClassName>
    <SuperClass>UpgradeChange</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Changes10_4  /** 
 * Upgrade test cases for 10.4. If the old version is 10.4 or later then these tests will not be run. &lt;BR&gt; 10.4 Upgrade issues &lt;UL&gt; &lt;LI&gt; testMetaDataQueryRunInSYScompilationSchema - DERBY-2946  Make sure that metadata queries get run with SYS schema as the current  compilation schema rather than a user schema as the current compilation  schema. This is because if the user is inside a user schema in a collated  database and if the meta data query gets run inside the user schema, then  we will run into collation mismatch errors for a subclause like following  in the WHERE clause. P.SELECTPRIV = 'Y'  The reason for error is that the left hand side of the = operation will  have collation type of UCS_BASIC because that column belongs to a table  from system schema. But the collation type of the right hand will be  territory based if the current compilation schema is user schema. But if  the current compilation schema is set to SYS schema, then right hand side  will also have collation of UCS_BASIC and hence there won't be any  collation mismatch.  Background info : character string constants pick up the collation of the current compilation schema.  &lt;/UL&gt;
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>Changes10_4</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>suite</MethodName>
            <MethodComment>/** 
 * Return the suite of tests to test the changes made in 10.4.
 * @param phase an integer that indicates the current phase inthe upgrade test.
 * @return the test suite created.
 */
</MethodComment>
            <ReturnType>Test</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>phase</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BaseTestSuite [suite=new BaseTestSuite("Upgrade test for 10.4")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>suite;addTestSuite;[Changes10_4.class]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testMetaDataQueryRunInSYScompilationSchema</MethodName>
            <MethodComment>/** 
 * Check that even though we have set schema to a user schema, the  metadata queries get run with compilation schema as SYS. DERBY-2946 Test added for 10.4.
 * @throws SQLException 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>DataSource [ds=JDBCDataSource.getDataSourceLogical("COLLATED_DB_10_3")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testTableFunctionDeclaration</MethodName>
            <MethodComment>/** 
 * Check that you must be hard-upgraded to 10.4 or later in order to declare table functions.
 * @throws SQLException 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Statement [s=createStatement()]</InnerVar>
                <InnerVar>String [createTableFunctionText="create function svnLogReader( logFileName varchar( 32672 ) )\n" + "returns TABLE\n" + "  (\n"+ "     XID varchar( 15 ),\n"+ "     committer    varchar( 20 ),\n"+ "     commit_time  timestamp,\n"+ "     line_count   varchar( 10 ),\n"+ "     description  varchar( 32672 )\n"+ "  )\n"+ "language java\n"+ "parameter style DERBY_JDBC_RESULT_SET\n"+ "no sql\n"+ "external name 'org.apache.derbyDemo.vtis.example.SubversionLogVTI.subversionLogVTI'\n"]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>s;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testRoutineParameters</MethodName>
            <MethodComment>/** 
 * Test that routine parameters and return types are handled correctly with 10.4 creating a procedure in soft-upgrade. 10.4 simplified the stored format of the types by ensuring the catalog type was written. See DERBY-2917 for details.
 * @throws SQLException 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testIndexes</MethodName>
            <MethodComment>/** 
 * Tests whether or not indexes are exibiting their expected behaviour.
 * @param s         Statement 
 * @param tableName table name to be used for testing
 * @param val       value to be used for insertion
 * @param nulls     if nulls are allowed 
 * @param duplicate if duplicates are allowed
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>Statement</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>val</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nulls</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>duplicate</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>s;executeUpdate;["delete from " + tableName]</InnerMethodInvoke>
                <InnerMethodInvoke>s;executeUpdate;["insert into " + tableName + " values ("+ val+ ")"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createTablesForIndexTesting</MethodName>
            <MethodComment>/** 
 * Creates tables to test indexes during and after soft and hard  upgrades
 * @param s Statement
 * @param prefix prefix for table names
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>Statement</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>prefix</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>s;executeUpdate;["create table  " + prefix + "_indextest1"+ "(col1 integer not null)"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;executeUpdate;["create unique index " + prefix + "_uinn on "+ prefix+ "_indextest1 (col1)"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;executeUpdate;["create table  " + prefix + "_indextest2"+ "(col1 integer)"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;executeUpdate;["create unique index " + prefix + "_uin on "+ prefix+ "_indextest2 (col1)"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;executeUpdate;["create table  " + prefix + "_indextest3"+ "(col1 integer not null)"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;executeUpdate;["create index " + prefix + "_nuinn on "+ prefix+ "_indextest3 (col1)"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;executeUpdate;["create table  " + prefix + "_indextest4"+ "(col1 integer)"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;executeUpdate;["create index " + prefix + "_nuin on "+ prefix+ "_indextest4 (col1)"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;executeUpdate;["create table  " + prefix + "_indextest5"+ "(col1 integer not null)"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;executeUpdate;["alter table " + prefix + "_indextest5 "+ "add constraint "+ prefix+ "_cons1 unique(col1)"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testIndexes</MethodName>
            <MethodComment>/** 
 * Test index created before upgrades to insure their behaviour  remains same after soft and hard upgrades.  This is an index test and does not apply to constraint behavior.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Statement [s=createStatement()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>s;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testUniqueConstraint</MethodName>
            <MethodComment>/** 
 * Tests Unique constraint in soft and hard upgrade enviornment.  Under soft upgrade environment creation of unique constrant  over nullable columns and setting columns from unique constraint to null should fail. Also the constraint created during soft  upgrade run should work fine when running under previous version.
 * @throws SQLException at any unexpected failure.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Statement [s=createStatement()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>s;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>verifyError</MethodName>
            <MethodComment>/** 
 * Verifies error messages priviously generated.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Statement [stmt=createStatement()]</InnerVar>
                <InnerVar>PreparedStatement [ps=prepareStatement("select text " + "from errormessage where state = ?")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>stmt;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>ps;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>prepareTable</MethodName>
            <MethodComment>/** 
 * Generates error messages and stores in a table.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Statement [stmt=createStatement()]</InnerVar>
                <InnerVar>PreparedStatement [ps=prepareStatement("insert into errormessage " + "(state, text) values (?, ?)")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>stmt;executeUpdate;["create table errormessage (state varchar (6), " + "text varchar (200))"]</InnerMethodInvoke>
                <InnerMethodInvoke>stmt;executeUpdate;["create table t1 (i integer not null primary key, " + "j integer)"]</InnerMethodInvoke>
                <InnerMethodInvoke>stmt;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>ps;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testErrorMessage</MethodName>
            <MethodComment>/** 
 * check if error message generated during soft upgrade is  same as privious version.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testAlterColumnOfUniqueConstraint</MethodName>
            <MethodComment>/** 
 * Tests if alter column works for a column in unique constraint.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Statement [stmt=createStatement()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>stmt;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>