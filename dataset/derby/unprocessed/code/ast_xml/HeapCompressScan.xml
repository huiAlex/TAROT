<Class>
    <Id>1514</Id>
    <Package>org.apache.derby.impl.store.access.heap</Package>
    <ClassName>HeapCompressScan</ClassName>
    <SuperClass>HeapScan</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>HeapCompressScan  /** 
 * A heap scan object represents an instance of a scan on a heap conglomerate.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>pagenum_to_start_moving_rows</FieldName>
            <FieldType>long</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>HeapCompressScan</MethodName>
            <MethodComment>/** 
 * The only constructor for a HeapCompressScan returns a scan in the closed state, the caller must call open.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fetchNextGroup</MethodName>
            <MethodComment>/** 
 * Protected override implementation of routines in GenericController class:
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>row_array</ParamName>
                    <ParamType>DataValueDescriptor[][]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>old_rowloc_array</ParamName>
                    <ParamType>RowLocation[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>new_rowloc_array</ParamName>
                    <ParamType>RowLocation[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fetchRowsForCompress</MethodName>
            <MethodComment>/** 
 * Fetch the next N rows from the table. &lt;p&gt; Utility routine used by both fetchSet() and fetchNextGroup().
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>row_array</ParamName>
                    <ParamType>DataValueDescriptor[][]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>oldrowloc_array</ParamName>
                    <ParamType>RowLocation[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>newrowloc_array</ParamName>
                    <ParamType>RowLocation[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [ret_row_count=0]</InnerVar>
                <InnerVar>DataValueDescriptor[] [fetch_row=null]</InnerVar>
                <InnerVar>int [max_rowcnt=row_array.length]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;positionAtDoneScan;[scan_position]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>positionAtResumeScan</MethodName>
            <MethodComment>/** 
 * Reposition the scan upon entering the fetchRows loop. &lt;p&gt; Called upon entering fetchRows() while in the SCAN_INPROGRESS state. Do work necessary to look at rows in the current page of the scan. &lt;p&gt; The default implementation uses a record handle to maintain a scan position.  It will get the latch again on the current scan position and set the slot to the current record handle.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pos</ParamName>
                    <ParamType>RowPosition</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>open_conglom;latchPageAndRepositionScan;[scan_position]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>positionAtStartForForwardScan</MethodName>
            <MethodComment>/** 
 * Move the scan from SCAN_INIT to SCAN_INPROGRESS. &lt;p&gt; This routine is called to move the scan from SCAN_INIT to  SCAN_INPROGRESS.  Upon return from this routine it is expected that scan_position is set such that calling the generic  scan loop will reach the first row of the scan.  Note that this usually means setting the scan_postion to one before the 1st  row to be returned. &lt;p&gt;
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pos</ParamName>
                    <ParamType>RowPosition</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this;setScanState;[SCAN_INPROGRESS]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>positionAfterThisPage</MethodName>
            <MethodComment>/** 
 * Set scan position to just after current page. &lt;p&gt; Used to set the position of the scan if a record handle is not avaliable.  In this case current_rh will be set to null, and  current_pageno will be set to the current page number. On resume of the scan, the scan will be set to just before the first row returned form a getNextPage(current_pageno) call. &lt;p&gt; A positionAtResumeScan(scan_position) is necessary to continue the scan after this call.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pos</ParamName>
                    <ParamType>RowPosition</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>