<Class>
    <Id>1903</Id>
    <Package>org.apache.derbyTesting.functionTests.util.corruptio</Package>
    <ClassName>CorruptBaseStorageFactory</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>WritableStorageFactory</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>CorruptBaseStorageFactory  /** 
 * This class provides a proxy base implementation of the  WritableStorageFactory interface to instrument I/O operations for testing  purposes.  Some methods in this class adds support for corrupting the I/O operation  sent by the engine before invoking the real storage factory underneath.  By deault all the calls will go to the real storage factory defined by the  concrete class, unless corruption is enabled through CorruptibleIo instance. 
 * @see CorruptibleIo
 * @see WritableStorageFactory
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>realStorageFactory</FieldName>
            <FieldType>WritableStorageFactory</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>CorruptBaseStorageFactory</MethodName>
            <MethodComment>/** 
 * Most of the initialization is done in the init method.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>init</MethodName>
            <MethodComment>/** 
 * Classes implementing the StorageFactory interface must have a null constructor.  This method is called when the database is booted up to initialize the class. It should perform all actions necessary to start  the basic storage, such as creating a temporary file directory. The init method will be called once, before any other method is called,  and will not be called again.
 * @param home          The name of the directory containing the database. It comes from the system.home system property. It may be null. A storage factory may decide to  ignore this parameter. (For instance the classpath storage factory ignores it.)
 * @param databaseName  The name of the database (directory). All relative pathnames are relative to this  directory. If null then the storage factory will only be used  to deal with the directory containing the databases.
 * @param tempDirName   The name of the temporary file directory set in properties. If null then a default directory should be used. Each database should get a separate  temporary file directory within this one to avoid  collisions.
 * @param uniqueName    A unique name that can be used to create the temporary file directory for this database.
 * @exception IOException on an error (unexpected).
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>home</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>databaseName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tempDirName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>uniqueName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>realStorageFactory;init;[home, databaseName, tempDirName, uniqueName]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>shutdown</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>realStorageFactory;shutdown;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCanonicalName</MethodName>
            <MethodComment>/** 
 * Get the canonical name of the database.  This is a name that uniquely identifies it. It is system dependent. The normal, disk based implementation uses method  java.io.File.getCanonicalPath on the directory holding the database to construct the canonical name.
 * @return the canonical name
 * @exception IOException if an IO error occurred during the construction of the name.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setCanonicalName</MethodName>
            <MethodComment>/** 
 * Set the canonicalName. May need adjustment due to DERBY-5096
 * @param name uniquely identifiable name for this database
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>realStorageFactory;setCanonicalName;[name]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newStorageFile</MethodName>
            <MethodComment>/** 
 * Construct a StorageFile from a path name.
 * @param path The path name of the file
 * @return A corresponding StorageFile object
 */
</MethodComment>
            <ReturnType>StorageFile</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>path</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newStorageFile</MethodName>
            <MethodComment>/** 
 * Construct a StorageFile from a directory and file name.
 * @param directoryName The directory part of the path name.
 * @param fileName The name of the file within the directory.
 * @return A corresponding StorageFile object
 */
</MethodComment>
            <ReturnType>StorageFile</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>directoryName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fileName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newStorageFile</MethodName>
            <MethodComment>/** 
 * Construct a StorageFile from a directory and file name.
 * @param directoryName The directory part of the path name.
 * @param fileName The name of the file within the directory.
 * @return A corresponding StorageFile object
 */
</MethodComment>
            <ReturnType>StorageFile</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>directoryName</ParamName>
                    <ParamType>StorageFile</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fileName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StorageFile [realDirFile=((CorruptFile)directoryName).getRealFileInstance()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSeparator</MethodName>
            <MethodComment>/** 
 * Get the pathname separator character used by the StorageFile  implementation.
 * @return the pathname separator character. (Normally '/' or '\').
 */
</MethodComment>
            <ReturnType>char</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTempDir</MethodName>
            <MethodComment>/** 
 * Get the abstract name of the directory that holds temporary files.
 * @return a directory name
 */
</MethodComment>
            <ReturnType>StorageFile</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isFast</MethodName>
            <MethodComment>/** 
 * This method is used to determine whether the storage is fast  (RAM based) or slow (disk based). It may be used by the database engine to determine the default size of  the page cache.
 * @return &lt;b&gt;true&lt;/b&gt; if the storage is fast, &lt;b&gt;false&lt;/b&gt; if it is slow.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isReadOnlyDatabase</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>supportsRandomAccess</MethodName>
            <MethodComment>/** 
 * Determine whether the storage supports random access.  If random access is not supported then it will only be accessed using  InputStreams and OutputStreams (if the database is writable).
 * @return &lt;b&gt;true&lt;/b&gt; if the storage supports random access, &lt;b&gt;false&lt;/b&gt; if it is writable.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStorageFactoryVersion</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sync</MethodName>
            <MethodComment>/** 
 * Force the data of an output stream out to the underlying storage.  That is, ensure that it has been made persistent. If the database is to  be transient, that is, if the database does not survive a restart, then  the sync method implementation need not do anything.
 * @param stream    The stream to be synchronized.
 * @param metaData  If true then this method must force both changes to thefile's contents and metadata to be written to storage;  if false, it need only force file content changes to be written. The implementation is allowed to ignore this  parameter and always force out metadata changes.
 * @exception IOException if an I/O error occurs.
 * @exception SyncFailedException Thrown when the buffers cannot be flushed,or because the system cannot guarantee that all the buffers  have been synchronized with physical media.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>stream</ParamName>
                    <ParamType>OutputStream</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>metaData</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>realStorageFactory;sync;[stream, metaData]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>SyncFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>supportsWriteSync</MethodName>
            <MethodComment>/** 
 * This method tests whether the "rws" and "rwd" modes are implemented.  If the "rws" and "rwd" modes are supported then the database engine will conclude that the write methods of "rws" mode StorageRandomAccessFiles are slow but the sync method is fast and optimize accordingly.
 * @return &lt;b&gt;true&lt;/b&gt; if an StIRandomAccess file opened with "rws" or "rwd" modes immediately writes data to theunderlying storage, &lt;b&gt;false&lt;/b&gt; if not.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRealStorageFactory</MethodName>
            <MethodComment>/** 
 * get the  real storage factory
 */
</MethodComment>
            <ReturnType>WritableStorageFactory</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createTemporaryFile</MethodName>
            <MethodComment>/** 
 * Create and returns a temporary file in temporary file system of database.
 * @param prefix String to prefix the random name generator. It can be null
 * @param suffix String to suffix the random name generator. ".tmp" will beused if null.
 * @return StorageFile
 */
</MethodComment>
            <ReturnType>StorageFile</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>prefix</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>suffix</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>