<Class>
    <Id>55</Id>
    <Package>org.apache.derby.iapi.sql.compile</Package>
    <ClassName>Optimizable</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Visitable</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Optimizable  /** 
 * Optimizable provides services for optimizing a table in a query.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>nextAccessPath</MethodName>
            <MethodComment>/** 
 * Choose the next access path to evaluate for this Optimizable.
 * @param optimizer	Optimizer to use.
 * @param predList	The predicate list for this optimizable.The optimizer always passes null, and it is up to the optimizable object to pass along its own predicate list, if appropriate, when delegating this method.
 * @param rowOrdering	The row ordering for all the outer tables inthe join order.  This method will add the ordering of the next access path to the given RowOrdering.
 * @return	true means another access path was chosen, false meansno more access paths to evaluate.
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>optimizer</ParamName>
                    <ParamType>Optimizer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>predList</ParamName>
                    <ParamType>OptimizablePredicateList</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rowOrdering</ParamName>
                    <ParamType>RowOrdering</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>optimizeIt</MethodName>
            <MethodComment>/** 
 * Choose the best access path for this Optimizable.
 * @param optimizer	Optimizer to use.
 * @param predList	The predicate list to optimize against
 * @param outerCost	The CostEstimate for the outer tables in the join order,telling how many times this Optimizable will be scanned.
 * @param rowOrdering The row ordering for all the tables in thejoin order, including this one.
 * @return The optimizer's estimated cost of the best access path.
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>CostEstimate</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>optimizer</ParamName>
                    <ParamType>Optimizer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>predList</ParamName>
                    <ParamType>OptimizablePredicateList</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>outerCost</ParamName>
                    <ParamType>CostEstimate</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rowOrdering</ParamName>
                    <ParamType>RowOrdering</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCurrentAccessPath</MethodName>
            <MethodComment>/** 
 * Get the current access path under consideration for this Optimizable
 */
</MethodComment>
            <ReturnType>AccessPath</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBestAccessPath</MethodName>
            <MethodComment>/** 
 * Get the best access path for this Optimizable.
 */
</MethodComment>
            <ReturnType>AccessPath</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBestSortAvoidancePath</MethodName>
            <MethodComment>/** 
 * Get the best sort-avoidance path for this Optimizable.
 */
</MethodComment>
            <ReturnType>AccessPath</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTrulyTheBestAccessPath</MethodName>
            <MethodComment>/** 
 * Get the best access path overall for this Optimizable.
 */
</MethodComment>
            <ReturnType>AccessPath</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rememberSortAvoidancePath</MethodName>
            <MethodComment>/** 
 * Mark this optimizable so that its sort avoidance path will be considered.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>considerSortAvoidancePath</MethodName>
            <MethodComment>/** 
 * Check whether this optimizable's sort avoidance path should be considered.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rememberJoinStrategyAsBest</MethodName>
            <MethodComment>/** 
 * Remember the current join strategy as the best one so far in this join order.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ap</ParamName>
                    <ParamType>AccessPath</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTableDescriptor</MethodName>
            <MethodComment>/** 
 * Get the table descriptor for this table (if any).  Only base tables have table descriptors - for the rest of the optimizables, this method returns null.
 */
</MethodComment>
            <ReturnType>TableDescriptor</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getReferencedTableMap</MethodName>
            <MethodComment>/** 
 * Get the map of referenced tables for this Optimizable.
 * @return JBitSet	Referenced table map.
 */
</MethodComment>
            <ReturnType>JBitSet</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>pushOptPredicate</MethodName>
            <MethodComment>/** 
 * Push an OptimizablePredicate down, if this node accepts it.
 * @param optimizablePredicate	OptimizablePredicate to push down.
 * @return Whether or not the predicate was pushed down.
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>optimizablePredicate</ParamName>
                    <ParamType>OptimizablePredicate</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>pullOptPredicates</MethodName>
            <MethodComment>/** 
 * Pull all the OptimizablePredicates from this Optimizable and put them in the given OptimizablePredicateList.
 * @param optimizablePredicates		The list to put the pulled predicatesin.
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>optimizablePredicates</ParamName>
                    <ParamType>OptimizablePredicateList</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>modifyAccessPath</MethodName>
            <MethodComment>/** 
 * Modify the access path for this Optimizable, as necessary.  This includes things like adding a result set to translate from index rows to base rows
 * @param outerTables	Bit map of the tables that are outer to this onein the join order.
 * @return	The (potentially new) Optimizable at the top of the tree.
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>Optimizable</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>outerTables</ParamName>
                    <ParamType>JBitSet</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isCoveringIndex</MethodName>
            <MethodComment>/** 
 * Return whether or not this is a covering index.  We expect to call this during generation, after access path selection is complete.
 * @param cd			ConglomerateDesriptor for index to consider
 * @return boolean		Whether or not this is a covering index.
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cd</ParamName>
                    <ParamType>ConglomerateDescriptor</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getProperties</MethodName>
            <MethodComment>/** 
 * Get the Properties list, if any, associated with this optimizable.
 * @return The Properties list, if any, associated with this optimizable.
 */
</MethodComment>
            <ReturnType>Properties</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setProperties</MethodName>
            <MethodComment>/** 
 * Set the Properties list for this optimizalbe.
 * @param tableProperties The Properties list for this optimizable.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tableProperties</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>verifyProperties</MethodName>
            <MethodComment>/** 
 * Verify that the Properties list with optimizer overrides, if specified, is valid
 * @param dDictionary	The DataDictionary  to use.
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dDictionary</ParamName>
                    <ParamType>DataDictionary</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getName</MethodName>
            <MethodComment>/** 
 * Get the (exposed) name of this Optimizable
 * @return	The name of this Optimizable.
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBaseTableName</MethodName>
            <MethodComment>/** 
 * Get the table name of this Optimizable.  Only base tables have table names (by the time we use this method, all views will have been resolved).
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>convertAbsoluteToRelativeColumnPosition</MethodName>
            <MethodComment>/** 
 * Convert an absolute to a relative 0-based column position. This is useful when generating qualifiers for partial rows  from the store.
 * @param absolutePosition	The absolute 0-based column position for the column.
 * @return The relative 0-based column position for the column.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>absolutePosition</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>updateBestPlanMap</MethodName>
            <MethodComment>/** 
 * When remembering "truly the best" access path for an Optimizable, we have to keep track of which OptimizerImpl the "truly the best" access is for.  In most queries there will only be one OptimizerImpl in question, but in cases where there are nested subqueries, there will be one OptimizerImpl for every level of nesting, and each OptimizerImpl might have its own idea of what this Optimizable's "truly the best path" access path really is.  In addition, there could be Optimizables above this Optimizable that might need to override the best path chosen during optimization.  So whenever we save a "truly the best" path, we take note of which Optimizer/Optimizable told us to do so.  Then as each level of subquery finishes optimization, the corresponding OptimizerImpl/Optimizable can load its preferred access path into this Optimizable's trulyTheBestAccessPath field and pass it up the tree, until eventually the outer-most OptimizerImpl can choose to either use the best path that it received from below (by calling "rememberAsBest()") or else use the path that it found to be "best" for itself. This method is what allows us to keep track of which OptimizerImpl or Optimizable saved which "best plan", and allows us to load the appropriate plans after each round of optimization.
 * @param action Indicates whether we're adding, loading, or removinga best plan for the OptimizerImpl/Optimizable.
 * @param planKey Object to use as the map key when adding/looking upa plan.  If it is an instance of OptimizerImpl then it corresponds to an outer query; otherwise it's some Optimizable above this Optimizable that could potentially reject plans chosen by the OptimizerImpl to which this Optimizable belongs.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>action</ParamName>
                    <ParamType>short</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>planKey</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rememberAsBest</MethodName>
            <MethodComment>/** 
 * Remember the current access path as the best one (so far).
 * @param planType	The type of plan (one of Optimizer.NORMAL_PLANor Optimizer.SORT_AVOIDANCE_PLAN)
 * @param optimizer The OptimizerImpl that is telling this Optimizableto remember its current path as "truly the best".
 * @exception StandardException thrown on error.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>planType</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>optimizer</ParamName>
                    <ParamType>Optimizer</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startOptimizing</MethodName>
            <MethodComment>/** 
 * Begin the optimization process for this Optimizable.  This can be called many times for an Optimizable while optimizing a query - it will typically be called every time the Optimizable is placed in a potential join order.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>optimizer</ParamName>
                    <ParamType>Optimizer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rowOrdering</ParamName>
                    <ParamType>RowOrdering</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>estimateCost</MethodName>
            <MethodComment>/** 
 * Estimate the cost of scanning this Optimizable using the given predicate list with the given conglomerate.  It is assumed that the predicate list has already been classified.  This cost estimate is just for one scan, not for the life of the query.
 * @see OptimizablePredicateList#classify
 * @param predList	The predicate list to optimize against
 * @param cd			The conglomerate descriptor to get the cost of
 * @param outerCost	The estimated cost of the part of the plan outerto this optimizable.
 * @param optimizer	The optimizer to use to help estimate the cost
 * @param rowOrdering The row ordering for all the tables in thejoin order, including this one.
 * @return	The estimated cost of doing the scan
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>CostEstimate</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>predList</ParamName>
                    <ParamType>OptimizablePredicateList</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cd</ParamName>
                    <ParamType>ConglomerateDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>outerCost</ParamName>
                    <ParamType>CostEstimate</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>optimizer</ParamName>
                    <ParamType>Optimizer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rowOrdering</ParamName>
                    <ParamType>RowOrdering</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isBaseTable</MethodName>
            <MethodComment>/** 
 * Tell whether this Optimizable represents a base table 
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isMaterializable</MethodName>
            <MethodComment>/** 
 * Tell whether this Optimizable is materializable 
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>supportsMultipleInstantiations</MethodName>
            <MethodComment>/** 
 * Tell whether this Optimizable can be instantiated multiple times 
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasLargeObjectColumns</MethodName>
            <MethodComment>/** 
 * Tell whether this Optimizable has any large object (LOB) columns. 
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getResultSetNumber</MethodName>
            <MethodComment>/** 
 * Get this Optimizable's result set number 
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTableNumber</MethodName>
            <MethodComment>/** 
 * Get this Optimizable's table number 
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasTableNumber</MethodName>
            <MethodComment>/** 
 * Return true if this Optimizable has a table number 
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>forUpdate</MethodName>
            <MethodComment>/** 
 * Return true if this is the target table of an update 
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initialCapacity</MethodName>
            <MethodComment>/** 
 * Return the initial capacity of the hash table, for hash join strategy 
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>loadFactor</MethodName>
            <MethodComment>/** 
 * Return the load factor of the hash table, for hash join strategy 
 */
</MethodComment>
            <ReturnType>float</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hashKeyColumns</MethodName>
            <MethodComment>/** 
 * Return the hash key column numbers, for hash join strategy 
 */
</MethodComment>
            <ReturnType>int[]</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setHashKeyColumns</MethodName>
            <MethodComment>/** 
 * Set the hash key column numbers, for hash join strategy 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>columnNumbers</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>feasibleJoinStrategy</MethodName>
            <MethodComment>/** 
 * Is the current proposed join strategy for this optimizable feasible given the predicate list?
 * @param predList	The predicate list that has been pushed down tothis optimizable
 * @param optimizer	The optimizer to use.
 * @return	true means feasible
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>predList</ParamName>
                    <ParamType>OptimizablePredicateList</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>optimizer</ParamName>
                    <ParamType>Optimizer</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>memoryUsageOK</MethodName>
            <MethodComment>/** 
 * @param rowCount
 * @param maxMemoryPerTable
 * @return true if the memory usage of the proposed access path is OK, false if not.
 * @exception StandardException standard error policy
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rowCount</ParamName>
                    <ParamType>double</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>maxMemoryPerTable</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>maxCapacity</MethodName>
            <MethodComment>/** 
 * Return the maximum capacity of the hash table, for hash join strategy
 * @param maxMemoryPerTable The maximum number of bytes to be used. Ignored if the user has set a maximumnumber of rows for the Optimizable.
 * @exception StandardException Standard error policy
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>joinStrategy</ParamName>
                    <ParamType>JoinStrategy</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>maxMemoryPerTable</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>legalJoinOrder</MethodName>
            <MethodComment>/** 
 * Can this Optimizable appear at the current location in the join order. In other words, have the Optimizable's dependencies been satisfied?
 * @param assignedTableMap	The tables that have been placed so far in the join order.
 * @return	Where or not this Optimizable can appear at the current location in the join order.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>assignedTableMap</ParamName>
                    <ParamType>JBitSet</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDataDictionary</MethodName>
            <MethodComment>/** 
 * Get the DataDictionary from this Optimizable.  This is useful for code generation because we need to get the constraint name if scanning a back index so that RunTimeStatistics can display the correct info.
 * @return The DataDictionary to use.
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>DataDictionary</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isTargetTable</MethodName>
            <MethodComment>/** 
 * Is the optimizable the target table of an update or delete?
 * @return Whether or not the optimizable the target table of an update or delete.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNumColumnsReturned</MethodName>
            <MethodComment>/** 
 * Get the number of the number of columns returned by this Optimizable.
 * @return The number of the number of columns returned by this Optimizable.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isOneRowScan</MethodName>
            <MethodComment>/** 
 * Will the optimizable return at most 1 row per scan?
 * @return Whether or not the optimizable will return at most 1 row per scan?
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initAccessPaths</MethodName>
            <MethodComment>/** 
 * Init the access paths for this optimizable.
 * @param optimizer The optimizer being used.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>optimizer</ParamName>
                    <ParamType>Optimizer</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>uniqueJoin</MethodName>
            <MethodComment>/** 
 * Does this optimizable have a uniqueness condition on the given predicate list, and if so, how many unique keys will be returned per scan.
 * @param predList		The predicate list to check
 * @return	&amp;lt;= 0 means there is no uniqueness condition&amp;gt; 0 means there is a uniqueness condition, and the return value is the number of rows per scan.
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>double</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>predList</ParamName>
                    <ParamType>OptimizablePredicateList</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOptimizerTracer</MethodName>
            <MethodComment>/** 
 * Get the optimizer tracer, if any 
 */
</MethodComment>
            <ReturnType>OptTrace</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>optimizerTracingIsOn</MethodName>
            <MethodComment>/** 
 * Report whether optimizer tracing is on 
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>