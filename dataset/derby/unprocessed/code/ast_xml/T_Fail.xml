<Class>
    <Id>233</Id>
    <Package>org.apache.derbyTesting.unitTests.harness</Package>
    <ClassName>T_Fail</ClassName>
    <SuperClass>Exception</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>T_Fail  /** 
 * Exception used to throw for errors in a unit test.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>nested</FieldName>
            <FieldType>Throwable</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>T_Fail</MethodName>
            <MethodComment>/** 
 * Create a T_Fail exception which carries a message.
 * @param message An Id for an error message for this exception.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>message</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>moduleToTestIdNotFound</MethodName>
            <MethodComment>/** 
 * return a T_Fail exception to indicate the configuration does not specify the module to test.
 * @return The exception.
 */
</MethodComment>
            <ReturnType>T_Fail</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>moduleToTestNotFound</MethodName>
            <MethodComment>/** 
 * return a T_Fail exception to indicate the configuration does not contain the module to test.
 * @return The exception.
 */
</MethodComment>
            <ReturnType>T_Fail</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>moduleToTest</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>exceptionFail</MethodName>
            <MethodComment>/** 
 * return a T_Fail exception to indicate the test failed due to an exception. &lt;P&gt;Note: Since the Test Service catches all exceptions this seems to be of limited value.
 * @return The exception.
 */
</MethodComment>
            <ReturnType>T_Fail</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>e</ParamName>
                    <ParamType>Throwable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>T_Fail [tf=new T_Fail("The test failed with an exception: " + e.toString())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testFail</MethodName>
            <MethodComment>/** 
 * return a T_Fail exception to indicate the test failed.
 * @return the exception.
 */
</MethodComment>
            <ReturnType>T_Fail</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testFailMsg</MethodName>
            <MethodComment>/** 
 * return a T_Fail exception which includes a user message indicating why a test failed.
 * @return The exception.
 */
</MethodComment>
            <ReturnType>T_Fail</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>message</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>T_ASSERT</MethodName>
            <MethodComment>/** 
 * Check a test condition. If it is false, throw a T_Fail exception.
 * @param mustBeTrue The condition.
 * @exception T_Fail A test failure exception
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mustBeTrue</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>T_ASSERT</MethodName>
            <MethodComment>/** 
 * Check a test condition. If it is false, throw a T_Fail exception which includes a message.
 * @param mustBeTrue The condition.
 * @param msg A message describing the failue.
 * @exception T_Fail A test failure exception
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mustBeTrue</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>msg</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>