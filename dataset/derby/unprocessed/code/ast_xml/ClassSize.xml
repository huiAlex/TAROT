<Class>
    <Id>2150</Id>
    <Package>org.apache.derby.iapi.services.cache</Package>
    <ClassName>ClassSize</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>refSize</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>objectOverhead</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>booleanSize</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>charSize</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>shortSize</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>intSize</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>longSize</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>floatSize</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>doubleSize</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>minObjectSize</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>dummyCatalog</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>noGuess</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>unitTest</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>wildGuess</FieldName>
            <FieldType>int[]</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>setDummyCatalog</MethodName>
            <MethodComment>/** 
 * do not try to use the catalog.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRefSize</MethodName>
            <MethodComment>/** 
 * Get the estimate of the size of an object reference.
 * @return the estimate in bytes.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getIntSize</MethodName>
            <MethodComment>/** 
 * @return the estimate of the size of a primitive int
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSizeCoefficients</MethodName>
            <MethodComment>/** 
 * The estimate of the size of a class instance depends on whether the JVM uses 32 or 64 bit addresses, that is it depends on the size of an object reference. It is a linear function of the size of a reference, e.g. 24 + 5*r where r is the size of a reference (usually 4 or 8 bytes). This method returns the coefficients of the linear function, e.g. {24, 5} in the above example.
 * @param cl A class whose instance size is to be estimated
 * @return an array of 2 integers. The first integer is the constant part of the function,the second is the reference size coefficient.
 */
</MethodComment>
            <ReturnType>int[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cl</ParamName>
                    <ParamType>Class</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int[] [coeff={0,objectOverhead}]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>estimateBaseFromCoefficients</MethodName>
            <MethodComment>/** 
 * Estimate the static space taken up by a class instance given the coefficients returned by getSizeCoefficients.
 * @param coeff the coefficients
 * @return the size estimate, in bytes
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>coeff</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [size=coeff[0] + coeff[1] * refSize]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>estimateBaseFromCatalog</MethodName>
            <MethodComment>/** 
 * Estimate the static space taken up by a class instance from cataloged coefficients.
 * @param cls the class
 * @return the size estimate, in bytes
 * @see #estimateBaseFromCoefficients
 * @see #getSizeCoefficients see org.apache.derbyBuild.ClassSizeCrawler
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cls</ParamName>
                    <ParamType>Class</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>estimateBaseFromCatalog</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cls</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>addToCatalog</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassSizeCatalog [catalog=ClassSizeCatalog.getInstance()]</InnerVar>
                <InnerVar>int[] [coeff=catalog.get(cls.getName())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>estimateAndCatalogBase</MethodName>
            <MethodComment>/** 
 * Estimate the static space taken up by a class instance. Save the coefficients in a catalog.
 * @param cls the class
 * @return the size estimate, in bytes
 * @see #estimateBaseFromCoefficients
 * @see #getSizeCoefficients see org.apache.derbyBuild.ClassSizeCrawler
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cls</ParamName>
                    <ParamType>Class</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>estimateBase</MethodName>
            <MethodComment>/** 
 * Estimate the static space taken up by the fields of a class. This includes the space taken up by by references (the pointer) but not by the referenced object. So the estimated size of an array field does not depend on the size of the array. Similarly the size of an object (reference) field does not depend on the object.
 * @return the size estimate in bytes.Note that this method will throw a SecurityException if the SecurityManager does not let this class execute the method Class.getDeclaredFields(). If this is a concern try to compute the size coefficients at build time. see org.apache.derbyBuild.ClassSizeCrawler
 * @see #estimateBaseFromCatalog
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cl</ParamName>
                    <ParamType>Class</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>estimateArrayOverhead</MethodName>
            <MethodComment>/** 
 * @return the estimated overhead of an array. The estimated size of an x[n] array isestimateArrayOverhead() + n*sizeOf(x).
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>estimateHashEntrySize</MethodName>
            <MethodComment>/** 
 * Estimate the size of a Hashtable entry. In Java 1.2 we can use Map.entry, but this is not available in earlier versions of Java.
 * @return the estimate, in bytes
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>estimateMemoryUsage</MethodName>
            <MethodComment>/** 
 * Estimate the size of a string.
 * @return the estimated size, in bytes
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>str</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fetchRefSizeFromSystemProperties</MethodName>
            <MethodComment>/** 
 * Tries to determine the reference size in bytes by checking whether the VM we're running in is 32 or 64 bit by looking at the system properties.
 * @return The reference size in bytes as specified or implied by the VM,or  {@code -1} if the reference size couldn't be determined.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [dataModel=getSystemProperty("sun.arch.data.model")]</InnerVar>
                <InnerVar>String [arch=getSystemProperty("os.arch")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSystemProperty</MethodName>
            <MethodComment>/** 
 * Attempts to read the specified system property.
 * @param propName name of the system property to read
 * @return The property value, or {@code null} if it doesn't exist or therequired permission to read the property is missing.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>propName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>