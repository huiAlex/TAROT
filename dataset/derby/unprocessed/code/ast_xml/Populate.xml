<Class>
    <Id>128</Id>
    <Package>org.apache.derbyTesting.system.oe.run</Package>
    <ClassName>Populate</ClassName>
    <SuperClass>JDBCPerfTestCase</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Populate  /** 
 * Driver to do the load phase for the Order Entry benchmark. This class takes in following arguments currently: Usage: java org.apache.derbyTesting.system.oe.run.Populate options Options: &lt;OL&gt; &lt;LI&gt;-scale warehouse scaling factor. Takes a short value. If not specified defaults to 1 &lt;LI&gt;-createConstraintsBeforeLoad create constraints before initial load of data, takes a boolean value. If not specified, defaults to true &lt;LI&gt;-doChecks check consistency of data, takes a boolean value. If not specified, defaults to true &lt;LI&gt;-loaderThreads Number of threads to populate tables, defaults to number of cores &lt;LI&gt;-help prints usage &lt;/OL&gt; To load database with scale of 2, to load constraints after the population,  and to not do any checks, the command to run the test is as follows: &lt;BR&gt; java org.apache.derbyTesting.system.oe.run.Populate -scale 2 -doChecks false -createConstraintsBeforeLoad false &lt;BR&gt; This class uses the junit performance framework in Derby and  the tests the performance of the following operations.  &lt;OL&gt; &lt;LI&gt; create schema with or without constraints (configurable) &lt;LI&gt; populate the schema &lt;LI&gt; Check the cardinality of the tables. &lt;/OL&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>scale</FieldName>
            <FieldType>short</FieldType>
        </Field>
        <Field>
            <FieldName>loaderThreads</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>createConstraintsBeforeLoad</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>doChecks</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>Populate</MethodName>
            <MethodComment>/** 
 * Create a test case with the given name.
 * @param name of the test case.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>main</MethodName>
            <MethodComment>/** 
 * Run OE load
 * @param args supply arguments for benchmark.
 * @throws Exception
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String[] [tmp={"org.apache.derbyTesting.system.oe.run.Populate"}]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;parseArgs;[args]</InnerMethodInvoke>
                <InnerMethodInvoke>junit.textui.TestRunner;main;[tmp]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseArgs</MethodName>
            <MethodComment>/** 
 * parse arguments.
 * @param args arguments to parse
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>printUsage</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>System.out;println;["Usage: java org.apache.derbyTesting.system.oe.run.Populate options"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;[]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["Options:"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["  -scale warehouse scaling factor. Takes a short value. If not specified defaults to 1"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["  -createConstraintsBeforeLoad create constraints before initial load of data, takes a boolean value. If not specified, defaults to true)"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["  -doChecks check consistency of data, takes a boolean value. If not specified, defaults to true)"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["  -loaderThreads number of threads used to populate database, defaults to number of cpu cores)"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["  -help prints usage"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>suite</MethodName>
            <MethodComment>/** 
 * junit tests to do the OE load.
 * @return the tests to run
 */
</MethodComment>
            <ReturnType>Test</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>BaseTestSuite [suite=new BaseTestSuite("Order Entry")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>suite;addTest;[new Populate("testCreateDB")]</InnerMethodInvoke>
                <InnerMethodInvoke>Schema;addBaseSchema;[suite]</InnerMethodInvoke>
                <InnerMethodInvoke>suite;addTest;[new Populate("testLoad")]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testCreateDB</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>DataSource [ds=JDBCDataSource.getDataSource()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>JDBCDataSource;setBeanProperty;[ds, "createDatabase", "create"]</InnerMethodInvoke>
                <InnerMethodInvoke>ds.getConnection();close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testLoad</MethodName>
            <MethodComment>/** 
 * test the initial database load
 * @throws Exception
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>DataSource [ds=JDBCDataSource.getDataSource()]</InnerVar>
                <InnerVar>Load [loader=new ThreadInsert(ds)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>loader;setupLoad;[getConnection(), scale]</InnerMethodInvoke>
                <InnerMethodInvoke>loader;populateAllTables;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>