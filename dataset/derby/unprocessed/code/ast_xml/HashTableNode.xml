<Class>
    <Id>592</Id>
    <Package>org.apache.derby.impl.sql.compile</Package>
    <ClassName>HashTableNode</ClassName>
    <SuperClass>SingleChildResultSetNode</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>HashTableNode  /** 
 * A HashTableNode represents a result set where a hash table is built.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>searchPredicateList</FieldName>
            <FieldType>PredicateList</FieldType>
        </Field>
        <Field>
            <FieldName>joinPredicateList</FieldName>
            <FieldType>PredicateList</FieldType>
        </Field>
        <Field>
            <FieldName>pSubqueryList</FieldName>
            <FieldType>SubqueryList</FieldType>
        </Field>
        <Field>
            <FieldName>rSubqueryList</FieldName>
            <FieldType>SubqueryList</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>HashTableNode</MethodName>
            <MethodComment>/** 
 * Constructor for a HashTableNode.
 * @param childResult			The child result set
 * @param tableProperties	Properties list associated with the table
 * @param resultColumns			The RCL.
 * @param searchPredicateList	Single table clauses
 * @param joinPredicateList		Multi table clauses
 * @param accessPath			The access path
 * @param costEstimate			The cost estimate
 * @param pSubqueryList			List of subqueries in RCL
 * @param rSubqueryList			List of subqueries in Predicate lists
 * @param hashKeyColumns		Hash key columns
 * @param cm                    The context manager
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>childResult</ParamName>
                    <ParamType>ResultSetNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableProperties</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>resultColumns</ParamName>
                    <ParamType>ResultColumnList</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>searchPredicateList</ParamName>
                    <ParamType>PredicateList</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>joinPredicateList</ParamName>
                    <ParamType>PredicateList</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>accessPath</ParamName>
                    <ParamType>AccessPathImpl</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>costEstimate</ParamName>
                    <ParamType>CostEstimate</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pSubqueryList</ParamName>
                    <ParamType>SubqueryList</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rSubqueryList</ParamName>
                    <ParamType>SubqueryList</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>hashKeyColumns</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cm</ParamName>
                    <ParamType>ContextManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setResultColumns;[resultColumns]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setCostEstimate;[costEstimate]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setHashKeyColumns;[hashKeyColumns]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>modifyAccessPath</MethodName>
            <MethodComment>/** 
 * @see Optimizable#modifyAccessPath
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>Optimizable</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>outerTables</ParamName>
                    <ParamType>JBitSet</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>optimizer</ParamName>
                    <ParamType>Optimizer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>printSubNodes</MethodName>
            <MethodComment>/** 
 * Prints the sub-nodes of this object.  See QueryTreeNode.java for how tree printing is supposed to work.
 * @param depth		The depth of this node in the tree
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>depth</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generate</MethodName>
            <MethodComment>/** 
 * For joins, the tree will be (nodes are left out if the clauses are empty): ProjectRestrictResultSet -- for the having and the select list SortResultSet -- for the group by list ProjectRestrictResultSet -- for the where and the select list (if no group or having) the result set for the fromList
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>acb</ParamName>
                    <ParamType>ActivationClassBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mb</ParamName>
                    <ParamType>MethodBuilder</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;generateMinion;[acb, mb, false]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateResultSet</MethodName>
            <MethodComment>/** 
 * General logic shared by Core compilation and by the Replication Filter compiler. A couple ResultSets (the ones used by PREPARE SELECT FILTER) implement this method.
 * @param acb	The ExpressionClassBuilder for the class being built
 * @param mb the method  the expression will go into
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>acb</ParamName>
                    <ParamType>ExpressionClassBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mb</ParamName>
                    <ParamType>MethodBuilder</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;generateMinion;[acb, mb, true]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateMinion</MethodName>
            <MethodComment>/** 
 * Logic shared by generate() and generateResultSet().
 * @param acb	The ExpressionClassBuilder for the class being built
 * @param mb the method  the expression will go into
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>acb</ParamName>
                    <ParamType>ExpressionClassBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mb</ParamName>
                    <ParamType>MethodBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>genChildResultSet</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodBuilder [userExprFun]</InnerVar>
                <InnerVar>ValueNode [searchClause=null]</InnerVar>
                <InnerVar>ValueNode [equijoinClause=null]</InnerVar>
                <InnerVar>ResultColumnList.ColumnMapping [mappingArrays=getResultColumns().mapSourceColumns()]</InnerVar>
                <InnerVar>int[] [mapArray=mappingArrays.mapArray]</InnerVar>
                <InnerVar>int [mapArrayItem=acb.addItem(new ReferencedColumnsDescriptorImpl(mapArray))]</InnerVar>
                <InnerVar>FormatableIntHolder[] [fihArray=FormatableIntHolder.getFormatableIntHolders(hashKeyColumns())]</InnerVar>
                <InnerVar>FormatableArrayHolder [hashKeyHolder=new FormatableArrayHolder(fihArray)]</InnerVar>
                <InnerVar>int [hashKeyItem=acb.addItem(hashKeyHolder)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;verifyProperties;[getDataDictionary()]</InnerMethodInvoke>
                <InnerMethodInvoke>acb;pushGetResultSetFactoryExpression;[mb]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assignResultSetNumber;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setCostEstimate;[childResult.getFinalCostEstimate()]</InnerMethodInvoke>
                <InnerMethodInvoke>joinPredicateList;generateQualifiers;[acb, mb, (Optimizable)childResult, false]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;push;[getResultSetNumber()]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;push;[mapArrayItem]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;push;[getResultColumns().reusableResult()]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;push;[hashKeyItem]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;push;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;push;[-1L]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;push;[initialCapacity]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;push;[loadFactor]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;push;[getCostEstimate().singleScanRowCount()]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;push;[getCostEstimate().getEstimatedCost()]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;callMethod;[VMOpcode.INVOKEINTERFACE, (String)null, "getHashTableResultSet", ClassName.NoPutResultSet, 14]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>acceptChildren</MethodName>
            <MethodComment>/** 
 * Accept the visitor for all visitable children of this node.
 * @param v the visitor
 * @exception StandardException on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>v</ParamName>
                    <ParamType>Visitor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>