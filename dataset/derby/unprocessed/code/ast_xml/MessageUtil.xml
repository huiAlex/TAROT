<Class>
    <Id>1827</Id>
    <Package>org.apache.derby.shared.common.i18n</Package>
    <ClassName>MessageUtil</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>MessageUtil  /** 
 * Class comments here
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>US</FieldName>
            <FieldType>Locale</FieldType>
        </Field>
        <Field>
            <FieldName>resourceBundleName</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>MessageUtil</MethodName>
            <MethodComment>/** 
 * Create an instance of MessageUtil with a specific resource bundle. This assumes the default locale, which is just fine for users of this class other than the engine (which potentially has a different locale and a different resource bundle for each invocation of getCompleteMessage().
 * @param resourceBundleName The base name of the resource bundle to use.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>resourceBundleName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTextMessage</MethodName>
            <MethodComment>/** 
 * Get a message with default locale.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>messageID</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCompleteMessage</MethodName>
            <MethodComment>/** 
 * Instance method to get the complete message, using the provided resource bundle name as specified when this instance was constructed If for some reason the message could not be found, we return a default message using the message arguments
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>messageID</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>Object[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCompleteMessage</MethodName>
            <MethodComment>/** 
 * Generic routine to get a message with any number of arguments. Looks in the provided resource bundle for the message, using the specified locale and then the US locale.  
 * @param locale The locale to use when looking for the message.  If the message is not found using this locale, we attempt to find it using the US locale (our default).
 * @param resourceBundleName The base name for the resource bundle to use. 
 * @param messageId  The message identifier for this message
 * @param arguments The arguments for the message
 * @param composeDefault If this is true, this method will compose a default message if the message could not be found in the provided resource bundles.  If it is false, this method will throw a MissingResourceException if the message could not be found.
 * @return The message for the given message id, with arguments substituted.
 * @throws MissingResourceException If the message could not be found and the  &lt;code&gt;composeDefault&lt;/code&gt; parameter was set to false.  
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>locale</ParamName>
                    <ParamType>Locale</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>resourceBundleName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>messageId</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>arguments</ParamName>
                    <ParamType>Object[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>composeDefault</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>MissingResourceException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCompleteMessage</MethodName>
            <MethodComment>/** 
 * This is a wrapper for the getCompleteMessage workhorse routine using some obvious defaults, particularly for non-engine subsystems that only ever use the default locale. Get a message using the default locale.  If the message is not found  with the default locale, use the US locale.   Do this both for the common bundle and the parent bundle. If the message is not found in common or in the parent resource bundle, return a default message composed of the message arguments.
 * @param messageId The id to use to look up the message
 * @param resourceBundleName The base name of the resource bundle to use.
 * @param arguments The arguments to the message
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>messageId</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>resourceBundleName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>arguments</ParamName>
                    <ParamType>Object[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>MissingResourceException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>formatMessage</MethodName>
            <MethodComment>/** 
 * Format a message given a resource bundle and a message id. &lt;p&gt; The arguments to the messages are passed via an object array. The objects in the array WILL be changed by this class. The caller should NOT get the object back from this array.
 * @param bundle The resource bundle to use to look for the message
 * @param messageId The message id to use for the message
 * @param arguments The arguments for the message
 * @param composeDefault Indicates whether a default message should be composed if the message can't be found in the resource bundle. &lt;p&gt; If composeDefault is false, this method will throw a MissingResourceException if the message could not be found. &lt;p&gt; If composeDefault is true, then if the message id is not found in the given bundle, this method composes and returns as helpful a  message as possible in the format "UNKNOWN : [arg1], [arg2], ..."
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>bundle</ParamName>
                    <ParamType>ResourceBundle</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>messageId</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>arguments</ParamName>
                    <ParamType>Object[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>composeDefault</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [message=null]</InnerVar>
                <InnerVar>String [badArgsMessage=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>countParams</MethodName>
            <MethodComment>/** 
 * Count the number of substituation parameters in the message
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>message</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [openFound=false]</InnerVar>
                <InnerVar>int [numparams=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>composeDefaultMessage</MethodName>
            <MethodComment>/** 
 * Compose a default message so that the user at least gets *something* useful rather than just a MissingResourceException, which is particularly unhelpful
 * @param message The message to start with, which often is null
 * @param arguments The arguments to the message.  
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>message</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>arguments</ParamName>
                    <ParamType>Object[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuffer [sb=new StringBuffer(message)]</InnerVar>
                <InnerVar>int [len=arguments.length]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>sb;append;[" : "]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>