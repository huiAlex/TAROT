<Class>
    <Id>2092</Id>
    <Package>org.apache.derby.vti</Package>
    <ClassName>VTICosting</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>VTICosting  /** 
 * &lt;P&gt; VTICosting is the interface that the query optimizer uses to cost Table Functions. The methods on this interface provide the optimizer with the following information: &lt;/P&gt; &lt;UL&gt;  &lt;LI&gt; The estimated number of rows returned by the Table Function in a single instantiation. &lt;LI&gt; The estimated cost to instantiate and iterate through the Table Function. &lt;LI&gt; Whether or not the Table Function can be instantiated multiple times within a single query execution. &lt;/UL&gt; &lt;P&gt; The optimizer places a Table Function in the join order after making some assumptions: &lt;/P&gt; &lt;UL&gt; &lt;LI&gt;&lt;B&gt;Cost&lt;/B&gt; - The optimizer hard-codes a guess about how expensive it is to materialize a Table Function. &lt;/LI&gt; &lt;LI&gt;&lt;B&gt;Count&lt;/B&gt; - The optimizer also hard-codes a guess about how many rows a Table Function returns. &lt;/LI&gt; &lt;LI&gt;&lt;B&gt;Repeatability&lt;/B&gt; - The optimizer assumes that the same results come back each time you invoke a Table Function. &lt;/LI&gt; &lt;/Ul&gt; &lt;P&gt; The class which contains your Table Function can override these assumptions and improve the join order as follows: &lt;/P&gt; &lt;UL&gt; &lt;LI&gt;&lt;B&gt;Implement&lt;/B&gt; - The class must implement &lt;a href="./VTICosting.html"&gt;VTICosting&lt;/a&gt;. &lt;/LI&gt; &lt;LI&gt;&lt;B&gt;Construct&lt;/B&gt; - The class must contain a public, no-arg constructor. &lt;/LI&gt; &lt;/Ul&gt; &lt;P&gt; The methods in this interface take a &lt;a href="./VTIEnvironment.html"&gt;VTIEnvironment&lt;/a&gt; argument. This is a state variable created by the optimizer. The methods in this interface can use this state variable to pass information to one another and learn other details of the operating environment. &lt;/P&gt;
 * @see org.apache.derby.vti.VTIEnvironment
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>defaultEstimatedRowCount</FieldName>
            <FieldType>double</FieldType>
        </Field>
        <Field>
            <FieldName>defaultEstimatedCost</FieldName>
            <FieldType>double</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getEstimatedRowCount</MethodName>
            <MethodComment>/** 
 * Get the estimated row count for a single scan of a Table Function.
 * @param vtiEnvironment The state variable for optimizing the Table Function.
 * @return	The estimated row count for a single scan of the Table Function.
 * @exception SQLException thrown if the costing fails.
 */
</MethodComment>
            <ReturnType>double</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>vtiEnvironment</ParamName>
                    <ParamType>VTIEnvironment</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEstimatedCostPerInstantiation</MethodName>
            <MethodComment>/** 
 * Get the estimated cost for a single instantiation of a Table Function.
 * @param vtiEnvironment The state variable for optimizing the Table Function.
 * @return	The estimated cost for a single instantiation of the Table Function.
 * @exception SQLException thrown if the costing fails.
 */
</MethodComment>
            <ReturnType>double</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>vtiEnvironment</ParamName>
                    <ParamType>VTIEnvironment</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>supportsMultipleInstantiations</MethodName>
            <MethodComment>/** 
 * Find out if the ResultSet of the Table Function can be instantiated multiple times.
 * @param vtiEnvironment The state variable for optimizing the Table Function.
 * @return	True if the ResultSet can be instantiated multiple times, false ifcan only be instantiated once.
 * @exception SQLException thrown if the costing fails.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>vtiEnvironment</ParamName>
                    <ParamType>VTIEnvironment</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>