<Class>
    <Id>1079</Id>
    <Package>org.apache.derby.iapi.sql</Package>
    <ClassName>ParameterValueSet</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ParameterValueSet  /** 
 * A ParameterValueSet is a set of parameter values that can be assembled by a JDBC driver and passed to a PreparedStatement all at once. The fact that they are all passed at once can reduce the communication overhead between client and server.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>initialize</MethodName>
            <MethodComment>/** 
 * Initialize the parameter set by allocating DataValueDescriptor corresponding to the passed in type for each parameter.
 * @param types expected to match the number of parameters.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>types</ParamName>
                    <ParamType>DataTypeDescriptor[]</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setParameterMode</MethodName>
            <MethodComment>/** 
 * Set the mode of the parameter, called when setting up static method calls and stored procedures. Otherwise the parameter type will default to an IN parameter.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>position</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mode</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>registerOutParameter</MethodName>
            <MethodComment>/** 
 * Mark the parameter as an output parameter.
 * @param parameterIndex	The ordinal position of a parameter to setto the given value.
 * @param sqlType	A type from java.sql.Types
 * @param scale		the scale to use.  -1 means ignore scale
 * @exception StandardException on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parameterIndex</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sqlType</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>scale</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clearParameters</MethodName>
            <MethodComment>/** 
 * Sets all parameters to an uninitialized state. An exception will be thrown if the caller tries to execute a PreparedStatement when one or more parameters is uninitialized (i.e. has not had setParameterValue() called on it.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getParameterCount</MethodName>
            <MethodComment>/** 
 * Returns the number of parameters in this set.
 * @return	The number of parameters in this set.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getParameter</MethodName>
            <MethodComment>/** 
 * Returns the parameter at the given position.
 * @return	The parameter at the given position.
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>DataValueDescriptor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>position</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getParameterForSet</MethodName>
            <MethodComment>/** 
 * Returns the parameter at the given position in order to set it. Setting via an unknown object type must use setParameterAsObject() to ensure correct typing.
 * @return	The parameter at the given position.
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>DataValueDescriptor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>position</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setParameterAsObject</MethodName>
            <MethodComment>/** 
 * Set the value of this user defined parameter to the passed in Object.
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parameterIndex</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getParameterForGet</MethodName>
            <MethodComment>/** 
 * Get the DataValueDescriptor for an INOUT or OUT parameter.
 * @param position Zero based index of the parameter.
 * @return Parameter's value holder.
 * @throws StandardException Position out of range or the parameter is not INOUT or OUT.
 */
</MethodComment>
            <ReturnType>DataValueDescriptor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>position</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>allAreSet</MethodName>
            <MethodComment>/** 
 * Tells whether all the parameters are set and ready for execution. OUT are not required to be set.
 * @return	true if all parameters are set, false if at least oneparameter is not set.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getClone</MethodName>
            <MethodComment>/** 
 * Clone the ParameterValueSet and its contents.
 * @return ParameterValueSet	A clone of the ParameterValueSet and its contents.
 */
</MethodComment>
            <ReturnType>ParameterValueSet</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>validate</MethodName>
            <MethodComment>/** 
 * Validate the parameters.  This is done for situations where we cannot validate everything in the setXXX() calls.  In particular, before we do an execute() on a CallableStatement, we need to go through the parameters and make sure that all parameters are set up properly.  The motivator for this is that setXXX() can be called either before or after  registerOutputParamter(), we cannot be sure we have the types correct until we get to execute().
 * @exception StandardException if the parameters aren't valid
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasReturnOutputParameter</MethodName>
            <MethodComment>/** 
 * Is there a return output parameter in this pvs.  A return parameter is from a CALL statement of the following syntax: ? = CALL myMethod().  Note that a return output parameter is NOT the same thing as an output parameter; it is a special type of output parameter.
 * @return true if it has a return parameter
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkNoDeclaredOutputParameters</MethodName>
            <MethodComment>/** 
 * Check that there are not output parameters defined by the parameter set. If there are unknown parameter types they are forced to input types. i.e. Derby static method calls with parameters that are array.
 * @return true if a declared Java Procedure INOUT or OUT parameter is in the set, false otherwise.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>transferDataValues</MethodName>
            <MethodComment>/** 
 * Set the parameter values of the pvstarget to equal those  set in this PVS. Used to transfer saved SPS parameters to the actual prepared statement parameters  once associated parameters  have been established.  Assumes pvstarget is the same  length as this.
 * @param pvstarget ParameterValueSet which will recieve the values
 * @exception StandardException values not compatible
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pvstarget</ParamName>
                    <ParamType>ParameterValueSet</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getParameterMode</MethodName>
            <MethodComment>/** 
 * Return the mode of the parameter according to JDBC 3.0 ParameterMetaData
 * @param parameterIndex the first parameter is 1, the second is 2, ...
 */
</MethodComment>
            <ReturnType>short</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parameterIndex</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getReturnValueForSet</MethodName>
            <MethodComment>/** 
 * Get the value of the return parameter in order to set it.
 * @exception StandardException if a database-access error occurs.
 */
</MethodComment>
            <ReturnType>DataValueDescriptor</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getScale</MethodName>
            <MethodComment>/** 
 * Return the scale of the given parameter index in this pvs.
 * @param parameterIndex the first parameter is 1, the second is 2, ...
 * @return scale
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parameterIndex</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPrecision</MethodName>
            <MethodComment>/** 
 * Return the precision of the given parameter index in this pvs.
 * @param parameterIndex the first parameter is 1, the second is 2, ...
 * @return precision
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parameterIndex</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>