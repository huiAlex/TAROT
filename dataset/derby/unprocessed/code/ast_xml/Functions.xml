<Class>
    <Id>303</Id>
    <Package>org.apache.derbyDemo.scores.proc</Package>
    <ClassName>Functions</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Functions  /** 
 * &lt;p&gt; Functions used by the Scores application. &lt;/p&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>MILLISECONDS_IN_YEAR</FieldName>
            <FieldType>long</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>vetChoice</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Check that a legal answer was given to a question. Throws an exception if it is not. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>actualChoice</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>questionID</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [conn=getDefaultConnection()]</InnerVar>
                <InnerVar>int [column=1]</InnerVar>
                <InnerVar>PreparedStatement [ps=Utils.prepare(conn,"select numberOfChoices, questionName\n" + "from Question\n" + "where questionID = ?\n")]</InnerVar>
                <InnerVar>ResultSet [rs=ps.executeQuery()]</InnerVar>
                <InnerVar>int [numberOfChoices=rs.getInt(column++)]</InnerVar>
                <InnerVar>String [questionName=rs.getString(column++)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ps;setInt;[1, questionID]</InnerMethodInvoke>
                <InnerMethodInvoke>rs;next;[]</InnerMethodInvoke>
                <InnerMethodInvoke>Utils;close;[rs]</InnerMethodInvoke>
                <InnerMethodInvoke>Utils;close;[ps]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>computeAge</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Compute a Student's age given their birthday. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>date</ParamName>
                    <ParamType>java.sql.Date</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>long [interval=System.currentTimeMillis() - date.getTime()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>weighQuestion</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Compute the relative weight of a Question given its difficulty. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>double</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>difficulty</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>scoreAnswer</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Compute the score for a question. A penalty is assessed for guessing the wrong answer. If actualChoice is -1, then the Student didn't guess and we don't assess a penalty. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>double</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>difficulty</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>numberOfChoices</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>correctChoice</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>actualChoice</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMedianTestScore</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Calculate the median score achieved on a Test. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>double</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>testID</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Logger [log=Logger.getLogger()]</InnerVar>
                <InnerVar>boolean [loggingEnabled=log.isLoggingEnabled()]</InnerVar>
                <InnerVar>Median [median=new Median()]</InnerVar>
                <InnerVar>ArrayList [arraylist=new ArrayList()]</InnerVar>
                <InnerVar>Connection [conn=getDefaultConnection()]</InnerVar>
                <InnerVar>int [count=arraylist.size()]</InnerVar>
                <InnerVar>double [values[]=new double[count]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>formatPercent</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Format a double as a percentage, suitable for printing. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>score</ParamName>
                    <ParamType>double</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [rounded=(int)score]</InnerVar>
                <InnerVar>NumberFormat [nf=NumberFormat.getNumberInstance()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDefaultConnection</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Get the default connection, called from inside the database engine. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>Connection</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>