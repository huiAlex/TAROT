<Class>
    <Id>969</Id>
    <Package>org.apache.derby.iapi.store.access</Package>
    <ClassName>RowUtil</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>RowUtil  /** 
 * A set of static utility methods to work with rows. &lt;P&gt; A row or partial row is described by two or three parameters. &lt;OL&gt; &lt;LI&gt;DataValueDescriptor[] row - an array of objects, one per column. &lt;LI&gt;FormatableBitSet validColumns -  an indication of which objects in row map to which columns &lt;/OL&gt; These objects can describe a complete row or a partial row. A partial row is  one where a sub-set (e.g. columns 0, 4 and 7) of the columns are supplied  for update, or requested to be fetched on a read.  Here's an example of code to set up a partial column list to fetch the 0th (type FOO),  4th (type BAR), and 7th (type MMM) columns from a row with 10 columns, note that the format for a partial row changed from a "packed" representation in the 3.0 release to a "sparse" representation in later releases: &lt;blockquote&gt;&lt;pre&gt; // allocate/initialize the row  DataValueDescriptor row = new DataValueDescriptor[10] row[0] = new FOO(); row[4] = new BAR(); row[7] = new MMM(); // allocate/initialize the bit set  FormatableBitSet FormatableBitSet = new FormatableBitSet(10); FormatableBitSet.set(0); FormatableBitSet.set(4); FormatableBitSet.set(7); &lt;/blockquote&gt;&lt;/pre&gt; &lt;BR&gt;&lt;B&gt;Column mapping&lt;B&gt;&lt;BR&gt; When validColumns is null: &lt;UL&gt; &lt;LI&gt; The number of columns is given by row.length &lt;LI&gt; Column N maps to row[N], where column numbers start at zero. &lt;/UL&gt; &lt;BR&gt; When validColumns is not null, then &lt;UL&gt; &lt;LI&gt; The number of requested columns is given by the number of bits set in  validColumns. &lt;LI&gt; Column N is not in the partial row if validColumns.isSet(N)  returns false. &lt;LI&gt; Column N is in the partial row if validColumns.isSet(N) returns true. &lt;LI&gt; If column N is in the partial row then it maps to row[N]. If N &amp;gt;= row.length then the column is taken as non existent for an insert or update, and not fetched on a fetch. &lt;/UL&gt; If row.length is greater than the number of columns indicated by validColumns the extra entries are ignored.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>EMPTY_ROW</FieldName>
            <FieldType>DataValueDescriptor[]</FieldType>
        </Field>
        <Field>
            <FieldName>EMPTY_ROW_BITSET</FieldName>
            <FieldType>FormatableBitSet</FieldType>
        </Field>
        <Field>
            <FieldName>EMPTY_ROW_FETCH_DESCRIPTOR</FieldName>
            <FieldType>FetchDescriptor</FieldType>
        </Field>
        <Field>
            <FieldName>ROWUTIL_FETCH_DESCRIPTOR_CONSTANTS</FieldName>
            <FieldType>FetchDescriptor[]</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>RowUtil</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getColumn</MethodName>
            <MethodComment>/** 
 * Get the object for a column identifer (0 based) from a complete or  partial row.
 * @param row the row
 * @param columnList valid columns in the row
 * @param columnId which column to return (0 based)
 * @return the obejct for the column, or null if the column is not represented.
 */
</MethodComment>
            <ReturnType>DataValueDescriptor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>DataValueDescriptor[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columnList</ParamName>
                    <ParamType>FormatableBitSet</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columnId</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getColumn</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>Object[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columnList</ParamName>
                    <ParamType>FormatableBitSet</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columnId</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getQualifierBitSet</MethodName>
            <MethodComment>/** 
 * Get a FormatableBitSet representing all the columns represented in a qualifier list.
 * @return a FormatableBitSet describing the valid columns.
 */
</MethodComment>
            <ReturnType>FormatableBitSet</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>qualifiers</ParamName>
                    <ParamType>Qualifier[][]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>FormatableBitSet [qualifierColumnList=new FormatableBitSet()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNumberOfColumns</MethodName>
            <MethodComment>/** 
 * Get the number of columns represented by a FormatableBitSet. &lt;p&gt; This is simply a count of the number of bits set in the FormatableBitSet. &lt;p&gt;
 * @param maxColumnNumber Because the FormatableBitSet.size() can't be used asthe number of columns, allow caller to tell the maximum column number if it knows.   -1  means caller does not know. &amp;gt;=0 number is the largest column number.
 * @param columnList valid columns in the row
 * @return The number of columns represented in the FormatableBitSet.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>maxColumnNumber</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columnList</ParamName>
                    <ParamType>FormatableBitSet</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [max_col_number=columnList.getLength()]</InnerVar>
                <InnerVar>int [ret_num_cols=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isRowEmpty</MethodName>
            <MethodComment>/** 
 * See if a row actually contains no columns. Returns true if row is null or row.length is zero.
 * @return true if row is empty.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>DataValueDescriptor[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>columnOutOfRange</MethodName>
            <MethodComment>/** 
 * Return the column number of the first column out of range, or a number less than zero if all columns are in range.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>DataValueDescriptor[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columnList</ParamName>
                    <ParamType>FormatableBitSet</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>maxColumns</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [size=columnList.getLength()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nextColumn</MethodName>
            <MethodComment>/** 
 * Get the next valid column after or including start column. Returns -1 if no valid columns exist after startColumn
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>Object[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columnList</ParamName>
                    <ParamType>FormatableBitSet</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>startColumn</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFetchDescriptorConstant</MethodName>
            <MethodComment>/** 
 * Return a FetchDescriptor which describes a single column set. &lt;p&gt; This routine returns one of a set of constant FetchDescriptor's, and should not be altered by the caller.
 */
</MethodComment>
            <ReturnType>FetchDescriptor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>single_column_number</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newTemplate</MethodName>
            <MethodComment>/** 
 * Generate a template row of DataValueDescriptor's &lt;p&gt; Generate an array of DataValueDescriptor objects which will be used to  make calls to newRowFromClassInfoTemplate(), to repeatedly and efficiently generate new rows.  This is important for certain  applications like the sorter and fetchSet which generate large numbers of "new" empty rows. &lt;p&gt;
 * @return The new row.
 * @param column_list A bit set indicating which columns to include in row.
 * @param format_ids  an array of format id's, one per column in row.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>DataValueDescriptor[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dvf</ParamName>
                    <ParamType>DataValueFactory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>column_list</ParamName>
                    <ParamType>FormatableBitSet</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>format_ids</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>collation_ids</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [num_cols=format_ids.length]</InnerVar>
                <InnerVar>DataValueDescriptor[] [ret_row=new DataValueDescriptor[num_cols]]</InnerVar>
                <InnerVar>int [column_listSize=(column_list == null) ? 0 : column_list.getLength()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newRowFromTemplate</MethodName>
            <MethodComment>/** 
 * Generate an "empty" row from an array of DataValueDescriptor objects. &lt;p&gt; Generate an array of new'd objects by using the getNewNull() method on each of the DataValueDescriptor objects.   &lt;p&gt;
 * @return The new row.
 * @param template            An array of DataValueDescriptor objects each of which can be used to create a new  instance of the appropriate type to build a  new empty template row.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>DataValueDescriptor[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>template</ParamName>
                    <ParamType>DataValueDescriptor[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DataValueDescriptor[] [columns=new DataValueDescriptor[template.length]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment>/** 
 * return string version of row. &lt;p&gt; For debugging only. 
 * @return The string version of row.
 * @param row The row.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>Object[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment>/** 
 * return string version of a HashTable returned from a FetchSet. &lt;p&gt;
 * @return The string version of row.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>hash_table</ParamName>
                    <ParamType>Hashtable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>qualifyRow</MethodName>
            <MethodComment>/** 
 * Process the qualifier list on the row, return true if it qualifies. &lt;p&gt; A two dimensional array is to be used to pass around a AND's and OR's in conjunctive normal form.  The top slot of the 2 dimensional array is  optimized for the more frequent where no OR's are present.  The first  array slot is always a list of AND's to be treated as described above  for single dimensional AND qualifier arrays.  The subsequent slots are  to be treated as AND'd arrays or OR's.  Thus the 2 dimensional array  qual[][] argument is to be treated as the following, note if  qual.length = 1 then only the first array is valid and it is and an  array of and clauses: (qual[0][0] and qual[0][0] ... and qual[0][qual[0].length - 1]) and (qual[1][0] or  qual[1][1] ... or  qual[1][qual[1].length - 1]) and (qual[2][0] or  qual[2][1] ... or  qual[2][qual[2].length - 1]) ... and (qual[qual.length - 1][0] or  qual[1][1] ... or  qual[1][2])
 * @return true if the row qualifies.
 * @param row               The row being qualified.
 * @param qual_list         2 dimensional array representing conjunctivenormal form of simple qualifiers.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>DataValueDescriptor[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>qual_list</ParamName>
                    <ParamType>Qualifier[][]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [row_qualifies=true]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>