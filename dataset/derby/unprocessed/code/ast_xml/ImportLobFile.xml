<Class>
    <Id>947</Id>
    <Package>org.apache.derby.impl.load</Package>
    <ClassName>ImportFileInputStream</ClassName>
    <SuperClass>InputStream</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ImportFileInputStream  /** 
 * An InputStream, which can stream data from a file, starting from  any offset in the file. This stream operates on top of a  RandomAccessFile object. This class overrides InputStream methods to  read from the given RandomAccessFile and provides an addtional method &lt;code&gt;seek(..)&lt;/code&gt; to position the stream at offset in the file. 
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>lobInputStream</FieldName>
            <FieldType>ImportFileInputStream</FieldType>
        </Field>
        <Field>
            <FieldName>lobLimitIn</FieldName>
            <FieldType>LimitInputStream</FieldType>
        </Field>
        <Field>
            <FieldName>lobReader</FieldName>
            <FieldType>Reader</FieldType>
        </Field>
        <Field>
            <FieldName>dataCodeset</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>raf</FieldName>
            <FieldType>RandomAccessFile</FieldType>
        </Field>
        <Field>
            <FieldName>currentPosition</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>fileLength</FieldName>
            <FieldType>long</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ImportLobFile</MethodName>
            <MethodComment>/** 
 * Create a ImportLobFile object.
 * @param lobFile the file which has the LOB Data.
 * @param dataCodeset the code set to use char data in the file.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lobFile</ParamName>
                    <ParamType>File</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dataCodeset</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;openLobFile;[lobFile]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>openLobFile</MethodName>
            <MethodComment>/** 
 * Open the lob file and setup the stream required to read the data.
 * @param lobFile the file that contains lob data.
 * @exception Exception if an error occurs.     
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lobFile</ParamName>
                    <ParamType>File</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>RandomAccessFile [lobRaf]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>RandomAccessFile</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBinaryStream</MethodName>
            <MethodComment>/** 
 * Returns a stream that points to the lob data from file at the  given &lt;code&gt;offset&lt;/code&gt;.
 * @param offset  byte offset of the column data in the file. 
 * @param length  length of the the data.
 * @exception IOException  if any I/O error occurs.     
 */
</MethodComment>
            <ReturnType>InputStream</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>offset</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>length</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>lobInputStream;seek;[offset]</InnerMethodInvoke>
                <InnerMethodInvoke>lobLimitIn;clearLimit;[]</InnerMethodInvoke>
                <InnerMethodInvoke>lobLimitIn;setLimit;[(int)length]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getString</MethodName>
            <MethodComment>/** 
 * Returns the clob data at the given location as &lt;code&gt;String&lt;/code&gt;. 
 * @param offset  byte offset of the column data in the file. 
 * @param length  length of the the data.
 * @exception IOException  on any I/O error.     
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>offset</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>length</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuffer [sb=new StringBuffer()]</InnerVar>
                <InnerVar>char[] [buf=new char[1024]]</InnerVar>
                <InnerVar>int [noChars=lobReader.read(buf,0,1024)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>lobInputStream;seek;[offset]</InnerMethodInvoke>
                <InnerMethodInvoke>lobLimitIn;clearLimit;[]</InnerMethodInvoke>
                <InnerMethodInvoke>lobLimitIn;setLimit;[length]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCharacterStream</MethodName>
            <MethodComment>/** 
 * Returns a stream that points to the clob data from file at the  given &lt;code&gt;offset&lt;/code&gt;.
 * @param offset  byte offset of the column data in the file. 
 * @param length  length of the the data in bytes.
 * @exception IOException  on any I/O error.     
 */
</MethodComment>
            <ReturnType>java.io.Reader</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>offset</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>length</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>lobInputStream;seek;[offset]</InnerMethodInvoke>
                <InnerMethodInvoke>lobLimitIn;clearLimit;[]</InnerMethodInvoke>
                <InnerMethodInvoke>lobLimitIn;setLimit;[(int)length]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getClobDataLength</MethodName>
            <MethodComment>/** 
 * Returns the clob data length in characters at the give location. 
 * @param offset  byte offset of the column data in the file. 
 * @param length  length of the the data in bytes.
 * @exception IOException  on any I/O error.     
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>offset</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>length</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>char[] [buf=new char[1024]]</InnerVar>
                <InnerVar>long [lengthInChars=0]</InnerVar>
                <InnerVar>int [noChars=lobReader.read(buf,0,1024)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>lobInputStream;seek;[offset]</InnerMethodInvoke>
                <InnerMethodInvoke>lobLimitIn;clearLimit;[]</InnerMethodInvoke>
                <InnerMethodInvoke>lobLimitIn;setLimit;[(int)length]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>close</MethodName>
            <MethodComment>/** 
 * Close all the resources realated to the lob file.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ImportFileInputStream</MethodName>
            <MethodComment>/** 
 * Create a &lt;code&gt;ImportFileInputStream&lt;/code&gt; object for  the given file.  
 * @param raf  file the stream reads from. 
 * @exception IOException  if any I/O error occurs.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>raf</ParamName>
                    <ParamType>RandomAccessFile</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>seek</MethodName>
            <MethodComment>/** 
 * Sets the file offset at which the next read will occur. 
 * @param offset byte offset in the file.
 * @exception IOException  if an I/O error occurs.     
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>offset</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>raf;seek;[offset]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>read</MethodName>
            <MethodComment>/** 
 * Reads a byte of data from this input stream. 
 * @exception IOException  if an I/O error occurs.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>read</MethodName>
            <MethodComment>/** 
 * Reads up to &lt;code&gt;length&lt;/code&gt; bytes of data from this input stream into given array. This method blocks until some input is available.
 * @param buf     the buffer into which the data is read.
 * @param offset   the start offset of the data.
 * @param length   the maximum number of bytes read.
 * @return     the total number of bytes read into the buffer, or&lt;code&gt;-1&lt;/code&gt; if there is no more data because the end of the file has been reached.
 * @exception IOException  if an I/O error occurs.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>buf</ParamName>
                    <ParamType>byte</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>offset</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>length</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>available</MethodName>
            <MethodComment>/** 
 * Returns the number of bytes that can be read from this stream.
 * @return     the number of bytes that can be read from this stream.
 * @exception IOException  if an I/O error occurs.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>close</MethodName>
            <MethodComment>/** 
 * Closes this input stream and releases any associated resources
 * @exception IOException  if an I/O error occurs.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>