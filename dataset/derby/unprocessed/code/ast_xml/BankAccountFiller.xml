<Class>
    <Id>903</Id>
    <Package>org.apache.derbyTesting.perf.clients</Package>
    <ClassName>BankAccountFiller</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>DBFiller</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>BankAccountFiller  /** 
 * This class creates and populates tables that can be used by the bank transactions test clients. It attempts to create tables that follow the rules defined by the TPC-B benchmark specification.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>ACCOUNT_TABLE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>BRANCH_TABLE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>TELLER_TABLE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>HISTORY_TABLE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>DEFAULT_TELLERS_PER_BRANCH</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>DEFAULT_ACCOUNTS_PER_BRANCH</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>ACCOUNT_EXTRA</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>BRANCH_EXTRA</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>TELLER_EXTRA</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>HISTORY_EXTRA</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>branches</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>tellersPerBranch</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>accountsPerBranch</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>BankAccountFiller</MethodName>
            <MethodComment>/** 
 * Create a filler that generates tables with the given sizes.
 * @param branches number of branches
 * @param tellersPerBranch number of tellers per branch
 * @param accountsPerBranch number of accounts per branch
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>branches</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tellersPerBranch</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>accountsPerBranch</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>BankAccountFiller</MethodName>
            <MethodComment>/** 
 * Create a filler that generate tables which have correct sizes relative to each other. With scale factor 1, the account table has 100000 rows, the teller table has 10 rows and the branch table has 1 row. If the scale factor is different from 1, the number of rows is multiplied with the scale factor.
 * @param scale the scale factor for this database
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>scale</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fill</MethodName>
            <MethodComment>/** 
 * Populate the database.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>c;setAutoCommit;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>null;dropTables;[c]</InnerMethodInvoke>
                <InnerMethodInvoke>null;createTables;[c]</InnerMethodInvoke>
                <InnerMethodInvoke>null;fillTables;[c]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>dropTables</MethodName>
            <MethodComment>/** 
 * Drop the tables if they exits.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>WisconsinFiller;dropTable;[c, ACCOUNT_TABLE]</InnerMethodInvoke>
                <InnerMethodInvoke>WisconsinFiller;dropTable;[c, BRANCH_TABLE]</InnerMethodInvoke>
                <InnerMethodInvoke>WisconsinFiller;dropTable;[c, TELLER_TABLE]</InnerMethodInvoke>
                <InnerMethodInvoke>WisconsinFiller;dropTable;[c, HISTORY_TABLE]</InnerMethodInvoke>
                <InnerMethodInvoke>c;commit;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createTables</MethodName>
            <MethodComment>/** 
 * Create the tables.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Statement [s=c.createStatement()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>s;executeUpdate;["CREATE TABLE " + ACCOUNT_TABLE + "(ACCOUNT_ID INT NOT NULL, "+ "BRANCH_ID INT NOT NULL, "+ "ACCOUNT_BALANCE BIGINT NOT NULL, "+ "EXTRA_DATA CHAR("+ ACCOUNT_EXTRA+ ") NOT NULL)"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;executeUpdate;["CREATE TABLE " + BRANCH_TABLE + "(BRANCH_ID INT NOT NULL, "+ "BRANCH_BALANCE BIGINT NOT NULL, "+ "EXTRA_DATA CHAR("+ BRANCH_EXTRA+ ") NOT NULL)"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;executeUpdate;["CREATE TABLE " + TELLER_TABLE + "(TELLER_ID INT NOT NULL, "+ "BRANCH_ID INT NOT NULL, "+ "TELLER_BALANCE INT NOT NULL, "+ "EXTRA_DATA CHAR("+ TELLER_EXTRA+ ") NOT NULL)"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;executeUpdate;["CREATE TABLE " + HISTORY_TABLE + "(ACCOUNT_ID INT NOT NULL, "+ "TELLER_ID INT NOT NULL, "+ "BRANCH_ID INT NOT NULL, "+ "AMOUNT BIGINT NOT NULL, "+ "TIME_STAMP TIMESTAMP NOT NULL, "+ "EXTRA_DATA CHAR("+ HISTORY_EXTRA+ ") NOT NULL)"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>c;commit;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fillTables</MethodName>
            <MethodComment>/** 
 * Fill the tables with rows.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Statement [s=c.createStatement()]</InnerVar>
                <InnerVar>PreparedStatement [atIns=c.prepareStatement("INSERT INTO " + ACCOUNT_TABLE + "(ACCOUNT_ID, BRANCH_ID, ACCOUNT_BALANCE, "+ "EXTRA_DATA) VALUES (?, ?, 0, ?)")]</InnerVar>
                <InnerVar>PreparedStatement [btIns=c.prepareStatement("INSERT INTO " + BRANCH_TABLE + "(BRANCH_ID, BRANCH_BALANCE, EXTRA_DATA) "+ "VALUES (?, 0, ?)")]</InnerVar>
                <InnerVar>PreparedStatement [ttIns=c.prepareStatement("INSERT INTO " + TELLER_TABLE + "(TELLER_ID, BRANCH_ID, TELLER_BALANCE, "+ "EXTRA_DATA) VALUES (?, ?, 0, ?)")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>atIns;setString;[3, createJunk(ACCOUNT_EXTRA)]</InnerMethodInvoke>
                <InnerMethodInvoke>atIns;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>s;executeUpdate;["ALTER TABLE " + ACCOUNT_TABLE + " ADD CONSTRAINT "+ ACCOUNT_TABLE+ "_PK PRIMARY KEY (ACCOUNT_ID)"]</InnerMethodInvoke>
                <InnerMethodInvoke>c;commit;[]</InnerMethodInvoke>
                <InnerMethodInvoke>btIns;setString;[2, createJunk(BRANCH_EXTRA)]</InnerMethodInvoke>
                <InnerMethodInvoke>btIns;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>s;executeUpdate;["ALTER TABLE " + BRANCH_TABLE + " ADD CONSTRAINT "+ BRANCH_TABLE+ "_PK PRIMARY KEY (BRANCH_ID)"]</InnerMethodInvoke>
                <InnerMethodInvoke>c;commit;[]</InnerMethodInvoke>
                <InnerMethodInvoke>ttIns;setString;[3, createJunk(TELLER_EXTRA)]</InnerMethodInvoke>
                <InnerMethodInvoke>ttIns;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>s;executeUpdate;["ALTER TABLE " + TELLER_TABLE + " ADD CONSTRAINT "+ TELLER_TABLE+ "_PK PRIMARY KEY (TELLER_ID)"]</InnerMethodInvoke>
                <InnerMethodInvoke>c;commit;[]</InnerMethodInvoke>
                <InnerMethodInvoke>s;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createJunk</MethodName>
            <MethodComment>/** 
 * Return a string of the specified length that can be used to increase the size of the rows. The string only contains x's. The rows have a defined minimum size in bytes, whereas the string length is in characters. For now, we assume that one character maps to one byte on the disk as long as the string only contains ASCII characters.
 * @param length the length of the string
 * @return a string of the specified length
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>length</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>char[] [junk=new char[length]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>Arrays;fill;[junk, 'x']</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>