<Class>
    <Id>779</Id>
    <Package>org.apache.derby.iapi.services.locks</Package>
    <ClassName>Lockable</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Lockable  /** 
 * Any object that needs to be locked must implement Lockable. This allows a generic lock manager that can have locking policies defined on a per-object basis. A request to lock the object takes a qualifier, this qualifier may be used the object to implement a complex locking policy, e.g. traditional database shared, update and exclusive locks.  &lt;P&gt; The lock manager uses this ordered protocol to determine if a lock request on a Lockable &lt;TT&gt; L &lt;/TT&gt; with qualifier &lt;TT&gt; Q1 &lt;/TT&gt; in compatibility space &lt;TT&gt; CS1 &lt;/TT&gt; can be granted: &lt;OL&gt; &lt;LI&gt;If no locks are held on &lt;TT&gt; L &lt;/TT&gt; in any compatability space then the request is granted. &lt;LI&gt;If &lt;TT&gt;L.requestCompatible(Q1)&lt;/TT&gt; returns true then the lock is granted. &lt;LI&gt;Otherwise the request is granted if the following expression evaluates to true for every other lock &lt;TT&gt;{ CSn, Qn}&lt;/TT&gt; held on &lt;TT&gt; L &lt;/TT&gt; &lt;UL&gt; &lt;LI&gt; &lt;PRE&gt;    ( ( CSn == CS1 ) &amp;amp;&amp;amp; L.lockerAlwaysCompatible() ) &lt;/PRE&gt; &lt;LI&gt; &lt;PRE&gt; || (L.reqestCompatible(Q1, Qn)) &lt;/PRE&gt; &lt;/UL&gt; &lt;/OL&gt; &lt;BR&gt; If the request is granted then a call is made to &lt;TT&gt; L.lockEvent(CS1, Q1) &lt;/TT&gt;. &lt;BR&gt; When the lock is released a call is made to &lt;TT&gt; L.unlockEvent(CS1, Q1) &lt;/TT&gt;. &lt;P&gt; The lock manager uses equals() and hashCode() to identify unique Lockables. &lt;BR&gt; If the class implementing Lockable requires that each instance of class correspond to a different locked object then the equals() method must test equality via the reference equality test (==), this is the default behaviour for equality. &lt;BR&gt; If the class implementing Lockable require that each instance of the class that has the same value (as defined by the class) corresponds to a locked object then its equals() method must reflect that, e.g. by testing equality of its fields. In this case the first Lockable to be locked will be kept by lock manager as the key for the lock. Thus even after the first caller unlocks the object, its reference will still be kept by the lock manager. Thus Lockable's that per value equality must be designed so that they are never re-used for different lockable concepts. &lt;BR&gt; In either case the equals() method must accept a reference to an object of a different type. &lt;BR&gt; As per standard hashtable rules the value returned by hashCode() must be in sync with the equals() method. &lt;BR&gt; MT - Mutable - : single thread required, synchronization is provided by the lock manager. If the class implementing Lockable uses value equality then it must have an immutable identity.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>lockEvent</MethodName>
            <MethodComment>/** 
 * Note the fact the object is locked. Performs required actions to ensure that unlockEvent() work correctly. This method does not actually  perform any locking of the object, the locking mechanism is provided by the lock manager. &lt;P&gt; If the class supports multiple lockers of the object then this method will be called once per locker, each with their own qualifier. &lt;P&gt; Must only be called by the lock manager. Synchronization will be handled by the lock manager.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lockInfo</ParamName>
                    <ParamType>Latch</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>requestCompatible</MethodName>
            <MethodComment>/** 
 * Return true if the requested qualifier is compatible with the already granted qualifier.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>requestedQualifier</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>grantedQualifier</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>lockerAlwaysCompatible</MethodName>
            <MethodComment>/** 
 * Returns true if any lock request on a Lockable L in a compatibility space CS1 is compatible with any other lock held on L in CS1.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>unlockEvent</MethodName>
            <MethodComment>/** 
 * Note that the object has been unlocked  &lt;P&gt; Must only be called by the lock manager. Synchronization will be handled by the lock manager.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lockInfo</ParamName>
                    <ParamType>Latch</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>lockAttributes</MethodName>
            <MethodComment>/** 
 * If this lockable object wants to participate in a diagnostic virtual lock table, then put any relevant attributes of this lock into the attributes list (the attribute must be an immutable object).  The list of attributes of interest to the virtual lock table can be found in VirtualLockTable. The toString method will be called by the VirtualTable on the attribute value for display.  &lt;P&gt;
 * @param flag use the bits in this int to decide if the user isinterested in this kind of lockable object.  The bits are defined in VirtualLockTable.  For instance, the user may only ask for TABLE_AND_ROWLOCK and if this is not a table or row lock, then don't participate.
 * @param attributes if this decides to participate, put all relevantattributes into the Hashtable.  The complete list of interesting attributes is listed in VirtualLockTable. The following attributes must be present for all participating lockables: VirtualLockTable.LOCKNAME, VirtualLockTable.LOCKTYPE, either VirtualLockTable.CONTAINERID or VirtualLockTable.CONGLOMID, &lt;P&gt; MT - this routine must be MP safe, caller will not be single threading the lock manager. &lt;P&gt;
 * @return true if this object has diagnostic information to add to thevirtual lock table.  If this object either does not want to participate in the diagnostic virtual lock table or none of the attributes requested are attributes of this lock, returns false.
 * @see VirtualLockTable
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>flag</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>attributes</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>