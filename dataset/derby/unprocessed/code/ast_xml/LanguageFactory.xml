<Class>
    <Id>1896</Id>
    <Package>org.apache.derby.iapi.sql</Package>
    <ClassName>LanguageFactory</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>LanguageFactory  /** 
 * Factory interface for the Language.Interface protocol. This is used via the Database API by users, and is presented as a System Module (not a service module).  That could change, but for now this is valid for any database. 
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>MODULE</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>newParameterValueSet</MethodName>
            <MethodComment>/** 
 * Get a ParameterValueSet
 * @param numParms	The number of parameters in theParameterValueSet
 * @param hasReturnParam	true if this parameter sethas a return parameter.  The return parameter is always the 1st parameter in the list.  It is due to a callableStatement like this: &lt;i&gt; ? = CALL myMethod()&lt;/i&gt;
 * @return	A new ParameterValueSet with the given number of parms
 */
</MethodComment>
            <ReturnType>ParameterValueSet</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ci</ParamName>
                    <ParamType>ClassInspector</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>numParms</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>hasReturnParam</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getResultDescription</MethodName>
            <MethodComment>/** 
 * Get a new result description from the input result description.  Picks only the columns in the column array from the inputResultDescription.
 * @param inputResultDescription the input rd
 * @param theCols non null array of ints
 * @return ResultDescription the rd
 */
</MethodComment>
            <ReturnType>ResultDescription</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>inputResultDescription</ParamName>
                    <ParamType>ResultDescription</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>theCols</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getResultDescription</MethodName>
            <MethodComment>/** 
 * Get a new result description
 * @param cols an array of col descriptors
 * @param type the statement type
 * @return ResultDescription the rd
 */
</MethodComment>
            <ReturnType>ResultDescription</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cols</ParamName>
                    <ParamType>ResultColumnDescriptor[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>