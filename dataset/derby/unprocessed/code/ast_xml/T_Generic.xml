<Class>
    <Id>112</Id>
    <Package>org.apache.derbyTesting.unitTests.harness</Package>
    <ClassName>T_Generic</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>UnitTest</SuperInterface>
        <SuperInterface>ModuleControl</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>T_Generic  /** 
 * Abstract class which executes a unit test. &lt;P&gt;To write a test,	extend this class with a class which implements the two abstract methods: &lt;UL&gt;	 &lt;LI&gt;runTests &lt;LI&gt;setUp &lt;/UL&gt;
 * @see UnitTest
 * @see ModuleControl
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>shortModuleToTestName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>startParams</FieldName>
            <FieldType>Properties</FieldType>
        </Field>
        <Field>
            <FieldName>out</FieldName>
            <FieldType>HeaderPrintWriter</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>T_Generic</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>boot</MethodName>
            <MethodComment>/** 
 * ModuleControl.start
 * @see ModuleControl#boot
 * @exception StandardException Module cannot be started.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>create</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>startParams</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>stop</MethodName>
            <MethodComment>/** 
 * ModuleControl.stop
 * @see ModuleControl#stop
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>Execute</MethodName>
            <MethodComment>/** 
 * UnitTest.Execute
 * @see UnitTest#Execute
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>HeaderPrintWriter</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [myClass=this.getClass().getName()]</InnerVar>
                <InnerVar>String [testName=myClass.substring(myClass.lastIndexOf('.') + 1)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>System.out;println;["-- Unit Test " + testName + " starting"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;["-- Unit Test " + testName + " finished"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>UnitTestDuration</MethodName>
            <MethodComment>/** 
 * UnitTest.UnitTestDuration
 * @return UnitTestConstants.DURATION_MICRO
 * @see UnitTest#UnitTestDuration
 * @see UnitTestConstants
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>UnitTestType</MethodName>
            <MethodComment>/** 
 * UnitTest.UnitTestType
 * @return UnitTestConstants.TYPE_COMMON
 * @see UnitTest#UnitTestType
 * @see UnitTestConstants
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>FAIL</MethodName>
            <MethodComment>/** 
 * Emit a message indicating why the test failed. RESOLVE: Should this be localized?
 * @param msg the message.
 * @return false
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>msg</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>out;println;["[" + Thread.currentThread().getName() + "] FAIL - "+ msg]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PASS</MethodName>
            <MethodComment>/** 
 * Emit a message saying the test passed. You may use this to emit messages indicating individual test cases within a unit test passed. &lt;P&gt;RESOLVE:Localize this.
 * @param testName the test which passed.
 * @return true
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>testName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>out;println;["[" + Thread.currentThread().getName() + "] Pass - "+ shortModuleToTestName+ " "+ testName]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>REPORT</MethodName>
            <MethodComment>/** 
 * Emit a message during a unit test run, indent the message to allow the PASS/FAIL messages to stand out.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>msg</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>out;println;["[" + Thread.currentThread().getName() + "]     "+ msg]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>runTests</MethodName>
            <MethodComment>/** 
 * Run the test. The test should raise an exception if it fails. runTests should return if the tests pass.
 * @exception Exception Test code throws these
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getModuleToTestProtocolName</MethodName>
            <MethodComment>/** 
 * Get the name of the protocol for the module to test. This is the 'factory.MODULE' variable. 'moduleName' to the name of the module to test. 
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>